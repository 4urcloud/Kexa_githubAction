/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmEdgegateway = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Address = {
        serializedName: "Address",
        type: {
            name: "Composite",
            className: "Address",
            modelProperties: {
                addressLine1: {
                    required: true,
                    serializedName: "addressLine1",
                    type: {
                        name: "String"
                    }
                },
                addressLine2: {
                    serializedName: "addressLine2",
                    type: {
                        name: "String"
                    }
                },
                addressLine3: {
                    serializedName: "addressLine3",
                    type: {
                        name: "String"
                    }
                },
                postalCode: {
                    required: true,
                    serializedName: "postalCode",
                    type: {
                        name: "String"
                    }
                },
                city: {
                    required: true,
                    serializedName: "city",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                country: {
                    required: true,
                    serializedName: "country",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AlertErrorDetails = {
        serializedName: "AlertErrorDetails",
        type: {
            name: "Composite",
            className: "AlertErrorDetails",
            modelProperties: {
                errorCode: {
                    readOnly: true,
                    serializedName: "errorCode",
                    type: {
                        name: "String"
                    }
                },
                errorMessage: {
                    readOnly: true,
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                },
                occurrences: {
                    readOnly: true,
                    serializedName: "occurrences",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ARMBaseModel = {
        serializedName: "ARMBaseModel",
        type: {
            name: "Composite",
            className: "ARMBaseModel",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Alert = {
        serializedName: "Alert",
        type: {
            name: "Composite",
            className: "Alert",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { title: {
                    readOnly: true,
                    serializedName: "properties.title",
                    type: {
                        name: "String"
                    }
                }, alertType: {
                    readOnly: true,
                    serializedName: "properties.alertType",
                    type: {
                        name: "String"
                    }
                }, appearedAtDateTime: {
                    readOnly: true,
                    serializedName: "properties.appearedAtDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, recommendation: {
                    readOnly: true,
                    serializedName: "properties.recommendation",
                    type: {
                        name: "String"
                    }
                }, severity: {
                    readOnly: true,
                    serializedName: "properties.severity",
                    type: {
                        name: "String"
                    }
                }, errorDetails: {
                    readOnly: true,
                    serializedName: "properties.errorDetails",
                    type: {
                        name: "Composite",
                        className: "AlertErrorDetails"
                    }
                }, detailedInformation: {
                    readOnly: true,
                    serializedName: "properties.detailedInformation",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AsymmetricEncryptedSecret = {
        serializedName: "AsymmetricEncryptedSecret",
        type: {
            name: "Composite",
            className: "AsymmetricEncryptedSecret",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                encryptionCertThumbprint: {
                    serializedName: "encryptionCertThumbprint",
                    type: {
                        name: "String"
                    }
                },
                encryptionAlgorithm: {
                    required: true,
                    serializedName: "encryptionAlgorithm",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SymmetricKey = {
        serializedName: "SymmetricKey",
        type: {
            name: "Composite",
            className: "SymmetricKey",
            modelProperties: {
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }
            }
        }
    };
    var Authentication = {
        serializedName: "Authentication",
        type: {
            name: "Composite",
            className: "Authentication",
            modelProperties: {
                symmetricKey: {
                    serializedName: "symmetricKey",
                    type: {
                        name: "Composite",
                        className: "SymmetricKey"
                    }
                }
            }
        }
    };
    var AzureContainerInfo = {
        serializedName: "AzureContainerInfo",
        type: {
            name: "Composite",
            className: "AzureContainerInfo",
            modelProperties: {
                storageAccountCredentialId: {
                    required: true,
                    serializedName: "storageAccountCredentialId",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    required: true,
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                },
                dataFormat: {
                    required: true,
                    serializedName: "dataFormat",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BandwidthSchedule = {
        serializedName: "BandwidthSchedule",
        type: {
            name: "Composite",
            className: "BandwidthSchedule",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { start: {
                    required: true,
                    serializedName: "properties.start",
                    type: {
                        name: "String"
                    }
                }, stop: {
                    required: true,
                    serializedName: "properties.stop",
                    type: {
                        name: "String"
                    }
                }, rateInMbps: {
                    required: true,
                    serializedName: "properties.rateInMbps",
                    type: {
                        name: "Number"
                    }
                }, days: {
                    required: true,
                    serializedName: "properties.days",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ClientAccessRight = {
        serializedName: "ClientAccessRight",
        type: {
            name: "Composite",
            className: "ClientAccessRight",
            modelProperties: {
                client: {
                    required: true,
                    serializedName: "client",
                    type: {
                        name: "String"
                    }
                },
                accessPermission: {
                    required: true,
                    serializedName: "accessPermission",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContactDetails = {
        serializedName: "ContactDetails",
        type: {
            name: "Composite",
            className: "ContactDetails",
            modelProperties: {
                contactPerson: {
                    required: true,
                    serializedName: "contactPerson",
                    type: {
                        name: "String"
                    }
                },
                companyName: {
                    required: true,
                    serializedName: "companyName",
                    type: {
                        name: "String"
                    }
                },
                phone: {
                    required: true,
                    serializedName: "phone",
                    type: {
                        name: "String"
                    }
                },
                emailList: {
                    required: true,
                    serializedName: "emailList",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataBoxEdgeDevice = {
        serializedName: "DataBoxEdgeDevice",
        type: {
            name: "Composite",
            className: "DataBoxEdgeDevice",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                }, etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, dataBoxEdgeDeviceStatus: {
                    serializedName: "properties.dataBoxEdgeDeviceStatus",
                    type: {
                        name: "String"
                    }
                }, serialNumber: {
                    readOnly: true,
                    serializedName: "properties.serialNumber",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, modelDescription: {
                    serializedName: "properties.modelDescription",
                    type: {
                        name: "String"
                    }
                }, deviceType: {
                    readOnly: true,
                    serializedName: "properties.deviceType",
                    type: {
                        name: "String"
                    }
                }, friendlyName: {
                    serializedName: "properties.friendlyName",
                    type: {
                        name: "String"
                    }
                }, culture: {
                    readOnly: true,
                    serializedName: "properties.culture",
                    type: {
                        name: "String"
                    }
                }, deviceModel: {
                    readOnly: true,
                    serializedName: "properties.deviceModel",
                    type: {
                        name: "String"
                    }
                }, deviceSoftwareVersion: {
                    readOnly: true,
                    serializedName: "properties.deviceSoftwareVersion",
                    type: {
                        name: "String"
                    }
                }, deviceLocalCapacity: {
                    readOnly: true,
                    serializedName: "properties.deviceLocalCapacity",
                    type: {
                        name: "Number"
                    }
                }, timeZone: {
                    readOnly: true,
                    serializedName: "properties.timeZone",
                    type: {
                        name: "String"
                    }
                }, deviceHcsVersion: {
                    readOnly: true,
                    serializedName: "properties.deviceHcsVersion",
                    type: {
                        name: "String"
                    }
                }, configuredRoleTypes: {
                    readOnly: true,
                    serializedName: "properties.configuredRoleTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var DataBoxEdgeDeviceExtendedInfo = {
        serializedName: "DataBoxEdgeDeviceExtendedInfo",
        type: {
            name: "Composite",
            className: "DataBoxEdgeDeviceExtendedInfo",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { encryptionKeyThumbprint: {
                    serializedName: "properties.encryptionKeyThumbprint",
                    type: {
                        name: "String"
                    }
                }, encryptionKey: {
                    serializedName: "properties.encryptionKey",
                    type: {
                        name: "String"
                    }
                }, resourceKey: {
                    readOnly: true,
                    serializedName: "properties.resourceKey",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataBoxEdgeDevicePatch = {
        serializedName: "DataBoxEdgeDevicePatch",
        type: {
            name: "Composite",
            className: "DataBoxEdgeDevicePatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var FileSourceInfo = {
        serializedName: "FileSourceInfo",
        type: {
            name: "Composite",
            className: "FileSourceInfo",
            modelProperties: {
                shareId: {
                    required: true,
                    serializedName: "shareId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleSinkInfo = {
        serializedName: "RoleSinkInfo",
        type: {
            name: "Composite",
            className: "RoleSinkInfo",
            modelProperties: {
                roleId: {
                    required: true,
                    serializedName: "roleId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Trigger = {
        serializedName: "Trigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "BaseResource",
            className: "Trigger",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var FileEventTrigger = {
        serializedName: "FileEvent",
        type: {
            name: "Composite",
            className: "FileEventTrigger",
            modelProperties: __assign(__assign({}, Trigger.type.modelProperties), { sourceInfo: {
                    required: true,
                    serializedName: "properties.sourceInfo",
                    type: {
                        name: "Composite",
                        className: "FileSourceInfo"
                    }
                }, sinkInfo: {
                    required: true,
                    serializedName: "properties.sinkInfo",
                    type: {
                        name: "Composite",
                        className: "RoleSinkInfo"
                    }
                }, customContextTag: {
                    serializedName: "properties.customContextTag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IoTDeviceInfo = {
        serializedName: "IoTDeviceInfo",
        type: {
            name: "Composite",
            className: "IoTDeviceInfo",
            modelProperties: {
                deviceId: {
                    required: true,
                    serializedName: "deviceId",
                    type: {
                        name: "String"
                    }
                },
                ioTHostHub: {
                    required: true,
                    serializedName: "ioTHostHub",
                    type: {
                        name: "String"
                    }
                },
                authentication: {
                    serializedName: "authentication",
                    type: {
                        name: "Composite",
                        className: "Authentication"
                    }
                }
            }
        }
    };
    var MountPointMap = {
        serializedName: "MountPointMap",
        type: {
            name: "Composite",
            className: "MountPointMap",
            modelProperties: {
                shareId: {
                    required: true,
                    serializedName: "shareId",
                    type: {
                        name: "String"
                    }
                },
                roleId: {
                    readOnly: true,
                    serializedName: "roleId",
                    type: {
                        name: "String"
                    }
                },
                mountPoint: {
                    readOnly: true,
                    serializedName: "mountPoint",
                    type: {
                        name: "String"
                    }
                },
                roleType: {
                    readOnly: true,
                    serializedName: "roleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Role = {
        serializedName: "Role",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "BaseResource",
            className: "Role",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var IoTRole = {
        serializedName: "IOT",
        type: {
            name: "Composite",
            className: "IoTRole",
            modelProperties: __assign(__assign({}, Role.type.modelProperties), { hostPlatform: {
                    required: true,
                    serializedName: "properties.hostPlatform",
                    type: {
                        name: "String"
                    }
                }, ioTDeviceDetails: {
                    required: true,
                    serializedName: "properties.ioTDeviceDetails",
                    type: {
                        name: "Composite",
                        className: "IoTDeviceInfo"
                    }
                }, ioTEdgeDeviceDetails: {
                    required: true,
                    serializedName: "properties.ioTEdgeDeviceDetails",
                    type: {
                        name: "Composite",
                        className: "IoTDeviceInfo"
                    }
                }, shareMappings: {
                    serializedName: "properties.shareMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MountPointMap"
                            }
                        }
                    }
                }, roleStatus: {
                    required: true,
                    serializedName: "properties.roleStatus",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var Ipv4Config = {
        serializedName: "Ipv4Config",
        type: {
            name: "Composite",
            className: "Ipv4Config",
            modelProperties: {
                ipAddress: {
                    readOnly: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                subnet: {
                    readOnly: true,
                    serializedName: "subnet",
                    type: {
                        name: "String"
                    }
                },
                gateway: {
                    readOnly: true,
                    serializedName: "gateway",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Ipv6Config = {
        serializedName: "Ipv6Config",
        type: {
            name: "Composite",
            className: "Ipv6Config",
            modelProperties: {
                ipAddress: {
                    readOnly: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                prefixLength: {
                    readOnly: true,
                    serializedName: "prefixLength",
                    type: {
                        name: "Number"
                    }
                },
                gateway: {
                    readOnly: true,
                    serializedName: "gateway",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobErrorItem = {
        serializedName: "JobErrorItem",
        type: {
            name: "Composite",
            className: "JobErrorItem",
            modelProperties: {
                recommendations: {
                    readOnly: true,
                    serializedName: "recommendations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobErrorDetails = {
        serializedName: "JobErrorDetails",
        type: {
            name: "Composite",
            className: "JobErrorDetails",
            modelProperties: {
                errorDetails: {
                    readOnly: true,
                    serializedName: "errorDetails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobErrorItem"
                            }
                        }
                    }
                },
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateDownloadProgress = {
        serializedName: "UpdateDownloadProgress",
        type: {
            name: "Composite",
            className: "UpdateDownloadProgress",
            modelProperties: {
                downloadPhase: {
                    readOnly: true,
                    serializedName: "downloadPhase",
                    type: {
                        name: "String"
                    }
                },
                percentComplete: {
                    readOnly: true,
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                },
                totalBytesToDownload: {
                    readOnly: true,
                    serializedName: "totalBytesToDownload",
                    type: {
                        name: "Number"
                    }
                },
                totalBytesDownloaded: {
                    readOnly: true,
                    serializedName: "totalBytesDownloaded",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesToDownload: {
                    readOnly: true,
                    serializedName: "numberOfUpdatesToDownload",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesDownloaded: {
                    readOnly: true,
                    serializedName: "numberOfUpdatesDownloaded",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpdateInstallProgress = {
        serializedName: "UpdateInstallProgress",
        type: {
            name: "Composite",
            className: "UpdateInstallProgress",
            modelProperties: {
                percentComplete: {
                    readOnly: true,
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesToInstall: {
                    readOnly: true,
                    serializedName: "numberOfUpdatesToInstall",
                    type: {
                        name: "Number"
                    }
                },
                numberOfUpdatesInstalled: {
                    readOnly: true,
                    serializedName: "numberOfUpdatesInstalled",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Job = {
        serializedName: "Job",
        type: {
            name: "Composite",
            className: "Job",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                percentComplete: {
                    readOnly: true,
                    serializedName: "percentComplete",
                    type: {
                        name: "Number"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "JobErrorDetails"
                    }
                },
                jobType: {
                    readOnly: true,
                    serializedName: "properties.jobType",
                    type: {
                        name: "String"
                    }
                },
                currentStage: {
                    readOnly: true,
                    serializedName: "properties.currentStage",
                    type: {
                        name: "String"
                    }
                },
                downloadProgress: {
                    readOnly: true,
                    serializedName: "properties.downloadProgress",
                    type: {
                        name: "Composite",
                        className: "UpdateDownloadProgress"
                    }
                },
                installProgress: {
                    readOnly: true,
                    serializedName: "properties.installProgress",
                    type: {
                        name: "Composite",
                        className: "UpdateInstallProgress"
                    }
                },
                totalRefreshErrors: {
                    readOnly: true,
                    serializedName: "properties.totalRefreshErrors",
                    type: {
                        name: "Number"
                    }
                },
                errorManifestFile: {
                    readOnly: true,
                    serializedName: "properties.errorManifestFile",
                    type: {
                        name: "String"
                    }
                },
                shareId: {
                    readOnly: true,
                    serializedName: "properties.shareId",
                    type: {
                        name: "String"
                    }
                },
                folder: {
                    serializedName: "properties.folder",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MetricDimensionV1 = {
        serializedName: "MetricDimension_V1",
        type: {
            name: "Composite",
            className: "MetricDimensionV1",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                toBeExportedForShoebox: {
                    serializedName: "toBeExportedForShoebox",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MetricSpecificationV1 = {
        serializedName: "MetricSpecification_V1",
        type: {
            name: "Composite",
            className: "MetricSpecificationV1",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                displayDescription: {
                    serializedName: "displayDescription",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                dimensions: {
                    serializedName: "dimensions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricDimensionV1"
                            }
                        }
                    }
                },
                fillGapWithZero: {
                    serializedName: "fillGapWithZero",
                    type: {
                        name: "Boolean"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                resourceIdDimensionNameOverride: {
                    serializedName: "resourceIdDimensionNameOverride",
                    type: {
                        name: "String"
                    }
                },
                supportedTimeGrainTypes: {
                    serializedName: "supportedTimeGrainTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                supportedAggregationTypes: {
                    serializedName: "supportedAggregationTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkAdapterPosition = {
        serializedName: "NetworkAdapterPosition",
        type: {
            name: "Composite",
            className: "NetworkAdapterPosition",
            modelProperties: {
                networkGroup: {
                    readOnly: true,
                    serializedName: "networkGroup",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    readOnly: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var NetworkAdapter = {
        serializedName: "NetworkAdapter",
        type: {
            name: "Composite",
            className: "NetworkAdapter",
            modelProperties: {
                adapterId: {
                    readOnly: true,
                    serializedName: "adapterId",
                    type: {
                        name: "String"
                    }
                },
                adapterPosition: {
                    readOnly: true,
                    serializedName: "adapterPosition",
                    type: {
                        name: "Composite",
                        className: "NetworkAdapterPosition"
                    }
                },
                index: {
                    readOnly: true,
                    serializedName: "index",
                    type: {
                        name: "Number"
                    }
                },
                nodeId: {
                    readOnly: true,
                    serializedName: "nodeId",
                    type: {
                        name: "String"
                    }
                },
                networkAdapterName: {
                    readOnly: true,
                    serializedName: "networkAdapterName",
                    type: {
                        name: "String"
                    }
                },
                label: {
                    readOnly: true,
                    serializedName: "label",
                    type: {
                        name: "String"
                    }
                },
                macAddress: {
                    readOnly: true,
                    serializedName: "macAddress",
                    type: {
                        name: "String"
                    }
                },
                linkSpeed: {
                    readOnly: true,
                    serializedName: "linkSpeed",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                rdmaStatus: {
                    serializedName: "rdmaStatus",
                    type: {
                        name: "String"
                    }
                },
                dhcpStatus: {
                    serializedName: "dhcpStatus",
                    type: {
                        name: "String"
                    }
                },
                ipv4Configuration: {
                    readOnly: true,
                    serializedName: "ipv4Configuration",
                    type: {
                        name: "Composite",
                        className: "Ipv4Config"
                    }
                },
                ipv6Configuration: {
                    readOnly: true,
                    serializedName: "ipv6Configuration",
                    type: {
                        name: "Composite",
                        className: "Ipv6Config"
                    }
                },
                ipv6LinkLocalAddress: {
                    readOnly: true,
                    serializedName: "ipv6LinkLocalAddress",
                    type: {
                        name: "String"
                    }
                },
                dnsServers: {
                    readOnly: true,
                    serializedName: "dnsServers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkSettings = {
        serializedName: "NetworkSettings",
        type: {
            name: "Composite",
            className: "NetworkSettings",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { networkAdapters: {
                    readOnly: true,
                    serializedName: "properties.networkAdapters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkAdapter"
                            }
                        }
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceSpecification = {
        serializedName: "ServiceSpecification",
        type: {
            name: "Composite",
            className: "ServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MetricSpecificationV1"
                            }
                        }
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                serviceSpecification: {
                    serializedName: "properties.serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "ServiceSpecification"
                    }
                }
            }
        }
    };
    var OrderStatus = {
        serializedName: "OrderStatus",
        type: {
            name: "Composite",
            className: "OrderStatus",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                updateDateTime: {
                    readOnly: true,
                    serializedName: "updateDateTime",
                    type: {
                        name: "DateTime"
                    }
                },
                comments: {
                    serializedName: "comments",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackingInfo = {
        serializedName: "TrackingInfo",
        type: {
            name: "Composite",
            className: "TrackingInfo",
            modelProperties: {
                serialNumber: {
                    serializedName: "serialNumber",
                    type: {
                        name: "String"
                    }
                },
                carrierName: {
                    serializedName: "carrierName",
                    type: {
                        name: "String"
                    }
                },
                trackingId: {
                    serializedName: "trackingId",
                    type: {
                        name: "String"
                    }
                },
                trackingUrl: {
                    serializedName: "trackingUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Order = {
        serializedName: "Order",
        type: {
            name: "Composite",
            className: "Order",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { contactInformation: {
                    required: true,
                    serializedName: "properties.contactInformation",
                    type: {
                        name: "Composite",
                        className: "ContactDetails"
                    }
                }, shippingAddress: {
                    required: true,
                    serializedName: "properties.shippingAddress",
                    type: {
                        name: "Composite",
                        className: "Address"
                    }
                }, currentStatus: {
                    serializedName: "properties.currentStatus",
                    type: {
                        name: "Composite",
                        className: "OrderStatus"
                    }
                }, orderHistory: {
                    readOnly: true,
                    serializedName: "properties.orderHistory",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrderStatus"
                            }
                        }
                    }
                }, serialNumber: {
                    readOnly: true,
                    serializedName: "properties.serialNumber",
                    type: {
                        name: "String"
                    }
                }, deliveryTrackingInfo: {
                    readOnly: true,
                    serializedName: "properties.deliveryTrackingInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackingInfo"
                            }
                        }
                    }
                }, returnTrackingInfo: {
                    readOnly: true,
                    serializedName: "properties.returnTrackingInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TrackingInfo"
                            }
                        }
                    }
                } })
        }
    };
    var PeriodicTimerSourceInfo = {
        serializedName: "PeriodicTimerSourceInfo",
        type: {
            name: "Composite",
            className: "PeriodicTimerSourceInfo",
            modelProperties: {
                startTime: {
                    required: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                schedule: {
                    required: true,
                    serializedName: "schedule",
                    type: {
                        name: "String"
                    }
                },
                topic: {
                    serializedName: "topic",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PeriodicTimerEventTrigger = {
        serializedName: "PeriodicTimerEvent",
        type: {
            name: "Composite",
            className: "PeriodicTimerEventTrigger",
            modelProperties: __assign(__assign({}, Trigger.type.modelProperties), { sourceInfo: {
                    required: true,
                    serializedName: "properties.sourceInfo",
                    type: {
                        name: "Composite",
                        className: "PeriodicTimerSourceInfo"
                    }
                }, sinkInfo: {
                    required: true,
                    serializedName: "properties.sinkInfo",
                    type: {
                        name: "Composite",
                        className: "RoleSinkInfo"
                    }
                }, customContextTag: {
                    serializedName: "properties.customContextTag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RefreshDetails = {
        serializedName: "RefreshDetails",
        type: {
            name: "Composite",
            className: "RefreshDetails",
            modelProperties: {
                inProgressRefreshJobId: {
                    serializedName: "inProgressRefreshJobId",
                    type: {
                        name: "String"
                    }
                },
                lastCompletedRefreshJobTimeInUTC: {
                    serializedName: "lastCompletedRefreshJobTimeInUTC",
                    type: {
                        name: "DateTime"
                    }
                },
                errorManifestFile: {
                    serializedName: "errorManifestFile",
                    type: {
                        name: "String"
                    }
                },
                lastJob: {
                    serializedName: "lastJob",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecuritySettings = {
        serializedName: "SecuritySettings",
        type: {
            name: "Composite",
            className: "SecuritySettings",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { deviceAdminPassword: {
                    required: true,
                    serializedName: "properties.deviceAdminPassword",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                } })
        }
    };
    var UserAccessRight = {
        serializedName: "UserAccessRight",
        type: {
            name: "Composite",
            className: "UserAccessRight",
            modelProperties: {
                userId: {
                    required: true,
                    serializedName: "userId",
                    type: {
                        name: "String"
                    }
                },
                accessType: {
                    required: true,
                    serializedName: "accessType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Share = {
        serializedName: "Share",
        type: {
            name: "Composite",
            className: "Share",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, shareStatus: {
                    required: true,
                    serializedName: "properties.shareStatus",
                    type: {
                        name: "String"
                    }
                }, monitoringStatus: {
                    required: true,
                    serializedName: "properties.monitoringStatus",
                    type: {
                        name: "String"
                    }
                }, azureContainerInfo: {
                    serializedName: "properties.azureContainerInfo",
                    type: {
                        name: "Composite",
                        className: "AzureContainerInfo"
                    }
                }, accessProtocol: {
                    required: true,
                    serializedName: "properties.accessProtocol",
                    type: {
                        name: "String"
                    }
                }, userAccessRights: {
                    serializedName: "properties.userAccessRights",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserAccessRight"
                            }
                        }
                    }
                }, clientAccessRights: {
                    serializedName: "properties.clientAccessRights",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ClientAccessRight"
                            }
                        }
                    }
                }, refreshDetails: {
                    serializedName: "properties.refreshDetails",
                    type: {
                        name: "Composite",
                        className: "RefreshDetails"
                    }
                }, shareMappings: {
                    readOnly: true,
                    serializedName: "properties.shareMappings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MountPointMap"
                            }
                        }
                    }
                }, dataPolicy: {
                    serializedName: "properties.dataPolicy",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ShareAccessRight = {
        serializedName: "ShareAccessRight",
        type: {
            name: "Composite",
            className: "ShareAccessRight",
            modelProperties: {
                shareId: {
                    required: true,
                    serializedName: "shareId",
                    type: {
                        name: "String"
                    }
                },
                accessType: {
                    required: true,
                    serializedName: "accessType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountCredential = {
        serializedName: "StorageAccountCredential",
        type: {
            name: "Composite",
            className: "StorageAccountCredential",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { alias: {
                    required: true,
                    serializedName: "properties.alias",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                }, accountKey: {
                    serializedName: "properties.accountKey",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }, connectionString: {
                    serializedName: "properties.connectionString",
                    type: {
                        name: "String"
                    }
                }, sslStatus: {
                    required: true,
                    serializedName: "properties.sslStatus",
                    type: {
                        name: "String"
                    }
                }, blobDomainName: {
                    serializedName: "properties.blobDomainName",
                    type: {
                        name: "String"
                    }
                }, accountType: {
                    required: true,
                    serializedName: "properties.accountType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var UpdateSummary = {
        serializedName: "UpdateSummary",
        type: {
            name: "Composite",
            className: "UpdateSummary",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { deviceVersionNumber: {
                    serializedName: "properties.deviceVersionNumber",
                    type: {
                        name: "String"
                    }
                }, friendlyDeviceVersionName: {
                    serializedName: "properties.friendlyDeviceVersionName",
                    type: {
                        name: "String"
                    }
                }, deviceLastScannedDateTime: {
                    serializedName: "properties.deviceLastScannedDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastCompletedScanJobDateTime: {
                    serializedName: "properties.lastCompletedScanJobDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastCompletedDownloadJobDateTime: {
                    readOnly: true,
                    serializedName: "properties.lastCompletedDownloadJobDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastCompletedInstallJobDateTime: {
                    readOnly: true,
                    serializedName: "properties.lastCompletedInstallJobDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, totalNumberOfUpdatesAvailable: {
                    readOnly: true,
                    serializedName: "properties.totalNumberOfUpdatesAvailable",
                    type: {
                        name: "Number"
                    }
                }, totalNumberOfUpdatesPendingDownload: {
                    readOnly: true,
                    serializedName: "properties.totalNumberOfUpdatesPendingDownload",
                    type: {
                        name: "Number"
                    }
                }, totalNumberOfUpdatesPendingInstall: {
                    readOnly: true,
                    serializedName: "properties.totalNumberOfUpdatesPendingInstall",
                    type: {
                        name: "Number"
                    }
                }, rebootBehavior: {
                    readOnly: true,
                    serializedName: "properties.rebootBehavior",
                    type: {
                        name: "String"
                    }
                }, ongoingUpdateOperation: {
                    readOnly: true,
                    serializedName: "properties.ongoingUpdateOperation",
                    type: {
                        name: "String"
                    }
                }, inProgressDownloadJobId: {
                    readOnly: true,
                    serializedName: "properties.inProgressDownloadJobId",
                    type: {
                        name: "String"
                    }
                }, inProgressInstallJobId: {
                    readOnly: true,
                    serializedName: "properties.inProgressInstallJobId",
                    type: {
                        name: "String"
                    }
                }, inProgressDownloadJobStartedDateTime: {
                    readOnly: true,
                    serializedName: "properties.inProgressDownloadJobStartedDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, inProgressInstallJobStartedDateTime: {
                    readOnly: true,
                    serializedName: "properties.inProgressInstallJobStartedDateTime",
                    type: {
                        name: "DateTime"
                    }
                }, updateTitles: {
                    readOnly: true,
                    serializedName: "properties.updateTitles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, totalUpdateSizeInBytes: {
                    readOnly: true,
                    serializedName: "properties.totalUpdateSizeInBytes",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var UploadCertificateRequest = {
        serializedName: "UploadCertificateRequest",
        type: {
            name: "Composite",
            className: "UploadCertificateRequest",
            modelProperties: {
                authenticationType: {
                    serializedName: "properties.authenticationType",
                    type: {
                        name: "String"
                    }
                },
                certificate: {
                    required: true,
                    serializedName: "properties.certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UploadCertificateResponse = {
        serializedName: "UploadCertificateResponse",
        type: {
            name: "Composite",
            className: "UploadCertificateResponse",
            modelProperties: {
                authType: {
                    serializedName: "authType",
                    type: {
                        name: "String"
                    }
                },
                resourceId: {
                    required: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                aadAuthority: {
                    required: true,
                    serializedName: "aadAuthority",
                    type: {
                        name: "String"
                    }
                },
                aadTenantId: {
                    required: true,
                    serializedName: "aadTenantId",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalClientId: {
                    required: true,
                    serializedName: "servicePrincipalClientId",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalObjectId: {
                    required: true,
                    serializedName: "servicePrincipalObjectId",
                    type: {
                        name: "String"
                    }
                },
                azureManagementEndpointAudience: {
                    required: true,
                    serializedName: "azureManagementEndpointAudience",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var User = {
        serializedName: "User",
        type: {
            name: "Composite",
            className: "User",
            modelProperties: __assign(__assign({}, ARMBaseModel.type.modelProperties), { encryptedPassword: {
                    serializedName: "properties.encryptedPassword",
                    type: {
                        name: "Composite",
                        className: "AsymmetricEncryptedSecret"
                    }
                }, shareAccessRights: {
                    serializedName: "properties.shareAccessRights",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ShareAccessRight"
                            }
                        }
                    }
                } })
        }
    };
    var OperationsList = {
        serializedName: "OperationsList",
        type: {
            name: "Composite",
            className: "OperationsList",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataBoxEdgeDeviceList = {
        serializedName: "DataBoxEdgeDeviceList",
        type: {
            name: "Composite",
            className: "DataBoxEdgeDeviceList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataBoxEdgeDevice"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AlertList = {
        serializedName: "AlertList",
        type: {
            name: "Composite",
            className: "AlertList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Alert"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BandwidthSchedulesList = {
        serializedName: "BandwidthSchedulesList",
        type: {
            name: "Composite",
            className: "BandwidthSchedulesList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BandwidthSchedule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OrderList = {
        serializedName: "OrderList",
        type: {
            name: "Composite",
            className: "OrderList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Order"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoleList = {
        serializedName: "RoleList",
        type: {
            name: "Composite",
            className: "RoleList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Role"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ShareList = {
        serializedName: "ShareList",
        type: {
            name: "Composite",
            className: "ShareList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Share"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountCredentialList = {
        serializedName: "StorageAccountCredentialList",
        type: {
            name: "Composite",
            className: "StorageAccountCredentialList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccountCredential"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TriggerList = {
        serializedName: "TriggerList",
        type: {
            name: "Composite",
            className: "TriggerList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Trigger"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserList = {
        serializedName: "UserList",
        type: {
            name: "Composite",
            className: "UserList",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "User"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'BaseResource.FileEvent': FileEventTrigger,
        'BaseResource.IOT': IoTRole,
        'BaseResource.PeriodicTimerEvent': PeriodicTimerEventTrigger,
        'BaseResource.Role': Role,
        'BaseResource.Trigger': Trigger
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Address: Address,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        Alert: Alert,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        SymmetricKey: SymmetricKey,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        ClientAccessRight: ClientAccessRight,
        ContactDetails: ContactDetails,
        Sku: Sku,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        DataBoxEdgeDevicePatch: DataBoxEdgeDevicePatch,
        FileSourceInfo: FileSourceInfo,
        RoleSinkInfo: RoleSinkInfo,
        Trigger: Trigger,
        FileEventTrigger: FileEventTrigger,
        IoTDeviceInfo: IoTDeviceInfo,
        MountPointMap: MountPointMap,
        Role: Role,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        JobErrorItem: JobErrorItem,
        JobErrorDetails: JobErrorDetails,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress,
        Job: Job,
        MetricDimensionV1: MetricDimensionV1,
        MetricSpecificationV1: MetricSpecificationV1,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkAdapter: NetworkAdapter,
        NetworkSettings: NetworkSettings,
        OperationDisplay: OperationDisplay,
        ServiceSpecification: ServiceSpecification,
        Operation: Operation,
        OrderStatus: OrderStatus,
        TrackingInfo: TrackingInfo,
        Order: Order,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        RefreshDetails: RefreshDetails,
        SecuritySettings: SecuritySettings,
        UserAccessRight: UserAccessRight,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        StorageAccountCredential: StorageAccountCredential,
        UpdateSummary: UpdateSummary,
        UploadCertificateRequest: UploadCertificateRequest,
        UploadCertificateResponse: UploadCertificateResponse,
        User: User,
        OperationsList: OperationsList,
        DataBoxEdgeDeviceList: DataBoxEdgeDeviceList,
        AlertList: AlertList,
        BandwidthSchedulesList: BandwidthSchedulesList,
        OrderList: OrderList,
        RoleList: RoleList,
        ShareList: ShareList,
        StorageAccountCredentialList: StorageAccountCredentialList,
        TriggerList: TriggerList,
        UserList: UserList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError,
        MetricDimensionV1: MetricDimensionV1,
        MetricSpecificationV1: MetricSpecificationV1,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationsList: OperationsList,
        ServiceSpecification: ServiceSpecification
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var deviceName = {
        parameterPath: "deviceName",
        mapper: {
            required: true,
            serializedName: "deviceName",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.DataBoxEdge/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        DataBoxEdgeDeviceList: DataBoxEdgeDeviceList,
        DataBoxEdgeDevicePatch: DataBoxEdgeDevicePatch,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        UploadCertificateRequest: UploadCertificateRequest,
        UploadCertificateResponse: UploadCertificateResponse,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Devices. */
    var Devices = /** @class */ (function () {
        /**
         * Create a Devices.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Devices(client) {
            this.client = client;
        }
        Devices.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Devices.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Devices.prototype.get = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates or updates a Data Box Edge/Gateway resource.
         * @param deviceName The device name.
         * @param dataBoxEdgeDevice The resource object.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.DevicesCreateOrUpdateResponse>
         */
        Devices.prototype.createOrUpdate = function (deviceName$$1, dataBoxEdgeDevice, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, dataBoxEdgeDevice, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.deleteMethod = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.update = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * @summary Downloads the updates on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.downloadUpdates = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.beginDownloadUpdates(deviceName$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.getExtendedInformation = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getExtendedInformationOperationSpec, callback);
        };
        /**
         * @summary Installs the updates on the data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.installUpdates = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.beginInstallUpdates(deviceName$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.getNetworkSettings = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getNetworkSettingsOperationSpec, callback);
        };
        /**
         * @summary Scans for updates on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.scanForUpdates = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.beginScanForUpdates(deviceName$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates the security settings on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param deviceAdminPassword Device administrator password as an encrypted string (encrypted using
         * RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should
         * have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special
         * characters.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Devices.prototype.createOrUpdateSecuritySettings = function (deviceName$$1, resourceGroupName$$1, deviceAdminPassword, options) {
            return this.beginCreateOrUpdateSecuritySettings(deviceName$$1, resourceGroupName$$1, deviceAdminPassword, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Devices.prototype.getUpdateSummary = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getUpdateSummaryOperationSpec, callback);
        };
        Devices.prototype.uploadCertificate = function (deviceName$$1, resourceGroupName$$1, certificate, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                certificate: certificate,
                options: options
            }, uploadCertificateOperationSpec, callback);
        };
        /**
         * Creates or updates a Data Box Edge/Gateway resource.
         * @param deviceName The device name.
         * @param dataBoxEdgeDevice The resource object.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginCreateOrUpdate = function (deviceName$$1, dataBoxEdgeDevice, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                dataBoxEdgeDevice: dataBoxEdgeDevice,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes the data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginDeleteMethod = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * @summary Downloads the updates on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginDownloadUpdates = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDownloadUpdatesOperationSpec, options);
        };
        /**
         * @summary Installs the updates on the data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginInstallUpdates = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginInstallUpdatesOperationSpec, options);
        };
        /**
         * @summary Scans for updates on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginScanForUpdates = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginScanForUpdatesOperationSpec, options);
        };
        /**
         * Updates the security settings on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param deviceAdminPassword Device administrator password as an encrypted string (encrypted using
         * RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should
         * have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special
         * characters.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Devices.prototype.beginCreateOrUpdateSecuritySettings = function (deviceName$$1, resourceGroupName$$1, deviceAdminPassword, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                deviceAdminPassword: deviceAdminPassword,
                options: options
            }, beginCreateOrUpdateSecuritySettingsOperationSpec, options);
        };
        Devices.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        Devices.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Devices;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDeviceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDeviceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDevice
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                tags: [
                    "options",
                    "tags"
                ]
            },
            mapper: __assign(__assign({}, DataBoxEdgeDevicePatch), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDevice
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getExtendedInformationOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/getExtendedInformation",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDeviceExtendedInfo
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getNetworkSettingsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/networkSettings/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkSettings
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getUpdateSummaryOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/updateSummary/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UpdateSummary
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var uploadCertificateOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/uploadCertificate",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                authenticationType: [
                    "options",
                    "authenticationType"
                ],
                certificate: "certificate"
            },
            mapper: __assign(__assign({}, UploadCertificateRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: UploadCertificateResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "dataBoxEdgeDevice",
            mapper: __assign(__assign({}, DataBoxEdgeDevice), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDevice
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginDownloadUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/downloadUpdates",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginInstallUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/installUpdates",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginScanForUpdatesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/scanForUpdates",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateSecuritySettingsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/securitySettings/default/update",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                deviceAdminPassword: "deviceAdminPassword"
            },
            mapper: __assign(__assign({}, SecuritySettings), { required: true })
        },
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDeviceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataBoxEdgeDeviceList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        AlertList: AlertList,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Alerts. */
    var Alerts = /** @class */ (function () {
        /**
         * Create a Alerts.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Alerts(client) {
            this.client = client;
        }
        Alerts.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec, callback);
        };
        Alerts.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        Alerts.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec, callback);
        };
        return Alerts;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByDataBoxEdgeDeviceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/alerts",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/alerts/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Alert
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByDataBoxEdgeDeviceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AlertList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BandwidthSchedulesList: BandwidthSchedulesList,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BandwidthSchedules. */
    var BandwidthSchedules = /** @class */ (function () {
        /**
         * Create a BandwidthSchedules.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function BandwidthSchedules(client) {
            this.client = client;
        }
        BandwidthSchedules.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec$1, callback);
        };
        BandwidthSchedules.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates a bandwidth schedule.
         * @param deviceName The device name.
         * @param name The bandwidth schedule name which needs to be added/updated.
         * @param parameters The bandwidth schedule to be added or updated.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.BandwidthSchedulesCreateOrUpdateResponse>
         */
        BandwidthSchedules.prototype.createOrUpdate = function (deviceName$$1, name$$1, parameters, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, name$$1, parameters, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the specified bandwidth schedule.
         * @param deviceName The device name.
         * @param name The bandwidth schedule name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        BandwidthSchedules.prototype.deleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a bandwidth schedule.
         * @param deviceName The device name.
         * @param name The bandwidth schedule name which needs to be added/updated.
         * @param parameters The bandwidth schedule to be added or updated.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BandwidthSchedules.prototype.beginCreateOrUpdate = function (deviceName$$1, name$$1, parameters, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                parameters: parameters,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes the specified bandwidth schedule.
         * @param deviceName The device name.
         * @param name The bandwidth schedule name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        BandwidthSchedules.prototype.beginDeleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        BandwidthSchedules.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec$1, callback);
        };
        return BandwidthSchedules;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByDataBoxEdgeDeviceOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BandwidthSchedulesList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BandwidthSchedule
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, BandwidthSchedule), { required: true })
        },
        responses: {
            200: {
                bodyMapper: BandwidthSchedule
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/bandwidthSchedules/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByDataBoxEdgeDeviceNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BandwidthSchedulesList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Jobs. */
    var Jobs = /** @class */ (function () {
        /**
         * Create a Jobs.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Jobs(client) {
            this.client = client;
        }
        Jobs.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        return Jobs;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/jobs/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError,
        Job: Job,
        JobErrorDetails: JobErrorDetails,
        JobErrorItem: JobErrorItem,
        UpdateDownloadProgress: UpdateDownloadProgress,
        UpdateInstallProgress: UpdateInstallProgress
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OperationsStatus. */
    var OperationsStatus = /** @class */ (function () {
        /**
         * Create a OperationsStatus.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function OperationsStatus(client) {
            this.client = client;
        }
        OperationsStatus.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        return OperationsStatus;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/operationsStatus/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Job
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderList: OrderList,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Orders. */
    var Orders = /** @class */ (function () {
        /**
         * Create a Orders.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Orders(client) {
            this.client = client;
        }
        Orders.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec$2, callback);
        };
        Orders.prototype.get = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        /**
         * @summary Creates or updates an order.
         * @param deviceName The device name.
         * @param order The order to be created or updated.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.OrdersCreateOrUpdateResponse>
         */
        Orders.prototype.createOrUpdate = function (deviceName$$1, order, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, order, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * @summary Deletes the order related to the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Orders.prototype.deleteMethod = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * @summary Creates or updates an order.
         * @param deviceName The device name.
         * @param order The order to be created or updated.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Orders.prototype.beginCreateOrUpdate = function (deviceName$$1, order, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                order: order,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * @summary Deletes the order related to the device.
         * @param deviceName The device name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Orders.prototype.beginDeleteMethod = function (deviceName$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        Orders.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec$2, callback);
        };
        return Orders;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listByDataBoxEdgeDeviceOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OrderList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Order
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "order",
            mapper: __assign(__assign({}, Order), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Order
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/orders/default",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };
    var listByDataBoxEdgeDeviceNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OrderList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleList: RoleList,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Roles. */
    var Roles = /** @class */ (function () {
        /**
         * Create a Roles.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Roles(client) {
            this.client = client;
        }
        Roles.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec$3, callback);
        };
        Roles.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        /**
         * Create or update a role.
         * @param deviceName The device name.
         * @param name The role name.
         * @param role The role properties.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.RolesCreateOrUpdateResponse>
         */
        Roles.prototype.createOrUpdate = function (deviceName$$1, name$$1, role, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, name$$1, role, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the role on the data box edge device.
         * @param deviceName The device name.
         * @param name The role name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Roles.prototype.deleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Create or update a role.
         * @param deviceName The device name.
         * @param name The role name.
         * @param role The role properties.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Roles.prototype.beginCreateOrUpdate = function (deviceName$$1, name$$1, role, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                role: role,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$3, options);
        };
        /**
         * Deletes the role on the data box edge device.
         * @param deviceName The device name.
         * @param name The role name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Roles.prototype.beginDeleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$3, options);
        };
        Roles.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec$3, callback);
        };
        return Roles;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listByDataBoxEdgeDeviceOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Role
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginCreateOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "role",
            mapper: __assign(__assign({}, Role), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Role
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var beginDeleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };
    var listByDataBoxEdgeDeviceNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: RoleList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        ShareList: ShareList,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Shares. */
    var Shares = /** @class */ (function () {
        /**
         * Create a Shares.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Shares(client) {
            this.client = client;
        }
        Shares.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec$4, callback);
        };
        Shares.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        /**
         * @summary Creates a new share or updates an existing share on the device.
         * @param deviceName The device name.
         * @param name The share name.
         * @param share The share properties.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.SharesCreateOrUpdateResponse>
         */
        Shares.prototype.createOrUpdate = function (deviceName$$1, name$$1, share, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, name$$1, share, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the share on the data box edge/gateway device.
         * @param deviceName The device name.
         * @param name The share name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Shares.prototype.deleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * @summary Refreshes the share metadata with the data from the cloud.
         * @param deviceName The device name.
         * @param name The share name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Shares.prototype.refresh = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginRefresh(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * @summary Creates a new share or updates an existing share on the device.
         * @param deviceName The device name.
         * @param name The share name.
         * @param share The share properties.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Shares.prototype.beginCreateOrUpdate = function (deviceName$$1, name$$1, share, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                share: share,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$4, options);
        };
        /**
         * Deletes the share on the data box edge/gateway device.
         * @param deviceName The device name.
         * @param name The share name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Shares.prototype.beginDeleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$4, options);
        };
        /**
         * @summary Refreshes the share metadata with the data from the cloud.
         * @param deviceName The device name.
         * @param name The share name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Shares.prototype.beginRefresh = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginRefreshOperationSpec, options);
        };
        Shares.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec$4, callback);
        };
        return Shares;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listByDataBoxEdgeDeviceOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ShareList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Share
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginCreateOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "share",
            mapper: __assign(__assign({}, Share), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Share
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginDeleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var beginRefreshOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/shares/{name}/refresh",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var listByDataBoxEdgeDeviceNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ShareList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        StorageAccountCredentialList: StorageAccountCredentialList,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageAccountCredentials. */
    var StorageAccountCredentials = /** @class */ (function () {
        /**
         * Create a StorageAccountCredentials.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function StorageAccountCredentials(client) {
            this.client = client;
        }
        StorageAccountCredentials.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec$5, callback);
        };
        StorageAccountCredentials.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$8, callback);
        };
        /**
         * Creates or updates the storage account credential.
         * @param deviceName The device name.
         * @param name The storage account credential name.
         * @param storageAccountCredential The storage account credential.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.StorageAccountCredentialsCreateOrUpdateResponse>
         */
        StorageAccountCredentials.prototype.createOrUpdate = function (deviceName$$1, name$$1, storageAccountCredential, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, name$$1, storageAccountCredential, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the storage account credential.
         * @param deviceName The device name.
         * @param name The storage account credential name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        StorageAccountCredentials.prototype.deleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates the storage account credential.
         * @param deviceName The device name.
         * @param name The storage account credential name.
         * @param storageAccountCredential The storage account credential.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccountCredentials.prototype.beginCreateOrUpdate = function (deviceName$$1, name$$1, storageAccountCredential, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                storageAccountCredential: storageAccountCredential,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$5, options);
        };
        /**
         * Deletes the storage account credential.
         * @param deviceName The device name.
         * @param name The storage account credential name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        StorageAccountCredentials.prototype.beginDeleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$5, options);
        };
        StorageAccountCredentials.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec$5, callback);
        };
        return StorageAccountCredentials;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listByDataBoxEdgeDeviceOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountCredentialList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountCredential
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginCreateOrUpdateOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "storageAccountCredential",
            mapper: __assign(__assign({}, StorageAccountCredential), { required: true })
        },
        responses: {
            200: {
                bodyMapper: StorageAccountCredential
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var beginDeleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccountCredentials/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var listByDataBoxEdgeDeviceNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountCredentialList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        TriggerList: TriggerList,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Triggers. */
    var Triggers = /** @class */ (function () {
        /**
         * Create a Triggers.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Triggers(client) {
            this.client = client;
        }
        Triggers.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec$6, callback);
        };
        Triggers.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$9, callback);
        };
        /**
         * Creates or updates a trigger.
         * @param deviceName Creates or updates a trigger
         * @param name The trigger name.
         * @param trigger The trigger.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.TriggersCreateOrUpdateResponse>
         */
        Triggers.prototype.createOrUpdate = function (deviceName$$1, name$$1, trigger, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, name$$1, trigger, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the trigger on the gateway device.
         * @param deviceName The device name.
         * @param name The trigger name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Triggers.prototype.deleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates or updates a trigger.
         * @param deviceName Creates or updates a trigger
         * @param name The trigger name.
         * @param trigger The trigger.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Triggers.prototype.beginCreateOrUpdate = function (deviceName$$1, name$$1, trigger, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                trigger: trigger,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$6, options);
        };
        /**
         * Deletes the trigger on the gateway device.
         * @param deviceName The device name.
         * @param name The trigger name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Triggers.prototype.beginDeleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$6, options);
        };
        Triggers.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec$6, callback);
        };
        return Triggers;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listByDataBoxEdgeDeviceOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            expand
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggerList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Trigger
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginCreateOrUpdateOperationSpec$6 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "trigger",
            mapper: __assign(__assign({}, Trigger), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Trigger
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var beginDeleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/triggers/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var listByDataBoxEdgeDeviceNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TriggerList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        Address: Address,
        Alert: Alert,
        AlertErrorDetails: AlertErrorDetails,
        ARMBaseModel: ARMBaseModel,
        AsymmetricEncryptedSecret: AsymmetricEncryptedSecret,
        Authentication: Authentication,
        AzureContainerInfo: AzureContainerInfo,
        BandwidthSchedule: BandwidthSchedule,
        BaseResource: BaseResource,
        ClientAccessRight: ClientAccessRight,
        CloudError: CloudError,
        ContactDetails: ContactDetails,
        DataBoxEdgeDevice: DataBoxEdgeDevice,
        DataBoxEdgeDeviceExtendedInfo: DataBoxEdgeDeviceExtendedInfo,
        FileEventTrigger: FileEventTrigger,
        FileSourceInfo: FileSourceInfo,
        IoTDeviceInfo: IoTDeviceInfo,
        IoTRole: IoTRole,
        Ipv4Config: Ipv4Config,
        Ipv6Config: Ipv6Config,
        MountPointMap: MountPointMap,
        NetworkAdapter: NetworkAdapter,
        NetworkAdapterPosition: NetworkAdapterPosition,
        NetworkSettings: NetworkSettings,
        Order: Order,
        OrderStatus: OrderStatus,
        PeriodicTimerEventTrigger: PeriodicTimerEventTrigger,
        PeriodicTimerSourceInfo: PeriodicTimerSourceInfo,
        RefreshDetails: RefreshDetails,
        Role: Role,
        RoleSinkInfo: RoleSinkInfo,
        SecuritySettings: SecuritySettings,
        Share: Share,
        ShareAccessRight: ShareAccessRight,
        Sku: Sku,
        StorageAccountCredential: StorageAccountCredential,
        SymmetricKey: SymmetricKey,
        TrackingInfo: TrackingInfo,
        Trigger: Trigger,
        UpdateSummary: UpdateSummary,
        User: User,
        UserAccessRight: UserAccessRight,
        UserList: UserList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Users. */
    var Users = /** @class */ (function () {
        /**
         * Create a Users.
         * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
         */
        function Users(client) {
            this.client = client;
        }
        Users.prototype.listByDataBoxEdgeDevice = function (deviceName$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByDataBoxEdgeDeviceOperationSpec$7, callback);
        };
        Users.prototype.get = function (deviceName$$1, name$$1, resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, getOperationSpec$a, callback);
        };
        /**
         * Creates a new user or updates an existing user's information on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param name The user name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<Models.UsersCreateOrUpdateResponse>
         */
        Users.prototype.createOrUpdate = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginCreateOrUpdate(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes the user on a databox edge/gateway device.
         * @param deviceName The device name.
         * @param name The user name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Users.prototype.deleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.beginDeleteMethod(deviceName$$1, name$$1, resourceGroupName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Creates a new user or updates an existing user's information on a data box edge/gateway device.
         * @param deviceName The device name.
         * @param name The user name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Users.prototype.beginCreateOrUpdate = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginCreateOrUpdateOperationSpec$7, options);
        };
        /**
         * Deletes the user on a databox edge/gateway device.
         * @param deviceName The device name.
         * @param name The user name.
         * @param resourceGroupName The resource group name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Users.prototype.beginDeleteMethod = function (deviceName$$1, name$$1, resourceGroupName$$1, options) {
            return this.client.sendLRORequest({
                deviceName: deviceName$$1,
                name: name$$1,
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, beginDeleteMethodOperationSpec$7, options);
        };
        Users.prototype.listByDataBoxEdgeDeviceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByDataBoxEdgeDeviceNextOperationSpec$7, callback);
        };
        return Users;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listByDataBoxEdgeDeviceOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users",
        urlParameters: [
            deviceName,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: User
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginCreateOrUpdateOperationSpec$7 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                encryptedPassword: [
                    "options",
                    "encryptedPassword"
                ],
                shareAccessRights: [
                    "options",
                    "shareAccessRights"
                ]
            },
            mapper: __assign(__assign({}, User), { required: true })
        },
        responses: {
            200: {
                bodyMapper: User
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var beginDeleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/users/{name}",
        urlParameters: [
            deviceName,
            name,
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };
    var listByDataBoxEdgeDeviceNextOperationSpec$7 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UserList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-edgegateway";
    var packageVersion = "2.1.1";
    var DataBoxEdgeManagementClientContext = /** @class */ (function (_super) {
        __extends(DataBoxEdgeManagementClientContext, _super);
        /**
         * Initializes a new instance of the DataBoxEdgeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The subscription ID.
         * @param [options] The parameter options
         */
        function DataBoxEdgeManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2019-03-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DataBoxEdgeManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DataBoxEdgeManagementClient = /** @class */ (function (_super) {
        __extends(DataBoxEdgeManagementClient, _super);
        /**
         * Initializes a new instance of the DataBoxEdgeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The subscription ID.
         * @param [options] The parameter options
         */
        function DataBoxEdgeManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.devices = new Devices(_this);
            _this.alerts = new Alerts(_this);
            _this.bandwidthSchedules = new BandwidthSchedules(_this);
            _this.jobs = new Jobs(_this);
            _this.operationsStatus = new OperationsStatus(_this);
            _this.orders = new Orders(_this);
            _this.roles = new Roles(_this);
            _this.shares = new Shares(_this);
            _this.storageAccountCredentials = new StorageAccountCredentials(_this);
            _this.triggers = new Triggers(_this);
            _this.users = new Users(_this);
            return _this;
        }
        return DataBoxEdgeManagementClient;
    }(DataBoxEdgeManagementClientContext));

    exports.DataBoxEdgeManagementClient = DataBoxEdgeManagementClient;
    exports.DataBoxEdgeManagementClientContext = DataBoxEdgeManagementClientContext;
    exports.DataBoxEdgeManagementModels = index;
    exports.DataBoxEdgeManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Devices = Devices;
    exports.Alerts = Alerts;
    exports.BandwidthSchedules = BandwidthSchedules;
    exports.Jobs = Jobs;
    exports.OperationsStatus = OperationsStatus;
    exports.Orders = Orders;
    exports.Roles = Roles;
    exports.Shares = Shares;
    exports.StorageAccountCredentials = StorageAccountCredentials;
    exports.Triggers = Triggers;
    exports.Users = Users;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-edgegateway.js.map
