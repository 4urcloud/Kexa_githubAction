import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Certificates } from "../operationsInterfaces";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { Certificate, CertificatesListOptionalParams, CertificatesGetOptionalParams, CertificatesGetResponse, CertificatesCreateOrUpdateOptionalParams, CertificatesCreateOrUpdateResponse, CertificatesDeleteOptionalParams, CertificatePatch, CertificatesUpdateOptionalParams, CertificatesUpdateResponse } from "../models";
/** Class containing Certificates operations. */
export declare class CertificatesImpl implements Certificates {
    private readonly client;
    /**
     * Initialize a new instance of the class Certificates class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerAppsAPIClient);
    /**
     * Get the Certificates in a given managed environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param managedEnvironmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, managedEnvironmentName: string, options?: CertificatesListOptionalParams): PagedAsyncIterableIterator<Certificate>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get the Certificates in a given managed environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param managedEnvironmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param managedEnvironmentName Name of the Managed Environment.
     * @param name Name of the Certificate.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, managedEnvironmentName: string, name: string, options?: CertificatesGetOptionalParams): Promise<CertificatesGetResponse>;
    /**
     * Create or Update a Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param managedEnvironmentName Name of the Managed Environment.
     * @param name Name of the Certificate.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, managedEnvironmentName: string, name: string, options?: CertificatesCreateOrUpdateOptionalParams): Promise<CertificatesCreateOrUpdateResponse>;
    /**
     * Deletes the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param managedEnvironmentName Name of the Managed Environment.
     * @param name Name of the Certificate.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, managedEnvironmentName: string, name: string, options?: CertificatesDeleteOptionalParams): Promise<void>;
    /**
     * Patches a certificate. Currently only patching of tags is supported
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param managedEnvironmentName Name of the Managed Environment.
     * @param name Name of the Certificate.
     * @param certificateEnvelope Properties of a certificate that need to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName: string, managedEnvironmentName: string, name: string, certificateEnvelope: CertificatePatch, options?: CertificatesUpdateOptionalParams): Promise<CertificatesUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param managedEnvironmentName Name of the Managed Environment.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=certificates.d.ts.map