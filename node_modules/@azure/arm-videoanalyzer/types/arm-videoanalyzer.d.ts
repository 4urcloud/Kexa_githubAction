import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Interface representing a AccessPolicies. */
export declare interface AccessPolicies {
    /**
     * Retrieves all existing access policy resources, along with their JSON representations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: AccessPoliciesListOptionalParams): PagedAsyncIterableIterator<AccessPolicyEntity>;
    /**
     * Retrieves an existing access policy resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param accessPolicyName The Access Policy name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, accessPolicyName: string, options?: AccessPoliciesGetOptionalParams): Promise<AccessPoliciesGetResponse>;
    /**
     * Creates a new access policy resource or updates an existing one with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param accessPolicyName The Access Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, accessPolicyName: string, parameters: AccessPolicyEntity, options?: AccessPoliciesCreateOrUpdateOptionalParams): Promise<AccessPoliciesCreateOrUpdateResponse>;
    /**
     * Deletes an existing access policy resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param accessPolicyName The Access Policy name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, accessPolicyName: string, options?: AccessPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Updates individual properties of an existing access policy resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param accessPolicyName The Access Policy name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, accessPolicyName: string, parameters: AccessPolicyEntity, options?: AccessPoliciesUpdateOptionalParams): Promise<AccessPoliciesUpdateResponse>;
}

/** Optional parameters. */
export declare interface AccessPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type AccessPoliciesCreateOrUpdateResponse = AccessPolicyEntity;

/** Optional parameters. */
export declare interface AccessPoliciesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AccessPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AccessPoliciesGetResponse = AccessPolicyEntity;

/** Optional parameters. */
export declare interface AccessPoliciesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type AccessPoliciesListNextResponse = AccessPolicyEntityCollection;

/** Optional parameters. */
export declare interface AccessPoliciesListOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type AccessPoliciesListResponse = AccessPolicyEntityCollection;

/** Optional parameters. */
export declare interface AccessPoliciesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AccessPoliciesUpdateResponse = AccessPolicyEntity;

/**
 * Defines values for AccessPolicyEccAlgo. \
 * {@link KnownAccessPolicyEccAlgo} can be used interchangeably with AccessPolicyEccAlgo,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ES256**: ES265 \
 * **ES384**: ES384 \
 * **ES512**: ES512
 */
export declare type AccessPolicyEccAlgo = string;

/** Access policies help define the authentication rules, and control access to specific video resources. */
export declare type AccessPolicyEntity = ProxyResource & {
    /** Defines the access level granted by this policy. */
    role?: AccessPolicyRole;
    /** Authentication method to be used when validating client API access. */
    authentication?: AuthenticationBaseUnion;
};

/** A collection of AccessPolicyEntity items. */
export declare interface AccessPolicyEntityCollection {
    /** A collection of AccessPolicyEntity items. */
    value?: AccessPolicyEntity[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    nextLink?: string;
}

/**
 * Defines values for AccessPolicyRole. \
 * {@link KnownAccessPolicyRole} can be used interchangeably with AccessPolicyRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reader**: Reader role allows for read-only operations to be performed through the client APIs.
 */
export declare type AccessPolicyRole = string;

/**
 * Defines values for AccessPolicyRsaAlgo. \
 * {@link KnownAccessPolicyRsaAlgo} can be used interchangeably with AccessPolicyRsaAlgo,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RS256**: RS256 \
 * **RS384**: RS384 \
 * **RS512**: RS512
 */
export declare type AccessPolicyRsaAlgo = string;

/** Defines how the Video Analyzer account is (optionally) encrypted. */
export declare interface AccountEncryption {
    /** The type of key used to encrypt the Account Key. */
    type: AccountEncryptionKeyType;
    /** The properties of the key used to encrypt the account. */
    keyVaultProperties?: KeyVaultProperties;
    /** The Key Vault identity. */
    identity?: ResourceIdentity;
    /**
     * The current status of the Key Vault mapping.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/**
 * Defines values for AccountEncryptionKeyType. \
 * {@link KnownAccountEncryptionKeyType} can be used interchangeably with AccountEncryptionKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemKey**: The Account Key is encrypted with a System Key. \
 * **CustomerKey**: The Account Key is encrypted with a Customer Key.
 */
export declare type AccountEncryptionKeyType = string;

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**: An internal action.
 */
export declare type ActionType = string;

/** A custom preset for encoding audio with the AAC codec. */
export declare type AudioEncoderAac = AudioEncoderBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.AudioEncoderAac";
};

/** Base type for all audio encoder presets, which define the recipe or instructions on how audio should be processed. */
export declare interface AudioEncoderBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.AudioEncoderAac";
    /** Bitrate, in kilobits per second or Kbps, at which audio should be encoded (2-channel stereo audio at a sampling rate of 48 kHz). Allowed values are 96, 112, 128, 160, 192, 224, and 256. If omitted, the bitrate of the input audio is used. */
    bitrateKbps?: string;
}

export declare type AudioEncoderBaseUnion = AudioEncoderBase | AudioEncoderAac;

/** Base class for access policies authentication methods. */
export declare interface AuthenticationBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.JwtAuthentication";
}

export declare type AuthenticationBaseUnion = AuthenticationBase | JwtAuthentication;

/** Base class for certificate sources. */
export declare interface CertificateSource {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.PemCertificateList";
}

export declare type CertificateSourceUnion = CertificateSource | PemCertificateList;

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type CheckNameAvailabilityReason = string;

/** The check availability request body. */
export declare interface CheckNameAvailabilityRequest {
    /** The name of the resource for which availability needs to be checked. */
    name?: string;
    /** The resource type. */
    type?: string;
}

/** The check availability result. */
export declare interface CheckNameAvailabilityResponse {
    /** Indicates if the resource name is available. */
    nameAvailable?: boolean;
    /** The reason why the given name is not available. */
    reason?: CheckNameAvailabilityReason;
    /** Detailed reason why the given name is available. */
    message?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Base class for credential objects. */
export declare interface CredentialsBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials";
}

export declare type CredentialsBaseUnion = CredentialsBase | UsernamePasswordCredentials;

/** Required validation properties for tokens generated with Elliptical Curve algorithm. */
export declare type EccTokenKey = TokenKey & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.EccTokenKey";
    /** Elliptical curve algorithm to be used: ES256, ES384 or ES512. */
    alg: AccessPolicyEccAlgo;
    /** X coordinate. */
    x: string;
    /** Y coordinate. */
    y: string;
};

/** The representation of an edge module. */
export declare type EdgeModuleEntity = ProxyResource & {
    /**
     * Internal ID generated for the instance of the Video Analyzer edge module.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edgeModuleId?: string;
};

/** A collection of EdgeModuleEntity items. */
export declare interface EdgeModuleEntityCollection {
    /** A collection of EdgeModuleEntity items. */
    value?: EdgeModuleEntity[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    nextLink?: string;
}

/** Provisioning token properties. A provisioning token allows for a single instance of Azure Video analyzer IoT edge module to be initialized and authorized to the cloud account. The provisioning token itself is short lived and it is only used for the initial handshake between IoT edge module and the cloud. After the initial handshake, the IoT edge module will agree on a set of authentication keys which will be auto-rotated as long as the module is able to periodically connect to the cloud. A new provisioning token can be generated for the same IoT edge module in case the module state lost or reset. */
export declare interface EdgeModuleProvisioningToken {
    /**
     * The expiration date of the registration token. The Azure Video Analyzer IoT edge module must be initialized and connected to the Internet prior to the token expiration date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expirationDate?: Date;
    /**
     * The token blob to be provided to the Azure Video Analyzer IoT edge module through the Azure IoT Edge module twin properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly token?: string;
}

/** Interface representing a EdgeModules. */
export declare interface EdgeModules {
    /**
     * List all existing edge module resources, along with their JSON representations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: EdgeModulesListOptionalParams): PagedAsyncIterableIterator<EdgeModuleEntity>;
    /**
     * Retrieves an existing edge module resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param edgeModuleName The Edge Module name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: EdgeModulesGetOptionalParams): Promise<EdgeModulesGetResponse>;
    /**
     * Creates a new edge module or updates an existing one. An edge module resource enables a single
     * instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer Account.
     * This is used for authorization and also to make sure that the particular edge module instance only
     * has access to the data it requires from the Azure Video Analyzer service. A new edge module resource
     * should be created for every new instance of an Azure Video Analyzer edge module deployed to you
     * Azure IoT edge environment. Edge module resources can be deleted if the specific module is not in
     * use anymore.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param edgeModuleName The Edge Module name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, edgeModuleName: string, parameters: EdgeModuleEntity, options?: EdgeModulesCreateOrUpdateOptionalParams): Promise<EdgeModulesCreateOrUpdateResponse>;
    /**
     * Deletes an existing edge module resource. Deleting the edge module resource will prevent an Azure
     * Video Analyzer IoT edge module which was previously initiated with the module provisioning token
     * from communicating with the cloud.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param edgeModuleName The Edge Module name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, edgeModuleName: string, options?: EdgeModulesDeleteOptionalParams): Promise<void>;
    /**
     * Creates a new provisioning token. A provisioning token allows for a single instance of Azure Video
     * analyzer IoT edge module to be initialized and authorized to the cloud account. The provisioning
     * token itself is short lived and it is only used for the initial handshake between IoT edge module
     * and the cloud. After the initial handshake, the IoT edge module will agree on a set of
     * authentication keys which will be auto-rotated as long as the module is able to periodically connect
     * to the cloud. A new provisioning token can be generated for the same IoT edge module in case the
     * module state lost or reset.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param edgeModuleName The Edge Module name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    listProvisioningToken(resourceGroupName: string, accountName: string, edgeModuleName: string, parameters: ListProvisioningTokenInput, options?: EdgeModulesListProvisioningTokenOptionalParams): Promise<EdgeModulesListProvisioningTokenResponse>;
}

/** Optional parameters. */
export declare interface EdgeModulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type EdgeModulesCreateOrUpdateResponse = EdgeModuleEntity;

/** Optional parameters. */
export declare interface EdgeModulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface EdgeModulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EdgeModulesGetResponse = EdgeModuleEntity;

/** Optional parameters. */
export declare interface EdgeModulesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type EdgeModulesListNextResponse = EdgeModuleEntityCollection;

/** Optional parameters. */
export declare interface EdgeModulesListOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
}

/** Optional parameters. */
export declare interface EdgeModulesListProvisioningTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listProvisioningToken operation. */
export declare type EdgeModulesListProvisioningTokenResponse = EdgeModuleProvisioningToken;

/** Contains response data for the list operation. */
export declare type EdgeModulesListResponse = EdgeModuleEntityCollection;

/** Describes a custom preset for encoding the input content using the encoder processor. */
export declare type EncoderCustomPreset = EncoderPresetBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.EncoderCustomPreset";
    /** Describes a custom preset for encoding audio. */
    audioEncoder?: AudioEncoderBaseUnion;
    /** Describes a custom preset for encoding video. */
    videoEncoder?: VideoEncoderBaseUnion;
};

/** Base type for all encoder presets, which define the recipe or instructions on how the input content should be processed. */
export declare interface EncoderPresetBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.EncoderSystemPreset" | "#Microsoft.VideoAnalyzer.EncoderCustomPreset";
}

export declare type EncoderPresetBaseUnion = EncoderPresetBase | EncoderSystemPreset | EncoderCustomPreset;

/** Encoder processor allows for encoding of the input content. For example, it can used to change the resolution from 4K to 1280x720. */
export declare type EncoderProcessor = ProcessorNodeBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.EncoderProcessor";
    /** The encoder preset, which defines the recipe or instructions on how the input content should be processed. */
    preset: EncoderPresetBaseUnion;
};

/** Describes a built-in preset for encoding the input content using the encoder processor. */
export declare type EncoderSystemPreset = EncoderPresetBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.EncoderSystemPreset";
    /** Name of the built-in encoding preset. */
    name: EncoderSystemPresetType;
};

/**
 * Defines values for EncoderSystemPresetType. \
 * {@link KnownEncoderSystemPresetType} can be used interchangeably with EncoderSystemPresetType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SingleLayer_540p_H264_AAC**: Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 540 pixels, and at a maximum bitrate of 2000 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 96 Kbps \
 * **SingleLayer_720p_H264_AAC**: Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 720 pixels, and at a maximum bitrate of 3500 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 96 Kbps \
 * **SingleLayer_1080p_H264_AAC**: Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 1080 pixels, and at a maximum bitrate of 6000 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 128 Kbps \
 * **SingleLayer_2160p_H264_AAC**: Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 2160 pixels, and at a maximum bitrate of 16000 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 128 Kbps
 */
export declare type EncoderSystemPresetType = string;

/** The endpoint details. */
export declare interface Endpoint {
    /** The URL of the endpoint. */
    endpointUrl?: string;
    /** The type of the endpoint. */
    type: VideoAnalyzerEndpointType;
}

/** Base class for endpoints. */
export declare interface EndpointBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.UnsecuredEndpoint" | "#Microsoft.VideoAnalyzer.TlsEndpoint";
    /** Credentials to be presented to the endpoint. */
    credentials: CredentialsBaseUnion;
    /** The endpoint URL for Video Analyzer to connect to. */
    url: string;
    /** Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically used when the endpoint is behind a firewall. */
    tunnel?: TunnelBaseUnion;
}

export declare type EndpointBaseUnion = EndpointBase | UnsecuredEndpoint | TlsEndpoint;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Group level network access control. */
export declare interface GroupLevelAccessControl {
    /** Whether or not public network access is allowed for specified resources under the Video Analyzer account. */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** The IoT Hub details. */
export declare interface IotHub {
    /** The IoT Hub resource identifier. */
    id: string;
    /** The IoT Hub identity. */
    identity: ResourceIdentity;
    /**
     * The current status of the Iot Hub mapping.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Properties for access validation based on JSON Web Tokens (JWT). */
export declare type JwtAuthentication = AuthenticationBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.JwtAuthentication";
    /** List of expected token issuers. Token issuer is valid if it matches at least one of the given values. */
    issuers?: string[];
    /** List of expected token audiences. Token audience is valid if it matches at least one of the given values. */
    audiences?: string[];
    /** List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid. */
    claims?: TokenClaim[];
    /** List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key. */
    keys?: TokenKeyUnion[];
};

/** The details for accessing the encryption keys in Key Vault. */
export declare interface KeyVaultProperties {
    /** The URL of the Key Vault key used to encrypt the account. The key may either be versioned (for example https://vault/keys/mykey/version1) or reference a key without a version (for example https://vault/keys/mykey). */
    keyIdentifier: string;
    /**
     * The current key used to encrypt Video Analyzer account, including the key version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentKeyIdentifier?: string;
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Live**: Live pipeline topology resource. \
 * **Batch**: Batch pipeline topology resource.
 */
export declare type Kind = string;

/** Known values of {@link AccessPolicyEccAlgo} that the service accepts. */
export declare enum KnownAccessPolicyEccAlgo {
    /** ES265 */
    ES256 = "ES256",
    /** ES384 */
    ES384 = "ES384",
    /** ES512 */
    ES512 = "ES512"
}

/** Known values of {@link AccessPolicyRole} that the service accepts. */
export declare enum KnownAccessPolicyRole {
    /** Reader role allows for read-only operations to be performed through the client APIs. */
    Reader = "Reader"
}

/** Known values of {@link AccessPolicyRsaAlgo} that the service accepts. */
export declare enum KnownAccessPolicyRsaAlgo {
    /** RS256 */
    RS256 = "RS256",
    /** RS384 */
    RS384 = "RS384",
    /** RS512 */
    RS512 = "RS512"
}

/** Known values of {@link AccountEncryptionKeyType} that the service accepts. */
export declare enum KnownAccountEncryptionKeyType {
    /** The Account Key is encrypted with a System Key. */
    SystemKey = "SystemKey",
    /** The Account Key is encrypted with a Customer Key. */
    CustomerKey = "CustomerKey"
}

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** An internal action. */
    Internal = "Internal"
}

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export declare enum KnownCheckNameAvailabilityReason {
    Invalid = "Invalid",
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    User = "User",
    Application = "Application",
    ManagedIdentity = "ManagedIdentity",
    Key = "Key"
}

/** Known values of {@link EncoderSystemPresetType} that the service accepts. */
export declare enum KnownEncoderSystemPresetType {
    /** Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 540 pixels, and at a maximum bitrate of 2000 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 96 Kbps */
    SingleLayer540PH264AAC = "SingleLayer_540p_H264_AAC",
    /** Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 720 pixels, and at a maximum bitrate of 3500 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 96 Kbps */
    SingleLayer720PH264AAC = "SingleLayer_720p_H264_AAC",
    /** Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 1080 pixels, and at a maximum bitrate of 6000 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 128 Kbps */
    SingleLayer1080PH264AAC = "SingleLayer_1080p_H264_AAC",
    /** Produces an MP4 file where the video is encoded with H.264 codec at a picture height of 2160 pixels, and at a maximum bitrate of 16000 Kbps. Encoded video has the same average frame rate as the input. The aspect ratio of the input is preserved. If the input content has audio, then it is encoded with AAC-LC codec at 128 Kbps */
    SingleLayer2160PH264AAC = "SingleLayer_2160p_H264_AAC"
}

/** Known values of {@link Kind} that the service accepts. */
export declare enum KnownKind {
    /** Live pipeline topology resource. */
    Live = "Live",
    /** Batch pipeline topology resource. */
    Batch = "Batch"
}

/** Known values of {@link LivePipelineState} that the service accepts. */
export declare enum KnownLivePipelineState {
    /** The live pipeline is idle and not processing media. */
    Inactive = "Inactive",
    /** The live pipeline is transitioning into the active state. */
    Activating = "Activating",
    /** The live pipeline is active and able to process media. If your data source is not available, for instance, if your RTSP camera is powered off or unreachable, the pipeline will still be active and periodically retrying the connection. Your Azure subscription will be billed for the duration in which the live pipeline is in the active state. */
    Active = "Active",
    /** The live pipeline is transitioning into the inactive state. */
    Deactivating = "Deactivating"
}

/** Known values of {@link MetricAggregationType} that the service accepts. */
export declare enum KnownMetricAggregationType {
    /** The average. */
    Average = "Average",
    /** The count of a number of items, usually requests. */
    Count = "Count",
    /** The sum. */
    Total = "Total"
}

/** Known values of {@link MetricUnit} that the service accepts. */
export declare enum KnownMetricUnit {
    /** The number of bytes. */
    Bytes = "Bytes",
    /** The count. */
    Count = "Count",
    /** The number of milliseconds. */
    Milliseconds = "Milliseconds"
}

/** Known values of {@link ParameterType} that the service accepts. */
export declare enum KnownParameterType {
    /** The parameter's value is a string. */
    String = "String",
    /** The parameter's value is a string that holds sensitive information. */
    SecretString = "SecretString",
    /** The parameter's value is a 32-bit signed integer. */
    Int = "Int",
    /** The parameter's value is a 64-bit double-precision floating point. */
    Double = "Double",
    /** The parameter's value is a boolean value that is either true or false. */
    Bool = "Bool"
}

/** Known values of {@link PipelineJobState} that the service accepts. */
export declare enum KnownPipelineJobState {
    /** Pipeline job is processing. */
    Processing = "Processing",
    /** Pipeline job is canceled. */
    Canceled = "Canceled",
    /** Pipeline job completed. */
    Completed = "Completed",
    /** Pipeline job failed. */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    Succeeded = "Succeeded",
    Creating = "Creating",
    Deleting = "Deleting",
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    Pending = "Pending",
    Approved = "Approved",
    Rejected = "Rejected"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Provisioning state failed. */
    Failed = "Failed",
    /** Provisioning state in progress. */
    InProgress = "InProgress",
    /** Provisioning state succeeded. */
    Succeeded = "Succeeded"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Public network access is enabled. */
    Enabled = "Enabled",
    /** Public network access is disabled. */
    Disabled = "Disabled"
}

/** Known values of {@link RtspTransport} that the service accepts. */
export declare enum KnownRtspTransport {
    /** HTTP transport. RTSP messages are exchanged over long running HTTP requests and RTP packets are interleaved within the HTTP channel. */
    Http = "Http",
    /** TCP transport. RTSP is used directly over TCP and RTP packets are interleaved within the TCP channel. */
    Tcp = "Tcp"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    /** Represents the Live S1 SKU name. Using this SKU you can create live pipelines to capture, record, and stream live video from RTSP-capable cameras at bitrate settings from 0.5 Kbps to 3000 Kbps. */
    LiveS1 = "Live_S1",
    /** Represents the Batch S1 SKU name. Using this SKU you can create pipeline jobs to process recorded content. */
    BatchS1 = "Batch_S1"
}

/** Known values of {@link SkuTier} that the service accepts. */
export declare enum KnownSkuTier {
    /** Standard tier. */
    Standard = "Standard"
}

/** Known values of {@link VideoAnalyzerEndpointType} that the service accepts. */
export declare enum KnownVideoAnalyzerEndpointType {
    /** The client API endpoint. */
    ClientApi = "ClientApi"
}

/** Known values of {@link VideoScaleMode} that the service accepts. */
export declare enum KnownVideoScaleMode {
    /** Pads the video with black horizontal stripes (letterbox) or black vertical stripes (pillar-box) so the video is resized to the specified dimensions while not altering the content aspect ratio. */
    Pad = "Pad",
    /** Preserves the same aspect ratio as the input video. If only one video dimension is provided, the second dimension is calculated based on the input video aspect ratio. When 2 dimensions are provided, the video is resized to fit the most constraining dimension, considering the input video size and aspect ratio. */
    PreserveAspectRatio = "PreserveAspectRatio",
    /** Stretches the original video so it resized to the specified dimensions. */
    Stretch = "Stretch"
}

/** Known values of {@link VideoType} that the service accepts. */
export declare enum KnownVideoType {
    /** Archive is flexible format that represents a video stream associated with wall-clock time. The video archive can either be continuous or discontinuous. An archive is discontinuous when there are gaps in the recording due to various reasons, such as the live pipeline being stopped, camera being disconnected or due to the use of event based recordings through the use of a signal gate. There is no limit to the archive duration and new video data can be appended to the existing archive at any time, as long as the same video codec and codec parameters are being used. Videos of this type are suitable for appending and long term archival. */
    Archive = "Archive",
    /** File represents a video which is stored as a single media file, such as MP4. Videos of this type are suitable to be downloaded for external consumption. */
    File = "File"
}

/** The input parameters to generate registration token for the Azure Video Analyzer IoT edge module. */
export declare interface ListProvisioningTokenInput {
    /** The desired expiration date of the registration token. The Azure Video Analyzer IoT edge module must be initialized and connected to the Internet prior to the token expiration date. */
    expirationDate: Date;
}

/** Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of content for a unique RTSP camera. */
export declare type LivePipeline = ProxyResource & {
    /** The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline will process content according to the pipeline topology definition. */
    topologyName?: string;
    /** An optional description for the pipeline. */
    description?: string;
    /** Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to see if the camera bitrate is now below the reserved capacity. Doing so will ensure that one 'noisy neighbor' does not affect other live pipelines in your account. */
    bitrateKbps?: number;
    /**
     * Current state of the pipeline (read-only).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: LivePipelineState;
    /** List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden. */
    parameters?: ParameterDefinition[];
};

/** A collection of LivePipeline items. */
export declare interface LivePipelineCollection {
    /** A collection of LivePipeline items. */
    value?: LivePipeline[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    nextLink?: string;
}

/** Used for tracking the status of an operation on the live pipeline. */
export declare interface LivePipelineOperationStatus {
    /**
     * The name of the live pipeline operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The status of the live pipeline operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The error details for the live pipeline operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ErrorDetail;
}

/** Interface representing a LivePipelineOperationStatuses. */
export declare interface LivePipelineOperationStatuses {
    /**
     * Get the operation status of a live pipeline.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param operationId The operation ID.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, livePipelineName: string, operationId: string, options?: LivePipelineOperationStatusesGetOptionalParams): Promise<LivePipelineOperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface LivePipelineOperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LivePipelineOperationStatusesGetResponse = LivePipelineOperationStatus;

/** Interface representing a LivePipelines. */
export declare interface LivePipelines {
    /**
     * Retrieves a list of live pipelines that have been created, along with their JSON representations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: LivePipelinesListOptionalParams): PagedAsyncIterableIterator<LivePipeline>;
    /**
     * Retrieves a specific live pipeline by name. If a live pipeline with that name has been previously
     * created, the call will return the JSON representation of that instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, livePipelineName: string, options?: LivePipelinesGetOptionalParams): Promise<LivePipelinesGetResponse>;
    /**
     * Creates a new live pipeline or updates an existing one, with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: LivePipeline, options?: LivePipelinesCreateOrUpdateOptionalParams): Promise<LivePipelinesCreateOrUpdateResponse>;
    /**
     * Deletes a live pipeline with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, livePipelineName: string, options?: LivePipelinesDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing live pipeline with the given name. Properties that can be updated include:
     * description, bitrateKbps, and parameter definitions. Only the description can be updated while the
     * live pipeline is active.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, livePipelineName: string, parameters: LivePipelineUpdate, options?: LivePipelinesUpdateOptionalParams): Promise<LivePipelinesUpdateResponse>;
    /**
     * Activates a live pipeline with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param options The options parameters.
     */
    beginActivate(resourceGroupName: string, accountName: string, livePipelineName: string, options?: LivePipelinesActivateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Activates a live pipeline with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param options The options parameters.
     */
    beginActivateAndWait(resourceGroupName: string, accountName: string, livePipelineName: string, options?: LivePipelinesActivateOptionalParams): Promise<void>;
    /**
     * Deactivates a live pipeline with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param options The options parameters.
     */
    beginDeactivate(resourceGroupName: string, accountName: string, livePipelineName: string, options?: LivePipelinesDeactivateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deactivates a live pipeline with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param livePipelineName Live pipeline unique identifier.
     * @param options The options parameters.
     */
    beginDeactivateAndWait(resourceGroupName: string, accountName: string, livePipelineName: string, options?: LivePipelinesDeactivateOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface LivePipelinesActivateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LivePipelinesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type LivePipelinesCreateOrUpdateResponse = LivePipeline;

/** Optional parameters. */
export declare interface LivePipelinesDeactivateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LivePipelinesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface LivePipelinesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LivePipelinesGetResponse = LivePipeline;

/** Optional parameters. */
export declare interface LivePipelinesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Restricts the set of items returned. */
    filter?: string;
}

/** Contains response data for the listNext operation. */
export declare type LivePipelinesListNextResponse = LivePipelineCollection;

/** Optional parameters. */
export declare interface LivePipelinesListOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Restricts the set of items returned. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type LivePipelinesListResponse = LivePipelineCollection;

/**
 * Defines values for LivePipelineState. \
 * {@link KnownLivePipelineState} can be used interchangeably with LivePipelineState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inactive**: The live pipeline is idle and not processing media. \
 * **Activating**: The live pipeline is transitioning into the active state. \
 * **Active**: The live pipeline is active and able to process media. If your data source is not available, for instance, if your RTSP camera is powered off or unreachable, the pipeline will still be active and periodically retrying the connection. Your Azure subscription will be billed for the duration in which the live pipeline is in the active state. \
 * **Deactivating**: The live pipeline is transitioning into the inactive state.
 */
export declare type LivePipelineState = string;

/** Optional parameters. */
export declare interface LivePipelinesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type LivePipelinesUpdateResponse = LivePipeline;

/** Live pipeline represents a unique instance of a live topology, used for real-time ingestion, archiving and publishing of content for a unique RTSP camera. */
export declare type LivePipelineUpdate = ProxyResource & {
    /** The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline will process content according to the pipeline topology definition. */
    topologyName?: string;
    /** An optional description for the pipeline. */
    description?: string;
    /** Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to see if the camera bitrate is now below the reserved capacity. Doing so will ensure that one 'noisy neighbor' does not affect other live pipelines in your account. */
    bitrateKbps?: number;
    /**
     * Current state of the pipeline (read-only).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: LivePipelineState;
    /** List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden. */
    parameters?: ParameterDefinition[];
};

/** Interface representing a Locations. */
export declare interface Locations {
    /**
     * Checks whether the Video Analyzer resource name is available.
     * @param locationName Location Name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    checkNameAvailability(locationName: string, parameters: CheckNameAvailabilityRequest, options?: LocationsCheckNameAvailabilityOptionalParams): Promise<LocationsCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface LocationsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type LocationsCheckNameAvailabilityResponse = CheckNameAvailabilityResponse;

/** A diagnostic log emitted by service. */
export declare interface LogSpecification {
    /**
     * The diagnostic log category name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The diagnostic log category display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The time range for requests in each blob.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly blobDuration?: string;
}

/**
 * Defines values for MetricAggregationType. \
 * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Average**: The average. \
 * **Count**: The count of a number of items, usually requests. \
 * **Total**: The sum.
 */
export declare type MetricAggregationType = string;

/** A metric dimension. */
export declare interface MetricDimension {
    /**
     * The metric dimension name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The display name for the dimension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Whether to export metric to shoebox.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly toBeExportedForShoebox?: boolean;
}

/** A metric emitted by service. */
export declare interface MetricSpecification {
    /**
     * The metric name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The metric display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The metric display description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayDescription?: string;
    /**
     * The metric unit
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: MetricUnit;
    /**
     * The metric aggregation type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregationType?: MetricAggregationType;
    /**
     * The metric lock aggregation type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lockAggregationType?: MetricAggregationType;
    /** Supported aggregation types. */
    supportedAggregationTypes?: string[];
    /**
     * The metric dimensions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dimensions?: MetricDimension[];
    /**
     * Indicates whether regional MDM account is enabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enableRegionalMdmAccount?: boolean;
    /**
     * The source MDM account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceMdmAccount?: string;
    /**
     * The source MDM namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceMdmNamespace?: string;
    /**
     * The supported time grain types.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedTimeGrainTypes?: string[];
}

/**
 * Defines values for MetricUnit. \
 * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bytes**: The number of bytes. \
 * **Count**: The count. \
 * **Milliseconds**: The number of milliseconds.
 */
export declare type MetricUnit = string;

/** Network access control for video analyzer account. */
export declare interface NetworkAccessControl {
    /** Public network access for integration group. */
    integration?: GroupLevelAccessControl;
    /** Public network access for ingestion group. */
    ingestion?: GroupLevelAccessControl;
    /** Public network access for consumption group. */
    consumption?: GroupLevelAccessControl;
}

/** Base class for nodes. */
export declare interface NodeBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.SourceNodeBase" | "#Microsoft.VideoAnalyzer.ProcessorNodeBase" | "#Microsoft.VideoAnalyzer.SinkNodeBase" | "#Microsoft.VideoAnalyzer.RtspSource" | "#Microsoft.VideoAnalyzer.VideoSource" | "#Microsoft.VideoAnalyzer.EncoderProcessor" | "#Microsoft.VideoAnalyzer.VideoSink";
    /** Node name. Must be unique within the topology. */
    name: string;
}

export declare type NodeBaseUnion = NodeBase | SourceNodeBaseUnion | ProcessorNodeBaseUnion | SinkNodeBaseUnion;

/** Describes an input signal to be used on a pipeline node. */
export declare interface NodeInput {
    /** The name of the upstream node in the pipeline which output is used as input of the current node. */
    nodeName: string;
}

/** An operation. */
export declare interface Operation {
    /** The operation name. */
    name: string;
    /** The operation display name. */
    display?: OperationDisplay;
    /** Origin of the operation. */
    origin?: string;
    /** Operation properties format. */
    properties?: Properties;
    /** Whether the operation applies to data-plane. */
    isDataAction?: boolean;
    /** Indicates the action type. */
    actionType?: ActionType;
}

/** A collection of Operation items. */
export declare interface OperationCollection {
    /** A collection of Operation items. */
    value?: Operation[];
}

/** Operation details. */
export declare interface OperationDisplay {
    /** The service provider. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
    /** The operation type. */
    operation?: string;
    /** The operation description. */
    description?: string;
}

/** Interface representing a OperationResults. */
export declare interface OperationResults {
    /**
     * Get private endpoint connection operation result.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param name Private endpoint connection name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, name: string, operationId: string, options?: OperationResultsGetOptionalParams): Promise<OperationResultsGetResponse>;
}

/** Optional parameters. */
export declare interface OperationResultsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationResultsGetResponse = PrivateEndpointConnection;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all the Media operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationCollection;

/** Interface representing a OperationStatuses. */
export declare interface OperationStatuses {
    /**
     * Get private endpoint connection operation status.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param name Private endpoint connection name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, name: string, operationId: string, options?: OperationStatusesGetOptionalParams): Promise<OperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface OperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationStatusesGetResponse = VideoAnalyzerPrivateEndpointConnectionOperationStatus;

/** Single topology parameter declaration. Declared parameters can and must be referenced throughout the topology and can optionally have default values to be used when they are not defined in the pipelines. */
export declare interface ParameterDeclaration {
    /** Name of the parameter. */
    name: string;
    /** Type of the parameter. */
    type: ParameterType;
    /** Description of the parameter. */
    description?: string;
    /** The default value for the parameter to be used if the pipeline does not specify a value. */
    default?: string;
}

/** Defines the parameter value of an specific pipeline topology parameter. See pipeline topology parameters for more information. */
export declare interface ParameterDefinition {
    /** Name of the parameter declared in the pipeline topology. */
    name: string;
    /** Parameter value to be applied on this specific pipeline. */
    value?: string;
}

/**
 * Defines values for ParameterType. \
 * {@link KnownParameterType} can be used interchangeably with ParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String**: The parameter's value is a string. \
 * **SecretString**: The parameter's value is a string that holds sensitive information. \
 * **Int**: The parameter's value is a 32-bit signed integer. \
 * **Double**: The parameter's value is a 64-bit double-precision floating point. \
 * **Bool**: The parameter's value is a boolean value that is either true or false.
 */
export declare type ParameterType = string;

/** A list of PEM formatted certificates. */
export declare type PemCertificateList = CertificateSource & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.PemCertificateList";
    /** PEM formatted public certificates. One certificate per entry. */
    certificates: string[];
};

/** Pipeline job represents a unique instance of a batch topology, used for offline processing of selected portions of archived content. */
export declare type PipelineJob = ProxyResource & {
    /** Reference to an existing pipeline topology. When activated, this pipeline job will process content according to the pipeline topology definition. */
    topologyName?: string;
    /** An optional description for the pipeline. */
    description?: string;
    /**
     * Current state of the pipeline (read-only).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: PipelineJobState;
    /**
     * The date-time by when this pipeline job will be automatically deleted from your account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiration?: Date;
    /**
     * Details about the error, in case the pipeline job fails.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: PipelineJobError;
    /** List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden. */
    parameters?: ParameterDefinition[];
};

/** A collection of PipelineJob items. */
export declare interface PipelineJobCollection {
    /** A collection of PipelineJob items. */
    value?: PipelineJob[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    nextLink?: string;
}

/** Details about the error for a failed pipeline job. */
export declare interface PipelineJobError {
    /** The error code. */
    code?: string;
    /** The error message. */
    message?: string;
}

/** Used for tracking the status of an operation on the pipeline job. */
export declare interface PipelineJobOperationStatus {
    /**
     * The name of the pipeline job operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The status of the pipeline job operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The error details for the pipeline job operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ErrorDetail;
}

/** Interface representing a PipelineJobOperationStatuses. */
export declare interface PipelineJobOperationStatuses {
    /**
     * Get the operation status of a pipeline job with the given operationId.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineJobName The pipeline job name.
     * @param operationId The operation ID.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, pipelineJobName: string, operationId: string, options?: PipelineJobOperationStatusesGetOptionalParams): Promise<PipelineJobOperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface PipelineJobOperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PipelineJobOperationStatusesGetResponse = PipelineJobOperationStatus;

/** Interface representing a PipelineJobs. */
export declare interface PipelineJobs {
    /**
     * Retrieves a list of all live pipelines that have been created, along with their JSON
     * representations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: PipelineJobsListOptionalParams): PagedAsyncIterableIterator<PipelineJob>;
    /**
     * Retrieves a specific pipeline job by name. If a pipeline job with that name has been previously
     * created, the call will return the JSON representation of that instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineJobName The pipeline job name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, pipelineJobName: string, options?: PipelineJobsGetOptionalParams): Promise<PipelineJobsGetResponse>;
    /**
     * Creates a new pipeline job or updates an existing one, with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineJobName The pipeline job name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, pipelineJobName: string, parameters: PipelineJob, options?: PipelineJobsCreateOrUpdateOptionalParams): Promise<PipelineJobsCreateOrUpdateResponse>;
    /**
     * Deletes a pipeline job with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineJobName The pipeline job name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, pipelineJobName: string, options?: PipelineJobsDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing pipeline job with the given name. Properties that can be updated include:
     * description.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineJobName The pipeline job name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, pipelineJobName: string, parameters: PipelineJobUpdate, options?: PipelineJobsUpdateOptionalParams): Promise<PipelineJobsUpdateResponse>;
    /**
     * Cancels a pipeline job with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineJobName The pipeline job name.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName: string, accountName: string, pipelineJobName: string, options?: PipelineJobsCancelOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Cancels a pipeline job with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineJobName The pipeline job name.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName: string, accountName: string, pipelineJobName: string, options?: PipelineJobsCancelOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PipelineJobsCancelOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PipelineJobsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PipelineJobsCreateOrUpdateResponse = PipelineJob;

/** Optional parameters. */
export declare interface PipelineJobsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PipelineJobsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PipelineJobsGetResponse = PipelineJob;

/** Optional parameters. */
export declare interface PipelineJobsListNextOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Restricts the set of items returned. */
    filter?: string;
}

/** Contains response data for the listNext operation. */
export declare type PipelineJobsListNextResponse = PipelineJobCollection;

/** Optional parameters. */
export declare interface PipelineJobsListOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Restricts the set of items returned. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type PipelineJobsListResponse = PipelineJobCollection;

/**
 * Defines values for PipelineJobState. \
 * {@link KnownPipelineJobState} can be used interchangeably with PipelineJobState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Processing**: Pipeline job is processing. \
 * **Canceled**: Pipeline job is canceled. \
 * **Completed**: Pipeline job completed. \
 * **Failed**: Pipeline job failed.
 */
export declare type PipelineJobState = string;

/** Optional parameters. */
export declare interface PipelineJobsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PipelineJobsUpdateResponse = PipelineJob;

/** Pipeline job represents a unique instance of a batch topology, used for offline processing of selected portions of archived content. */
export declare type PipelineJobUpdate = ProxyResource & {
    /** Reference to an existing pipeline topology. When activated, this pipeline job will process content according to the pipeline topology definition. */
    topologyName?: string;
    /** An optional description for the pipeline. */
    description?: string;
    /**
     * Current state of the pipeline (read-only).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: PipelineJobState;
    /**
     * The date-time by when this pipeline job will be automatically deleted from your account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiration?: Date;
    /**
     * Details about the error, in case the pipeline job fails.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: PipelineJobError;
    /** List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden. */
    parameters?: ParameterDefinition[];
};

/** Interface representing a PipelineTopologies. */
export declare interface PipelineTopologies {
    /**
     * Retrieves a list of pipeline topologies that have been added to the account, if any, along with
     * their JSON representation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: PipelineTopologiesListOptionalParams): PagedAsyncIterableIterator<PipelineTopology>;
    /**
     * Retrieves a specific pipeline topology by name. If a topology with that name has been previously
     * created, the call will return the JSON representation of that topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineTopologyName Pipeline topology unique identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options?: PipelineTopologiesGetOptionalParams): Promise<PipelineTopologiesGetResponse>;
    /**
     * Creates a new pipeline topology or updates an existing one, with the given name. A pipeline topology
     * describes the processing steps to be applied when processing content for a particular outcome. The
     * topology should be defined according to the scenario to be achieved and can be reused across many
     * pipeline instances which share the same processing characteristics.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineTopologyName Pipeline topology unique identifier.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: PipelineTopology, options?: PipelineTopologiesCreateOrUpdateOptionalParams): Promise<PipelineTopologiesCreateOrUpdateResponse>;
    /**
     * Deletes a pipeline topology with the given name. This method should be called after all instances of
     * the topology have been stopped and deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineTopologyName Pipeline topology unique identifier.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, pipelineTopologyName: string, options?: PipelineTopologiesDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing pipeline topology with the given name. If the associated live pipelines or
     * pipeline jobs are in active or processing state, respectively, then only the description can be
     * updated. Else, the properties that can be updated include: description, parameter declarations,
     * sources, processors, and sinks.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param pipelineTopologyName Pipeline topology unique identifier.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, pipelineTopologyName: string, parameters: PipelineTopologyUpdate, options?: PipelineTopologiesUpdateOptionalParams): Promise<PipelineTopologiesUpdateResponse>;
}

/** Optional parameters. */
export declare interface PipelineTopologiesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PipelineTopologiesCreateOrUpdateResponse = PipelineTopology;

/** Optional parameters. */
export declare interface PipelineTopologiesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PipelineTopologiesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PipelineTopologiesGetResponse = PipelineTopology;

/** Optional parameters. */
export declare interface PipelineTopologiesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Restricts the set of items returned. */
    filter?: string;
}

/** Contains response data for the listNext operation. */
export declare type PipelineTopologiesListNextResponse = PipelineTopologyCollection;

/** Optional parameters. */
export declare interface PipelineTopologiesListOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
    /** Restricts the set of items returned. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type PipelineTopologiesListResponse = PipelineTopologyCollection;

/** Optional parameters. */
export declare interface PipelineTopologiesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PipelineTopologiesUpdateResponse = PipelineTopology;

/**
 * Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives the content can be reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology to be parameterized. This allows  individual pipelines refer to different values, such as individual cameras' RTSP endpoints and credentials. Overall a topology is composed of the following:
 *
 *   - Parameters: list of user defined parameters that can be references across the topology nodes.
 *   - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
 *   - Processors: list of nodes which perform data analysis or transformations.
 *   - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
 */
export declare type PipelineTopology = ProxyResource & {
    /** Topology kind. */
    kind: Kind;
    /** Describes the properties of a SKU. */
    sku: Sku;
    /** An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here. */
    description?: string;
    /** List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline. */
    parameters?: ParameterDeclaration[];
    /** List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline. */
    sources?: SourceNodeBaseUnion[];
    /** List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed. */
    processors?: ProcessorNodeBaseUnion[];
    /** List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported. */
    sinks?: SinkNodeBaseUnion[];
};

/** A collection of PipelineTopology items. */
export declare interface PipelineTopologyCollection {
    /** A collection of PipelineTopology items. */
    value?: PipelineTopology[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    nextLink?: string;
}

/**
 * Pipeline topology describes the processing steps to be applied when processing content for a particular outcome. The topology should be defined according to the scenario to be achieved and can be reused across many pipeline instances which share the same processing characteristics. For instance, a pipeline topology which captures content from a RTSP camera and archives the content can be reused across many different cameras, as long as the same processing is to be applied across all the cameras. Individual instance properties can be defined through the use of user-defined parameters, which allow for a topology to be parameterized. This allows  individual pipelines refer to different values, such as individual cameras' RTSP endpoints and credentials. Overall a topology is composed of the following:
 *
 *   - Parameters: list of user defined parameters that can be references across the topology nodes.
 *   - Sources: list of one or more data sources nodes such as an RTSP source which allows for content to be ingested from cameras.
 *   - Processors: list of nodes which perform data analysis or transformations.
 *   - Sinks: list of one or more data sinks which allow for data to be stored or exported to other destinations.
 */
export declare type PipelineTopologyUpdate = ProxyResource & {
    /** Topology kind. */
    kind?: Kind;
    /** Describes the properties of a SKU. */
    sku?: Sku;
    /** An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here. */
    description?: string;
    /** List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline. */
    parameters?: ParameterDeclaration[];
    /** List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline. */
    sources?: SourceNodeBaseUnion[];
    /** List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed. */
    processors?: ProcessorNodeBaseUnion[];
    /** List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported. */
    sinks?: SinkNodeBaseUnion[];
};

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare type PrivateEndpointConnection = Resource & {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
};

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Get all private endpoint connections under video analyzer account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: PrivateEndpointConnectionsListOptionalParams): Promise<PrivateEndpointConnectionsListResponse>;
    /**
     * Get private endpoint connection under video analyzer account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param name Private endpoint connection name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, name: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update private endpoint connection state under video analyzer account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param name Private endpoint connection name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, name: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Delete private endpoint connection under video analyzer account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param name Private endpoint connection name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, name: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Defines headers for PrivateEndpointConnections_createOrUpdate operation. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnectionsCreateOrUpdateHeaders & PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare type PrivateLinkResource = Resource & {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
};

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Get list of group IDs for video analyzer account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: PrivateLinkResourcesListOptionalParams): Promise<PrivateLinkResourcesListResponse>;
    /**
     * Get group ID for video analyzer account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param name Name of the private link resource (Group ID).
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, name: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkResourcesListResponse = PrivateLinkResourceListResult;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/** Base class for topology processor nodes. */
export declare type ProcessorNodeBase = NodeBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.ProcessorNodeBase" | "#Microsoft.VideoAnalyzer.EncoderProcessor";
    /** An array of upstream node references within the topology to be used as inputs for this node. */
    inputs: NodeInput[];
};

export declare type ProcessorNodeBaseUnion = ProcessorNodeBase | EncoderProcessor;

/** Metric properties. */
export declare interface Properties {
    /**
     * The service specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceSpecification?: ServiceSpecification;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed**: Provisioning state failed. \
 * **InProgress**: Provisioning state in progress. \
 * **Succeeded**: Provisioning state succeeded.
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare type ProxyResource = Resource & {};

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Public network access is enabled. \
 * **Disabled**: Public network access is disabled.
 */
export declare type PublicNetworkAccess = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** The user assigned managed identity to use when accessing a resource. */
export declare interface ResourceIdentity {
    /** The user assigned managed identity's resource identifier to use when accessing a resource. */
    userAssignedIdentity: string;
}

/** Required validation properties for tokens generated with RSA algorithm. */
export declare type RsaTokenKey = TokenKey & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.RsaTokenKey";
    /** RSA algorithm to be used: RS256, RS384 or RS512. */
    alg: AccessPolicyRsaAlgo;
    /** RSA public key modulus. */
    n: string;
    /** RSA public key exponent. */
    e: string;
};

/** RTSP source allows for media from an RTSP camera or generic RTSP server to be ingested into a pipeline. */
export declare type RtspSource = SourceNodeBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.RtspSource";
    /** Network transport utilized by the RTSP and RTP exchange: TCP or HTTP. When using TCP, the RTP packets are interleaved on the TCP RTSP connection. When using HTTP, the RTSP messages are exchanged through long lived HTTP connections, and the RTP packages are interleaved in the HTTP connections alongside the RTSP messages. */
    transport?: RtspTransport;
    /** RTSP endpoint information for Video Analyzer to connect to. This contains the required information for Video Analyzer to connect to RTSP cameras and/or generic RTSP servers. */
    endpoint: EndpointBaseUnion;
};

/**
 * Defines values for RtspTransport. \
 * {@link KnownRtspTransport} can be used interchangeably with RtspTransport,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Http**: HTTP transport. RTSP messages are exchanged over long running HTTP requests and RTP packets are interleaved within the HTTP channel. \
 * **Tcp**: TCP transport. RTSP is used directly over TCP and RTP packets are interleaved within the TCP channel.
 */
export declare type RtspTransport = string;

/** A remote tunnel securely established using IoT Hub device information. */
export declare type SecureIotDeviceRemoteTunnel = TunnelBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.SecureIotDeviceRemoteTunnel";
    /** Name of the IoT Hub. */
    iotHubName: string;
    /** The IoT device id to use when establishing the remote tunnel. This string is case-sensitive. */
    deviceId: string;
};

/** The service metric specifications. */
export declare interface ServiceSpecification {
    /**
     * List of log specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly logSpecifications?: LogSpecification[];
    /**
     * List of metric specifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricSpecifications?: MetricSpecification[];
}

/** Base class for topology sink nodes. */
export declare type SinkNodeBase = NodeBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.SinkNodeBase" | "#Microsoft.VideoAnalyzer.VideoSink";
    /** An array of upstream node references within the topology to be used as inputs for this node. */
    inputs: NodeInput[];
};

export declare type SinkNodeBaseUnion = SinkNodeBase | VideoSink;

/** The SKU details. */
export declare interface Sku {
    /** The SKU name. */
    name: SkuName;
    /**
     * The SKU tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: SkuTier;
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Live_S1**: Represents the Live S1 SKU name. Using this SKU you can create live pipelines to capture, record, and stream live video from RTSP-capable cameras at bitrate settings from 0.5 Kbps to 3000 Kbps. \
 * **Batch_S1**: Represents the Batch S1 SKU name. Using this SKU you can create pipeline jobs to process recorded content.
 */
export declare type SkuName = string;

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**: Standard tier.
 */
export declare type SkuTier = string;

/** Base class for topology source nodes. */
export declare type SourceNodeBase = NodeBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.SourceNodeBase" | "#Microsoft.VideoAnalyzer.RtspSource" | "#Microsoft.VideoAnalyzer.VideoSource";
};

export declare type SourceNodeBaseUnion = SourceNodeBase | RtspSource | VideoSource;

/** The details about the associated storage account. */
export declare interface StorageAccount {
    /** The ID of the storage account resource. Video Analyzer relies on tables, queues, and blobs. The primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). */
    id: string;
    /** A managed identity that Video Analyzer will use to access the storage account. */
    identity?: ResourceIdentity;
    /**
     * The current status of the storage account mapping.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** A sequence of datetime ranges as a string. */
export declare interface TimeSequenceBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.VideoSequenceAbsoluteTimeMarkers";
}

export declare type TimeSequenceBaseUnion = TimeSequenceBase | VideoSequenceAbsoluteTimeMarkers;

/** TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in transit). */
export declare type TlsEndpoint = EndpointBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.TlsEndpoint";
    /** List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure Video Analyzer's list of trusted authorities should be used. */
    trustedCertificates?: CertificateSourceUnion;
    /** Validation options to use when authenticating a TLS connection. By default, strict validation is used. */
    validationOptions?: TlsValidationOptions;
};

/** Options for controlling the validation of TLS endpoints. */
export declare interface TlsValidationOptions {
    /** When set to 'true' causes the certificate subject name validation to be skipped. Default is 'false'. */
    ignoreHostname?: string;
    /** When set to 'true' causes the certificate chain trust validation to be skipped. Default is 'false'. */
    ignoreSignature?: string;
}

/** Properties for expected token claims. */
export declare interface TokenClaim {
    /** Name of the claim which must be present on the token. */
    name: string;
    /** Expected value of the claim to be present on the token. */
    value: string;
}

/** Key properties for JWT token validation. */
export declare interface TokenKey {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.RsaTokenKey" | "#Microsoft.VideoAnalyzer.EccTokenKey";
    /** JWT token key id. Validation keys are looked up based on the key id present on the JWT token header. */
    kid: string;
}

export declare type TokenKeyUnion = TokenKey | RsaTokenKey | EccTokenKey;

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare type TrackedResource = Resource & {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
};

/** Base class for tunnel objects. */
export declare interface TunnelBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.SecureIotDeviceRemoteTunnel";
}

export declare type TunnelBaseUnion = TunnelBase | SecureIotDeviceRemoteTunnel;

/** Unsecured endpoint describes an endpoint that the pipeline can connect to over clear transport (no encryption in transit). */
export declare type UnsecuredEndpoint = EndpointBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.UnsecuredEndpoint";
};

/** The details of the user assigned managed identity used by the Video Analyzer resource. */
export declare interface UserAssignedManagedIdentity {
    /**
     * The client ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
    /**
     * The principal ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
}

/** Username and password credentials. */
export declare type UsernamePasswordCredentials = CredentialsBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.UsernamePasswordCredentials";
    /** Username to be presented as part of the credentials. */
    username: string;
    /** Password to be presented as part of the credentials. It is recommended that this value is parameterized as a secret string in order to prevent this value to be returned as part of the resource on API requests. */
    password: string;
};

/** The Video Analyzer account. */
export declare type VideoAnalyzer = TrackedResource & {
    /** The identities associated to the Video Analyzer resource. */
    identity?: VideoAnalyzerIdentity;
    /** The storage accounts for this resource. */
    storageAccounts?: StorageAccount[];
    /**
     * The endpoints associated with this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoints?: Endpoint[];
    /** The account encryption properties. */
    encryption?: AccountEncryption;
    /** The IoT Hubs for this resource. */
    iotHubs?: IotHub[];
    /** Whether or not public network access is allowed for resources under the Video Analyzer account. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Network access control for Video Analyzer. */
    networkAccessControl?: NetworkAccessControl;
    /**
     * Provisioning state of the Video Analyzer account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Private Endpoint Connections created under Video Analyzer account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
};

/** A collection of VideoAnalyzer items. */
export declare interface VideoAnalyzerCollection {
    /** A collection of VideoAnalyzer items. */
    value?: VideoAnalyzer[];
}

/**
 * Defines values for VideoAnalyzerEndpointType. \
 * {@link KnownVideoAnalyzerEndpointType} can be used interchangeably with VideoAnalyzerEndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ClientApi**: The client API endpoint.
 */
export declare type VideoAnalyzerEndpointType = string;

/** The managed identity for the Video Analyzer resource. */
export declare interface VideoAnalyzerIdentity {
    /** The identity type. */
    type: string;
    /** The User Assigned Managed Identities. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedManagedIdentity;
    };
}

export declare class VideoAnalyzerManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the VideoAnalyzerManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: VideoAnalyzerManagementClientOptionalParams);
    edgeModules: EdgeModules;
    pipelineTopologies: PipelineTopologies;
    livePipelines: LivePipelines;
    pipelineJobs: PipelineJobs;
    livePipelineOperationStatuses: LivePipelineOperationStatuses;
    pipelineJobOperationStatuses: PipelineJobOperationStatuses;
    operations: Operations;
    videoAnalyzers: VideoAnalyzers;
    privateLinkResources: PrivateLinkResources;
    privateEndpointConnections: PrivateEndpointConnections;
    operationStatuses: OperationStatuses;
    operationResults: OperationResults;
    videoAnalyzerOperationStatuses: VideoAnalyzerOperationStatuses;
    videoAnalyzerOperationResults: VideoAnalyzerOperationResults;
    locations: Locations;
    videos: Videos;
    accessPolicies: AccessPolicies;
}

/** Optional parameters. */
export declare interface VideoAnalyzerManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Interface representing a VideoAnalyzerOperationResults. */
export declare interface VideoAnalyzerOperationResults {
    /**
     * Get video analyzer operation result.
     * @param locationName Location name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(locationName: string, operationId: string, options?: VideoAnalyzerOperationResultsGetOptionalParams): Promise<VideoAnalyzerOperationResultsGetResponse>;
}

/** Optional parameters. */
export declare interface VideoAnalyzerOperationResultsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VideoAnalyzerOperationResultsGetResponse = VideoAnalyzer;

/** Status of video analyzer operation. */
export declare interface VideoAnalyzerOperationStatus {
    /** Operation identifier. */
    name: string;
    /** Operation resource ID. */
    id?: string;
    /** Operation start time. */
    startTime?: string;
    /** Operation end time. */
    endTime?: string;
    /** Operation status. */
    status?: string;
    /** The error detail. */
    error?: ErrorDetail;
}

/** Interface representing a VideoAnalyzerOperationStatuses. */
export declare interface VideoAnalyzerOperationStatuses {
    /**
     * Get video analyzer operation status.
     * @param locationName Location name.
     * @param operationId Operation Id.
     * @param options The options parameters.
     */
    get(locationName: string, operationId: string, options?: VideoAnalyzerOperationStatusesGetOptionalParams): Promise<VideoAnalyzerOperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface VideoAnalyzerOperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VideoAnalyzerOperationStatusesGetResponse = VideoAnalyzerOperationStatus;

/** Status of private endpoint connection operation. */
export declare interface VideoAnalyzerPrivateEndpointConnectionOperationStatus {
    /** Operation identifier. */
    name: string;
    /** Operation resource ID. */
    id?: string;
    /** Operation start time. */
    startTime?: string;
    /** Operation end time. */
    endTime?: string;
    /** Operation status. */
    status?: string;
    /** The error detail. */
    error?: ErrorDetail;
}

/** Interface representing a VideoAnalyzers. */
export declare interface VideoAnalyzers {
    /**
     * Lists the Video Analyzer accounts in the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: VideoAnalyzersListOptionalParams): Promise<VideoAnalyzersListResponse>;
    /**
     * Get the details of the specified Video Analyzer account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, options?: VideoAnalyzersGetOptionalParams): Promise<VideoAnalyzersGetResponse>;
    /**
     * Create or update an instance of a Video Analyzer account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, parameters: VideoAnalyzer, options?: VideoAnalyzersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VideoAnalyzersCreateOrUpdateResponse>, VideoAnalyzersCreateOrUpdateResponse>>;
    /**
     * Create or update an instance of a Video Analyzer account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, parameters: VideoAnalyzer, options?: VideoAnalyzersCreateOrUpdateOptionalParams): Promise<VideoAnalyzersCreateOrUpdateResponse>;
    /**
     * Delete the specified Video Analyzer account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, options?: VideoAnalyzersDeleteOptionalParams): Promise<void>;
    /**
     * Updates an existing instance of Video Analyzer account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, parameters: VideoAnalyzerUpdate, options?: VideoAnalyzersUpdateOptionalParams): Promise<PollerLike<PollOperationState<VideoAnalyzersUpdateResponse>, VideoAnalyzersUpdateResponse>>;
    /**
     * Updates an existing instance of Video Analyzer account
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Video Analyzer account name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, parameters: VideoAnalyzerUpdate, options?: VideoAnalyzersUpdateOptionalParams): Promise<VideoAnalyzersUpdateResponse>;
    /**
     * List all Video Analyzer accounts in the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: VideoAnalyzersListBySubscriptionOptionalParams): Promise<VideoAnalyzersListBySubscriptionResponse>;
}

/** Defines headers for VideoAnalyzers_createOrUpdate operation. */
export declare interface VideoAnalyzersCreateOrUpdateHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface VideoAnalyzersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VideoAnalyzersCreateOrUpdateResponse = VideoAnalyzer;

/** Optional parameters. */
export declare interface VideoAnalyzersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface VideoAnalyzersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VideoAnalyzersGetResponse = VideoAnalyzer;

/** Optional parameters. */
export declare interface VideoAnalyzersListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type VideoAnalyzersListBySubscriptionResponse = VideoAnalyzerCollection;

/** Optional parameters. */
export declare interface VideoAnalyzersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type VideoAnalyzersListResponse = VideoAnalyzerCollection;

/** Defines headers for VideoAnalyzers_update operation. */
export declare interface VideoAnalyzersUpdateHeaders {
    /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
    retryAfter?: number;
    /** The URI to poll for completion status. */
    location?: string;
    /** The URI to poll for completion status. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface VideoAnalyzersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VideoAnalyzersUpdateResponse = VideoAnalyzersUpdateHeaders & VideoAnalyzer;

/** The update operation for a Video Analyzer account. */
export declare interface VideoAnalyzerUpdate {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The identities associated to the Video Analyzer resource. */
    identity?: VideoAnalyzerIdentity;
    /** The storage accounts for this resource. */
    storageAccounts?: StorageAccount[];
    /**
     * The endpoints associated with this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoints?: Endpoint[];
    /** The account encryption properties. */
    encryption?: AccountEncryption;
    /** The IoT Hubs for this resource. */
    iotHubs?: IotHub[];
    /** Whether or not public network access is allowed for resources under the Video Analyzer account. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Network access control for Video Analyzer. */
    networkAccessControl?: NetworkAccessControl;
    /**
     * Provisioning state of the Video Analyzer account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Private Endpoint Connections created under Video Analyzer account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** Video archival properties. */
export declare interface VideoArchival {
    /** Video retention period indicates the maximum age of the video archive segments which are intended to be kept in storage. It must be provided in the ISO8601 duration format in the granularity of days, up to a maximum of 10 years. For example, if this is set to P30D (30 days), content older than 30 days will be periodically deleted. This value can be updated at any time and the new desired retention period will be effective within 24 hours. */
    retentionPeriod?: string;
}

/** "Video content token grants access to the video content URLs." */
export declare interface VideoContentToken {
    /**
     * The content token expiration date in ISO8601 format (eg. 2021-01-01T00:00:00Z).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expirationDate?: Date;
    /**
     * The content token value to be added to the video content URL as the value for the "token" query string parameter. The token is specific to a single video.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly token?: string;
}

/** Set of URLs to the video content. */
export declare interface VideoContentUrls {
    /** Video file download URL. This URL can be used in conjunction with the video content authorization token to download the video MP4 file. The resulting MP4 file can be played on any standard media player. It is available when the video type is 'file' and video file is available for consumption. */
    downloadUrl?: string;
    /**
     * Video archive streaming base URL. The archived content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token on any compatible DASH or HLS players by appending the following to the base URL:
     *
     *     - HLSv4:     /manifest(format=m3u8-aapl).m3u8
     *     - HLS CMAF:  /manifest(format=m3u8-cmaf)
     *     - DASH CMAF: /manifest(format=mpd-time-cmaf)
     *
     *     Moreover, an ongoing video recording can be played in "live mode" with latencies which are approximately double of the chosen video segment length. It is available when the video type is 'archive' and video archiving is enabled.
     */
    archiveBaseUrl?: string;
    /** Video low-latency streaming URL. The live content can be automatically played by the Azure Video Analyzer player widget. Alternatively, this URL can be used in conjunction with the video content authorization token to expose a WebSocket tunneled RTSP stream. It is available when the video type is 'archive' and a live, low-latency feed is available from the source. */
    rtspTunnelUrl?: string;
    /** Video preview image URLs. These URLs can be used in conjunction with the video content authorization token to download the most recent still image from the video archive in different resolutions. They are available when the video type is 'archive' and preview images are enabled. */
    previewImageUrls?: VideoPreviewImageUrls;
}

/** Optional properties to be used in case a new video resource needs to be created on the service. These will not take effect if the video already exists. */
export declare interface VideoCreationProperties {
    /** Optional title provided by the user. Value can be up to 256 characters long. */
    title?: string;
    /** Optional description provided by the user. Value can be up to 2048 characters long. */
    description?: string;
    /** Segment length indicates the length of individual content files (segments) which are persisted to storage. Smaller segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments. Changing this value after the initial call to create the video resource can lead to errors when uploading content to the archive. Default value is 30 seconds. This property is only allowed for topologies where "kind" is set to "live". */
    segmentLength?: string;
    /** Video retention period indicates how long the video is kept in storage. Value must be specified in ISO8601 duration format (i.e. "P1D" equals 1 day) and can vary between 1 day to 10 years, in 1 day increments. When absent (null), all video content is retained indefinitely. This property is only allowed for topologies where "kind" is set to "live". */
    retentionPeriod?: string;
}

/** Base type for all video encoding presets, which define the recipe or instructions on how the input video should be processed. */
export declare interface VideoEncoderBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.VideoEncoderH264";
    /** The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video. */
    bitrateKbps?: string;
    /** The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video. */
    frameRate?: string;
    /** Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video. */
    scale?: VideoScale;
}

export declare type VideoEncoderBaseUnion = VideoEncoderBase | VideoEncoderH264;

/** A custom preset for encoding video with the H.264 (AVC) codec. */
export declare type VideoEncoderH264 = VideoEncoderBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.VideoEncoderH264";
};

/** Represents a video resource within Azure Video Analyzer. Videos can be ingested from RTSP cameras through live pipelines or can be created by exporting sequences from existing captured video through a pipeline job. Videos ingested through live pipelines can be streamed through Azure Video Analyzer Player Widget or compatible players. Exported videos can be downloaded as MP4 files. */
export declare type VideoEntity = ProxyResource & {
    /** Optional video title provided by the user. Value can be up to 256 characters long. */
    title?: string;
    /** Optional video description provided by the user. Value can be up to 2048 characters long. */
    description?: string;
    /**
     * Video content type. Different content types are suitable for different applications and scenarios.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly typePropertiesType?: VideoType;
    /**
     * Video flags contain information about the available video actions and its dynamic properties based on the current video state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly flags?: VideoFlags;
    /**
     * Set of URLs to the video content.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentUrls?: VideoContentUrls;
    /** Contains information about the video and audio content. */
    mediaInfo?: VideoMediaInfo;
    /** Video archival properties. */
    archival?: VideoArchival;
};

/** A collection of VideoEntity items. */
export declare interface VideoEntityCollection {
    /** A collection of VideoEntity items. */
    value?: VideoEntity[];
    /** A link to the next page of the collection (when the collection contains too many results to return in one response). */
    nextLink?: string;
}

/** Video flags contain information about the available video actions and its dynamic properties based on the current video state. */
export declare interface VideoFlags {
    /** Value indicating whether or not the video can be streamed. Only "archive" type videos can be streamed. */
    canStream: boolean;
    /** Value indicating whether or not there has ever been data recorded or uploaded into the video. Newly created videos have this value set to false. */
    hasData: boolean;
    /** Value indicating whether or not the video is currently being referenced be an active pipeline. The fact that is being referenced, doesn't necessarily indicate that data is being received. For example, video recording may be gated on events or camera may not be accessible at the time. */
    isInUse: boolean;
}

/** Contains information about the video and audio content. */
export declare interface VideoMediaInfo {
    /** Video segment length indicates the length of individual video files (segments) which are persisted to storage. Smaller segments provide lower archive playback latency but generate larger volume of storage transactions. Larger segments reduce the amount of storage transactions while increasing the archive playback latency. Value must be specified in ISO8601 duration format (i.e. "PT30S" equals 30 seconds) and can vary between 30 seconds to 5 minutes, in 30 seconds increments. */
    segmentLength?: string;
}

/** Video preview image URLs. These URLs can be used in conjunction with the video content authorization token to download the most recent still image from the video archive in different resolutions. They are available when the video type is 'archive' and preview images are enabled. */
export declare interface VideoPreviewImageUrls {
    /** Low resolution preview image URL. */
    small?: string;
    /** Medium resolution preview image URL. */
    medium?: string;
    /** High resolution preview image URL. */
    large?: string;
}

/** Optional flags used to change how video is published. These are only allowed for topologies where "kind" is set to "live". */
export declare interface VideoPublishingOptions {
    /** When set to 'true' content will not be archived or recorded. This is used, for example, when the topology is used only for low latency video streaming. Default is 'false'.  If set to 'true', then "disableRtspPublishing" must be set to 'false'. */
    disableArchive?: string;
    /** When set to 'true' the RTSP playback URL will not be published, disabling low latency streaming. This is used, for example, when the topology is used only for archiving content. Default is 'false'.  If set to 'true', then "disableArchive" must be set to 'false'. */
    disableRtspPublishing?: string;
}

/** Interface representing a Videos. */
export declare interface Videos {
    /**
     * Retrieves a list of video resources that have been created, along with their JSON representations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: VideosListOptionalParams): PagedAsyncIterableIterator<VideoEntity>;
    /**
     * Retrieves an existing video resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param videoName The Video name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, videoName: string, options?: VideosGetOptionalParams): Promise<VideosGetResponse>;
    /**
     * Creates a new video resource or updates an existing video resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param videoName The Video name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, accountName: string, videoName: string, parameters: VideoEntity, options?: VideosCreateOrUpdateOptionalParams): Promise<VideosCreateOrUpdateResponse>;
    /**
     * Deletes an existing video resource and its underlying data. This operation is irreversible.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param videoName The Video name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, videoName: string, options?: VideosDeleteOptionalParams): Promise<void>;
    /**
     * Updates individual properties of an existing video resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param videoName The Video name.
     * @param parameters The request parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, videoName: string, parameters: VideoEntity, options?: VideosUpdateOptionalParams): Promise<VideosUpdateResponse>;
    /**
     * Generates a streaming token which can be used for accessing content from video content URLs, for a
     * video resource with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName The Azure Video Analyzer account name.
     * @param videoName The Video name.
     * @param options The options parameters.
     */
    listContentToken(resourceGroupName: string, accountName: string, videoName: string, options?: VideosListContentTokenOptionalParams): Promise<VideosListContentTokenResponse>;
}

/** The video scaling information. */
export declare interface VideoScale {
    /** The desired output video height. */
    height?: string;
    /** The desired output video width. */
    width?: string;
    /** Describes the video scaling mode to be applied. Default mode is 'Pad'. If the mode is 'Pad' or 'Stretch' then both width and height must be specified. Else if the mode is 'PreserveAspectRatio' then only one of width or height need be provided. */
    mode?: VideoScaleMode;
}

/**
 * Defines values for VideoScaleMode. \
 * {@link KnownVideoScaleMode} can be used interchangeably with VideoScaleMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pad**: Pads the video with black horizontal stripes (letterbox) or black vertical stripes (pillar-box) so the video is resized to the specified dimensions while not altering the content aspect ratio. \
 * **PreserveAspectRatio**: Preserves the same aspect ratio as the input video. If only one video dimension is provided, the second dimension is calculated based on the input video aspect ratio. When 2 dimensions are provided, the video is resized to fit the most constraining dimension, considering the input video size and aspect ratio. \
 * **Stretch**: Stretches the original video so it resized to the specified dimensions.
 */
export declare type VideoScaleMode = string;

/** Optional parameters. */
export declare interface VideosCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type VideosCreateOrUpdateResponse = VideoEntity;

/** Optional parameters. */
export declare interface VideosDeleteOptionalParams extends coreClient.OperationOptions {
}

/** A sequence of absolute datetime ranges as a string. The datetime values should follow IS08601, and the sum of the ranges should add up to 24 hours or less. Currently, there can be only one range specified in the sequence. */
export declare type VideoSequenceAbsoluteTimeMarkers = TimeSequenceBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.VideoSequenceAbsoluteTimeMarkers";
    /** The sequence of datetime ranges. Example: '[["2021-10-05T03:30:00Z", "2021-10-05T03:40:00Z"]]'. */
    ranges: string;
};

/** Optional parameters. */
export declare interface VideosGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VideosGetResponse = VideoEntity;

/** Video sink in a live topology allows for video and audio to be captured, optionally archived, and published via a video resource. If archiving is enabled, this results in a video of type 'archive'. If used in a batch topology, this allows for video and audio to be stored as a file, and published via a video resource of type 'file' */
export declare type VideoSink = SinkNodeBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.VideoSink";
    /** Name of a new or existing video resource used to capture and publish content. Note: if downstream of RTSP source, and if disableArchive is set to true, then no content is archived. */
    videoName: string;
    /** Optional video properties to be used in case a new video resource needs to be created on the service. */
    videoCreationProperties?: VideoCreationProperties;
    /** Options to change how the video sink publishes content via the video resource. This property is only allowed for topologies where "kind" is set to "live". */
    videoPublishingOptions?: VideoPublishingOptions;
};

/** Optional parameters. */
export declare interface VideosListContentTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContentToken operation. */
export declare type VideosListContentTokenResponse = VideoContentToken;

/** Optional parameters. */
export declare interface VideosListNextOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type VideosListNextResponse = VideoEntityCollection;

/** Optional parameters. */
export declare interface VideosListOptionalParams extends coreClient.OperationOptions {
    /** Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type VideosListResponse = VideoEntityCollection;

/** Video source allows for content from a Video Analyzer video resource to be ingested into a pipeline. Currently supported only with batch pipelines. */
export declare type VideoSource = SourceNodeBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "#Microsoft.VideoAnalyzer.VideoSource";
    /** Name of the Video Analyzer video resource to be used as the source. */
    videoName: string;
    /** Describes a sequence of datetime ranges. The video source only picks up recorded media within these ranges. */
    timeSequences: TimeSequenceBaseUnion;
};

/** Optional parameters. */
export declare interface VideosUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type VideosUpdateResponse = VideoEntity;

/**
 * Defines values for VideoType. \
 * {@link KnownVideoType} can be used interchangeably with VideoType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Archive**: Archive is flexible format that represents a video stream associated with wall-clock time. The video archive can either be continuous or discontinuous. An archive is discontinuous when there are gaps in the recording due to various reasons, such as the live pipeline being stopped, camera being disconnected or due to the use of event based recordings through the use of a signal gate. There is no limit to the archive duration and new video data can be appended to the existing archive at any time, as long as the same video codec and codec parameters are being used. Videos of this type are suitable for appending and long term archival. \
 * **File**: File represents a video which is stored as a single media file, such as MP4. Videos of this type are suitable to be downloaded for external consumption.
 */
export declare type VideoType = string;

export { }
