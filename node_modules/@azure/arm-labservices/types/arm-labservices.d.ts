import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** Profile for how to handle shutting down virtual machines. */
export declare interface AutoShutdownProfile {
    /** Whether shutdown on disconnect is enabled */
    shutdownOnDisconnect?: EnableState;
    /** Whether a VM will get shutdown when it hasn't been connected to after a period of time. */
    shutdownWhenNotConnected?: EnableState;
    /** Whether a VM will get shutdown when it has idled for a period of time. */
    shutdownOnIdle?: ShutdownOnIdleMode;
    /** The amount of time a VM will stay running after a user disconnects if this behavior is enabled. */
    disconnectDelay?: string;
    /** The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled. */
    noConnectDelay?: string;
    /** The amount of time a VM will idle before it is shutdown if this behavior is enabled. */
    idleDelay?: string;
}

/** Connection profile for how users connect to lab virtual machines. */
export declare interface ConnectionProfile {
    /** The enabled access level for Web Access over SSH. */
    webSshAccess?: ConnectionType;
    /** The enabled access level for Web Access over RDP. */
    webRdpAccess?: ConnectionType;
    /** The enabled access level for Client Access over SSH. */
    clientSshAccess?: ConnectionType;
    /** The enabled access level for Client Access over RDP. */
    clientRdpAccess?: ConnectionType;
}

/** Defines values for ConnectionType. */
export declare type ConnectionType = "Public" | "Private" | "None";

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Defines values for CreateOption. */
export declare type CreateOption = "Image" | "TemplateVM";

/** Credentials for a user on a lab VM. */
export declare interface Credentials {
    /** The username to use when signing in to lab VMs. */
    username: string;
    /** The password for the user. This is required for the TemplateVM createOption. */
    password?: string;
}

/** Defines values for EnableState. */
export declare type EnableState = "Enabled" | "Disabled";

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Identity for the resource. */
export declare interface Identity {
    /**
     * The principal ID of resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The identity type. */
    type?: "SystemAssigned";
}

/** Lab services virtual machine image */
declare interface Image_2 extends ProxyResource {
    /**
     * Metadata pertaining to creation and last modification of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Is the image enabled */
    enabledState?: EnableState;
    /**
     * Current provisioning state of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The image display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * A description of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * URL of the image icon.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iconUrl?: string;
    /**
     * The image author.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly author?: string;
    /**
     * The OS Type of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OsType;
    /**
     * The ID of marketplace plan associated with the image (optional).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly plan?: string;
    /**
     * The status of image terms of use (enabled = accepted, disabled = not accepted).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly termsStatus?: EnableState;
    /**
     * The ID of an offer associated with the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly offer?: string;
    /**
     * The ID of the publisher of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisher?: string;
    /**
     * The image SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: string;
    /**
     * The image version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The ID for the image in the shared gallery.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sharedGalleryId?: string;
    /** The available regions of the image in the shared gallery. */
    availableRegions?: string[];
    /**
     * The OS State of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osState?: OsState;
}
export { Image_2 as Image }

/** Properties of an image resource. */
export declare interface ImageProperties extends ImageUpdateProperties {
    /**
     * Current provisioning state of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The image display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * A description of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * URL of the image icon.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iconUrl?: string;
    /**
     * The image author.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly author?: string;
    /**
     * The OS Type of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OsType;
    /**
     * The ID of marketplace plan associated with the image (optional).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly plan?: string;
    /**
     * The status of image terms of use (enabled = accepted, disabled = not accepted).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly termsStatus?: EnableState;
    /**
     * The ID of an offer associated with the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly offer?: string;
    /**
     * The ID of the publisher of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisher?: string;
    /**
     * The image SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: string;
    /**
     * The image version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The ID for the image in the shared gallery.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sharedGalleryId?: string;
    /** The available regions of the image in the shared gallery. */
    availableRegions?: string[];
    /**
     * The OS State of the image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osState?: OsState;
}

/** Image reference information. Used in the virtual machine profile. */
export declare interface ImageReference {
    /** Image resource ID */
    id?: string;
    /** The image offer if applicable. */
    offer?: string;
    /** The image publisher */
    publisher?: string;
    /** The image SKU */
    sku?: string;
    /** The image version specified on creation. */
    version?: string;
    /**
     * The actual version of the image after use.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly exactVersion?: string;
}

/** Interface representing a Images. */
export declare interface Images {
    /**
     * Gets all images from galleries attached to a lab plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param options The options parameters.
     */
    listByLabPlan(resourceGroupName: string, labPlanName: string, options?: ImagesListByLabPlanOptionalParams): PagedAsyncIterableIterator<Image_2>;
    /**
     * Gets an image resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param imageName The image name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labPlanName: string, imageName: string, options?: ImagesGetOptionalParams): Promise<ImagesGetResponse>;
    /**
     * Updates an image resource via PUT. Creating new resources via PUT will not function.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param imageName The image name.
     * @param body The request body.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labPlanName: string, imageName: string, body: Image_2, options?: ImagesCreateOrUpdateOptionalParams): Promise<ImagesCreateOrUpdateResponse>;
    /**
     * Updates an image resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param imageName The image name.
     * @param body The request body.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labPlanName: string, imageName: string, body: ImageUpdate, options?: ImagesUpdateOptionalParams): Promise<ImagesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ImagesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ImagesCreateOrUpdateResponse = Image_2;

/** Optional parameters. */
export declare interface ImagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ImagesGetResponse = Image_2;

/** Optional parameters. */
export declare interface ImagesListByLabPlanNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLabPlanNext operation. */
export declare type ImagesListByLabPlanNextResponse = PagedImages;

/** Optional parameters. */
export declare interface ImagesListByLabPlanOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the listByLabPlan operation. */
export declare type ImagesListByLabPlanResponse = PagedImages;

/** Optional parameters. */
export declare interface ImagesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ImagesUpdateResponse = Image_2;

/** Lab services virtual machine image for updates. */
export declare interface ImageUpdate {
    /** Is the image enabled */
    enabledState?: EnableState;
}

/** Properties of an image resource update */
export declare interface ImageUpdateProperties {
    /** Is the image enabled */
    enabledState?: EnableState;
}

/** Defines values for InvitationState. */
export declare type InvitationState = "NotSent" | "Sending" | "Sent" | "Failed";

/** Body for a user invite request */
export declare interface InviteBody {
    /** Custom text for the invite email. */
    text?: string;
}

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link LabServicesSkuTier} that the service accepts. */
export declare enum KnownLabServicesSkuTier {
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link RestrictionReasonCode} that the service accepts. */
export declare enum KnownRestrictionReasonCode {
    /** QuotaId */
    QuotaId = "QuotaId",
    /** NotAvailableForSubscription */
    NotAvailableForSubscription = "NotAvailableForSubscription"
}

/** Known values of {@link RestrictionType} that the service accepts. */
export declare enum KnownRestrictionType {
    /** Location */
    Location = "Location"
}

/** Known values of {@link ScaleType} that the service accepts. */
export declare enum KnownScaleType {
    /** The capacity is not adjustable in any way. */
    None = "None",
    /** The user must manually scale this SKU in and out. */
    Manual = "Manual",
    /** The user is permitted to scale this SKU in and out. */
    Automatic = "Automatic"
}

/** Known values of {@link UsageUnit} that the service accepts. */
export declare enum KnownUsageUnit {
    /** Count */
    Count = "Count"
}

/** The lab resource. */
export declare interface Lab extends TrackedResource {
    /**
     * Metadata pertaining to creation and last modification of the lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting idle. */
    autoShutdownProfile?: AutoShutdownProfile;
    /** The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports are open. */
    connectionProfile?: ConnectionProfile;
    /** The profile used for creating lab virtual machines. */
    virtualMachineProfile?: VirtualMachineProfile;
    /** The lab security profile. */
    securityProfile?: SecurityProfile;
    /** The lab user list management profile. */
    rosterProfile?: RosterProfile;
    /** The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization.. */
    labPlanId?: string;
    /** The title of the lab. */
    title?: string;
    /** The description of the lab. */
    description?: string;
    /**
     * Current provisioning state of the lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The network profile for the lab, typically applied via a lab plan. This profile cannot be modified once a lab has been created. */
    networkProfile?: LabNetworkProfile;
    /**
     * The lab state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: LabState;
}

/** Profile for how to handle networking for Labs. */
export declare interface LabNetworkProfile {
    /** The external subnet resource id */
    subnetId?: string;
    /** The external load balancer resource id */
    loadBalancerId?: string;
    /** The external public IP resource id */
    publicIpId?: string;
}

/** Lab Plans act as a permission container for creating labs via labs.azure.com. Additionally, they can provide a set of default configurations that will apply at the time of creating a lab, but these defaults can still be overwritten. */
export declare interface LabPlan extends TrackedResource {
    /**
     * Metadata pertaining to creation and last modification of the lab plan.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Managed Identity Information */
    identity?: Identity;
    /** The default lab connection profile. This can be changed on a lab resource and only provides a default profile. */
    defaultConnectionProfile?: ConnectionProfile;
    /** The default lab shutdown profile. This can be changed on a lab resource and only provides a default profile. */
    defaultAutoShutdownProfile?: AutoShutdownProfile;
    /** The lab plan network profile. To enforce lab network policies they must be defined here and cannot be changed when there are existing labs associated with this lab plan. */
    defaultNetworkProfile?: LabPlanNetworkProfile;
    /** The allowed regions for the lab creator to use when creating labs using this lab plan. */
    allowedRegions?: string[];
    /** Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template virtual machine image it will be persisted in this gallery. Shared images from the gallery can be made available to use when creating new labs. */
    sharedGalleryId?: string;
    /** Support contact information and instructions for users of the lab plan. This information is displayed to lab owners and virtual machine users for all labs in the lab plan. */
    supportInfo?: SupportInfo;
    /** Base Url of the lms instance this lab plan can link lab rosters against. */
    linkedLmsInstance?: string;
    /**
     * Current provisioning state of the lab plan.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Profile for how to handle networking for Lab Plans. */
export declare interface LabPlanNetworkProfile {
    /** The external subnet resource id */
    subnetId?: string;
}

/** Lab plan resource properties */
export declare interface LabPlanProperties extends LabPlanUpdateProperties {
    /**
     * Current provisioning state of the lab plan.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Interface representing a LabPlans. */
export declare interface LabPlans {
    /**
     * Returns a list of all lab plans within a subscription
     * @param options The options parameters.
     */
    listBySubscription(options?: LabPlansListBySubscriptionOptionalParams): PagedAsyncIterableIterator<LabPlan>;
    /**
     * Returns a list of all lab plans for a subscription and resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: LabPlansListByResourceGroupOptionalParams): PagedAsyncIterableIterator<LabPlan>;
    /**
     * Retrieves the properties of a Lab Plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labPlanName: string, options?: LabPlansGetOptionalParams): Promise<LabPlansGetResponse>;
    /**
     * Operation to create or update a Lab Plan resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labPlanName: string, body: LabPlan, options?: LabPlansCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<LabPlansCreateOrUpdateResponse>, LabPlansCreateOrUpdateResponse>>;
    /**
     * Operation to create or update a Lab Plan resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labPlanName: string, body: LabPlan, options?: LabPlansCreateOrUpdateOptionalParams): Promise<LabPlansCreateOrUpdateResponse>;
    /**
     * Operation to update a Lab Plan resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, labPlanName: string, body: LabPlanUpdate, options?: LabPlansUpdateOptionalParams): Promise<PollerLike<PollOperationState<LabPlansUpdateResponse>, LabPlansUpdateResponse>>;
    /**
     * Operation to update a Lab Plan resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, labPlanName: string, body: LabPlanUpdate, options?: LabPlansUpdateOptionalParams): Promise<LabPlansUpdateResponse>;
    /**
     * Operation to delete a Lab Plan resource. Deleting a lab plan does not delete labs associated with a
     * lab plan, nor does it delete shared images added to a gallery via the lab plan permission container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labPlanName: string, options?: LabPlansDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a Lab Plan resource. Deleting a lab plan does not delete labs associated with a
     * lab plan, nor does it delete shared images added to a gallery via the lab plan permission container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labPlanName: string, options?: LabPlansDeleteOptionalParams): Promise<void>;
    /**
     * Saves an image from a lab VM to the attached shared image gallery.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginSaveImage(resourceGroupName: string, labPlanName: string, body: SaveImageBody, options?: LabPlansSaveImageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Saves an image from a lab VM to the attached shared image gallery.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
     *                    group. Used in resource URIs and in UI.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginSaveImageAndWait(resourceGroupName: string, labPlanName: string, body: SaveImageBody, options?: LabPlansSaveImageOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface LabPlansCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LabPlansCreateOrUpdateResponse = LabPlan;

/** Optional parameters. */
export declare interface LabPlansDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabPlansGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LabPlansGetResponse = LabPlan;

/** Optional parameters. */
export declare interface LabPlansListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type LabPlansListByResourceGroupNextResponse = PagedLabPlans;

/** Optional parameters. */
export declare interface LabPlansListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type LabPlansListByResourceGroupResponse = PagedLabPlans;

/** Optional parameters. */
export declare interface LabPlansListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type LabPlansListBySubscriptionNextResponse = PagedLabPlans;

/** Optional parameters. */
export declare interface LabPlansListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type LabPlansListBySubscriptionResponse = PagedLabPlans;

/** Optional parameters. */
export declare interface LabPlansSaveImageOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabPlansUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type LabPlansUpdateResponse = LabPlan;

/** Contains lab configuration and default settings. This variant is used for PATCH. */
export declare interface LabPlanUpdate extends TrackedResourceUpdate {
    /** Managed Identity Information */
    identity?: Identity;
    /** The default lab connection profile. This can be changed on a lab resource and only provides a default profile. */
    defaultConnectionProfile?: ConnectionProfile;
    /** The default lab shutdown profile. This can be changed on a lab resource and only provides a default profile. */
    defaultAutoShutdownProfile?: AutoShutdownProfile;
    /** The lab plan network profile. To enforce lab network policies they must be defined here and cannot be changed when there are existing labs associated with this lab plan. */
    defaultNetworkProfile?: LabPlanNetworkProfile;
    /** The allowed regions for the lab creator to use when creating labs using this lab plan. */
    allowedRegions?: string[];
    /** Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template virtual machine image it will be persisted in this gallery. Shared images from the gallery can be made available to use when creating new labs. */
    sharedGalleryId?: string;
    /** Support contact information and instructions for users of the lab plan. This information is displayed to lab owners and virtual machine users for all labs in the lab plan. */
    supportInfo?: SupportInfo;
    /** Base Url of the lms instance this lab plan can link lab rosters against. */
    linkedLmsInstance?: string;
}

/** Lab plan resource properties for updates */
export declare interface LabPlanUpdateProperties {
    /** The default lab connection profile. This can be changed on a lab resource and only provides a default profile. */
    defaultConnectionProfile?: ConnectionProfile;
    /** The default lab shutdown profile. This can be changed on a lab resource and only provides a default profile. */
    defaultAutoShutdownProfile?: AutoShutdownProfile;
    /** The lab plan network profile. To enforce lab network policies they must be defined here and cannot be changed when there are existing labs associated with this lab plan. */
    defaultNetworkProfile?: LabPlanNetworkProfile;
    /** The allowed regions for the lab creator to use when creating labs using this lab plan. */
    allowedRegions?: string[];
    /** Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template virtual machine image it will be persisted in this gallery. Shared images from the gallery can be made available to use when creating new labs. */
    sharedGalleryId?: string;
    /** Support contact information and instructions for users of the lab plan. This information is displayed to lab owners and virtual machine users for all labs in the lab plan. */
    supportInfo?: SupportInfo;
    /** Base Url of the lms instance this lab plan can link lab rosters against. */
    linkedLmsInstance?: string;
}

/** Properties of a lab resource. */
export declare interface LabProperties extends LabUpdateProperties {
    /**
     * Current provisioning state of the lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The network profile for the lab, typically applied via a lab plan. This profile cannot be modified once a lab has been created. */
    networkProfile?: LabNetworkProfile;
    /**
     * The lab state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: LabState;
}

/** Interface representing a Labs. */
export declare interface Labs {
    /**
     * Returns a list of all labs for a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: LabsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Lab>;
    /**
     * Returns a list of all labs in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: LabsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Lab>;
    /**
     * Returns the properties of a lab resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, options?: LabsGetOptionalParams): Promise<LabsGetResponse>;
    /**
     * Operation to create or update a lab resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, body: Lab, options?: LabsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<LabsCreateOrUpdateResponse>, LabsCreateOrUpdateResponse>>;
    /**
     * Operation to create or update a lab resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, body: Lab, options?: LabsCreateOrUpdateOptionalParams): Promise<LabsCreateOrUpdateResponse>;
    /**
     * Operation to update a lab resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, labName: string, body: LabUpdate, options?: LabsUpdateOptionalParams): Promise<PollerLike<PollOperationState<LabsUpdateResponse>, LabsUpdateResponse>>;
    /**
     * Operation to update a lab resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, labName: string, body: LabUpdate, options?: LabsUpdateOptionalParams): Promise<LabsUpdateResponse>;
    /**
     * Operation to delete a lab resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, options?: LabsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a lab resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, options?: LabsDeleteOptionalParams): Promise<void>;
    /**
     * Publish or re-publish a lab. This will create or update all lab resources, such as virtual machines.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    beginPublish(resourceGroupName: string, labName: string, options?: LabsPublishOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Publish or re-publish a lab. This will create or update all lab resources, such as virtual machines.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    beginPublishAndWait(resourceGroupName: string, labName: string, options?: LabsPublishOptionalParams): Promise<void>;
    /**
     * Action used to manually kick off an AAD group sync job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    beginSyncGroup(resourceGroupName: string, labName: string, options?: LabsSyncGroupOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Action used to manually kick off an AAD group sync job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    beginSyncGroupAndWait(resourceGroupName: string, labName: string, options?: LabsSyncGroupOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface LabsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LabsCreateOrUpdateResponse = Lab;

/** Optional parameters. */
export declare interface LabsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

export declare class LabServicesClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the LabServicesClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: LabServicesClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    images: Images;
    labPlans: LabPlans;
    operations: Operations;
    labs: Labs;
    operationResults: OperationResults;
    schedules: Schedules;
    skus: Skus;
    usages: Usages;
    users: Users;
    virtualMachines: VirtualMachines;
}

/** Optional parameters. */
export declare interface LabServicesClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Azure Lab Services resource SKUs */
export declare interface LabServicesSku {
    /**
     * The lab services resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * The name of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The tier of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: LabServicesSkuTier;
    /**
     * The SKU size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly size?: string;
    /**
     * The family of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly family?: string;
    /** The scale out/in options of the SKU. */
    capacity?: LabServicesSkuCapacity;
    /**
     * The capabilities of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: LabServicesSkuCapabilities[];
    /**
     * List of locations that are available for a size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * Metadata for retrieving price info of a lab services SKUs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly costs?: LabServicesSkuCost[];
    /**
     * Restrictions of a lab services SKUs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restrictions?: LabServicesSkuRestrictions[];
}

/** The array of capabilities of a lab services SKU. */
export declare interface LabServicesSkuCapabilities {
    /**
     * The name of the capability for a SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The value of the capability for a SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** The scale out/in options of the SKU. */
export declare interface LabServicesSkuCapacity {
    /**
     * The default capacity for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly default?: number;
    /**
     * The lowest permitted capacity for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimum?: number;
    /**
     * The highest permitted capacity for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximum?: number;
    /**
     * The localized name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scaleType?: ScaleType;
}

/** The array of costs of a lab services SKU. */
export declare interface LabServicesSkuCost {
    /**
     * The meter id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly meterId?: string;
    /**
     * The quantity of units charged.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quantity?: number;
    /**
     * The extended unit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extendedUnit?: string;
}

/** The restriction details. */
export declare interface LabServicesSkuRestrictions {
    /**
     * The type of restriction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: RestrictionType;
    /**
     * The values of the restriction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly values?: string[];
    /**
     * The reason for the restriction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reasonCode?: RestrictionReasonCode;
}

/**
 * Defines values for LabServicesSkuTier. \
 * {@link KnownLabServicesSkuTier} can be used interchangeably with LabServicesSkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Premium**
 */
export declare type LabServicesSkuTier = string;

/** Optional parameters. */
export declare interface LabsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LabsGetResponse = Lab;

/** Optional parameters. */
export declare interface LabsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type LabsListByResourceGroupNextResponse = PagedLabs;

/** Optional parameters. */
export declare interface LabsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type LabsListByResourceGroupResponse = PagedLabs;

/** Optional parameters. */
export declare interface LabsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type LabsListBySubscriptionNextResponse = PagedLabs;

/** Optional parameters. */
export declare interface LabsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type LabsListBySubscriptionResponse = PagedLabs;

/** Optional parameters. */
export declare interface LabsPublishOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabsSyncGroupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines values for LabState. */
export declare type LabState = "Draft" | "Publishing" | "Scaling" | "Syncing" | "Published";

/** Optional parameters. */
export declare interface LabsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type LabsUpdateResponse = Lab;

/** The lab resource for updates. */
export declare interface LabUpdate extends TrackedResourceUpdate {
    /** The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting idle. */
    autoShutdownProfile?: AutoShutdownProfile;
    /** The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports are open. */
    connectionProfile?: ConnectionProfile;
    /** The profile used for creating lab virtual machines. */
    virtualMachineProfile?: VirtualMachineProfile;
    /** The lab security profile. */
    securityProfile?: SecurityProfile;
    /** The lab user list management profile. */
    rosterProfile?: RosterProfile;
    /** The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization.. */
    labPlanId?: string;
    /** The title of the lab. */
    title?: string;
    /** The description of the lab. */
    description?: string;
}

/** Properties of a lab resource used for updates. */
export declare interface LabUpdateProperties {
    /** The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting idle. */
    autoShutdownProfile?: AutoShutdownProfile;
    /** The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports are open. */
    connectionProfile?: ConnectionProfile;
    /** The profile used for creating lab virtual machines. */
    virtualMachineProfile?: VirtualMachineProfile;
    /** The lab security profile. */
    securityProfile?: SecurityProfile;
    /** The lab user list management profile. */
    rosterProfile?: RosterProfile;
    /** The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization.. */
    labPlanId?: string;
    /** The title of the lab. */
    title?: string;
    /** The description of the lab. */
    description?: string;
}

/** List of Core Usages. */
export declare interface ListUsagesResult {
    /** The array page of Usages. */
    value?: Usage[];
    /**
     * The link to get the next page of Usage result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A long running operation result */
export declare interface OperationResult {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The operation status */
    status: OperationStatus;
    /** Start time */
    startTime?: Date;
    /** End time */
    endTime?: Date;
    /** Percent completion */
    percentComplete?: number;
    /** The error for a failure if the operation failed. */
    error?: ErrorDetail;
}

/** Interface representing a OperationResults. */
export declare interface OperationResults {
    /**
     * Returns an azure operation result.
     * @param operationResultId The operation result ID / name.
     * @param options The options parameters.
     */
    get(operationResultId: string, options?: OperationResultsGetOptionalParams): Promise<OperationResultsGetResponse>;
}

/** Optional parameters. */
export declare interface OperationResultsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationResultsGetResponse = OperationResult;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Returns a list of all operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Defines values for OperationStatus. */
export declare type OperationStatus = "NotStarted" | "InProgress" | "Succeeded" | "Failed" | "Canceled";

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/** Defines values for OsState. */
export declare type OsState = "Generalized" | "Specialized";

/** Defines values for OsType. */
export declare type OsType = "Windows" | "Linux";

/** Paged list of Lab services virtual machine images. */
export declare interface PagedImages {
    /**
     * The array page of virtual machine images.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Image_2[];
    /**
     * The link to get the next page of image results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Paged list of lab plans. */
export declare interface PagedLabPlans {
    /**
     * The array page of lab plans.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: LabPlan[];
    /**
     * The link to get the next page of lab plan results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Paged list of labs. */
export declare interface PagedLabs {
    /**
     * The array page of lab results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Lab[];
    /**
     * The link to get the next page of image results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Paged list of lab services skus. */
export declare interface PagedLabServicesSkus {
    /**
     * The array page of sku results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: LabServicesSku[];
    /**
     * The link to get the next page of sku results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Paged list of schedules. */
export declare interface PagedSchedules {
    /**
     * The array page of schedule results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Schedule[];
    /**
     * The link to get the next page of schedule results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Paged list of users. */
export declare interface PagedUsers {
    /**
     * The array page of user results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: User[];
    /**
     * The link to get the next page of image results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Paged list of lab services virtual machines. */
export declare interface PagedVirtualMachines {
    /**
     * The array page of virtual machine results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: VirtualMachine[];
    /**
     * The link to get the next page of virtual machine results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines values for ProvisioningState. */
export declare type ProvisioningState = "Creating" | "Updating" | "Deleting" | "Succeeded" | "Failed" | "Locked";

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Defines values for RecurrenceFrequency. */
export declare type RecurrenceFrequency = "Daily" | "Weekly";

/** Recurrence pattern of a lab schedule. */
export declare interface RecurrencePattern {
    /** The frequency of the recurrence. */
    frequency: RecurrenceFrequency;
    /** The week days the schedule runs. Used for when the Frequency is set to Weekly. */
    weekDays?: WeekDay[];
    /** The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used. */
    interval?: number;
    /** When the recurrence will expire. This date is inclusive. */
    expirationDate: Date;
}

/** Defines values for RegistrationState. */
export declare type RegistrationState = "Registered" | "NotRegistered";

/** Body of a reset password request. */
export declare interface ResetPasswordBody {
    /** The user whose password is being reset */
    username: string;
    /** The password */
    password: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/**
 * Defines values for RestrictionReasonCode. \
 * {@link KnownRestrictionReasonCode} can be used interchangeably with RestrictionReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export declare type RestrictionReasonCode = string;

/**
 * Defines values for RestrictionType. \
 * {@link KnownRestrictionType} can be used interchangeably with RestrictionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Location**
 */
export declare type RestrictionType = string;

/** The lab user list management profile. */
export declare interface RosterProfile {
    /** The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode. */
    activeDirectoryGroupId?: string;
    /** The unique context identifier for the lab in the lms. */
    ltiContextId?: string;
    /** The base URI identifying the lms instance. */
    lmsInstance?: string;
    /** The unique id of the azure lab services tool in the lms. */
    ltiClientId?: string;
    /** The uri of the names and roles service endpoint on the lms for the class attached to this lab. */
    ltiRosterEndpoint?: string;
}

/** Body for the save image POST */
export declare interface SaveImageBody {
    /** The name for the image we create. */
    name?: string;
    /** The ID of the lab virtual machine you want to save an image from. */
    labVirtualMachineId?: string;
}

/**
 * Defines values for ScaleType. \
 * {@link KnownScaleType} can be used interchangeably with ScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: The capacity is not adjustable in any way. \
 * **Manual**: The user must manually scale this SKU in and out. \
 * **Automatic**: The user is permitted to scale this SKU in and out.
 */
export declare type ScaleType = string;

/** Schedule for automatically turning virtual machines in a lab on and off at specified times. */
export declare interface Schedule extends ProxyResource {
    /**
     * Metadata pertaining to creation and last modification of the schedule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. */
    startAt?: Date;
    /** When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. */
    stopAt?: Date;
    /** The recurrence pattern of the scheduled actions. */
    recurrencePattern?: RecurrencePattern;
    /** The IANA timezone id for the schedule. */
    timeZoneId?: string;
    /** Notes for this schedule. */
    notes?: string;
    /**
     * Current provisioning state of the schedule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Schedule resource properties */
export declare interface ScheduleProperties extends ScheduleUpdateProperties {
    /**
     * Current provisioning state of the schedule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Interface representing a Schedules. */
export declare interface Schedules {
    /**
     * Returns a list of all schedules for a lab.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    listByLab(resourceGroupName: string, labName: string, options?: SchedulesListByLabOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * Returns the properties of a lab Schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param scheduleName The name of the schedule that uniquely identifies it within containing lab. Used
     *                     in resource URIs.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, scheduleName: string, options?: SchedulesGetOptionalParams): Promise<SchedulesGetResponse>;
    /**
     * Operation to create or update a lab schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param scheduleName The name of the schedule that uniquely identifies it within containing lab. Used
     *                     in resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, scheduleName: string, body: Schedule, options?: SchedulesCreateOrUpdateOptionalParams): Promise<SchedulesCreateOrUpdateResponse>;
    /**
     * Operation to update a lab schedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param scheduleName The name of the schedule that uniquely identifies it within containing lab. Used
     *                     in resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, scheduleName: string, body: ScheduleUpdate, options?: SchedulesUpdateOptionalParams): Promise<SchedulesUpdateResponse>;
    /**
     * Operation to delete a schedule resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param scheduleName The name of the schedule that uniquely identifies it within containing lab. Used
     *                     in resource URIs.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, scheduleName: string, options?: SchedulesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a schedule resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param scheduleName The name of the schedule that uniquely identifies it within containing lab. Used
     *                     in resource URIs.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, scheduleName: string, options?: SchedulesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export declare interface SchedulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SchedulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SchedulesGetResponse = Schedule;

/** Optional parameters. */
export declare interface SchedulesListByLabNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLabNext operation. */
export declare type SchedulesListByLabNextResponse = PagedSchedules;

/** Optional parameters. */
export declare interface SchedulesListByLabOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the listByLab operation. */
export declare type SchedulesListByLabResponse = PagedSchedules;

/** Optional parameters. */
export declare interface SchedulesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type SchedulesUpdateResponse = Schedule;

/** Schedule for automatically turning virtual machines in a lab on and off at specified times. Used for updates. */
export declare interface ScheduleUpdate {
    /** When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. */
    startAt?: Date;
    /** When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. */
    stopAt?: Date;
    /** The recurrence pattern of the scheduled actions. */
    recurrencePattern?: RecurrencePattern;
    /** The IANA timezone id for the schedule. */
    timeZoneId?: string;
    /** Notes for this schedule. */
    notes?: string;
}

/** Schedule resource properties used for updates. */
export declare interface ScheduleUpdateProperties {
    /** When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. */
    startAt?: Date;
    /** When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. */
    stopAt?: Date;
    /** The recurrence pattern of the scheduled actions. */
    recurrencePattern?: RecurrencePattern;
    /** The IANA timezone id for the schedule. */
    timeZoneId?: string;
    /** Notes for this schedule. */
    notes?: string;
}

/** The lab security profile. */
export declare interface SecurityProfile {
    /**
     * The registration code for the lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly registrationCode?: string;
    /** Whether any user or only specified users can register to a lab. */
    openAccess?: EnableState;
}

/** Defines values for ShutdownOnIdleMode. */
export declare type ShutdownOnIdleMode = "None" | "UserAbsence" | "LowUsage";

/** The resource model definition representing SKU */
export declare interface Sku {
    /** The name of the SKU. Ex - P3. It is typically a letter+number code */
    name: string;
    /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
    tier?: SkuTier;
    /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
    size?: string;
    /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
    family?: string;
    /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
    capacity?: number;
}

/** Interface representing a Skus. */
export declare interface Skus {
    /**
     * Returns a list of Azure Lab Services resource SKUs.
     * @param options The options parameters.
     */
    list(options?: SkusListOptionalParams): PagedAsyncIterableIterator<LabServicesSku>;
}

/** Optional parameters. */
export declare interface SkusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SkusListNextResponse = PagedLabServicesSkus;

/** Optional parameters. */
export declare interface SkusListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type SkusListResponse = PagedLabServicesSkus;

/** Defines values for SkuTier. */
export declare type SkuTier = "Free" | "Basic" | "Standard" | "Premium";

/** Support contact information and instructions. */
export declare interface SupportInfo {
    /** Support web address. */
    url?: string;
    /** Support contact email address. */
    email?: string;
    /** Support contact phone number. */
    phone?: string;
    /** Support instructions. */
    instructions?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** Base tracked resource type for all PATCH updates. */
export declare interface TrackedResourceUpdate {
    /** Resource tags. */
    tags?: string[];
}

/** The core usage details. */
export declare interface Usage {
    /** The current usage. */
    currentValue?: number;
    /** The limit integer. */
    limit?: number;
    /** The unit details. */
    unit?: UsageUnit;
    /** The name. */
    name?: UsageName;
    /** The fully qualified arm resource id. */
    id?: string;
}

/** The Usage Names. */
export declare interface UsageName {
    /** The localized name of the resource. */
    localizedValue?: string;
    /** The instances of the resource. */
    skuInstances?: string[];
    /** The name of the resource. */
    value?: string;
}

/** Interface representing a Usages. */
export declare interface Usages {
    /**
     * Returns list of usage per SKU family for the specified subscription in the specified region.
     * @param location The location name.
     * @param options The options parameters.
     */
    listByLocation(location: string, options?: UsagesListByLocationOptionalParams): PagedAsyncIterableIterator<Usage>;
}

/** Optional parameters. */
export declare interface UsagesListByLocationNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLocationNext operation. */
export declare type UsagesListByLocationNextResponse = ListUsagesResult;

/** Optional parameters. */
export declare interface UsagesListByLocationOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the listByLocation operation. */
export declare type UsagesListByLocationResponse = ListUsagesResult;

/**
 * Defines values for UsageUnit. \
 * {@link KnownUsageUnit} can be used interchangeably with UsageUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count**
 */
export declare type UsageUnit = string;

/** User of a lab that can register for and use virtual machines within the lab. */
export declare interface User extends ProxyResource {
    /**
     * Metadata pertaining to creation and last modification of the user resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The amount of usage quota time the user gets in addition to the lab usage quota. */
    additionalUsageQuota?: string;
    /**
     * Current provisioning state of the user resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Display name of the user, for example user's full name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /** Email address of the user. */
    email: string;
    /**
     * State of the user's registration within the lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly registrationState?: RegistrationState;
    /**
     * State of the invitation message for the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invitationState?: InvitationState;
    /**
     * Date and time when the invitation message was sent to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invitationSent?: Date;
    /**
     * How long the user has used their virtual machines in this lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalUsage?: string;
}

/** User resource properties */
export declare interface UserProperties extends UserUpdateProperties {
    /**
     * Current provisioning state of the user resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Display name of the user, for example user's full name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /** Email address of the user. */
    email: string;
    /**
     * State of the user's registration within the lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly registrationState?: RegistrationState;
    /**
     * State of the invitation message for the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invitationState?: InvitationState;
    /**
     * Date and time when the invitation message was sent to the user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invitationSent?: Date;
    /**
     * How long the user has used their virtual machines in this lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalUsage?: string;
}

/** Interface representing a Users. */
export declare interface Users {
    /**
     * Returns a list of all users for a lab.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    listByLab(resourceGroupName: string, labName: string, options?: UsersListByLabOptionalParams): PagedAsyncIterableIterator<User>;
    /**
     * Returns the properties of a lab user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, userName: string, options?: UsersGetOptionalParams): Promise<UsersGetResponse>;
    /**
     * Operation to create or update a lab user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, body: User, options?: UsersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<UsersCreateOrUpdateResponse>, UsersCreateOrUpdateResponse>>;
    /**
     * Operation to create or update a lab user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, userName: string, body: User, options?: UsersCreateOrUpdateOptionalParams): Promise<UsersCreateOrUpdateResponse>;
    /**
     * Operation to update a lab user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, labName: string, userName: string, body: UserUpdate, options?: UsersUpdateOptionalParams): Promise<PollerLike<PollOperationState<UsersUpdateResponse>, UsersUpdateResponse>>;
    /**
     * Operation to update a lab user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, labName: string, userName: string, body: UserUpdate, options?: UsersUpdateOptionalParams): Promise<UsersUpdateResponse>;
    /**
     * Operation to delete a user resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, userName: string, options?: UsersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to delete a user resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, userName: string, options?: UsersDeleteOptionalParams): Promise<void>;
    /**
     * Operation to invite a user to a lab.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginInvite(resourceGroupName: string, labName: string, userName: string, body: InviteBody, options?: UsersInviteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Operation to invite a user to a lab.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param userName The name of the user that uniquely identifies it within containing lab. Used in
     *                 resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginInviteAndWait(resourceGroupName: string, labName: string, userName: string, body: InviteBody, options?: UsersInviteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface UsersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type UsersCreateOrUpdateResponse = User;

/** Optional parameters. */
export declare interface UsersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface UsersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type UsersGetResponse = User;

/** Optional parameters. */
export declare interface UsersInviteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface UsersListByLabNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLabNext operation. */
export declare type UsersListByLabNextResponse = PagedUsers;

/** Optional parameters. */
export declare interface UsersListByLabOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the listByLab operation. */
export declare type UsersListByLabResponse = PagedUsers;

/** Optional parameters. */
export declare interface UsersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type UsersUpdateResponse = User;

/** User of a lab that can register for and use virtual machines within the lab. Used for updates. */
export declare interface UserUpdate {
    /** The amount of usage quota time the user gets in addition to the lab usage quota. */
    additionalUsageQuota?: string;
}

/** User resource properties used for updates. */
export declare interface UserUpdateProperties {
    /** The amount of usage quota time the user gets in addition to the lab usage quota. */
    additionalUsageQuota?: string;
}

/** A lab virtual machine resource. */
export declare interface VirtualMachine extends ProxyResource {
    /**
     * System data of the Lab virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Current provisioning state of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The current state of the virtual machine
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: VirtualMachineState;
    /**
     * Profile for information about connecting to the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionProfile?: VirtualMachineConnectionProfile;
    /**
     * The lab user ID (not the PUID!) of who claimed the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly claimedByUserId?: string;
    /**
     * The type of this VM resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmType?: VirtualMachineType;
}

/** The additional capabilities for a lab VM. */
export declare interface VirtualMachineAdditionalCapabilities {
    /** Flag to pre-install dedicated GPU drivers. */
    installGpuDrivers?: EnableState;
}

/** The connection information for the virtual machine */
export declare interface VirtualMachineConnectionProfile {
    /**
     * The private IP address of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateIpAddress?: string;
    /**
     * Port and host name separated by semicolon for connecting via SSH protocol to the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sshAuthority?: string;
    /**
     * URL for connecting via SSH protocol to the virtual machine in browser.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sshInBrowserUrl?: string;
    /**
     * Port and host name separated by semicolon for connecting via RDP protocol to the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rdpAuthority?: string;
    /**
     * URL for connecting via RDP protocol to the virtual machine in browser.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rdpInBrowserUrl?: string;
    /**
     * The username used to log on to the virtual machine as admin.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly adminUsername?: string;
    /**
     * The username used to log on to the virtual machine as non-admin, if one exists.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nonAdminUsername?: string;
}

/** The base virtual machine configuration for a lab. */
export declare interface VirtualMachineProfile {
    /** Indicates what lab virtual machines are created from. */
    createOption: CreateOption;
    /** The image configuration for lab virtual machines. */
    imageReference: ImageReference;
    /**
     * The OS type of the image
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OsType;
    /** The SKU for the lab. Defines the type of virtual machines used in the lab. */
    sku: Sku;
    /** Additional VM capabilities. */
    additionalCapabilities?: VirtualMachineAdditionalCapabilities;
    /** The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours. */
    usageQuota: string;
    /** Enabling this option will use the same password for all user VMs. */
    useSharedPassword?: EnableState;
    /** Credentials for the admin user on the VM. */
    adminUser: Credentials;
    /** Credentials for the non-admin user on the VM, if one exists. */
    nonAdminUser?: Credentials;
}

/** Interface representing a VirtualMachines. */
export declare interface VirtualMachines {
    /**
     * Returns a list of all virtual machines for a lab.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param options The options parameters.
     */
    listByLab(resourceGroupName: string, labName: string, options?: VirtualMachinesListByLabOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    /**
     * Returns the properties for a lab virtual machine.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesGetOptionalParams): Promise<VirtualMachinesGetResponse>;
    /**
     * Action to start a lab virtual machine.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Action to start a lab virtual machine.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesStartOptionalParams): Promise<void>;
    /**
     * Action to stop a lab virtual machine.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Action to stop a lab virtual machine.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesStopOptionalParams): Promise<void>;
    /**
     * Re-image a lab virtual machine. The virtual machine will be deleted and recreated using the latest
     * published snapshot of the reference environment of the lab.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginReimage(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesReimageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Re-image a lab virtual machine. The virtual machine will be deleted and recreated using the latest
     * published snapshot of the reference environment of the lab.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginReimageAndWait(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesReimageOptionalParams): Promise<void>;
    /**
     * Action to redeploy a lab virtual machine to a different compute node. For troubleshooting
     * connectivity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginRedeploy(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesRedeployOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Action to redeploy a lab virtual machine to a different compute node. For troubleshooting
     * connectivity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param options The options parameters.
     */
    beginRedeployAndWait(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachinesRedeployOptionalParams): Promise<void>;
    /**
     * Resets a lab virtual machine password.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginResetPassword(resourceGroupName: string, labName: string, virtualMachineName: string, body: ResetPasswordBody, options?: VirtualMachinesResetPasswordOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Resets a lab virtual machine password.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param labName The name of the lab that uniquely identifies it within containing lab plan. Used in
     *                resource URIs.
     * @param virtualMachineName The ID of the virtual machine that uniquely identifies it within the
     *                           containing lab. Used in resource URIs.
     * @param body The request body.
     * @param options The options parameters.
     */
    beginResetPasswordAndWait(resourceGroupName: string, labName: string, virtualMachineName: string, body: ResetPasswordBody, options?: VirtualMachinesResetPasswordOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface VirtualMachinesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachinesGetResponse = VirtualMachine;

/** Optional parameters. */
export declare interface VirtualMachinesListByLabNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLabNext operation. */
export declare type VirtualMachinesListByLabNextResponse = PagedVirtualMachines;

/** Optional parameters. */
export declare interface VirtualMachinesListByLabOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply to the operation. */
    filter?: string;
}

/** Contains response data for the listByLab operation. */
export declare type VirtualMachinesListByLabResponse = PagedVirtualMachines;

/** Optional parameters. */
export declare interface VirtualMachinesRedeployOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesReimageOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesResetPasswordOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines values for VirtualMachineState. */
export declare type VirtualMachineState = "Stopped" | "Starting" | "Running" | "Stopping" | "ResettingPassword" | "Reimaging" | "Redeploying";

/** Defines values for VirtualMachineType. */
export declare type VirtualMachineType = "User" | "Template";

/** Defines values for WeekDay. */
export declare type WeekDay = "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday";

export { }
