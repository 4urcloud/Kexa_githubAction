/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, record, isPlaybackMode } from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { ManagementLinkClient } from "../src/managementLinkClient";
import { ResourceManagementClient } from "@azure/arm-resources";
const recorderEnvSetup = {
    replaceableVariables: {
        AZURE_CLIENT_ID: "azure_client_id",
        AZURE_CLIENT_SECRET: "azure_client_secret",
        AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
        SUBSCRIPTION_ID: "azure_subscription_id"
    },
    customizationsOnRecordings: [
        (recording) => recording.replace(/"access_token":"[^"]*"/g, `"access_token":"access_token"`)
    ],
    queryParametersToSkip: []
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Links test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let resources_client;
    let location;
    let resourceGroup;
    let linksName;
    let resourceName;
    let resource2Id;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = record(this, recorderEnvSetup);
            subscriptionId = env.SUBSCRIPTION_ID;
            // This is an example of how the environment variables are used
            const credential = new ClientSecretCredential(env.AZURE_TENANT_ID, env.AZURE_CLIENT_ID, env.AZURE_CLIENT_SECRET);
            client = new ManagementLinkClient(credential, subscriptionId);
            resources_client = new ResourceManagementClient(credential, subscriptionId);
            location = "eastus";
            resourceGroup = "myjstest";
            linksName = "myLink";
            resourceName = "myresourcezzz";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    // async function create_resourceId() {
    //   const result = await resources_client.resources.beginCreateOrUpdateAndWait(resourceGroup,"Microsoft.Compute","","availabilitySets",resourceName,"2019-07-01",{ location: "eastus" });
    //   console.log(result)
    //   return result;
    // }
    // async function create_resourceId2() {
    //   const result = await resources_client.resources.beginCreateOrUpdateAndWait(resourceGroup,"Microsoft.Compute","","availabilitySets",resourceName+"2","2019-07-01",{ location: "eastus" });
    //   console.log(result)
    //   return result;
    // }
    it("resourceLinks create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.resourceLinks.createOrUpdate("/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/availabilitySets/myresourcezzz/providers/Microsoft.Resources/links/" + linksName, {
                properties: {
                    targetId: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/availabilitySets/myresourcezzz2",
                    notes: "Testing links",
                }
            });
            assert.equal(res.name, linksName);
        });
    });
    it("resourceLinks get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const linkId = "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/availabilitySets/" + resourceName + "/providers/Microsoft.Resources/links/" + linksName;
            const res = yield client.resourceLinks.get(linkId);
            assert.equal(res.name, linksName);
        });
    });
    it("resourceLinks list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.resourceLinks.listAtSubscription()), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("resourceLinks delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const linkId = "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/availabilitySets/" + resourceName + "/providers/Microsoft.Resources/links/" + linksName;
            const res = yield client.resourceLinks.delete(linkId);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.resourceLinks.listAtSubscription()), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=links_examples.js.map