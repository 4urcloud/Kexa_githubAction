import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

export declare class AttestationManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AttestationManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AttestationManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    attestationProviders: AttestationProviders;
    privateEndpointConnections: PrivateEndpointConnections;
}

/** Optional parameters. */
export declare interface AttestationManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Attestation service response message. */
export declare interface AttestationProvider extends TrackedResource {
    /**
     * The system metadata relating to this resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Trust model for the attestation provider. */
    trustModel?: string;
    /** Status of attestation service. */
    status?: AttestationServiceStatus;
    /** Gets the uri of attestation service */
    attestUri?: string;
    /**
     * List of private endpoint connections associated with the attestation provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** Attestation Providers List. */
export declare interface AttestationProviderListResult {
    /**
     * The system metadata relating to this resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Attestation Provider array. */
    value?: AttestationProvider[];
}

/** Interface representing a AttestationProviders. */
export declare interface AttestationProviders {
    /**
     * Get the status of Attestation Provider.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, providerName: string, options?: AttestationProvidersGetOptionalParams): Promise<AttestationProvidersGetResponse>;
    /**
     * Creates a new Attestation Provider.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param creationParams Client supplied parameters.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, providerName: string, creationParams: AttestationServiceCreationParams, options?: AttestationProvidersCreateOptionalParams): Promise<AttestationProvidersCreateResponse>;
    /**
     * Updates the Attestation Provider.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation provider.
     * @param updateParams Client supplied parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, providerName: string, updateParams: AttestationServicePatchParams, options?: AttestationProvidersUpdateOptionalParams): Promise<AttestationProvidersUpdateResponse>;
    /**
     * Delete Attestation Service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName Name of the attestation service
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, providerName: string, options?: AttestationProvidersDeleteOptionalParams): Promise<void>;
    /**
     * Returns a list of attestation providers in a subscription.
     * @param options The options parameters.
     */
    list(options?: AttestationProvidersListOptionalParams): Promise<AttestationProvidersListResponse>;
    /**
     * Returns attestation providers list in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AttestationProvidersListByResourceGroupOptionalParams): Promise<AttestationProvidersListByResourceGroupResponse>;
    /**
     * Get the default provider
     * @param options The options parameters.
     */
    listDefault(options?: AttestationProvidersListDefaultOptionalParams): Promise<AttestationProvidersListDefaultResponse>;
    /**
     * Get the default provider by location.
     * @param location The location of the default provider.
     * @param options The options parameters.
     */
    getDefaultByLocation(location: string, options?: AttestationProvidersGetDefaultByLocationOptionalParams): Promise<AttestationProvidersGetDefaultByLocationResponse>;
}

/** Optional parameters. */
export declare interface AttestationProvidersCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type AttestationProvidersCreateResponse = AttestationProvider;

/** Optional parameters. */
export declare interface AttestationProvidersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AttestationProvidersGetDefaultByLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDefaultByLocation operation. */
export declare type AttestationProvidersGetDefaultByLocationResponse = AttestationProvider;

/** Optional parameters. */
export declare interface AttestationProvidersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AttestationProvidersGetResponse = AttestationProvider;

/** Optional parameters. */
export declare interface AttestationProvidersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type AttestationProvidersListByResourceGroupResponse = AttestationProviderListResult;

/** Optional parameters. */
export declare interface AttestationProvidersListDefaultOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDefault operation. */
export declare type AttestationProvidersListDefaultResponse = AttestationProviderListResult;

/** Optional parameters. */
export declare interface AttestationProvidersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AttestationProvidersListResponse = AttestationProviderListResult;

/** Optional parameters. */
export declare interface AttestationProvidersUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type AttestationProvidersUpdateResponse = AttestationProvider;

/** Parameters for creating an attestation provider */
export declare interface AttestationServiceCreationParams {
    /** The supported Azure location where the attestation provider should be created. */
    location: string;
    /** The tags that will be assigned to the attestation provider. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Properties of the attestation provider */
    properties: AttestationServiceCreationSpecificParams;
}

/** Client supplied parameters used to create a new attestation provider. */
export declare interface AttestationServiceCreationSpecificParams {
    /** JSON Web Key Set defining a set of X.509 Certificates that will represent the parent certificate for the signing certificate used for policy operations */
    policySigningCertificates?: JsonWebKeySet;
}

/** Parameters for patching an attestation provider */
export declare interface AttestationServicePatchParams {
    /** The tags that will be assigned to the attestation provider. */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for AttestationServiceStatus. \
 * {@link KnownAttestationServiceStatus} can be used interchangeably with AttestationServiceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ready** \
 * **NotReady** \
 * **Error**
 */
export declare type AttestationServiceStatus = string;

/** An error response from Attestation. */
export declare interface CloudError {
    /** An error response from Attestation. */
    error?: CloudErrorBody;
}

/** An error response from Attestation. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for displaying in a user interface. */
    message?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

declare interface JsonWebKey_2 {
    /**
     * The "alg" (algorithm) parameter identifies the algorithm intended for
     * use with the key.  The values used should either be registered in the
     * IANA "JSON Web Signature and Encryption Algorithms" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name.
     */
    alg?: string;
    /** The "crv" (curve) parameter identifies the curve type */
    crv?: string;
    /** RSA private exponent or ECC private key */
    d?: string;
    /** RSA Private Key Parameter */
    dp?: string;
    /** RSA Private Key Parameter */
    dq?: string;
    /** RSA public exponent, in Base64 */
    e?: string;
    /** Symmetric key */
    k?: string;
    /**
     * The "kid" (key ID) parameter is used to match a specific key.  This
     * is used, for instance, to choose among a set of keys within a JWK Set
     * during key rollover.  The structure of the "kid" value is
     * unspecified.  When "kid" values are used within a JWK Set, different
     * keys within the JWK Set SHOULD use distinct "kid" values.  (One
     * example in which different keys might use the same "kid" value is if
     * they have different "kty" (key type) values but are considered to be
     * equivalent alternatives by the application using them.)  The "kid"
     * value is a case-sensitive string.
     */
    kid?: string;
    /**
     * The "kty" (key type) parameter identifies the cryptographic algorithm
     * family used with the key, such as "RSA" or "EC". "kty" values should
     * either be registered in the IANA "JSON Web Key Types" registry
     * established by [JWA] or be a value that contains a Collision-
     * Resistant Name.  The "kty" value is a case-sensitive string.
     */
    kty: string;
    /** RSA modulus, in Base64 */
    n?: string;
    /** RSA secret prime */
    p?: string;
    /** RSA secret prime, with p < q */
    q?: string;
    /** RSA Private Key Parameter */
    qi?: string;
    /**
     * Use ("public key use") identifies the intended use of
     * the public key. The "use" parameter is employed to indicate whether
     * a public key is used for encrypting data or verifying the signature
     * on data. Values are commonly "sig" (signature) or "enc" (encryption).
     */
    use?: string;
    /** X coordinate for the Elliptic Curve point */
    x?: string;
    /**
     * The "x5c" (X.509 certificate chain) parameter contains a chain of one
     * or more PKIX certificates [RFC5280].  The certificate chain is
     * represented as a JSON array of certificate value strings.  Each
     * string in the array is a base64-encoded (Section 4 of [RFC4648] --
     * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     * The PKIX certificate containing the key value MUST be the first
     * certificate.
     */
    x5C?: string[];
    /** Y coordinate for the Elliptic Curve point */
    y?: string;
}
export { JsonWebKey_2 as JsonWebKey }

export declare interface JsonWebKeySet {
    /**
     * The value of the "keys" parameter is an array of JWK values.  By
     * default, the order of the JWK values within the array does not imply
     * an order of preference among them, although applications of JWK Sets
     * can choose to assign a meaning to the order for their purposes, if
     * desired.
     */
    keys?: JsonWebKey_2[];
}

/** Known values of {@link AttestationServiceStatus} that the service accepts. */
export declare enum KnownAttestationServiceStatus {
    /** Ready */
    Ready = "Ready",
    /** NotReady */
    NotReady = "NotReady",
    /** Error */
    Error = "Error"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** List of supported operations. */
export declare interface OperationList {
    /**
     * The system metadata relating to this resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** List of supported operations. */
    value?: OperationsDefinition[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Azure attestation operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Definition object with the name and properties of an operation. */
export declare interface OperationsDefinition {
    /** Name of the operation. */
    name?: string;
    /** Display object with properties of the operation. */
    display?: OperationsDisplayDefinition;
}

/** Display object with properties of the operation. */
export declare interface OperationsDisplayDefinition {
    /** Resource provider of the operation. */
    provider?: string;
    /** Resource for the operation. */
    resource?: string;
    /** Short description of the operation. */
    operation?: string;
    /** Description of the operation. */
    description?: string;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationList;

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List all the private endpoint connections associated with the attestation provider.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName The name of the attestation provider.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, providerName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets the specified private endpoint connection associated with the attestation provider.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName The name of the attestation provider.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, providerName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of specified private endpoint connection associated with the attestation provider.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName The name of the attestation provider.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, providerName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<PrivateEndpointConnectionsCreateResponse>;
    /**
     * Deletes the specified private endpoint connection associated with the attestation provider.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param providerName The name of the attestation provider.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, providerName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type PrivateEndpointConnectionsCreateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

export { }
