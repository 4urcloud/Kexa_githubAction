/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { AttestationManagementClient } from "../src/attestationManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Attestation test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let providerName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new AttestationManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            providerName = "myservicexxx";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("attestationProviders create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.attestationProviders.create(resourceGroup, providerName, {
                properties: {},
                location: location
            });
            assert.equal(res.name, providerName);
        });
    });
    it("attestationProviders get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.attestationProviders.get(resourceGroup, providerName);
            assert.equal(res.name, providerName);
        });
    });
    it("attestationProviders list test", function () {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.attestationProviders.listByResourceGroup(resourceGroup);
            assert.notEqual((_a = res.value) === null || _a === void 0 ? void 0 : _a.length, 0);
        });
    });
    it("attestationProviders update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.attestationProviders.update(resourceGroup, providerName, {
                tags: {
                    tag1: "value1",
                    tag2: "value2"
                }
            });
            assert.equal(res.type, "Microsoft.Attestation/attestationProviders");
        });
    });
    it("attestationProviders delete test", function () {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resDelete = yield client.attestationProviders.delete(resourceGroup, providerName);
            const res = yield client.attestationProviders.listByResourceGroup(resourceGroup);
            assert.equal((_a = res.value) === null || _a === void 0 ? void 0 : _a.length, 0);
        });
    });
});
//# sourceMappingURL=attestation_examples.js.map