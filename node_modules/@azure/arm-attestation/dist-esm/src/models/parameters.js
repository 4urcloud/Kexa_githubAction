/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { AttestationServiceCreationParams as AttestationServiceCreationParamsMapper, AttestationServicePatchParams as AttestationServicePatchParamsMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const providerName = {
    parameterPath: "providerName",
    mapper: {
        serializedName: "providerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const creationParams = {
    parameterPath: "creationParams",
    mapper: AttestationServiceCreationParamsMapper
};
export const updateParams = {
    parameterPath: "updateParams",
    mapper: AttestationServicePatchParamsMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const providerName1 = {
    parameterPath: "providerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$")
        },
        serializedName: "providerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
//# sourceMappingURL=parameters.js.map