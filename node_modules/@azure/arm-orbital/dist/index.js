'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Creating */
    KnownProvisioningState["Creating"] = "creating";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "canceled";
    /** Updating */
    KnownProvisioningState["Updating"] = "updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "deleting";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link SpacecraftsPropertiesProvisioningState} that the service accepts. */
exports.KnownSpacecraftsPropertiesProvisioningState = void 0;
(function (KnownSpacecraftsPropertiesProvisioningState) {
    /** Creating */
    KnownSpacecraftsPropertiesProvisioningState["Creating"] = "creating";
    /** Succeeded */
    KnownSpacecraftsPropertiesProvisioningState["Succeeded"] = "succeeded";
    /** Failed */
    KnownSpacecraftsPropertiesProvisioningState["Failed"] = "failed";
    /** Canceled */
    KnownSpacecraftsPropertiesProvisioningState["Canceled"] = "canceled";
    /** Updating */
    KnownSpacecraftsPropertiesProvisioningState["Updating"] = "updating";
    /** Deleting */
    KnownSpacecraftsPropertiesProvisioningState["Deleting"] = "deleting";
})(exports.KnownSpacecraftsPropertiesProvisioningState || (exports.KnownSpacecraftsPropertiesProvisioningState = {}));
/** Known values of {@link Direction} that the service accepts. */
exports.KnownDirection = void 0;
(function (KnownDirection) {
    /** Uplink */
    KnownDirection["Uplink"] = "Uplink";
    /** Downlink */
    KnownDirection["Downlink"] = "Downlink";
})(exports.KnownDirection || (exports.KnownDirection = {}));
/** Known values of {@link Polarization} that the service accepts. */
exports.KnownPolarization = void 0;
(function (KnownPolarization) {
    /** Rhcp */
    KnownPolarization["Rhcp"] = "RHCP";
    /** Lhcp */
    KnownPolarization["Lhcp"] = "LHCP";
    /** LinearVertical */
    KnownPolarization["LinearVertical"] = "linearVertical";
    /** LinearHorizontal */
    KnownPolarization["LinearHorizontal"] = "linearHorizontal";
})(exports.KnownPolarization || (exports.KnownPolarization = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ContactsPropertiesProvisioningState} that the service accepts. */
exports.KnownContactsPropertiesProvisioningState = void 0;
(function (KnownContactsPropertiesProvisioningState) {
    /** Creating */
    KnownContactsPropertiesProvisioningState["Creating"] = "creating";
    /** Succeeded */
    KnownContactsPropertiesProvisioningState["Succeeded"] = "succeeded";
    /** Failed */
    KnownContactsPropertiesProvisioningState["Failed"] = "failed";
    /** Canceled */
    KnownContactsPropertiesProvisioningState["Canceled"] = "canceled";
    /** Updating */
    KnownContactsPropertiesProvisioningState["Updating"] = "updating";
    /** Deleting */
    KnownContactsPropertiesProvisioningState["Deleting"] = "deleting";
})(exports.KnownContactsPropertiesProvisioningState || (exports.KnownContactsPropertiesProvisioningState = {}));
/** Known values of {@link ContactsStatus} that the service accepts. */
exports.KnownContactsStatus = void 0;
(function (KnownContactsStatus) {
    /** Scheduled */
    KnownContactsStatus["Scheduled"] = "scheduled";
    /** Cancelled */
    KnownContactsStatus["Cancelled"] = "cancelled";
    /** Succeeded */
    KnownContactsStatus["Succeeded"] = "succeeded";
    /** Failed */
    KnownContactsStatus["Failed"] = "failed";
    /** ProviderCancelled */
    KnownContactsStatus["ProviderCancelled"] = "providerCancelled";
})(exports.KnownContactsStatus || (exports.KnownContactsStatus = {}));
/** Known values of {@link ContactProfilesPropertiesProvisioningState} that the service accepts. */
exports.KnownContactProfilesPropertiesProvisioningState = void 0;
(function (KnownContactProfilesPropertiesProvisioningState) {
    /** Creating */
    KnownContactProfilesPropertiesProvisioningState["Creating"] = "creating";
    /** Succeeded */
    KnownContactProfilesPropertiesProvisioningState["Succeeded"] = "succeeded";
    /** Failed */
    KnownContactProfilesPropertiesProvisioningState["Failed"] = "failed";
    /** Canceled */
    KnownContactProfilesPropertiesProvisioningState["Canceled"] = "canceled";
    /** Updating */
    KnownContactProfilesPropertiesProvisioningState["Updating"] = "updating";
    /** Deleting */
    KnownContactProfilesPropertiesProvisioningState["Deleting"] = "deleting";
})(exports.KnownContactProfilesPropertiesProvisioningState || (exports.KnownContactProfilesPropertiesProvisioningState = {}));
/** Known values of {@link Protocol} that the service accepts. */
exports.KnownProtocol = void 0;
(function (KnownProtocol) {
    /** TCP */
    KnownProtocol["TCP"] = "TCP";
    /** UDP */
    KnownProtocol["UDP"] = "UDP";
})(exports.KnownProtocol || (exports.KnownProtocol = {}));
/** Known values of {@link CapabilityParameter} that the service accepts. */
exports.KnownCapabilityParameter = void 0;
(function (KnownCapabilityParameter) {
    /** EarthObservation */
    KnownCapabilityParameter["EarthObservation"] = "EarthObservation";
    /** Communication */
    KnownCapabilityParameter["Communication"] = "Communication";
})(exports.KnownCapabilityParameter || (exports.KnownCapabilityParameter = {}));
/** Known values of {@link ReleaseMode} that the service accepts. */
exports.KnownReleaseMode = void 0;
(function (KnownReleaseMode) {
    /** Preview */
    KnownReleaseMode["Preview"] = "Preview";
    /** GA */
    KnownReleaseMode["GA"] = "GA";
})(exports.KnownReleaseMode || (exports.KnownReleaseMode = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** Succeeded */
    KnownStatus["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownStatus["Canceled"] = "Canceled";
    /** Failed */
    KnownStatus["Failed"] = "Failed";
    /** Running */
    KnownStatus["Running"] = "Running";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link Capability} that the service accepts. */
exports.KnownCapability = void 0;
(function (KnownCapability) {
    /** EarthObservation */
    KnownCapability["EarthObservation"] = "EarthObservation";
    /** Communication */
    KnownCapability["Communication"] = "Communication";
})(exports.KnownCapability || (exports.KnownCapability = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const SpacecraftListResult = {
    type: {
        name: "Composite",
        className: "SpacecraftListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Spacecraft"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SpacecraftLink = {
    type: {
        name: "Composite",
        className: "SpacecraftLink",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            centerFrequencyMHz: {
                serializedName: "centerFrequencyMHz",
                required: true,
                type: {
                    name: "Number"
                }
            },
            bandwidthMHz: {
                serializedName: "bandwidthMHz",
                required: true,
                type: {
                    name: "Number"
                }
            },
            direction: {
                serializedName: "direction",
                required: true,
                type: {
                    name: "String"
                }
            },
            polarization: {
                serializedName: "polarization",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorizations: {
                serializedName: "authorizations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AuthorizedGroundstation"
                        }
                    }
                }
            }
        }
    }
};
const AuthorizedGroundstation = {
    type: {
        name: "Composite",
        className: "AuthorizedGroundstation",
        modelProperties: {
            groundStation: {
                serializedName: "groundStation",
                required: true,
                type: {
                    name: "String"
                }
            },
            expirationDate: {
                serializedName: "expirationDate",
                required: true,
                type: {
                    name: "Date"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const TagsObject = {
    type: {
        name: "Composite",
        className: "TagsObject",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ContactListResult = {
    type: {
        name: "Composite",
        className: "ContactListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Contact"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactsPropertiesAntennaConfiguration = {
    type: {
        name: "Composite",
        className: "ContactsPropertiesAntennaConfiguration",
        modelProperties: {
            destinationIp: {
                serializedName: "destinationIp",
                type: {
                    name: "String"
                }
            },
            sourceIps: {
                serializedName: "sourceIps",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ResourceReference = {
    type: {
        name: "Composite",
        className: "ResourceReference",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactParameters = {
    type: {
        name: "Composite",
        className: "ContactParameters",
        modelProperties: {
            contactProfile: {
                serializedName: "contactProfile",
                type: {
                    name: "Composite",
                    className: "ContactParametersContactProfile"
                }
            },
            groundStationName: {
                serializedName: "groundStationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const AvailableContactsListResult = {
    type: {
        name: "Composite",
        className: "AvailableContactsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailableContacts"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailableContacts = {
    type: {
        name: "Composite",
        className: "AvailableContacts",
        modelProperties: {
            spacecraft: {
                serializedName: "spacecraft",
                type: {
                    name: "Composite",
                    className: "AvailableContactsSpacecraft"
                }
            },
            groundStationName: {
                serializedName: "groundStationName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            maximumElevationDegrees: {
                serializedName: "properties.maximumElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            txStartTime: {
                serializedName: "properties.txStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            txEndTime: {
                serializedName: "properties.txEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            rxStartTime: {
                serializedName: "properties.rxStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            rxEndTime: {
                serializedName: "properties.rxEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            startAzimuthDegrees: {
                serializedName: "properties.startAzimuthDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            endAzimuthDegrees: {
                serializedName: "properties.endAzimuthDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            startElevationDegrees: {
                serializedName: "properties.startElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            endElevationDegrees: {
                serializedName: "properties.endElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ContactInstanceProperties = {
    type: {
        name: "Composite",
        className: "ContactInstanceProperties",
        modelProperties: {
            maximumElevationDegrees: {
                serializedName: "maximumElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            txStartTime: {
                serializedName: "txStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            txEndTime: {
                serializedName: "txEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            rxStartTime: {
                serializedName: "rxStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            rxEndTime: {
                serializedName: "rxEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            startAzimuthDegrees: {
                serializedName: "startAzimuthDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            endAzimuthDegrees: {
                serializedName: "endAzimuthDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            startElevationDegrees: {
                serializedName: "startElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            endElevationDegrees: {
                serializedName: "endElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ContactProfilesProperties = {
    type: {
        name: "Composite",
        className: "ContactProfilesProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            },
            minimumViableContactDuration: {
                serializedName: "minimumViableContactDuration",
                type: {
                    name: "String"
                }
            },
            minimumElevationDegrees: {
                serializedName: "minimumElevationDegrees",
                type: {
                    name: "Number"
                }
            },
            autoTrackingConfiguration: {
                serializedName: "autoTrackingConfiguration",
                type: {
                    name: "Enum",
                    allowedValues: ["disabled", "xBand", "sBand"]
                }
            },
            eventHubUri: {
                serializedName: "eventHubUri",
                type: {
                    name: "String"
                }
            },
            networkConfiguration: {
                serializedName: "networkConfiguration",
                type: {
                    name: "Composite",
                    className: "ContactProfilesPropertiesNetworkConfiguration"
                }
            },
            thirdPartyConfigurations: {
                serializedName: "thirdPartyConfigurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContactProfileThirdPartyConfiguration"
                        }
                    }
                }
            },
            links: {
                serializedName: "links",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContactProfileLink"
                        }
                    }
                }
            }
        }
    }
};
const ContactProfilesPropertiesNetworkConfiguration = {
    type: {
        name: "Composite",
        className: "ContactProfilesPropertiesNetworkConfiguration",
        modelProperties: {
            subnetId: {
                serializedName: "subnetId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactProfileThirdPartyConfiguration = {
    type: {
        name: "Composite",
        className: "ContactProfileThirdPartyConfiguration",
        modelProperties: {
            providerName: {
                serializedName: "providerName",
                required: true,
                type: {
                    name: "String"
                }
            },
            missionConfiguration: {
                serializedName: "missionConfiguration",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactProfileLink = {
    type: {
        name: "Composite",
        className: "ContactProfileLink",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            polarization: {
                serializedName: "polarization",
                required: true,
                type: {
                    name: "String"
                }
            },
            direction: {
                serializedName: "direction",
                required: true,
                type: {
                    name: "String"
                }
            },
            gainOverTemperature: {
                serializedName: "gainOverTemperature",
                type: {
                    name: "Number"
                }
            },
            eirpdBW: {
                serializedName: "eirpdBW",
                type: {
                    name: "Number"
                }
            },
            channels: {
                serializedName: "channels",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContactProfileLinkChannel"
                        }
                    }
                }
            }
        }
    }
};
const ContactProfileLinkChannel = {
    type: {
        name: "Composite",
        className: "ContactProfileLinkChannel",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            centerFrequencyMHz: {
                serializedName: "centerFrequencyMHz",
                required: true,
                type: {
                    name: "Number"
                }
            },
            bandwidthMHz: {
                serializedName: "bandwidthMHz",
                required: true,
                type: {
                    name: "Number"
                }
            },
            endPoint: {
                serializedName: "endPoint",
                type: {
                    name: "Composite",
                    className: "EndPoint"
                }
            },
            modulationConfiguration: {
                serializedName: "modulationConfiguration",
                type: {
                    name: "String"
                }
            },
            demodulationConfiguration: {
                serializedName: "demodulationConfiguration",
                type: {
                    name: "String"
                }
            },
            encodingConfiguration: {
                serializedName: "encodingConfiguration",
                type: {
                    name: "String"
                }
            },
            decodingConfiguration: {
                serializedName: "decodingConfiguration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EndPoint = {
    type: {
        name: "Composite",
        className: "EndPoint",
        modelProperties: {
            ipAddress: {
                serializedName: "ipAddress",
                required: true,
                type: {
                    name: "String"
                }
            },
            endPointName: {
                serializedName: "endPointName",
                required: true,
                type: {
                    name: "String"
                }
            },
            port: {
                serializedName: "port",
                required: true,
                type: {
                    name: "String"
                }
            },
            protocol: {
                serializedName: "protocol",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactProfileListResult = {
    type: {
        name: "Composite",
        className: "ContactProfileListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContactProfile"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailableGroundStationListResult = {
    type: {
        name: "Composite",
        className: "AvailableGroundStationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailableGroundStation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailableGroundStation = {
    type: {
        name: "Composite",
        className: "AvailableGroundStation",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "properties.city",
                type: {
                    name: "String"
                }
            },
            providerName: {
                serializedName: "properties.providerName",
                type: {
                    name: "String"
                }
            },
            longitudeDegrees: {
                serializedName: "properties.longitudeDegrees",
                type: {
                    name: "Number"
                }
            },
            latitudeDegrees: {
                serializedName: "properties.latitudeDegrees",
                type: {
                    name: "Number"
                }
            },
            altitudeMeters: {
                serializedName: "properties.altitudeMeters",
                type: {
                    name: "Number"
                }
            },
            releaseMode: {
                serializedName: "properties.releaseMode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailableGroundStationPropertiesAutoGenerated = {
    type: {
        name: "Composite",
        className: "AvailableGroundStationPropertiesAutoGenerated",
        modelProperties: {
            city: {
                serializedName: "city",
                type: {
                    name: "String"
                }
            },
            providerName: {
                serializedName: "providerName",
                type: {
                    name: "String"
                }
            },
            longitudeDegrees: {
                serializedName: "longitudeDegrees",
                type: {
                    name: "Number"
                }
            },
            latitudeDegrees: {
                serializedName: "latitudeDegrees",
                type: {
                    name: "Number"
                }
            },
            altitudeMeters: {
                serializedName: "altitudeMeters",
                type: {
                    name: "Number"
                }
            },
            releaseMode: {
                serializedName: "releaseMode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResult = {
    type: {
        name: "Composite",
        className: "OperationResult",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            percentComplete: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "percentComplete",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "OperationResultErrorProperties"
                }
            }
        }
    }
};
const OperationResultErrorProperties = {
    type: {
        name: "Composite",
        className: "OperationResultErrorProperties",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceIdListResult = {
    type: {
        name: "Composite",
        className: "ResourceIdListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceIdListResultValueItem"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceIdListResultValueItem = {
    type: {
        name: "Composite",
        className: "ResourceIdListResultValueItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const ContactsPropertiesContactProfile = {
    type: {
        name: "Composite",
        className: "ContactsPropertiesContactProfile",
        modelProperties: Object.assign({}, ResourceReference.type.modelProperties)
    }
};
const ContactParametersContactProfile = {
    type: {
        name: "Composite",
        className: "ContactParametersContactProfile",
        modelProperties: Object.assign({}, ResourceReference.type.modelProperties)
    }
};
const AvailableContactsSpacecraft = {
    type: {
        name: "Composite",
        className: "AvailableContactsSpacecraft",
        modelProperties: Object.assign({}, ResourceReference.type.modelProperties)
    }
};
const AvailableContactsProperties = {
    type: {
        name: "Composite",
        className: "AvailableContactsProperties",
        modelProperties: Object.assign({}, ContactInstanceProperties.type.modelProperties)
    }
};
const ContactProfileProperties = {
    type: {
        name: "Composite",
        className: "ContactProfileProperties",
        modelProperties: Object.assign({}, ContactProfilesProperties.type.modelProperties)
    }
};
const AvailableGroundStationProperties = {
    type: {
        name: "Composite",
        className: "AvailableGroundStationProperties",
        modelProperties: Object.assign({}, AvailableGroundStationPropertiesAutoGenerated.type.modelProperties)
    }
};
const Spacecraft = {
    type: {
        name: "Composite",
        className: "Spacecraft",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, noradId: {
                serializedName: "properties.noradId",
                type: {
                    name: "String"
                }
            }, titleLine: {
                serializedName: "properties.titleLine",
                required: true,
                type: {
                    name: "String"
                }
            }, tleLine1: {
                serializedName: "properties.tleLine1",
                required: true,
                type: {
                    name: "String"
                }
            }, tleLine2: {
                serializedName: "properties.tleLine2",
                required: true,
                type: {
                    name: "String"
                }
            }, links: {
                serializedName: "properties.links",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SpacecraftLink"
                        }
                    }
                }
            } })
    }
};
const ContactProfile = {
    type: {
        name: "Composite",
        className: "ContactProfile",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, minimumViableContactDuration: {
                serializedName: "properties.minimumViableContactDuration",
                type: {
                    name: "String"
                }
            }, minimumElevationDegrees: {
                serializedName: "properties.minimumElevationDegrees",
                type: {
                    name: "Number"
                }
            }, autoTrackingConfiguration: {
                serializedName: "properties.autoTrackingConfiguration",
                type: {
                    name: "Enum",
                    allowedValues: ["disabled", "xBand", "sBand"]
                }
            }, eventHubUri: {
                serializedName: "properties.eventHubUri",
                type: {
                    name: "String"
                }
            }, networkConfiguration: {
                serializedName: "properties.networkConfiguration",
                type: {
                    name: "Composite",
                    className: "ContactProfilesPropertiesNetworkConfiguration"
                }
            }, thirdPartyConfigurations: {
                serializedName: "properties.thirdPartyConfigurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContactProfileThirdPartyConfiguration"
                        }
                    }
                }
            }, links: {
                serializedName: "properties.links",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContactProfileLink"
                        }
                    }
                }
            } })
    }
};
const Contact = {
    type: {
        name: "Composite",
        className: "Contact",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reservationStartTime: {
                serializedName: "properties.reservationStartTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, reservationEndTime: {
                serializedName: "properties.reservationEndTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }, rxStartTime: {
                serializedName: "properties.rxStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, rxEndTime: {
                serializedName: "properties.rxEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, txStartTime: {
                serializedName: "properties.txStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, txEndTime: {
                serializedName: "properties.txEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, errorMessage: {
                serializedName: "properties.errorMessage",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, maximumElevationDegrees: {
                serializedName: "properties.maximumElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, startAzimuthDegrees: {
                serializedName: "properties.startAzimuthDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, endAzimuthDegrees: {
                serializedName: "properties.endAzimuthDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, groundStationName: {
                serializedName: "properties.groundStationName",
                required: true,
                type: {
                    name: "String"
                }
            }, startElevationDegrees: {
                serializedName: "properties.startElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, endElevationDegrees: {
                serializedName: "properties.endElevationDegrees",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, antennaConfiguration: {
                serializedName: "properties.antennaConfiguration",
                type: {
                    name: "Composite",
                    className: "ContactsPropertiesAntennaConfiguration"
                }
            }, contactProfile: {
                serializedName: "properties.contactProfile",
                type: {
                    name: "Composite",
                    className: "ContactsPropertiesContactProfile"
                }
            } })
    }
};
const SpacecraftsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "SpacecraftsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SpacecraftsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "SpacecraftsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SpacecraftsUpdateTagsHeaders = {
    type: {
        name: "Composite",
        className: "SpacecraftsUpdateTagsHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SpacecraftsListAvailableContactsHeaders = {
    type: {
        name: "Composite",
        className: "SpacecraftsListAvailableContactsHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SpacecraftsListAvailableContactsNextHeaders = {
    type: {
        name: "Composite",
        className: "SpacecraftsListAvailableContactsNextHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactsCreateHeaders = {
    type: {
        name: "Composite",
        className: "ContactsCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ContactsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactProfilesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ContactProfilesCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactProfilesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ContactProfilesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContactProfilesUpdateTagsHeaders = {
    type: {
        name: "Composite",
        className: "ContactProfilesUpdateTagsHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationsResultsGetHeaders = {
    type: {
        name: "Composite",
        className: "OperationsResultsGetHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    SpacecraftListResult: SpacecraftListResult,
    SpacecraftLink: SpacecraftLink,
    AuthorizedGroundstation: AuthorizedGroundstation,
    Resource: Resource,
    SystemData: SystemData,
    TagsObject: TagsObject,
    ContactListResult: ContactListResult,
    ContactsPropertiesAntennaConfiguration: ContactsPropertiesAntennaConfiguration,
    ResourceReference: ResourceReference,
    ContactParameters: ContactParameters,
    AvailableContactsListResult: AvailableContactsListResult,
    AvailableContacts: AvailableContacts,
    ContactInstanceProperties: ContactInstanceProperties,
    ContactProfilesProperties: ContactProfilesProperties,
    ContactProfilesPropertiesNetworkConfiguration: ContactProfilesPropertiesNetworkConfiguration,
    ContactProfileThirdPartyConfiguration: ContactProfileThirdPartyConfiguration,
    ContactProfileLink: ContactProfileLink,
    ContactProfileLinkChannel: ContactProfileLinkChannel,
    EndPoint: EndPoint,
    ContactProfileListResult: ContactProfileListResult,
    AvailableGroundStationListResult: AvailableGroundStationListResult,
    AvailableGroundStation: AvailableGroundStation,
    AvailableGroundStationPropertiesAutoGenerated: AvailableGroundStationPropertiesAutoGenerated,
    OperationResult: OperationResult,
    OperationResultErrorProperties: OperationResultErrorProperties,
    ResourceIdListResult: ResourceIdListResult,
    ResourceIdListResultValueItem: ResourceIdListResultValueItem,
    TrackedResource: TrackedResource,
    ProxyResource: ProxyResource,
    ContactsPropertiesContactProfile: ContactsPropertiesContactProfile,
    ContactParametersContactProfile: ContactParametersContactProfile,
    AvailableContactsSpacecraft: AvailableContactsSpacecraft,
    AvailableContactsProperties: AvailableContactsProperties,
    ContactProfileProperties: ContactProfileProperties,
    AvailableGroundStationProperties: AvailableGroundStationProperties,
    Spacecraft: Spacecraft,
    ContactProfile: ContactProfile,
    Contact: Contact,
    SpacecraftsCreateOrUpdateHeaders: SpacecraftsCreateOrUpdateHeaders,
    SpacecraftsDeleteHeaders: SpacecraftsDeleteHeaders,
    SpacecraftsUpdateTagsHeaders: SpacecraftsUpdateTagsHeaders,
    SpacecraftsListAvailableContactsHeaders: SpacecraftsListAvailableContactsHeaders,
    SpacecraftsListAvailableContactsNextHeaders: SpacecraftsListAvailableContactsNextHeaders,
    ContactsCreateHeaders: ContactsCreateHeaders,
    ContactsDeleteHeaders: ContactsDeleteHeaders,
    ContactProfilesCreateOrUpdateHeaders: ContactProfilesCreateOrUpdateHeaders,
    ContactProfilesDeleteHeaders: ContactProfilesDeleteHeaders,
    ContactProfilesUpdateTagsHeaders: ContactProfilesUpdateTagsHeaders,
    OperationsResultsGetHeaders: OperationsResultsGetHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const spacecraftName = {
    parameterPath: "spacecraftName",
    mapper: {
        serializedName: "spacecraftName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: TagsObject
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const contactName = {
    parameterPath: "contactName",
    mapper: {
        serializedName: "contactName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: Contact
};
const contactProfileName = {
    parameterPath: "contactProfileName",
    mapper: {
        serializedName: "contactProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const capability = {
    parameterPath: "capability",
    mapper: {
        serializedName: "capability",
        required: true,
        type: {
            name: "String"
        }
    }
};
const location2 = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Orbital Rest API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Orbital Rest API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Orbital/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Spacecrafts operations. */
class SpacecraftsImpl {
    /**
     * Initialize a new instance of the class Spacecrafts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns list of spacecrafts by subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns list of spacecrafts by resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Returns list of available contacts. A contact is available if the spacecraft is visible from the
     * ground station for more than the minimum viable contact duration provided in the contact profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactProfile The reference to the contact profile resource.
     * @param groundStationName Name of Azure Ground Station.
     * @param startTime Start time of a contact (ISO 8601 UTC standard).
     * @param endTime End time of a contact (ISO 8601 UTC standard).
     * @param options The options parameters.
     */
    beginListAvailableContactsAndWait(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options) {
        const iter = this.listAvailableContactsPagingAll(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAvailableContactsPagingPage(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options, settings);
            }
        };
    }
    listAvailableContactsPagingPage(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAvailableContactsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                const poller = yield tslib.__await(this._listAvailableContacts(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options));
                result = yield tslib.__await(poller.pollUntilDone());
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAvailableContactsNext(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAvailableContactsPagingAll(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAvailableContactsPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAvailableContactsPagingPage(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Returns list of spacecrafts by subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$1);
    }
    /**
     * Returns list of spacecrafts by resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$2);
    }
    /**
     * Gets the specified spacecraft in a specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    get(resourceGroupName, spacecraftName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, spacecraftName, options }, getOperationSpec$3);
    }
    /**
     * Creates or updates a spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param location The geo-location where the resource lives
     * @param titleLine Title line of the two-line element set (TLE).
     * @param tleLine1 Line 1 of the two-line element set (TLE).
     * @param tleLine2 Line 2 of the two-line element set (TLE).
     * @param links Immutable list of Spacecraft links.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, spacecraftName, location, titleLine, tleLine1, tleLine2, links, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    spacecraftName,
                    location,
                    titleLine,
                    tleLine1,
                    tleLine2,
                    links,
                    options
                },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param location The geo-location where the resource lives
     * @param titleLine Title line of the two-line element set (TLE).
     * @param tleLine1 Line 1 of the two-line element set (TLE).
     * @param tleLine2 Line 2 of the two-line element set (TLE).
     * @param links Immutable list of Spacecraft links.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, spacecraftName, location, titleLine, tleLine1, tleLine2, links, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, spacecraftName, location, titleLine, tleLine1, tleLine2, links, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a specified spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, spacecraftName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, spacecraftName, options },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a specified spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, spacecraftName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, spacecraftName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the specified spacecraft tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param parameters Parameters supplied to update spacecraft tags.
     * @param options The options parameters.
     */
    beginUpdateTags(resourceGroupName, spacecraftName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, spacecraftName, parameters, options },
                spec: updateTagsOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the specified spacecraft tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param parameters Parameters supplied to update spacecraft tags.
     * @param options The options parameters.
     */
    beginUpdateTagsAndWait(resourceGroupName, spacecraftName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateTags(resourceGroupName, spacecraftName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns list of available contacts. A contact is available if the spacecraft is visible from the
     * ground station for more than the minimum viable contact duration provided in the contact profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactProfile The reference to the contact profile resource.
     * @param groundStationName Name of Azure Ground Station.
     * @param startTime Start time of a contact (ISO 8601 UTC standard).
     * @param endTime End time of a contact (ISO 8601 UTC standard).
     * @param options The options parameters.
     */
    _listAvailableContacts(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    spacecraftName,
                    contactProfile,
                    groundStationName,
                    startTime,
                    endTime,
                    options
                },
                spec: listAvailableContactsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec$2);
    }
    /**
     * ListAvailableContactsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactProfile The reference to the contact profile resource.
     * @param groundStationName Name of Azure Ground Station.
     * @param startTime Start time of a contact (ISO 8601 UTC standard).
     * @param endTime End time of a contact (ISO 8601 UTC standard).
     * @param nextLink The nextLink from the previous successful call to the ListAvailableContacts method.
     * @param options The options parameters.
     */
    _listAvailableContactsNext(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            spacecraftName,
            contactProfile,
            groundStationName,
            startTime,
            endTime,
            nextLink,
            options
        }, listAvailableContactsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/spacecrafts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SpacecraftListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SpacecraftListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Spacecraft
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Spacecraft
        },
        201: {
            bodyMapper: Spacecraft
        },
        202: {
            bodyMapper: Spacecraft
        },
        204: {
            bodyMapper: Spacecraft
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: {
        parameterPath: {
            tags: ["options", "tags"],
            location: ["location"],
            provisioningState: ["options", "provisioningState"],
            noradId: ["options", "noradId"],
            titleLine: ["titleLine"],
            tleLine1: ["tleLine1"],
            tleLine2: ["tleLine2"],
            links: ["links"]
        },
        mapper: Object.assign(Object.assign({}, Spacecraft), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const updateTagsOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Spacecraft
        },
        201: {
            bodyMapper: Spacecraft
        },
        202: {
            bodyMapper: Spacecraft
        },
        204: {
            bodyMapper: Spacecraft
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listAvailableContactsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/listAvailableContacts",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AvailableContactsListResult
        },
        201: {
            bodyMapper: AvailableContactsListResult
        },
        202: {
            bodyMapper: AvailableContactsListResult
        },
        204: {
            bodyMapper: AvailableContactsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: {
        parameterPath: {
            contactProfile: ["contactProfile"],
            groundStationName: ["groundStationName"],
            startTime: ["startTime"],
            endTime: ["endTime"]
        },
        mapper: Object.assign(Object.assign({}, ContactParameters), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listBySubscriptionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SpacecraftListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SpacecraftListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listAvailableContactsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableContactsListResult
        },
        202: {
            headersMapper: SpacecraftsListAvailableContactsNextHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName,
        nextLink
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Contacts operations. */
class ContactsImpl {
    /**
     * Initialize a new instance of the class Contacts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns list of contacts by spacecraftName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    list(resourceGroupName, spacecraftName, options) {
        const iter = this.listPagingAll(resourceGroupName, spacecraftName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, spacecraftName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, spacecraftName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, spacecraftName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, spacecraftName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, spacecraftName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, spacecraftName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns list of contacts by spacecraftName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    _list(resourceGroupName, spacecraftName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, spacecraftName, options }, listOperationSpec$1);
    }
    /**
     * Gets the specified contact in a specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param options The options parameters.
     */
    get(resourceGroupName, spacecraftName, contactName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, spacecraftName, contactName, options }, getOperationSpec$2);
    }
    /**
     * Creates a contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param parameters The parameters to provide for the created contact.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, spacecraftName, contactName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    spacecraftName,
                    contactName,
                    parameters,
                    options
                },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param parameters The parameters to provide for the created contact.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, spacecraftName, contactName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, spacecraftName, contactName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a specified contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, spacecraftName, contactName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, spacecraftName, contactName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a specified contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, spacecraftName, contactName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, spacecraftName, contactName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, spacecraftName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, spacecraftName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContactListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts/{contactName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Contact
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName,
        contactName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts/{contactName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Contact
        },
        201: {
            bodyMapper: Contact
        },
        202: {
            bodyMapper: Contact
        },
        204: {
            bodyMapper: Contact
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName,
        contactName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts/{contactName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName,
        contactName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContactListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        spacecraftName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ContactProfiles operations. */
class ContactProfilesImpl {
    /**
     * Initialize a new instance of the class ContactProfiles class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns list of contact profiles by Subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns list of contact profiles by Resource Group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the specified contact Profile in a specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param options The options parameters.
     */
    get(resourceGroupName, contactProfileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, contactProfileName, options }, getOperationSpec$1);
    }
    /**
     * Creates or updates a contact profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param location The geo-location where the resource lives
     * @param networkConfiguration Network configuration of customer virtual network.
     * @param links Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, contactProfileName, location, networkConfiguration, links, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    contactProfileName,
                    location,
                    networkConfiguration,
                    links,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a contact profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param location The geo-location where the resource lives
     * @param networkConfiguration Network configuration of customer virtual network.
     * @param links Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, contactProfileName, location, networkConfiguration, links, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, contactProfileName, location, networkConfiguration, links, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a specified contact profile resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, contactProfileName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, contactProfileName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a specified contact profile resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, contactProfileName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, contactProfileName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the specified contact profile tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param parameters Parameters supplied to update contact profile tags.
     * @param options The options parameters.
     */
    beginUpdateTags(resourceGroupName, contactProfileName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, contactProfileName, parameters, options },
                spec: updateTagsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the specified contact profile tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param parameters Parameters supplied to update contact profile tags.
     * @param options The options parameters.
     */
    beginUpdateTagsAndWait(resourceGroupName, contactProfileName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateTags(resourceGroupName, contactProfileName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns list of contact profiles by Subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Returns list of contact profiles by Resource Group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContactProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        contactProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ContactProfile
        },
        201: {
            bodyMapper: ContactProfile
        },
        202: {
            bodyMapper: ContactProfile
        },
        204: {
            bodyMapper: ContactProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: {
        parameterPath: {
            tags: ["options", "tags"],
            location: ["location"],
            provisioningState: ["options", "provisioningState"],
            minimumViableContactDuration: ["options", "minimumViableContactDuration"],
            minimumElevationDegrees: ["options", "minimumElevationDegrees"],
            autoTrackingConfiguration: ["options", "autoTrackingConfiguration"],
            eventHubUri: ["options", "eventHubUri"],
            networkConfiguration: ["networkConfiguration"],
            thirdPartyConfigurations: ["options", "thirdPartyConfigurations"],
            links: ["links"]
        },
        mapper: Object.assign(Object.assign({}, ContactProfile), { required: true })
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        contactProfileName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        contactProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateTagsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ContactProfile
        },
        201: {
            bodyMapper: ContactProfile
        },
        202: {
            bodyMapper: ContactProfile
        },
        204: {
            bodyMapper: ContactProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        contactProfileName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/contactProfiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContactProfileListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContactProfileListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skiptoken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContactProfileListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ContactProfileListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AvailableGroundStations operations. */
class AvailableGroundStationsImpl {
    /**
     * Initialize a new instance of the class AvailableGroundStations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns list of available ground stations.
     * @param capability Ground Station Capability.
     * @param options The options parameters.
     */
    listByCapability(capability, options) {
        const iter = this.listByCapabilityPagingAll(capability, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByCapabilityPagingPage(capability, options, settings);
            }
        };
    }
    listByCapabilityPagingPage(capability, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByCapabilityPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByCapability(capability, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByCapabilityNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByCapabilityPagingAll(capability, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByCapabilityPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByCapabilityPagingPage(capability, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns list of available ground stations.
     * @param capability Ground Station Capability.
     * @param options The options parameters.
     */
    _listByCapability(capability, options) {
        return this.client.sendOperationRequest({ capability, options }, listByCapabilityOperationSpec);
    }
    /**
     * ListByCapabilityNext
     * @param nextLink The nextLink from the previous successful call to the ListByCapability method.
     * @param options The options parameters.
     */
    _listByCapabilityNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listByCapabilityNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByCapabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/availableGroundStations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableGroundStationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, capability],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByCapabilityNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableGroundStationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationsResults operations. */
class OperationsResultsImpl {
    /**
     * Initialize a new instance of the class OperationsResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns operation results.
     * @param location The name of Azure region.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    beginGet(location, operationId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { location, operationId, options },
                spec: getOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Returns operation results.
     * @param location The name of Azure region.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    beginGetAndWait(location, operationId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGet(location, operationId, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/locations/{location}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationResult
        },
        201: {
            bodyMapper: OperationResult
        },
        202: {
            bodyMapper: OperationResult
        },
        204: {
            bodyMapper: OperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location2,
        operationId
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureOrbital extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureOrbital class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-orbital/2.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-11-01";
        this.operations = new OperationsImpl(this);
        this.spacecrafts = new SpacecraftsImpl(this);
        this.contacts = new ContactsImpl(this);
        this.contactProfiles = new ContactProfilesImpl(this);
        this.availableGroundStations = new AvailableGroundStationsImpl(this);
        this.operationsResults = new OperationsResultsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AzureOrbital = AzureOrbital;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
