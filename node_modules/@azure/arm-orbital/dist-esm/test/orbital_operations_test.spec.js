import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { AzureOrbital } from "../src/azureOrbital";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("orbital test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let resourcename;
    let resourcename1;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new AzureOrbital(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "westus2";
            resourceGroup = "myjstest";
            resourcename = "resourcetest";
            resourcename1 = "resourcetest1";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("contactProfiles create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            //need to create a virtualnetwork "myvirtualnetwork" and a subnet "testsubnets". Then set SUBNET DELEGATION to"Microsoft.Orbital/orbitalGateways"
            const res = yield client.contactProfiles.beginCreateOrUpdateAndWait(resourceGroup, resourcename, location, {
                "subnetId": "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Network/virtualNetworks/myvirtualnetwork/subnets/testsubnets"
            }, [
                {
                    "name": "contoso-uplink",
                    "polarization": "LHCP",
                    "direction": "Uplink",
                    "gainOverTemperature": 0,
                    "eirpdBW": 45,
                    "channels": [
                        {
                            "name": "contoso-uplink-channel",
                            "centerFrequencyMHz": 2250.0,
                            "bandwidthMHz": 2.0,
                            "endPoint": {
                                "ipAddress": "10.1.0.4",
                                "endPointName": "ContosoTest_Uplink",
                                "port": "50000",
                                "protocol": "TCP"
                            }
                        }
                    ]
                },
                {
                    "name": "contoso-downlink",
                    "polarization": "RHCP",
                    "direction": "Downlink",
                    "gainOverTemperature": 25.0,
                    "eirpdBW": 0.0,
                    "channels": [
                        {
                            "name": "contoso-downlink-channel",
                            "centerFrequencyMHz": 8160.0,
                            "bandwidthMHz": 15.0,
                            "endPoint": {
                                "ipAddress": "10.1.0.5",
                                "endPointName": "ContosoTest_Downlink",
                                "port": "50001",
                                "protocol": "UDP"
                            }
                        }
                    ]
                }
            ], testPollingOptions);
            assert.equal(res.name, resourcename);
        });
    });
    it("contactProfiles get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.contactProfiles.get(resourceGroup, resourcename);
            assert.equal(res.name, resourcename);
        });
    });
    it("contactProfiles list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.contactProfiles.list(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("contactProfiles delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.contactProfiles.beginDeleteAndWait(resourceGroup, resourcename);
            try {
                for (var _b = __asyncValues(client.contactProfiles.list(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("spacecrafts create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const titleLine = "CONTOSO_SAT";
            const tleLine1 = "1 27424U 02022A   22167.05119303  .00000638  00000+0  15103-3 0  9994";
            const tleLine2 = "2 27424  98.2477 108.9546 0000928  92.9194 327.0802 14.57300770 69982";
            const links = [
                {
                    "name": "uplink_lhcp1",
                    "centerFrequencyMHz": 2250.0,
                    "bandwidthMHz": 2.0,
                    "direction": "Uplink",
                    "polarization": "LHCP"
                },
                {
                    "name": "downlink_rhcp1",
                    "centerFrequencyMHz": 8160.0,
                    "bandwidthMHz": 15.0,
                    "direction": "Downlink",
                    "polarization": "RHCP"
                }
            ];
            const res = yield client.spacecrafts.beginCreateOrUpdateAndWait(resourceGroup, resourcename1, location, titleLine, tleLine1, tleLine2, links, testPollingOptions);
            assert.equal(res.name, resourcename1);
        });
    });
    it("spacecrafts get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.spacecrafts.get(resourceGroup, resourcename1);
            assert.equal(res.name, resourcename1);
        });
    });
    it("spacecrafts list test", function () {
        var e_3, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.spacecrafts.list(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("spacecrafts delete test", function () {
        var e_4, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.spacecrafts.beginDeleteAndWait(resourceGroup, resourcename1);
            try {
                for (var _b = __asyncValues(client.spacecrafts.list(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=orbital_operations_test.spec.js.map