/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Spacecraft as SpacecraftMapper, TagsObject as TagsObjectMapper, ContactParameters as ContactParametersMapper, Contact as ContactMapper, ContactProfile as ContactProfileMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const spacecraftName = {
    parameterPath: "spacecraftName",
    mapper: {
        serializedName: "spacecraftName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const tags = {
    parameterPath: ["options", "tags"],
    mapper: SpacecraftMapper
};
export const location = {
    parameterPath: "location",
    mapper: SpacecraftMapper
};
export const provisioningState = {
    parameterPath: ["options", "provisioningState"],
    mapper: SpacecraftMapper
};
export const noradId = {
    parameterPath: ["options", "noradId"],
    mapper: SpacecraftMapper
};
export const titleLine = {
    parameterPath: "titleLine",
    mapper: SpacecraftMapper
};
export const tleLine1 = {
    parameterPath: "tleLine1",
    mapper: SpacecraftMapper
};
export const tleLine2 = {
    parameterPath: "tleLine2",
    mapper: SpacecraftMapper
};
export const links = {
    parameterPath: "links",
    mapper: SpacecraftMapper
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: TagsObjectMapper
};
export const contactProfile = {
    parameterPath: "contactProfile",
    mapper: ContactParametersMapper
};
export const groundStationName = {
    parameterPath: "groundStationName",
    mapper: ContactParametersMapper
};
export const startTime = {
    parameterPath: "startTime",
    mapper: ContactParametersMapper
};
export const endTime = {
    parameterPath: "endTime",
    mapper: ContactParametersMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contactName = {
    parameterPath: "contactName",
    mapper: {
        serializedName: "contactName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: ContactMapper
};
export const contactProfileName = {
    parameterPath: "contactProfileName",
    mapper: {
        serializedName: "contactProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const tags1 = {
    parameterPath: ["options", "tags"],
    mapper: ContactProfileMapper
};
export const location1 = {
    parameterPath: "location",
    mapper: ContactProfileMapper
};
export const provisioningState1 = {
    parameterPath: ["options", "provisioningState"],
    mapper: ContactProfileMapper
};
export const minimumViableContactDuration = {
    parameterPath: ["options", "minimumViableContactDuration"],
    mapper: ContactProfileMapper
};
export const minimumElevationDegrees = {
    parameterPath: ["options", "minimumElevationDegrees"],
    mapper: ContactProfileMapper
};
export const autoTrackingConfiguration = {
    parameterPath: ["options", "autoTrackingConfiguration"],
    mapper: ContactProfileMapper
};
export const eventHubUri = {
    parameterPath: ["options", "eventHubUri"],
    mapper: ContactProfileMapper
};
export const networkConfiguration = {
    parameterPath: "networkConfiguration",
    mapper: ContactProfileMapper
};
export const thirdPartyConfigurations = {
    parameterPath: ["options", "thirdPartyConfigurations"],
    mapper: ContactProfileMapper
};
export const links1 = {
    parameterPath: "links",
    mapper: ContactProfileMapper
};
export const capability = {
    parameterPath: "capability",
    mapper: {
        serializedName: "capability",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location2 = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map