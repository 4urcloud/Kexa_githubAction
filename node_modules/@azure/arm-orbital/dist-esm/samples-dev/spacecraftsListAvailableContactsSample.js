/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureOrbital } from "@azure/arm-orbital";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Returns list of available contacts. A contact is available if the spacecraft is visible from the ground station for more than the minimum viable contact duration provided in the contact profile.
 *
 * @summary Returns list of available contacts. A contact is available if the spacecraft is visible from the ground station for more than the minimum viable contact duration provided in the contact profile.
 * x-ms-original-file: specification/orbital/resource-manager/Microsoft.Orbital/stable/2022-11-01/examples/AvailableContactsList.json
 */
function listOfContact() {
    var e_1, _a;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["ORBITAL_SUBSCRIPTION_ID"] ||
            "c1be1141-a7c9-4aac-9608-3c2e2f1152c3";
        const resourceGroupName = process.env["ORBITAL_RESOURCE_GROUP"] || "contoso-Rgp";
        const spacecraftName = "CONTOSO_SAT";
        const contactProfile = {
            id: "/subscriptions/c1be1141-a7c9-4aac-9608-3c2e2f1152c3/resourceGroups/contoso-Rgp/providers/Microsoft.Orbital/contactProfiles/CONTOSO-CP"
        };
        const groundStationName = "EASTUS2_0";
        const startTime = new Date("2022-11-01T11:30:00Z");
        const endTime = new Date("2022-11-02T11:30:00Z");
        const credential = new DefaultAzureCredential();
        const client = new AzureOrbital(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _b = __asyncValues(client.spacecrafts.beginListAvailableContactsAndWait(resourceGroupName, spacecraftName, contactProfile, groundStationName, startTime, endTime)), _c; _c = yield _b.next(), !_c.done;) {
                let item = _c.value;
                resArray.push(item);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        console.log(resArray);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        listOfContact();
    });
}
main().catch(console.error);
//# sourceMappingURL=spacecraftsListAvailableContactsSample.js.map