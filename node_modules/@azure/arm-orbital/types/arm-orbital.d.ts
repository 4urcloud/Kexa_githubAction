import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** Authorized groundstation. */
export declare interface AuthorizedGroundstation {
    /** Groundstation name. */
    groundStation: string;
    /** Date of authorization expiration. */
    expirationDate: Date;
}

/** Defines values for AutoTrackingConfiguration. */
export declare type AutoTrackingConfiguration = "disabled" | "xBand" | "sBand";

/** Customer retrieves list of Available Contacts for a spacecraft resource. Later, one of the available contact can be selected to create a contact. */
export declare interface AvailableContacts {
    /** The reference to the spacecraft resource. */
    spacecraft?: AvailableContactsSpacecraft;
    /**
     * Name of Azure Ground Station.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groundStationName?: string;
    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximumElevationDegrees?: number;
    /**
     * Time at which antenna transmit will be enabled (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly txStartTime?: Date;
    /**
     * Time at which antenna transmit will be disabled (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly txEndTime?: Date;
    /**
     * Earliest time to receive a signal (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rxStartTime?: Date;
    /**
     * Time to lost receiving a signal (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rxEndTime?: Date;
    /**
     * Azimuth of the antenna at the start of the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startAzimuthDegrees?: number;
    /**
     * Azimuth of the antenna at the end of the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endAzimuthDegrees?: number;
    /**
     * Spacecraft elevation above the horizon at contact start.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startElevationDegrees?: number;
    /**
     * Spacecraft elevation above the horizon at contact end.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endElevationDegrees?: number;
}

/** Response for the ListAvailableContacts API service call. */
export declare interface AvailableContactsListResult {
    /** A list of available contacts. */
    value?: AvailableContacts[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Properties of Contact resource. */
export declare interface AvailableContactsProperties extends ContactInstanceProperties {
}

/** The reference to the spacecraft resource. */
export declare interface AvailableContactsSpacecraft extends ResourceReference {
}

/** Ground Stations available to schedule Contacts. */
export declare interface AvailableGroundStation {
    /**
     * ID of groundStation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Name of the ground station.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Azure region. */
    location?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** City of ground station. */
    city?: string;
    /** Ground station provider name. */
    providerName?: string;
    /** Longitude of the ground station in decimal degrees. */
    longitudeDegrees?: number;
    /** Latitude of the ground station in decimal degrees. */
    latitudeDegrees?: number;
    /** Altitude of the ground station. */
    altitudeMeters?: number;
    /** Release Status of a ground station. */
    releaseMode?: ReleaseMode;
}

/** Response for the AvailableGroundStations API service call. */
export declare interface AvailableGroundStationListResult {
    /** A list of ground station resources. */
    value?: AvailableGroundStation[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The properties bag for this resource. */
export declare interface AvailableGroundStationProperties extends AvailableGroundStationPropertiesAutoGenerated {
}

/** Properties object for Available groundstation. */
export declare interface AvailableGroundStationPropertiesAutoGenerated {
    /** City of ground station. */
    city?: string;
    /** Ground station provider name. */
    providerName?: string;
    /** Longitude of the ground station in decimal degrees. */
    longitudeDegrees?: number;
    /** Latitude of the ground station in decimal degrees. */
    latitudeDegrees?: number;
    /** Altitude of the ground station. */
    altitudeMeters?: number;
    /** Release Status of a ground station. */
    releaseMode?: ReleaseMode;
}

/** Interface representing a AvailableGroundStations. */
export declare interface AvailableGroundStations {
    /**
     * Returns list of available ground stations.
     * @param capability Ground Station Capability.
     * @param options The options parameters.
     */
    listByCapability(capability: CapabilityParameter, options?: AvailableGroundStationsListByCapabilityOptionalParams): PagedAsyncIterableIterator<AvailableGroundStation>;
}

/** Optional parameters. */
export declare interface AvailableGroundStationsListByCapabilityNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCapabilityNext operation. */
export declare type AvailableGroundStationsListByCapabilityNextResponse = AvailableGroundStationListResult;

/** Optional parameters. */
export declare interface AvailableGroundStationsListByCapabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCapability operation. */
export declare type AvailableGroundStationsListByCapabilityResponse = AvailableGroundStationListResult;

export declare class AzureOrbital extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureOrbital class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureOrbitalOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    spacecrafts: Spacecrafts;
    contacts: Contacts;
    contactProfiles: ContactProfiles;
    availableGroundStations: AvailableGroundStations;
    operationsResults: OperationsResults;
}

/** Optional parameters. */
export declare interface AzureOrbitalOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * Defines values for Capability. \
 * {@link KnownCapability} can be used interchangeably with Capability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EarthObservation** \
 * **Communication**
 */
export declare type Capability = string;

/**
 * Defines values for CapabilityParameter. \
 * {@link KnownCapabilityParameter} can be used interchangeably with CapabilityParameter,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EarthObservation** \
 * **Communication**
 */
export declare type CapabilityParameter = string;

/** Customer creates a contact resource for a spacecraft resource. */
export declare interface Contact extends ProxyResource {
    /** The current state of the resource's creation, deletion, or modification. */
    provisioningState?: ContactsPropertiesProvisioningState;
    /**
     * Status of a contact.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ContactsStatus;
    /** Reservation start time of a contact (ISO 8601 UTC standard). */
    reservationStartTime: Date;
    /** Reservation end time of a contact (ISO 8601 UTC standard). */
    reservationEndTime: Date;
    /**
     * Receive start time of a contact (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rxStartTime?: Date;
    /**
     * Receive end time of a contact (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rxEndTime?: Date;
    /**
     * Transmit start time of a contact (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly txStartTime?: Date;
    /**
     * Transmit end time of a contact (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly txEndTime?: Date;
    /**
     * Any error message while scheduling a contact.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximumElevationDegrees?: number;
    /**
     * Azimuth of the antenna at the start of the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startAzimuthDegrees?: number;
    /**
     * Azimuth of the antenna at the end of the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endAzimuthDegrees?: number;
    /** Azure Ground Station name. */
    groundStationName: string;
    /**
     * Spacecraft elevation above the horizon at contact start.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startElevationDegrees?: number;
    /**
     * Spacecraft elevation above the horizon at contact end.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endElevationDegrees?: number;
    /**
     * The configuration associated with the allocated antenna.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly antennaConfiguration?: ContactsPropertiesAntennaConfiguration;
    /** The reference to the contact profile resource. */
    contactProfile: ContactsPropertiesContactProfile;
}

/** Contact Instance Properties. */
export declare interface ContactInstanceProperties {
    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximumElevationDegrees?: number;
    /**
     * Time at which antenna transmit will be enabled (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly txStartTime?: Date;
    /**
     * Time at which antenna transmit will be disabled (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly txEndTime?: Date;
    /**
     * Earliest time to receive a signal (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rxStartTime?: Date;
    /**
     * Time to lost receiving a signal (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rxEndTime?: Date;
    /**
     * Azimuth of the antenna at the start of the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startAzimuthDegrees?: number;
    /**
     * Azimuth of the antenna at the end of the contact in decimal degrees.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endAzimuthDegrees?: number;
    /**
     * Spacecraft elevation above the horizon at contact start.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startElevationDegrees?: number;
    /**
     * Spacecraft elevation above the horizon at contact end.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endElevationDegrees?: number;
}

/** Response for the ListContacts API service call. */
export declare interface ContactListResult {
    /** A list of contact resources in a resource group. */
    value?: Contact[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Parameters that define the contact resource. */
export declare interface ContactParameters {
    /** The reference to the contact profile resource. */
    contactProfile: ContactParametersContactProfile;
    /** Name of Azure Ground Station. */
    groundStationName: string;
    /** Start time of a contact (ISO 8601 UTC standard). */
    startTime: Date;
    /** End time of a contact (ISO 8601 UTC standard). */
    endTime: Date;
}

/** The reference to the contact profile resource. */
export declare interface ContactParametersContactProfile extends ResourceReference {
}

/** Customer creates a Contact Profile Resource, which will contain all of the configurations required for scheduling a contact. */
export declare interface ContactProfile extends TrackedResource {
    /** The current state of the resource's creation, deletion, or modification. */
    provisioningState?: ContactProfilesPropertiesProvisioningState;
    /** Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station. */
    minimumViableContactDuration?: string;
    /** Minimum viable elevation for the contact in decimal degrees. Used for listing the available contacts with a spacecraft at a given ground station. */
    minimumElevationDegrees?: number;
    /** Auto-tracking configuration. */
    autoTrackingConfiguration?: AutoTrackingConfiguration;
    /** ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub. */
    eventHubUri?: string;
    /** Network configuration of customer virtual network. */
    networkConfiguration: ContactProfilesPropertiesNetworkConfiguration;
    /** Third-party mission configuration of the Contact Profile. Describes RF links, modem processing, and IP endpoints. */
    thirdPartyConfigurations?: ContactProfileThirdPartyConfiguration[];
    /** Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints. */
    links: ContactProfileLink[];
}

/** Contact Profile Link. */
export declare interface ContactProfileLink {
    /** Link name. */
    name: string;
    /** Polarization. e.g. (RHCP, LHCP). */
    polarization: Polarization;
    /** Direction (Uplink or Downlink). */
    direction: Direction;
    /** Gain to noise temperature in db/K. It is the required G/T by the customer. Not used yet. */
    gainOverTemperature?: number;
    /** Effective Isotropic Radiated Power (EIRP) in dBW. It is the required EIRP by the customer. Not used yet. */
    eirpdBW?: number;
    /** Contact Profile Link Channel. */
    channels: ContactProfileLinkChannel[];
}

/** Contact Profile Link Channel. */
export declare interface ContactProfileLinkChannel {
    /** Channel name. */
    name: string;
    /** Center Frequency in MHz. */
    centerFrequencyMHz: number;
    /** Bandwidth in MHz. */
    bandwidthMHz: number;
    /** Customer end point to store and retrieve data during a contact with the spacecraft. */
    endPoint: EndPoint;
    /** Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream. */
    modulationConfiguration?: string;
    /** Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream. */
    demodulationConfiguration?: string;
    /** Currently unused. */
    encodingConfiguration?: string;
    /** Currently unused. */
    decodingConfiguration?: string;
}

/** Response for the ListContactProfiles API service call. */
export declare interface ContactProfileListResult {
    /** A list of contact profile resources in a resource group. */
    value?: ContactProfile[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Properties of the contact profile resource. */
export declare interface ContactProfileProperties extends ContactProfilesProperties {
}

/** Interface representing a ContactProfiles. */
export declare interface ContactProfiles {
    /**
     * Returns list of contact profiles by Subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ContactProfilesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ContactProfile>;
    /**
     * Returns list of contact profiles by Resource Group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: ContactProfilesListOptionalParams): PagedAsyncIterableIterator<ContactProfile>;
    /**
     * Gets the specified contact Profile in a specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, contactProfileName: string, options?: ContactProfilesGetOptionalParams): Promise<ContactProfilesGetResponse>;
    /**
     * Creates or updates a contact profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param location The geo-location where the resource lives
     * @param networkConfiguration Network configuration of customer virtual network.
     * @param links Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, contactProfileName: string, location: string, networkConfiguration: ContactProfilesPropertiesNetworkConfiguration, links: ContactProfileLink[], options?: ContactProfilesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ContactProfilesCreateOrUpdateResponse>, ContactProfilesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a contact profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param location The geo-location where the resource lives
     * @param networkConfiguration Network configuration of customer virtual network.
     * @param links Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, contactProfileName: string, location: string, networkConfiguration: ContactProfilesPropertiesNetworkConfiguration, links: ContactProfileLink[], options?: ContactProfilesCreateOrUpdateOptionalParams): Promise<ContactProfilesCreateOrUpdateResponse>;
    /**
     * Deletes a specified contact profile resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, contactProfileName: string, options?: ContactProfilesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a specified contact profile resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, contactProfileName: string, options?: ContactProfilesDeleteOptionalParams): Promise<void>;
    /**
     * Updates the specified contact profile tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param parameters Parameters supplied to update contact profile tags.
     * @param options The options parameters.
     */
    beginUpdateTags(resourceGroupName: string, contactProfileName: string, parameters: TagsObject, options?: ContactProfilesUpdateTagsOptionalParams): Promise<SimplePollerLike<OperationState<ContactProfilesUpdateTagsResponse>, ContactProfilesUpdateTagsResponse>>;
    /**
     * Updates the specified contact profile tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param contactProfileName Contact Profile name.
     * @param parameters Parameters supplied to update contact profile tags.
     * @param options The options parameters.
     */
    beginUpdateTagsAndWait(resourceGroupName: string, contactProfileName: string, parameters: TagsObject, options?: ContactProfilesUpdateTagsOptionalParams): Promise<ContactProfilesUpdateTagsResponse>;
}

/** Defines headers for ContactProfiles_createOrUpdate operation. */
export declare interface ContactProfilesCreateOrUpdateHeaders {
    /** URL for checking the ongoing status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface ContactProfilesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The current state of the resource's creation, deletion, or modification. */
    provisioningState?: ContactProfilesPropertiesProvisioningState;
    /** Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station. */
    minimumViableContactDuration?: string;
    /** Minimum viable elevation for the contact in decimal degrees. Used for listing the available contacts with a spacecraft at a given ground station. */
    minimumElevationDegrees?: number;
    /** Auto-tracking configuration. */
    autoTrackingConfiguration?: AutoTrackingConfiguration;
    /** ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub. */
    eventHubUri?: string;
    /** Third-party mission configuration of the Contact Profile. Describes RF links, modem processing, and IP endpoints. */
    thirdPartyConfigurations?: ContactProfileThirdPartyConfiguration[];
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContactProfilesCreateOrUpdateResponse = ContactProfile;

/** Defines headers for ContactProfiles_delete operation. */
export declare interface ContactProfilesDeleteHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Optional parameters. */
export declare interface ContactProfilesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ContactProfilesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContactProfilesGetResponse = ContactProfile;

/** Optional parameters. */
export declare interface ContactProfilesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ContactProfilesListBySubscriptionNextResponse = ContactProfileListResult;

/** Optional parameters. */
export declare interface ContactProfilesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type ContactProfilesListBySubscriptionResponse = ContactProfileListResult;

/** Optional parameters. */
export declare interface ContactProfilesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ContactProfilesListNextResponse = ContactProfileListResult;

/** Optional parameters. */
export declare interface ContactProfilesListOptionalParams extends coreClient.OperationOptions {
    /** An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
}

/** Contains response data for the list operation. */
export declare type ContactProfilesListResponse = ContactProfileListResult;

/** List of Contact Profile Resource Properties. */
export declare interface ContactProfilesProperties {
    /** The current state of the resource's creation, deletion, or modification. */
    provisioningState?: ContactProfilesPropertiesProvisioningState;
    /** Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station. */
    minimumViableContactDuration?: string;
    /** Minimum viable elevation for the contact in decimal degrees. Used for listing the available contacts with a spacecraft at a given ground station. */
    minimumElevationDegrees?: number;
    /** Auto-tracking configuration. */
    autoTrackingConfiguration?: AutoTrackingConfiguration;
    /** ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub. */
    eventHubUri?: string;
    /** Network configuration of customer virtual network. */
    networkConfiguration: ContactProfilesPropertiesNetworkConfiguration;
    /** Third-party mission configuration of the Contact Profile. Describes RF links, modem processing, and IP endpoints. */
    thirdPartyConfigurations?: ContactProfileThirdPartyConfiguration[];
    /** Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints. */
    links: ContactProfileLink[];
}

/** Network configuration of customer virtual network. */
export declare interface ContactProfilesPropertiesNetworkConfiguration {
    /** ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it. */
    subnetId: string;
}

/**
 * Defines values for ContactProfilesPropertiesProvisioningState. \
 * {@link KnownContactProfilesPropertiesProvisioningState} can be used interchangeably with ContactProfilesPropertiesProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **creating** \
 * **succeeded** \
 * **failed** \
 * **canceled** \
 * **updating** \
 * **deleting**
 */
export declare type ContactProfilesPropertiesProvisioningState = string;

/** Defines headers for ContactProfiles_updateTags operation. */
export declare interface ContactProfilesUpdateTagsHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Optional parameters. */
export declare interface ContactProfilesUpdateTagsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export declare type ContactProfilesUpdateTagsResponse = ContactProfile;

/** Contact Profile third-party partner configuration. */
export declare interface ContactProfileThirdPartyConfiguration {
    /** Name of the third-party provider. */
    providerName: string;
    /** Name of string referencing the configuration describing contact set-up for a particular mission. Expected values are those which have been created in collaboration with the partner network. */
    missionConfiguration: string;
}

/** Interface representing a Contacts. */
export declare interface Contacts {
    /**
     * Returns list of contacts by spacecraftName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, spacecraftName: string, options?: ContactsListOptionalParams): PagedAsyncIterableIterator<Contact>;
    /**
     * Gets the specified contact in a specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, spacecraftName: string, contactName: string, options?: ContactsGetOptionalParams): Promise<ContactsGetResponse>;
    /**
     * Creates a contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param parameters The parameters to provide for the created contact.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, spacecraftName: string, contactName: string, parameters: Contact, options?: ContactsCreateOptionalParams): Promise<SimplePollerLike<OperationState<ContactsCreateResponse>, ContactsCreateResponse>>;
    /**
     * Creates a contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param parameters The parameters to provide for the created contact.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, spacecraftName: string, contactName: string, parameters: Contact, options?: ContactsCreateOptionalParams): Promise<ContactsCreateResponse>;
    /**
     * Deletes a specified contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, spacecraftName: string, contactName: string, options?: ContactsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a specified contact.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactName Contact name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, spacecraftName: string, contactName: string, options?: ContactsDeleteOptionalParams): Promise<void>;
}

/** Defines headers for Contacts_create operation. */
export declare interface ContactsCreateHeaders {
    /** URL for checking the ongoing status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface ContactsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ContactsCreateResponse = Contact;

/** Defines headers for Contacts_delete operation. */
export declare interface ContactsDeleteHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Optional parameters. */
export declare interface ContactsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ContactsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContactsGetResponse = Contact;

/** Optional parameters. */
export declare interface ContactsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ContactsListNextResponse = ContactListResult;

/** Optional parameters. */
export declare interface ContactsListOptionalParams extends coreClient.OperationOptions {
    /** An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
}

/** Contains response data for the list operation. */
export declare type ContactsListResponse = ContactListResult;

/** The configuration associated with the allocated antenna. */
export declare interface ContactsPropertiesAntennaConfiguration {
    /** The destination IP a packet can be sent to. This would for example be the TCP endpoint you would send data to. */
    destinationIp?: string;
    /** List of Source IP */
    sourceIps?: string[];
}

/** The reference to the contact profile resource. */
export declare interface ContactsPropertiesContactProfile extends ResourceReference {
}

/**
 * Defines values for ContactsPropertiesProvisioningState. \
 * {@link KnownContactsPropertiesProvisioningState} can be used interchangeably with ContactsPropertiesProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **creating** \
 * **succeeded** \
 * **failed** \
 * **canceled** \
 * **updating** \
 * **deleting**
 */
export declare type ContactsPropertiesProvisioningState = string;

/**
 * Defines values for ContactsStatus. \
 * {@link KnownContactsStatus} can be used interchangeably with ContactsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **scheduled** \
 * **cancelled** \
 * **succeeded** \
 * **failed** \
 * **providerCancelled**
 */
export declare type ContactsStatus = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for Direction. \
 * {@link KnownDirection} can be used interchangeably with Direction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uplink** \
 * **Downlink**
 */
export declare type Direction = string;

/** Customer end point to store and retrieve data during a contact with the spacecraft. */
export declare interface EndPoint {
    /** IP Address (IPv4). */
    ipAddress: string;
    /** Name of an end point. */
    endPointName: string;
    /** TCP port to listen on to receive data. */
    port: string;
    /** Protocol either UDP or TCP. */
    protocol: Protocol;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link Capability} that the service accepts. */
export declare enum KnownCapability {
    /** EarthObservation */
    EarthObservation = "EarthObservation",
    /** Communication */
    Communication = "Communication"
}

/** Known values of {@link CapabilityParameter} that the service accepts. */
export declare enum KnownCapabilityParameter {
    /** EarthObservation */
    EarthObservation = "EarthObservation",
    /** Communication */
    Communication = "Communication"
}

/** Known values of {@link ContactProfilesPropertiesProvisioningState} that the service accepts. */
export declare enum KnownContactProfilesPropertiesProvisioningState {
    /** Creating */
    Creating = "creating",
    /** Succeeded */
    Succeeded = "succeeded",
    /** Failed */
    Failed = "failed",
    /** Canceled */
    Canceled = "canceled",
    /** Updating */
    Updating = "updating",
    /** Deleting */
    Deleting = "deleting"
}

/** Known values of {@link ContactsPropertiesProvisioningState} that the service accepts. */
export declare enum KnownContactsPropertiesProvisioningState {
    /** Creating */
    Creating = "creating",
    /** Succeeded */
    Succeeded = "succeeded",
    /** Failed */
    Failed = "failed",
    /** Canceled */
    Canceled = "canceled",
    /** Updating */
    Updating = "updating",
    /** Deleting */
    Deleting = "deleting"
}

/** Known values of {@link ContactsStatus} that the service accepts. */
export declare enum KnownContactsStatus {
    /** Scheduled */
    Scheduled = "scheduled",
    /** Cancelled */
    Cancelled = "cancelled",
    /** Succeeded */
    Succeeded = "succeeded",
    /** Failed */
    Failed = "failed",
    /** ProviderCancelled */
    ProviderCancelled = "providerCancelled"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link Direction} that the service accepts. */
export declare enum KnownDirection {
    /** Uplink */
    Uplink = "Uplink",
    /** Downlink */
    Downlink = "Downlink"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link Polarization} that the service accepts. */
export declare enum KnownPolarization {
    /** Rhcp */
    Rhcp = "RHCP",
    /** Lhcp */
    Lhcp = "LHCP",
    /** LinearVertical */
    LinearVertical = "linearVertical",
    /** LinearHorizontal */
    LinearHorizontal = "linearHorizontal"
}

/** Known values of {@link Protocol} that the service accepts. */
export declare enum KnownProtocol {
    /** TCP */
    TCP = "TCP",
    /** UDP */
    UDP = "UDP"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Creating */
    Creating = "creating",
    /** Succeeded */
    Succeeded = "succeeded",
    /** Failed */
    Failed = "failed",
    /** Canceled */
    Canceled = "canceled",
    /** Updating */
    Updating = "updating",
    /** Deleting */
    Deleting = "deleting"
}

/** Known values of {@link ReleaseMode} that the service accepts. */
export declare enum KnownReleaseMode {
    /** Preview */
    Preview = "Preview",
    /** GA */
    GA = "GA"
}

/** Known values of {@link SpacecraftsPropertiesProvisioningState} that the service accepts. */
export declare enum KnownSpacecraftsPropertiesProvisioningState {
    /** Creating */
    Creating = "creating",
    /** Succeeded */
    Succeeded = "succeeded",
    /** Failed */
    Failed = "failed",
    /** Canceled */
    Canceled = "canceled",
    /** Updating */
    Updating = "updating",
    /** Deleting */
    Deleting = "deleting"
}

/** Known values of {@link Status} that the service accepts. */
export declare enum KnownStatus {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Running */
    Running = "Running"
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Operation Result Entity. */
export declare interface OperationResult {
    /**
     * ID of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The status of operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
    /**
     * The operation start time (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The operation end time (ISO 8601 UTC standard).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * Percentage completed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * A list of results when the operation returns multiple results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Record<string, unknown>[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** Operation result properties. */
    properties?: Record<string, unknown>;
    /** Operation result error properties. */
    error?: OperationResultErrorProperties;
}

/** Operation result error properties. */
export declare interface OperationResultErrorProperties {
    /**
     * The code of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Orbital Rest API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Interface representing a OperationsResults. */
export declare interface OperationsResults {
    /**
     * Returns operation results.
     * @param location The name of Azure region.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    beginGet(location: string, operationId: string, options?: OperationsResultsGetOptionalParams): Promise<SimplePollerLike<OperationState<OperationsResultsGetResponse>, OperationsResultsGetResponse>>;
    /**
     * Returns operation results.
     * @param location The name of Azure region.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    beginGetAndWait(location: string, operationId: string, options?: OperationsResultsGetOptionalParams): Promise<OperationsResultsGetResponse>;
}

/** Defines headers for OperationsResults_get operation. */
export declare interface OperationsResultsGetHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Optional parameters. */
export declare interface OperationsResultsGetOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the get operation. */
export declare type OperationsResultsGetResponse = OperationResult;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/**
 * Defines values for Polarization. \
 * {@link KnownPolarization} can be used interchangeably with Polarization,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RHCP** \
 * **LHCP** \
 * **linearVertical** \
 * **linearHorizontal**
 */
export declare type Polarization = string;

/**
 * Defines values for Protocol. \
 * {@link KnownProtocol} can be used interchangeably with Protocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TCP** \
 * **UDP**
 */
export declare type Protocol = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **creating** \
 * **succeeded** \
 * **failed** \
 * **canceled** \
 * **updating** \
 * **deleting**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for ReleaseMode. \
 * {@link KnownReleaseMode} can be used interchangeably with ReleaseMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Preview** \
 * **GA**
 */
export declare type ReleaseMode = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Response for an API service call that lists the resource IDs of resources associated with another resource. */
export declare interface ResourceIdListResult {
    /** A list of Azure Resource IDs. */
    value?: ResourceIdListResultValueItem[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

export declare interface ResourceIdListResultValueItem {
    /** The Azure Resource ID. */
    id?: string;
}

/** Resource Reference. */
export declare interface ResourceReference {
    /** Resource ID. */
    id: string;
}

/** Customer creates a spacecraft resource to schedule a contact. */
export declare interface Spacecraft extends TrackedResource {
    /** The current state of the resource's creation, deletion, or modification. */
    provisioningState?: SpacecraftsPropertiesProvisioningState;
    /** NORAD ID of the spacecraft. */
    noradId?: string;
    /** Title line of the two-line element set (TLE). */
    titleLine: string;
    /** Line 1 of the two-line element set (TLE). */
    tleLine1: string;
    /** Line 2 of the two-line element set (TLE). */
    tleLine2: string;
    /** Immutable list of Spacecraft links. */
    links: SpacecraftLink[];
}

/** List of authorized spacecraft links per ground station and the expiration date of the authorization. */
export declare interface SpacecraftLink {
    /** Link name. */
    name: string;
    /** Center Frequency in MHz. */
    centerFrequencyMHz: number;
    /** Bandwidth in MHz. */
    bandwidthMHz: number;
    /** Direction (Uplink or Downlink). */
    direction: Direction;
    /** Polarization. e.g. (RHCP, LHCP). */
    polarization: Polarization;
    /**
     * Authorized Ground Stations
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly authorizations?: AuthorizedGroundstation[];
}

/** Response for the ListSpacecrafts API service call. */
export declare interface SpacecraftListResult {
    /** A list of spacecraft resources in a resource group. */
    value?: Spacecraft[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Spacecrafts. */
export declare interface Spacecrafts {
    /**
     * Returns list of spacecrafts by subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: SpacecraftsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Spacecraft>;
    /**
     * Returns list of spacecrafts by resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: SpacecraftsListOptionalParams): PagedAsyncIterableIterator<Spacecraft>;
    /**
     * Returns list of available contacts. A contact is available if the spacecraft is visible from the
     * ground station for more than the minimum viable contact duration provided in the contact profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param contactProfile The reference to the contact profile resource.
     * @param groundStationName Name of Azure Ground Station.
     * @param startTime Start time of a contact (ISO 8601 UTC standard).
     * @param endTime End time of a contact (ISO 8601 UTC standard).
     * @param options The options parameters.
     */
    beginListAvailableContactsAndWait(resourceGroupName: string, spacecraftName: string, contactProfile: ContactParametersContactProfile, groundStationName: string, startTime: Date, endTime: Date, options?: SpacecraftsListAvailableContactsOptionalParams): PagedAsyncIterableIterator<AvailableContacts>;
    /**
     * Gets the specified spacecraft in a specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, spacecraftName: string, options?: SpacecraftsGetOptionalParams): Promise<SpacecraftsGetResponse>;
    /**
     * Creates or updates a spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param location The geo-location where the resource lives
     * @param titleLine Title line of the two-line element set (TLE).
     * @param tleLine1 Line 1 of the two-line element set (TLE).
     * @param tleLine2 Line 2 of the two-line element set (TLE).
     * @param links Immutable list of Spacecraft links.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, spacecraftName: string, location: string, titleLine: string, tleLine1: string, tleLine2: string, links: SpacecraftLink[], options?: SpacecraftsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SpacecraftsCreateOrUpdateResponse>, SpacecraftsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param location The geo-location where the resource lives
     * @param titleLine Title line of the two-line element set (TLE).
     * @param tleLine1 Line 1 of the two-line element set (TLE).
     * @param tleLine2 Line 2 of the two-line element set (TLE).
     * @param links Immutable list of Spacecraft links.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, spacecraftName: string, location: string, titleLine: string, tleLine1: string, tleLine2: string, links: SpacecraftLink[], options?: SpacecraftsCreateOrUpdateOptionalParams): Promise<SpacecraftsCreateOrUpdateResponse>;
    /**
     * Deletes a specified spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, spacecraftName: string, options?: SpacecraftsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a specified spacecraft resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, spacecraftName: string, options?: SpacecraftsDeleteOptionalParams): Promise<void>;
    /**
     * Updates the specified spacecraft tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param parameters Parameters supplied to update spacecraft tags.
     * @param options The options parameters.
     */
    beginUpdateTags(resourceGroupName: string, spacecraftName: string, parameters: TagsObject, options?: SpacecraftsUpdateTagsOptionalParams): Promise<SimplePollerLike<OperationState<SpacecraftsUpdateTagsResponse>, SpacecraftsUpdateTagsResponse>>;
    /**
     * Updates the specified spacecraft tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param spacecraftName Spacecraft ID.
     * @param parameters Parameters supplied to update spacecraft tags.
     * @param options The options parameters.
     */
    beginUpdateTagsAndWait(resourceGroupName: string, spacecraftName: string, parameters: TagsObject, options?: SpacecraftsUpdateTagsOptionalParams): Promise<SpacecraftsUpdateTagsResponse>;
}

/** Defines headers for Spacecrafts_createOrUpdate operation. */
export declare interface SpacecraftsCreateOrUpdateHeaders {
    /** URL for checking the ongoing status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface SpacecraftsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The current state of the resource's creation, deletion, or modification. */
    provisioningState?: SpacecraftsPropertiesProvisioningState;
    /** NORAD ID of the spacecraft. */
    noradId?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SpacecraftsCreateOrUpdateResponse = Spacecraft;

/** Defines headers for Spacecrafts_delete operation. */
export declare interface SpacecraftsDeleteHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Optional parameters. */
export declare interface SpacecraftsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SpacecraftsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SpacecraftsGetResponse = Spacecraft;

/** Defines headers for Spacecrafts_listAvailableContacts operation. */
export declare interface SpacecraftsListAvailableContactsHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Defines headers for Spacecrafts_listAvailableContactsNext operation. */
export declare interface SpacecraftsListAvailableContactsNextHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Optional parameters. */
export declare interface SpacecraftsListAvailableContactsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAvailableContactsNext operation. */
export declare type SpacecraftsListAvailableContactsNextResponse = AvailableContactsListResult;

/** Optional parameters. */
export declare interface SpacecraftsListAvailableContactsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the listAvailableContacts operation. */
export declare type SpacecraftsListAvailableContactsResponse = AvailableContactsListResult;

/** Optional parameters. */
export declare interface SpacecraftsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type SpacecraftsListBySubscriptionNextResponse = SpacecraftListResult;

/** Optional parameters. */
export declare interface SpacecraftsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type SpacecraftsListBySubscriptionResponse = SpacecraftListResult;

/** Optional parameters. */
export declare interface SpacecraftsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SpacecraftsListNextResponse = SpacecraftListResult;

/** Optional parameters. */
export declare interface SpacecraftsListOptionalParams extends coreClient.OperationOptions {
    /** An opaque string that the resource provider uses to skip over previously-returned results. This is used when a previous list operation call returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
}

/** Contains response data for the list operation. */
export declare type SpacecraftsListResponse = SpacecraftListResult;

/**
 * Defines values for SpacecraftsPropertiesProvisioningState. \
 * {@link KnownSpacecraftsPropertiesProvisioningState} can be used interchangeably with SpacecraftsPropertiesProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **creating** \
 * **succeeded** \
 * **failed** \
 * **canceled** \
 * **updating** \
 * **deleting**
 */
export declare type SpacecraftsPropertiesProvisioningState = string;

/** Defines headers for Spacecrafts_updateTags operation. */
export declare interface SpacecraftsUpdateTagsHeaders {
    /** URL for determining when an operation has completed. */
    location?: string;
}

/** Optional parameters. */
export declare interface SpacecraftsUpdateTagsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export declare type SpacecraftsUpdateTagsResponse = Spacecraft;

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **Running**
 */
export declare type Status = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Tags object for patch operations. */
export declare interface TagsObject {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

export { }
