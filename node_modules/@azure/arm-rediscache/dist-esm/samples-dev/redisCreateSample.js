/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { RedisManagementClient } from "@azure/arm-rediscache";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
 *
 * @summary Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
 * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2023-08-01/examples/RedisCacheCreate.json
 */
function redisCacheCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["REDIS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["REDIS_RESOURCE_GROUP"] || "rg1";
        const name = "cache1";
        const parameters = {
            enableNonSslPort: true,
            location: "West US",
            minimumTlsVersion: "1.2",
            redisConfiguration: { maxmemoryPolicy: "allkeys-lru" },
            redisVersion: "4",
            replicasPerPrimary: 2,
            shardCount: 2,
            sku: { name: "Premium", capacity: 1, family: "P" },
            staticIP: "192.168.0.5",
            subnetId: "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1",
            zones: ["1"]
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisManagementClient(credential, subscriptionId);
        const result = yield client.redis.beginCreateAndWait(resourceGroupName, name, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
 *
 * @summary Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
 * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2023-08-01/examples/RedisCacheCreateDefaultVersion.json
 */
function redisCacheCreateDefaultVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["REDIS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["REDIS_RESOURCE_GROUP"] || "rg1";
        const name = "cache1";
        const parameters = {
            enableNonSslPort: true,
            location: "West US",
            minimumTlsVersion: "1.2",
            redisConfiguration: { maxmemoryPolicy: "allkeys-lru" },
            replicasPerPrimary: 2,
            shardCount: 2,
            sku: { name: "Premium", capacity: 1, family: "P" },
            staticIP: "192.168.0.5",
            subnetId: "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1",
            zones: ["1"]
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisManagementClient(credential, subscriptionId);
        const result = yield client.redis.beginCreateAndWait(resourceGroupName, name, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
 *
 * @summary Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
 * x-ms-original-file: specification/redis/resource-manager/Microsoft.Cache/stable/2023-08-01/examples/RedisCacheCreateLatestVersion.json
 */
function redisCacheCreateLatestVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["REDIS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["REDIS_RESOURCE_GROUP"] || "rg1";
        const name = "cache1";
        const parameters = {
            enableNonSslPort: true,
            location: "West US",
            minimumTlsVersion: "1.2",
            redisConfiguration: { maxmemoryPolicy: "allkeys-lru" },
            redisVersion: "Latest",
            replicasPerPrimary: 2,
            shardCount: 2,
            sku: { name: "Premium", capacity: 1, family: "P" },
            staticIP: "192.168.0.5",
            subnetId: "/subscriptions/subid/resourceGroups/rg2/providers/Microsoft.Network/virtualNetworks/network1/subnets/subnet1",
            zones: ["1"]
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisManagementClient(credential, subscriptionId);
        const result = yield client.redis.beginCreateAndWait(resourceGroupName, name, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        redisCacheCreate();
        redisCacheCreateDefaultVersion();
        redisCacheCreateLatestVersion();
    });
}
main().catch(console.error);
//# sourceMappingURL=redisCreateSample.js.map