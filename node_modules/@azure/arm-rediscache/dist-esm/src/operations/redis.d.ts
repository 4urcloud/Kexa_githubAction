import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Redis } from "../operationsInterfaces";
import { RedisManagementClient } from "../redisManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { UpgradeNotification, RedisListUpgradeNotificationsOptionalParams, RedisResource, RedisListByResourceGroupOptionalParams, RedisListBySubscriptionOptionalParams, CheckNameAvailabilityParameters, RedisCheckNameAvailabilityOptionalParams, RedisCreateParameters, RedisCreateOptionalParams, RedisCreateResponse, RedisUpdateParameters, RedisUpdateOptionalParams, RedisUpdateResponse, RedisDeleteOptionalParams, RedisGetOptionalParams, RedisGetResponse, RedisListKeysOptionalParams, RedisListKeysResponse, RedisRegenerateKeyParameters, RedisRegenerateKeyOptionalParams, RedisRegenerateKeyResponse, RedisRebootParameters, RedisForceRebootOptionalParams, RedisForceRebootOperationResponse, ImportRDBParameters, RedisImportDataOptionalParams, ExportRDBParameters, RedisExportDataOptionalParams, RedisFlushCacheOptionalParams, RedisFlushCacheResponse } from "../models";
/** Class containing Redis operations. */
export declare class RedisImpl implements Redis {
    private readonly client;
    /**
     * Initialize a new instance of the class Redis class.
     * @param client Reference to the service client
     */
    constructor(client: RedisManagementClient);
    /**
     * Gets any upgrade notifications for a Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param history how many minutes in past to look for upgrade notifications
     * @param options The options parameters.
     */
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options?: RedisListUpgradeNotificationsOptionalParams): PagedAsyncIterableIterator<UpgradeNotification>;
    private listUpgradeNotificationsPagingPage;
    private listUpgradeNotificationsPagingAll;
    /**
     * Lists all Redis caches in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: RedisListByResourceGroupOptionalParams): PagedAsyncIterableIterator<RedisResource>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Gets all Redis caches in the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: RedisListBySubscriptionOptionalParams): PagedAsyncIterableIterator<RedisResource>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Checks that the redis cache name is valid and is not already in use.
     * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only
     *                   supported resource type is 'Microsoft.Cache/redis'
     * @param options The options parameters.
     */
    checkNameAvailability(parameters: CheckNameAvailabilityParameters, options?: RedisCheckNameAvailabilityOptionalParams): Promise<void>;
    /**
     * Gets any upgrade notifications for a Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param history how many minutes in past to look for upgrade notifications
     * @param options The options parameters.
     */
    private _listUpgradeNotifications;
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, name: string, parameters: RedisCreateParameters, options?: RedisCreateOptionalParams): Promise<SimplePollerLike<OperationState<RedisCreateResponse>, RedisCreateResponse>>;
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, name: string, parameters: RedisCreateParameters, options?: RedisCreateOptionalParams): Promise<RedisCreateResponse>;
    /**
     * Update an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Update Redis operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, name: string, parameters: RedisUpdateParameters, options?: RedisUpdateOptionalParams): Promise<SimplePollerLike<OperationState<RedisUpdateResponse>, RedisUpdateResponse>>;
    /**
     * Update an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Update Redis operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, name: string, parameters: RedisUpdateParameters, options?: RedisUpdateOptionalParams): Promise<RedisUpdateResponse>;
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, name: string, options?: RedisDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, name: string, options?: RedisDeleteOptionalParams): Promise<void>;
    /**
     * Gets a Redis cache (resource description).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, options?: RedisGetOptionalParams): Promise<RedisGetResponse>;
    /**
     * Lists all Redis caches in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Gets all Redis caches in the specified subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Retrieve a Redis cache's access keys. This operation requires write permission to the cache
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, name: string, options?: RedisListKeysOptionalParams): Promise<RedisListKeysResponse>;
    /**
     * Regenerate Redis cache's access keys. This operation requires write permission to the cache
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Specifies which key to regenerate.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, name: string, parameters: RedisRegenerateKeyParameters, options?: RedisRegenerateKeyOptionalParams): Promise<RedisRegenerateKeyResponse>;
    /**
     * Reboot specified Redis node(s). This operation requires write permission to the cache resource.
     * There can be potential data loss.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Specifies which Redis node(s) to reboot.
     * @param options The options parameters.
     */
    forceReboot(resourceGroupName: string, name: string, parameters: RedisRebootParameters, options?: RedisForceRebootOptionalParams): Promise<RedisForceRebootOperationResponse>;
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param options The options parameters.
     */
    beginImportData(resourceGroupName: string, name: string, parameters: ImportRDBParameters, options?: RedisImportDataOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param options The options parameters.
     */
    beginImportDataAndWait(resourceGroupName: string, name: string, parameters: ImportRDBParameters, options?: RedisImportDataOptionalParams): Promise<void>;
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param options The options parameters.
     */
    beginExportData(resourceGroupName: string, name: string, parameters: ExportRDBParameters, options?: RedisExportDataOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param options The options parameters.
     */
    beginExportDataAndWait(resourceGroupName: string, name: string, parameters: ExportRDBParameters, options?: RedisExportDataOptionalParams): Promise<void>;
    /**
     * Deletes all of the keys in a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    beginFlushCache(resourceGroupName: string, cacheName: string, options?: RedisFlushCacheOptionalParams): Promise<SimplePollerLike<OperationState<RedisFlushCacheResponse>, RedisFlushCacheResponse>>;
    /**
     * Deletes all of the keys in a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    beginFlushCacheAndWait(resourceGroupName: string, cacheName: string, options?: RedisFlushCacheOptionalParams): Promise<RedisFlushCacheResponse>;
    /**
     * ListUpgradeNotificationsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param nextLink The nextLink from the previous successful call to the ListUpgradeNotifications
     *                 method.
     * @param options The options parameters.
     */
    private _listUpgradeNotificationsNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=redis.d.ts.map