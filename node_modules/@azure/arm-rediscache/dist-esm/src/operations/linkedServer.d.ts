import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { LinkedServer } from "../operationsInterfaces";
import { RedisManagementClient } from "../redisManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { RedisLinkedServerWithProperties, LinkedServerListOptionalParams, RedisLinkedServerCreateParameters, LinkedServerCreateOptionalParams, LinkedServerCreateResponse, LinkedServerDeleteOptionalParams, LinkedServerGetOptionalParams, LinkedServerGetResponse } from "../models";
/** Class containing LinkedServer operations. */
export declare class LinkedServerImpl implements LinkedServer {
    private readonly client;
    /**
     * Initialize a new instance of the class LinkedServer class.
     * @param client Reference to the service client
     */
    constructor(client: RedisManagementClient);
    /**
     * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, name: string, options?: LinkedServerListOptionalParams): PagedAsyncIterableIterator<RedisLinkedServerWithProperties>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: RedisLinkedServerCreateParameters, options?: LinkedServerCreateOptionalParams): Promise<SimplePollerLike<OperationState<LinkedServerCreateResponse>, LinkedServerCreateResponse>>;
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, name: string, linkedServerName: string, parameters: RedisLinkedServerCreateParameters, options?: LinkedServerCreateOptionalParams): Promise<LinkedServerCreateResponse>;
    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, name: string, linkedServerName: string, options?: LinkedServerDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, name: string, linkedServerName: string, options?: LinkedServerDeleteOptionalParams): Promise<void>;
    /**
     * Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, linkedServerName: string, options?: LinkedServerGetOptionalParams): Promise<LinkedServerGetResponse>;
    /**
     * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=linkedServer.d.ts.map