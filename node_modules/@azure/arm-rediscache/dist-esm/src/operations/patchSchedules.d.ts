import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PatchSchedules } from "../operationsInterfaces";
import { RedisManagementClient } from "../redisManagementClient";
import { RedisPatchSchedule, PatchSchedulesListByRedisResourceOptionalParams, DefaultName, PatchSchedulesCreateOrUpdateOptionalParams, PatchSchedulesCreateOrUpdateResponse, PatchSchedulesDeleteOptionalParams, PatchSchedulesGetOptionalParams, PatchSchedulesGetResponse } from "../models";
/** Class containing PatchSchedules operations. */
export declare class PatchSchedulesImpl implements PatchSchedules {
    private readonly client;
    /**
     * Initialize a new instance of the class PatchSchedules class.
     * @param client Reference to the service client
     */
    constructor(client: RedisManagementClient);
    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    listByRedisResource(resourceGroupName: string, cacheName: string, options?: PatchSchedulesListByRedisResourceOptionalParams): PagedAsyncIterableIterator<RedisPatchSchedule>;
    private listByRedisResourcePagingPage;
    private listByRedisResourcePagingAll;
    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    private _listByRedisResource;
    /**
     * Create or replace the patching schedule for Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param parameters Parameters to set the patching schedule for Redis cache.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, name: string, defaultParam: DefaultName, parameters: RedisPatchSchedule, options?: PatchSchedulesCreateOrUpdateOptionalParams): Promise<PatchSchedulesCreateOrUpdateResponse>;
    /**
     * Deletes the patching schedule of a redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, name: string, defaultParam: DefaultName, options?: PatchSchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Gets the patching schedule of a redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, defaultParam: DefaultName, options?: PatchSchedulesGetOptionalParams): Promise<PatchSchedulesGetResponse>;
    /**
     * ListByRedisResourceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param nextLink The nextLink from the previous successful call to the ListByRedisResource method.
     * @param options The options parameters.
     */
    private _listByRedisResourceNext;
}
//# sourceMappingURL=patchSchedules.d.ts.map