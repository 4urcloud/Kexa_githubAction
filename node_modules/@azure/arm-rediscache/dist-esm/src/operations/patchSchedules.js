/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing PatchSchedules operations. */
export class PatchSchedulesImpl {
    /**
     * Initialize a new instance of the class PatchSchedules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    listByRedisResource(resourceGroupName, cacheName, options) {
        const iter = this.listByRedisResourcePagingAll(resourceGroupName, cacheName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByRedisResourcePagingPage(resourceGroupName, cacheName, options, settings);
            }
        };
    }
    listByRedisResourcePagingPage(resourceGroupName, cacheName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByRedisResourcePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByRedisResource(resourceGroupName, cacheName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByRedisResourceNext(resourceGroupName, cacheName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByRedisResourcePagingAll(resourceGroupName, cacheName, options) {
        return __asyncGenerator(this, arguments, function* listByRedisResourcePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByRedisResourcePagingPage(resourceGroupName, cacheName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    _listByRedisResource(resourceGroupName, cacheName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, cacheName, options }, listByRedisResourceOperationSpec);
    }
    /**
     * Create or replace the patching schedule for Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param parameters Parameters to set the patching schedule for Redis cache.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, name, defaultParam, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, name, defaultParam, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes the patching schedule of a redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param options The options parameters.
     */
    delete(resourceGroupName, name, defaultParam, options) {
        return this.client.sendOperationRequest({ resourceGroupName, name, defaultParam, options }, deleteOperationSpec);
    }
    /**
     * Gets the patching schedule of a redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param options The options parameters.
     */
    get(resourceGroupName, name, defaultParam, options) {
        return this.client.sendOperationRequest({ resourceGroupName, name, defaultParam, options }, getOperationSpec);
    }
    /**
     * ListByRedisResourceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param nextLink The nextLink from the previous successful call to the ListByRedisResource method.
     * @param options The options parameters.
     */
    _listByRedisResourceNext(resourceGroupName, cacheName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, cacheName, nextLink, options }, listByRedisResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByRedisResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{cacheName}/patchSchedules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RedisPatchScheduleListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.cacheName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/patchSchedules/{default}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.RedisPatchSchedule
        },
        201: {
            bodyMapper: Mappers.RedisPatchSchedule
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters8,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.defaultParam
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/patchSchedules/{default}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.defaultParam
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/redis/{name}/patchSchedules/{default}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RedisPatchSchedule
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.defaultParam
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByRedisResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RedisPatchScheduleListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.cacheName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=patchSchedules.js.map