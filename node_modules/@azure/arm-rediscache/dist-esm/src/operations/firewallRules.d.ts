import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { FirewallRules } from "../operationsInterfaces";
import { RedisManagementClient } from "../redisManagementClient";
import { RedisFirewallRule, FirewallRulesListOptionalParams, FirewallRulesCreateOrUpdateOptionalParams, FirewallRulesCreateOrUpdateResponse, FirewallRulesGetOptionalParams, FirewallRulesGetResponse, FirewallRulesDeleteOptionalParams } from "../models";
/** Class containing FirewallRules operations. */
export declare class FirewallRulesImpl implements FirewallRules {
    private readonly client;
    /**
     * Initialize a new instance of the class FirewallRules class.
     * @param client Reference to the service client
     */
    constructor(client: RedisManagementClient);
    /**
     * Gets all firewall rules in the specified redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, cacheName: string, options?: FirewallRulesListOptionalParams): PagedAsyncIterableIterator<RedisFirewallRule>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all firewall rules in the specified redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Create or update a redis cache firewall rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param ruleName The name of the firewall rule.
     * @param parameters Parameters supplied to the create or update redis firewall rule operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: RedisFirewallRule, options?: FirewallRulesCreateOrUpdateOptionalParams): Promise<FirewallRulesCreateOrUpdateResponse>;
    /**
     * Gets a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param ruleName The name of the firewall rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, ruleName: string, options?: FirewallRulesGetOptionalParams): Promise<FirewallRulesGetResponse>;
    /**
     * Deletes a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param ruleName The name of the firewall rule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, cacheName: string, ruleName: string, options?: FirewallRulesDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=firewallRules.d.ts.map