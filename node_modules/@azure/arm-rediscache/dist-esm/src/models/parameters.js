/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CheckNameAvailabilityParameters as CheckNameAvailabilityParametersMapper, RedisCreateParameters as RedisCreateParametersMapper, RedisUpdateParameters as RedisUpdateParametersMapper, RedisRegenerateKeyParameters as RedisRegenerateKeyParametersMapper, RedisRebootParameters as RedisRebootParametersMapper, ImportRDBParameters as ImportRDBParametersMapper, ExportRDBParameters as ExportRDBParametersMapper, RedisFirewallRule as RedisFirewallRuleMapper, RedisPatchSchedule as RedisPatchScheduleMapper, RedisLinkedServerCreateParameters as RedisLinkedServerCreateParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, RedisCacheAccessPolicy as RedisCacheAccessPolicyMapper, RedisCacheAccessPolicyAssignment as RedisCacheAccessPolicyAssignmentMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityParametersMapper
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const history = {
    parameterPath: "history",
    mapper: {
        serializedName: "history",
        required: true,
        type: {
            name: "Number"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: RedisCreateParametersMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: RedisUpdateParametersMapper
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: RedisRegenerateKeyParametersMapper
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: RedisRebootParametersMapper
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: ImportRDBParametersMapper
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: ExportRDBParametersMapper
};
export const cacheName = {
    parameterPath: "cacheName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$")
        },
        serializedName: "cacheName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: RedisFirewallRuleMapper
};
export const ruleName = {
    parameterPath: "ruleName",
    mapper: {
        serializedName: "ruleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: RedisPatchScheduleMapper
};
export const defaultParam = {
    parameterPath: "defaultParam",
    mapper: {
        serializedName: "default",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: RedisLinkedServerCreateParametersMapper
};
export const linkedServerName = {
    parameterPath: "linkedServerName",
    mapper: {
        serializedName: "linkedServerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: RedisCacheAccessPolicyMapper
};
export const accessPolicyName = {
    parameterPath: "accessPolicyName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "accessPolicyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: RedisCacheAccessPolicyAssignmentMapper
};
export const accessPolicyAssignmentName = {
    parameterPath: "accessPolicyAssignmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]|[a-zA-Z0-9])$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "accessPolicyAssignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map