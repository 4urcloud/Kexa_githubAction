import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Operations, Redis, FirewallRules, PatchSchedules, LinkedServer, PrivateEndpointConnections, PrivateLinkResources, AsyncOperationStatus, AccessPolicy, AccessPolicyAssignment } from "./operationsInterfaces";
import { RedisManagementClientOptionalParams } from "./models";
export declare class RedisManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the RedisManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: RedisManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    redis: Redis;
    firewallRules: FirewallRules;
    patchSchedules: PatchSchedules;
    linkedServer: LinkedServer;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    asyncOperationStatus: AsyncOperationStatus;
    accessPolicy: AccessPolicy;
    accessPolicyAssignment: AccessPolicyAssignment;
}
//# sourceMappingURL=redisManagementClient.d.ts.map