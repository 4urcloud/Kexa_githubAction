/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, delay, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { RedisManagementClient } from "../src/redisManagementClient";
import { NetworkManagementClient } from "@azure/arm-network";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables,
    sanitizerOptions: {
        bodySanitizers: [{
                regex: true,
                value: `fakeKey`,
                target: `[a-z0-9_A-z=]{40,100}`
            }],
        uriSanitizers: [{
                regex: true,
                value: `fakeKey`,
                target: `[a-z0-9_A-z=]{40,100}`
            }]
    }
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Redis test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let network_client;
    let location;
    let resourceGroupName;
    let networkName;
    let subnetName;
    let name;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || "";
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new RedisManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            network_client = new NetworkManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroupName = "myjstest";
            networkName = "networknamex";
            subnetName = "subnetworknamex";
            name = "myrediscachexxx111";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    function createVirtualNetwork(groupName, location, networkName, subnetName) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameter = {
                location: location,
                addressSpace: {
                    addressPrefixes: ["10.0.0.0/16"],
                },
            };
            //network create
            const network_create = yield network_client.virtualNetworks.beginCreateOrUpdateAndWait(groupName, networkName, parameter, testPollingOptions);
            //subnet create
            const subnet_info = yield network_client.subnets.beginCreateOrUpdateAndWait(groupName, networkName, subnetName, { addressPrefix: "10.0.0.0/24" }, testPollingOptions);
        });
    }
    it("Redis create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            //create network resource
            yield createVirtualNetwork(resourceGroupName, location, networkName, subnetName);
            const res = yield client.redis.beginCreateAndWait(resourceGroupName, name, {
                location: location,
                zones: [
                    "1"
                ],
                sku: {
                    name: "Premium",
                    family: "P",
                    capacity: 1
                },
                enableNonSslPort: true,
                shardCount: 2,
                redisConfiguration: {
                    maxmemoryPolicy: "allkeys-lru"
                },
                subnetId: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroupName + "/providers/Microsoft.Network/virtualNetworks/" + networkName + "/subnets/" + subnetName,
                staticIP: "10.0.0.5",
                minimumTlsVersion: "1.2"
            }, testPollingOptions);
            assert.equal(res.name, name);
        });
    });
    it("redis get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.redis.get(resourceGroupName, name);
            assert.equal(res.name, name);
        });
    });
    it("patchSchedules create for redis test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.patchSchedules.createOrUpdate(resourceGroupName, name, "default", {
                scheduleEntries: [
                    {
                        dayOfWeek: "Monday",
                        startHourUtc: 12,
                        maintenanceWindow: "PT5H"
                    },
                    {
                        dayOfWeek: "Tuesday",
                        startHourUtc: 12
                    }
                ]
            });
            assert.equal(res.type, "Microsoft.Cache/Redis/PatchSchedules");
        });
    });
    it("patchSchedules listByRedisResource for redis test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.patchSchedules.listByRedisResource(resourceGroupName, name)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("redis listByResourceGroup test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.redis.listByResourceGroup(resourceGroupName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("redis update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            let count = 0;
            while (count < 20) {
                count++;
                const res = yield client.redis.get(resourceGroupName, name);
                if (res.provisioningState == "Succeeded") {
                    const res = yield client.redis.beginUpdateAndWait(resourceGroupName, name, { enableNonSslPort: true });
                    assert.equal(res.enableNonSslPort, true);
                    break;
                }
                else {
                    // The resource is activating
                    yield delay(300000);
                }
            }
        });
    }).timeout(3600000);
    it("patchSchedules delete for redis test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.patchSchedules.delete(resourceGroupName, name, "default");
            // It's can not run patchSchedules.listByRedisResource after patchSchedules.delete operation
        });
    });
    it("redis delete test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.redis.beginDeleteAndWait(resourceGroupName, name, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.redis.listByResourceGroup(resourceGroupName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=redis_examples.js.map