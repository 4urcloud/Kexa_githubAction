import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Interface representing a AccessPolicy. */
export declare interface AccessPolicy {
    /**
     * Gets the list of access policies associated with this redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, cacheName: string, options?: AccessPolicyListOptionalParams): PagedAsyncIterableIterator<RedisCacheAccessPolicy>;
    /**
     * Adds an access policy to the redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Update Access Policy operation.
     * @param options The options parameters.
     */
    beginCreateUpdate(resourceGroupName: string, cacheName: string, accessPolicyName: string, parameters: RedisCacheAccessPolicy, options?: AccessPolicyCreateUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AccessPolicyCreateUpdateResponse>, AccessPolicyCreateUpdateResponse>>;
    /**
     * Adds an access policy to the redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Update Access Policy operation.
     * @param options The options parameters.
     */
    beginCreateUpdateAndWait(resourceGroupName: string, cacheName: string, accessPolicyName: string, parameters: RedisCacheAccessPolicy, options?: AccessPolicyCreateUpdateOptionalParams): Promise<AccessPolicyCreateUpdateResponse>;
    /**
     * Deletes the access policy from a redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cacheName: string, accessPolicyName: string, options?: AccessPolicyDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the access policy from a redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cacheName: string, accessPolicyName: string, options?: AccessPolicyDeleteOptionalParams): Promise<void>;
    /**
     * Gets the detailed information about an access policy of a redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyName The name of the access policy that is being added to the Redis cache.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, accessPolicyName: string, options?: AccessPolicyGetOptionalParams): Promise<AccessPolicyGetResponse>;
}

/** Interface representing a AccessPolicyAssignment. */
export declare interface AccessPolicyAssignment {
    /**
     * Gets the list of access policy assignments associated with this redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, cacheName: string, options?: AccessPolicyAssignmentListOptionalParams): PagedAsyncIterableIterator<RedisCacheAccessPolicyAssignment>;
    /**
     * Adds the access policy assignment to the specified users
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyAssignmentName The name of the access policy assignment.
     * @param parameters Parameters supplied to the Create Update Access Policy Assignment operation.
     * @param options The options parameters.
     */
    beginCreateUpdate(resourceGroupName: string, cacheName: string, accessPolicyAssignmentName: string, parameters: RedisCacheAccessPolicyAssignment, options?: AccessPolicyAssignmentCreateUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AccessPolicyAssignmentCreateUpdateResponse>, AccessPolicyAssignmentCreateUpdateResponse>>;
    /**
     * Adds the access policy assignment to the specified users
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyAssignmentName The name of the access policy assignment.
     * @param parameters Parameters supplied to the Create Update Access Policy Assignment operation.
     * @param options The options parameters.
     */
    beginCreateUpdateAndWait(resourceGroupName: string, cacheName: string, accessPolicyAssignmentName: string, parameters: RedisCacheAccessPolicyAssignment, options?: AccessPolicyAssignmentCreateUpdateOptionalParams): Promise<AccessPolicyAssignmentCreateUpdateResponse>;
    /**
     * Deletes the access policy assignment from a redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyAssignmentName The name of the access policy assignment.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cacheName: string, accessPolicyAssignmentName: string, options?: AccessPolicyAssignmentDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the access policy assignment from a redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyAssignmentName The name of the access policy assignment.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cacheName: string, accessPolicyAssignmentName: string, options?: AccessPolicyAssignmentDeleteOptionalParams): Promise<void>;
    /**
     * Gets the list of assignments for an access policy of a redis cache
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param accessPolicyAssignmentName The name of the access policy assignment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, accessPolicyAssignmentName: string, options?: AccessPolicyAssignmentGetOptionalParams): Promise<AccessPolicyAssignmentGetResponse>;
}

/** Optional parameters. */
export declare interface AccessPolicyAssignmentCreateUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdate operation. */
export declare type AccessPolicyAssignmentCreateUpdateResponse = RedisCacheAccessPolicyAssignment;

/** Defines headers for AccessPolicyAssignment_delete operation. */
export declare interface AccessPolicyAssignmentDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface AccessPolicyAssignmentDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AccessPolicyAssignmentGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AccessPolicyAssignmentGetResponse = RedisCacheAccessPolicyAssignment;

/** Optional parameters. */
export declare interface AccessPolicyAssignmentListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AccessPolicyAssignmentListNextResponse = RedisCacheAccessPolicyAssignmentList;

/** Optional parameters. */
export declare interface AccessPolicyAssignmentListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AccessPolicyAssignmentListResponse = RedisCacheAccessPolicyAssignmentList;

/**
 * Defines values for AccessPolicyAssignmentProvisioningState. \
 * {@link KnownAccessPolicyAssignmentProvisioningState} can be used interchangeably with AccessPolicyAssignmentProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Updating** \
 * **Succeeded** \
 * **Deleting** \
 * **Deleted** \
 * **Canceled** \
 * **Failed**
 */
export declare type AccessPolicyAssignmentProvisioningState = string;

/** Optional parameters. */
export declare interface AccessPolicyCreateUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdate operation. */
export declare type AccessPolicyCreateUpdateResponse = RedisCacheAccessPolicy;

/** Defines headers for AccessPolicy_delete operation. */
export declare interface AccessPolicyDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface AccessPolicyDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AccessPolicyGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AccessPolicyGetResponse = RedisCacheAccessPolicy;

/** Optional parameters. */
export declare interface AccessPolicyListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AccessPolicyListNextResponse = RedisCacheAccessPolicyList;

/** Optional parameters. */
export declare interface AccessPolicyListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AccessPolicyListResponse = RedisCacheAccessPolicyList;

/**
 * Defines values for AccessPolicyProvisioningState. \
 * {@link KnownAccessPolicyProvisioningState} can be used interchangeably with AccessPolicyProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Updating** \
 * **Succeeded** \
 * **Deleting** \
 * **Deleted** \
 * **Canceled** \
 * **Failed**
 */
export declare type AccessPolicyProvisioningState = string;

/**
 * Defines values for AccessPolicyType. \
 * {@link KnownAccessPolicyType} can be used interchangeably with AccessPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Custom** \
 * **BuiltIn**
 */
export declare type AccessPolicyType = string;

/** Interface representing a AsyncOperationStatus. */
export declare interface AsyncOperationStatus {
    /**
     * For checking the ongoing status of an operation
     * @param location The location at which operation was triggered
     * @param operationId The ID of asynchronous operation
     * @param options The options parameters.
     */
    get(location: string, operationId: string, options?: AsyncOperationStatusGetOptionalParams): Promise<AsyncOperationStatusGetResponse>;
}

/** Optional parameters. */
export declare interface AsyncOperationStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AsyncOperationStatusGetResponse = OperationStatus;

/** Parameters body to pass for resource name availability check. */
export declare interface CheckNameAvailabilityParameters {
    /** Resource name. */
    name: string;
    /** Resource type. The only legal value of this property for checking redis cache name availability is 'Microsoft.Cache/redis'. */
    type: string;
}

/** Defines values for DayOfWeek. */
export declare type DayOfWeek = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday" | "Everyday" | "Weekend";

/**
 * Defines values for DefaultName. \
 * {@link KnownDefaultName} can be used interchangeably with DefaultName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type DefaultName = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Parameters for Redis export operation. */
export declare interface ExportRDBParameters {
    /** File format. */
    format?: string;
    /** Prefix to use for exported files. */
    prefix: string;
    /** Container name to export to. */
    container: string;
    /** Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS */
    preferredDataArchiveAuthMethod?: string;
    /** Subscription id of the storage container for data to be exported using ManagedIdentity. */
    storageSubscriptionId?: string;
}

/** Interface representing a FirewallRules. */
export declare interface FirewallRules {
    /**
     * Gets all firewall rules in the specified redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, cacheName: string, options?: FirewallRulesListOptionalParams): PagedAsyncIterableIterator<RedisFirewallRule>;
    /**
     * Create or update a redis cache firewall rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param ruleName The name of the firewall rule.
     * @param parameters Parameters supplied to the create or update redis firewall rule operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, cacheName: string, ruleName: string, parameters: RedisFirewallRule, options?: FirewallRulesCreateOrUpdateOptionalParams): Promise<FirewallRulesCreateOrUpdateResponse>;
    /**
     * Gets a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param ruleName The name of the firewall rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, ruleName: string, options?: FirewallRulesGetOptionalParams): Promise<FirewallRulesGetResponse>;
    /**
     * Deletes a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param ruleName The name of the firewall rule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, cacheName: string, ruleName: string, options?: FirewallRulesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface FirewallRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type FirewallRulesCreateOrUpdateResponse = RedisFirewallRule;

/** Optional parameters. */
export declare interface FirewallRulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface FirewallRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FirewallRulesGetResponse = RedisFirewallRule;

/** Optional parameters. */
export declare interface FirewallRulesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type FirewallRulesListNextResponse = RedisFirewallRuleListResult;

/** Optional parameters. */
export declare interface FirewallRulesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type FirewallRulesListResponse = RedisFirewallRuleListResult;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Parameters for Redis import operation. */
export declare interface ImportRDBParameters {
    /** File format. */
    format?: string;
    /** files to import. */
    files: string[];
    /** Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS */
    preferredDataArchiveAuthMethod?: string;
    /** Subscription id of the storage container containing files to import using Managed Identity. */
    storageSubscriptionId?: string;
}

/** Known values of {@link AccessPolicyAssignmentProvisioningState} that the service accepts. */
export declare enum KnownAccessPolicyAssignmentProvisioningState {
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link AccessPolicyProvisioningState} that the service accepts. */
export declare enum KnownAccessPolicyProvisioningState {
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link AccessPolicyType} that the service accepts. */
export declare enum KnownAccessPolicyType {
    /** Custom */
    Custom = "Custom",
    /** BuiltIn */
    BuiltIn = "BuiltIn"
}

/** Known values of {@link DefaultName} that the service accepts. */
export declare enum KnownDefaultName {
    /** Default */
    Default = "default"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Disabled */
    Disabled = "Disabled",
    /** Failed */
    Failed = "Failed",
    /** Linking */
    Linking = "Linking",
    /** Provisioning */
    Provisioning = "Provisioning",
    /** RecoveringScaleFailure */
    RecoveringScaleFailure = "RecoveringScaleFailure",
    /** Scaling */
    Scaling = "Scaling",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Unlinking */
    Unlinking = "Unlinking",
    /** Unprovisioning */
    Unprovisioning = "Unprovisioning",
    /** Updating */
    Updating = "Updating",
    /** ConfiguringAAD */
    ConfiguringAAD = "ConfiguringAAD"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link RebootType} that the service accepts. */
export declare enum KnownRebootType {
    /** PrimaryNode */
    PrimaryNode = "PrimaryNode",
    /** SecondaryNode */
    SecondaryNode = "SecondaryNode",
    /** AllNodes */
    AllNodes = "AllNodes"
}

/** Known values of {@link SkuFamily} that the service accepts. */
export declare enum KnownSkuFamily {
    /** C */
    C = "C",
    /** P */
    P = "P"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    /** Basic */
    Basic = "Basic",
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium"
}

/** Known values of {@link TlsVersion} that the service accepts. */
export declare enum KnownTlsVersion {
    /** One0 */
    One0 = "1.0",
    /** One1 */
    One1 = "1.1",
    /** One2 */
    One2 = "1.2"
}

/** Known values of {@link UpdateChannel} that the service accepts. */
export declare enum KnownUpdateChannel {
    /** Stable */
    Stable = "Stable",
    /** Preview */
    Preview = "Preview"
}

/** Interface representing a LinkedServer. */
export declare interface LinkedServer {
    /**
     * Gets the list of linked servers associated with this redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, name: string, options?: LinkedServerListOptionalParams): PagedAsyncIterableIterator<RedisLinkedServerWithProperties>;
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, name: string, linkedServerName: string, parameters: RedisLinkedServerCreateParameters, options?: LinkedServerCreateOptionalParams): Promise<SimplePollerLike<OperationState<LinkedServerCreateResponse>, LinkedServerCreateResponse>>;
    /**
     * Adds a linked server to the Redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param parameters Parameters supplied to the Create Linked server operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, name: string, linkedServerName: string, parameters: RedisLinkedServerCreateParameters, options?: LinkedServerCreateOptionalParams): Promise<LinkedServerCreateResponse>;
    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, name: string, linkedServerName: string, options?: LinkedServerDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the linked server from a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server that is being added to the Redis cache.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, name: string, linkedServerName: string, options?: LinkedServerDeleteOptionalParams): Promise<void>;
    /**
     * Gets the detailed information about a linked server of a redis cache (requires Premium SKU).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param linkedServerName The name of the linked server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, linkedServerName: string, options?: LinkedServerGetOptionalParams): Promise<LinkedServerGetResponse>;
}

/** Optional parameters. */
export declare interface LinkedServerCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type LinkedServerCreateResponse = RedisLinkedServerWithProperties;

/** Defines headers for LinkedServer_delete operation. */
export declare interface LinkedServerDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface LinkedServerDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LinkedServerGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LinkedServerGetResponse = RedisLinkedServerWithProperties;

/** Optional parameters. */
export declare interface LinkedServerListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type LinkedServerListNextResponse = RedisLinkedServerWithPropertiesList;

/** Optional parameters. */
export declare interface LinkedServerListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LinkedServerListResponse = RedisLinkedServerWithPropertiesList;

/** Managed service identity (system assigned and/or user assigned identities) */
export declare interface ManagedServiceIdentity {
    /**
     * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
    type: ManagedServiceIdentityType;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export declare type ManagedServiceIdentityType = string;

/** The response of listUpgradeNotifications. */
export declare interface NotificationListResponse {
    /** List of all notifications. */
    value?: UpgradeNotification[];
    /**
     * Link for next set of notifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** REST API operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that describes the operation. */
    display?: OperationDisplay;
}

/** The object that describes the operation. */
export declare interface OperationDisplay {
    /** Friendly name of the resource provider */
    provider?: string;
    /** Operation type: read, write, delete, listKeys/action, etc. */
    operation?: string;
    /** Resource type on which the operation is performed. */
    resource?: string;
    /** Friendly name of the operation */
    description?: string;
}

/** Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results. */
export declare interface OperationListResult {
    /** List of operations supported by the resource provider. */
    value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available REST API operations of the Microsoft.Cache provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Asynchronous operation status */
export declare interface OperationStatus extends OperationStatusResult {
    /** Additional properties from RP, only when operation is successful */
    properties?: {
        [propertyName: string]: any;
    };
}

/** The current status of an async operation. */
export declare interface OperationStatusResult {
    /** Fully qualified ID for the async operation. */
    id?: string;
    /** Name of the async operation. */
    name?: string;
    /** Operation status. */
    status: string;
    /** Percent of the operation that is complete. */
    percentComplete?: number;
    /** The start time of the operation. */
    startTime?: Date;
    /** The end time of the operation. */
    endTime?: Date;
    /** The operations list. */
    operations?: OperationStatusResult[];
    /** If present, details of the operation error. */
    error?: ErrorDetail;
}

/** Interface representing a PatchSchedules. */
export declare interface PatchSchedules {
    /**
     * Gets all patch schedules in the specified redis cache (there is only one).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    listByRedisResource(resourceGroupName: string, cacheName: string, options?: PatchSchedulesListByRedisResourceOptionalParams): PagedAsyncIterableIterator<RedisPatchSchedule>;
    /**
     * Create or replace the patching schedule for Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param parameters Parameters to set the patching schedule for Redis cache.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, name: string, defaultParam: DefaultName, parameters: RedisPatchSchedule, options?: PatchSchedulesCreateOrUpdateOptionalParams): Promise<PatchSchedulesCreateOrUpdateResponse>;
    /**
     * Deletes the patching schedule of a redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, name: string, defaultParam: DefaultName, options?: PatchSchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Gets the patching schedule of a redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the redis cache.
     * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, defaultParam: DefaultName, options?: PatchSchedulesGetOptionalParams): Promise<PatchSchedulesGetResponse>;
}

/** Optional parameters. */
export declare interface PatchSchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PatchSchedulesCreateOrUpdateResponse = RedisPatchSchedule;

/** Optional parameters. */
export declare interface PatchSchedulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PatchSchedulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PatchSchedulesGetResponse = RedisPatchSchedule;

/** Optional parameters. */
export declare interface PatchSchedulesListByRedisResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByRedisResourceNext operation. */
export declare type PatchSchedulesListByRedisResourceNextResponse = RedisPatchScheduleListResult;

/** Optional parameters. */
export declare interface PatchSchedulesListByRedisResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByRedisResource operation. */
export declare type PatchSchedulesListByRedisResourceResponse = RedisPatchScheduleListResult;

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List all the private endpoint connections associated with the redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, cacheName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets the specified private endpoint connection associated with the redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cacheName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of specified private endpoint connection associated with the redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginPut(resourceGroupName: string, cacheName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsPutOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionsPutResponse>, PrivateEndpointConnectionsPutResponse>>;
    /**
     * Update the state of specified private endpoint connection associated with the redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginPutAndWait(resourceGroupName: string, cacheName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsPutOptionalParams): Promise<PrivateEndpointConnectionsPutResponse>;
    /**
     * Deletes the specified private endpoint connection associated with the redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, cacheName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsPutOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the put operation. */
export declare type PrivateEndpointConnectionsPutResponse = PrivateEndpointConnection;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends Resource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    listByRedisCache(resourceGroupName: string, cacheName: string, options?: PrivateLinkResourcesListByRedisCacheOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByRedisCacheOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByRedisCache operation. */
export declare type PrivateLinkResourcesListByRedisCacheResponse = PrivateLinkResourceListResult;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Deleting** \
 * **Disabled** \
 * **Failed** \
 * **Linking** \
 * **Provisioning** \
 * **RecoveringScaleFailure** \
 * **Scaling** \
 * **Succeeded** \
 * **Unlinking** \
 * **Unprovisioning** \
 * **Updating** \
 * **ConfiguringAAD**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/**
 * Defines values for RebootType. \
 * {@link KnownRebootType} can be used interchangeably with RebootType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PrimaryNode** \
 * **SecondaryNode** \
 * **AllNodes**
 */
export declare type RebootType = string;

/** Interface representing a Redis. */
export declare interface Redis {
    /**
     * Gets any upgrade notifications for a Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param history how many minutes in past to look for upgrade notifications
     * @param options The options parameters.
     */
    listUpgradeNotifications(resourceGroupName: string, name: string, history: number, options?: RedisListUpgradeNotificationsOptionalParams): PagedAsyncIterableIterator<UpgradeNotification>;
    /**
     * Lists all Redis caches in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: RedisListByResourceGroupOptionalParams): PagedAsyncIterableIterator<RedisResource>;
    /**
     * Gets all Redis caches in the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: RedisListBySubscriptionOptionalParams): PagedAsyncIterableIterator<RedisResource>;
    /**
     * Checks that the redis cache name is valid and is not already in use.
     * @param parameters Parameters supplied to the CheckNameAvailability Redis operation. The only
     *                   supported resource type is 'Microsoft.Cache/redis'
     * @param options The options parameters.
     */
    checkNameAvailability(parameters: CheckNameAvailabilityParameters, options?: RedisCheckNameAvailabilityOptionalParams): Promise<void>;
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, name: string, parameters: RedisCreateParameters, options?: RedisCreateOptionalParams): Promise<SimplePollerLike<OperationState<RedisCreateResponse>, RedisCreateResponse>>;
    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Create Redis operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, name: string, parameters: RedisCreateParameters, options?: RedisCreateOptionalParams): Promise<RedisCreateResponse>;
    /**
     * Update an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Update Redis operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, name: string, parameters: RedisUpdateParameters, options?: RedisUpdateOptionalParams): Promise<SimplePollerLike<OperationState<RedisUpdateResponse>, RedisUpdateResponse>>;
    /**
     * Update an existing Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters supplied to the Update Redis operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, name: string, parameters: RedisUpdateParameters, options?: RedisUpdateOptionalParams): Promise<RedisUpdateResponse>;
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, name: string, options?: RedisDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, name: string, options?: RedisDeleteOptionalParams): Promise<void>;
    /**
     * Gets a Redis cache (resource description).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, options?: RedisGetOptionalParams): Promise<RedisGetResponse>;
    /**
     * Retrieve a Redis cache's access keys. This operation requires write permission to the cache
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, name: string, options?: RedisListKeysOptionalParams): Promise<RedisListKeysResponse>;
    /**
     * Regenerate Redis cache's access keys. This operation requires write permission to the cache
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Specifies which key to regenerate.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, name: string, parameters: RedisRegenerateKeyParameters, options?: RedisRegenerateKeyOptionalParams): Promise<RedisRegenerateKeyResponse>;
    /**
     * Reboot specified Redis node(s). This operation requires write permission to the cache resource.
     * There can be potential data loss.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Specifies which Redis node(s) to reboot.
     * @param options The options parameters.
     */
    forceReboot(resourceGroupName: string, name: string, parameters: RedisRebootParameters, options?: RedisForceRebootOptionalParams): Promise<RedisForceRebootOperationResponse>;
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param options The options parameters.
     */
    beginImportData(resourceGroupName: string, name: string, parameters: ImportRDBParameters, options?: RedisImportDataOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Import data into Redis cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis import operation.
     * @param options The options parameters.
     */
    beginImportDataAndWait(resourceGroupName: string, name: string, parameters: ImportRDBParameters, options?: RedisImportDataOptionalParams): Promise<void>;
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param options The options parameters.
     */
    beginExportData(resourceGroupName: string, name: string, parameters: ExportRDBParameters, options?: RedisExportDataOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Export data from the redis cache to blobs in a container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param name The name of the Redis cache.
     * @param parameters Parameters for Redis export operation.
     * @param options The options parameters.
     */
    beginExportDataAndWait(resourceGroupName: string, name: string, parameters: ExportRDBParameters, options?: RedisExportDataOptionalParams): Promise<void>;
    /**
     * Deletes all of the keys in a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    beginFlushCache(resourceGroupName: string, cacheName: string, options?: RedisFlushCacheOptionalParams): Promise<SimplePollerLike<OperationState<RedisFlushCacheResponse>, RedisFlushCacheResponse>>;
    /**
     * Deletes all of the keys in a cache.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param cacheName The name of the Redis cache.
     * @param options The options parameters.
     */
    beginFlushCacheAndWait(resourceGroupName: string, cacheName: string, options?: RedisFlushCacheOptionalParams): Promise<RedisFlushCacheResponse>;
}

/** Redis cache access keys. */
export declare interface RedisAccessKeys {
    /**
     * The current primary key that clients can use to authenticate with Redis cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryKey?: string;
    /**
     * The current secondary key that clients can use to authenticate with Redis cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryKey?: string;
}

/** Response to get/put access policy. */
export declare interface RedisCacheAccessPolicy extends ProxyResource {
    /**
     * Provisioning state of access policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: AccessPolicyProvisioningState;
    /**
     * Built-In or Custom access policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly typePropertiesType?: AccessPolicyType;
    /** Permissions for the access policy. Learn how to configure permissions at https://aka.ms/redis/AADPreRequisites */
    permissions?: string;
}

/** Response to an operation on access policy assignment */
export declare interface RedisCacheAccessPolicyAssignment extends ProxyResource {
    /**
     * Provisioning state of an access policy assignment set
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: AccessPolicyAssignmentProvisioningState;
    /** Object Id to assign access policy to */
    objectId?: string;
    /** User friendly name for object id. Also represents username for token based authentication */
    objectIdAlias?: string;
    /** The name of the access policy that is being assigned */
    accessPolicyName?: string;
}

/** List of access policies assignments (with properties) of a Redis cache. */
export declare interface RedisCacheAccessPolicyAssignmentList {
    /** List of access policies assignments (with properties) of a Redis cache. */
    value?: RedisCacheAccessPolicyAssignment[];
    /**
     * Link for next set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** List of access policies (with properties) of a Redis cache. */
export declare interface RedisCacheAccessPolicyList {
    /** List of access policies (with properties) of a Redis cache. */
    value?: RedisCacheAccessPolicy[];
    /**
     * Link for next set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface RedisCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Create/Update/Get common properties of the redis cache. */
export declare interface RedisCommonProperties {
    /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
    redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
    /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
    redisVersion?: string;
    /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
    enableNonSslPort?: boolean;
    /** The number of replicas to be created per primary. */
    replicasPerMaster?: number;
    /** The number of replicas to be created per primary. */
    replicasPerPrimary?: number;
    /** A dictionary of tenant settings */
    tenantSettings?: {
        [propertyName: string]: string;
    };
    /** The number of shards to be created on a Premium Cluster Cache. */
    shardCount?: number;
    /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
    minimumTlsVersion?: TlsVersion;
    /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'. */
    updateChannel?: UpdateChannel;
}

/** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
export declare interface RedisCommonPropertiesRedisConfiguration {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Specifies whether the rdb backup is enabled */
    rdbBackupEnabled?: string;
    /** Specifies the frequency for creating rdb backup in minutes. Valid values: (15, 30, 60, 360, 720, 1440) */
    rdbBackupFrequency?: string;
    /** Specifies the maximum number of snapshots for rdb backup */
    rdbBackupMaxSnapshotCount?: string;
    /** The storage account connection string for storing rdb file */
    rdbStorageConnectionString?: string;
    /** Specifies whether the aof backup is enabled */
    aofBackupEnabled?: string;
    /** First storage account connection string */
    aofStorageConnectionString0?: string;
    /** Second storage account connection string */
    aofStorageConnectionString1?: string;
    /** Value in megabytes reserved for fragmentation per shard */
    maxfragmentationmemoryReserved?: string;
    /** The eviction strategy used when your data won't fit within its memory limit. */
    maxmemoryPolicy?: string;
    /** Value in megabytes reserved for non-cache usage per shard e.g. failover. */
    maxmemoryReserved?: string;
    /** Value in megabytes reserved for non-cache usage per shard e.g. failover. */
    maxmemoryDelta?: string;
    /**
     * The max clients config
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxclients?: string;
    /**
     * Preferred auth method to communicate to storage account used for data archive, specify SAS or ManagedIdentity, default value is SAS
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly preferredDataArchiveAuthMethod?: string;
    /** Preferred auth method to communicate to storage account used for data persistence, specify SAS or ManagedIdentity, default value is SAS */
    preferredDataPersistenceAuthMethod?: string;
    /**
     * Zonal Configuration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zonalConfiguration?: string;
    /** Specifies whether the authentication is disabled. Setting this property is highly discouraged from security point of view. */
    authnotrequired?: string;
    /** SubscriptionId of the storage account for persistence (aof/rdb) using ManagedIdentity. */
    storageSubscriptionId?: string;
    /** Specifies whether AAD based authentication has been enabled or disabled for the cache */
    aadEnabled?: string;
}

/** Optional parameters. */
export declare interface RedisCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Parameters supplied to the Create Redis operation. */
export declare interface RedisCreateParameters {
    /** A list of availability zones denoting where the resource needs to come from. */
    zones?: string[];
    /** The geo-location where the resource lives */
    location: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
    redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
    /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
    redisVersion?: string;
    /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
    enableNonSslPort?: boolean;
    /** The number of replicas to be created per primary. */
    replicasPerMaster?: number;
    /** The number of replicas to be created per primary. */
    replicasPerPrimary?: number;
    /** A dictionary of tenant settings */
    tenantSettings?: {
        [propertyName: string]: string;
    };
    /** The number of shards to be created on a Premium Cluster Cache. */
    shardCount?: number;
    /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
    minimumTlsVersion?: TlsVersion;
    /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'. */
    updateChannel?: UpdateChannel;
    /** The SKU of the Redis cache to deploy. */
    sku: Sku;
    /** The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1 */
    subnetId?: string;
    /** Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default. */
    staticIP?: string;
}

/** Properties supplied to Create Redis operation. */
export declare interface RedisCreateProperties extends RedisCommonProperties {
    /** The SKU of the Redis cache to deploy. */
    sku: Sku;
    /** The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1 */
    subnetId?: string;
    /** Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default. */
    staticIP?: string;
}

/** Contains response data for the create operation. */
export declare type RedisCreateResponse = RedisResource;

/** Optional parameters. */
export declare interface RedisDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RedisExportDataOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** A firewall rule on a redis cache has a name, and describes a contiguous range of IP addresses permitted to connect */
export declare interface RedisFirewallRule extends ProxyResource {
    /** lowest IP address included in the range */
    startIP: string;
    /** highest IP address included in the range */
    endIP: string;
}

/** Parameters required for creating a firewall rule on redis cache. (Note, you can just use the FirewallRule type instead now.) */
export declare interface RedisFirewallRuleCreateParameters extends RedisFirewallRule {
}

/** The response of list firewall rules Redis operation. */
export declare interface RedisFirewallRuleListResult {
    /** Results of the list firewall rules operation. */
    value?: RedisFirewallRule[];
    /**
     * Link for next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines headers for Redis_flushCache operation. */
export declare interface RedisFlushCacheHeaders {
    /** URL to query for the status of the operation. */
    location?: string;
    /** URL to query for the status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface RedisFlushCacheOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the flushCache operation. */
export declare type RedisFlushCacheResponse = RedisFlushCacheHeaders & OperationStatusResult;

/** Contains response data for the forceReboot operation. */
export declare type RedisForceRebootOperationResponse = RedisForceRebootResponse;

/** Optional parameters. */
export declare interface RedisForceRebootOptionalParams extends coreClient.OperationOptions {
}

/** Response to force reboot for Redis cache. */
export declare interface RedisForceRebootResponse {
    /**
     * Status message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Optional parameters. */
export declare interface RedisGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RedisGetResponse = RedisResource;

/** Optional parameters. */
export declare interface RedisImportDataOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Details of single instance of redis. */
export declare interface RedisInstanceDetails {
    /**
     * Redis instance SSL port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sslPort?: number;
    /**
     * If enableNonSslPort is true, provides Redis instance Non-SSL port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nonSslPort?: number;
    /**
     * If the Cache uses availability zones, specifies availability zone where this instance is located.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zone?: string;
    /**
     * If clustering is enabled, the Shard ID of Redis Instance
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly shardId?: number;
    /**
     * Specifies whether the instance is a primary node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isMaster?: boolean;
    /**
     * Specifies whether the instance is a primary node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isPrimary?: boolean;
}

/** Defines values for RedisKeyType. */
export declare type RedisKeyType = "Primary" | "Secondary";

/** Linked server Id */
export declare interface RedisLinkedServer {
    /**
     * Linked server Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** Parameter required for creating a linked server to redis cache. */
export declare interface RedisLinkedServerCreateParameters {
    /** Fully qualified resourceId of the linked redis cache. */
    linkedRedisCacheId: string;
    /** Location of the linked redis cache. */
    linkedRedisCacheLocation: string;
    /** Role of the linked server. */
    serverRole: ReplicationRole;
    /**
     * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly geoReplicatedPrimaryHostName?: string;
    /**
     * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryHostName?: string;
}

/** Create properties for a linked server */
export declare interface RedisLinkedServerCreateProperties {
    /** Fully qualified resourceId of the linked redis cache. */
    linkedRedisCacheId: string;
    /** Location of the linked redis cache. */
    linkedRedisCacheLocation: string;
    /** Role of the linked server. */
    serverRole: ReplicationRole;
    /**
     * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly geoReplicatedPrimaryHostName?: string;
    /**
     * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryHostName?: string;
}

/** Properties of a linked server to be returned in get/put response */
export declare interface RedisLinkedServerProperties extends RedisLinkedServerCreateProperties {
    /**
     * Terminal state of the link between primary and secondary redis cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** Response to put/get linked server (with properties) for Redis cache. */
export declare interface RedisLinkedServerWithProperties extends ProxyResource {
    /** Fully qualified resourceId of the linked redis cache. */
    linkedRedisCacheId?: string;
    /** Location of the linked redis cache. */
    linkedRedisCacheLocation?: string;
    /** Role of the linked server. */
    serverRole?: ReplicationRole;
    /**
     * The unchanging DNS name which will always point to current geo-primary cache among the linked redis caches for seamless Geo Failover experience.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly geoReplicatedPrimaryHostName?: string;
    /**
     * The changing DNS name that resolves to the current geo-primary cache among the linked redis caches before or after the Geo Failover.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryHostName?: string;
    /**
     * Terminal state of the link between primary and secondary redis cache.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** List of linked servers (with properties) of a Redis cache. */
export declare interface RedisLinkedServerWithPropertiesList {
    /** List of linked servers (with properties) of a Redis cache. */
    value?: RedisLinkedServerWithProperties[];
    /**
     * Link for next set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface RedisListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type RedisListByResourceGroupNextResponse = RedisListResult;

/** Optional parameters. */
export declare interface RedisListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type RedisListByResourceGroupResponse = RedisListResult;

/** Optional parameters. */
export declare interface RedisListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type RedisListBySubscriptionNextResponse = RedisListResult;

/** Optional parameters. */
export declare interface RedisListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type RedisListBySubscriptionResponse = RedisListResult;

/** Optional parameters. */
export declare interface RedisListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type RedisListKeysResponse = RedisAccessKeys;

/** The response of list Redis operation. */
export declare interface RedisListResult {
    /** List of Redis cache instances. */
    value?: RedisResource[];
    /**
     * Link for next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface RedisListUpgradeNotificationsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listUpgradeNotificationsNext operation. */
export declare type RedisListUpgradeNotificationsNextResponse = NotificationListResponse;

/** Optional parameters. */
export declare interface RedisListUpgradeNotificationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listUpgradeNotifications operation. */
export declare type RedisListUpgradeNotificationsResponse = NotificationListResponse;

export declare class RedisManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the RedisManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: RedisManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    redis: Redis;
    firewallRules: FirewallRules;
    patchSchedules: PatchSchedules;
    linkedServer: LinkedServer;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    asyncOperationStatus: AsyncOperationStatus;
    accessPolicy: AccessPolicy;
    accessPolicyAssignment: AccessPolicyAssignment;
}

/** Optional parameters. */
export declare interface RedisManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Response to put/get patch schedules for Redis cache. */
export declare interface RedisPatchSchedule extends ProxyResource {
    /**
     * The geo-location where the resource lives
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** List of patch schedules for a Redis cache. */
    scheduleEntries: ScheduleEntry[];
}

/** The response of list patch schedules Redis operation. */
export declare interface RedisPatchScheduleListResult {
    /** Results of the list patch schedules operation. */
    value?: RedisPatchSchedule[];
    /**
     * Link for next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Properties of the redis cache. */
export declare interface RedisProperties extends RedisCreateProperties {
    /**
     * Redis instance provisioning status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Redis host name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /**
     * Redis non-SSL port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly port?: number;
    /**
     * Redis SSL port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sslPort?: number;
    /**
     * The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessKeys?: RedisAccessKeys;
    /**
     * List of the linked servers associated with the cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly linkedServers?: RedisLinkedServer[];
    /**
     * List of the Redis instances associated with the cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: RedisInstanceDetails[];
    /**
     * List of private endpoint connection associated with the specified redis cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** Specifies which Redis node(s) to reboot. */
export declare interface RedisRebootParameters {
    /** Which Redis node(s) to reboot. Depending on this value data loss is possible. */
    rebootType?: RebootType;
    /** If clustering is enabled, the ID of the shard to be rebooted. */
    shardId?: number;
    /** A list of redis instances to reboot, specified by per-instance SSL ports or non-SSL ports. */
    ports?: number[];
}

/** Optional parameters. */
export declare interface RedisRegenerateKeyOptionalParams extends coreClient.OperationOptions {
}

/** Specifies which Redis access keys to reset. */
export declare interface RedisRegenerateKeyParameters {
    /** The Redis access key to regenerate. */
    keyType: RedisKeyType;
}

/** Contains response data for the regenerateKey operation. */
export declare type RedisRegenerateKeyResponse = RedisAccessKeys;

/** A single Redis item in List or Get Operation. */
export declare interface RedisResource extends TrackedResource {
    /** A list of availability zones denoting where the resource needs to come from. */
    zones?: string[];
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
    redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
    /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
    redisVersion?: string;
    /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
    enableNonSslPort?: boolean;
    /** The number of replicas to be created per primary. */
    replicasPerMaster?: number;
    /** The number of replicas to be created per primary. */
    replicasPerPrimary?: number;
    /** A dictionary of tenant settings */
    tenantSettings?: {
        [propertyName: string]: string;
    };
    /** The number of shards to be created on a Premium Cluster Cache. */
    shardCount?: number;
    /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
    minimumTlsVersion?: TlsVersion;
    /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'. */
    updateChannel?: UpdateChannel;
    /** The SKU of the Redis cache to deploy. */
    sku: Sku;
    /** The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1 */
    subnetId?: string;
    /** Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default. */
    staticIP?: string;
    /**
     * Redis instance provisioning status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Redis host name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /**
     * Redis non-SSL port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly port?: number;
    /**
     * Redis SSL port.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sslPort?: number;
    /**
     * The keys of the Redis cache - not set if this object is not the response to Create or Update redis cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessKeys?: RedisAccessKeys;
    /**
     * List of the linked servers associated with the cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly linkedServers?: RedisLinkedServer[];
    /**
     * List of the Redis instances associated with the cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instances?: RedisInstanceDetails[];
    /**
     * List of private endpoint connection associated with the specified redis cache
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** Optional parameters. */
export declare interface RedisUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Parameters supplied to the Update Redis operation. */
export declare interface RedisUpdateParameters {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The identity of the resource. */
    identity?: ManagedServiceIdentity;
    /** All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc. */
    redisConfiguration?: RedisCommonPropertiesRedisConfiguration;
    /** Redis version. This should be in the form 'major[.minor]' (only 'major' is required) or the value 'latest' which refers to the latest stable Redis version that is available. Supported versions: 4.0, 6.0 (latest). Default value is 'latest'. */
    redisVersion?: string;
    /** Specifies whether the non-ssl Redis server port (6379) is enabled. */
    enableNonSslPort?: boolean;
    /** The number of replicas to be created per primary. */
    replicasPerMaster?: number;
    /** The number of replicas to be created per primary. */
    replicasPerPrimary?: number;
    /** A dictionary of tenant settings */
    tenantSettings?: {
        [propertyName: string]: string;
    };
    /** The number of shards to be created on a Premium Cluster Cache. */
    shardCount?: number;
    /** Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2') */
    minimumTlsVersion?: TlsVersion;
    /** Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Optional: Specifies the update channel for the monthly Redis updates your Redis Cache will receive. Caches using 'Preview' update channel get latest Redis updates at least 4 weeks ahead of 'Stable' channel caches. Default value is 'Stable'. */
    updateChannel?: UpdateChannel;
    /** The SKU of the Redis cache to deploy. */
    sku?: Sku;
}

/** Patchable properties of the redis cache. */
export declare interface RedisUpdateProperties extends RedisCommonProperties {
    /** The SKU of the Redis cache to deploy. */
    sku?: Sku;
}

/** Contains response data for the update operation. */
export declare type RedisUpdateResponse = RedisResource;

/** Defines values for ReplicationRole. */
export declare type ReplicationRole = "Primary" | "Secondary";

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Patch schedule entry for a Premium Redis Cache. */
export declare interface ScheduleEntry {
    /** Day of the week when a cache can be patched. */
    dayOfWeek: DayOfWeek;
    /** Start hour after which cache patching can start. */
    startHourUtc: number;
    /** ISO8601 timespan specifying how much time cache patching can take. */
    maintenanceWindow?: string;
}

/** SKU parameters supplied to the create Redis operation. */
export declare interface Sku {
    /** The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium) */
    name: SkuName;
    /** The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium). */
    family: SkuFamily;
    /** The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4). */
    capacity: number;
}

/**
 * Defines values for SkuFamily. \
 * {@link KnownSkuFamily} can be used interchangeably with SkuFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **C** \
 * **P**
 */
export declare type SkuFamily = string;

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export declare type SkuName = string;

/**
 * Defines values for TlsVersion. \
 * {@link KnownTlsVersion} can be used interchangeably with TlsVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **1.0** \
 * **1.1** \
 * **1.2**
 */
export declare type TlsVersion = string;

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/**
 * Defines values for UpdateChannel. \
 * {@link KnownUpdateChannel} can be used interchangeably with UpdateChannel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stable** \
 * **Preview**
 */
export declare type UpdateChannel = string;

/** Properties of upgrade notification. */
export declare interface UpgradeNotification {
    /**
     * Name of upgrade notification.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Timestamp when upgrade notification occurred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
    /**
     * Details about this upgrade notification
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly upsellNotification?: {
        [propertyName: string]: string;
    };
}

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

export { }
