/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/projectsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Projects. */
var Projects = /** @class */ (function () {
    /**
     * Create a Projects.
     * @param {VisualStudioResourceProviderClientContext} client Reference to the service client.
     */
    function Projects(client) {
        this.client = client;
    }
    Projects.prototype.listByResourceGroup = function (resourceGroupName, rootResourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            rootResourceName: rootResourceName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    /**
     * Creates a Team Services project in the collection with the specified name.
     * 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties.
     * Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
     * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
     * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
     * templates).
     * @summary Projects_Create
     * @param body The request data.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param resourceName Name of the Team Services project.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProjectsCreateResponse>
     */
    Projects.prototype.create = function (body, resourceGroupName, rootResourceName, resourceName, options) {
        return this.beginCreate(body, resourceGroupName, rootResourceName, resourceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Projects.prototype.get = function (resourceGroupName, rootResourceName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            rootResourceName: rootResourceName,
            resourceName: resourceName,
            options: options
        }, getOperationSpec, callback);
    };
    Projects.prototype.update = function (resourceGroupName, body, rootResourceName, resourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            body: body,
            rootResourceName: rootResourceName,
            resourceName: resourceName,
            options: options
        }, updateOperationSpec, callback);
    };
    Projects.prototype.getJobStatus = function (resourceGroupName, rootResourceName, resourceName, subContainerName, operation, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            rootResourceName: rootResourceName,
            resourceName: resourceName,
            subContainerName: subContainerName,
            operation: operation,
            options: options
        }, getJobStatusOperationSpec, callback);
    };
    /**
     * Creates a Team Services project in the collection with the specified name.
     * 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties.
     * Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
     * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
     * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
     * templates).
     * @summary Projects_Create
     * @param body The request data.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param resourceName Name of the Team Services project.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Projects.prototype.beginCreate = function (body, resourceGroupName, rootResourceName, resourceName, options) {
        return this.client.sendLRORequest({
            body: body,
            resourceGroupName: resourceGroupName,
            rootResourceName: rootResourceName,
            resourceName: resourceName,
            options: options
        }, beginCreateOperationSpec, options);
    };
    return Projects;
}());
export { Projects };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.rootResourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResourceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.rootResourceName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.rootResourceName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign(__assign({}, Mappers.ProjectResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getJobStatusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}/subContainers/{subContainerName}/status",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.rootResourceName,
        Parameters.resourceName,
        Parameters.subContainerName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.operation,
        Parameters.jobId
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.rootResourceName,
        Parameters.resourceName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.validating
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign(__assign({}, Mappers.ProjectResource), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        },
        202: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=projects.js.map