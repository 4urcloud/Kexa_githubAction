/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/extensionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Extensions. */
var Extensions = /** @class */ (function () {
    /**
     * Create a Extensions.
     * @param {VisualStudioResourceProviderClientContext} client Reference to the service client.
     */
    function Extensions(client) {
        this.client = client;
    }
    Extensions.prototype.listByAccount = function (resourceGroupName, accountResourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountResourceName: accountResourceName,
            options: options
        }, listByAccountOperationSpec, callback);
    };
    Extensions.prototype.create = function (resourceGroupName, body, accountResourceName, extensionResourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            body: body,
            accountResourceName: accountResourceName,
            extensionResourceName: extensionResourceName,
            options: options
        }, createOperationSpec, callback);
    };
    Extensions.prototype.deleteMethod = function (resourceGroupName, accountResourceName, extensionResourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountResourceName: accountResourceName,
            extensionResourceName: extensionResourceName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Extensions.prototype.get = function (resourceGroupName, accountResourceName, extensionResourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountResourceName: accountResourceName,
            extensionResourceName: extensionResourceName,
            options: options
        }, getOperationSpec, callback);
    };
    Extensions.prototype.update = function (resourceGroupName, body, accountResourceName, extensionResourceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            body: body,
            accountResourceName: accountResourceName,
            extensionResourceName: extensionResourceName,
            options: options
        }, updateOperationSpec, callback);
    };
    return Extensions;
}());
export { Extensions };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listByAccountOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.accountResourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ExtensionResourceListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var createOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.accountResourceName,
        Parameters.extensionResourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign(__assign({}, Mappers.ExtensionResourceRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ExtensionResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.accountResourceName,
        Parameters.extensionResourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.accountResourceName,
        Parameters.extensionResourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ExtensionResource
        },
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.accountResourceName,
        Parameters.extensionResourceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign(__assign({}, Mappers.ExtensionResourceRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ExtensionResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=extensions.js.map