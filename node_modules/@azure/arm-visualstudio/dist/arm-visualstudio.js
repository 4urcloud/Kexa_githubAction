/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmVisualstudio = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AccountResource = {
        serializedName: "AccountResource",
        type: {
            name: "Composite",
            className: "AccountResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var AccountResourceListResult = {
        serializedName: "AccountResourceListResult",
        type: {
            name: "Composite",
            className: "AccountResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AccountResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var AccountTagRequest = {
        serializedName: "AccountTagRequest",
        type: {
            name: "Composite",
            className: "AccountTagRequest",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AccountResourceRequest = {
        serializedName: "AccountResourceRequest",
        type: {
            name: "Composite",
            className: "AccountResourceRequest",
            modelProperties: {
                accountName: {
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                operationType: {
                    serializedName: "operationType",
                    type: {
                        name: "Object"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityParameter = {
        serializedName: "CheckNameAvailabilityParameter",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityParameter",
            modelProperties: {
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResult = {
        serializedName: "CheckNameAvailabilityResult",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResult",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ExtensionResourcePlan = {
        serializedName: "ExtensionResourcePlan",
        type: {
            name: "Composite",
            className: "ExtensionResourcePlan",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                product: {
                    serializedName: "product",
                    type: {
                        name: "String"
                    }
                },
                promotionCode: {
                    serializedName: "promotionCode",
                    type: {
                        name: "String"
                    }
                },
                publisher: {
                    serializedName: "publisher",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExtensionResource = {
        serializedName: "ExtensionResource",
        type: {
            name: "Composite",
            className: "ExtensionResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "ExtensionResourcePlan"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ExtensionResourceListResult = {
        serializedName: "ExtensionResourceListResult",
        type: {
            name: "Composite",
            className: "ExtensionResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExtensionResource"
                            }
                        }
                    }
                }
            }
        }
    };
    var ExtensionResourceRequest = {
        serializedName: "ExtensionResourceRequest",
        type: {
            name: "Composite",
            className: "ExtensionResourceRequest",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                plan: {
                    serializedName: "plan",
                    type: {
                        name: "Composite",
                        className: "ExtensionResourcePlan"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationProperties = {
        serializedName: "OperationProperties",
        type: {
            name: "Composite",
            className: "OperationProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationProperties"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProjectResource = {
        serializedName: "ProjectResource",
        type: {
            name: "Composite",
            className: "ProjectResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var ProjectResourceListResult = {
        serializedName: "ProjectResourceListResult",
        type: {
            name: "Composite",
            className: "ProjectResourceListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProjectResource"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        AccountResource: AccountResource,
        AccountResourceListResult: AccountResourceListResult,
        AccountTagRequest: AccountTagRequest,
        AccountResourceRequest: AccountResourceRequest,
        CheckNameAvailabilityParameter: CheckNameAvailabilityParameter,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        ExtensionResourcePlan: ExtensionResourcePlan,
        ExtensionResource: ExtensionResource,
        ExtensionResourceListResult: ExtensionResourceListResult,
        ExtensionResourceRequest: ExtensionResourceRequest,
        OperationProperties: OperationProperties,
        Operation: Operation,
        OperationListResult: OperationListResult,
        ProjectResource: ProjectResource,
        ProjectResourceListResult: ProjectResourceListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Operation: Operation,
        OperationListResult: OperationListResult,
        OperationProperties: OperationProperties
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountResourceName = {
        parameterPath: "accountResourceName",
        mapper: {
            required: true,
            serializedName: "accountResourceName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var extensionResourceName = {
        parameterPath: "extensionResourceName",
        mapper: {
            required: true,
            serializedName: "extensionResourceName",
            type: {
                name: "String"
            }
        }
    };
    var jobId = {
        parameterPath: [
            "options",
            "jobId"
        ],
        mapper: {
            serializedName: "jobId",
            type: {
                name: "Uuid"
            }
        }
    };
    var operation = {
        parameterPath: "operation",
        mapper: {
            required: true,
            serializedName: "operation",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var rootResourceName = {
        parameterPath: "rootResourceName",
        mapper: {
            required: true,
            serializedName: "rootResourceName",
            type: {
                name: "String"
            }
        }
    };
    var subContainerName = {
        parameterPath: "subContainerName",
        mapper: {
            required: true,
            serializedName: "subContainerName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var validating = {
        parameterPath: [
            "options",
            "validating"
        ],
        mapper: {
            serializedName: "validating",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {VisualStudioResourceProviderClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/microsoft.visualstudio/operations",
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccountResource: AccountResource,
        AccountResourceListResult: AccountResourceListResult,
        AccountResourceRequest: AccountResourceRequest,
        AccountTagRequest: AccountTagRequest,
        BaseResource: BaseResource,
        CheckNameAvailabilityParameter: CheckNameAvailabilityParameter,
        CheckNameAvailabilityResult: CheckNameAvailabilityResult,
        CloudError: CloudError,
        ExtensionResource: ExtensionResource,
        ExtensionResourcePlan: ExtensionResourcePlan,
        ProjectResource: ProjectResource,
        Resource: Resource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Accounts. */
    var Accounts = /** @class */ (function () {
        /**
         * Create a Accounts.
         * @param {VisualStudioResourceProviderClientContext} client Reference to the service client.
         */
        function Accounts(client) {
            this.client = client;
        }
        Accounts.prototype.checkNameAvailability = function (body, options, callback) {
            return this.client.sendOperationRequest({
                body: body,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Accounts.prototype.createOrUpdate = function (resourceGroupName, body, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                body: body,
                resourceName: resourceName,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Accounts.prototype.deleteMethod = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Accounts.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec, callback);
        };
        Accounts.prototype.update = function (resourceGroupName, body, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                body: body,
                resourceName: resourceName,
                options: options
            }, updateOperationSpec, callback);
        };
        return Accounts;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/microsoft.visualstudio/checkNameAvailability",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, CheckNameAvailabilityParameter), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, AccountResourceRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccountResource
            },
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AccountResource
            },
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, AccountTagRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AccountResource
            },
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccountResource: AccountResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ExtensionResource: ExtensionResource,
        ExtensionResourceListResult: ExtensionResourceListResult,
        ExtensionResourcePlan: ExtensionResourcePlan,
        ExtensionResourceRequest: ExtensionResourceRequest,
        ProjectResource: ProjectResource,
        Resource: Resource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Extensions. */
    var Extensions = /** @class */ (function () {
        /**
         * Create a Extensions.
         * @param {VisualStudioResourceProviderClientContext} client Reference to the service client.
         */
        function Extensions(client) {
            this.client = client;
        }
        Extensions.prototype.listByAccount = function (resourceGroupName, accountResourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountResourceName: accountResourceName,
                options: options
            }, listByAccountOperationSpec, callback);
        };
        Extensions.prototype.create = function (resourceGroupName, body, accountResourceName, extensionResourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                body: body,
                accountResourceName: accountResourceName,
                extensionResourceName: extensionResourceName,
                options: options
            }, createOperationSpec, callback);
        };
        Extensions.prototype.deleteMethod = function (resourceGroupName, accountResourceName, extensionResourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountResourceName: accountResourceName,
                extensionResourceName: extensionResourceName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Extensions.prototype.get = function (resourceGroupName, accountResourceName, extensionResourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountResourceName: accountResourceName,
                extensionResourceName: extensionResourceName,
                options: options
            }, getOperationSpec$1, callback);
        };
        Extensions.prototype.update = function (resourceGroupName, body, accountResourceName, extensionResourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                body: body,
                accountResourceName: accountResourceName,
                extensionResourceName: extensionResourceName,
                options: options
            }, updateOperationSpec$1, callback);
        };
        return Extensions;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByAccountOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            accountResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExtensionResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            accountResourceName,
            extensionResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, ExtensionResourceRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExtensionResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            accountResourceName,
            extensionResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            accountResourceName,
            extensionResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ExtensionResource
            },
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            accountResourceName,
            extensionResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, ExtensionResourceRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ExtensionResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AccountResource: AccountResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ExtensionResource: ExtensionResource,
        ExtensionResourcePlan: ExtensionResourcePlan,
        ProjectResource: ProjectResource,
        ProjectResourceListResult: ProjectResourceListResult,
        Resource: Resource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Projects. */
    var Projects = /** @class */ (function () {
        /**
         * Create a Projects.
         * @param {VisualStudioResourceProviderClientContext} client Reference to the service client.
         */
        function Projects(client) {
            this.client = client;
        }
        Projects.prototype.listByResourceGroup = function (resourceGroupName, rootResourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                rootResourceName: rootResourceName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        /**
         * Creates a Team Services project in the collection with the specified name.
         * 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties.
         * Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
         * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
         * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
         * templates).
         * @summary Projects_Create
         * @param body The request data.
         * @param resourceGroupName Name of the resource group within the Azure subscription.
         * @param rootResourceName Name of the Team Services account.
         * @param resourceName Name of the Team Services project.
         * @param [options] The optional parameters
         * @returns Promise<Models.ProjectsCreateResponse>
         */
        Projects.prototype.create = function (body, resourceGroupName, rootResourceName, resourceName, options) {
            return this.beginCreate(body, resourceGroupName, rootResourceName, resourceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Projects.prototype.get = function (resourceGroupName, rootResourceName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                rootResourceName: rootResourceName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$2, callback);
        };
        Projects.prototype.update = function (resourceGroupName, body, rootResourceName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                body: body,
                rootResourceName: rootResourceName,
                resourceName: resourceName,
                options: options
            }, updateOperationSpec$2, callback);
        };
        Projects.prototype.getJobStatus = function (resourceGroupName, rootResourceName, resourceName, subContainerName, operation, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                rootResourceName: rootResourceName,
                resourceName: resourceName,
                subContainerName: subContainerName,
                operation: operation,
                options: options
            }, getJobStatusOperationSpec, callback);
        };
        /**
         * Creates a Team Services project in the collection with the specified name.
         * 'VersionControlOption' and 'ProcessTemplateId' must be specified in the resource properties.
         * Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
         * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
         * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
         * templates).
         * @summary Projects_Create
         * @param body The request data.
         * @param resourceGroupName Name of the resource group within the Azure subscription.
         * @param rootResourceName Name of the Team Services account.
         * @param resourceName Name of the Team Services project.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Projects.prototype.beginCreate = function (body, resourceGroupName, rootResourceName, resourceName, options) {
            return this.client.sendLRORequest({
                body: body,
                resourceGroupName: resourceGroupName,
                rootResourceName: rootResourceName,
                resourceName: resourceName,
                options: options
            }, beginCreateOperationSpec, options);
        };
        return Projects;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            rootResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectResourceListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            rootResourceName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectResource
            },
            404: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            rootResourceName,
            resourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, ProjectResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getJobStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}/subContainers/{subContainerName}/status",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            rootResourceName,
            resourceName,
            subContainerName
        ],
        queryParameters: [
            apiVersion,
            operation,
            jobId
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            rootResourceName,
            resourceName
        ],
        queryParameters: [
            apiVersion,
            validating
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, ProjectResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectResource
            },
            202: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-visualstudio";
    var packageVersion = "3.0.0";
    var VisualStudioResourceProviderClientContext = /** @class */ (function (_super) {
        __extends(VisualStudioResourceProviderClientContext, _super);
        /**
         * Initializes a new instance of the VisualStudioResourceProviderClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The Azure subscription identifier.
         * @param [options] The parameter options
         */
        function VisualStudioResourceProviderClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2014-04-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return VisualStudioResourceProviderClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var VisualStudioResourceProviderClient = /** @class */ (function (_super) {
        __extends(VisualStudioResourceProviderClient, _super);
        /**
         * Initializes a new instance of the VisualStudioResourceProviderClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The Azure subscription identifier.
         * @param [options] The parameter options
         */
        function VisualStudioResourceProviderClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.accounts = new Accounts(_this);
            _this.extensions = new Extensions(_this);
            _this.projects = new Projects(_this);
            return _this;
        }
        return VisualStudioResourceProviderClient;
    }(VisualStudioResourceProviderClientContext));

    exports.Accounts = Accounts;
    exports.Extensions = Extensions;
    exports.Operations = Operations;
    exports.Projects = Projects;
    exports.VisualStudioResourceProviderClient = VisualStudioResourceProviderClient;
    exports.VisualStudioResourceProviderClientContext = VisualStudioResourceProviderClientContext;
    exports.VisualStudioResourceProviderMappers = mappers;
    exports.VisualStudioResourceProviderModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-visualstudio.js.map
