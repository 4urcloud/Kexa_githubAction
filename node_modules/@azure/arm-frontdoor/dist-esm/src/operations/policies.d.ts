import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Policies } from "../operationsInterfaces";
import { FrontDoorManagementClient } from "../frontDoorManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { WebApplicationFirewallPolicy, PoliciesListOptionalParams, PoliciesListBySubscriptionOptionalParams, PoliciesGetOptionalParams, PoliciesGetResponse, PoliciesCreateOrUpdateOptionalParams, PoliciesCreateOrUpdateResponse, TagsObject, PoliciesUpdateOptionalParams, PoliciesUpdateResponse, PoliciesDeleteOptionalParams } from "../models";
/** Class containing Policies operations. */
export declare class PoliciesImpl implements Policies {
    private readonly client;
    /**
     * Initialize a new instance of the class Policies class.
     * @param client Reference to the service client
     */
    constructor(client: FrontDoorManagementClient);
    /**
     * Lists all of the protection policies within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: PoliciesListOptionalParams): PagedAsyncIterableIterator<WebApplicationFirewallPolicy>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists all of the protection policies within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PoliciesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<WebApplicationFirewallPolicy>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Lists all of the protection policies within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Lists all of the protection policies within a subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Retrieve protection policy with specified name within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param policyName The name of the Web Application Firewall Policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, policyName: string, options?: PoliciesGetOptionalParams): Promise<PoliciesGetResponse>;
    /**
     * Create or update policy with specified rule set name within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param policyName The name of the Web Application Firewall Policy.
     * @param parameters Policy to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, policyName: string, parameters: WebApplicationFirewallPolicy, options?: PoliciesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PoliciesCreateOrUpdateResponse>, PoliciesCreateOrUpdateResponse>>;
    /**
     * Create or update policy with specified rule set name within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param policyName The name of the Web Application Firewall Policy.
     * @param parameters Policy to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, policyName: string, parameters: WebApplicationFirewallPolicy, options?: PoliciesCreateOrUpdateOptionalParams): Promise<PoliciesCreateOrUpdateResponse>;
    /**
     * Patch a specific frontdoor webApplicationFirewall policy for tags update under the specified
     * subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param policyName The name of the Web Application Firewall Policy.
     * @param parameters FrontdoorWebApplicationFirewallPolicy parameters to be patched.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, policyName: string, parameters: TagsObject, options?: PoliciesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PoliciesUpdateResponse>, PoliciesUpdateResponse>>;
    /**
     * Patch a specific frontdoor webApplicationFirewall policy for tags update under the specified
     * subscription and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param policyName The name of the Web Application Firewall Policy.
     * @param parameters FrontdoorWebApplicationFirewallPolicy parameters to be patched.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, policyName: string, parameters: TagsObject, options?: PoliciesUpdateOptionalParams): Promise<PoliciesUpdateResponse>;
    /**
     * Deletes Policy
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param policyName The name of the Web Application Firewall Policy.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, policyName: string, options?: PoliciesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes Policy
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param policyName The name of the Web Application Firewall Policy.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, policyName: string, options?: PoliciesDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=policies.d.ts.map