import { Endpoints } from "../operationsInterfaces";
import { FrontDoorManagementClient } from "../frontDoorManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { PurgeParameters, EndpointsPurgeContentOptionalParams } from "../models";
/** Class containing Endpoints operations. */
export declare class EndpointsImpl implements Endpoints {
    private readonly client;
    /**
     * Initialize a new instance of the class Endpoints class.
     * @param client Reference to the service client
     */
    constructor(client: FrontDoorManagementClient);
    /**
     * Removes a content from Front Door.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g.
     *                         '/pictures/city.png' which removes a single file, or a directory with a wildcard, e.g. '/pictures/*'
     *                         which removes all folders and files in the directory.
     * @param options The options parameters.
     */
    beginPurgeContent(resourceGroupName: string, frontDoorName: string, contentFilePaths: PurgeParameters, options?: EndpointsPurgeContentOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Removes a content from Front Door.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param frontDoorName Name of the Front Door which is globally unique.
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g.
     *                         '/pictures/city.png' which removes a single file, or a directory with a wildcard, e.g. '/pictures/*'
     *                         which removes all folders and files in the directory.
     * @param options The options parameters.
     */
    beginPurgeContentAndWait(resourceGroupName: string, frontDoorName: string, contentFilePaths: PurgeParameters, options?: EndpointsPurgeContentOptionalParams): Promise<void>;
}
//# sourceMappingURL=endpoints.d.ts.map