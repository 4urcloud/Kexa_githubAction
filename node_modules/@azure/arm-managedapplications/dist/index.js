'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** NotSpecified */
    KnownProvisioningState["NotSpecified"] = "NotSpecified";
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Running */
    KnownProvisioningState["Running"] = "Running";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Deleted */
    KnownProvisioningState["Deleted"] = "Deleted";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link JitApprovalMode} that the service accepts. */
exports.KnownJitApprovalMode = void 0;
(function (KnownJitApprovalMode) {
    /** NotSpecified */
    KnownJitApprovalMode["NotSpecified"] = "NotSpecified";
    /** AutoApprove */
    KnownJitApprovalMode["AutoApprove"] = "AutoApprove";
    /** ManualApprove */
    KnownJitApprovalMode["ManualApprove"] = "ManualApprove";
})(exports.KnownJitApprovalMode || (exports.KnownJitApprovalMode = {}));
/** Known values of {@link JitApproverType} that the service accepts. */
exports.KnownJitApproverType = void 0;
(function (KnownJitApproverType) {
    /** User */
    KnownJitApproverType["User"] = "user";
    /** Group */
    KnownJitApproverType["Group"] = "group";
})(exports.KnownJitApproverType || (exports.KnownJitApproverType = {}));
/** Known values of {@link ApplicationManagementMode} that the service accepts. */
exports.KnownApplicationManagementMode = void 0;
(function (KnownApplicationManagementMode) {
    /** NotSpecified */
    KnownApplicationManagementMode["NotSpecified"] = "NotSpecified";
    /** Unmanaged */
    KnownApplicationManagementMode["Unmanaged"] = "Unmanaged";
    /** Managed */
    KnownApplicationManagementMode["Managed"] = "Managed";
})(exports.KnownApplicationManagementMode || (exports.KnownApplicationManagementMode = {}));
/** Known values of {@link ApplicationArtifactName} that the service accepts. */
exports.KnownApplicationArtifactName = void 0;
(function (KnownApplicationArtifactName) {
    /** NotSpecified */
    KnownApplicationArtifactName["NotSpecified"] = "NotSpecified";
    /** ViewDefinition */
    KnownApplicationArtifactName["ViewDefinition"] = "ViewDefinition";
    /** Authorizations */
    KnownApplicationArtifactName["Authorizations"] = "Authorizations";
    /** CustomRoleDefinition */
    KnownApplicationArtifactName["CustomRoleDefinition"] = "CustomRoleDefinition";
})(exports.KnownApplicationArtifactName || (exports.KnownApplicationArtifactName = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ApplicationDefinitionArtifactName} that the service accepts. */
exports.KnownApplicationDefinitionArtifactName = void 0;
(function (KnownApplicationDefinitionArtifactName) {
    /** NotSpecified */
    KnownApplicationDefinitionArtifactName["NotSpecified"] = "NotSpecified";
    /** ApplicationResourceTemplate */
    KnownApplicationDefinitionArtifactName["ApplicationResourceTemplate"] = "ApplicationResourceTemplate";
    /** CreateUiDefinition */
    KnownApplicationDefinitionArtifactName["CreateUiDefinition"] = "CreateUiDefinition";
    /** MainTemplateParameters */
    KnownApplicationDefinitionArtifactName["MainTemplateParameters"] = "MainTemplateParameters";
})(exports.KnownApplicationDefinitionArtifactName || (exports.KnownApplicationDefinitionArtifactName = {}));
/** Known values of {@link DeploymentMode} that the service accepts. */
exports.KnownDeploymentMode = void 0;
(function (KnownDeploymentMode) {
    /** NotSpecified */
    KnownDeploymentMode["NotSpecified"] = "NotSpecified";
    /** Incremental */
    KnownDeploymentMode["Incremental"] = "Incremental";
    /** Complete */
    KnownDeploymentMode["Complete"] = "Complete";
})(exports.KnownDeploymentMode || (exports.KnownDeploymentMode = {}));
/** Known values of {@link JitSchedulingType} that the service accepts. */
exports.KnownJitSchedulingType = void 0;
(function (KnownJitSchedulingType) {
    /** NotSpecified */
    KnownJitSchedulingType["NotSpecified"] = "NotSpecified";
    /** Once */
    KnownJitSchedulingType["Once"] = "Once";
    /** Recurring */
    KnownJitSchedulingType["Recurring"] = "Recurring";
})(exports.KnownJitSchedulingType || (exports.KnownJitSchedulingType = {}));
/** Known values of {@link JitRequestState} that the service accepts. */
exports.KnownJitRequestState = void 0;
(function (KnownJitRequestState) {
    /** NotSpecified */
    KnownJitRequestState["NotSpecified"] = "NotSpecified";
    /** Pending */
    KnownJitRequestState["Pending"] = "Pending";
    /** Approved */
    KnownJitRequestState["Approved"] = "Approved";
    /** Denied */
    KnownJitRequestState["Denied"] = "Denied";
    /** Failed */
    KnownJitRequestState["Failed"] = "Failed";
    /** Canceled */
    KnownJitRequestState["Canceled"] = "Canceled";
    /** Expired */
    KnownJitRequestState["Expired"] = "Expired";
    /** Timeout */
    KnownJitRequestState["Timeout"] = "Timeout";
})(exports.KnownJitRequestState || (exports.KnownJitRequestState = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** NotSpecified */
    KnownStatus["NotSpecified"] = "NotSpecified";
    /** Elevate */
    KnownStatus["Elevate"] = "Elevate";
    /** Remove */
    KnownStatus["Remove"] = "Remove";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link Substatus} that the service accepts. */
exports.KnownSubstatus = void 0;
(function (KnownSubstatus) {
    /** NotSpecified */
    KnownSubstatus["NotSpecified"] = "NotSpecified";
    /** Approved */
    KnownSubstatus["Approved"] = "Approved";
    /** Denied */
    KnownSubstatus["Denied"] = "Denied";
    /** Failed */
    KnownSubstatus["Failed"] = "Failed";
    /** Expired */
    KnownSubstatus["Expired"] = "Expired";
    /** Timeout */
    KnownSubstatus["Timeout"] = "Timeout";
})(exports.KnownSubstatus || (exports.KnownSubstatus = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ApplicationBillingDetailsDefinition = {
    type: {
        name: "Composite",
        className: "ApplicationBillingDetailsDefinition",
        modelProperties: {
            resourceUsageId: {
                serializedName: "resourceUsageId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationJitAccessPolicy = {
    type: {
        name: "Composite",
        className: "ApplicationJitAccessPolicy",
        modelProperties: {
            jitAccessEnabled: {
                serializedName: "jitAccessEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            jitApprovalMode: {
                serializedName: "jitApprovalMode",
                type: {
                    name: "String"
                }
            },
            jitApprovers: {
                serializedName: "jitApprovers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JitApproverDefinition"
                        }
                    }
                }
            },
            maximumJitAccessDuration: {
                serializedName: "maximumJitAccessDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JitApproverDefinition = {
    type: {
        name: "Composite",
        className: "JitApproverDefinition",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationAuthorization = {
    type: {
        name: "Composite",
        className: "ApplicationAuthorization",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                required: true,
                type: {
                    name: "String"
                }
            },
            roleDefinitionId: {
                serializedName: "roleDefinitionId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationPackageContact = {
    type: {
        name: "Composite",
        className: "ApplicationPackageContact",
        modelProperties: {
            contactName: {
                serializedName: "contactName",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                required: true,
                type: {
                    name: "String"
                }
            },
            phone: {
                serializedName: "phone",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationPackageSupportUrls = {
    type: {
        name: "Composite",
        className: "ApplicationPackageSupportUrls",
        modelProperties: {
            publicAzure: {
                serializedName: "publicAzure",
                type: {
                    name: "String"
                }
            },
            governmentCloud: {
                serializedName: "governmentCloud",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationArtifact = {
    type: {
        name: "Composite",
        className: "ApplicationArtifact",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["NotSpecified", "Template", "Custom"]
                }
            }
        }
    }
};
const ApplicationClientDetails = {
    type: {
        name: "Composite",
        className: "ApplicationClientDetails",
        modelProperties: {
            oid: {
                serializedName: "oid",
                type: {
                    name: "String"
                }
            },
            puid: {
                serializedName: "puid",
                type: {
                    name: "String"
                }
            },
            applicationId: {
                serializedName: "applicationId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Plan = {
    type: {
        name: "Composite",
        className: "Plan",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            publisher: {
                serializedName: "publisher",
                required: true,
                type: {
                    name: "String"
                }
            },
            product: {
                serializedName: "product",
                required: true,
                type: {
                    name: "String"
                }
            },
            promotionCode: {
                serializedName: "promotionCode",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "SystemAssigned",
                        "UserAssigned",
                        "SystemAssigned, UserAssigned",
                        "None"
                    ]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "UserAssignedResourceIdentity"
                        }
                    }
                }
            }
        }
    }
};
const UserAssignedResourceIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedResourceIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            model: {
                serializedName: "model",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const PlanPatchable = {
    type: {
        name: "Composite",
        className: "PlanPatchable",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            publisher: {
                serializedName: "publisher",
                type: {
                    name: "String"
                }
            },
            product: {
                serializedName: "product",
                type: {
                    name: "String"
                }
            },
            promotionCode: {
                serializedName: "promotionCode",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationDefinitionArtifact = {
    type: {
        name: "Composite",
        className: "ApplicationDefinitionArtifact",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["NotSpecified", "Template", "Custom"]
                }
            }
        }
    }
};
const ApplicationNotificationPolicy = {
    type: {
        name: "Composite",
        className: "ApplicationNotificationPolicy",
        modelProperties: {
            notificationEndpoints: {
                serializedName: "notificationEndpoints",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationNotificationEndpoint"
                        }
                    }
                }
            }
        }
    }
};
const ApplicationNotificationEndpoint = {
    type: {
        name: "Composite",
        className: "ApplicationNotificationEndpoint",
        modelProperties: {
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationPackageLockingPolicyDefinition = {
    type: {
        name: "Composite",
        className: "ApplicationPackageLockingPolicyDefinition",
        modelProperties: {
            allowedActions: {
                serializedName: "allowedActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            allowedDataActions: {
                serializedName: "allowedDataActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ApplicationDeploymentPolicy = {
    type: {
        name: "Composite",
        className: "ApplicationDeploymentPolicy",
        modelProperties: {
            deploymentMode: {
                serializedName: "deploymentMode",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationManagementPolicy = {
    type: {
        name: "Composite",
        className: "ApplicationManagementPolicy",
        modelProperties: {
            mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationPolicy = {
    type: {
        name: "Composite",
        className: "ApplicationPolicy",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationDefinitionPatchable = {
    type: {
        name: "Composite",
        className: "ApplicationDefinitionPatchable",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ApplicationDefinitionListResult = {
    type: {
        name: "Composite",
        className: "ApplicationDefinitionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationDefinition"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationListResult = {
    type: {
        name: "Composite",
        className: "ApplicationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Application"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JitAuthorizationPolicies = {
    type: {
        name: "Composite",
        className: "JitAuthorizationPolicies",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                required: true,
                type: {
                    name: "String"
                }
            },
            roleDefinitionId: {
                serializedName: "roleDefinitionId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JitSchedulingPolicy = {
    type: {
        name: "Composite",
        className: "JitSchedulingPolicy",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            duration: {
                serializedName: "duration",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            },
            startTime: {
                serializedName: "startTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const JitRequestPatchable = {
    type: {
        name: "Composite",
        className: "JitRequestPatchable",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const JitRequestDefinitionListResult = {
    type: {
        name: "Composite",
        className: "JitRequestDefinitionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JitRequestDefinition"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AllowedUpgradePlansResult = {
    type: {
        name: "Composite",
        className: "AllowedUpgradePlansResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Plan"
                        }
                    }
                }
            }
        }
    }
};
const UpdateAccessDefinition = {
    type: {
        name: "Composite",
        className: "UpdateAccessDefinition",
        modelProperties: {
            approver: {
                serializedName: "approver",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "JitRequestMetadata"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            subStatus: {
                serializedName: "subStatus",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const JitRequestMetadata = {
    type: {
        name: "Composite",
        className: "JitRequestMetadata",
        modelProperties: {
            originRequestId: {
                serializedName: "originRequestId",
                type: {
                    name: "String"
                }
            },
            requestorId: {
                serializedName: "requestorId",
                type: {
                    name: "String"
                }
            },
            tenantDisplayName: {
                serializedName: "tenantDisplayName",
                type: {
                    name: "String"
                }
            },
            subjectDisplayName: {
                serializedName: "subjectDisplayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListTokenRequest = {
    type: {
        name: "Composite",
        className: "ListTokenRequest",
        modelProperties: {
            authorizationAudience: {
                serializedName: "authorizationAudience",
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ManagedIdentityTokenResult = {
    type: {
        name: "Composite",
        className: "ManagedIdentityTokenResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedIdentityToken"
                        }
                    }
                }
            }
        }
    }
};
const ManagedIdentityToken = {
    type: {
        name: "Composite",
        className: "ManagedIdentityToken",
        modelProperties: {
            accessToken: {
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            },
            expiresIn: {
                serializedName: "expiresIn",
                type: {
                    name: "String"
                }
            },
            expiresOn: {
                serializedName: "expiresOn",
                type: {
                    name: "String"
                }
            },
            notBefore: {
                serializedName: "notBefore",
                type: {
                    name: "String"
                }
            },
            authorizationAudience: {
                serializedName: "authorizationAudience",
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            tokenType: {
                serializedName: "tokenType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GenericResource = {
    type: {
        name: "Composite",
        className: "GenericResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { managedBy: {
                serializedName: "managedBy",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            } })
    }
};
const JitRequestDefinition = {
    type: {
        name: "Composite",
        className: "JitRequestDefinition",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { applicationResourceId: {
                serializedName: "properties.applicationResourceId",
                type: {
                    name: "String"
                }
            }, publisherTenantId: {
                serializedName: "properties.publisherTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, jitAuthorizationPolicies: {
                serializedName: "properties.jitAuthorizationPolicies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JitAuthorizationPolicies"
                        }
                    }
                }
            }, jitSchedulingPolicy: {
                serializedName: "properties.jitSchedulingPolicy",
                type: {
                    name: "Composite",
                    className: "JitSchedulingPolicy"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, jitRequestState: {
                serializedName: "properties.jitRequestState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "ApplicationClientDetails"
                }
            }, updatedBy: {
                serializedName: "properties.updatedBy",
                type: {
                    name: "Composite",
                    className: "ApplicationClientDetails"
                }
            } })
    }
};
const Application = {
    type: {
        name: "Composite",
        className: "Application",
        modelProperties: Object.assign(Object.assign({}, GenericResource.type.modelProperties), { plan: {
                serializedName: "plan",
                type: {
                    name: "Composite",
                    className: "Plan"
                }
            }, kind: {
                constraints: {
                    Pattern: new RegExp("^[-\\w\\._,\\(\\)]+$")
                },
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, managedResourceGroupId: {
                serializedName: "properties.managedResourceGroupId",
                type: {
                    name: "String"
                }
            }, applicationDefinitionId: {
                serializedName: "properties.applicationDefinitionId",
                type: {
                    name: "String"
                }
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, outputs: {
                serializedName: "properties.outputs",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingDetails: {
                serializedName: "properties.billingDetails",
                type: {
                    name: "Composite",
                    className: "ApplicationBillingDetailsDefinition"
                }
            }, jitAccessPolicy: {
                serializedName: "properties.jitAccessPolicy",
                type: {
                    name: "Composite",
                    className: "ApplicationJitAccessPolicy"
                }
            }, publisherTenantId: {
                serializedName: "properties.publisherTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, authorizations: {
                serializedName: "properties.authorizations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationAuthorization"
                        }
                    }
                }
            }, managementMode: {
                serializedName: "properties.managementMode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerSupport: {
                serializedName: "properties.customerSupport",
                type: {
                    name: "Composite",
                    className: "ApplicationPackageContact"
                }
            }, supportUrls: {
                serializedName: "properties.supportUrls",
                type: {
                    name: "Composite",
                    className: "ApplicationPackageSupportUrls"
                }
            }, artifacts: {
                serializedName: "properties.artifacts",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationArtifact"
                        }
                    }
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "ApplicationClientDetails"
                }
            }, updatedBy: {
                serializedName: "properties.updatedBy",
                type: {
                    name: "Composite",
                    className: "ApplicationClientDetails"
                }
            } })
    }
};
const ApplicationPatchable = {
    type: {
        name: "Composite",
        className: "ApplicationPatchable",
        modelProperties: Object.assign(Object.assign({}, GenericResource.type.modelProperties), { plan: {
                serializedName: "plan",
                type: {
                    name: "Composite",
                    className: "PlanPatchable"
                }
            }, kind: {
                constraints: {
                    Pattern: new RegExp("^[-\\w\\._,\\(\\)]+$")
                },
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, managedResourceGroupId: {
                serializedName: "properties.managedResourceGroupId",
                type: {
                    name: "String"
                }
            }, applicationDefinitionId: {
                serializedName: "properties.applicationDefinitionId",
                type: {
                    name: "String"
                }
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, outputs: {
                serializedName: "properties.outputs",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingDetails: {
                serializedName: "properties.billingDetails",
                type: {
                    name: "Composite",
                    className: "ApplicationBillingDetailsDefinition"
                }
            }, jitAccessPolicy: {
                serializedName: "properties.jitAccessPolicy",
                type: {
                    name: "Composite",
                    className: "ApplicationJitAccessPolicy"
                }
            }, publisherTenantId: {
                serializedName: "properties.publisherTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, authorizations: {
                serializedName: "properties.authorizations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationAuthorization"
                        }
                    }
                }
            }, managementMode: {
                serializedName: "properties.managementMode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerSupport: {
                serializedName: "properties.customerSupport",
                type: {
                    name: "Composite",
                    className: "ApplicationPackageContact"
                }
            }, supportUrls: {
                serializedName: "properties.supportUrls",
                type: {
                    name: "Composite",
                    className: "ApplicationPackageSupportUrls"
                }
            }, artifacts: {
                serializedName: "properties.artifacts",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationArtifact"
                        }
                    }
                }
            }, createdBy: {
                serializedName: "properties.createdBy",
                type: {
                    name: "Composite",
                    className: "ApplicationClientDetails"
                }
            }, updatedBy: {
                serializedName: "properties.updatedBy",
                type: {
                    name: "Composite",
                    className: "ApplicationClientDetails"
                }
            } })
    }
};
const ApplicationDefinition = {
    type: {
        name: "Composite",
        className: "ApplicationDefinition",
        modelProperties: Object.assign(Object.assign({}, GenericResource.type.modelProperties), { lockLevel: {
                serializedName: "properties.lockLevel",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["CanNotDelete", "ReadOnly", "None"]
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, isEnabled: {
                serializedName: "properties.isEnabled",
                type: {
                    name: "Boolean"
                }
            }, authorizations: {
                serializedName: "properties.authorizations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationAuthorization"
                        }
                    }
                }
            }, artifacts: {
                serializedName: "properties.artifacts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationDefinitionArtifact"
                        }
                    }
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, packageFileUri: {
                serializedName: "properties.packageFileUri",
                type: {
                    name: "String"
                }
            }, storageAccountId: {
                serializedName: "properties.storageAccountId",
                type: {
                    name: "String"
                }
            }, mainTemplate: {
                serializedName: "properties.mainTemplate",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, createUiDefinition: {
                serializedName: "properties.createUiDefinition",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, notificationPolicy: {
                serializedName: "properties.notificationPolicy",
                type: {
                    name: "Composite",
                    className: "ApplicationNotificationPolicy"
                }
            }, lockingPolicy: {
                serializedName: "properties.lockingPolicy",
                type: {
                    name: "Composite",
                    className: "ApplicationPackageLockingPolicyDefinition"
                }
            }, deploymentPolicy: {
                serializedName: "properties.deploymentPolicy",
                type: {
                    name: "Composite",
                    className: "ApplicationDeploymentPolicy"
                }
            }, managementPolicy: {
                serializedName: "properties.managementPolicy",
                type: {
                    name: "Composite",
                    className: "ApplicationManagementPolicy"
                }
            }, policies: {
                serializedName: "properties.policies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationPolicy"
                        }
                    }
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ApplicationBillingDetailsDefinition: ApplicationBillingDetailsDefinition,
    ApplicationJitAccessPolicy: ApplicationJitAccessPolicy,
    JitApproverDefinition: JitApproverDefinition,
    ApplicationAuthorization: ApplicationAuthorization,
    ApplicationPackageContact: ApplicationPackageContact,
    ApplicationPackageSupportUrls: ApplicationPackageSupportUrls,
    ApplicationArtifact: ApplicationArtifact,
    ApplicationClientDetails: ApplicationClientDetails,
    Plan: Plan,
    Identity: Identity,
    UserAssignedResourceIdentity: UserAssignedResourceIdentity,
    Sku: Sku,
    Resource: Resource,
    SystemData: SystemData,
    PlanPatchable: PlanPatchable,
    ApplicationDefinitionArtifact: ApplicationDefinitionArtifact,
    ApplicationNotificationPolicy: ApplicationNotificationPolicy,
    ApplicationNotificationEndpoint: ApplicationNotificationEndpoint,
    ApplicationPackageLockingPolicyDefinition: ApplicationPackageLockingPolicyDefinition,
    ApplicationDeploymentPolicy: ApplicationDeploymentPolicy,
    ApplicationManagementPolicy: ApplicationManagementPolicy,
    ApplicationPolicy: ApplicationPolicy,
    ApplicationDefinitionPatchable: ApplicationDefinitionPatchable,
    ApplicationDefinitionListResult: ApplicationDefinitionListResult,
    ApplicationListResult: ApplicationListResult,
    JitAuthorizationPolicies: JitAuthorizationPolicies,
    JitSchedulingPolicy: JitSchedulingPolicy,
    JitRequestPatchable: JitRequestPatchable,
    JitRequestDefinitionListResult: JitRequestDefinitionListResult,
    AllowedUpgradePlansResult: AllowedUpgradePlansResult,
    UpdateAccessDefinition: UpdateAccessDefinition,
    JitRequestMetadata: JitRequestMetadata,
    ListTokenRequest: ListTokenRequest,
    ManagedIdentityTokenResult: ManagedIdentityTokenResult,
    ManagedIdentityToken: ManagedIdentityToken,
    GenericResource: GenericResource,
    JitRequestDefinition: JitRequestDefinition,
    Application: Application,
    ApplicationPatchable: ApplicationPatchable,
    ApplicationDefinition: ApplicationDefinition
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const applicationName = {
    parameterPath: "applicationName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3
        },
        serializedName: "applicationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Application
};
const parameters1 = {
    parameterPath: ["options", "parameters"],
    mapper: ApplicationPatchable
};
const applicationId = {
    parameterPath: "applicationId",
    mapper: {
        serializedName: "applicationId",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: UpdateAccessDefinition
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: ListTokenRequest
};
const applicationDefinitionName = {
    parameterPath: "applicationDefinitionName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3
        },
        serializedName: "applicationDefinitionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: ApplicationDefinition
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: ApplicationDefinitionPatchable
};
const resourceGroupName1 = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const jitRequestName = {
    parameterPath: "jitRequestName",
    mapper: {
        serializedName: "jitRequestName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: JitRequestDefinition
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: JitRequestPatchable
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Applications operations. */
class ApplicationsImpl {
    /**
     * Initialize a new instance of the class Applications class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the applications within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the applications within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    get(resourceGroupName, applicationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationName, options }, getOperationSpec$2);
    }
    /**
     * Deletes the managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, applicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, applicationName, options },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, applicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, applicationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Creates or updates a managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, applicationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, applicationName, parameters, options },
                spec: createOrUpdateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, applicationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, applicationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an existing managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, applicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, applicationName, options },
                spec: updateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an existing managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, applicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, applicationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all the applications within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$2);
    }
    /**
     * Lists all the applications within a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$2);
    }
    /**
     * Gets the managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    getById(applicationId, options) {
        return this.client.sendOperationRequest({ applicationId, options }, getByIdOperationSpec$1);
    }
    /**
     * Deletes the managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginDeleteById(applicationId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { applicationId, options },
                spec: deleteByIdOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginDeleteByIdAndWait(applicationId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteById(applicationId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Creates or updates a managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdateById(applicationId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { applicationId, parameters, options },
                spec: createOrUpdateByIdOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdateByIdAndWait(applicationId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdateById(applicationId, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an existing managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginUpdateById(applicationId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { applicationId, options },
                spec: updateByIdOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an existing managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginUpdateByIdAndWait(applicationId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateById(applicationId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Refresh Permissions for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginRefreshPermissions(resourceGroupName, applicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, applicationName, options },
                spec: refreshPermissionsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Refresh Permissions for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginRefreshPermissionsAndWait(resourceGroupName, applicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRefreshPermissions(resourceGroupName, applicationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List allowed upgrade plans for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    listAllowedUpgradePlans(resourceGroupName, applicationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationName, options }, listAllowedUpgradePlansOperationSpec);
    }
    /**
     * Update access for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Request body parameters to list tokens.
     * @param options The options parameters.
     */
    beginUpdateAccess(resourceGroupName, applicationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, applicationName, parameters, options },
                spec: updateAccessOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update access for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Request body parameters to list tokens.
     * @param options The options parameters.
     */
    beginUpdateAccessAndWait(resourceGroupName, applicationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateAccess(resourceGroupName, applicationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List tokens for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Request body parameters to list tokens.
     * @param options The options parameters.
     */
    listTokens(resourceGroupName, applicationName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationName, parameters, options }, listTokensOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$1);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Application
        },
        404: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Application
        },
        201: {
            bodyMapper: Application
        },
        202: {
            bodyMapper: Application
        },
        204: {
            bodyMapper: Application
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ApplicationPatchable
        },
        201: {
            bodyMapper: ApplicationPatchable
        },
        202: {
            bodyMapper: ApplicationPatchable
        },
        204: {
            bodyMapper: ApplicationPatchable
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listByResourceGroupOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listBySubscriptionOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Solutions/applications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$3
};
const getByIdOperationSpec$1 = {
    path: "/{applicationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Application
        },
        404: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, applicationId],
    headerParameters: [accept],
    serializer: serializer$3
};
const deleteByIdOperationSpec$1 = {
    path: "/{applicationId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, applicationId],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateByIdOperationSpec$1 = {
    path: "/{applicationId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Application
        },
        201: {
            bodyMapper: Application
        },
        202: {
            bodyMapper: Application
        },
        204: {
            bodyMapper: Application
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [$host, applicationId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const updateByIdOperationSpec$1 = {
    path: "/{applicationId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ApplicationPatchable
        },
        201: {
            bodyMapper: ApplicationPatchable
        },
        202: {
            bodyMapper: ApplicationPatchable
        },
        204: {
            bodyMapper: ApplicationPatchable
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [$host, applicationId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const refreshPermissionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}/refreshPermissions",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listAllowedUpgradePlansOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}/listAllowedUpgradePlans",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AllowedUpgradePlansResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const updateAccessOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}/updateAccess",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listTokensOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applications/{applicationName}/listTokens",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ManagedIdentityTokenResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listByResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listBySubscriptionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ApplicationDefinitions operations. */
class ApplicationDefinitionsImpl {
    /**
     * Initialize a new instance of the class ApplicationDefinitions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the managed application definitions in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the application definitions within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    get(resourceGroupName, applicationDefinitionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, options }, getOperationSpec$1);
    }
    /**
     * Deletes the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    delete(resourceGroupName, applicationDefinitionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, options }, deleteOperationSpec$1);
    }
    /**
     * Creates or updates a managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the create or update an managed application definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, applicationDefinitionName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, parameters, options }, createOrUpdateOperationSpec$1);
    }
    /**
     * Updates the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the update a managed application definition.
     * @param options The options parameters.
     */
    update(resourceGroupName, applicationDefinitionName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, parameters, options }, updateOperationSpec$1);
    }
    /**
     * Lists the managed application definitions in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * Lists all the application definitions within a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$1);
    }
    /**
     * Gets the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    getById(resourceGroupName, applicationDefinitionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, options }, getByIdOperationSpec);
    }
    /**
     * Deletes the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    deleteById(resourceGroupName, applicationDefinitionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, options }, deleteByIdOperationSpec);
    }
    /**
     * Creates or updates a managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the create or update a managed application definition.
     * @param options The options parameters.
     */
    createOrUpdateById(resourceGroupName, applicationDefinitionName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, parameters, options }, createOrUpdateByIdOperationSpec);
    }
    /**
     * Updates the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the update a managed application definition.
     * @param options The options parameters.
     */
    updateById(resourceGroupName, applicationDefinitionName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationDefinitionName, parameters, options }, updateByIdOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationDefinition
        },
        404: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ApplicationDefinition
        },
        201: {
            bodyMapper: ApplicationDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationDefinitionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ApplicationDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationDefinitionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listBySubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Solutions/applicationDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const getByIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationDefinition
        },
        404: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        applicationDefinitionName,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const deleteByIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        applicationDefinitionName,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateByIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ApplicationDefinition
        },
        201: {
            bodyMapper: ApplicationDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        applicationDefinitionName,
        resourceGroupName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateByIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applicationDefinitions/{applicationDefinitionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ApplicationDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationDefinitionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing JitRequests operations. */
class JitRequestsImpl {
    /**
     * Initialize a new instance of the class JitRequests class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param options The options parameters.
     */
    get(resourceGroupName, jitRequestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jitRequestName, options }, getOperationSpec);
    }
    /**
     * Creates or updates the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, jitRequestName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, jitRequestName, parameters, options },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, jitRequestName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, jitRequestName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param options The options parameters.
     */
    update(resourceGroupName, jitRequestName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jitRequestName, parameters, options }, updateOperationSpec);
    }
    /**
     * Deletes the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param options The options parameters.
     */
    delete(resourceGroupName, jitRequestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, jitRequestName, options }, deleteOperationSpec);
    }
    /**
     * Lists all JIT requests within the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Lists all JIT requests within the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JitRequestDefinition
        },
        404: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jitRequestName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: JitRequestDefinition
        },
        201: {
            bodyMapper: JitRequestDefinition
        },
        202: {
            bodyMapper: JitRequestDefinition
        },
        204: {
            bodyMapper: JitRequestDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jitRequestName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: JitRequestDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jitRequestName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        jitRequestName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Solutions/jitRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JitRequestDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JitRequestDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
class ApplicationClient extends coreClient__namespace.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-managedapplications/3.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-07-01";
        this.applications = new ApplicationsImpl(this);
        this.applicationDefinitions = new ApplicationDefinitionsImpl(this);
        this.jitRequests = new JitRequestsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Lists all of the available Microsoft.Solutions REST API operations.
     * @param options The options parameters.
     */
    listOperations(options) {
        const iter = this.listOperationsPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listOperationsPagingPage(options, settings);
            }
        };
    }
    listOperationsPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listOperationsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listOperations(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listOperationsNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listOperationsPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listOperationsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listOperationsPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Microsoft.Solutions REST API operations.
     * @param options The options parameters.
     */
    _listOperations(options) {
        return this.sendOperationRequest({ options }, listOperationsOperationSpec);
    }
    /**
     * ListOperationsNext
     * @param nextLink The nextLink from the previous successful call to the ListOperations method.
     * @param options The options parameters.
     */
    _listOperationsNext(nextLink, options) {
        return this.sendOperationRequest({ nextLink, options }, listOperationsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationsOperationSpec = {
    path: "/providers/Microsoft.Solutions/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listOperationsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

exports.ApplicationClient = ApplicationClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
