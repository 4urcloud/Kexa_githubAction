import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Applications, ApplicationDefinitions, JitRequests } from "./operationsInterfaces";
import { ApplicationClientOptionalParams, Operation, ListOperationsOptionalParams } from "./models";
export declare class ApplicationClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the ApplicationClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ApplicationClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: ApplicationClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Lists all of the available Microsoft.Solutions REST API operations.
     * @param options The options parameters.
     */
    listOperations(options?: ListOperationsOptionalParams): PagedAsyncIterableIterator<Operation>;
    private listOperationsPagingPage;
    private listOperationsPagingAll;
    /**
     * Lists all of the available Microsoft.Solutions REST API operations.
     * @param options The options parameters.
     */
    private _listOperations;
    /**
     * ListOperationsNext
     * @param nextLink The nextLink from the previous successful call to the ListOperations method.
     * @param options The options parameters.
     */
    private _listOperationsNext;
    applications: Applications;
    applicationDefinitions: ApplicationDefinitions;
    jitRequests: JitRequests;
}
//# sourceMappingURL=applicationClient.d.ts.map