import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** The array of plan. */
export declare interface AllowedUpgradePlansResult {
    /** The array of plans. */
    value?: Plan[];
}

/** Information about managed application. */
export declare interface Application extends GenericResource {
    /** The plan information. */
    plan?: Plan;
    /** The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. */
    kind: string;
    /** The identity of the resource. */
    identity?: Identity;
    /** The managed resource group Id. */
    managedResourceGroupId?: string;
    /** The fully qualified path of managed application definition Id. */
    applicationDefinitionId?: string;
    /** Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. */
    parameters?: Record<string, unknown>;
    /**
     * Name and value pairs that define the managed application outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputs?: Record<string, unknown>;
    /**
     * The managed application provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The managed application billing details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingDetails?: ApplicationBillingDetailsDefinition;
    /** The managed application Jit access policy. */
    jitAccessPolicy?: ApplicationJitAccessPolicy;
    /**
     * The publisher tenant Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisherTenantId?: string;
    /**
     * The  read-only authorizations property that is retrieved from the application package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly authorizations?: ApplicationAuthorization[];
    /**
     * The managed application management mode.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managementMode?: ApplicationManagementMode;
    /**
     * The read-only customer support property that is retrieved from the application package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerSupport?: ApplicationPackageContact;
    /**
     * The read-only support URLs property that is retrieved from the application package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportUrls?: ApplicationPackageSupportUrls;
    /**
     * The collection of managed application artifacts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly artifacts?: ApplicationArtifact[];
    /**
     * The client entity that created the JIT request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdBy?: ApplicationClientDetails;
    /**
     * The client entity that last updated the JIT request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedBy?: ApplicationClientDetails;
}

/** Managed application artifact. */
export declare interface ApplicationArtifact {
    /** The managed application artifact name. */
    name: ApplicationArtifactName;
    /** The managed application artifact blob uri. */
    uri: string;
    /** The managed application artifact type. */
    type: ApplicationArtifactType;
}

/**
 * Defines values for ApplicationArtifactName. \
 * {@link KnownApplicationArtifactName} can be used interchangeably with ApplicationArtifactName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **ViewDefinition** \
 * **Authorizations** \
 * **CustomRoleDefinition**
 */
export declare type ApplicationArtifactName = string;

/** Defines values for ApplicationArtifactType. */
export declare type ApplicationArtifactType = "NotSpecified" | "Template" | "Custom";

/** The managed application provider authorization. */
export declare interface ApplicationAuthorization {
    /** The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the managed application resources. */
    principalId: string;
    /** The provider's role definition identifier. This role will define all the permissions that the provider must have on the managed application's container resource group. This role definition cannot have permission to delete the resource group. */
    roleDefinitionId: string;
}

/** Managed application billing details definition. */
export declare interface ApplicationBillingDetailsDefinition {
    /** The managed application resource usage Id. */
    resourceUsageId?: string;
}

export declare class ApplicationClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the ApplicationClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ApplicationClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: ApplicationClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Lists all of the available Microsoft.Solutions REST API operations.
     * @param options The options parameters.
     */
    listOperations(options?: ListOperationsOptionalParams): PagedAsyncIterableIterator<Operation>;
    private listOperationsPagingPage;
    private listOperationsPagingAll;
    /**
     * Lists all of the available Microsoft.Solutions REST API operations.
     * @param options The options parameters.
     */
    private _listOperations;
    /**
     * ListOperationsNext
     * @param nextLink The nextLink from the previous successful call to the ListOperations method.
     * @param options The options parameters.
     */
    private _listOperationsNext;
    applications: Applications;
    applicationDefinitions: ApplicationDefinitions;
    jitRequests: JitRequests;
}

/** The application client details to track the entity creating/updating the managed app resource. */
export declare interface ApplicationClientDetails {
    /** The client Oid. */
    oid?: string;
    /** The client Puid */
    puid?: string;
    /** The client application Id. */
    applicationId?: string;
}

/** Optional parameters. */
export declare interface ApplicationClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Information about managed application definition. */
export declare interface ApplicationDefinition extends GenericResource {
    /** The managed application lock level. */
    lockLevel: ApplicationLockLevel;
    /** The managed application definition display name. */
    displayName?: string;
    /** A value indicating whether the package is enabled or not. */
    isEnabled?: boolean;
    /** The managed application provider authorizations. */
    authorizations?: ApplicationAuthorization[];
    /** The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition. */
    artifacts?: ApplicationDefinitionArtifact[];
    /** The managed application definition description. */
    description?: string;
    /** The managed application definition package file Uri. Use this element */
    packageFileUri?: string;
    /** The storage account id for bring your own storage scenario. */
    storageAccountId?: string;
    /** The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string. */
    mainTemplate?: Record<string, unknown>;
    /** The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string. */
    createUiDefinition?: Record<string, unknown>;
    /** The managed application notification policy. */
    notificationPolicy?: ApplicationNotificationPolicy;
    /** The managed application locking policy. */
    lockingPolicy?: ApplicationPackageLockingPolicyDefinition;
    /** The managed application deployment policy. */
    deploymentPolicy?: ApplicationDeploymentPolicy;
    /** The managed application management policy that determines publisher's access to the managed resource group. */
    managementPolicy?: ApplicationManagementPolicy;
    /** The managed application provider policies. */
    policies?: ApplicationPolicy[];
}

/** Application definition artifact. */
export declare interface ApplicationDefinitionArtifact {
    /** The managed application definition artifact name. */
    name: ApplicationDefinitionArtifactName;
    /** The managed application definition artifact blob uri. */
    uri: string;
    /** The managed application definition artifact type. */
    type: ApplicationArtifactType;
}

/**
 * Defines values for ApplicationDefinitionArtifactName. \
 * {@link KnownApplicationDefinitionArtifactName} can be used interchangeably with ApplicationDefinitionArtifactName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **ApplicationResourceTemplate** \
 * **CreateUiDefinition** \
 * **MainTemplateParameters**
 */
export declare type ApplicationDefinitionArtifactName = string;

/** List of managed application definitions. */
export declare interface ApplicationDefinitionListResult {
    /** The array of managed application definitions. */
    value?: ApplicationDefinition[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Information about an application definition request. */
export declare interface ApplicationDefinitionPatchable {
    /** Application definition tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a ApplicationDefinitions. */
export declare interface ApplicationDefinitions {
    /**
     * Lists the managed application definitions in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ApplicationDefinitionsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ApplicationDefinition>;
    /**
     * Lists all the application definitions within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ApplicationDefinitionsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ApplicationDefinition>;
    /**
     * Gets the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, applicationDefinitionName: string, options?: ApplicationDefinitionsGetOptionalParams): Promise<ApplicationDefinitionsGetResponse>;
    /**
     * Deletes the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, applicationDefinitionName: string, options?: ApplicationDefinitionsDeleteOptionalParams): Promise<void>;
    /**
     * Creates or updates a managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the create or update an managed application definition.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, applicationDefinitionName: string, parameters: ApplicationDefinition, options?: ApplicationDefinitionsCreateOrUpdateOptionalParams): Promise<ApplicationDefinitionsCreateOrUpdateResponse>;
    /**
     * Updates the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the update a managed application definition.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, applicationDefinitionName: string, parameters: ApplicationDefinitionPatchable, options?: ApplicationDefinitionsUpdateOptionalParams): Promise<ApplicationDefinitionsUpdateResponse>;
    /**
     * Gets the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    getById(resourceGroupName: string, applicationDefinitionName: string, options?: ApplicationDefinitionsGetByIdOptionalParams): Promise<ApplicationDefinitionsGetByIdResponse>;
    /**
     * Deletes the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param options The options parameters.
     */
    deleteById(resourceGroupName: string, applicationDefinitionName: string, options?: ApplicationDefinitionsDeleteByIdOptionalParams): Promise<void>;
    /**
     * Creates or updates a managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the create or update a managed application definition.
     * @param options The options parameters.
     */
    createOrUpdateById(resourceGroupName: string, applicationDefinitionName: string, parameters: ApplicationDefinition, options?: ApplicationDefinitionsCreateOrUpdateByIdOptionalParams): Promise<ApplicationDefinitionsCreateOrUpdateByIdResponse>;
    /**
     * Updates the managed application definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationDefinitionName The name of the managed application definition.
     * @param parameters Parameters supplied to the update a managed application definition.
     * @param options The options parameters.
     */
    updateById(resourceGroupName: string, applicationDefinitionName: string, parameters: ApplicationDefinitionPatchable, options?: ApplicationDefinitionsUpdateByIdOptionalParams): Promise<ApplicationDefinitionsUpdateByIdResponse>;
}

/** Optional parameters. */
export declare interface ApplicationDefinitionsCreateOrUpdateByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateById operation. */
export declare type ApplicationDefinitionsCreateOrUpdateByIdResponse = ApplicationDefinition;

/** Optional parameters. */
export declare interface ApplicationDefinitionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApplicationDefinitionsCreateOrUpdateResponse = ApplicationDefinition;

/** Optional parameters. */
export declare interface ApplicationDefinitionsDeleteByIdOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ApplicationDefinitionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ApplicationDefinitionsGetByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getById operation. */
export declare type ApplicationDefinitionsGetByIdResponse = ApplicationDefinition;

/** Optional parameters. */
export declare interface ApplicationDefinitionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationDefinitionsGetResponse = ApplicationDefinition;

/** Optional parameters. */
export declare interface ApplicationDefinitionsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ApplicationDefinitionsListByResourceGroupNextResponse = ApplicationDefinitionListResult;

/** Optional parameters. */
export declare interface ApplicationDefinitionsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ApplicationDefinitionsListByResourceGroupResponse = ApplicationDefinitionListResult;

/** Optional parameters. */
export declare interface ApplicationDefinitionsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ApplicationDefinitionsListBySubscriptionNextResponse = ApplicationDefinitionListResult;

/** Optional parameters. */
export declare interface ApplicationDefinitionsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ApplicationDefinitionsListBySubscriptionResponse = ApplicationDefinitionListResult;

/** Optional parameters. */
export declare interface ApplicationDefinitionsUpdateByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateById operation. */
export declare type ApplicationDefinitionsUpdateByIdResponse = ApplicationDefinition;

/** Optional parameters. */
export declare interface ApplicationDefinitionsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ApplicationDefinitionsUpdateResponse = ApplicationDefinition;

/** Managed application deployment policy. */
export declare interface ApplicationDeploymentPolicy {
    /** The managed application deployment mode. */
    deploymentMode: DeploymentMode;
}

/** Managed application Jit access policy. */
export declare interface ApplicationJitAccessPolicy {
    /** Whether the JIT access is enabled. */
    jitAccessEnabled: boolean;
    /** JIT approval mode. */
    jitApprovalMode?: JitApprovalMode;
    /** The JIT approvers */
    jitApprovers?: JitApproverDefinition[];
    /** The maximum duration JIT access is granted. This is an ISO8601 time period value. */
    maximumJitAccessDuration?: string;
}

/** List of managed applications. */
export declare interface ApplicationListResult {
    /** The array of managed applications. */
    value?: Application[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Defines values for ApplicationLockLevel. */
export declare type ApplicationLockLevel = "CanNotDelete" | "ReadOnly" | "None";

/**
 * Defines values for ApplicationManagementMode. \
 * {@link KnownApplicationManagementMode} can be used interchangeably with ApplicationManagementMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Unmanaged** \
 * **Managed**
 */
export declare type ApplicationManagementMode = string;

/** Managed application management policy. */
export declare interface ApplicationManagementPolicy {
    /** The managed application management mode. */
    mode?: ApplicationManagementMode;
}

/** Managed application notification endpoint. */
export declare interface ApplicationNotificationEndpoint {
    /** The managed application notification endpoint uri. */
    uri: string;
}

/** Managed application notification policy. */
export declare interface ApplicationNotificationPolicy {
    /** The managed application notification endpoint. */
    notificationEndpoints: ApplicationNotificationEndpoint[];
}

/** The application package contact information. */
export declare interface ApplicationPackageContact {
    /** The contact name. */
    contactName?: string;
    /** The contact email. */
    email: string;
    /** The contact phone number. */
    phone: string;
}

/** Managed application locking policy. */
export declare interface ApplicationPackageLockingPolicyDefinition {
    /** The deny assignment excluded actions. */
    allowedActions?: string[];
    /** The deny assignment excluded data actions. */
    allowedDataActions?: string[];
}

/** The appliance package support URLs. */
export declare interface ApplicationPackageSupportUrls {
    /** The public azure support URL. */
    publicAzure?: string;
    /** The government cloud support URL. */
    governmentCloud?: string;
}

/** Information about managed application. */
export declare interface ApplicationPatchable extends GenericResource {
    /** The plan information. */
    plan?: PlanPatchable;
    /** The kind of the managed application. Allowed values are MarketPlace and ServiceCatalog. */
    kind?: string;
    /** The identity of the resource. */
    identity?: Identity;
    /** The managed resource group Id. */
    managedResourceGroupId?: string;
    /** The fully qualified path of managed application definition Id. */
    applicationDefinitionId?: string;
    /** Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string. */
    parameters?: Record<string, unknown>;
    /**
     * Name and value pairs that define the managed application outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputs?: Record<string, unknown>;
    /**
     * The managed application provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The managed application billing details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingDetails?: ApplicationBillingDetailsDefinition;
    /** The managed application Jit access policy. */
    jitAccessPolicy?: ApplicationJitAccessPolicy;
    /**
     * The publisher tenant Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisherTenantId?: string;
    /**
     * The  read-only authorizations property that is retrieved from the application package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly authorizations?: ApplicationAuthorization[];
    /**
     * The managed application management mode.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managementMode?: ApplicationManagementMode;
    /**
     * The read-only customer support property that is retrieved from the application package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerSupport?: ApplicationPackageContact;
    /**
     * The read-only support URLs property that is retrieved from the application package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportUrls?: ApplicationPackageSupportUrls;
    /**
     * The collection of managed application artifacts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly artifacts?: ApplicationArtifact[];
    /**
     * The client entity that created the JIT request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdBy?: ApplicationClientDetails;
    /**
     * The client entity that last updated the JIT request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedBy?: ApplicationClientDetails;
}

/** Managed application policy. */
export declare interface ApplicationPolicy {
    /** The policy name */
    name?: string;
    /** The policy definition Id. */
    policyDefinitionId?: string;
    /** The policy parameters. */
    parameters?: string;
}

/** Interface representing a Applications. */
export declare interface Applications {
    /**
     * Lists all the applications within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ApplicationsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Application>;
    /**
     * Lists all the applications within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ApplicationsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Application>;
    /**
     * Gets the managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, applicationName: string, options?: ApplicationsGetOptionalParams): Promise<ApplicationsGetResponse>;
    /**
     * Deletes the managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, applicationName: string, options?: ApplicationsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, applicationName: string, options?: ApplicationsDeleteOptionalParams): Promise<void>;
    /**
     * Creates or updates a managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, applicationName: string, parameters: Application, options?: ApplicationsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ApplicationsCreateOrUpdateResponse>, ApplicationsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, applicationName: string, parameters: Application, options?: ApplicationsCreateOrUpdateOptionalParams): Promise<ApplicationsCreateOrUpdateResponse>;
    /**
     * Updates an existing managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, applicationName: string, options?: ApplicationsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ApplicationsUpdateResponse>, ApplicationsUpdateResponse>>;
    /**
     * Updates an existing managed application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, applicationName: string, options?: ApplicationsUpdateOptionalParams): Promise<ApplicationsUpdateResponse>;
    /**
     * Gets the managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    getById(applicationId: string, options?: ApplicationsGetByIdOptionalParams): Promise<ApplicationsGetByIdResponse>;
    /**
     * Deletes the managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginDeleteById(applicationId: string, options?: ApplicationsDeleteByIdOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginDeleteByIdAndWait(applicationId: string, options?: ApplicationsDeleteByIdOptionalParams): Promise<void>;
    /**
     * Creates or updates a managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdateById(applicationId: string, parameters: Application, options?: ApplicationsCreateOrUpdateByIdOptionalParams): Promise<SimplePollerLike<OperationState<ApplicationsCreateOrUpdateByIdResponse>, ApplicationsCreateOrUpdateByIdResponse>>;
    /**
     * Creates or updates a managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param parameters Parameters supplied to the create or update a managed application.
     * @param options The options parameters.
     */
    beginCreateOrUpdateByIdAndWait(applicationId: string, parameters: Application, options?: ApplicationsCreateOrUpdateByIdOptionalParams): Promise<ApplicationsCreateOrUpdateByIdResponse>;
    /**
     * Updates an existing managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginUpdateById(applicationId: string, options?: ApplicationsUpdateByIdOptionalParams): Promise<SimplePollerLike<OperationState<ApplicationsUpdateByIdResponse>, ApplicationsUpdateByIdResponse>>;
    /**
     * Updates an existing managed application.
     * @param applicationId The fully qualified ID of the managed application, including the managed
     *                      application name and the managed application resource type. Use the format,
     *                      /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applications/{application-name}
     * @param options The options parameters.
     */
    beginUpdateByIdAndWait(applicationId: string, options?: ApplicationsUpdateByIdOptionalParams): Promise<ApplicationsUpdateByIdResponse>;
    /**
     * Refresh Permissions for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginRefreshPermissions(resourceGroupName: string, applicationName: string, options?: ApplicationsRefreshPermissionsOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Refresh Permissions for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    beginRefreshPermissionsAndWait(resourceGroupName: string, applicationName: string, options?: ApplicationsRefreshPermissionsOptionalParams): Promise<void>;
    /**
     * List allowed upgrade plans for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param options The options parameters.
     */
    listAllowedUpgradePlans(resourceGroupName: string, applicationName: string, options?: ApplicationsListAllowedUpgradePlansOptionalParams): Promise<ApplicationsListAllowedUpgradePlansResponse>;
    /**
     * Update access for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Request body parameters to list tokens.
     * @param options The options parameters.
     */
    beginUpdateAccess(resourceGroupName: string, applicationName: string, parameters: UpdateAccessDefinition, options?: ApplicationsUpdateAccessOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Update access for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Request body parameters to list tokens.
     * @param options The options parameters.
     */
    beginUpdateAccessAndWait(resourceGroupName: string, applicationName: string, parameters: UpdateAccessDefinition, options?: ApplicationsUpdateAccessOptionalParams): Promise<void>;
    /**
     * List tokens for application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationName The name of the managed application.
     * @param parameters Request body parameters to list tokens.
     * @param options The options parameters.
     */
    listTokens(resourceGroupName: string, applicationName: string, parameters: ListTokenRequest, options?: ApplicationsListTokensOptionalParams): Promise<ApplicationsListTokensResponse>;
}

/** Optional parameters. */
export declare interface ApplicationsCreateOrUpdateByIdOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdateById operation. */
export declare type ApplicationsCreateOrUpdateByIdResponse = Application;

/** Optional parameters. */
export declare interface ApplicationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApplicationsCreateOrUpdateResponse = Application;

/** Optional parameters. */
export declare interface ApplicationsDeleteByIdOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApplicationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApplicationsGetByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getById operation. */
export declare type ApplicationsGetByIdResponse = Application;

/** Optional parameters. */
export declare interface ApplicationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationsGetResponse = Application;

/** Optional parameters. */
export declare interface ApplicationsListAllowedUpgradePlansOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllowedUpgradePlans operation. */
export declare type ApplicationsListAllowedUpgradePlansResponse = AllowedUpgradePlansResult;

/** Optional parameters. */
export declare interface ApplicationsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ApplicationsListByResourceGroupNextResponse = ApplicationListResult;

/** Optional parameters. */
export declare interface ApplicationsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ApplicationsListByResourceGroupResponse = ApplicationListResult;

/** Optional parameters. */
export declare interface ApplicationsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ApplicationsListBySubscriptionNextResponse = ApplicationListResult;

/** Optional parameters. */
export declare interface ApplicationsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ApplicationsListBySubscriptionResponse = ApplicationListResult;

/** Optional parameters. */
export declare interface ApplicationsListTokensOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listTokens operation. */
export declare type ApplicationsListTokensResponse = ManagedIdentityTokenResult;

/** Optional parameters. */
export declare interface ApplicationsRefreshPermissionsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApplicationsUpdateAccessOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ApplicationsUpdateByIdOptionalParams extends coreClient.OperationOptions {
    /** Parameters supplied to update an existing managed application. */
    parameters?: ApplicationPatchable;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateById operation. */
export declare type ApplicationsUpdateByIdResponse = ApplicationPatchable;

/** Optional parameters. */
export declare interface ApplicationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Parameters supplied to update an existing managed application. */
    parameters?: ApplicationPatchable;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ApplicationsUpdateResponse = ApplicationPatchable;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for DeploymentMode. \
 * {@link KnownDeploymentMode} can be used interchangeably with DeploymentMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Incremental** \
 * **Complete**
 */
export declare type DeploymentMode = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Resource information. */
export declare interface GenericResource extends Resource {
    /** ID of the resource that manages this resource. */
    managedBy?: string;
    /** The SKU of the resource. */
    sku?: Sku;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Identity for the resource. */
export declare interface Identity {
    /**
     * The principal ID of resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The identity type. */
    type?: ResourceIdentityType;
    /** The list of user identities associated with the resource. The user identity dictionary key references will be resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedResourceIdentity;
    };
}

/**
 * Defines values for JitApprovalMode. \
 * {@link KnownJitApprovalMode} can be used interchangeably with JitApprovalMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **AutoApprove** \
 * **ManualApprove**
 */
export declare type JitApprovalMode = string;

/** JIT approver definition. */
export declare interface JitApproverDefinition {
    /** The approver service principal Id. */
    id: string;
    /** The approver type. */
    type?: JitApproverType;
    /** The approver display name. */
    displayName?: string;
}

/**
 * Defines values for JitApproverType. \
 * {@link KnownJitApproverType} can be used interchangeably with JitApproverType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **group**
 */
export declare type JitApproverType = string;

/** The JIT authorization policies. */
export declare interface JitAuthorizationPolicies {
    /** The the principal id that will be granted JIT access. */
    principalId: string;
    /** The role definition id that will be granted to the Principal. */
    roleDefinitionId: string;
}

/** Information about JIT request definition. */
export declare interface JitRequestDefinition extends Resource {
    /** The parent application id. */
    applicationResourceId?: string;
    /**
     * The publisher tenant id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisherTenantId?: string;
    /** The JIT authorization policies. */
    jitAuthorizationPolicies?: JitAuthorizationPolicies[];
    /** The JIT request properties. */
    jitSchedulingPolicy?: JitSchedulingPolicy;
    /**
     * The JIT request provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The JIT request state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly jitRequestState?: JitRequestState;
    /**
     * The client entity that created the JIT request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdBy?: ApplicationClientDetails;
    /**
     * The client entity that last updated the JIT request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedBy?: ApplicationClientDetails;
}

/** List of JIT requests. */
export declare interface JitRequestDefinitionListResult {
    /** The array of Jit request definition. */
    value?: JitRequestDefinition[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** The JIT request metadata. */
export declare interface JitRequestMetadata {
    /** The origin request id. */
    originRequestId?: string;
    /** The requestor id. */
    requestorId?: string;
    /** The publisher's tenant name. */
    tenantDisplayName?: string;
    /** The subject display name. */
    subjectDisplayName?: string;
}

/** Information about JIT request. */
export declare interface JitRequestPatchable {
    /** Jit request tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a JitRequests. */
export declare interface JitRequests {
    /**
     * Gets the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, jitRequestName: string, options?: JitRequestsGetOptionalParams): Promise<JitRequestsGetResponse>;
    /**
     * Creates or updates the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, jitRequestName: string, parameters: JitRequestDefinition, options?: JitRequestsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<JitRequestsCreateOrUpdateResponse>, JitRequestsCreateOrUpdateResponse>>;
    /**
     * Creates or updates the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, jitRequestName: string, parameters: JitRequestDefinition, options?: JitRequestsCreateOrUpdateOptionalParams): Promise<JitRequestsCreateOrUpdateResponse>;
    /**
     * Updates the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param parameters Parameters supplied to the update JIT request.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, jitRequestName: string, parameters: JitRequestPatchable, options?: JitRequestsUpdateOptionalParams): Promise<JitRequestsUpdateResponse>;
    /**
     * Deletes the JIT request.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jitRequestName The name of the JIT request.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, jitRequestName: string, options?: JitRequestsDeleteOptionalParams): Promise<void>;
    /**
     * Lists all JIT requests within the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: JitRequestsListBySubscriptionOptionalParams): Promise<JitRequestsListBySubscriptionResponse>;
    /**
     * Lists all JIT requests within the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: JitRequestsListByResourceGroupOptionalParams): Promise<JitRequestsListByResourceGroupResponse>;
}

/** Optional parameters. */
export declare interface JitRequestsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type JitRequestsCreateOrUpdateResponse = JitRequestDefinition;

/** Optional parameters. */
export declare interface JitRequestsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface JitRequestsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type JitRequestsGetResponse = JitRequestDefinition;

/** Optional parameters. */
export declare interface JitRequestsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type JitRequestsListByResourceGroupResponse = JitRequestDefinitionListResult;

/** Optional parameters. */
export declare interface JitRequestsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type JitRequestsListBySubscriptionResponse = JitRequestDefinitionListResult;

/**
 * Defines values for JitRequestState. \
 * {@link KnownJitRequestState} can be used interchangeably with JitRequestState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Pending** \
 * **Approved** \
 * **Denied** \
 * **Failed** \
 * **Canceled** \
 * **Expired** \
 * **Timeout**
 */
export declare type JitRequestState = string;

/** Optional parameters. */
export declare interface JitRequestsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type JitRequestsUpdateResponse = JitRequestDefinition;

/** The JIT scheduling policies. */
export declare interface JitSchedulingPolicy {
    /** The type of JIT schedule. */
    type: JitSchedulingType;
    /** The required duration of the JIT request. */
    duration: string;
    /** The start time of the request. */
    startTime: Date;
}

/**
 * Defines values for JitSchedulingType. \
 * {@link KnownJitSchedulingType} can be used interchangeably with JitSchedulingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Once** \
 * **Recurring**
 */
export declare type JitSchedulingType = string;

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link ApplicationArtifactName} that the service accepts. */
export declare enum KnownApplicationArtifactName {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** ViewDefinition */
    ViewDefinition = "ViewDefinition",
    /** Authorizations */
    Authorizations = "Authorizations",
    /** CustomRoleDefinition */
    CustomRoleDefinition = "CustomRoleDefinition"
}

/** Known values of {@link ApplicationDefinitionArtifactName} that the service accepts. */
export declare enum KnownApplicationDefinitionArtifactName {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** ApplicationResourceTemplate */
    ApplicationResourceTemplate = "ApplicationResourceTemplate",
    /** CreateUiDefinition */
    CreateUiDefinition = "CreateUiDefinition",
    /** MainTemplateParameters */
    MainTemplateParameters = "MainTemplateParameters"
}

/** Known values of {@link ApplicationManagementMode} that the service accepts. */
export declare enum KnownApplicationManagementMode {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Unmanaged */
    Unmanaged = "Unmanaged",
    /** Managed */
    Managed = "Managed"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DeploymentMode} that the service accepts. */
export declare enum KnownDeploymentMode {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Incremental */
    Incremental = "Incremental",
    /** Complete */
    Complete = "Complete"
}

/** Known values of {@link JitApprovalMode} that the service accepts. */
export declare enum KnownJitApprovalMode {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** AutoApprove */
    AutoApprove = "AutoApprove",
    /** ManualApprove */
    ManualApprove = "ManualApprove"
}

/** Known values of {@link JitApproverType} that the service accepts. */
export declare enum KnownJitApproverType {
    /** User */
    User = "user",
    /** Group */
    Group = "group"
}

/** Known values of {@link JitRequestState} that the service accepts. */
export declare enum KnownJitRequestState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Denied */
    Denied = "Denied",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Expired */
    Expired = "Expired",
    /** Timeout */
    Timeout = "Timeout"
}

/** Known values of {@link JitSchedulingType} that the service accepts. */
export declare enum KnownJitSchedulingType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Once */
    Once = "Once",
    /** Recurring */
    Recurring = "Recurring"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Accepted */
    Accepted = "Accepted",
    /** Running */
    Running = "Running",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link Status} that the service accepts. */
export declare enum KnownStatus {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Elevate */
    Elevate = "Elevate",
    /** Remove */
    Remove = "Remove"
}

/** Known values of {@link Substatus} that the service accepts. */
export declare enum KnownSubstatus {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Approved */
    Approved = "Approved",
    /** Denied */
    Denied = "Denied",
    /** Failed */
    Failed = "Failed",
    /** Expired */
    Expired = "Expired",
    /** Timeout */
    Timeout = "Timeout"
}

/** Optional parameters. */
export declare interface ListOperationsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperationsNext operation. */
export declare type ListOperationsNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface ListOperationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperations operation. */
export declare type ListOperationsResponse = OperationListResult;

/** List token request body. */
export declare interface ListTokenRequest {
    /** The authorization audience. */
    authorizationAudience?: string;
    /** The user assigned identities. */
    userAssignedIdentities?: string[];
}

/** The managed identity token for the managed app resource. */
export declare interface ManagedIdentityToken {
    /** The requested access token. */
    accessToken?: string;
    /** The number of seconds the access token will be valid. */
    expiresIn?: string;
    /** The timespan when the access token expires. This is represented as the number of seconds from epoch. */
    expiresOn?: string;
    /** The timespan when the access token takes effect. This is represented as the number of seconds from epoch. */
    notBefore?: string;
    /** The aud (audience) the access token was request for. This is the same as what was provided in the listTokens request. */
    authorizationAudience?: string;
    /** The Azure resource ID for the issued token. This is either the managed application ID or the user-assigned identity ID. */
    resourceId?: string;
    /** The type of the token. */
    tokenType?: string;
}

/** The array of managed identity tokens. */
export declare interface ManagedIdentityTokenResult {
    /** The array of managed identity tokens. */
    value?: ManagedIdentityToken[];
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/** Plan for the managed application. */
export declare interface Plan {
    /** The plan name. */
    name: string;
    /** The publisher ID. */
    publisher: string;
    /** The product code. */
    product: string;
    /** The promotion code. */
    promotionCode?: string;
    /** The plan's version. */
    version: string;
}

/** Plan for the managed application. */
export declare interface PlanPatchable {
    /** The plan name. */
    name?: string;
    /** The publisher ID. */
    publisher?: string;
    /** The product code. */
    product?: string;
    /** The promotion code. */
    promotionCode?: string;
    /** The plan's version. */
    version?: string;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Accepted** \
 * **Running** \
 * **Deleting** \
 * **Deleted** \
 * **Canceled** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export declare type ProvisioningState = string;

/** Resource information. */
export declare interface Resource {
    /**
     * Resource ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location */
    location?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned, UserAssigned" | "None";

/** SKU for the resource. */
export declare interface Sku {
    /** The SKU name. */
    name: string;
    /** The SKU tier. */
    tier?: string;
    /** The SKU size. */
    size?: string;
    /** The SKU family. */
    family?: string;
    /** The SKU model. */
    model?: string;
    /** The SKU capacity. */
    capacity?: number;
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Elevate** \
 * **Remove**
 */
export declare type Status = string;

/**
 * Defines values for Substatus. \
 * {@link KnownSubstatus} can be used interchangeably with Substatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Approved** \
 * **Denied** \
 * **Failed** \
 * **Expired** \
 * **Timeout**
 */
export declare type Substatus = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Update access request definition. */
export declare interface UpdateAccessDefinition {
    /** The approver name. */
    approver?: string;
    /** The JIT request metadata. */
    metadata: JitRequestMetadata;
    /** The JIT status. */
    status: Status;
    /** The JIT status. */
    subStatus: Substatus;
}

/** Represents the user assigned identity that is contained within the UserAssignedIdentities dictionary on ResourceIdentity */
export declare interface UserAssignedResourceIdentity {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

export { }
