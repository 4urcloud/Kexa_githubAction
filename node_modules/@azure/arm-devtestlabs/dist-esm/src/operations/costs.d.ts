import { Costs } from "../operationsInterfaces";
import { DevTestLabsClient } from "../devTestLabsClient";
import { CostsGetOptionalParams, CostsGetResponse, LabCost, CostsCreateOrUpdateOptionalParams, CostsCreateOrUpdateResponse } from "../models";
/** Class containing Costs operations. */
export declare class CostsImpl implements Costs {
    private readonly client;
    /**
     * Initialize a new instance of the class Costs class.
     * @param client Reference to the service client
     */
    constructor(client: DevTestLabsClient);
    /**
     * Get cost.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the cost.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: CostsGetOptionalParams): Promise<CostsGetResponse>;
    /**
     * Create or replace an existing cost.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the cost.
     * @param labCost A cost item.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labCost: LabCost, options?: CostsCreateOrUpdateOptionalParams): Promise<CostsCreateOrUpdateResponse>;
}
//# sourceMappingURL=costs.d.ts.map