import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Schedules } from "../operationsInterfaces";
import { DevTestLabsClient } from "../devTestLabsClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Schedule, SchedulesListOptionalParams, SchedulesListApplicableOptionalParams, SchedulesGetOptionalParams, SchedulesGetResponse, SchedulesCreateOrUpdateOptionalParams, SchedulesCreateOrUpdateResponse, SchedulesDeleteOptionalParams, ScheduleFragment, SchedulesUpdateOptionalParams, SchedulesUpdateResponse, SchedulesExecuteOptionalParams } from "../models";
/** Class containing Schedules operations. */
export declare class SchedulesImpl implements Schedules {
    private readonly client;
    /**
     * Initialize a new instance of the class Schedules class.
     * @param client Reference to the service client
     */
    constructor(client: DevTestLabsClient);
    /**
     * List schedules in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: SchedulesListOptionalParams): PagedAsyncIterableIterator<Schedule>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists all applicable schedules
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    listApplicable(resourceGroupName: string, labName: string, name: string, options?: SchedulesListApplicableOptionalParams): PagedAsyncIterableIterator<Schedule>;
    private listApplicablePagingPage;
    private listApplicablePagingAll;
    /**
     * List schedules in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: SchedulesGetOptionalParams): Promise<SchedulesGetResponse>;
    /**
     * Create or replace an existing schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, schedule: Schedule, options?: SchedulesCreateOrUpdateOptionalParams): Promise<SchedulesCreateOrUpdateResponse>;
    /**
     * Delete schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, name: string, options?: SchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of schedules. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, schedule: ScheduleFragment, options?: SchedulesUpdateOptionalParams): Promise<SchedulesUpdateResponse>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecute(resourceGroupName: string, labName: string, name: string, options?: SchedulesExecuteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecuteAndWait(resourceGroupName: string, labName: string, name: string, options?: SchedulesExecuteOptionalParams): Promise<void>;
    /**
     * Lists all applicable schedules
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    private _listApplicable;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListApplicableNext
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param nextLink The nextLink from the previous successful call to the ListApplicable method.
     * @param options The options parameters.
     */
    private _listApplicableNext;
}
//# sourceMappingURL=schedules.d.ts.map