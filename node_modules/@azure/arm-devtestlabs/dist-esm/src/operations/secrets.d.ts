import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Secrets } from "../operationsInterfaces";
import { DevTestLabsClient } from "../devTestLabsClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Secret, SecretsListOptionalParams, SecretsGetOptionalParams, SecretsGetResponse, SecretsCreateOrUpdateOptionalParams, SecretsCreateOrUpdateResponse, SecretsDeleteOptionalParams, SecretFragment, SecretsUpdateOptionalParams, SecretsUpdateResponse } from "../models";
/** Class containing Secrets operations. */
export declare class SecretsImpl implements Secrets {
    private readonly client;
    /**
     * Initialize a new instance of the class Secrets class.
     * @param client Reference to the service client
     */
    constructor(client: DevTestLabsClient);
    /**
     * List secrets in a given user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: SecretsListOptionalParams): PagedAsyncIterableIterator<Secret>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List secrets in a given user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get secret.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: SecretsGetOptionalParams): Promise<SecretsGetResponse>;
    /**
     * Create or replace an existing secret. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param secret A secret.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, secret: Secret, options?: SecretsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SecretsCreateOrUpdateResponse>, SecretsCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing secret. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param secret A secret.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, userName: string, name: string, secret: Secret, options?: SecretsCreateOrUpdateOptionalParams): Promise<SecretsCreateOrUpdateResponse>;
    /**
     * Delete secret.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, userName: string, name: string, options?: SecretsDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of secrets. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param secret A secret.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, userName: string, name: string, secret: SecretFragment, options?: SecretsUpdateOptionalParams): Promise<SecretsUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=secrets.d.ts.map