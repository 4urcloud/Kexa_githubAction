import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Policies } from "../operationsInterfaces";
import { DevTestLabsClient } from "../devTestLabsClient";
import { Policy, PoliciesListOptionalParams, PoliciesGetOptionalParams, PoliciesGetResponse, PoliciesCreateOrUpdateOptionalParams, PoliciesCreateOrUpdateResponse, PoliciesDeleteOptionalParams, PolicyFragment, PoliciesUpdateOptionalParams, PoliciesUpdateResponse } from "../models";
/** Class containing Policies operations. */
export declare class PoliciesImpl implements Policies {
    private readonly client;
    /**
     * Initialize a new instance of the class Policies class.
     * @param client Reference to the service client
     */
    constructor(client: DevTestLabsClient);
    /**
     * List policies in a given policy set.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, policySetName: string, options?: PoliciesListOptionalParams): PagedAsyncIterableIterator<Policy>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List policies in a given policy set.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get policy.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: PoliciesGetOptionalParams): Promise<PoliciesGetResponse>;
    /**
     * Create or replace an existing policy.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param policy A Policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Policy, options?: PoliciesCreateOrUpdateOptionalParams): Promise<PoliciesCreateOrUpdateResponse>;
    /**
     * Delete policy.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: PoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of policies. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param policy A Policy.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: PolicyFragment, options?: PoliciesUpdateOptionalParams): Promise<PoliciesUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=policies.d.ts.map