import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Users } from "../operationsInterfaces";
import { DevTestLabsClient } from "../devTestLabsClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { User, UsersListOptionalParams, UsersGetOptionalParams, UsersGetResponse, UsersCreateOrUpdateOptionalParams, UsersCreateOrUpdateResponse, UsersDeleteOptionalParams, UserFragment, UsersUpdateOptionalParams, UsersUpdateResponse } from "../models";
/** Class containing Users operations. */
export declare class UsersImpl implements Users {
    private readonly client;
    /**
     * Initialize a new instance of the class Users class.
     * @param client Reference to the service client
     */
    constructor(client: DevTestLabsClient);
    /**
     * List user profiles in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: UsersListOptionalParams): PagedAsyncIterableIterator<User>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List user profiles in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: UsersGetOptionalParams): Promise<UsersGetResponse>;
    /**
     * Create or replace an existing user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param user Profile of a lab user.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, user: User, options?: UsersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<UsersCreateOrUpdateResponse>, UsersCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param user Profile of a lab user.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, name: string, user: User, options?: UsersCreateOrUpdateOptionalParams): Promise<UsersCreateOrUpdateResponse>;
    /**
     * Delete user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, name: string, options?: UsersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, name: string, options?: UsersDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of user profiles. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param user Profile of a lab user.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, user: UserFragment, options?: UsersUpdateOptionalParams): Promise<UsersUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=users.d.ts.map