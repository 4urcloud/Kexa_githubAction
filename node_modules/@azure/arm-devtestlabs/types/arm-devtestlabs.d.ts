import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level. */
export declare interface ApplicableSchedule extends Resource {
    /** The auto-shutdown schedule, if one has been set at the lab or lab resource level. */
    labVmsShutdown?: Schedule;
    /** The auto-startup schedule, if one has been set at the lab or lab resource level. */
    labVmsStartup?: Schedule;
}

/** Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on lab level. */
export declare interface ApplicableScheduleFragment extends UpdateResource {
}

/** Request body for applying artifacts to a virtual machine. */
export declare interface ApplyArtifactsRequest {
    /** The list of artifacts to apply. */
    artifacts?: ArtifactInstallProperties[];
}

/** An Azure Resource Manager template. */
export declare interface ArmTemplate extends Resource {
    /**
     * The display name of the ARM template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The description of the ARM template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The publisher of the ARM template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisher?: string;
    /**
     * The URI to the icon of the ARM template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly icon?: string;
    /**
     * The contents of the ARM template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contents?: Record<string, unknown>;
    /**
     * The creation date of the armTemplate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * File name and parameter values information from all azuredeploy.*.parameters.json for the ARM template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parametersValueFilesInfo?: ParametersValueFileInfo[];
    /**
     * Whether or not ARM template is enabled for use by lab user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enabled?: boolean;
}

/** Information about a generated ARM template. */
export declare interface ArmTemplateInfo {
    /** The template's contents. */
    template?: Record<string, unknown>;
    /** The parameters of the ARM template. */
    parameters?: Record<string, unknown>;
}

/** The response of a list operation. */
export declare interface ArmTemplateList {
    /** Results of the list operation. */
    value?: ArmTemplate[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Properties of an Azure Resource Manager template parameter. */
export declare interface ArmTemplateParameterProperties {
    /** The name of the template parameter. */
    name?: string;
    /** The value of the template parameter. */
    value?: string;
}

/** Interface representing a ArmTemplates. */
export declare interface ArmTemplates {
    /**
     * List azure resource manager templates in a given artifact source.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param artifactSourceName The name of the artifact source.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, artifactSourceName: string, options?: ArmTemplatesListOptionalParams): PagedAsyncIterableIterator<ArmTemplate>;
    /**
     * Get azure resource manager template.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param artifactSourceName The name of the artifact source.
     * @param name The name of the azure resource manager template.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: ArmTemplatesGetOptionalParams): Promise<ArmTemplatesGetResponse>;
}

/** Optional parameters. */
export declare interface ArmTemplatesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=displayName)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type ArmTemplatesGetResponse = ArmTemplate;

/** Optional parameters. */
export declare interface ArmTemplatesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=displayName)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type ArmTemplatesListNextResponse = ArmTemplateList;

/** Optional parameters. */
export declare interface ArmTemplatesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=displayName)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type ArmTemplatesListResponse = ArmTemplateList;

/** An artifact. */
export declare interface Artifact extends Resource {
    /**
     * The artifact's title.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly title?: string;
    /**
     * The artifact's description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The artifact's publisher.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisher?: string;
    /**
     * The file path to the artifact.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filePath?: string;
    /**
     * The URI to the artifact icon.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly icon?: string;
    /**
     * The artifact's target OS.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetOsType?: string;
    /**
     * The artifact's parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: Record<string, unknown>;
    /**
     * The artifact's creation date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
}

/** Properties of an artifact deployment. */
export declare interface ArtifactDeploymentStatusProperties {
    /** The deployment status of the artifact. */
    deploymentStatus?: string;
    /** The total count of the artifacts that were successfully applied. */
    artifactsApplied?: number;
    /** The total count of the artifacts that were tentatively applied. */
    totalArtifacts?: number;
}

/** Properties of an artifact. */
export declare interface ArtifactInstallProperties {
    /** The artifact's identifier. */
    artifactId?: string;
    /** The artifact's title. */
    artifactTitle?: string;
    /** The parameters of the artifact. */
    parameters?: ArtifactParameterProperties[];
    /** The status of the artifact. */
    status?: string;
    /** The status message from the deployment. */
    deploymentStatusMessage?: string;
    /** The status message from the virtual machine extension. */
    vmExtensionStatusMessage?: string;
    /** The time that the artifact starts to install on the virtual machine. */
    installTime?: Date;
}

/** The response of a list operation. */
export declare interface ArtifactList {
    /** Results of the list operation. */
    value?: Artifact[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Properties of an artifact parameter. */
export declare interface ArtifactParameterProperties {
    /** The name of the artifact parameter. */
    name?: string;
    /** The value of the artifact parameter. */
    value?: string;
}

/** Interface representing a Artifacts. */
export declare interface Artifacts {
    /**
     * List artifacts in a given artifact source.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param artifactSourceName The name of the artifact source.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, artifactSourceName: string, options?: ArtifactsListOptionalParams): PagedAsyncIterableIterator<Artifact>;
    /**
     * Get artifact.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param artifactSourceName The name of the artifact source.
     * @param name The name of the artifact.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, options?: ArtifactsGetOptionalParams): Promise<ArtifactsGetResponse>;
    /**
     * Generates an ARM template for the given artifact, uploads the required files to a storage account,
     * and validates the generated artifact.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param artifactSourceName The name of the artifact source.
     * @param name The name of the artifact.
     * @param generateArmTemplateRequest Parameters for generating an ARM template for deploying artifacts.
     * @param options The options parameters.
     */
    generateArmTemplate(resourceGroupName: string, labName: string, artifactSourceName: string, name: string, generateArmTemplateRequest: GenerateArmTemplateRequest, options?: ArtifactsGenerateArmTemplateOptionalParams): Promise<ArtifactsGenerateArmTemplateResponse>;
}

/** Optional parameters. */
export declare interface ArtifactsGenerateArmTemplateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generateArmTemplate operation. */
export declare type ArtifactsGenerateArmTemplateResponse = ArmTemplateInfo;

/** Optional parameters. */
export declare interface ArtifactsGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=title)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type ArtifactsGetResponse = Artifact;

/** Optional parameters. */
export declare interface ArtifactsListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=title)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type ArtifactsListNextResponse = ArtifactList;

/** Optional parameters. */
export declare interface ArtifactsListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=title)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type ArtifactsListResponse = ArtifactList;

/** Properties of an artifact source. */
export declare interface ArtifactSource extends Resource {
    /** The artifact source's display name. */
    displayName?: string;
    /** The artifact source's URI. */
    uri?: string;
    /** The artifact source's type. */
    sourceType?: SourceControlType;
    /** The folder containing artifacts. */
    folderPath?: string;
    /** The folder containing Azure Resource Manager templates. */
    armTemplateFolderPath?: string;
    /** The artifact source's branch reference. */
    branchRef?: string;
    /** The security token to authenticate to the artifact source. */
    securityToken?: string;
    /** Indicates if the artifact source is enabled (values: Enabled, Disabled). */
    status?: EnableStatus;
    /**
     * The artifact source's creation date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** Properties of an artifact source. */
export declare interface ArtifactSourceFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface ArtifactSourceList {
    /** Results of the list operation. */
    value?: ArtifactSource[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a ArtifactSources. */
export declare interface ArtifactSources {
    /**
     * List artifact sources in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: ArtifactSourcesListOptionalParams): PagedAsyncIterableIterator<ArtifactSource>;
    /**
     * Get artifact source.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the artifact source.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: ArtifactSourcesGetOptionalParams): Promise<ArtifactSourcesGetResponse>;
    /**
     * Create or replace an existing artifact source.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the artifact source.
     * @param artifactSource Properties of an artifact source.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, artifactSource: ArtifactSource, options?: ArtifactSourcesCreateOrUpdateOptionalParams): Promise<ArtifactSourcesCreateOrUpdateResponse>;
    /**
     * Delete artifact source.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the artifact source.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, name: string, options?: ArtifactSourcesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of artifact sources. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the artifact source.
     * @param artifactSource Properties of an artifact source.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, artifactSource: ArtifactSourceFragment, options?: ArtifactSourcesUpdateOptionalParams): Promise<ArtifactSourcesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ArtifactSourcesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ArtifactSourcesCreateOrUpdateResponse = ArtifactSource;

/** Optional parameters. */
export declare interface ArtifactSourcesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ArtifactSourcesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=displayName)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type ArtifactSourcesGetResponse = ArtifactSource;

/** Optional parameters. */
export declare interface ArtifactSourcesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=displayName)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type ArtifactSourcesListNextResponse = ArtifactSourceList;

/** Optional parameters. */
export declare interface ArtifactSourcesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=displayName)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type ArtifactSourcesListResponse = ArtifactSourceList;

/** Optional parameters. */
export declare interface ArtifactSourcesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ArtifactSourcesUpdateResponse = ArtifactSource;

/** Properties of the disk to attach. */
export declare interface AttachDiskProperties {
    /** The resource ID of the Lab virtual machine to which the disk is attached. */
    leasedByLabVmId?: string;
}

/** Properties to attach new disk to the Virtual Machine. */
export declare interface AttachNewDataDiskOptions {
    /** Size of the disk to be attached in Gibibytes. */
    diskSizeGiB?: number;
    /** The name of the disk to be attached. */
    diskName?: string;
    /** The storage type for the disk (i.e. Standard, Premium). */
    diskType?: StorageType;
}

/** Parameters for creating multiple virtual machines as a single action. */
export declare interface BulkCreationParameters {
    /** The number of virtual machine instances to create. */
    instanceCount?: number;
}

/** Error from a REST request. */
export declare interface CloudError {
    /** The cloud error that occurred */
    error?: CloudErrorBody;
}

/** Body of an error from a REST request. */
export declare interface CloudErrorBody {
    /** The error code. */
    code?: string;
    /** The error message. */
    message?: string;
    /** The error target. */
    target?: string;
    /** Inner errors. */
    details?: CloudErrorBody[];
}

/** A data disks attached to a virtual machine. */
export declare interface ComputeDataDisk {
    /** Gets data disk name. */
    name?: string;
    /** When backed by a blob, the URI of underlying blob. */
    diskUri?: string;
    /** When backed by managed disk, this is the ID of the compute disk resource. */
    managedDiskId?: string;
    /** Gets data disk size in GiB. */
    diskSizeGiB?: number;
}

/** Status information about a virtual machine. */
export declare interface ComputeVmInstanceViewStatus {
    /** Gets the status Code. */
    code?: string;
    /** Gets the short localizable label for the status. */
    displayStatus?: string;
    /** Gets the message associated with the status. */
    message?: string;
}

/** Properties of a virtual machine returned by the Microsoft.Compute API. */
export declare interface ComputeVmProperties {
    /** Gets the statuses of the virtual machine. */
    statuses?: ComputeVmInstanceViewStatus[];
    /** Gets the OS type of the virtual machine. */
    osType?: string;
    /** Gets the size of the virtual machine. */
    vmSize?: string;
    /** Gets the network interface ID of the virtual machine. */
    networkInterfaceId?: string;
    /** Gets OS disk blob uri for the virtual machine. */
    osDiskId?: string;
    /** Gets data disks blob uri for the virtual machine. */
    dataDiskIds?: string[];
    /** Gets all data disks attached to the virtual machine. */
    dataDisks?: ComputeDataDisk[];
}

/** Interface representing a Costs. */
export declare interface Costs {
    /**
     * Get cost.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the cost.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: CostsGetOptionalParams): Promise<CostsGetResponse>;
    /**
     * Create or replace an existing cost.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the cost.
     * @param labCost A cost item.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, labCost: LabCost, options?: CostsCreateOrUpdateOptionalParams): Promise<CostsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface CostsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type CostsCreateOrUpdateResponse = LabCost;

/** Optional parameters. */
export declare interface CostsGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=labCostDetails)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type CostsGetResponse = LabCost;

/** Properties of a cost threshold item. */
export declare interface CostThresholdProperties {
    /** The ID of the cost threshold item. */
    thresholdId?: string;
    /** The value of the percentage cost threshold. */
    percentageThreshold?: PercentageCostThresholdProperties;
    /** Indicates whether this threshold will be displayed on cost charts. */
    displayOnChart?: CostThresholdStatus;
    /** Indicates whether notifications will be sent when this threshold is exceeded. */
    sendNotificationWhenExceeded?: CostThresholdStatus;
    /** Indicates the datetime when notifications were last sent for this threshold. */
    notificationSent?: string;
}

/**
 * Defines values for CostThresholdStatus. \
 * {@link KnownCostThresholdStatus} can be used interchangeably with CostThresholdStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type CostThresholdStatus = string;

/**
 * Defines values for CostType. \
 * {@link KnownCostType} can be used interchangeably with CostType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unavailable** \
 * **Reported** \
 * **Projected**
 */
export declare type CostType = string;

/** A custom image. */
export declare interface CustomImage extends Resource {
    /** The virtual machine from which the image is to be created. */
    vm?: CustomImagePropertiesFromVm;
    /** The VHD from which the image is to be created. */
    vhd?: CustomImagePropertiesCustom;
    /** The description of the custom image. */
    description?: string;
    /** The author of the custom image. */
    author?: string;
    /**
     * The creation date of the custom image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /** The Managed Image Id backing the custom image. */
    managedImageId?: string;
    /** The Managed Snapshot Id backing the custom image. */
    managedSnapshotId?: string;
    /** Storage information about the data disks present in the custom image */
    dataDiskStorageInfo?: DataDiskStorageTypeInfo[];
    /** Storage information about the plan related to this custom image */
    customImagePlan?: CustomImagePropertiesFromPlan;
    /** Whether or not the custom images underlying offer/plan has been enabled for programmatic deployment */
    isPlanAuthorized?: boolean;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** A custom image. */
export declare interface CustomImageFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface CustomImageList {
    /** Results of the list operation. */
    value?: CustomImage[];
    /** Link for next set of results. */
    nextLink?: string;
}

/**
 * Defines values for CustomImageOsType. \
 * {@link KnownCustomImageOsType} can be used interchangeably with CustomImageOsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux** \
 * **None**
 */
export declare type CustomImageOsType = string;

/** Properties for creating a custom image from a VHD. */
export declare interface CustomImagePropertiesCustom {
    /** The image name. */
    imageName?: string;
    /** Indicates whether sysprep has been run on the VHD. */
    sysPrep?: boolean;
    /** The OS type of the custom image (i.e. Windows, Linux) */
    osType: CustomImageOsType;
}

/** Properties for plan on a custom image. */
export declare interface CustomImagePropertiesFromPlan {
    /** The id of the plan, equivalent to name of the plan */
    id?: string;
    /** The publisher for the plan from the marketplace image the custom image is derived from */
    publisher?: string;
    /** The offer for the plan from the marketplace image the custom image is derived from */
    offer?: string;
}

/** Properties for creating a custom image from a virtual machine. */
export declare interface CustomImagePropertiesFromVm {
    /** The source vm identifier. */
    sourceVmId?: string;
    /** The Windows OS information of the VM. */
    windowsOsInfo?: WindowsOsInfo;
    /** The Linux OS information of the VM. */
    linuxOsInfo?: LinuxOsInfo;
}

/** Interface representing a CustomImages. */
export declare interface CustomImages {
    /**
     * List custom images in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: CustomImagesListOptionalParams): PagedAsyncIterableIterator<CustomImage>;
    /**
     * Get custom image.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the custom image.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: CustomImagesGetOptionalParams): Promise<CustomImagesGetResponse>;
    /**
     * Create or replace an existing custom image. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the custom image.
     * @param customImage A custom image.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, customImage: CustomImage, options?: CustomImagesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<CustomImagesCreateOrUpdateResponse>, CustomImagesCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing custom image. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the custom image.
     * @param customImage A custom image.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, name: string, customImage: CustomImage, options?: CustomImagesCreateOrUpdateOptionalParams): Promise<CustomImagesCreateOrUpdateResponse>;
    /**
     * Delete custom image. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the custom image.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, name: string, options?: CustomImagesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete custom image. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the custom image.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, name: string, options?: CustomImagesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of custom images. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the custom image.
     * @param customImage A custom image.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, customImage: CustomImageFragment, options?: CustomImagesUpdateOptionalParams): Promise<CustomImagesUpdateResponse>;
}

/** Optional parameters. */
export declare interface CustomImagesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CustomImagesCreateOrUpdateResponse = CustomImage;

/** Optional parameters. */
export declare interface CustomImagesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CustomImagesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=vm)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type CustomImagesGetResponse = CustomImage;

/** Optional parameters. */
export declare interface CustomImagesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=vm)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type CustomImagesListNextResponse = CustomImageList;

/** Optional parameters. */
export declare interface CustomImagesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=vm)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type CustomImagesListResponse = CustomImageList;

/** Optional parameters. */
export declare interface CustomImagesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type CustomImagesUpdateResponse = CustomImage;

/** Request body for adding a new or existing data disk to a virtual machine. */
export declare interface DataDiskProperties {
    /** Specifies options to attach a new disk to the virtual machine. */
    attachNewDataDiskOptions?: AttachNewDataDiskOptions;
    /** Specifies the existing lab disk id to attach to virtual machine. */
    existingLabDiskId?: string;
    /** Caching option for a data disk (i.e. None, ReadOnly, ReadWrite). */
    hostCaching?: HostCachingOptions;
}

/** Storage information about the data disks present in the custom image */
export declare interface DataDiskStorageTypeInfo {
    /** Disk Lun */
    lun?: string;
    /** Disk Storage Type */
    storageType?: StorageType;
}

/** Properties of a daily schedule. */
export declare interface DayDetails {
    /** The time of day the schedule will occur. */
    time?: string;
}

/** Request body for detaching data disk from a virtual machine. */
export declare interface DetachDataDiskProperties {
    /** Specifies the disk resource ID to detach from virtual machine. */
    existingLabDiskId?: string;
}

/** Properties of the disk to detach. */
export declare interface DetachDiskProperties {
    /** The resource ID of the Lab VM to which the disk is attached. */
    leasedByLabVmId?: string;
}

export declare class DevTestLabsClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DevTestLabsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DevTestLabsClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    providerOperations: ProviderOperations;
    labs: Labs;
    operations: Operations;
    globalSchedules: GlobalSchedules;
    artifactSources: ArtifactSources;
    armTemplates: ArmTemplates;
    artifacts: Artifacts;
    costs: Costs;
    customImages: CustomImages;
    formulas: Formulas;
    galleryImages: GalleryImages;
    notificationChannels: NotificationChannels;
    policySets: PolicySets;
    policies: Policies;
    schedules: Schedules;
    serviceRunners: ServiceRunners;
    users: Users;
    disks: Disks;
    environments: Environments;
    secrets: Secrets;
    serviceFabrics: ServiceFabrics;
    serviceFabricSchedules: ServiceFabricSchedules;
    virtualMachines: VirtualMachines;
    virtualMachineSchedules: VirtualMachineSchedules;
    virtualNetworks: VirtualNetworks;
}

/** Optional parameters. */
export declare interface DevTestLabsClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** A Disk. */
export declare interface Disk extends Resource {
    /** The storage type for the disk (i.e. Standard, Premium). */
    diskType?: StorageType;
    /** The size of the disk in Gibibytes. */
    diskSizeGiB?: number;
    /** The resource ID of the VM to which this disk is leased. */
    leasedByLabVmId?: string;
    /** When backed by a blob, the name of the VHD blob without extension. */
    diskBlobName?: string;
    /** When backed by a blob, the URI of underlying blob. */
    diskUri?: string;
    /** When backed by a blob, the storage account where the blob is. */
    storageAccountId?: string;
    /**
     * The creation date of the disk.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /** The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite). */
    hostCaching?: string;
    /** When backed by managed disk, this is the ID of the compute disk resource. */
    managedDiskId?: string;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** A Disk. */
export declare interface DiskFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface DiskList {
    /** Results of the list operation. */
    value?: Disk[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a Disks. */
export declare interface Disks {
    /**
     * List disks in a given user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: DisksListOptionalParams): PagedAsyncIterableIterator<Disk>;
    /**
     * Get disk.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: DisksGetOptionalParams): Promise<DisksGetResponse>;
    /**
     * Create or replace an existing disk. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param disk A Disk.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, disk: Disk, options?: DisksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DisksCreateOrUpdateResponse>, DisksCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing disk. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param disk A Disk.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, userName: string, name: string, disk: Disk, options?: DisksCreateOrUpdateOptionalParams): Promise<DisksCreateOrUpdateResponse>;
    /**
     * Delete disk. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, userName: string, name: string, options?: DisksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete disk. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, userName: string, name: string, options?: DisksDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of disks. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param disk A Disk.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, userName: string, name: string, disk: DiskFragment, options?: DisksUpdateOptionalParams): Promise<DisksUpdateResponse>;
    /**
     * Attach and create the lease of the disk to the virtual machine. This operation can take a while to
     * complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param attachDiskProperties Properties of the disk to attach.
     * @param options The options parameters.
     */
    beginAttach(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: AttachDiskProperties, options?: DisksAttachOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Attach and create the lease of the disk to the virtual machine. This operation can take a while to
     * complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param attachDiskProperties Properties of the disk to attach.
     * @param options The options parameters.
     */
    beginAttachAndWait(resourceGroupName: string, labName: string, userName: string, name: string, attachDiskProperties: AttachDiskProperties, options?: DisksAttachOptionalParams): Promise<void>;
    /**
     * Detach and break the lease of the disk attached to the virtual machine. This operation can take a
     * while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param detachDiskProperties Properties of the disk to detach.
     * @param options The options parameters.
     */
    beginDetach(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: DetachDiskProperties, options?: DisksDetachOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Detach and break the lease of the disk attached to the virtual machine. This operation can take a
     * while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the disk.
     * @param detachDiskProperties Properties of the disk to detach.
     * @param options The options parameters.
     */
    beginDetachAndWait(resourceGroupName: string, labName: string, userName: string, name: string, detachDiskProperties: DetachDiskProperties, options?: DisksDetachOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DisksAttachOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DisksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DisksCreateOrUpdateResponse = Disk;

/** Optional parameters. */
export declare interface DisksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DisksDetachOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DisksGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=diskType)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type DisksGetResponse = Disk;

/** Optional parameters. */
export declare interface DisksListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=diskType)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type DisksListNextResponse = DiskList;

/** Optional parameters. */
export declare interface DisksListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=diskType)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type DisksListResponse = DiskList;

/** Optional parameters. */
export declare interface DisksUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type DisksUpdateResponse = Disk;

/** An environment, which is essentially an ARM template deployment. */
export declare interface DtlEnvironment extends Resource {
    /** The deployment properties of the environment. */
    deploymentProperties?: EnvironmentDeploymentProperties;
    /** The display name of the Azure Resource Manager template that produced the environment. */
    armTemplateDisplayName?: string;
    /**
     * The identifier of the resource group containing the environment's resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceGroupId?: string;
    /**
     * The creator of the environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdByUser?: string;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** An environment, which is essentially an ARM template deployment. */
export declare interface DtlEnvironmentFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface DtlEnvironmentList {
    /** Results of the list operation. */
    value?: DtlEnvironment[];
    /** Link for next set of results. */
    nextLink?: string;
}

/**
 * Defines values for EnableStatus. \
 * {@link KnownEnableStatus} can be used interchangeably with EnableStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type EnableStatus = string;

/** Properties of an environment deployment. */
export declare interface EnvironmentDeploymentProperties {
    /** The Azure Resource Manager template's identifier. */
    armTemplateId?: string;
    /** The parameters of the Azure Resource Manager template. */
    parameters?: ArmTemplateParameterProperties[];
}

/**
 * Defines values for EnvironmentPermission. \
 * {@link KnownEnvironmentPermission} can be used interchangeably with EnvironmentPermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reader** \
 * **Contributor**
 */
export declare type EnvironmentPermission = string;

/** Interface representing a Environments. */
export declare interface Environments {
    /**
     * List environments in a given user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: EnvironmentsListOptionalParams): PagedAsyncIterableIterator<DtlEnvironment>;
    /**
     * Get environment.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the environment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: EnvironmentsGetOptionalParams): Promise<EnvironmentsGetResponse>;
    /**
     * Create or replace an existing environment. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the environment.
     * @param dtlEnvironment An environment, which is essentially an ARM template deployment.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: DtlEnvironment, options?: EnvironmentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<EnvironmentsCreateOrUpdateResponse>, EnvironmentsCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing environment. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the environment.
     * @param dtlEnvironment An environment, which is essentially an ARM template deployment.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: DtlEnvironment, options?: EnvironmentsCreateOrUpdateOptionalParams): Promise<EnvironmentsCreateOrUpdateResponse>;
    /**
     * Delete environment. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the environment.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, userName: string, name: string, options?: EnvironmentsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete environment. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the environment.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, userName: string, name: string, options?: EnvironmentsDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of environments. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the environment.
     * @param dtlEnvironment An environment, which is essentially an ARM template deployment.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, userName: string, name: string, dtlEnvironment: DtlEnvironmentFragment, options?: EnvironmentsUpdateOptionalParams): Promise<EnvironmentsUpdateResponse>;
}

/** Optional parameters. */
export declare interface EnvironmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type EnvironmentsCreateOrUpdateResponse = DtlEnvironment;

/** Optional parameters. */
export declare interface EnvironmentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface EnvironmentsGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type EnvironmentsGetResponse = DtlEnvironment;

/** Optional parameters. */
export declare interface EnvironmentsListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type EnvironmentsListNextResponse = DtlEnvironmentList;

/** Optional parameters. */
export declare interface EnvironmentsListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=deploymentProperties)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type EnvironmentsListResponse = DtlEnvironmentList;

/** Optional parameters. */
export declare interface EnvironmentsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type EnvironmentsUpdateResponse = DtlEnvironment;

/** Properties for evaluating a policy set. */
export declare interface EvaluatePoliciesProperties {
    /** The fact name. */
    factName?: string;
    /** The fact data. */
    factData?: string;
    /** The value offset. */
    valueOffset?: string;
    /** The user for which policies will be evaluated */
    userObjectId?: string;
}

/** Request body for evaluating a policy set. */
export declare interface EvaluatePoliciesRequest {
    /** Policies to evaluate. */
    policies?: EvaluatePoliciesProperties[];
}

/** Response body for evaluating a policy set. */
export declare interface EvaluatePoliciesResponse {
    /** Results of evaluating a policy set. */
    results?: PolicySetResult[];
}

/** An event to be notified for. */
declare interface Event_2 {
    /** The event type for which this notification is enabled (i.e. AutoShutdown, Cost) */
    eventName?: NotificationChannelEventType;
}
export { Event_2 as Event }

/** The parameters of the export operation. */
export declare interface ExportResourceUsageParameters {
    /** The blob storage absolute sas uri with write permission to the container which the usage data needs to be uploaded to. */
    blobStorageAbsoluteSasUri?: string;
    /** The start time of the usage. If not provided, usage will be reported since the beginning of data collection. */
    usageStartDate?: Date;
}

/** Subnet information as returned by the Microsoft.Network API. */
export declare interface ExternalSubnet {
    /** Gets or sets the identifier. */
    id?: string;
    /** Gets or sets the name. */
    name?: string;
}

/**
 * Defines values for FileUploadOptions. \
 * {@link KnownFileUploadOptions} can be used interchangeably with FileUploadOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UploadFilesAndGenerateSasTokens** \
 * **None**
 */
export declare type FileUploadOptions = string;

/** A formula for creating a VM, specifying an image base and other parameters */
export declare interface Formula extends Resource {
    /** The description of the formula. */
    description?: string;
    /**
     * The author of the formula.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly author?: string;
    /** The OS type of the formula. */
    osType?: string;
    /**
     * The creation date of the formula.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /** The content of the formula. */
    formulaContent?: LabVirtualMachineCreationParameter;
    /** Information about a VM from which a formula is to be created. */
    vm?: FormulaPropertiesFromVm;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** A formula for creating a VM, specifying an image base and other parameters */
export declare interface FormulaFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface FormulaList {
    /** Results of the list operation. */
    value?: Formula[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Information about a VM from which a formula is to be created. */
export declare interface FormulaPropertiesFromVm {
    /** The identifier of the VM from which a formula is to be created. */
    labVmId?: string;
}

/** Interface representing a Formulas. */
export declare interface Formulas {
    /**
     * List formulas in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: FormulasListOptionalParams): PagedAsyncIterableIterator<Formula>;
    /**
     * Get formula.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the formula.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: FormulasGetOptionalParams): Promise<FormulasGetResponse>;
    /**
     * Create or replace an existing formula. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the formula.
     * @param formula A formula for creating a VM, specifying an image base and other parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, formula: Formula, options?: FormulasCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<FormulasCreateOrUpdateResponse>, FormulasCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing formula. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the formula.
     * @param formula A formula for creating a VM, specifying an image base and other parameters
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, name: string, formula: Formula, options?: FormulasCreateOrUpdateOptionalParams): Promise<FormulasCreateOrUpdateResponse>;
    /**
     * Delete formula.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the formula.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, name: string, options?: FormulasDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of formulas. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the formula.
     * @param formula A formula for creating a VM, specifying an image base and other parameters
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, formula: FormulaFragment, options?: FormulasUpdateOptionalParams): Promise<FormulasUpdateResponse>;
}

/** Optional parameters. */
export declare interface FormulasCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type FormulasCreateOrUpdateResponse = Formula;

/** Optional parameters. */
export declare interface FormulasDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface FormulasGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=description)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type FormulasGetResponse = Formula;

/** Optional parameters. */
export declare interface FormulasListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=description)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type FormulasListNextResponse = FormulaList;

/** Optional parameters. */
export declare interface FormulasListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=description)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type FormulasListResponse = FormulaList;

/** Optional parameters. */
export declare interface FormulasUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type FormulasUpdateResponse = Formula;

/** A gallery image. */
export declare interface GalleryImage extends Resource {
    /** The author of the gallery image. */
    author?: string;
    /**
     * The creation date of the gallery image.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /** The description of the gallery image. */
    description?: string;
    /** The image reference of the gallery image. */
    imageReference?: GalleryImageReference;
    /** The icon of the gallery image. */
    icon?: string;
    /** Indicates whether this gallery image is enabled. */
    enabled?: boolean;
    /** The third party plan that applies to this image */
    planId?: string;
    /** Indicates if the plan has been authorized for programmatic deployment. */
    isPlanAuthorized?: boolean;
}

/** The response of a list operation. */
export declare interface GalleryImageList {
    /** Results of the list operation. */
    value?: GalleryImage[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** The reference information for an Azure Marketplace image. */
export declare interface GalleryImageReference {
    /** The offer of the gallery image. */
    offer?: string;
    /** The publisher of the gallery image. */
    publisher?: string;
    /** The SKU of the gallery image. */
    sku?: string;
    /** The OS type of the gallery image. */
    osType?: string;
    /** The version of the gallery image. */
    version?: string;
}

/** Interface representing a GalleryImages. */
export declare interface GalleryImages {
    /**
     * List gallery images in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: GalleryImagesListOptionalParams): PagedAsyncIterableIterator<GalleryImage>;
}

/** Optional parameters. */
export declare interface GalleryImagesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=author)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type GalleryImagesListNextResponse = GalleryImageList;

/** Optional parameters. */
export declare interface GalleryImagesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=author)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type GalleryImagesListResponse = GalleryImageList;

/** Parameters for generating an ARM template for deploying artifacts. */
export declare interface GenerateArmTemplateRequest {
    /** The resource name of the virtual machine. */
    virtualMachineName?: string;
    /** The parameters of the ARM template. */
    parameters?: ParameterInfo[];
    /** The location of the virtual machine. */
    location?: string;
    /** Options for uploading the files for the artifact. UploadFilesAndGenerateSasTokens is the default value. */
    fileUploadOptions?: FileUploadOptions;
}

/** Properties for generating an upload URI. */
export declare interface GenerateUploadUriParameter {
    /** The blob name of the upload URI. */
    blobName?: string;
}

/** Response body for generating an upload URI. */
export declare interface GenerateUploadUriResponse {
    /** The upload URI for the VHD. */
    uploadUri?: string;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Interface representing a GlobalSchedules. */
export declare interface GlobalSchedules {
    /**
     * List schedules in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: GlobalSchedulesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * List schedules in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: GlobalSchedulesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * Get schedule.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, options?: GlobalSchedulesGetOptionalParams): Promise<GlobalSchedulesGetResponse>;
    /**
     * Create or replace an existing schedule.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, name: string, schedule: Schedule, options?: GlobalSchedulesCreateOrUpdateOptionalParams): Promise<GlobalSchedulesCreateOrUpdateResponse>;
    /**
     * Delete schedule.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, name: string, options?: GlobalSchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of schedules. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, name: string, schedule: ScheduleFragment, options?: GlobalSchedulesUpdateOptionalParams): Promise<GlobalSchedulesUpdateResponse>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecute(resourceGroupName: string, name: string, options?: GlobalSchedulesExecuteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecuteAndWait(resourceGroupName: string, name: string, options?: GlobalSchedulesExecuteOptionalParams): Promise<void>;
    /**
     * Updates a schedule's target resource Id. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param retargetScheduleProperties Properties for retargeting a virtual machine schedule.
     * @param options The options parameters.
     */
    beginRetarget(resourceGroupName: string, name: string, retargetScheduleProperties: RetargetScheduleProperties, options?: GlobalSchedulesRetargetOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Updates a schedule's target resource Id. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the schedule.
     * @param retargetScheduleProperties Properties for retargeting a virtual machine schedule.
     * @param options The options parameters.
     */
    beginRetargetAndWait(resourceGroupName: string, name: string, retargetScheduleProperties: RetargetScheduleProperties, options?: GlobalSchedulesRetargetOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GlobalSchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type GlobalSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export declare interface GlobalSchedulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface GlobalSchedulesExecuteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GlobalSchedulesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type GlobalSchedulesGetResponse = Schedule;

/** Optional parameters. */
export declare interface GlobalSchedulesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type GlobalSchedulesListByResourceGroupNextResponse = ScheduleList;

/** Optional parameters. */
export declare interface GlobalSchedulesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type GlobalSchedulesListByResourceGroupResponse = ScheduleList;

/** Optional parameters. */
export declare interface GlobalSchedulesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type GlobalSchedulesListBySubscriptionNextResponse = ScheduleList;

/** Optional parameters. */
export declare interface GlobalSchedulesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type GlobalSchedulesListBySubscriptionResponse = ScheduleList;

/** Optional parameters. */
export declare interface GlobalSchedulesRetargetOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface GlobalSchedulesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type GlobalSchedulesUpdateResponse = Schedule;

/**
 * Defines values for HostCachingOptions. \
 * {@link KnownHostCachingOptions} can be used interchangeably with HostCachingOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export declare type HostCachingOptions = string;

/** Properties of an hourly schedule. */
export declare interface HourDetails {
    /** Minutes of the hour the schedule will run. */
    minute?: number;
}

/**
 * Defines values for HttpStatusCode. \
 * {@link KnownHttpStatusCode} can be used interchangeably with HttpStatusCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Continue** \
 * **SwitchingProtocols** \
 * **OK** \
 * **Created** \
 * **Accepted** \
 * **NonAuthoritativeInformation** \
 * **NoContent** \
 * **ResetContent** \
 * **PartialContent** \
 * **MultipleChoices** \
 * **Ambiguous** \
 * **MovedPermanently** \
 * **Moved** \
 * **Found** \
 * **Redirect** \
 * **SeeOther** \
 * **RedirectMethod** \
 * **NotModified** \
 * **UseProxy** \
 * **Unused** \
 * **TemporaryRedirect** \
 * **RedirectKeepVerb** \
 * **BadRequest** \
 * **Unauthorized** \
 * **PaymentRequired** \
 * **Forbidden** \
 * **NotFound** \
 * **MethodNotAllowed** \
 * **NotAcceptable** \
 * **ProxyAuthenticationRequired** \
 * **RequestTimeout** \
 * **Conflict** \
 * **Gone** \
 * **LengthRequired** \
 * **PreconditionFailed** \
 * **RequestEntityTooLarge** \
 * **RequestUriTooLong** \
 * **UnsupportedMediaType** \
 * **RequestedRangeNotSatisfiable** \
 * **ExpectationFailed** \
 * **UpgradeRequired** \
 * **InternalServerError** \
 * **NotImplemented** \
 * **BadGateway** \
 * **ServiceUnavailable** \
 * **GatewayTimeout** \
 * **HttpVersionNotSupported**
 */
export declare type HttpStatusCode = string;

/** Properties of a managed identity */
export declare interface IdentityProperties {
    /** Managed identity. */
    type?: ManagedIdentityType;
    /** The principal id of resource identity. */
    principalId?: string;
    /** The tenant identifier of resource. */
    tenantId?: string;
    /** The client secret URL of the identity. */
    clientSecretUrl?: string;
}

/** This represents the payload required to import a virtual machine from a different lab into the current one */
export declare interface ImportLabVirtualMachineRequest {
    /** The full resource ID of the virtual machine to be imported. */
    sourceVirtualMachineResourceId?: string;
    /** The name of the virtual machine in the destination lab */
    destinationVirtualMachineName?: string;
}

/** A rule for NAT - exposing a VM's port (backendPort) on the public IP address using a load balancer. */
export declare interface InboundNatRule {
    /** The transport protocol for the endpoint. */
    transportProtocol?: TransportProtocol;
    /** The external endpoint port of the inbound connection. Possible values range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically. */
    frontendPort?: number;
    /** The port to which the external traffic will be redirected. */
    backendPort?: number;
}

/** Known values of {@link CostThresholdStatus} that the service accepts. */
export declare enum KnownCostThresholdStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link CostType} that the service accepts. */
export declare enum KnownCostType {
    /** Unavailable */
    Unavailable = "Unavailable",
    /** Reported */
    Reported = "Reported",
    /** Projected */
    Projected = "Projected"
}

/** Known values of {@link CustomImageOsType} that the service accepts. */
export declare enum KnownCustomImageOsType {
    /** Windows */
    Windows = "Windows",
    /** Linux */
    Linux = "Linux",
    /** None */
    None = "None"
}

/** Known values of {@link EnableStatus} that the service accepts. */
export declare enum KnownEnableStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link EnvironmentPermission} that the service accepts. */
export declare enum KnownEnvironmentPermission {
    /** Reader */
    Reader = "Reader",
    /** Contributor */
    Contributor = "Contributor"
}

/** Known values of {@link FileUploadOptions} that the service accepts. */
export declare enum KnownFileUploadOptions {
    /** UploadFilesAndGenerateSasTokens */
    UploadFilesAndGenerateSasTokens = "UploadFilesAndGenerateSasTokens",
    /** None */
    None = "None"
}

/** Known values of {@link HostCachingOptions} that the service accepts. */
export declare enum KnownHostCachingOptions {
    /** None */
    None = "None",
    /** ReadOnly */
    ReadOnly = "ReadOnly",
    /** ReadWrite */
    ReadWrite = "ReadWrite"
}

/** Known values of {@link HttpStatusCode} that the service accepts. */
export declare enum KnownHttpStatusCode {
    /** Continue */
    Continue = "Continue",
    /** SwitchingProtocols */
    SwitchingProtocols = "SwitchingProtocols",
    /** OK */
    OK = "OK",
    /** Created */
    Created = "Created",
    /** Accepted */
    Accepted = "Accepted",
    /** NonAuthoritativeInformation */
    NonAuthoritativeInformation = "NonAuthoritativeInformation",
    /** NoContent */
    NoContent = "NoContent",
    /** ResetContent */
    ResetContent = "ResetContent",
    /** PartialContent */
    PartialContent = "PartialContent",
    /** MultipleChoices */
    MultipleChoices = "MultipleChoices",
    /** Ambiguous */
    Ambiguous = "Ambiguous",
    /** MovedPermanently */
    MovedPermanently = "MovedPermanently",
    /** Moved */
    Moved = "Moved",
    /** Found */
    Found = "Found",
    /** Redirect */
    Redirect = "Redirect",
    /** SeeOther */
    SeeOther = "SeeOther",
    /** RedirectMethod */
    RedirectMethod = "RedirectMethod",
    /** NotModified */
    NotModified = "NotModified",
    /** UseProxy */
    UseProxy = "UseProxy",
    /** Unused */
    Unused = "Unused",
    /** TemporaryRedirect */
    TemporaryRedirect = "TemporaryRedirect",
    /** RedirectKeepVerb */
    RedirectKeepVerb = "RedirectKeepVerb",
    /** BadRequest */
    BadRequest = "BadRequest",
    /** Unauthorized */
    Unauthorized = "Unauthorized",
    /** PaymentRequired */
    PaymentRequired = "PaymentRequired",
    /** Forbidden */
    Forbidden = "Forbidden",
    /** NotFound */
    NotFound = "NotFound",
    /** MethodNotAllowed */
    MethodNotAllowed = "MethodNotAllowed",
    /** NotAcceptable */
    NotAcceptable = "NotAcceptable",
    /** ProxyAuthenticationRequired */
    ProxyAuthenticationRequired = "ProxyAuthenticationRequired",
    /** RequestTimeout */
    RequestTimeout = "RequestTimeout",
    /** Conflict */
    Conflict = "Conflict",
    /** Gone */
    Gone = "Gone",
    /** LengthRequired */
    LengthRequired = "LengthRequired",
    /** PreconditionFailed */
    PreconditionFailed = "PreconditionFailed",
    /** RequestEntityTooLarge */
    RequestEntityTooLarge = "RequestEntityTooLarge",
    /** RequestUriTooLong */
    RequestUriTooLong = "RequestUriTooLong",
    /** UnsupportedMediaType */
    UnsupportedMediaType = "UnsupportedMediaType",
    /** RequestedRangeNotSatisfiable */
    RequestedRangeNotSatisfiable = "RequestedRangeNotSatisfiable",
    /** ExpectationFailed */
    ExpectationFailed = "ExpectationFailed",
    /** UpgradeRequired */
    UpgradeRequired = "UpgradeRequired",
    /** InternalServerError */
    InternalServerError = "InternalServerError",
    /** NotImplemented */
    NotImplemented = "NotImplemented",
    /** BadGateway */
    BadGateway = "BadGateway",
    /** ServiceUnavailable */
    ServiceUnavailable = "ServiceUnavailable",
    /** GatewayTimeout */
    GatewayTimeout = "GatewayTimeout",
    /** HttpVersionNotSupported */
    HttpVersionNotSupported = "HttpVersionNotSupported"
}

/** Known values of {@link LinuxOsState} that the service accepts. */
export declare enum KnownLinuxOsState {
    /** NonDeprovisioned */
    NonDeprovisioned = "NonDeprovisioned",
    /** DeprovisionRequested */
    DeprovisionRequested = "DeprovisionRequested",
    /** DeprovisionApplied */
    DeprovisionApplied = "DeprovisionApplied"
}

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export declare enum KnownManagedIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Known values of {@link NotificationChannelEventType} that the service accepts. */
export declare enum KnownNotificationChannelEventType {
    /** AutoShutdown */
    AutoShutdown = "AutoShutdown",
    /** Cost */
    Cost = "Cost"
}

/** Known values of {@link PolicyEvaluatorType} that the service accepts. */
export declare enum KnownPolicyEvaluatorType {
    /** AllowedValuesPolicy */
    AllowedValuesPolicy = "AllowedValuesPolicy",
    /** MaxValuePolicy */
    MaxValuePolicy = "MaxValuePolicy"
}

/** Known values of {@link PolicyFactName} that the service accepts. */
export declare enum KnownPolicyFactName {
    /** UserOwnedLabVmCount */
    UserOwnedLabVmCount = "UserOwnedLabVmCount",
    /** UserOwnedLabPremiumVmCount */
    UserOwnedLabPremiumVmCount = "UserOwnedLabPremiumVmCount",
    /** LabVmCount */
    LabVmCount = "LabVmCount",
    /** LabPremiumVmCount */
    LabPremiumVmCount = "LabPremiumVmCount",
    /** LabVmSize */
    LabVmSize = "LabVmSize",
    /** GalleryImage */
    GalleryImage = "GalleryImage",
    /** UserOwnedLabVmCountInSubnet */
    UserOwnedLabVmCountInSubnet = "UserOwnedLabVmCountInSubnet",
    /** LabTargetCost */
    LabTargetCost = "LabTargetCost",
    /** EnvironmentTemplate */
    EnvironmentTemplate = "EnvironmentTemplate",
    /** ScheduleEditPermission */
    ScheduleEditPermission = "ScheduleEditPermission"
}

/** Known values of {@link PolicyStatus} that the service accepts. */
export declare enum KnownPolicyStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link PremiumDataDisk} that the service accepts. */
export declare enum KnownPremiumDataDisk {
    /** Disabled */
    Disabled = "Disabled",
    /** Enabled */
    Enabled = "Enabled"
}

/** Known values of {@link ReportingCycleType} that the service accepts. */
export declare enum KnownReportingCycleType {
    /** CalendarMonth */
    CalendarMonth = "CalendarMonth",
    /** Custom */
    Custom = "Custom"
}

/** Known values of {@link SourceControlType} that the service accepts. */
export declare enum KnownSourceControlType {
    /** VsoGit */
    VsoGit = "VsoGit",
    /** GitHub */
    GitHub = "GitHub",
    /** StorageAccount */
    StorageAccount = "StorageAccount"
}

/** Known values of {@link StorageType} that the service accepts. */
export declare enum KnownStorageType {
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium",
    /** StandardSSD */
    StandardSSD = "StandardSSD"
}

/** Known values of {@link TargetCostStatus} that the service accepts. */
export declare enum KnownTargetCostStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link TransportProtocol} that the service accepts. */
export declare enum KnownTransportProtocol {
    /** Tcp */
    Tcp = "Tcp",
    /** Udp */
    Udp = "Udp"
}

/** Known values of {@link UsagePermissionType} that the service accepts. */
export declare enum KnownUsagePermissionType {
    /** Default */
    Default = "Default",
    /** Deny */
    Deny = "Deny",
    /** Allow */
    Allow = "Allow"
}

/** Known values of {@link VirtualMachineCreationSource} that the service accepts. */
export declare enum KnownVirtualMachineCreationSource {
    /** FromCustomImage */
    FromCustomImage = "FromCustomImage",
    /** FromGalleryImage */
    FromGalleryImage = "FromGalleryImage",
    /** FromSharedGalleryImage */
    FromSharedGalleryImage = "FromSharedGalleryImage"
}

/** Known values of {@link WindowsOsState} that the service accepts. */
export declare enum KnownWindowsOsState {
    /** NonSysprepped */
    NonSysprepped = "NonSysprepped",
    /** SysprepRequested */
    SysprepRequested = "SysprepRequested",
    /** SysprepApplied */
    SysprepApplied = "SysprepApplied"
}

/** A lab. */
export declare interface Lab extends Resource {
    /**
     * The lab's default storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultStorageAccount?: string;
    /**
     * The lab's default premium storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultPremiumStorageAccount?: string;
    /**
     * The lab's artifact storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly artifactsStorageAccount?: string;
    /**
     * The lab's premium data disk storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly premiumDataDiskStorageAccount?: string;
    /**
     * The lab's Key vault.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vaultName?: string;
    /** Type of storage used by the lab. It can be either Premium or Standard. Default is Premium. */
    labStorageType?: StorageType;
    /** The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user. */
    mandatoryArtifactsResourceIdsLinux?: string[];
    /** The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user. */
    mandatoryArtifactsResourceIdsWindows?: string[];
    /**
     * The creation date of the lab.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * The setting to enable usage of premium data disks.
     * When its value is 'Enabled', creation of standard or premium data disks is allowed.
     * When its value is 'Disabled', only creation of standard data disks is allowed.
     */
    premiumDataDisks?: PremiumDataDisk;
    /** The access rights to be granted to the user when provisioning an environment */
    environmentPermission?: EnvironmentPermission;
    /** The properties of any lab announcement associated with this lab */
    announcement?: LabAnnouncementProperties;
    /** The properties of any lab support message associated with this lab */
    support?: LabSupportProperties;
    /**
     * The resource group in which all new lab virtual machines will be created. To let DevTest Labs manage resource group creation, set this value to null.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vmCreationResourceGroup?: string;
    /**
     * The public IP address for the lab's load balancer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicIpId?: string;
    /**
     * The load balancer used to for lab VMs that use shared IP address.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly loadBalancerId?: string;
    /**
     * The Network Security Group attached to the lab VMs Network interfaces to restrict open ports.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkSecurityGroupId?: string;
    /** Extended properties of the lab used for experimental features */
    extendedProperties?: {
        [propertyName: string]: string;
    };
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** Properties of a lab's announcement banner */
export declare interface LabAnnouncementProperties {
    /** The plain text title for the lab announcement */
    title?: string;
    /** The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown. */
    markdown?: string;
    /** Is the lab announcement active/enabled at this time? */
    enabled?: EnableStatus;
    /** The time at which the announcement expires (null for never) */
    expirationDate?: Date;
    /** Has this announcement expired? */
    expired?: boolean;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** A cost item. */
export declare interface LabCost extends Resource {
    /** The target cost properties */
    targetCost?: TargetCostProperties;
    /**
     * The lab cost summary component of the cost data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly labCostSummary?: LabCostSummaryProperties;
    /**
     * The lab cost details component of the cost data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly labCostDetails?: LabCostDetailsProperties[];
    /**
     * The resource cost component of the cost data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceCosts?: LabResourceCostProperties[];
    /** The currency code of the cost. */
    currencyCode?: string;
    /** The start time of the cost data. */
    startDateTime?: Date;
    /** The end time of the cost data. */
    endDateTime?: Date;
    /** The creation date of the cost. */
    createdDate?: Date;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** The properties of a lab cost item. */
export declare interface LabCostDetailsProperties {
    /** The date of the cost item. */
    date?: Date;
    /** The cost component of the cost item. */
    cost?: number;
    /** The type of the cost. */
    costType?: CostType;
}

/** The properties of the cost summary. */
export declare interface LabCostSummaryProperties {
    /** The cost component of the cost item. */
    estimatedLabCost?: number;
}

/** A lab. */
export declare interface LabFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface LabList {
    /** Results of the list operation. */
    value?: Lab[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** The properties of a resource cost item. */
export declare interface LabResourceCostProperties {
    /** The name of the resource. */
    resourcename?: string;
    /** The unique identifier of the resource. */
    resourceUId?: string;
    /** The cost component of the resource cost item. */
    resourceCost?: number;
    /** The logical resource type (ex. virtualmachine, storageaccount) */
    resourceType?: string;
    /** The owner of the resource (ex. janedoe@microsoft.com) */
    resourceOwner?: string;
    /** The category of the resource (ex. Premium_LRS, Standard_DS1) */
    resourcePricingTier?: string;
    /** The status of the resource (ex. Active) */
    resourceStatus?: string;
    /** The ID of the resource */
    resourceId?: string;
    /** The ID of the external resource */
    externalResourceId?: string;
}

/** Interface representing a Labs. */
export declare interface Labs {
    /**
     * List labs in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: LabsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Lab>;
    /**
     * List labs in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: LabsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Lab>;
    /**
     * List disk images available for custom image creation.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param options The options parameters.
     */
    listVhds(resourceGroupName: string, name: string, options?: LabsListVhdsOptionalParams): PagedAsyncIterableIterator<LabVhd>;
    /**
     * Get lab.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, options?: LabsGetOptionalParams): Promise<LabsGetResponse>;
    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, lab: Lab, options?: LabsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<LabsCreateOrUpdateResponse>, LabsCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, name: string, lab: Lab, options?: LabsCreateOrUpdateOptionalParams): Promise<LabsCreateOrUpdateResponse>;
    /**
     * Delete lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, name: string, options?: LabsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, name: string, options?: LabsDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of labs. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param lab A lab.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, name: string, lab: LabFragment, options?: LabsUpdateOptionalParams): Promise<LabsUpdateResponse>;
    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param options The options parameters.
     */
    beginClaimAnyVm(resourceGroupName: string, name: string, options?: LabsClaimAnyVmOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Claim a random claimable virtual machine in the lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param options The options parameters.
     */
    beginClaimAnyVmAndWait(resourceGroupName: string, name: string, options?: LabsClaimAnyVmOptionalParams): Promise<void>;
    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @param options The options parameters.
     */
    beginCreateEnvironment(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: LabVirtualMachineCreationParameter, options?: LabsCreateEnvironmentOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Create virtual machines in a lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param labVirtualMachineCreationParameter Properties for creating a virtual machine.
     * @param options The options parameters.
     */
    beginCreateEnvironmentAndWait(resourceGroupName: string, name: string, labVirtualMachineCreationParameter: LabVirtualMachineCreationParameter, options?: LabsCreateEnvironmentOptionalParams): Promise<void>;
    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @param options The options parameters.
     */
    beginExportResourceUsage(resourceGroupName: string, name: string, exportResourceUsageParameters: ExportResourceUsageParameters, options?: LabsExportResourceUsageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Exports the lab resource usage into a storage account This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param exportResourceUsageParameters The parameters of the export operation.
     * @param options The options parameters.
     */
    beginExportResourceUsageAndWait(resourceGroupName: string, name: string, exportResourceUsageParameters: ExportResourceUsageParameters, options?: LabsExportResourceUsageOptionalParams): Promise<void>;
    /**
     * Generate a URI for uploading custom disk images to a Lab.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param generateUploadUriParameter Properties for generating an upload URI.
     * @param options The options parameters.
     */
    generateUploadUri(resourceGroupName: string, name: string, generateUploadUriParameter: GenerateUploadUriParameter, options?: LabsGenerateUploadUriOptionalParams): Promise<LabsGenerateUploadUriResponse>;
    /**
     * Import a virtual machine into a different lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param importLabVirtualMachineRequest This represents the payload required to import a virtual
     *                                       machine from a different lab into the current one
     * @param options The options parameters.
     */
    beginImportVirtualMachine(resourceGroupName: string, name: string, importLabVirtualMachineRequest: ImportLabVirtualMachineRequest, options?: LabsImportVirtualMachineOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Import a virtual machine into a different lab. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param name The name of the lab.
     * @param importLabVirtualMachineRequest This represents the payload required to import a virtual
     *                                       machine from a different lab into the current one
     * @param options The options parameters.
     */
    beginImportVirtualMachineAndWait(resourceGroupName: string, name: string, importLabVirtualMachineRequest: ImportLabVirtualMachineRequest, options?: LabsImportVirtualMachineOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface LabsClaimAnyVmOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabsCreateEnvironmentOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LabsCreateOrUpdateResponse = Lab;

/** Optional parameters. */
export declare interface LabsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabsExportResourceUsageOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabsGenerateUploadUriOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generateUploadUri operation. */
export declare type LabsGenerateUploadUriResponse = GenerateUploadUriResponse;

/** Optional parameters. */
export declare interface LabsGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type LabsGetResponse = Lab;

/** Optional parameters. */
export declare interface LabsImportVirtualMachineOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface LabsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type LabsListByResourceGroupNextResponse = LabList;

/** Optional parameters. */
export declare interface LabsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type LabsListByResourceGroupResponse = LabList;

/** Optional parameters. */
export declare interface LabsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type LabsListBySubscriptionNextResponse = LabList;

/** Optional parameters. */
export declare interface LabsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=defaultStorageAccount)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type LabsListBySubscriptionResponse = LabList;

/** Optional parameters. */
export declare interface LabsListVhdsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listVhdsNext operation. */
export declare type LabsListVhdsNextResponse = LabVhdList;

/** Optional parameters. */
export declare interface LabsListVhdsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listVhds operation. */
export declare type LabsListVhdsResponse = LabVhdList;

/** Optional parameters. */
export declare interface LabsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type LabsUpdateResponse = Lab;

/** Properties of a lab's support banner */
export declare interface LabSupportProperties {
    /** Is the lab support banner active/enabled at this time? */
    enabled?: EnableStatus;
    /** The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown. */
    markdown?: string;
}

/** Properties of a VHD in the lab. */
export declare interface LabVhd {
    /** The URI to the VHD. */
    id?: string;
}

/** The response of a list operation. */
export declare interface LabVhdList {
    /** Results of the list operation. */
    value?: LabVhd[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** A virtual machine. */
export declare interface LabVirtualMachine extends Resource {
    /** The notes of the virtual machine. */
    notes?: string;
    /** The object identifier of the owner of the virtual machine. */
    ownerObjectId?: string;
    /** The user principal name of the virtual machine owner. */
    ownerUserPrincipalName?: string;
    /**
     * The object identifier of the creator of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdByUserId?: string;
    /**
     * The email address of creator of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdByUser?: string;
    /** The creation date of the virtual machine. */
    createdDate?: Date;
    /**
     * The resource identifier (Microsoft.Compute) of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly computeId?: string;
    /** The custom image identifier of the virtual machine. */
    customImageId?: string;
    /**
     * The OS type of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: string;
    /** The size of the virtual machine. */
    size?: string;
    /** The user name of the virtual machine. */
    userName?: string;
    /** The password of the virtual machine administrator. */
    password?: string;
    /** The SSH key of the virtual machine administrator. */
    sshKey?: string;
    /** Indicates whether this virtual machine uses an SSH key for authentication. */
    isAuthenticationWithSshKey?: boolean;
    /**
     * The fully-qualified domain name of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /** The lab subnet name of the virtual machine. */
    labSubnetName?: string;
    /** The lab virtual network identifier of the virtual machine. */
    labVirtualNetworkId?: string;
    /** Indicates whether the virtual machine is to be created without a public IP address. */
    disallowPublicIpAddress?: boolean;
    /** The artifacts to be installed on the virtual machine. */
    artifacts?: ArtifactInstallProperties[];
    /**
     * The artifact deployment status for the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly artifactDeploymentStatus?: ArtifactDeploymentStatusProperties;
    /** The Microsoft Azure Marketplace image reference of the virtual machine. */
    galleryImageReference?: GalleryImageReference;
    /** The id of the plan associated with the virtual machine image */
    planId?: string;
    /**
     * The compute virtual machine properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly computeVm?: ComputeVmProperties;
    /** The network interface properties. */
    networkInterface?: NetworkInterfaceProperties;
    /**
     * The applicable schedule for the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly applicableSchedule?: ApplicableSchedule;
    /** The expiration date for VM. */
    expirationDate?: Date;
    /** Indicates whether another user can take ownership of the virtual machine */
    allowClaim?: boolean;
    /** Storage type to use for virtual machine (i.e. Standard, Premium). */
    storageType?: string;
    /**
     * Tells source of creation of lab virtual machine. Output property only.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachineCreationSource?: VirtualMachineCreationSource;
    /** The resource ID of the environment that contains this virtual machine, if any. */
    environmentId?: string;
    /** New or existing data disks to attach to the virtual machine after creation */
    dataDiskParameters?: DataDiskProperties[];
    /** Virtual Machine schedules to be created */
    scheduleParameters?: ScheduleCreationParameter[];
    /**
     * Last known compute power state captured in DTL
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastKnownPowerState?: string;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** Properties for creating a virtual machine. */
export declare interface LabVirtualMachineCreationParameter {
    /** The name of the virtual machine or environment */
    name?: string;
    /** The location of the new virtual machine or environment */
    location?: string;
    /** The tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The number of virtual machine instances to create. */
    bulkCreationParameters?: BulkCreationParameters;
    /** The notes of the virtual machine. */
    notes?: string;
    /** The object identifier of the owner of the virtual machine. */
    ownerObjectId?: string;
    /** The user principal name of the virtual machine owner. */
    ownerUserPrincipalName?: string;
    /** The creation date of the virtual machine. */
    createdDate?: Date;
    /** The custom image identifier of the virtual machine. */
    customImageId?: string;
    /** The size of the virtual machine. */
    size?: string;
    /** The user name of the virtual machine. */
    userName?: string;
    /** The password of the virtual machine administrator. */
    password?: string;
    /** The SSH key of the virtual machine administrator. */
    sshKey?: string;
    /** Indicates whether this virtual machine uses an SSH key for authentication. */
    isAuthenticationWithSshKey?: boolean;
    /** The lab subnet name of the virtual machine. */
    labSubnetName?: string;
    /** The lab virtual network identifier of the virtual machine. */
    labVirtualNetworkId?: string;
    /** Indicates whether the virtual machine is to be created without a public IP address. */
    disallowPublicIpAddress?: boolean;
    /** The artifacts to be installed on the virtual machine. */
    artifacts?: ArtifactInstallProperties[];
    /** The Microsoft Azure Marketplace image reference of the virtual machine. */
    galleryImageReference?: GalleryImageReference;
    /** The id of the plan associated with the virtual machine image */
    planId?: string;
    /** The network interface properties. */
    networkInterface?: NetworkInterfaceProperties;
    /** The expiration date for VM. */
    expirationDate?: Date;
    /** Indicates whether another user can take ownership of the virtual machine */
    allowClaim?: boolean;
    /** Storage type to use for virtual machine (i.e. Standard, Premium). */
    storageType?: string;
    /** The resource ID of the environment that contains this virtual machine, if any. */
    environmentId?: string;
    /** New or existing data disks to attach to the virtual machine after creation */
    dataDiskParameters?: DataDiskProperties[];
    /** Virtual Machine schedules to be created */
    scheduleParameters?: ScheduleCreationParameter[];
}

/** A virtual machine. */
export declare interface LabVirtualMachineFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface LabVirtualMachineList {
    /** Results of the list operation. */
    value?: LabVirtualMachine[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Information about a Linux OS. */
export declare interface LinuxOsInfo {
    /** The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied). */
    linuxOsState?: LinuxOsState;
}

/**
 * Defines values for LinuxOsState. \
 * {@link KnownLinuxOsState} can be used interchangeably with LinuxOsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NonDeprovisioned** \
 * **DeprovisionRequested** \
 * **DeprovisionApplied**
 */
export declare type LinuxOsState = string;

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type ManagedIdentityType = string;

/** Properties of a network interface. */
export declare interface NetworkInterfaceProperties {
    /** The resource ID of the virtual network. */
    virtualNetworkId?: string;
    /** The resource ID of the sub net. */
    subnetId?: string;
    /** The resource ID of the public IP address. */
    publicIpAddressId?: string;
    /** The public IP address. */
    publicIpAddress?: string;
    /** The private IP address. */
    privateIpAddress?: string;
    /** The DNS name. */
    dnsName?: string;
    /** The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol). */
    rdpAuthority?: string;
    /** The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH. */
    sshAuthority?: string;
    /** The configuration for sharing a public IP address across multiple virtual machines. */
    sharedPublicIpAddressConfiguration?: SharedPublicIpAddressConfiguration;
}

/** A notification. */
export declare interface NotificationChannel extends Resource {
    /** The webhook URL to send notifications to. */
    webHookUrl?: string;
    /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
    emailRecipient?: string;
    /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
    notificationLocale?: string;
    /** Description of notification. */
    description?: string;
    /** The list of event for which this notification is enabled. */
    events?: Event_2[];
    /**
     * The creation date of the notification channel.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/**
 * Defines values for NotificationChannelEventType. \
 * {@link KnownNotificationChannelEventType} can be used interchangeably with NotificationChannelEventType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AutoShutdown** \
 * **Cost**
 */
export declare type NotificationChannelEventType = string;

/** A notification. */
export declare interface NotificationChannelFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface NotificationChannelList {
    /** Results of the list operation. */
    value?: NotificationChannel[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a NotificationChannels. */
export declare interface NotificationChannels {
    /**
     * List notification channels in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: NotificationChannelsListOptionalParams): PagedAsyncIterableIterator<NotificationChannel>;
    /**
     * Get notification channel.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the notification channel.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: NotificationChannelsGetOptionalParams): Promise<NotificationChannelsGetResponse>;
    /**
     * Create or replace an existing notification channel.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the notification channel.
     * @param notificationChannel A notification.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, notificationChannel: NotificationChannel, options?: NotificationChannelsCreateOrUpdateOptionalParams): Promise<NotificationChannelsCreateOrUpdateResponse>;
    /**
     * Delete notification channel.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the notification channel.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, name: string, options?: NotificationChannelsDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of notification channels. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the notification channel.
     * @param notificationChannel A notification.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, notificationChannel: NotificationChannelFragment, options?: NotificationChannelsUpdateOptionalParams): Promise<NotificationChannelsUpdateResponse>;
    /**
     * Send notification to provided channel.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the notification channel.
     * @param notifyParameters Properties for generating a Notification.
     * @param options The options parameters.
     */
    notify(resourceGroupName: string, labName: string, name: string, notifyParameters: NotifyParameters, options?: NotificationChannelsNotifyOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface NotificationChannelsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type NotificationChannelsCreateOrUpdateResponse = NotificationChannel;

/** Optional parameters. */
export declare interface NotificationChannelsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NotificationChannelsGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type NotificationChannelsGetResponse = NotificationChannel;

/** Optional parameters. */
export declare interface NotificationChannelsListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type NotificationChannelsListNextResponse = NotificationChannelList;

/** Optional parameters. */
export declare interface NotificationChannelsListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=webHookUrl)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type NotificationChannelsListResponse = NotificationChannelList;

/** Optional parameters. */
export declare interface NotificationChannelsNotifyOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NotificationChannelsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type NotificationChannelsUpdateResponse = NotificationChannel;

/** Notification settings for a schedule. */
export declare interface NotificationSettings {
    /** If notifications are enabled for this schedule (i.e. Enabled, Disabled). */
    status?: EnableStatus;
    /** Time in minutes before event at which notification will be sent. */
    timeInMinutes?: number;
    /** The webhook URL to which the notification will be sent. */
    webhookUrl?: string;
    /** The email recipient to send notifications to (can be a list of semi-colon separated email addresses). */
    emailRecipient?: string;
    /** The locale to use when sending a notification (fallback for unsupported languages is EN). */
    notificationLocale?: string;
}

/** Properties for generating a Notification. */
export declare interface NotifyParameters {
    /** The type of event (i.e. AutoShutdown, Cost) */
    eventName?: NotificationChannelEventType;
    /** Properties for the notification in json format. */
    jsonPayload?: string;
}

/** Error details for the operation in case of a failure. */
export declare interface OperationError {
    /** The error code of the operation error. */
    code?: string;
    /** The error message of the operation error. */
    message?: string;
}

/** The REST API operation supported by DevTestLab ResourceProvider. */
export declare interface OperationMetadata {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that describes the operations */
    display?: OperationMetadataDisplay;
}

/** The object that describes the operations */
export declare interface OperationMetadataDisplay {
    /** Friendly name of the resource provider */
    provider?: string;
    /** Resource type on which the operation is performed. */
    resource?: string;
    /** Operation type: read, write, delete, listKeys/action, etc. */
    operation?: string;
    /** Friendly name of the operation */
    description?: string;
}

/** An Operation Result */
export declare interface OperationResult {
    /** The operation status. */
    status?: string;
    /** The status code for the operation. */
    statusCode?: HttpStatusCode;
    /** Error details for the operation in case of a failure. */
    error?: OperationError;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Get operation.
     * @param locationName The name of the location.
     * @param name The name of the operation.
     * @param options The options parameters.
     */
    get(locationName: string, name: string, options?: OperationsGetOptionalParams): Promise<OperationsGetResponse>;
}

/** Optional parameters. */
export declare interface OperationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationsGetResponse = OperationResult;

/** Information about an artifact's parameter. */
export declare interface ParameterInfo {
    /** The name of the artifact parameter. */
    name?: string;
    /** The value of the artifact parameter. */
    value?: string;
}

/** A file containing a set of parameter values for an ARM template. */
export declare interface ParametersValueFileInfo {
    /** File name. */
    fileName?: string;
    /** Contents of the file. */
    parametersValueInfo?: Record<string, unknown>;
}

/** Properties of a percentage cost threshold. */
export declare interface PercentageCostThresholdProperties {
    /** The cost threshold value. */
    thresholdValue?: number;
}

/** Interface representing a Policies. */
export declare interface Policies {
    /**
     * List policies in a given policy set.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, policySetName: string, options?: PoliciesListOptionalParams): PagedAsyncIterableIterator<Policy>;
    /**
     * Get policy.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: PoliciesGetOptionalParams): Promise<PoliciesGetResponse>;
    /**
     * Create or replace an existing policy.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param policy A Policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: Policy, options?: PoliciesCreateOrUpdateOptionalParams): Promise<PoliciesCreateOrUpdateResponse>;
    /**
     * Delete policy.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, policySetName: string, name: string, options?: PoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of policies. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param policySetName The name of the policy set.
     * @param name The name of the policy.
     * @param policy A Policy.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, policySetName: string, name: string, policy: PolicyFragment, options?: PoliciesUpdateOptionalParams): Promise<PoliciesUpdateResponse>;
}

/** Optional parameters. */
export declare interface PoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PoliciesCreateOrUpdateResponse = Policy;

/** Optional parameters. */
export declare interface PoliciesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PoliciesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=description)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type PoliciesGetResponse = Policy;

/** Optional parameters. */
export declare interface PoliciesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=description)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type PoliciesListNextResponse = PolicyList;

/** Optional parameters. */
export declare interface PoliciesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=description)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type PoliciesListResponse = PolicyList;

/** Optional parameters. */
export declare interface PoliciesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PoliciesUpdateResponse = Policy;

/** A Policy. */
export declare interface Policy extends Resource {
    /** The description of the policy. */
    description?: string;
    /** The status of the policy. */
    status?: PolicyStatus;
    /** The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. */
    factName?: PolicyFactName;
    /** The fact data of the policy. */
    factData?: string;
    /** The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy). */
    threshold?: string;
    /** The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy). */
    evaluatorType?: PolicyEvaluatorType;
    /**
     * The creation date of the policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/**
 * Defines values for PolicyEvaluatorType. \
 * {@link KnownPolicyEvaluatorType} can be used interchangeably with PolicyEvaluatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllowedValuesPolicy** \
 * **MaxValuePolicy**
 */
export declare type PolicyEvaluatorType = string;

/**
 * Defines values for PolicyFactName. \
 * {@link KnownPolicyFactName} can be used interchangeably with PolicyFactName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UserOwnedLabVmCount** \
 * **UserOwnedLabPremiumVmCount** \
 * **LabVmCount** \
 * **LabPremiumVmCount** \
 * **LabVmSize** \
 * **GalleryImage** \
 * **UserOwnedLabVmCountInSubnet** \
 * **LabTargetCost** \
 * **EnvironmentTemplate** \
 * **ScheduleEditPermission**
 */
export declare type PolicyFactName = string;

/** A Policy. */
export declare interface PolicyFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface PolicyList {
    /** Results of the list operation. */
    value?: Policy[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Result of a policy set evaluation. */
export declare interface PolicySetResult {
    /** A value indicating whether this policy set evaluation has discovered violations. */
    hasError?: boolean;
    /** The list of policy violations. */
    policyViolations?: PolicyViolation[];
}

/** Interface representing a PolicySets. */
export declare interface PolicySets {
    /**
     * Evaluates lab policy.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the policy set.
     * @param evaluatePoliciesRequest Request body for evaluating a policy set.
     * @param options The options parameters.
     */
    evaluatePolicies(resourceGroupName: string, labName: string, name: string, evaluatePoliciesRequest: EvaluatePoliciesRequest, options?: PolicySetsEvaluatePoliciesOptionalParams): Promise<PolicySetsEvaluatePoliciesResponse>;
}

/** Optional parameters. */
export declare interface PolicySetsEvaluatePoliciesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the evaluatePolicies operation. */
export declare type PolicySetsEvaluatePoliciesResponse = EvaluatePoliciesResponse;

/**
 * Defines values for PolicyStatus. \
 * {@link KnownPolicyStatus} can be used interchangeably with PolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PolicyStatus = string;

/** Policy violation. */
export declare interface PolicyViolation {
    /** The code of the policy violation. */
    code?: string;
    /** The message of the policy violation. */
    message?: string;
}

/** Properties of a network port. */
export declare interface Port {
    /** Protocol type of the port. */
    transportProtocol?: TransportProtocol;
    /** Backend port of the target virtual machine. */
    backendPort?: number;
}

/**
 * Defines values for PremiumDataDisk. \
 * {@link KnownPremiumDataDisk} can be used interchangeably with PremiumDataDisk,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export declare type PremiumDataDisk = string;

/** Result of the request to list REST API operations */
export declare interface ProviderOperationResult {
    /** List of operations supported by the resource provider. */
    value?: OperationMetadata[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a ProviderOperations. */
export declare interface ProviderOperations {
    /**
     * Result of the request to list REST API operations
     * @param options The options parameters.
     */
    list(options?: ProviderOperationsListOptionalParams): PagedAsyncIterableIterator<OperationMetadata>;
}

/** Optional parameters. */
export declare interface ProviderOperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ProviderOperationsListNextResponse = ProviderOperationResult;

/** Optional parameters. */
export declare interface ProviderOperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ProviderOperationsListResponse = ProviderOperationResult;

/** Represents a .rdp file */
export declare interface RdpConnection {
    /** The contents of the .rdp file */
    contents?: string;
}

/**
 * Defines values for ReportingCycleType. \
 * {@link KnownReportingCycleType} can be used interchangeably with ReportingCycleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CalendarMonth** \
 * **Custom**
 */
export declare type ReportingCycleType = string;

/** Request body for resizing a virtual machine. */
export declare interface ResizeLabVirtualMachineProperties {
    /** Specifies the size of the virtual machine. */
    size?: string;
}

/** An Azure resource. */
export declare interface Resource {
    /**
     * The identifier of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The location of the resource. */
    location?: string;
    /** The tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Properties for retargeting a virtual machine schedule. */
export declare interface RetargetScheduleProperties {
    /** The resource Id of the virtual machine on which the schedule operates */
    currentResourceId?: string;
    /** The resource Id of the virtual machine that the schedule should be retargeted to */
    targetResourceId?: string;
}

/** A schedule. */
export declare interface Schedule extends Resource {
    /** The status of the schedule (i.e. Enabled, Disabled) */
    status?: EnableStatus;
    /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
    taskType?: string;
    /** If the schedule will occur only some days of the week, specify the weekly recurrence. */
    weeklyRecurrence?: WeekDetails;
    /** If the schedule will occur once each day of the week, specify the daily recurrence. */
    dailyRecurrence?: DayDetails;
    /** If the schedule will occur multiple times a day, specify the hourly recurrence. */
    hourlyRecurrence?: HourDetails;
    /** The time zone ID (e.g. Pacific Standard time). */
    timeZoneId?: string;
    /** Notification settings. */
    notificationSettings?: NotificationSettings;
    /**
     * The creation date of the schedule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /** The resource ID to which the schedule belongs */
    targetResourceId?: string;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** Properties for creating a schedule. */
export declare interface ScheduleCreationParameter {
    /** The name of the virtual machine or environment */
    name?: string;
    /**
     * The location of the new virtual machine or environment
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** The tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The status of the schedule (i.e. Enabled, Disabled) */
    status?: EnableStatus;
    /** The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart). */
    taskType?: string;
    /** If the schedule will occur only some days of the week, specify the weekly recurrence. */
    weeklyRecurrence?: WeekDetails;
    /** If the schedule will occur once each day of the week, specify the daily recurrence. */
    dailyRecurrence?: DayDetails;
    /** If the schedule will occur multiple times a day, specify the hourly recurrence. */
    hourlyRecurrence?: HourDetails;
    /** The time zone ID (e.g. Pacific Standard time). */
    timeZoneId?: string;
    /** Notification settings. */
    notificationSettings?: NotificationSettings;
    /** The resource ID to which the schedule belongs */
    targetResourceId?: string;
}

/** A schedule. */
export declare interface ScheduleFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface ScheduleList {
    /** Results of the list operation. */
    value?: Schedule[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a Schedules. */
export declare interface Schedules {
    /**
     * List schedules in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: SchedulesListOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * Lists all applicable schedules
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    listApplicable(resourceGroupName: string, labName: string, name: string, options?: SchedulesListApplicableOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * Get schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: SchedulesGetOptionalParams): Promise<SchedulesGetResponse>;
    /**
     * Create or replace an existing schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, schedule: Schedule, options?: SchedulesCreateOrUpdateOptionalParams): Promise<SchedulesCreateOrUpdateResponse>;
    /**
     * Delete schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, name: string, options?: SchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of schedules. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, schedule: ScheduleFragment, options?: SchedulesUpdateOptionalParams): Promise<SchedulesUpdateResponse>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecute(resourceGroupName: string, labName: string, name: string, options?: SchedulesExecuteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecuteAndWait(resourceGroupName: string, labName: string, name: string, options?: SchedulesExecuteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export declare interface SchedulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SchedulesExecuteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SchedulesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type SchedulesGetResponse = Schedule;

/** Optional parameters. */
export declare interface SchedulesListApplicableNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listApplicableNext operation. */
export declare type SchedulesListApplicableNextResponse = ScheduleList;

/** Optional parameters. */
export declare interface SchedulesListApplicableOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listApplicable operation. */
export declare type SchedulesListApplicableResponse = ScheduleList;

/** Optional parameters. */
export declare interface SchedulesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type SchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export declare interface SchedulesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type SchedulesListResponse = ScheduleList;

/** Optional parameters. */
export declare interface SchedulesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type SchedulesUpdateResponse = Schedule;

/** A secret. */
export declare interface Secret extends Resource {
    /** The value of the secret for secret creation. */
    value?: string;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** A secret. */
export declare interface SecretFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface SecretList {
    /** Results of the list operation. */
    value?: Secret[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a Secrets. */
export declare interface Secrets {
    /**
     * List secrets in a given user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: SecretsListOptionalParams): PagedAsyncIterableIterator<Secret>;
    /**
     * Get secret.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: SecretsGetOptionalParams): Promise<SecretsGetResponse>;
    /**
     * Create or replace an existing secret. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param secret A secret.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, secret: Secret, options?: SecretsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SecretsCreateOrUpdateResponse>, SecretsCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing secret. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param secret A secret.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, userName: string, name: string, secret: Secret, options?: SecretsCreateOrUpdateOptionalParams): Promise<SecretsCreateOrUpdateResponse>;
    /**
     * Delete secret.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, userName: string, name: string, options?: SecretsDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of secrets. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the secret.
     * @param secret A secret.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, userName: string, name: string, secret: SecretFragment, options?: SecretsUpdateOptionalParams): Promise<SecretsUpdateResponse>;
}

/** Optional parameters. */
export declare interface SecretsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SecretsCreateOrUpdateResponse = Secret;

/** Optional parameters. */
export declare interface SecretsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SecretsGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=value)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type SecretsGetResponse = Secret;

/** Optional parameters. */
export declare interface SecretsListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=value)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type SecretsListNextResponse = SecretList;

/** Optional parameters. */
export declare interface SecretsListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=value)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type SecretsListResponse = SecretList;

/** Optional parameters. */
export declare interface SecretsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type SecretsUpdateResponse = Secret;

/** A Service Fabric. */
export declare interface ServiceFabric extends Resource {
    /** The backing service fabric resource's id */
    externalServiceFabricId?: string;
    /** The resource id of the environment under which the service fabric resource is present */
    environmentId?: string;
    /**
     * The applicable schedule for the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly applicableSchedule?: ApplicableSchedule;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** A Service Fabric. */
export declare interface ServiceFabricFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface ServiceFabricList {
    /** Results of the list operation. */
    value?: ServiceFabric[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a ServiceFabrics. */
export declare interface ServiceFabrics {
    /**
     * List service fabrics in a given user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, userName: string, options?: ServiceFabricsListOptionalParams): PagedAsyncIterableIterator<ServiceFabric>;
    /**
     * Get service fabric.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsGetOptionalParams): Promise<ServiceFabricsGetResponse>;
    /**
     * Create or replace an existing service fabric. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param serviceFabric A Service Fabric.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, userName: string, name: string, serviceFabric: ServiceFabric, options?: ServiceFabricsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServiceFabricsCreateOrUpdateResponse>, ServiceFabricsCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing service fabric. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param serviceFabric A Service Fabric.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, userName: string, name: string, serviceFabric: ServiceFabric, options?: ServiceFabricsCreateOrUpdateOptionalParams): Promise<ServiceFabricsCreateOrUpdateResponse>;
    /**
     * Delete service fabric. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete service fabric. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of service fabrics. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param serviceFabric A Service Fabric.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, userName: string, name: string, serviceFabric: ServiceFabricFragment, options?: ServiceFabricsUpdateOptionalParams): Promise<ServiceFabricsUpdateResponse>;
    /**
     * Lists the applicable start/stop schedules, if any.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    listApplicableSchedules(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsListApplicableSchedulesOptionalParams): Promise<ServiceFabricsListApplicableSchedulesResponse>;
    /**
     * Start a service fabric. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Start a service fabric. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsStartOptionalParams): Promise<void>;
    /**
     * Stop a service fabric This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stop a service fabric This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param name The name of the service fabric.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, labName: string, userName: string, name: string, options?: ServiceFabricsStopOptionalParams): Promise<void>;
}

/** Interface representing a ServiceFabricSchedules. */
export declare interface ServiceFabricSchedules {
    /**
     * List schedules in a given service fabric.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param serviceFabricName The name of the service fabric.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, userName: string, serviceFabricName: string, options?: ServiceFabricSchedulesListOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * Get schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param serviceFabricName The name of the service fabric.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, userName: string, serviceFabricName: string, name: string, options?: ServiceFabricSchedulesGetOptionalParams): Promise<ServiceFabricSchedulesGetResponse>;
    /**
     * Create or replace an existing schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param serviceFabricName The name of the service fabric.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, userName: string, serviceFabricName: string, name: string, schedule: Schedule, options?: ServiceFabricSchedulesCreateOrUpdateOptionalParams): Promise<ServiceFabricSchedulesCreateOrUpdateResponse>;
    /**
     * Delete schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param serviceFabricName The name of the service fabric.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, userName: string, serviceFabricName: string, name: string, options?: ServiceFabricSchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of schedules. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param serviceFabricName The name of the service fabric.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, userName: string, serviceFabricName: string, name: string, schedule: ScheduleFragment, options?: ServiceFabricSchedulesUpdateOptionalParams): Promise<ServiceFabricSchedulesUpdateResponse>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param serviceFabricName The name of the service fabric.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecute(resourceGroupName: string, labName: string, userName: string, serviceFabricName: string, name: string, options?: ServiceFabricSchedulesExecuteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param userName The name of the user profile.
     * @param serviceFabricName The name of the service fabric.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecuteAndWait(resourceGroupName: string, labName: string, userName: string, serviceFabricName: string, name: string, options?: ServiceFabricSchedulesExecuteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ServiceFabricSchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServiceFabricSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export declare interface ServiceFabricSchedulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ServiceFabricSchedulesExecuteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServiceFabricSchedulesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type ServiceFabricSchedulesGetResponse = Schedule;

/** Optional parameters. */
export declare interface ServiceFabricSchedulesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type ServiceFabricSchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export declare interface ServiceFabricSchedulesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type ServiceFabricSchedulesListResponse = ScheduleList;

/** Optional parameters. */
export declare interface ServiceFabricSchedulesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ServiceFabricSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export declare interface ServiceFabricsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServiceFabricsCreateOrUpdateResponse = ServiceFabric;

/** Optional parameters. */
export declare interface ServiceFabricsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServiceFabricsGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type ServiceFabricsGetResponse = ServiceFabric;

/** Optional parameters. */
export declare interface ServiceFabricsListApplicableSchedulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listApplicableSchedules operation. */
export declare type ServiceFabricsListApplicableSchedulesResponse = ApplicableSchedule;

/** Optional parameters. */
export declare interface ServiceFabricsListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type ServiceFabricsListNextResponse = ServiceFabricList;

/** Optional parameters. */
export declare interface ServiceFabricsListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=applicableSchedule)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type ServiceFabricsListResponse = ServiceFabricList;

/** Optional parameters. */
export declare interface ServiceFabricsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServiceFabricsStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServiceFabricsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ServiceFabricsUpdateResponse = ServiceFabric;

/** A container for a managed identity to execute DevTest lab services. */
export declare interface ServiceRunner extends Resource {
    /** The identity of the resource. */
    identity?: IdentityProperties;
}

/** The response of a list operation. */
export declare interface ServiceRunnerList {
    /** Results of the list operation. */
    value?: ServiceRunner[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a ServiceRunners. */
export declare interface ServiceRunners {
    /**
     * Get service runner.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the service runner.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: ServiceRunnersGetOptionalParams): Promise<ServiceRunnersGetResponse>;
    /**
     * Create or replace an existing service runner.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the service runner.
     * @param serviceRunner A container for a managed identity to execute DevTest lab services.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, name: string, serviceRunner: ServiceRunner, options?: ServiceRunnersCreateOrUpdateOptionalParams): Promise<ServiceRunnersCreateOrUpdateResponse>;
    /**
     * Delete service runner.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the service runner.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, name: string, options?: ServiceRunnersDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ServiceRunnersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServiceRunnersCreateOrUpdateResponse = ServiceRunner;

/** Optional parameters. */
export declare interface ServiceRunnersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ServiceRunnersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServiceRunnersGetResponse = ServiceRunner;

/** Properties of a virtual machine that determine how it is connected to a load balancer. */
export declare interface SharedPublicIpAddressConfiguration {
    /** The incoming NAT rules */
    inboundNatRules?: InboundNatRule[];
}

/** The contents of a shutdown notification. Webhooks can use this type to deserialize the request body when they get notified of an imminent shutdown. */
export declare interface ShutdownNotificationContent {
    /** The URL to skip auto-shutdown. */
    skipUrl?: string;
    /** The URL to delay shutdown by 60 minutes. */
    delayUrl60?: string;
    /** The URL to delay shutdown by 2 hours. */
    delayUrl120?: string;
    /** The virtual machine to be shut down. */
    vmName?: string;
    /** The GUID for the virtual machine to be shut down. */
    guid?: string;
    /** The owner of the virtual machine. */
    owner?: string;
    /** The URL of the virtual machine. */
    vmUrl?: string;
    /** Minutes remaining until shutdown */
    minutesUntilShutdown?: string;
    /** The event for which a notification will be sent. */
    eventType?: string;
    /** The text for the notification. */
    text?: string;
    /** The subscription ID for the schedule. */
    subscriptionId?: string;
    /** The resource group name for the schedule. */
    resourceGroupName?: string;
    /** The lab for the schedule. */
    labName?: string;
}

/**
 * Defines values for SourceControlType. \
 * {@link KnownSourceControlType} can be used interchangeably with SourceControlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **VsoGit** \
 * **GitHub** \
 * **StorageAccount**
 */
export declare type SourceControlType = string;

/**
 * Defines values for StorageType. \
 * {@link KnownStorageType} can be used interchangeably with StorageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Premium** \
 * **StandardSSD**
 */
export declare type StorageType = string;

/** Subnet information. */
export declare interface Subnet {
    /** The resource ID of the subnet. */
    resourceId?: string;
    /** The name of the subnet as seen in the lab. */
    labSubnetName?: string;
    /** The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)). */
    allowPublicIp?: UsagePermissionType;
}

/** Property overrides on a subnet of a virtual network. */
export declare interface SubnetOverride {
    /** The resource ID of the subnet. */
    resourceId?: string;
    /** The name given to the subnet within the lab. */
    labSubnetName?: string;
    /** Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny). */
    useInVmCreationPermission?: UsagePermissionType;
    /** Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny). */
    usePublicIpAddressPermission?: UsagePermissionType;
    /** Properties that virtual machines on this subnet will share. */
    sharedPublicIpAddressConfiguration?: SubnetSharedPublicIpAddressConfiguration;
    /** The virtual network pool associated with this subnet. */
    virtualNetworkPoolName?: string;
}

/** Configuration for public IP address sharing. */
export declare interface SubnetSharedPublicIpAddressConfiguration {
    /** Backend ports that virtual machines on this subnet are allowed to expose */
    allowedPorts?: Port[];
}

/** Properties of a cost target. */
export declare interface TargetCostProperties {
    /** Target cost status */
    status?: TargetCostStatus;
    /** Lab target cost */
    target?: number;
    /** Cost thresholds. */
    costThresholds?: CostThresholdProperties[];
    /** Reporting cycle start date. */
    cycleStartDateTime?: Date;
    /** Reporting cycle end date. */
    cycleEndDateTime?: Date;
    /** Reporting cycle type. */
    cycleType?: ReportingCycleType;
}

/**
 * Defines values for TargetCostStatus. \
 * {@link KnownTargetCostStatus} can be used interchangeably with TargetCostStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type TargetCostStatus = string;

/**
 * Defines values for TransportProtocol. \
 * {@link KnownTransportProtocol} can be used interchangeably with TransportProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tcp** \
 * **Udp**
 */
export declare type TransportProtocol = string;

/** Represents an update resource */
export declare interface UpdateResource {
    /** The tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for UsagePermissionType. \
 * {@link KnownUsagePermissionType} can be used interchangeably with UsagePermissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Deny** \
 * **Allow**
 */
export declare type UsagePermissionType = string;

/** Profile of a lab user. */
export declare interface User extends Resource {
    /** The identity of the user. */
    identity?: UserIdentity;
    /** The secret store of the user. */
    secretStore?: UserSecretStore;
    /**
     * The creation date of the user profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** Profile of a lab user. */
export declare interface UserFragment extends UpdateResource {
}

/** Identity attributes of a lab user. */
export declare interface UserIdentity {
    /** Set to the principal name / UPN of the client JWT making the request. */
    principalName?: string;
    /** Set to the principal Id of the client JWT making the request. Service principal will not have the principal Id. */
    principalId?: string;
    /** Set to the tenant ID of the client JWT making the request. */
    tenantId?: string;
    /** Set to the object Id of the client JWT making the request. Not all users have object Id. For CSP (reseller) scenarios for example, object Id is not available. */
    objectId?: string;
    /** Set to the app Id of the client JWT making the request. */
    appId?: string;
}

/** The response of a list operation. */
export declare interface UserList {
    /** Results of the list operation. */
    value?: User[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a Users. */
export declare interface Users {
    /**
     * List user profiles in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: UsersListOptionalParams): PagedAsyncIterableIterator<User>;
    /**
     * Get user profile.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: UsersGetOptionalParams): Promise<UsersGetResponse>;
    /**
     * Create or replace an existing user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param user Profile of a lab user.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, user: User, options?: UsersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<UsersCreateOrUpdateResponse>, UsersCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param user Profile of a lab user.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, name: string, user: User, options?: UsersCreateOrUpdateOptionalParams): Promise<UsersCreateOrUpdateResponse>;
    /**
     * Delete user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, name: string, options?: UsersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete user profile. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, name: string, options?: UsersDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of user profiles. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the user profile.
     * @param user Profile of a lab user.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, user: UserFragment, options?: UsersUpdateOptionalParams): Promise<UsersUpdateResponse>;
}

/** Optional parameters. */
export declare interface UsersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type UsersCreateOrUpdateResponse = User;

/** Optional parameters. */
export declare interface UsersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Properties of a user's secret store. */
export declare interface UserSecretStore {
    /** The URI of the user's Key vault. */
    keyVaultUri?: string;
    /** The ID of the user's Key vault. */
    keyVaultId?: string;
}

/** Optional parameters. */
export declare interface UsersGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=identity)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type UsersGetResponse = User;

/** Optional parameters. */
export declare interface UsersListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=identity)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type UsersListNextResponse = UserList;

/** Optional parameters. */
export declare interface UsersListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=identity)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type UsersListResponse = UserList;

/** Optional parameters. */
export declare interface UsersUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type UsersUpdateResponse = User;

/**
 * Defines values for VirtualMachineCreationSource. \
 * {@link KnownVirtualMachineCreationSource} can be used interchangeably with VirtualMachineCreationSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FromCustomImage** \
 * **FromGalleryImage** \
 * **FromSharedGalleryImage**
 */
export declare type VirtualMachineCreationSource = string;

/** Interface representing a VirtualMachines. */
export declare interface VirtualMachines {
    /**
     * List virtual machines in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: VirtualMachinesListOptionalParams): PagedAsyncIterableIterator<LabVirtualMachine>;
    /**
     * Get virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesGetOptionalParams): Promise<VirtualMachinesGetResponse>;
    /**
     * Create or replace an existing virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param labVirtualMachine A virtual machine.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, labVirtualMachine: LabVirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesCreateOrUpdateResponse>, VirtualMachinesCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param labVirtualMachine A virtual machine.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, name: string, labVirtualMachine: LabVirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<VirtualMachinesCreateOrUpdateResponse>;
    /**
     * Delete virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of virtual machines. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param labVirtualMachine A virtual machine.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, labVirtualMachine: LabVirtualMachineFragment, options?: VirtualMachinesUpdateOptionalParams): Promise<VirtualMachinesUpdateResponse>;
    /**
     * Attach a new or existing data disk to virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param dataDiskProperties Request body for adding a new or existing data disk to a virtual machine.
     * @param options The options parameters.
     */
    beginAddDataDisk(resourceGroupName: string, labName: string, name: string, dataDiskProperties: DataDiskProperties, options?: VirtualMachinesAddDataDiskOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Attach a new or existing data disk to virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param dataDiskProperties Request body for adding a new or existing data disk to a virtual machine.
     * @param options The options parameters.
     */
    beginAddDataDiskAndWait(resourceGroupName: string, labName: string, name: string, dataDiskProperties: DataDiskProperties, options?: VirtualMachinesAddDataDiskOptionalParams): Promise<void>;
    /**
     * Apply artifacts to virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param applyArtifactsRequest Request body for applying artifacts to a virtual machine.
     * @param options The options parameters.
     */
    beginApplyArtifacts(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: ApplyArtifactsRequest, options?: VirtualMachinesApplyArtifactsOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Apply artifacts to virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param applyArtifactsRequest Request body for applying artifacts to a virtual machine.
     * @param options The options parameters.
     */
    beginApplyArtifactsAndWait(resourceGroupName: string, labName: string, name: string, applyArtifactsRequest: ApplyArtifactsRequest, options?: VirtualMachinesApplyArtifactsOptionalParams): Promise<void>;
    /**
     * Take ownership of an existing virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginClaim(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesClaimOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Take ownership of an existing virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginClaimAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesClaimOptionalParams): Promise<void>;
    /**
     * Detach the specified disk from the virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param detachDataDiskProperties Request body for detaching data disk from a virtual machine.
     * @param options The options parameters.
     */
    beginDetachDataDisk(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: DetachDataDiskProperties, options?: VirtualMachinesDetachDataDiskOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Detach the specified disk from the virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param detachDataDiskProperties Request body for detaching data disk from a virtual machine.
     * @param options The options parameters.
     */
    beginDetachDataDiskAndWait(resourceGroupName: string, labName: string, name: string, detachDataDiskProperties: DetachDataDiskProperties, options?: VirtualMachinesDetachDataDiskOptionalParams): Promise<void>;
    /**
     * Gets a string that represents the contents of the RDP file for the virtual machine
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    getRdpFileContents(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesGetRdpFileContentsOptionalParams): Promise<VirtualMachinesGetRdpFileContentsResponse>;
    /**
     * Lists the applicable start/stop schedules, if any.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    listApplicableSchedules(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesListApplicableSchedulesOptionalParams): Promise<VirtualMachinesListApplicableSchedulesResponse>;
    /**
     * Redeploy a virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRedeploy(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesRedeployOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Redeploy a virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRedeployAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesRedeployOptionalParams): Promise<void>;
    /**
     * Resize Virtual Machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param resizeLabVirtualMachineProperties Request body for resizing a virtual machine.
     * @param options The options parameters.
     */
    beginResize(resourceGroupName: string, labName: string, name: string, resizeLabVirtualMachineProperties: ResizeLabVirtualMachineProperties, options?: VirtualMachinesResizeOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Resize Virtual Machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param resizeLabVirtualMachineProperties Request body for resizing a virtual machine.
     * @param options The options parameters.
     */
    beginResizeAndWait(resourceGroupName: string, labName: string, name: string, resizeLabVirtualMachineProperties: ResizeLabVirtualMachineProperties, options?: VirtualMachinesResizeOptionalParams): Promise<void>;
    /**
     * Restart a virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restart a virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesRestartOptionalParams): Promise<void>;
    /**
     * Start a virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Start a virtual machine. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesStartOptionalParams): Promise<void>;
    /**
     * Stop a virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stop a virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesStopOptionalParams): Promise<void>;
    /**
     * Transfers all data disks attached to the virtual machine to be owned by the current user. This
     * operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginTransferDisks(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesTransferDisksOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Transfers all data disks attached to the virtual machine to be owned by the current user. This
     * operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginTransferDisksAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesTransferDisksOptionalParams): Promise<void>;
    /**
     * Release ownership of an existing virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginUnClaim(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesUnClaimOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Release ownership of an existing virtual machine This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual machine.
     * @param options The options parameters.
     */
    beginUnClaimAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualMachinesUnClaimOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface VirtualMachinesAddDataDiskOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesApplyArtifactsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a VirtualMachineSchedules. */
export declare interface VirtualMachineSchedules {
    /**
     * List schedules in a given virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualMachineName The name of the virtual machine.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, virtualMachineName: string, options?: VirtualMachineSchedulesListOptionalParams): PagedAsyncIterableIterator<Schedule>;
    /**
     * Get schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualMachineName The name of the virtual machine.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: VirtualMachineSchedulesGetOptionalParams): Promise<VirtualMachineSchedulesGetResponse>;
    /**
     * Create or replace an existing schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualMachineName The name of the virtual machine.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: Schedule, options?: VirtualMachineSchedulesCreateOrUpdateOptionalParams): Promise<VirtualMachineSchedulesCreateOrUpdateResponse>;
    /**
     * Delete schedule.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualMachineName The name of the virtual machine.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: VirtualMachineSchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of schedules. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualMachineName The name of the virtual machine.
     * @param name The name of the schedule.
     * @param schedule A schedule.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, schedule: ScheduleFragment, options?: VirtualMachineSchedulesUpdateOptionalParams): Promise<VirtualMachineSchedulesUpdateResponse>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualMachineName The name of the virtual machine.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecute(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: VirtualMachineSchedulesExecuteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Execute a schedule. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param virtualMachineName The name of the virtual machine.
     * @param name The name of the schedule.
     * @param options The options parameters.
     */
    beginExecuteAndWait(resourceGroupName: string, labName: string, virtualMachineName: string, name: string, options?: VirtualMachineSchedulesExecuteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface VirtualMachineSchedulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineSchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export declare interface VirtualMachineSchedulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface VirtualMachineSchedulesExecuteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineSchedulesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type VirtualMachineSchedulesGetResponse = Schedule;

/** Optional parameters. */
export declare interface VirtualMachineSchedulesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachineSchedulesListNextResponse = ScheduleList;

/** Optional parameters. */
export declare interface VirtualMachineSchedulesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($select=status)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualMachineSchedulesListResponse = ScheduleList;

/** Optional parameters. */
export declare interface VirtualMachineSchedulesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type VirtualMachineSchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export declare interface VirtualMachinesClaimOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachinesCreateOrUpdateResponse = LabVirtualMachine;

/** Optional parameters. */
export declare interface VirtualMachinesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesDetachDataDiskOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
    expand?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesGetRdpFileContentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRdpFileContents operation. */
export declare type VirtualMachinesGetRdpFileContentsResponse = RdpConnection;

/** Contains response data for the get operation. */
export declare type VirtualMachinesGetResponse = LabVirtualMachine;

/** Optional parameters. */
export declare interface VirtualMachinesListApplicableSchedulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listApplicableSchedules operation. */
export declare type VirtualMachinesListApplicableSchedulesResponse = ApplicableSchedule;

/** Optional parameters. */
export declare interface VirtualMachinesListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type VirtualMachinesListNextResponse = LabVirtualMachineList;

/** Optional parameters. */
export declare interface VirtualMachinesListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=artifacts,computeVm,networkInterface,applicableSchedule)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualMachinesListResponse = LabVirtualMachineList;

/** Optional parameters. */
export declare interface VirtualMachinesRedeployOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesResizeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesTransferDisksOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesUnClaimOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type VirtualMachinesUpdateResponse = LabVirtualMachine;

/** A virtual network. */
export declare interface VirtualNetwork extends Resource {
    /** The allowed subnets of the virtual network. */
    allowedSubnets?: Subnet[];
    /** The description of the virtual network. */
    description?: string;
    /** The Microsoft.Network resource identifier of the virtual network. */
    externalProviderResourceId?: string;
    /**
     * The external subnet properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly externalSubnets?: ExternalSubnet[];
    /** The subnet overrides of the virtual network. */
    subnetOverrides?: SubnetOverride[];
    /**
     * The creation date of the virtual network.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: Date;
    /**
     * The provisioning status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The unique immutable identifier of a resource (Guid).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueIdentifier?: string;
}

/** A virtual network. */
export declare interface VirtualNetworkFragment extends UpdateResource {
}

/** The response of a list operation. */
export declare interface VirtualNetworkList {
    /** Results of the list operation. */
    value?: VirtualNetwork[];
    /** Link for next set of results. */
    nextLink?: string;
}

/** Interface representing a VirtualNetworks. */
export declare interface VirtualNetworks {
    /**
     * List virtual networks in a given lab.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, labName: string, options?: VirtualNetworksListOptionalParams): PagedAsyncIterableIterator<VirtualNetwork>;
    /**
     * Get virtual network.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual network.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, labName: string, name: string, options?: VirtualNetworksGetOptionalParams): Promise<VirtualNetworksGetResponse>;
    /**
     * Create or replace an existing virtual network. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual network.
     * @param virtualNetwork A virtual network.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, labName: string, name: string, virtualNetwork: VirtualNetwork, options?: VirtualNetworksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualNetworksCreateOrUpdateResponse>, VirtualNetworksCreateOrUpdateResponse>>;
    /**
     * Create or replace an existing virtual network. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual network.
     * @param virtualNetwork A virtual network.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, labName: string, name: string, virtualNetwork: VirtualNetwork, options?: VirtualNetworksCreateOrUpdateOptionalParams): Promise<VirtualNetworksCreateOrUpdateResponse>;
    /**
     * Delete virtual network. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual network.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, labName: string, name: string, options?: VirtualNetworksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete virtual network. This operation can take a while to complete.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual network.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, labName: string, name: string, options?: VirtualNetworksDeleteOptionalParams): Promise<void>;
    /**
     * Allows modifying tags of virtual networks. All other properties will be ignored.
     * @param resourceGroupName The name of the resource group.
     * @param labName The name of the lab.
     * @param name The name of the virtual network.
     * @param virtualNetwork A virtual network.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, labName: string, name: string, virtualNetwork: VirtualNetworkFragment, options?: VirtualNetworksUpdateOptionalParams): Promise<VirtualNetworksUpdateResponse>;
}

/** Optional parameters. */
export declare interface VirtualNetworksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export declare interface VirtualNetworksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualNetworksGetOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export declare interface VirtualNetworksListNextOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the listNext operation. */
export declare type VirtualNetworksListNextResponse = VirtualNetworkList;

/** Optional parameters. */
export declare interface VirtualNetworksListOptionalParams extends coreClient.OperationOptions {
    /** Specify the $expand query. Example: 'properties($expand=externalSubnets)' */
    expand?: string;
    /** The filter to apply to the operation. Example: '$filter=contains(name,'myName') */
    filter?: string;
    /** The maximum number of resources to return from the operation. Example: '$top=10' */
    top?: number;
    /** The ordering expression for the results, using OData notation. Example: '$orderby=name desc' */
    orderby?: string;
}

/** Contains response data for the list operation. */
export declare type VirtualNetworksListResponse = VirtualNetworkList;

/** Optional parameters. */
export declare interface VirtualNetworksUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type VirtualNetworksUpdateResponse = VirtualNetwork;

/** Properties of a weekly schedule. */
export declare interface WeekDetails {
    /** The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.). */
    weekdays?: string[];
    /** The time of the day the schedule will occur. */
    time?: string;
}

/** Information about a Windows OS. */
export declare interface WindowsOsInfo {
    /** The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied). */
    windowsOsState?: WindowsOsState;
}

/**
 * Defines values for WindowsOsState. \
 * {@link KnownWindowsOsState} can be used interchangeably with WindowsOsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NonSysprepped** \
 * **SysprepRequested** \
 * **SysprepApplied**
 */
export declare type WindowsOsState = string;

export { }
