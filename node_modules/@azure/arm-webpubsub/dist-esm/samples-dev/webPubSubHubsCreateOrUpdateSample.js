/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { WebPubSubManagementClient } from "@azure/arm-webpubsub";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create or update a hub setting.
 *
 * @summary Create or update a hub setting.
 * x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2023-02-01/examples/WebPubSubHubs_CreateOrUpdate.json
 */
function webPubSubHubsCreateOrUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["WEB-PUBSUB_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const hubName = "exampleHub";
        const resourceGroupName = process.env["WEB-PUBSUB_RESOURCE_GROUP"] || "myResourceGroup";
        const resourceName = "myWebPubSubService";
        const parameters = {
            properties: {
                anonymousConnectPolicy: "allow",
                eventHandlers: [
                    {
                        auth: {
                            type: "ManagedIdentity",
                            managedIdentity: { resource: "abc" }
                        },
                        systemEvents: ["connect", "connected"],
                        urlTemplate: "http://host.com",
                        userEventPattern: "*"
                    }
                ],
                eventListeners: [
                    {
                        endpoint: {
                            type: "EventHub",
                            eventHubName: "eventHubName1",
                            fullyQualifiedNamespace: "example.servicebus.windows.net"
                        },
                        filter: {
                            type: "EventName",
                            systemEvents: ["connected", "disconnected"],
                            userEventPattern: "*"
                        }
                    }
                ]
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new WebPubSubManagementClient(credential, subscriptionId);
        const result = yield client.webPubSubHubs.beginCreateOrUpdateAndWait(hubName, resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        webPubSubHubsCreateOrUpdate();
    });
}
main().catch(console.error);
//# sourceMappingURL=webPubSubHubsCreateOrUpdateSample.js.map