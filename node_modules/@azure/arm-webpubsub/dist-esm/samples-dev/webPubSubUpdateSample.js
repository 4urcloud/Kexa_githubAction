/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { WebPubSubManagementClient } from "@azure/arm-webpubsub";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Operation to update an exiting resource.
 *
 * @summary Operation to update an exiting resource.
 * x-ms-original-file: specification/webpubsub/resource-manager/Microsoft.SignalRService/stable/2023-02-01/examples/WebPubSub_Update.json
 */
function webPubSubUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["WEB-PUBSUB_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["WEB-PUBSUB_RESOURCE_GROUP"] || "myResourceGroup";
        const resourceName = "myWebPubSubService";
        const parameters = {
            disableAadAuth: false,
            disableLocalAuth: false,
            identity: { type: "SystemAssigned" },
            liveTraceConfiguration: {
                categories: [{ name: "ConnectivityLogs", enabled: "true" }],
                enabled: "false"
            },
            location: "eastus",
            networkACLs: {
                defaultAction: "Deny",
                privateEndpoints: [
                    {
                        name: "mywebpubsubservice.1fa229cd-bf3f-47f0-8c49-afb36723997e",
                        allow: ["ServerConnection"]
                    }
                ],
                publicNetwork: { allow: ["ClientConnection"] }
            },
            publicNetworkAccess: "Enabled",
            sku: { name: "Premium_P1", capacity: 1, tier: "Premium" },
            tags: { key1: "value1" },
            tls: { clientCertEnabled: false }
        };
        const credential = new DefaultAzureCredential();
        const client = new WebPubSubManagementClient(credential, subscriptionId);
        const result = yield client.webPubSub.beginUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        webPubSubUpdate();
    });
}
main().catch(console.error);
//# sourceMappingURL=webPubSubUpdateSample.js.map