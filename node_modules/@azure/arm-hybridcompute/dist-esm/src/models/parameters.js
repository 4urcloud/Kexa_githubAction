/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { MachineExtension as MachineExtensionMapper, MachineExtensionUpdate as MachineExtensionUpdateMapper, MachineExtensionUpgrade as MachineExtensionUpgradeMapper, HybridComputePrivateLinkScope as HybridComputePrivateLinkScopeMapper, TagsResource as TagsResourceMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-05-20",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const machineName = {
    parameterPath: "machineName",
    mapper: {
        serializedName: "machineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const extensionParameters = {
    parameterPath: "extensionParameters",
    mapper: MachineExtensionMapper
};
export const extensionName = {
    parameterPath: "extensionName",
    mapper: {
        serializedName: "extensionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const extensionParameters1 = {
    parameterPath: "extensionParameters",
    mapper: MachineExtensionUpdateMapper
};
export const expand1 = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const extensionUpgradeParameters = {
    parameterPath: "extensionUpgradeParameters",
    mapper: MachineExtensionUpgradeMapper
};
export const scopeName = {
    parameterPath: "scopeName",
    mapper: {
        serializedName: "scopeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: HybridComputePrivateLinkScopeMapper
};
export const privateLinkScopeTags = {
    parameterPath: "privateLinkScopeTags",
    mapper: TagsResourceMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateLinkScopeId = {
    parameterPath: "privateLinkScopeId",
    mapper: {
        serializedName: "privateLinkScopeId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const machineName1 = {
    parameterPath: "machineName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "machineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnectionMapper
};
//# sourceMappingURL=parameters.js.map