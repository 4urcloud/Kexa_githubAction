import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VmmServers } from "../operationsInterfaces";
import { Scvmm } from "../scvmm";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { VMMServer, VmmServersListByResourceGroupOptionalParams, VmmServersListBySubscriptionOptionalParams, VmmServersGetOptionalParams, VmmServersGetResponse, VmmServersCreateOrUpdateOptionalParams, VmmServersCreateOrUpdateResponse, VmmServersDeleteOptionalParams, ResourcePatch, VmmServersUpdateOptionalParams, VmmServersUpdateResponse } from "../models";
/** Class containing VmmServers operations. */
export declare class VmmServersImpl implements VmmServers {
    private readonly client;
    /**
     * Initialize a new instance of the class VmmServers class.
     * @param client Reference to the service client
     */
    constructor(client: Scvmm);
    /**
     * List of VmmServers in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VmmServersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<VMMServer>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List of VmmServers in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: VmmServersListBySubscriptionOptionalParams): PagedAsyncIterableIterator<VMMServer>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Implements VMMServer GET method.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmmServerName: string, options?: VmmServersGetOptionalParams): Promise<VmmServersGetResponse>;
    /**
     * Onboards the SCVMM fabric as an Azure VmmServer resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmmServerName: string, body: VMMServer, options?: VmmServersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VmmServersCreateOrUpdateResponse>, VmmServersCreateOrUpdateResponse>>;
    /**
     * Onboards the SCVMM fabric as an Azure VmmServer resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmmServerName: string, body: VMMServer, options?: VmmServersCreateOrUpdateOptionalParams): Promise<VmmServersCreateOrUpdateResponse>;
    /**
     * Deboards the SCVMM fabric from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmmServerName: string, options?: VmmServersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deboards the SCVMM fabric from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmmServerName: string, options?: VmmServersDeleteOptionalParams): Promise<void>;
    /**
     * Updates the VmmServers resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body VmmServers patch payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmmServerName: string, body: ResourcePatch, options?: VmmServersUpdateOptionalParams): Promise<PollerLike<PollOperationState<VmmServersUpdateResponse>, VmmServersUpdateResponse>>;
    /**
     * Updates the VmmServers resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body VmmServers patch payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmmServerName: string, body: ResourcePatch, options?: VmmServersUpdateOptionalParams): Promise<VmmServersUpdateResponse>;
    /**
     * List of VmmServers in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * List of VmmServers in a subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=vmmServers.d.ts.map