import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VirtualMachines } from "../operationsInterfaces";
import { Scvmm } from "../scvmm";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { VirtualMachine, VirtualMachinesListByResourceGroupOptionalParams, VirtualMachinesListBySubscriptionOptionalParams, VirtualMachinesGetOptionalParams, VirtualMachinesGetResponse, VirtualMachinesCreateOrUpdateOptionalParams, VirtualMachinesCreateOrUpdateResponse, VirtualMachinesDeleteOptionalParams, VirtualMachineUpdate, VirtualMachinesUpdateOptionalParams, VirtualMachinesUpdateResponse, VirtualMachinesStopOptionalParams, VirtualMachinesStartOptionalParams, VirtualMachinesRestartOptionalParams, VirtualMachinesCreateCheckpointOptionalParams, VirtualMachinesDeleteCheckpointOptionalParams, VirtualMachinesRestoreCheckpointOptionalParams } from "../models";
/** Class containing VirtualMachines operations. */
export declare class VirtualMachinesImpl implements VirtualMachines {
    private readonly client;
    /**
     * Initialize a new instance of the class VirtualMachines class.
     * @param client Reference to the service client
     */
    constructor(client: Scvmm);
    /**
     * List of VirtualMachines in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VirtualMachinesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List of VirtualMachines in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: VirtualMachinesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Implements VirtualMachine GET method.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesGetOptionalParams): Promise<VirtualMachinesGetResponse>;
    /**
     * Creates Or Updates virtual machines deployed on scvmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualMachineName: string, body: VirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesCreateOrUpdateResponse>, VirtualMachinesCreateOrUpdateResponse>>;
    /**
     * Creates Or Updates virtual machines deployed on scvmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, virtualMachineName: string, body: VirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<VirtualMachinesCreateOrUpdateResponse>;
    /**
     * Deletes a VirtualMachine deployed on ScVmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a VirtualMachine deployed on ScVmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteOptionalParams): Promise<void>;
    /**
     * Updates the VirtualMachines resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body VirtualMachines patch payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, virtualMachineName: string, body: VirtualMachineUpdate, options?: VirtualMachinesUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesUpdateResponse>, VirtualMachinesUpdateResponse>>;
    /**
     * Updates the VirtualMachines resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body VirtualMachines patch payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, virtualMachineName: string, body: VirtualMachineUpdate, options?: VirtualMachinesUpdateOptionalParams): Promise<VirtualMachinesUpdateResponse>;
    /**
     * Stop virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stop virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStopOptionalParams): Promise<void>;
    /**
     * Start virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Start virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStartOptionalParams): Promise<void>;
    /**
     * Restart virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restart virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestartOptionalParams): Promise<void>;
    /**
     * Creates a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginCreateCheckpoint(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesCreateCheckpointOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Creates a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginCreateCheckpointAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesCreateCheckpointOptionalParams): Promise<void>;
    /**
     * Deletes a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDeleteCheckpoint(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteCheckpointOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDeleteCheckpointAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteCheckpointOptionalParams): Promise<void>;
    /**
     * Restores to a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestoreCheckpoint(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestoreCheckpointOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restores to a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestoreCheckpointAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestoreCheckpointOptionalParams): Promise<void>;
    /**
     * List of VirtualMachines in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * List of VirtualMachines in a subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=virtualMachines.d.ts.map