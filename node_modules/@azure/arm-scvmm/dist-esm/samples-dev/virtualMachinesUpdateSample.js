/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { Scvmm } from "@azure/arm-scvmm";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates the VirtualMachines resource.
 *
 * @summary Updates the VirtualMachines resource.
 * x-ms-original-file: specification/scvmm/resource-manager/Microsoft.ScVmm/preview/2020-06-05-preview/examples/UpdateVirtualMachine.json
 */
function updateVirtualMachine() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SCVMM_SUBSCRIPTION_ID"] ||
            "fd3c3665-1729-4b7b-9a38-238e83b0f98b";
        const resourceGroupName = process.env["SCVMM_RESOURCE_GROUP"] || "testrg";
        const virtualMachineName = "DemoVM";
        const body = {
            properties: {
                hardwareProfile: { cpuCount: 4, memoryMB: 4096 },
                networkProfile: {
                    networkInterfaces: [
                        {
                            name: "test",
                            ipv4AddressType: "Dynamic",
                            ipv6AddressType: "Dynamic",
                            macAddressType: "Static"
                        }
                    ]
                },
                storageProfile: { disks: [{ name: "test", diskSizeGB: 10 }] }
            },
            tags: { tag1: "value1", tag2: "value2" }
        };
        const credential = new DefaultAzureCredential();
        const client = new Scvmm(credential, subscriptionId);
        const result = yield client.virtualMachines.beginUpdateAndWait(resourceGroupName, virtualMachineName, body);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        updateVirtualMachine();
    });
}
main().catch(console.error);
//# sourceMappingURL=virtualMachinesUpdateSample.js.map