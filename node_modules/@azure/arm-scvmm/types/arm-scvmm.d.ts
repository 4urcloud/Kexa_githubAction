import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for AllocationMethod. \
 * {@link KnownAllocationMethod} can be used interchangeably with AllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dynamic** \
 * **Static**
 */
export declare type AllocationMethod = string;

/** The AvailabilitySets resource definition. */
export declare interface AvailabilitySet {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource Type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Gets or sets the location. */
    location?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The extended location. */
    extendedLocation?: ExtendedLocation;
    /** Name of the availability set. */
    availabilitySetName?: string;
    /** ARM Id of the vmmServer resource in which this resource resides. */
    vmmServerId?: string;
    /**
     * Gets or sets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** Availability Set model */
export declare interface AvailabilitySetListItem {
    /** Gets the ARM Id of the microsoft.scvmm/availabilitySets resource. */
    id?: string;
    /** Gets or sets the name of the availability set. */
    name?: string;
}

/** List of AvailabilitySets. */
export declare interface AvailabilitySetListResult {
    /** List of AvailabilitySets. */
    value?: AvailabilitySet[];
    /** Url to follow for getting next page of resources. */
    nextLink?: string;
}

/** Interface representing a AvailabilitySets. */
export declare interface AvailabilitySets {
    /**
     * List of AvailabilitySets in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AvailabilitySetsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<AvailabilitySet>;
    /**
     * List of AvailabilitySets in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: AvailabilitySetsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<AvailabilitySet>;
    /**
     * Implements AvailabilitySet GET method.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName Name of the AvailabilitySet.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, availabilitySetName: string, options?: AvailabilitySetsGetOptionalParams): Promise<AvailabilitySetsGetResponse>;
    /**
     * Onboards the ScVmm availability set as an Azure resource.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName Name of the AvailabilitySet.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, availabilitySetName: string, body: AvailabilitySet, options?: AvailabilitySetsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<AvailabilitySetsCreateOrUpdateResponse>, AvailabilitySetsCreateOrUpdateResponse>>;
    /**
     * Onboards the ScVmm availability set as an Azure resource.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName Name of the AvailabilitySet.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, availabilitySetName: string, body: AvailabilitySet, options?: AvailabilitySetsCreateOrUpdateOptionalParams): Promise<AvailabilitySetsCreateOrUpdateResponse>;
    /**
     * Deregisters the ScVmm availability set from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName Name of the AvailabilitySet.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, availabilitySetName: string, options?: AvailabilitySetsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deregisters the ScVmm availability set from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName Name of the AvailabilitySet.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, availabilitySetName: string, options?: AvailabilitySetsDeleteOptionalParams): Promise<void>;
    /**
     * Updates the AvailabilitySets resource.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName Name of the AvailabilitySet.
     * @param body AvailabilitySets patch payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, availabilitySetName: string, body: ResourcePatch, options?: AvailabilitySetsUpdateOptionalParams): Promise<PollerLike<PollOperationState<AvailabilitySetsUpdateResponse>, AvailabilitySetsUpdateResponse>>;
    /**
     * Updates the AvailabilitySets resource.
     * @param resourceGroupName The name of the resource group.
     * @param availabilitySetName Name of the AvailabilitySet.
     * @param body AvailabilitySets patch payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, availabilitySetName: string, body: ResourcePatch, options?: AvailabilitySetsUpdateOptionalParams): Promise<AvailabilitySetsUpdateResponse>;
}

/** Defines headers for AvailabilitySets_createOrUpdate operation. */
export declare interface AvailabilitySetsCreateOrUpdateHeaders {
    /** Tracking URL for long running operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface AvailabilitySetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AvailabilitySetsCreateOrUpdateResponse = AvailabilitySet;

/** Defines headers for AvailabilitySets_delete operation. */
export declare interface AvailabilitySetsDeleteHeaders {
    /** Tracking URL for long running operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface AvailabilitySetsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Forces the resource to be deleted from azure. The corresponding CR would be attempted to be deleted too. */
    force?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AvailabilitySetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AvailabilitySetsGetResponse = AvailabilitySet;

/** Optional parameters. */
export declare interface AvailabilitySetsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type AvailabilitySetsListByResourceGroupNextResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type AvailabilitySetsListByResourceGroupResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type AvailabilitySetsListBySubscriptionNextResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type AvailabilitySetsListBySubscriptionResponse = AvailabilitySetListResult;

/** Optional parameters. */
export declare interface AvailabilitySetsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type AvailabilitySetsUpdateResponse = AvailabilitySet;

/** Defines the resource properties. */
export declare interface Checkpoint {
    /** Gets ID of parent of the checkpoint. */
    parentCheckpointID?: string;
    /** Gets ID of the checkpoint. */
    checkpointID?: string;
    /** Gets name of the checkpoint. */
    name?: string;
    /** Gets description of the checkpoint. */
    description?: string;
}

/** The Clouds resource definition. */
export declare interface Cloud {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource Type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Gets or sets the location. */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The extended location. */
    extendedLocation: ExtendedLocation;
    /** Gets or sets the inventory Item ID for the resource. */
    inventoryItemId?: string;
    /** Unique ID of the cloud. */
    uuid?: string;
    /** ARM Id of the vmmServer resource in which this resource resides. */
    vmmServerId?: string;
    /**
     * Name of the cloud in VMMServer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudName?: string;
    /**
     * Capacity of the cloud.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudCapacity?: CloudCapacity;
    /**
     * List of QoS policies available for the cloud.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageQoSPolicies?: StorageQoSPolicy[];
    /**
     * Gets or sets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** Cloud Capacity model */
export declare interface CloudCapacity {
    /** CPUCount specifies the maximum number of CPUs that can be allocated in the cloud. */
    cpuCount?: number;
    /** MemoryMB specifies a memory usage limit in megabytes. */
    memoryMB?: number;
    /** VMCount gives the max number of VMs that can be deployed in the cloud. */
    vmCount?: number;
}

/** The Cloud inventory item. */
export declare interface CloudInventoryItem extends InventoryItemProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    inventoryType: "Cloud";
}

/** List of Clouds. */
export declare interface CloudListResult {
    /** List of Clouds. */
    value?: Cloud[];
    /** Url to follow for getting next page of resources. */
    nextLink?: string;
}

/** Interface representing a Clouds. */
export declare interface Clouds {
    /**
     * List of Clouds in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: CloudsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Cloud>;
    /**
     * List of Clouds in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: CloudsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Cloud>;
    /**
     * Implements Cloud GET method.
     * @param resourceGroupName The name of the resource group.
     * @param cloudName Name of the Cloud.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, cloudName: string, options?: CloudsGetOptionalParams): Promise<CloudsGetResponse>;
    /**
     * Onboards the ScVmm fabric cloud as an Azure cloud resource.
     * @param resourceGroupName The name of the resource group.
     * @param cloudName Name of the Cloud.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, cloudName: string, body: Cloud, options?: CloudsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<CloudsCreateOrUpdateResponse>, CloudsCreateOrUpdateResponse>>;
    /**
     * Onboards the ScVmm fabric cloud as an Azure cloud resource.
     * @param resourceGroupName The name of the resource group.
     * @param cloudName Name of the Cloud.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, cloudName: string, body: Cloud, options?: CloudsCreateOrUpdateOptionalParams): Promise<CloudsCreateOrUpdateResponse>;
    /**
     * Deregisters the ScVmm fabric cloud from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param cloudName Name of the Cloud.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, cloudName: string, options?: CloudsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deregisters the ScVmm fabric cloud from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param cloudName Name of the Cloud.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, cloudName: string, options?: CloudsDeleteOptionalParams): Promise<void>;
    /**
     * Updates the Clouds resource.
     * @param resourceGroupName The name of the resource group.
     * @param cloudName Name of the Cloud.
     * @param body Clouds patch payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, cloudName: string, body: ResourcePatch, options?: CloudsUpdateOptionalParams): Promise<PollerLike<PollOperationState<CloudsUpdateResponse>, CloudsUpdateResponse>>;
    /**
     * Updates the Clouds resource.
     * @param resourceGroupName The name of the resource group.
     * @param cloudName Name of the Cloud.
     * @param body Clouds patch payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, cloudName: string, body: ResourcePatch, options?: CloudsUpdateOptionalParams): Promise<CloudsUpdateResponse>;
}

/** Optional parameters. */
export declare interface CloudsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CloudsCreateOrUpdateResponse = Cloud;

/** Optional parameters. */
export declare interface CloudsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Forces the resource to be deleted from azure. The corresponding CR would be attempted to be deleted too. */
    force?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CloudsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CloudsGetResponse = Cloud;

/** Optional parameters. */
export declare interface CloudsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type CloudsListByResourceGroupNextResponse = CloudListResult;

/** Optional parameters. */
export declare interface CloudsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type CloudsListByResourceGroupResponse = CloudListResult;

/** Optional parameters. */
export declare interface CloudsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type CloudsListBySubscriptionNextResponse = CloudListResult;

/** Optional parameters. */
export declare interface CloudsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type CloudsListBySubscriptionResponse = CloudListResult;

/** Optional parameters. */
export declare interface CloudsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type CloudsUpdateResponse = Cloud;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for CreateDiffDisk. \
 * {@link KnownCreateDiffDisk} can be used interchangeably with CreateDiffDisk,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **false** \
 * **true**
 */
export declare type CreateDiffDisk = string;

/**
 * Defines values for DynamicMemoryEnabled. \
 * {@link KnownDynamicMemoryEnabled} can be used interchangeably with DynamicMemoryEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **false** \
 * **true**
 */
export declare type DynamicMemoryEnabled = string;

/** Error definition. */
export declare interface ErrorDefinition {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Internal error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDefinition[];
}

/** Error response. */
export declare interface ErrorResponse {
    /** The error details. */
    error?: ErrorDefinition;
}

/** The extended location. */
export declare interface ExtendedLocation {
    /** The extended location type. */
    type?: string;
    /** The extended location name. */
    name?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Defines the resource properties. */
export declare interface HardwareProfile {
    /** MemoryMB is the size of a virtual machine's memory, in MB. */
    memoryMB?: number;
    /** Gets or sets the number of vCPUs for the vm. */
    cpuCount?: number;
    /** Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs. */
    limitCpuForMigration?: LimitCpuForMigration;
    /** Gets or sets a value indicating whether to enable dynamic memory or not. */
    dynamicMemoryEnabled?: DynamicMemoryEnabled;
    /** Gets or sets the max dynamic memory for the vm. */
    dynamicMemoryMaxMB?: number;
    /** Gets or sets the min dynamic memory for the vm. */
    dynamicMemoryMinMB?: number;
    /** Gets highly available property. */
    isHighlyAvailable?: string;
}

/** Defines the resource properties. */
export declare interface HardwareProfileUpdate {
    /** MemoryMB is the size of a virtual machine's memory, in MB. */
    memoryMB?: number;
    /** Gets or sets the number of vCPUs for the vm. */
    cpuCount?: number;
    /** Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs. */
    limitCpuForMigration?: LimitCpuForMigration;
    /** Gets or sets a value indicating whether to enable dynamic memory or not. */
    dynamicMemoryEnabled?: DynamicMemoryEnabled;
    /** Gets or sets the max dynamic memory for the vm. */
    dynamicMemoryMaxMB?: number;
    /** Gets or sets the min dynamic memory for the vm. */
    dynamicMemoryMinMB?: number;
}

/** Defines the inventory item. */
export declare interface InventoryItem extends ProxyResource {
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
    kind?: string;
    /** They inventory type. */
    inventoryType: InventoryType;
    /**
     * Gets the tracked resource id corresponding to the inventory resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedResourceId?: string;
    /**
     * Gets the UUID (which is assigned by VMM) for the inventory item.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uuid?: string;
    /**
     * Gets the Managed Object name in VMM for the inventory item.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inventoryItemName?: string;
    /**
     * Gets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** Defines the resource properties. */
export declare interface InventoryItemDetails {
    /** Gets or sets the inventory Item ID for the resource. */
    inventoryItemId?: string;
    /** Gets or sets the Managed Object name in VMM for the resource. */
    inventoryItemName?: string;
}

/** Defines the resource properties. */
export declare interface InventoryItemProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    inventoryType: "Cloud" | "VirtualNetwork" | "VirtualMachineTemplate" | "VirtualMachine";
    /**
     * Gets the tracked resource id corresponding to the inventory resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedResourceId?: string;
    /**
     * Gets the UUID (which is assigned by VMM) for the inventory item.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uuid?: string;
    /**
     * Gets the Managed Object name in VMM for the inventory item.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inventoryItemName?: string;
    /**
     * Gets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

export declare type InventoryItemPropertiesUnion = InventoryItemProperties | CloudInventoryItem | VirtualNetworkInventoryItem | VirtualMachineTemplateInventoryItem | VirtualMachineInventoryItem;

/** Interface representing a InventoryItems. */
export declare interface InventoryItems {
    /**
     * Returns the list of inventoryItems in the given VMMServer.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param options The options parameters.
     */
    listByVMMServer(resourceGroupName: string, vmmServerName: string, options?: InventoryItemsListByVMMServerOptionalParams): PagedAsyncIterableIterator<InventoryItem>;
    /**
     * Create Or Update InventoryItem.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param inventoryItemName Name of the inventoryItem.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, vmmServerName: string, inventoryItemName: string, options?: InventoryItemsCreateOptionalParams): Promise<InventoryItemsCreateResponse>;
    /**
     * Shows an inventory item.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param inventoryItemName Name of the inventoryItem.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmmServerName: string, inventoryItemName: string, options?: InventoryItemsGetOptionalParams): Promise<InventoryItemsGetResponse>;
    /**
     * Deletes an inventoryItem.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param inventoryItemName Name of the inventoryItem.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, vmmServerName: string, inventoryItemName: string, options?: InventoryItemsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface InventoryItemsCreateOptionalParams extends coreClient.OperationOptions {
    /** Request payload. */
    body?: InventoryItem;
}

/** Contains response data for the create operation. */
export declare type InventoryItemsCreateResponse = InventoryItem;

/** Optional parameters. */
export declare interface InventoryItemsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface InventoryItemsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type InventoryItemsGetResponse = InventoryItem;

/** List of InventoryItems. */
export declare interface InventoryItemsList {
    /** Url to follow for getting next page of InventoryItems. */
    nextLink?: string;
    /** Array of InventoryItems */
    value: InventoryItem[];
}

/** Optional parameters. */
export declare interface InventoryItemsListByVMMServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByVMMServerNext operation. */
export declare type InventoryItemsListByVMMServerNextResponse = InventoryItemsList;

/** Optional parameters. */
export declare interface InventoryItemsListByVMMServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByVMMServer operation. */
export declare type InventoryItemsListByVMMServerResponse = InventoryItemsList;

/**
 * Defines values for InventoryType. \
 * {@link KnownInventoryType} can be used interchangeably with InventoryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cloud** \
 * **VirtualNetwork** \
 * **VirtualMachineTemplate** \
 * **VirtualMachine**
 */
export declare type InventoryType = string;

/**
 * Defines values for IsCustomizable. \
 * {@link KnownIsCustomizable} can be used interchangeably with IsCustomizable,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **false** \
 * **true**
 */
export declare type IsCustomizable = string;

/** Known values of {@link AllocationMethod} that the service accepts. */
export declare enum KnownAllocationMethod {
    /** Dynamic */
    Dynamic = "Dynamic",
    /** Static */
    Static = "Static"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CreateDiffDisk} that the service accepts. */
export declare enum KnownCreateDiffDisk {
    /** False */
    False = "false",
    /** True */
    True = "true"
}

/** Known values of {@link DynamicMemoryEnabled} that the service accepts. */
export declare enum KnownDynamicMemoryEnabled {
    /** False */
    False = "false",
    /** True */
    True = "true"
}

/** Known values of {@link InventoryType} that the service accepts. */
export declare enum KnownInventoryType {
    /** Cloud */
    Cloud = "Cloud",
    /** VirtualNetwork */
    VirtualNetwork = "VirtualNetwork",
    /** VirtualMachineTemplate */
    VirtualMachineTemplate = "VirtualMachineTemplate",
    /** VirtualMachine */
    VirtualMachine = "VirtualMachine"
}

/** Known values of {@link IsCustomizable} that the service accepts. */
export declare enum KnownIsCustomizable {
    /** False */
    False = "false",
    /** True */
    True = "true"
}

/** Known values of {@link LimitCpuForMigration} that the service accepts. */
export declare enum KnownLimitCpuForMigration {
    /** False */
    False = "false",
    /** True */
    True = "true"
}

/** Known values of {@link OsType} that the service accepts. */
export declare enum KnownOsType {
    /** Windows */
    Windows = "Windows",
    /** Linux */
    Linux = "Linux",
    /** Other */
    Other = "Other"
}

/**
 * Defines values for LimitCpuForMigration. \
 * {@link KnownLimitCpuForMigration} can be used interchangeably with LimitCpuForMigration,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **false** \
 * **true**
 */
export declare type LimitCpuForMigration = string;

/** Network Interface model */
export declare interface NetworkInterfaces {
    /** Gets or sets the name of the network interface. */
    name?: string;
    /**
     * Gets the display name of the network interface as shown in the vmmServer. This is the fallback label for a NIC when the name is not set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Gets or sets the nic ipv4 addresses.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipv4Addresses?: string[];
    /**
     * Gets or sets the nic ipv6 addresses.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipv6Addresses?: string[];
    /** Gets or sets the nic MAC address. */
    macAddress?: string;
    /** Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic. */
    virtualNetworkId?: string;
    /**
     * Gets or sets the name of the virtual network in vmmServer that the nic is connected to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkName?: string;
    /** Gets or sets the ipv4 address type. */
    ipv4AddressType?: AllocationMethod;
    /** Gets or sets the ipv6 address type. */
    ipv6AddressType?: AllocationMethod;
    /** Gets or sets the mac address type. */
    macAddressType?: AllocationMethod;
    /** Gets or sets the nic id. */
    nicId?: string;
}

/** Network Interface model */
export declare interface NetworkInterfacesUpdate {
    /** Gets or sets the name of the network interface. */
    name?: string;
    /** Gets or sets the nic MAC address. */
    macAddress?: string;
    /** Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic. */
    virtualNetworkId?: string;
    /** Gets or sets the ipv4 address type. */
    ipv4AddressType?: AllocationMethod;
    /** Gets or sets the ipv6 address type. */
    ipv6AddressType?: AllocationMethod;
    /** Gets or sets the mac address type. */
    macAddressType?: AllocationMethod;
    /** Gets or sets the nic id. */
    nicId?: string;
}

/** Defines the resource properties. */
export declare interface NetworkProfile {
    /** Gets or sets the list of network interfaces associated with the virtual machine. */
    networkInterfaces?: NetworkInterfaces[];
}

/** Defines the resource properties. */
export declare interface NetworkProfileUpdate {
    /** Gets or sets the list of network interfaces associated with the virtual machine. */
    networkInterfaces?: NetworkInterfacesUpdate[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Returns list of all operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ResourceProviderOperation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ResourceProviderOperationList;

/** Defines the resource properties. */
export declare interface OsProfile {
    /** Admin password of the virtual machine. */
    adminPassword?: string;
    /** Gets or sets computer name. */
    computerName?: string;
    /**
     * Gets or sets the type of the os.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OsType;
    /**
     * Gets or sets os name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osName?: string;
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux** \
 * **Other**
 */
export declare type OsType = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Object containing tags updates for patch operations. */
export declare interface ResourcePatch {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Results of the request to list operations. */
export declare interface ResourceProviderOperation {
    /** Indicates whether the operation applies to data-plane. */
    isDataAction?: string;
    /** Operation name, in format of {provider}/{resource}/{operation}. */
    name?: string;
    /** Display metadata associated with the operation. */
    display?: ResourceProviderOperationDisplay;
}

/** Display metadata associated with the operation. */
export declare interface ResourceProviderOperationDisplay {
    /** The resource provider. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
    /** Type of operation: read, write, delete, etc. */
    operation?: string;
    /** Description of this operation. */
    description?: string;
}

/** Results of the request to list operations. */
export declare interface ResourceProviderOperationList {
    /** List of Operations. */
    value?: ResourceProviderOperation[];
    /** Url to follow for getting next page of resources. */
    nextLink?: string;
}

export declare class Scvmm extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the Scvmm class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000).
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ScvmmOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    vmmServers: VmmServers;
    operations: Operations;
    clouds: Clouds;
    virtualNetworks: VirtualNetworks;
    virtualMachines: VirtualMachines;
    virtualMachineTemplates: VirtualMachineTemplates;
    availabilitySets: AvailabilitySets;
    inventoryItems: InventoryItems;
}

/** Optional parameters. */
export declare interface ScvmmOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Defines the stop action properties. */
export declare interface StopVirtualMachineOptions {
    /** Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false. */
    skipShutdown?: boolean;
}

/** Defines the resource properties. */
export declare interface StorageProfile {
    /** Gets or sets the list of virtual disks associated with the virtual machine. */
    disks?: VirtualDisk[];
}

/** Defines the resource properties. */
export declare interface StorageProfileUpdate {
    /** Gets or sets the list of virtual disks associated with the virtual machine. */
    disks?: VirtualDiskUpdate[];
}

/** The StorageQoSPolicy definition. */
export declare interface StorageQoSPolicy {
    /** The name of the policy. */
    name?: string;
    /** The ID of the QoS policy. */
    id?: string;
    /** The maximum IO operations per second. */
    iopsMaximum?: number;
    /** The minimum IO operations per second. */
    iopsMinimum?: number;
    /** The Bandwidth Limit for internet traffic. */
    bandwidthLimit?: number;
    /** The underlying policy. */
    policyId?: string;
}

/** The StorageQoSPolicyDetails definition. */
export declare interface StorageQoSPolicyDetails {
    /** The name of the policy. */
    name?: string;
    /** The ID of the QoS policy. */
    id?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Virtual disk model */
export declare interface VirtualDisk {
    /** Gets or sets the name of the disk. */
    name?: string;
    /**
     * Gets the display name of the virtual disk as shown in the vmmServer. This is the fallback label for a disk when the name is not set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /** Gets or sets the disk id. */
    diskId?: string;
    /** Gets or sets the disk total size. */
    diskSizeGB?: number;
    /**
     * Gets or sets the max disk size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxDiskSizeGB?: number;
    /** Gets or sets the disk bus. */
    bus?: number;
    /** Gets or sets the disk lun. */
    lun?: number;
    /** Gets or sets the disk bus type. */
    busType?: string;
    /** Gets or sets the disk vhd type. */
    vhdType?: string;
    /**
     * Gets or sets the disk volume type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly volumeType?: string;
    /**
     * Gets the disk vhd format type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vhdFormatType?: string;
    /** Gets or sets the disk id in the template. */
    templateDiskId?: string;
    /** The QoS policy for the disk. */
    storageQoSPolicy?: StorageQoSPolicyDetails;
    /** Gets or sets a value indicating diff disk. */
    createDiffDisk?: CreateDiffDisk;
}

/** Virtual disk model */
export declare interface VirtualDiskUpdate {
    /** Gets or sets the name of the disk. */
    name?: string;
    /** Gets or sets the disk id. */
    diskId?: string;
    /** Gets or sets the disk total size. */
    diskSizeGB?: number;
    /** Gets or sets the disk bus. */
    bus?: number;
    /** Gets or sets the disk lun. */
    lun?: number;
    /** Gets or sets the disk bus type. */
    busType?: string;
    /** Gets or sets the disk vhd type. */
    vhdType?: string;
    /** The QoS policy for the disk. */
    storageQoSPolicy?: StorageQoSPolicyDetails;
}

/** The VirtualMachines resource definition. */
export declare interface VirtualMachine {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource Type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Gets or sets the location. */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The extended location. */
    extendedLocation: ExtendedLocation;
    /** Gets or sets the inventory Item ID for the resource. */
    inventoryItemId?: string;
    /** ARM Id of the vmmServer resource in which this resource resides. */
    vmmServerId?: string;
    /** ARM Id of the cloud resource to use for deploying the vm. */
    cloudId?: string;
    /** ARM Id of the template resource to use for deploying the vm. */
    templateId?: string;
    /** Type of checkpoint supported for the vm. */
    checkpointType?: string;
    /** Checkpoints in the vm. */
    checkpoints?: Checkpoint[];
    /** Availability Sets in vm. */
    availabilitySets?: AvailabilitySetListItem[];
    /** OS properties. */
    osProfile?: OsProfile;
    /** Hardware properties. */
    hardwareProfile?: HardwareProfile;
    /** Network properties. */
    networkProfile?: NetworkProfile;
    /** Storage properties. */
    storageProfile?: StorageProfile;
    /** VMName is the name of VM on the SCVMM server. */
    vmName?: string;
    /** Unique ID of the virtual machine. */
    uuid?: string;
    /** Gets or sets the generation for the vm. */
    generation?: number;
    /**
     * Gets the power state of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly powerState?: string;
    /**
     * Gets or sets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** Defines the create checkpoint action properties. */
export declare interface VirtualMachineCreateCheckpoint {
    /** Name of the checkpoint. */
    name?: string;
    /** Description of the checkpoint. */
    description?: string;
}

/** Defines the delete checkpoint action properties. */
export declare interface VirtualMachineDeleteCheckpoint {
    /** ID of the checkpoint to be deleted. */
    id?: string;
}

/** The Virtual machine inventory item. */
export declare interface VirtualMachineInventoryItem extends InventoryItemProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    inventoryType: "VirtualMachine";
    /**
     * Gets or sets the type of the os.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OsType;
    /**
     * Gets or sets os name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osName?: string;
    /**
     * Gets the power state of the virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly powerState?: string;
    /** Gets or sets the nic ip addresses. */
    ipAddresses?: string[];
    /** Cloud inventory resource details where the VM is present. */
    cloud?: InventoryItemDetails;
}

/** List of VirtualMachines. */
export declare interface VirtualMachineListResult {
    /** List of VirtualMachines. */
    value?: VirtualMachine[];
    /** Url to follow for getting next page of resources. */
    nextLink?: string;
}

/** Defines the restore checkpoint action properties. */
export declare interface VirtualMachineRestoreCheckpoint {
    /** ID of the checkpoint to be restored to. */
    id?: string;
}

/** Interface representing a VirtualMachines. */
export declare interface VirtualMachines {
    /**
     * List of VirtualMachines in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VirtualMachinesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    /**
     * List of VirtualMachines in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: VirtualMachinesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<VirtualMachine>;
    /**
     * Implements VirtualMachine GET method.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesGetOptionalParams): Promise<VirtualMachinesGetResponse>;
    /**
     * Creates Or Updates virtual machines deployed on scvmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualMachineName: string, body: VirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesCreateOrUpdateResponse>, VirtualMachinesCreateOrUpdateResponse>>;
    /**
     * Creates Or Updates virtual machines deployed on scvmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, virtualMachineName: string, body: VirtualMachine, options?: VirtualMachinesCreateOrUpdateOptionalParams): Promise<VirtualMachinesCreateOrUpdateResponse>;
    /**
     * Deletes a VirtualMachine deployed on ScVmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a VirtualMachine deployed on ScVmm fabric.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteOptionalParams): Promise<void>;
    /**
     * Updates the VirtualMachines resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body VirtualMachines patch payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, virtualMachineName: string, body: VirtualMachineUpdate, options?: VirtualMachinesUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachinesUpdateResponse>, VirtualMachinesUpdateResponse>>;
    /**
     * Updates the VirtualMachines resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param body VirtualMachines patch payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, virtualMachineName: string, body: VirtualMachineUpdate, options?: VirtualMachinesUpdateOptionalParams): Promise<VirtualMachinesUpdateResponse>;
    /**
     * Stop virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stop virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStopOptionalParams): Promise<void>;
    /**
     * Start virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Start virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesStartOptionalParams): Promise<void>;
    /**
     * Restart virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restart virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestartOptionalParams): Promise<void>;
    /**
     * Creates a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginCreateCheckpoint(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesCreateCheckpointOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Creates a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginCreateCheckpointAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesCreateCheckpointOptionalParams): Promise<void>;
    /**
     * Deletes a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDeleteCheckpoint(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteCheckpointOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginDeleteCheckpointAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesDeleteCheckpointOptionalParams): Promise<void>;
    /**
     * Restores to a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestoreCheckpoint(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestoreCheckpointOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restores to a checkpoint in virtual machine.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineName Name of the VirtualMachine.
     * @param options The options parameters.
     */
    beginRestoreCheckpointAndWait(resourceGroupName: string, virtualMachineName: string, options?: VirtualMachinesRestoreCheckpointOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface VirtualMachinesCreateCheckpointOptionalParams extends coreClient.OperationOptions {
    /** Virtualmachine create checkpoint action payload. */
    body?: VirtualMachineCreateCheckpoint;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachinesCreateOrUpdateResponse = VirtualMachine;

/** Optional parameters. */
export declare interface VirtualMachinesDeleteCheckpointOptionalParams extends coreClient.OperationOptions {
    /** Virtualmachine delete checkpoint action payload. */
    body?: VirtualMachineDeleteCheckpoint;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Forces the resource to be deleted from azure. The corresponding CR would be attempted to be deleted too. */
    force?: boolean;
    /** Whether to just disable the VM from azure and retain the VM in the VMM. */
    retain?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachinesGetResponse = VirtualMachine;

/** Optional parameters. */
export declare interface VirtualMachinesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type VirtualMachinesListByResourceGroupNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type VirtualMachinesListByResourceGroupResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type VirtualMachinesListBySubscriptionNextResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type VirtualMachinesListBySubscriptionResponse = VirtualMachineListResult;

/** Optional parameters. */
export declare interface VirtualMachinesRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesRestoreCheckpointOptionalParams extends coreClient.OperationOptions {
    /** Virtualmachine restore checkpoint action payload. */
    body?: VirtualMachineRestoreCheckpoint;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesStopOptionalParams extends coreClient.OperationOptions {
    /** Virtualmachine stop action payload. */
    body?: StopVirtualMachineOptions;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachinesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachinesUpdateResponse = VirtualMachine;

/** The VirtualMachineTemplates resource definition. */
export declare interface VirtualMachineTemplate {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource Type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Gets or sets the location. */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The extended location. */
    extendedLocation: ExtendedLocation;
    /** Gets or sets the inventory Item ID for the resource. */
    inventoryItemId?: string;
    /** Unique ID of the virtual machine template. */
    uuid?: string;
    /** ARM Id of the vmmServer resource in which this resource resides. */
    vmmServerId?: string;
    /**
     * Gets or sets the type of the os.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OsType;
    /**
     * Gets or sets os name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osName?: string;
    /**
     * Gets or sets computer name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly computerName?: string;
    /**
     * MemoryMB is the desired size of a virtual machine's memory, in MB.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memoryMB?: number;
    /**
     * Gets or sets the desired number of vCPUs for the vm.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpuCount?: number;
    /**
     * Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly limitCpuForMigration?: LimitCpuForMigration;
    /**
     * Gets or sets a value indicating whether to enable dynamic memory or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dynamicMemoryEnabled?: DynamicMemoryEnabled;
    /**
     * Gets or sets a value indicating whether the vm template is customizable or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isCustomizable?: IsCustomizable;
    /**
     * Gets or sets the max dynamic memory for the vm.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dynamicMemoryMaxMB?: number;
    /**
     * Gets or sets the min dynamic memory for the vm.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dynamicMemoryMinMB?: number;
    /**
     * Gets highly available property.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isHighlyAvailable?: string;
    /**
     * Gets or sets the generation for the vm.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly generation?: number;
    /**
     * Gets or sets the network interfaces of the template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkInterfaces?: NetworkInterfaces[];
    /**
     * Gets or sets the disks of the template.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly disks?: VirtualDisk[];
    /**
     * Gets or sets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** The Virtual machine template inventory item. */
export declare interface VirtualMachineTemplateInventoryItem extends InventoryItemProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    inventoryType: "VirtualMachineTemplate";
    /**
     * Gets or sets the desired number of vCPUs for the vm.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpuCount?: number;
    /**
     * MemoryMB is the desired size of a virtual machine's memory, in MB.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memoryMB?: number;
    /**
     * Gets or sets the type of the os.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osType?: OsType;
    /**
     * Gets or sets os name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osName?: string;
}

/** List of VirtualMachineTemplates. */
export declare interface VirtualMachineTemplateListResult {
    /** List of VirtualMachineTemplates. */
    value?: VirtualMachineTemplate[];
    /** Url to follow for getting next page of resources. */
    nextLink?: string;
}

/** Interface representing a VirtualMachineTemplates. */
export declare interface VirtualMachineTemplates {
    /**
     * List of VirtualMachineTemplates in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VirtualMachineTemplatesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<VirtualMachineTemplate>;
    /**
     * List of VirtualMachineTemplates in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: VirtualMachineTemplatesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<VirtualMachineTemplate>;
    /**
     * Implements VirtualMachineTemplate GET method.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineTemplateName Name of the VirtualMachineTemplate.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, virtualMachineTemplateName: string, options?: VirtualMachineTemplatesGetOptionalParams): Promise<VirtualMachineTemplatesGetResponse>;
    /**
     * Onboards the ScVmm VM Template as an Azure VM Template resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineTemplateName Name of the VirtualMachineTemplate.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualMachineTemplateName: string, body: VirtualMachineTemplate, options?: VirtualMachineTemplatesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineTemplatesCreateOrUpdateResponse>, VirtualMachineTemplatesCreateOrUpdateResponse>>;
    /**
     * Onboards the ScVmm VM Template as an Azure VM Template resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineTemplateName Name of the VirtualMachineTemplate.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, virtualMachineTemplateName: string, body: VirtualMachineTemplate, options?: VirtualMachineTemplatesCreateOrUpdateOptionalParams): Promise<VirtualMachineTemplatesCreateOrUpdateResponse>;
    /**
     * Deregisters the ScVmm VM Template from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineTemplateName Name of the VirtualMachineTemplate.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, virtualMachineTemplateName: string, options?: VirtualMachineTemplatesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deregisters the ScVmm VM Template from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineTemplateName Name of the VirtualMachineTemplate.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, virtualMachineTemplateName: string, options?: VirtualMachineTemplatesDeleteOptionalParams): Promise<void>;
    /**
     * Updates the VirtualMachineTemplate resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineTemplateName Name of the VirtualMachineTemplate.
     * @param body VirtualMachineTemplates patch details.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, virtualMachineTemplateName: string, body: ResourcePatch, options?: VirtualMachineTemplatesUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualMachineTemplatesUpdateResponse>, VirtualMachineTemplatesUpdateResponse>>;
    /**
     * Updates the VirtualMachineTemplate resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualMachineTemplateName Name of the VirtualMachineTemplate.
     * @param body VirtualMachineTemplates patch details.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, virtualMachineTemplateName: string, body: ResourcePatch, options?: VirtualMachineTemplatesUpdateOptionalParams): Promise<VirtualMachineTemplatesUpdateResponse>;
}

/** Optional parameters. */
export declare interface VirtualMachineTemplatesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualMachineTemplatesCreateOrUpdateResponse = VirtualMachineTemplate;

/** Optional parameters. */
export declare interface VirtualMachineTemplatesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Forces the resource to be deleted from azure. The corresponding CR would be attempted to be deleted too. */
    force?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualMachineTemplatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualMachineTemplatesGetResponse = VirtualMachineTemplate;

/** Optional parameters. */
export declare interface VirtualMachineTemplatesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type VirtualMachineTemplatesListByResourceGroupNextResponse = VirtualMachineTemplateListResult;

/** Optional parameters. */
export declare interface VirtualMachineTemplatesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type VirtualMachineTemplatesListByResourceGroupResponse = VirtualMachineTemplateListResult;

/** Optional parameters. */
export declare interface VirtualMachineTemplatesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type VirtualMachineTemplatesListBySubscriptionNextResponse = VirtualMachineTemplateListResult;

/** Optional parameters. */
export declare interface VirtualMachineTemplatesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type VirtualMachineTemplatesListBySubscriptionResponse = VirtualMachineTemplateListResult;

/** Optional parameters. */
export declare interface VirtualMachineTemplatesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualMachineTemplatesUpdateResponse = VirtualMachineTemplate;

/** Defines the virtualMachineUpdate. */
export declare interface VirtualMachineUpdate {
    /** Defines the resource properties. */
    properties?: VirtualMachineUpdateProperties;
    /** Gets or sets the Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Defines the resource properties. */
export declare interface VirtualMachineUpdateProperties {
    /** Defines the resource properties. */
    hardwareProfile?: HardwareProfileUpdate;
    /** Defines the resource properties. */
    storageProfile?: StorageProfileUpdate;
    /** Defines the resource properties. */
    networkProfile?: NetworkProfileUpdate;
    /** Availability Sets in vm. */
    availabilitySets?: AvailabilitySetListItem[];
}

/** The VirtualNetworks resource definition. */
export declare interface VirtualNetwork {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource Type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Gets or sets the location. */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The extended location. */
    extendedLocation: ExtendedLocation;
    /** Gets or sets the inventory Item ID for the resource. */
    inventoryItemId?: string;
    /** Unique ID of the virtual network. */
    uuid?: string;
    /** ARM Id of the vmmServer resource in which this resource resides. */
    vmmServerId?: string;
    /**
     * Name of the virtual network in vmmServer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly networkName?: string;
    /**
     * Gets or sets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** The Virtual network inventory item. */
export declare interface VirtualNetworkInventoryItem extends InventoryItemProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    inventoryType: "VirtualNetwork";
}

/** List of VirtualNetworks. */
export declare interface VirtualNetworkListResult {
    /** List of VirtualNetworks. */
    value?: VirtualNetwork[];
    /** Url to follow for getting next page of resources. */
    nextLink?: string;
}

/** Interface representing a VirtualNetworks. */
export declare interface VirtualNetworks {
    /**
     * List of VirtualNetworks in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VirtualNetworksListByResourceGroupOptionalParams): PagedAsyncIterableIterator<VirtualNetwork>;
    /**
     * List of VirtualNetworks in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: VirtualNetworksListBySubscriptionOptionalParams): PagedAsyncIterableIterator<VirtualNetwork>;
    /**
     * Implements VirtualNetwork GET method.
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName Name of the VirtualNetwork.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, virtualNetworkName: string, options?: VirtualNetworksGetOptionalParams): Promise<VirtualNetworksGetResponse>;
    /**
     * Onboards the ScVmm virtual network as an Azure virtual network resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName Name of the VirtualNetwork.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, virtualNetworkName: string, body: VirtualNetwork, options?: VirtualNetworksCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualNetworksCreateOrUpdateResponse>, VirtualNetworksCreateOrUpdateResponse>>;
    /**
     * Onboards the ScVmm virtual network as an Azure virtual network resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName Name of the VirtualNetwork.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, virtualNetworkName: string, body: VirtualNetwork, options?: VirtualNetworksCreateOrUpdateOptionalParams): Promise<VirtualNetworksCreateOrUpdateResponse>;
    /**
     * Deregisters the ScVmm virtual network from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName Name of the VirtualNetwork.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, virtualNetworkName: string, options?: VirtualNetworksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deregisters the ScVmm virtual network from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName Name of the VirtualNetwork.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, virtualNetworkName: string, options?: VirtualNetworksDeleteOptionalParams): Promise<void>;
    /**
     * Updates the VirtualNetworks resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName Name of the VirtualNetwork.
     * @param body VirtualNetworks patch payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, virtualNetworkName: string, body: ResourcePatch, options?: VirtualNetworksUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualNetworksUpdateResponse>, VirtualNetworksUpdateResponse>>;
    /**
     * Updates the VirtualNetworks resource.
     * @param resourceGroupName The name of the resource group.
     * @param virtualNetworkName Name of the VirtualNetwork.
     * @param body VirtualNetworks patch payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, virtualNetworkName: string, body: ResourcePatch, options?: VirtualNetworksUpdateOptionalParams): Promise<VirtualNetworksUpdateResponse>;
}

/** Optional parameters. */
export declare interface VirtualNetworksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualNetworksCreateOrUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export declare interface VirtualNetworksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Forces the resource to be deleted from azure. The corresponding CR would be attempted to be deleted too. */
    force?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualNetworksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export declare interface VirtualNetworksListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type VirtualNetworksListByResourceGroupNextResponse = VirtualNetworkListResult;

/** Optional parameters. */
export declare interface VirtualNetworksListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type VirtualNetworksListByResourceGroupResponse = VirtualNetworkListResult;

/** Optional parameters. */
export declare interface VirtualNetworksListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type VirtualNetworksListBySubscriptionNextResponse = VirtualNetworkListResult;

/** Optional parameters. */
export declare interface VirtualNetworksListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type VirtualNetworksListBySubscriptionResponse = VirtualNetworkListResult;

/** Optional parameters. */
export declare interface VirtualNetworksUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualNetworksUpdateResponse = VirtualNetwork;

/** The VmmServers resource definition. */
export declare interface VMMServer {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource Type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Gets or sets the location. */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The system data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The extended location. */
    extendedLocation: ExtendedLocation;
    /** Credentials to connect to VMMServer. */
    credentials?: VMMServerPropertiesCredentials;
    /** Fqdn is the hostname/ip of the vmmServer. */
    fqdn: string;
    /** Port is the port on which the vmmServer is listening. */
    port?: number;
    /**
     * Gets or sets the connection status to the vmmServer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionStatus?: string;
    /**
     * Gets or sets any error message if connection to vmmServer is having any issue.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
    /**
     * Unique ID of vmmServer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uuid?: string;
    /**
     * Version is the version of the vmmSever.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * Gets or sets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** List of VmmServers. */
export declare interface VMMServerListResult {
    /** List of VmmServers. */
    value?: VMMServer[];
    /** Url to follow for getting next page of resources. */
    nextLink?: string;
}

/** Credentials to connect to VMMServer. */
export declare interface VMMServerPropertiesCredentials {
    /** Username to use to connect to VMMServer. */
    username?: string;
    /** Credentials to use to connect to VMMServer. */
    password?: string;
}

/** Interface representing a VmmServers. */
export declare interface VmmServers {
    /**
     * List of VmmServers in a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VmmServersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<VMMServer>;
    /**
     * List of VmmServers in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: VmmServersListBySubscriptionOptionalParams): PagedAsyncIterableIterator<VMMServer>;
    /**
     * Implements VMMServer GET method.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vmmServerName: string, options?: VmmServersGetOptionalParams): Promise<VmmServersGetResponse>;
    /**
     * Onboards the SCVMM fabric as an Azure VmmServer resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vmmServerName: string, body: VMMServer, options?: VmmServersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VmmServersCreateOrUpdateResponse>, VmmServersCreateOrUpdateResponse>>;
    /**
     * Onboards the SCVMM fabric as an Azure VmmServer resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body Request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vmmServerName: string, body: VMMServer, options?: VmmServersCreateOrUpdateOptionalParams): Promise<VmmServersCreateOrUpdateResponse>;
    /**
     * Deboards the SCVMM fabric from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vmmServerName: string, options?: VmmServersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deboards the SCVMM fabric from Azure.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vmmServerName: string, options?: VmmServersDeleteOptionalParams): Promise<void>;
    /**
     * Updates the VmmServers resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body VmmServers patch payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vmmServerName: string, body: ResourcePatch, options?: VmmServersUpdateOptionalParams): Promise<PollerLike<PollOperationState<VmmServersUpdateResponse>, VmmServersUpdateResponse>>;
    /**
     * Updates the VmmServers resource.
     * @param resourceGroupName The name of the resource group.
     * @param vmmServerName Name of the VMMServer.
     * @param body VmmServers patch payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vmmServerName: string, body: ResourcePatch, options?: VmmServersUpdateOptionalParams): Promise<VmmServersUpdateResponse>;
}

/** Optional parameters. */
export declare interface VmmServersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VmmServersCreateOrUpdateResponse = VMMServer;

/** Optional parameters. */
export declare interface VmmServersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Forces the resource to be deleted from azure. The corresponding CR would be attempted to be deleted too. */
    force?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VmmServersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VmmServersGetResponse = VMMServer;

/** Optional parameters. */
export declare interface VmmServersListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type VmmServersListByResourceGroupNextResponse = VMMServerListResult;

/** Optional parameters. */
export declare interface VmmServersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type VmmServersListByResourceGroupResponse = VMMServerListResult;

/** Optional parameters. */
export declare interface VmmServersListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type VmmServersListBySubscriptionNextResponse = VMMServerListResult;

/** Optional parameters. */
export declare interface VmmServersListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type VmmServersListBySubscriptionResponse = VMMServerListResult;

/** Optional parameters. */
export declare interface VmmServersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VmmServersUpdateResponse = VMMServer;

export { }
