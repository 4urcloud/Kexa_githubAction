/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { BatchManagementClient } from "@azure/arm-batch";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 *
 * @summary Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 * x-ms-original-file: specification/batch/resource-manager/Microsoft.Batch/stable/2023-11-01/examples/BatchAccountCreate_BYOS.json
 */
function batchAccountCreateByos() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BATCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["BATCH_RESOURCE_GROUP"] || "default-azurebatch-japaneast";
        const accountName = "sampleacct";
        const parameters = {
            autoStorage: {
                storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"
            },
            keyVaultReference: {
                id: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample",
                url: "http://sample.vault.azure.net/"
            },
            location: "japaneast",
            poolAllocationMode: "UserSubscription"
        };
        const credential = new DefaultAzureCredential();
        const client = new BatchManagementClient(credential, subscriptionId);
        const result = yield client.batchAccountOperations.beginCreateAndWait(resourceGroupName, accountName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 *
 * @summary Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 * x-ms-original-file: specification/batch/resource-manager/Microsoft.Batch/stable/2023-11-01/examples/BatchAccountCreate_Default.json
 */
function batchAccountCreateDefault() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BATCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["BATCH_RESOURCE_GROUP"] || "default-azurebatch-japaneast";
        const accountName = "sampleacct";
        const parameters = {
            autoStorage: {
                storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"
            },
            location: "japaneast"
        };
        const credential = new DefaultAzureCredential();
        const client = new BatchManagementClient(credential, subscriptionId);
        const result = yield client.batchAccountOperations.beginCreateAndWait(resourceGroupName, accountName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 *
 * @summary Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 * x-ms-original-file: specification/batch/resource-manager/Microsoft.Batch/stable/2023-11-01/examples/BatchAccountCreate_SystemAssignedIdentity.json
 */
function batchAccountCreateSystemAssignedIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BATCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["BATCH_RESOURCE_GROUP"] || "default-azurebatch-japaneast";
        const accountName = "sampleacct";
        const parameters = {
            autoStorage: {
                storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"
            },
            identity: { type: "SystemAssigned" },
            location: "japaneast"
        };
        const credential = new DefaultAzureCredential();
        const client = new BatchManagementClient(credential, subscriptionId);
        const result = yield client.batchAccountOperations.beginCreateAndWait(resourceGroupName, accountName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 *
 * @summary Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 * x-ms-original-file: specification/batch/resource-manager/Microsoft.Batch/stable/2023-11-01/examples/BatchAccountCreate_UserAssignedIdentity.json
 */
function batchAccountCreateUserAssignedIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BATCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["BATCH_RESOURCE_GROUP"] || "default-azurebatch-japaneast";
        const accountName = "sampleacct";
        const parameters = {
            autoStorage: {
                storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"
            },
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/subid/resourceGroups/defaultAzurebatchJapaneast/providers/MicrosoftManagedIdentity/userAssignedIdentities/id1": {}
                }
            },
            location: "japaneast"
        };
        const credential = new DefaultAzureCredential();
        const client = new BatchManagementClient(credential, subscriptionId);
        const result = yield client.batchAccountOperations.beginCreateAndWait(resourceGroupName, accountName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 *
 * @summary Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with this API and should instead be updated with the Update Batch Account API.
 * x-ms-original-file: specification/batch/resource-manager/Microsoft.Batch/stable/2023-11-01/examples/PrivateBatchAccountCreate.json
 */
function privateBatchAccountCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["BATCH_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["BATCH_RESOURCE_GROUP"] || "default-azurebatch-japaneast";
        const accountName = "sampleacct";
        const parameters = {
            autoStorage: {
                storageAccountId: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Storage/storageAccounts/samplestorage"
            },
            keyVaultReference: {
                id: "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.KeyVault/vaults/sample",
                url: "http://sample.vault.azure.net/"
            },
            location: "japaneast",
            publicNetworkAccess: "Disabled"
        };
        const credential = new DefaultAzureCredential();
        const client = new BatchManagementClient(credential, subscriptionId);
        const result = yield client.batchAccountOperations.beginCreateAndWait(resourceGroupName, accountName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        batchAccountCreateByos();
        batchAccountCreateDefault();
        batchAccountCreateSystemAssignedIdentity();
        batchAccountCreateUserAssignedIdentity();
        privateBatchAccountCreate();
    });
}
main().catch(console.error);
//# sourceMappingURL=batchAccountCreateSample.js.map