/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { BatchManagementClient } from "../src/batchManagementClient";
import { fakeTestPasswordPlaceholder, fakeTestCertData } from "./fakeTestSecrets";
import { StorageManagementClient } from "@azure/arm-storage";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Batch test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let storage_client;
    let location;
    let resourceGroup;
    let accountName;
    let applicationName;
    let storageaccountName;
    let certificateName;
    let poolName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new BatchManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            storage_client = new StorageManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            accountName = "myaccountxxx";
            applicationName = "myapplicationxxx";
            storageaccountName = "mystorageaccountxxx111";
            certificateName = "sha1-cff2ab63c8c955aaf71989efa641b906558d9fb7";
            poolName = "mypoolxxx";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    function storageAccounts_beginCreateAndWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const parameter = {
                sku: {
                    name: "Standard_GRS",
                },
                kind: "StorageV2",
                location: "westeurope",
                encryption: {
                    services: {
                        file: {
                            keyType: "Account",
                            enabled: true
                        },
                        blob: {
                            keyType: "Account",
                            enabled: true
                        },
                    },
                    keySource: "Microsoft.Storage",
                },
                tags: {
                    key1: "value1",
                    key2: "value2",
                }
            };
            const res = yield storage_client.storageAccounts.beginCreateAndWait(resourceGroup, storageaccountName, parameter, testPollingOptions);
        });
    }
    ;
    it("batchAccountOperations create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield storageAccounts_beginCreateAndWait();
            const res = yield client.batchAccountOperations.beginCreateAndWait(resourceGroup, accountName, {
                location: location,
                autoStorage: {
                    storageAccountId: "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Storage/storageAccounts/" + storageaccountName
                }
            }, testPollingOptions);
            assert.equal(res.name, accountName);
        });
    });
    it("batchAccountOperations get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.batchAccountOperations.get(resourceGroup, accountName);
            assert.equal(res.name, accountName);
        });
    });
    it("batchAccountOperations getkeys test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.batchAccountOperations.getKeys(resourceGroup, accountName);
            assert.equal(res.accountName, accountName);
        });
    });
    it("batchAccountOperations regenerateKey test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.batchAccountOperations.regenerateKey(resourceGroup, accountName, { keyName: "Primary" });
            assert.equal(res.accountName, accountName);
        });
    });
    it("batchAccountOperations list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.batchAccountOperations.list()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("batchAccountOperations update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.batchAccountOperations.update(resourceGroup, accountName, { tags: { key1: "value1" } });
            assert.equal(res.type, "Microsoft.Batch/batchAccounts");
        });
    });
    it("applicationOperations create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.applicationOperations.create(resourceGroup, accountName, applicationName, { parameters: { allowUpdates: false } });
            assert.equal(res.name, applicationName);
        });
    });
    it("applicationOperations get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.applicationOperations.get(resourceGroup, accountName, applicationName);
            assert.equal(res.name, applicationName);
        });
    });
    it("applicationOperations list test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.applicationOperations.list(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("certificateOperations create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.certificateOperations.create(resourceGroup, accountName, certificateName, {
                thumbprint: 'cff2ab63c8c955aaf71989efa641b906558d9fb7',
                thumbprintAlgorithm: 'sha1',
                data: fakeTestCertData,
                format: "Pfx",
                password: fakeTestPasswordPlaceholder
            });
            assert.equal(res.name, certificateName);
        });
    });
    it("certificateOperations get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.certificateOperations.get(resourceGroup, accountName, certificateName);
            assert.equal(res.name, certificateName);
        });
    });
    it("certificateOperations list test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.certificateOperations.listByBatchAccount(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("certificateOperations update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.certificateOperations.update(resourceGroup, accountName, certificateName, {
                data: fakeTestCertData,
                password: fakeTestPasswordPlaceholder
            });
            assert.equal(res.type, "Microsoft.Batch/batchAccounts/certificates");
        });
    });
    it("certificateOperations cancelDeletion test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.certificateOperations.cancelDeletion(resourceGroup, accountName, certificateName);
            assert.equal(res.name, certificateName);
        });
    });
    it("location checkNameAvailability test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.location.checkNameAvailability(location, { name: accountName, type: "Microsoft.Batch/batchAccounts" });
            assert.equal(res.reason, "AlreadyExists");
        });
    });
    it("location getQuotas test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.location.getQuotas(location);
            assert.equal(res.accountQuota, 3);
        });
    });
    it("location listSupportedCloudServiceSkus test", function () {
        var _a, e_4, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.location.listSupportedCloudServiceSkus(location)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.notEqual(resArray.length, 0);
        });
    });
    it("location listSupportedVirtualMachineSkus test", function () {
        var _a, e_5, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.location.listSupportedVirtualMachineSkus(location)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
            assert.notEqual(resArray.length, 0);
        });
    });
    it("poolOperations create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.poolOperations.create(resourceGroup, accountName, poolName, {
                vmSize: "STANDARD_D4",
                deploymentConfiguration: {
                    cloudServiceConfiguration: {
                        osFamily: "5"
                    }
                },
                scaleSettings: {
                    fixedScale: {
                        targetDedicatedNodes: 3
                    }
                }
            });
            assert.equal(res.name, poolName);
        });
    });
    it("poolOperations get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.poolOperations.get(resourceGroup, accountName, poolName);
            console.log(res);
        });
    });
    it("poolOperations listByBatchAccount test", function () {
        var _a, e_6, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.poolOperations.listByBatchAccount(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("poolOperations update test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.poolOperations.update(resourceGroup, accountName, poolName, {
                scaleSettings: {
                    autoScale: {
                        formula: "$TargetDedicatedNodes=34"
                    }
                }
            });
            assert.equal(res.type, "Microsoft.Batch/batchAccounts/pools");
        });
    });
    it("poolOperations disableAutoScale test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.poolOperations.disableAutoScale(resourceGroup, accountName, poolName);
            assert.equal(res.name, poolName);
        });
    });
    it("poolOperations stopResize test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.poolOperations.stopResize(resourceGroup, accountName, poolName);
            assert.equal(res.name, poolName);
        });
    });
    it("privateEndpointConnectionOperations listByBatchAccount test", function () {
        var _a, e_7, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.privateEndpointConnectionOperations.listByBatchAccount(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_7) throw e_7.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("privateLinkResourceOperations listByBatchAccount test", function () {
        var _a, e_8, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.privateLinkResourceOperations.listByBatchAccount(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_8) throw e_8.error; }
            }
            assert.equal(resArray.length, 2);
        });
    });
    it("poolOperations delete test", function () {
        var _a, e_9, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.poolOperations.beginDeleteAndWait(resourceGroup, accountName, poolName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.poolOperations.listByBatchAccount(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_9) throw e_9.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("certificateOperations delete test", function () {
        var _a, e_10, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.certificateOperations.beginDeleteAndWait(resourceGroup, accountName, certificateName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.certificateOperations.listByBatchAccount(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_10) throw e_10.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("applicationOperations delete test", function () {
        var _a, e_11, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.applicationOperations.delete(resourceGroup, accountName, applicationName);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.applicationOperations.list(resourceGroup, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_11) throw e_11.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("batchAccountOperations delete test", function () {
        var _a, e_12, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.batchAccountOperations.beginDeleteAndWait(resourceGroup, accountName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.batchAccountOperations.list()), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_12_1) { e_12 = { error: e_12_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_12) throw e_12.error; }
            }
            assert.equal(resArray.length, 0);
            const res1 = yield storage_client.storageAccounts.delete(resourceGroup, storageaccountName);
        });
    });
});
//# sourceMappingURL=batch_examples.js.map