import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Defines values for AccountKeyType. */
export declare type AccountKeyType = "Primary" | "Secondary";

/** Parameters for an activating an application package. */
export declare interface ActivateApplicationPackageParameters {
    /** The format of the application package binary file. */
    format: string;
}

/** Defines values for AllocationState. */
export declare type AllocationState = "Steady" | "Resizing" | "Stopping";

/** Contains information about an application in a Batch account. */
export declare interface Application extends ProxyResource {
    /** The display name for the application. */
    displayName?: string;
    /** A value indicating whether packages within the application may be overwritten using the same version string. */
    allowUpdates?: boolean;
    /** The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an existing package. */
    defaultVersion?: string;
}

/** Optional parameters. */
export declare interface ApplicationCreateOptionalParams extends coreClient.OperationOptions {
    /** The parameters for the request. */
    parameters?: Application;
}

/** Contains response data for the create operation. */
export declare type ApplicationCreateResponse = Application;

/** Optional parameters. */
export declare interface ApplicationDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ApplicationGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationGetResponse = Application;

/** Optional parameters. */
export declare interface ApplicationListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApplicationListNextResponse = ListApplicationsResult;

/** Optional parameters. */
export declare interface ApplicationListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
}

/** Contains response data for the list operation. */
export declare type ApplicationListResponse = ListApplicationsResult;

/** Interface representing a ApplicationOperations. */
export declare interface ApplicationOperations {
    /**
     * Lists all of the applications in the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: ApplicationListOptionalParams): PagedAsyncIterableIterator<Application>;
    /**
     * Adds an application to the specified Batch account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, applicationName: string, options?: ApplicationCreateOptionalParams): Promise<ApplicationCreateResponse>;
    /**
     * Deletes an application.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, applicationName: string, options?: ApplicationDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified application.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, applicationName: string, options?: ApplicationGetOptionalParams): Promise<ApplicationGetResponse>;
    /**
     * Updates settings for the specified application.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param parameters The parameters for the request.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, applicationName: string, parameters: Application, options?: ApplicationUpdateOptionalParams): Promise<ApplicationUpdateResponse>;
}

/** An application package which represents a particular version of an application. */
export declare interface ApplicationPackage extends ProxyResource {
    /**
     * The current state of the application package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: PackageState;
    /**
     * The format of the application package, if the package is active.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly format?: string;
    /**
     * The URL for the application package in Azure Storage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageUrl?: string;
    /**
     * The UTC time at which the Azure Storage URL will expire.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageUrlExpiry?: Date;
    /**
     * The time at which the package was last activated, if the package is active.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastActivationTime?: Date;
}

/** Optional parameters. */
export declare interface ApplicationPackageActivateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the activate operation. */
export declare type ApplicationPackageActivateResponse = ApplicationPackage;

/** Optional parameters. */
export declare interface ApplicationPackageCreateOptionalParams extends coreClient.OperationOptions {
    /** The parameters for the request. */
    parameters?: ApplicationPackage;
}

/** Contains response data for the create operation. */
export declare type ApplicationPackageCreateResponse = ApplicationPackage;

/** Optional parameters. */
export declare interface ApplicationPackageDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ApplicationPackageGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationPackageGetResponse = ApplicationPackage;

/** Optional parameters. */
export declare interface ApplicationPackageListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApplicationPackageListNextResponse = ListApplicationPackagesResult;

/** Optional parameters. */
export declare interface ApplicationPackageListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
}

/** Contains response data for the list operation. */
export declare type ApplicationPackageListResponse = ListApplicationPackagesResult;

/** Interface representing a ApplicationPackageOperations. */
export declare interface ApplicationPackageOperations {
    /**
     * Lists all of the application packages in the specified application.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, applicationName: string, options?: ApplicationPackageListOptionalParams): PagedAsyncIterableIterator<ApplicationPackage>;
    /**
     * Activates the specified application package. This should be done after the `ApplicationPackage` was
     * created and uploaded. This needs to be done before an `ApplicationPackage` can be used on Pools or
     * Tasks.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param versionName The version of the application.
     * @param parameters The parameters for the request.
     * @param options The options parameters.
     */
    activate(resourceGroupName: string, accountName: string, applicationName: string, versionName: string, parameters: ActivateApplicationPackageParameters, options?: ApplicationPackageActivateOptionalParams): Promise<ApplicationPackageActivateResponse>;
    /**
     * Creates an application package record. The record contains a storageUrl where the package should be
     * uploaded to.  Once it is uploaded the `ApplicationPackage` needs to be activated using
     * `ApplicationPackageActive` before it can be used. If the auto storage account was configured to use
     * storage keys, the URL returned will contain a SAS.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param versionName The version of the application.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, applicationName: string, versionName: string, options?: ApplicationPackageCreateOptionalParams): Promise<ApplicationPackageCreateResponse>;
    /**
     * Deletes an application package record and its associated binary file.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param versionName The version of the application.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, accountName: string, applicationName: string, versionName: string, options?: ApplicationPackageDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified application package.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param applicationName The name of the application. This must be unique within the account.
     * @param versionName The version of the application.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, applicationName: string, versionName: string, options?: ApplicationPackageGetOptionalParams): Promise<ApplicationPackageGetResponse>;
}

/** Link to an application package inside the batch account */
export declare interface ApplicationPackageReference {
    /** The ID of the application package to install. This must be inside the same batch account as the pool. This can either be a reference to a specific version or the default version if one exists. */
    id: string;
    /** If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409. */
    version?: string;
}

/** Optional parameters. */
export declare interface ApplicationUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ApplicationUpdateResponse = Application;

/** Defines values for AuthenticationMode. */
export declare type AuthenticationMode = "SharedKey" | "AAD" | "TaskAuthenticationToken";

/** The configuration parameters used for performing automatic OS upgrade. */
export declare interface AutomaticOSUpgradePolicy {
    /** Whether OS image rollback feature should be disabled. */
    disableAutomaticRollback?: boolean;
    /** Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer version of the OS image becomes available. <br /><br /> If this is set to true for Windows based pools, [WindowsConfiguration.enableAutomaticUpdates](https://learn.microsoft.com/en-us/rest/api/batchmanagement/pool/create?tabs=HTTP#windowsconfiguration) cannot be set to true. */
    enableAutomaticOSUpgrade?: boolean;
    /** Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Auto OS Upgrade will fallback to the default policy if no policy is defined on the VMSS. */
    useRollingUpgradePolicy?: boolean;
    /** Defer OS upgrades on the TVMs if they are running tasks. */
    osRollingUpgradeDeferral?: boolean;
}

/** The results and errors from an execution of a pool autoscale formula. */
export declare interface AutoScaleRun {
    /** The time at which the autoscale formula was last evaluated. */
    evaluationTime: Date;
    /** Each variable value is returned in the form $variable=value, and variables are separated by semicolons. */
    results?: string;
    /** An error that occurred when autoscaling a pool. */
    error?: AutoScaleRunError;
}

/** An error that occurred when autoscaling a pool. */
export declare interface AutoScaleRunError {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message: string;
    /** Additional details about the error. */
    details?: AutoScaleRunError[];
}

/** AutoScale settings for the pool. */
export declare interface AutoScaleSettings {
    /** A formula for the desired number of compute nodes in the pool. */
    formula: string;
    /** If omitted, the default value is 15 minutes (PT15M). */
    evaluationInterval?: string;
}

/** Defines values for AutoStorageAuthenticationMode. */
export declare type AutoStorageAuthenticationMode = "StorageKeys" | "BatchAccountManagedIdentity";

/** The properties related to the auto-storage account. */
export declare interface AutoStorageBaseProperties {
    /** The resource ID of the storage account to be used for auto-storage account. */
    storageAccountId: string;
    /** The authentication mode which the Batch service will use to manage the auto-storage account. */
    authenticationMode?: AutoStorageAuthenticationMode;
    /** The identity referenced here must be assigned to pools which have compute nodes that need access to auto-storage. */
    nodeIdentityReference?: ComputeNodeIdentityReference;
}

/** Contains information about the auto-storage account associated with a Batch account. */
export declare interface AutoStorageProperties extends AutoStorageBaseProperties {
    /** The UTC time at which storage keys were last synchronized with the Batch account. */
    lastKeySync: Date;
}

/** Defines values for AutoUserScope. */
export declare type AutoUserScope = "Task" | "Pool";

/** Specifies the parameters for the auto user that runs a task on the Batch service. */
export declare interface AutoUserSpecification {
    /** The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks. */
    scope?: AutoUserScope;
    /** The default value is nonAdmin. */
    elevationLevel?: ElevationLevel;
}

/** Information used to connect to an Azure Storage Container using Blobfuse. */
export declare interface AzureBlobFileSystemConfiguration {
    /** The Azure Storage Account name. */
    accountName: string;
    /** The Azure Blob Storage Container name. */
    containerName: string;
    /** This property is mutually exclusive with both sasKey and identity; exactly one must be specified. */
    accountKey?: string;
    /** This property is mutually exclusive with both accountKey and identity; exactly one must be specified. */
    sasKey?: string;
    /** These are 'net use' options in Windows and 'mount' options in Linux. */
    blobfuseOptions?: string;
    /** All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. */
    relativeMountPath: string;
    /** This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified. */
    identityReference?: ComputeNodeIdentityReference;
}

/** Information used to connect to an Azure Fileshare. */
export declare interface AzureFileShareConfiguration {
    /** The Azure Storage account name. */
    accountName: string;
    /** This is of the form 'https://{account}.file.core.windows.net/'. */
    azureFileUrl: string;
    /** The Azure Storage account key. */
    accountKey: string;
    /** All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. */
    relativeMountPath: string;
    /** These are 'net use' options in Windows and 'mount' options in Linux. */
    mountOptions?: string;
}

/** Contains information about an Azure Batch account. */
export declare interface BatchAccount extends Resource {
    /** The identity of the Batch account. */
    identity?: BatchAccountIdentity;
    /**
     * The account endpoint used to interact with the Batch service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountEndpoint?: string;
    /**
     * The endpoint used by compute node to connect to the Batch node management service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeManagementEndpoint?: string;
    /**
     * The provisioned state of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The allocation mode for creating pools in the Batch account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly poolAllocationMode?: PoolAllocationMode;
    /**
     * Identifies the Azure key vault associated with a Batch account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyVaultReference?: KeyVaultReference;
    /** If not specified, the default value is 'enabled'. */
    publicNetworkAccess?: PublicNetworkAccessType;
    /** The network profile only takes effect when publicNetworkAccess is enabled. */
    networkProfile?: NetworkProfile;
    /**
     * List of private endpoint connections associated with the Batch account
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /**
     * Contains information about the auto-storage account associated with a Batch account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoStorage?: AutoStorageProperties;
    /**
     * Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly encryption?: EncryptionProperties;
    /**
     * For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dedicatedCoreQuota?: number;
    /**
     * For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lowPriorityCoreQuota?: number;
    /**
     * A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dedicatedCoreQuotaPerVMFamily?: VirtualMachineFamilyCoreQuota[];
    /**
     * If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property on the account and does not consider Virtual Machine family.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dedicatedCoreQuotaPerVMFamilyEnforced?: boolean;
    /**
     * The pool quota for the Batch account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly poolQuota?: number;
    /**
     * The active job and job schedule quota for the Batch account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activeJobAndJobScheduleQuota?: number;
    /**
     * List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allowedAuthenticationModes?: AuthenticationMode[];
}

/** Defines headers for BatchAccount_create operation. */
export declare interface BatchAccountCreateHeaders {
    /** The URL of the resource used to check the status of the asynchronous operation. */
    location?: string;
    /** Suggested delay to check the status of the asynchronous operation. The value is an integer that specifies the delay in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BatchAccountCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Parameters supplied to the Create operation. */
export declare interface BatchAccountCreateParameters {
    /** The region in which to create the account. */
    location: string;
    /** The user-specified tags associated with the account. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The identity of the Batch account. */
    identity?: BatchAccountIdentity;
    /** The properties related to the auto-storage account. */
    autoStorage?: AutoStorageBaseProperties;
    /** The pool allocation mode also affects how clients may authenticate to the Batch Service API. If the mode is BatchService, clients may authenticate using access keys or Microsoft Entra ID. If the mode is UserSubscription, clients must use Microsoft Entra ID. The default is BatchService. */
    poolAllocationMode?: PoolAllocationMode;
    /** A reference to the Azure key vault associated with the Batch account. */
    keyVaultReference?: KeyVaultReference;
    /** If not specified, the default value is 'enabled'. */
    publicNetworkAccess?: PublicNetworkAccessType;
    /** The network profile only takes effect when publicNetworkAccess is enabled. */
    networkProfile?: NetworkProfile;
    /** Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead. */
    encryption?: EncryptionProperties;
    /** List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane. */
    allowedAuthenticationModes?: AuthenticationMode[];
}

/** Contains response data for the create operation. */
export declare type BatchAccountCreateResponse = BatchAccount;

/** Defines headers for BatchAccount_delete operation. */
export declare interface BatchAccountDeleteHeaders {
    /** The URL of the resource used to check the status of the asynchronous operation. */
    location?: string;
    /** Suggested delay to check the status of the asynchronous operation. The value is an integer that specifies the delay in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BatchAccountDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface BatchAccountGetDetectorOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDetector operation. */
export declare type BatchAccountGetDetectorResponse = DetectorResponse;

/** Optional parameters. */
export declare interface BatchAccountGetKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getKeys operation. */
export declare type BatchAccountGetKeysResponse = BatchAccountKeys;

/** Optional parameters. */
export declare interface BatchAccountGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BatchAccountGetResponse = BatchAccount;

/** The identity of the Batch account, if configured. This is used when the user specifies 'Microsoft.KeyVault' as their Batch account encryption configuration or when `ManagedIdentity` is selected as the auto-storage authentication mode. */
export declare interface BatchAccountIdentity {
    /**
     * The principal id of the Batch account. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id associated with the Batch account. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of identity used for the Batch account. */
    type: ResourceIdentityType;
    /** The list of user identities associated with the Batch account. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentities;
    };
}

/** A set of Azure Batch account keys. */
export declare interface BatchAccountKeys {
    /**
     * The Batch account name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountName?: string;
    /**
     * The primary key associated with the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primary?: string;
    /**
     * The secondary key associated with the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondary?: string;
}

/** Optional parameters. */
export declare interface BatchAccountListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type BatchAccountListByResourceGroupNextResponse = BatchAccountListResult;

/** Optional parameters. */
export declare interface BatchAccountListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type BatchAccountListByResourceGroupResponse = BatchAccountListResult;

/** Optional parameters. */
export declare interface BatchAccountListDetectorsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDetectorsNext operation. */
export declare type BatchAccountListDetectorsNextResponse = DetectorListResult;

/** Optional parameters. */
export declare interface BatchAccountListDetectorsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDetectors operation. */
export declare type BatchAccountListDetectorsResponse = DetectorListResult;

/** Optional parameters. */
export declare interface BatchAccountListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type BatchAccountListNextResponse = BatchAccountListResult;

/** Optional parameters. */
export declare interface BatchAccountListOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface BatchAccountListOutboundNetworkDependenciesEndpointsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOutboundNetworkDependenciesEndpointsNext operation. */
export declare type BatchAccountListOutboundNetworkDependenciesEndpointsNextResponse = OutboundEnvironmentEndpointCollection;

/** Optional parameters. */
export declare interface BatchAccountListOutboundNetworkDependenciesEndpointsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOutboundNetworkDependenciesEndpoints operation. */
export declare type BatchAccountListOutboundNetworkDependenciesEndpointsResponse = OutboundEnvironmentEndpointCollection;

/** Contains response data for the list operation. */
export declare type BatchAccountListResponse = BatchAccountListResult;

/** Values returned by the List operation. */
export declare interface BatchAccountListResult {
    /** The collection of Batch accounts returned by the listing operation. */
    value?: BatchAccount[];
    /** The continuation token. */
    nextLink?: string;
}

/** Interface representing a BatchAccountOperations. */
export declare interface BatchAccountOperations {
    /**
     * Gets information about the Batch accounts associated with the subscription.
     * @param options The options parameters.
     */
    list(options?: BatchAccountListOptionalParams): PagedAsyncIterableIterator<BatchAccount>;
    /**
     * Gets information about the Batch accounts associated with the specified resource group.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: BatchAccountListByResourceGroupOptionalParams): PagedAsyncIterableIterator<BatchAccount>;
    /**
     * Gets information about the detectors available for a given Batch account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    listDetectors(resourceGroupName: string, accountName: string, options?: BatchAccountListDetectorsOptionalParams): PagedAsyncIterableIterator<DetectorResponse>;
    /**
     * Lists the endpoints that a Batch Compute Node under this Batch Account may call as part of Batch
     * service administration. If you are deploying a Pool inside of a virtual network that you specify,
     * you must make sure your network allows outbound access to these endpoints. Failure to allow access
     * to these endpoints may cause Batch to mark the affected nodes as unusable. For more information
     * about creating a pool inside of a virtual network, see
     * https://docs.microsoft.com/en-us/azure/batch/batch-virtual-network.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    listOutboundNetworkDependenciesEndpoints(resourceGroupName: string, accountName: string, options?: BatchAccountListOutboundNetworkDependenciesEndpointsOptionalParams): PagedAsyncIterableIterator<OutboundEnvironmentEndpoint>;
    /**
     * Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with
     * this API and should instead be updated with the Update Batch Account API.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName A name for the Batch account which must be unique within the region. Batch
     *                    account names must be between 3 and 24 characters in length and must use only numbers and lowercase
     *                    letters. This name is used as part of the DNS name that is used to access the Batch service in the
     *                    region in which the account is created. For example: http://accountname.region.batch.azure.com/.
     * @param parameters Additional parameters for account creation.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, parameters: BatchAccountCreateParameters, options?: BatchAccountCreateOptionalParams): Promise<SimplePollerLike<OperationState<BatchAccountCreateResponse>, BatchAccountCreateResponse>>;
    /**
     * Creates a new Batch account with the specified parameters. Existing accounts cannot be updated with
     * this API and should instead be updated with the Update Batch Account API.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName A name for the Batch account which must be unique within the region. Batch
     *                    account names must be between 3 and 24 characters in length and must use only numbers and lowercase
     *                    letters. This name is used as part of the DNS name that is used to access the Batch service in the
     *                    region in which the account is created. For example: http://accountname.region.batch.azure.com/.
     * @param parameters Additional parameters for account creation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, parameters: BatchAccountCreateParameters, options?: BatchAccountCreateOptionalParams): Promise<BatchAccountCreateResponse>;
    /**
     * Updates the properties of an existing Batch account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param parameters Additional parameters for account update.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, parameters: BatchAccountUpdateParameters, options?: BatchAccountUpdateOptionalParams): Promise<BatchAccountUpdateResponse>;
    /**
     * Deletes the specified Batch account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, options?: BatchAccountDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified Batch account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, options?: BatchAccountDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified Batch account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, options?: BatchAccountGetOptionalParams): Promise<BatchAccountGetResponse>;
    /**
     * Synchronizes access keys for the auto-storage account configured for the specified Batch account,
     * only if storage key authentication is being used.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    synchronizeAutoStorageKeys(resourceGroupName: string, accountName: string, options?: BatchAccountSynchronizeAutoStorageKeysOptionalParams): Promise<void>;
    /**
     * This operation applies only to Batch accounts with allowedAuthenticationModes containing
     * 'SharedKey'. If the Batch account doesn't contain 'SharedKey' in its allowedAuthenticationMode,
     * clients cannot use shared keys to authenticate, and must use another allowedAuthenticationModes
     * instead. In this case, regenerating the keys will fail.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param parameters The type of key to regenerate.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, accountName: string, parameters: BatchAccountRegenerateKeyParameters, options?: BatchAccountRegenerateKeyOptionalParams): Promise<BatchAccountRegenerateKeyResponse>;
    /**
     * This operation applies only to Batch accounts with allowedAuthenticationModes containing
     * 'SharedKey'. If the Batch account doesn't contain 'SharedKey' in its allowedAuthenticationMode,
     * clients cannot use shared keys to authenticate, and must use another allowedAuthenticationModes
     * instead. In this case, getting the keys will fail.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    getKeys(resourceGroupName: string, accountName: string, options?: BatchAccountGetKeysOptionalParams): Promise<BatchAccountGetKeysResponse>;
    /**
     * Gets information about the given detector for a given Batch account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param detectorId The name of the detector.
     * @param options The options parameters.
     */
    getDetector(resourceGroupName: string, accountName: string, detectorId: string, options?: BatchAccountGetDetectorOptionalParams): Promise<BatchAccountGetDetectorResponse>;
}

/** Optional parameters. */
export declare interface BatchAccountRegenerateKeyOptionalParams extends coreClient.OperationOptions {
}

/** Parameters supplied to the RegenerateKey operation. */
export declare interface BatchAccountRegenerateKeyParameters {
    /** The type of account key to regenerate. */
    keyName: AccountKeyType;
}

/** Contains response data for the regenerateKey operation. */
export declare type BatchAccountRegenerateKeyResponse = BatchAccountKeys;

/** Optional parameters. */
export declare interface BatchAccountSynchronizeAutoStorageKeysOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface BatchAccountUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Parameters for updating an Azure Batch account. */
export declare interface BatchAccountUpdateParameters {
    /** The user-specified tags associated with the account. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The identity of the Batch account. */
    identity?: BatchAccountIdentity;
    /** The properties related to the auto-storage account. */
    autoStorage?: AutoStorageBaseProperties;
    /** Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead. */
    encryption?: EncryptionProperties;
    /** List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane. */
    allowedAuthenticationModes?: AuthenticationMode[];
    /** If not specified, the default value is 'enabled'. */
    publicNetworkAccess?: PublicNetworkAccessType;
    /** The network profile only takes effect when publicNetworkAccess is enabled. */
    networkProfile?: NetworkProfile;
}

/** Contains response data for the update operation. */
export declare type BatchAccountUpdateResponse = BatchAccount;

/** Quotas associated with a Batch region for a particular subscription. */
export declare interface BatchLocationQuota {
    /**
     * The number of Batch accounts that may be created under the subscription in the specified region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountQuota?: number;
}

export declare class BatchManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the BatchManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000)
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: BatchManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    batchAccountOperations: BatchAccountOperations;
    applicationPackageOperations: ApplicationPackageOperations;
    applicationOperations: ApplicationOperations;
    location: Location_2;
    operations: Operations;
    certificateOperations: CertificateOperations;
    privateLinkResourceOperations: PrivateLinkResourceOperations;
    privateEndpointConnectionOperations: PrivateEndpointConnectionOperations;
    poolOperations: PoolOperations;
}

/** Optional parameters. */
export declare interface BatchManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The identity of the Batch pool, if configured. If the pool identity is updated during update an existing pool, only the new vms which are created after the pool shrinks to 0 will have the updated identities */
export declare interface BatchPoolIdentity {
    /** The type of identity used for the Batch Pool. */
    type: PoolIdentityType;
    /** The list of user identities associated with the Batch pool. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentities;
    };
}

/** Defines values for CachingType. */
export declare type CachingType = "None" | "ReadOnly" | "ReadWrite";

/** Contains information about a certificate. */
export declare interface Certificate extends ProxyResource {
    /** This must match the first portion of the certificate name. Currently required to be 'SHA1'. */
    thumbprintAlgorithm?: string;
    /** This must match the thumbprint from the name. */
    thumbprint?: string;
    /** The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx. */
    format?: CertificateFormat;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly provisioningState?: CertificateProvisioningState;
    /**
     * The time at which the certificate entered its current state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningStateTransitionTime?: Date;
    /**
     * The previous provisioned state of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousProvisioningState?: CertificateProvisioningState;
    /**
     * The time at which the certificate entered its previous state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousProvisioningStateTransitionTime?: Date;
    /**
     * The public key of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicData?: string;
    /**
     * This is only returned when the certificate provisioningState is 'Failed'.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deleteCertificateError?: DeleteCertificateError;
}

/** Base certificate properties. */
export declare interface CertificateBaseProperties {
    /** This must match the first portion of the certificate name. Currently required to be 'SHA1'. */
    thumbprintAlgorithm?: string;
    /** This must match the thumbprint from the name. */
    thumbprint?: string;
    /** The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx. */
    format?: CertificateFormat;
}

/** Defines headers for Certificate_cancelDeletion operation. */
export declare interface CertificateCancelDeletionHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateCancelDeletionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the cancelDeletion operation. */
export declare type CertificateCancelDeletionResponse = CertificateCancelDeletionHeaders & Certificate;

/** Defines headers for Certificate_create operation. */
export declare interface CertificateCreateHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateCreateOptionalParams extends coreClient.OperationOptions {
    /** The entity state (ETag) version of the certificate to update. A value of "*" can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. */
    ifMatch?: string;
    /** Set to '*' to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. */
    ifNoneMatch?: string;
}

/** Contains information about a certificate. */
export declare interface CertificateCreateOrUpdateParameters extends ProxyResource {
    /** This must match the first portion of the certificate name. Currently required to be 'SHA1'. */
    thumbprintAlgorithm?: string;
    /** This must match the thumbprint from the name. */
    thumbprint?: string;
    /** The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx. */
    format?: CertificateFormat;
    /** The maximum size is 10KB. */
    data?: string;
    /** This must not be specified if the certificate format is Cer. */
    password?: string;
}

/** Certificate properties for create operations */
export declare interface CertificateCreateOrUpdateProperties extends CertificateBaseProperties {
    /** The maximum size is 10KB. */
    data: string;
    /** This must not be specified if the certificate format is Cer. */
    password?: string;
}

/** Contains response data for the create operation. */
export declare type CertificateCreateResponse = CertificateCreateHeaders & Certificate;

/** Defines headers for Certificate_delete operation. */
export declare interface CertificateDeleteHeaders {
    /** The URL of the resource used to check the status of the asynchronous operation. */
    location?: string;
    /** Suggested delay to check the status of the asynchronous operation. The value is an integer that represents the seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface CertificateDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines values for CertificateFormat. */
export declare type CertificateFormat = "Pfx" | "Cer";

/** Defines headers for Certificate_get operation. */
export declare interface CertificateGetHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CertificateGetResponse = CertificateGetHeaders & Certificate;

/** Optional parameters. */
export declare interface CertificateListByBatchAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBatchAccountNext operation. */
export declare type CertificateListByBatchAccountNextResponse = ListCertificatesResult;

/** Optional parameters. */
export declare interface CertificateListByBatchAccountOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
    /** OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name". */
    filter?: string;
    /** Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. */
    select?: string;
}

/** Contains response data for the listByBatchAccount operation. */
export declare type CertificateListByBatchAccountResponse = ListCertificatesResult;

/** Interface representing a CertificateOperations. */
export declare interface CertificateOperations {
    /**
     * Warning: This operation is deprecated and will be removed after February, 2024. Please use the
     * [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    listByBatchAccount(resourceGroupName: string, accountName: string, options?: CertificateListByBatchAccountOptionalParams): PagedAsyncIterableIterator<Certificate>;
    /**
     * Warning: This operation is deprecated and will be removed after February, 2024. Please use the
     * [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and
     *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
     *                        SHA1-a3d1c5.
     * @param parameters Additional parameters for certificate creation.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, certificateName: string, parameters: CertificateCreateOrUpdateParameters, options?: CertificateCreateOptionalParams): Promise<CertificateCreateResponse>;
    /**
     * Warning: This operation is deprecated and will be removed after February, 2024. Please use the
     * [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and
     *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
     *                        SHA1-a3d1c5.
     * @param parameters Certificate entity to update.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, certificateName: string, parameters: CertificateCreateOrUpdateParameters, options?: CertificateUpdateOptionalParams): Promise<CertificateUpdateResponse>;
    /**
     * Warning: This operation is deprecated and will be removed after February, 2024. Please use the
     * [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and
     *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
     *                        SHA1-a3d1c5.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, certificateName: string, options?: CertificateDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Warning: This operation is deprecated and will be removed after February, 2024. Please use the
     * [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and
     *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
     *                        SHA1-a3d1c5.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, certificateName: string, options?: CertificateDeleteOptionalParams): Promise<void>;
    /**
     * Warning: This operation is deprecated and will be removed after February, 2024. Please use the
     * [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and
     *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
     *                        SHA1-a3d1c5.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, certificateName: string, options?: CertificateGetOptionalParams): Promise<CertificateGetResponse>;
    /**
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the
     * certificate changes to deleteFailed. If you decide that you want to continue using the certificate,
     * you can use this operation to set the status of the certificate back to active. If you intend to
     * delete the certificate, you do not need to run this operation after the deletion failed. You must
     * make sure that the certificate is not being used by any resources, and then you can try again to
     * delete the certificate.
     *
     * Warning: This operation is deprecated and will be removed after February, 2024. Please use the
     * [Azure KeyVault
     * Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and
     *                        thumbprint separated by a dash, and must match the certificate data in the request. For example
     *                        SHA1-a3d1c5.
     * @param options The options parameters.
     */
    cancelDeletion(resourceGroupName: string, accountName: string, certificateName: string, options?: CertificateCancelDeletionOptionalParams): Promise<CertificateCancelDeletionResponse>;
}

/** Certificate properties. */
export declare interface CertificateProperties extends CertificateBaseProperties {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly provisioningState?: CertificateProvisioningState;
    /**
     * The time at which the certificate entered its current state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningStateTransitionTime?: Date;
    /**
     * The previous provisioned state of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousProvisioningState?: CertificateProvisioningState;
    /**
     * The time at which the certificate entered its previous state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousProvisioningStateTransitionTime?: Date;
    /**
     * The public key of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicData?: string;
    /**
     * This is only returned when the certificate provisioningState is 'Failed'.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deleteCertificateError?: DeleteCertificateError;
}

/** Defines values for CertificateProvisioningState. */
export declare type CertificateProvisioningState = "Succeeded" | "Deleting" | "Failed";

/** Warning: This object is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead. */
export declare interface CertificateReference {
    /** The fully qualified ID of the certificate to install on the pool. This must be inside the same batch account as the pool. */
    id: string;
    /** The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. */
    storeLocation?: CertificateStoreLocation;
    /** This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My. */
    storeName?: string;
    /** Which user accounts on the compute node should have access to the private data of the certificate. */
    visibility?: CertificateVisibility[];
}

/** Defines values for CertificateStoreLocation. */
export declare type CertificateStoreLocation = "CurrentUser" | "LocalMachine";

/** Defines headers for Certificate_update operation. */
export declare interface CertificateUpdateHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface CertificateUpdateOptionalParams extends coreClient.OperationOptions {
    /** The entity state (ETag) version of the certificate to update. This value can be omitted or set to "*" to apply the operation unconditionally. */
    ifMatch?: string;
}

/** Contains response data for the update operation. */
export declare type CertificateUpdateResponse = CertificateUpdateHeaders & Certificate;

/** Defines values for CertificateVisibility. */
export declare type CertificateVisibility = "StartTask" | "Task" | "RemoteUser";

/** Parameters for a check name availability request. */
export declare interface CheckNameAvailabilityParameters {
    /** The name to check for availability */
    name: string;
    /** The resource type. */
    type: "Microsoft.Batch/batchAccounts";
}

/** The CheckNameAvailability operation response. */
export declare interface CheckNameAvailabilityResult {
    /**
     * Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nameAvailable?: boolean;
    /**
     * Gets the reason that a Batch account name could not be used. The Reason element is only returned if NameAvailable is false.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: NameAvailabilityReason;
    /**
     * Gets an error message explaining the Reason value in more detail.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Information used to connect to a CIFS file system. */
export declare interface CifsMountConfiguration {
    /** The user to use for authentication against the CIFS file system. */
    userName: string;
    /** The URI of the file system to mount. */
    source: string;
    /** All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. */
    relativeMountPath: string;
    /** These are 'net use' options in Windows and 'mount' options in Linux. */
    mountOptions?: string;
    /** The password to use for authentication against the CIFS file system. */
    password: string;
}

/** An error response from the Batch service. */
export declare interface CloudError {
    /** The body of the error response. */
    error?: CloudErrorBody;
}

/** An error response from the Batch service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** The configuration for nodes in a pool based on the Azure Cloud Services platform. */
export declare interface CloudServiceConfiguration {
    /** Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases). */
    osFamily: string;
    /** The default value is * which specifies the latest operating system version for the specified OS family. */
    osVersion?: string;
}

/** Defines values for ComputeNodeDeallocationOption. */
export declare type ComputeNodeDeallocationOption = "Requeue" | "Terminate" | "TaskCompletion" | "RetainedData";

/** Defines values for ComputeNodeFillType. */
export declare type ComputeNodeFillType = "Spread" | "Pack";

/** The reference to a user assigned identity associated with the Batch pool which a compute node will use. */
export declare interface ComputeNodeIdentityReference {
    /** The ARM resource id of the user assigned identity. */
    resourceId?: string;
}

/** The configuration for container-enabled pools. */
export declare interface ContainerConfiguration {
    /** The container technology to be used. */
    type: ContainerType;
    /** This is the full image reference, as would be specified to "docker pull". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry. */
    containerImageNames?: string[];
    /** If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here. */
    containerRegistries?: ContainerRegistry[];
}

/** A private container registry. */
export declare interface ContainerRegistry {
    /** The user name to log into the registry server. */
    userName?: string;
    /** The password to log into the registry server. */
    password?: string;
    /** If omitted, the default is "docker.io". */
    registryServer?: string;
    /** The reference to a user assigned identity associated with the Batch pool which a compute node will use. */
    identityReference?: ComputeNodeIdentityReference;
}

/**
 * Defines values for ContainerType. \
 * {@link KnownContainerType} can be used interchangeably with ContainerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DockerCompatible**: A Docker compatible container technology will be used to launch the containers. \
 * **CriCompatible**: A CRI based technology will be used to launch the containers.
 */
export declare type ContainerType = string;

/** Defines values for ContainerWorkingDirectory. */
export declare type ContainerWorkingDirectory = "TaskWorkingDirectory" | "ContainerImageDefault";

/** Settings which will be used by the data disks associated to Compute Nodes in the Pool. When using attached data disks, you need to mount and format the disks from within a VM to use them. */
export declare interface DataDisk {
    /** The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive. */
    lun: number;
    /**
     * Values are:
     *
     *  none - The caching mode for the disk is not enabled.
     *  readOnly - The caching mode for the disk is read only.
     *  readWrite - The caching mode for the disk is read and write.
     *
     *  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     */
    caching?: CachingType;
    /** The initial disk size in GB when creating new data disk. */
    diskSizeGB: number;
    /**
     * If omitted, the default is "Standard_LRS". Values are:
     *
     *  Standard_LRS - The data disk should use standard locally redundant storage.
     *  Premium_LRS - The data disk should use premium locally redundant storage.
     */
    storageAccountType?: StorageAccountType;
}

/** An error response from the Batch service. */
export declare interface DeleteCertificateError {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: DeleteCertificateError[];
}

/** Deployment configuration properties. */
export declare interface DeploymentConfiguration {
    /** This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to 'UserSubscription'. */
    cloudServiceConfiguration?: CloudServiceConfiguration;
    /** This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. */
    virtualMachineConfiguration?: VirtualMachineConfiguration;
}

/** Values returned by the List operation. */
export declare interface DetectorListResult {
    /** The collection of Batch account detectors returned by the listing operation. */
    value?: DetectorResponse[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Contains the information for a detector. */
export declare interface DetectorResponse extends ProxyResource {
    /** A base64 encoded string that represents the content of a detector. */
    value?: string;
}

/** Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine. */
export declare interface DiffDiskSettings {
    /** This property can be used by user in the request to choose which location the operating system should be in. e.g., cache disk space for Ephemeral OS disk provisioning. For more information on Ephemeral OS disk size requirements, please refer to Ephemeral OS disk size requirements for Windows VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/windows/ephemeral-os-disks#size-requirements and Linux VMs at https://docs.microsoft.com/en-us/azure/virtual-machines/linux/ephemeral-os-disks#size-requirements. */
    placement?: "CacheDisk";
}

/** The disk encryption configuration applied on compute nodes in the pool. Disk encryption configuration is not supported on Linux pool created with Virtual Machine Image or Azure Compute Gallery Image. */
export declare interface DiskEncryptionConfiguration {
    /** On Linux pool, only "TemporaryDisk" is supported; on Windows pool, "OsDisk" and "TemporaryDisk" must be specified. */
    targets?: DiskEncryptionTarget[];
}

/** Defines values for DiskEncryptionTarget. */
export declare type DiskEncryptionTarget = "OsDisk" | "TemporaryDisk";

/** Defines values for DynamicVNetAssignmentScope. */
export declare type DynamicVNetAssignmentScope = "none" | "job";

/** Defines values for ElevationLevel. */
export declare type ElevationLevel = "NonAdmin" | "Admin";

/** Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead. */
export declare interface EncryptionProperties {
    /** Type of the key source. */
    keySource?: KeySource;
    /** Additional details when using Microsoft.KeyVault */
    keyVaultProperties?: KeyVaultProperties;
}

/** Defines values for EndpointAccessDefaultAction. */
export declare type EndpointAccessDefaultAction = "Allow" | "Deny";

/** Network access profile for Batch endpoint. */
export declare interface EndpointAccessProfile {
    /** Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled. */
    defaultAction: EndpointAccessDefaultAction;
    /** Array of IP ranges to filter client IP address. */
    ipRules?: IPRule[];
}

/** A domain name and connection details used to access a dependency. */
export declare interface EndpointDependency {
    /**
     * The domain name of the dependency. Domain names may be fully qualified or may contain a * wildcard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly domainName?: string;
    /**
     * Human-readable supplemental information about the dependency and when it is applicable.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * The list of connection details for this endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpointDetails?: EndpointDetail[];
}

/** Details about the connection between the Batch service and the endpoint. */
export declare interface EndpointDetail {
    /**
     * The port an endpoint is connected to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly port?: number;
}

/** An environment variable to be set on a task process. */
export declare interface EnvironmentSetting {
    /** The name of the environment variable. */
    name: string;
    /** The value of the environment variable. */
    value?: string;
}

/** Fixed scale settings for the pool. */
export declare interface FixedScaleSettings {
    /** The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). */
    resizeTimeout?: string;
    /** At least one of targetDedicatedNodes, targetLowPriorityNodes must be set. */
    targetDedicatedNodes?: number;
    /** At least one of targetDedicatedNodes, targetLowPriorityNodes must be set. */
    targetLowPriorityNodes?: number;
    /** If omitted, the default value is Requeue. */
    nodeDeallocationOption?: ComputeNodeDeallocationOption;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the 'List supported node agent SKUs' operation. */
export declare interface ImageReference {
    /** For example, Canonical or MicrosoftWindowsServer. */
    publisher?: string;
    /** For example, UbuntuServer or WindowsServer. */
    offer?: string;
    /** For example, 18.04-LTS or 2022-datacenter. */
    sku?: string;
    /** A value of 'latest' can be specified to select the latest version of an image. If omitted, the default is 'latest'. */
    version?: string;
    /** This property is mutually exclusive with other properties. The Azure Compute Gallery Image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. */
    id?: string;
}

/** Defines values for InboundEndpointProtocol. */
export declare type InboundEndpointProtocol = "TCP" | "UDP";

/** A inbound NAT pool that can be used to address specific ports on compute nodes in a Batch pool externally. */
export declare interface InboundNatPool {
    /** The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400. */
    name: string;
    /** The protocol of the endpoint. */
    protocol: InboundEndpointProtocol;
    /** This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400. */
    backendPort: number;
    /** Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400. */
    frontendPortRangeStart: number;
    /** Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400. */
    frontendPortRangeEnd: number;
    /** The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400. */
    networkSecurityGroupRules?: NetworkSecurityGroupRule[];
}

/** Defines values for InterNodeCommunicationState. */
export declare type InterNodeCommunicationState = "Enabled" | "Disabled";

/** Defines values for IPAddressProvisioningType. */
export declare type IPAddressProvisioningType = "BatchManaged" | "UserManaged" | "NoPublicIPAddresses";

/** Rule to filter client IP address. */
export declare interface IPRule {
    /** Action when client IP address is matched. */
    action: "Allow";
    /** IPv4 address, or IPv4 address range in CIDR format. */
    value: string;
}

/** Defines values for KeySource. */
export declare type KeySource = "Microsoft.Batch" | "Microsoft.KeyVault";

/** KeyVault configuration when using an encryption KeySource of Microsoft.KeyVault. */
export declare interface KeyVaultProperties {
    /**
     * Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
     *
     *  The Batch Account has a System Assigned identity
     *  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
     *  The KeyVault has soft-delete and purge protection enabled
     */
    keyIdentifier?: string;
}

/** Identifies the Azure key vault associated with a Batch account. */
export declare interface KeyVaultReference {
    /** The resource ID of the Azure key vault associated with the Batch account. */
    id: string;
    /** The URL of the Azure key vault associated with the Batch account. */
    url: string;
}

/** Known values of {@link ContainerType} that the service accepts. */
export declare enum KnownContainerType {
    /** A Docker compatible container technology will be used to launch the containers. */
    DockerCompatible = "DockerCompatible",
    /** A CRI based technology will be used to launch the containers. */
    CriCompatible = "CriCompatible"
}

/** Properties used to create a user account on a Linux node. */
export declare interface LinuxUserConfiguration {
    /** The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid. */
    uid?: number;
    /** The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid. */
    gid?: number;
    /** The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user's .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user's .ssh directory is done). */
    sshPrivateKey?: string;
}

/** The result of performing list application packages. */
export declare interface ListApplicationPackagesResult {
    /** The list of application packages. */
    value?: ApplicationPackage[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The result of performing list applications. */
export declare interface ListApplicationsResult {
    /** The list of applications. */
    value?: Application[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Values returned by the List operation. */
export declare interface ListCertificatesResult {
    /** The collection of returned certificates. */
    value?: Certificate[];
    /** The continuation token. */
    nextLink?: string;
}

/** Values returned by the List operation. */
export declare interface ListPoolsResult {
    /** The collection of returned pools. */
    value?: Pool[];
    /** The continuation token. */
    nextLink?: string;
}

/** Values returned by the List operation. */
export declare interface ListPrivateEndpointConnectionsResult {
    /** The collection of returned private endpoint connection. */
    value?: PrivateEndpointConnection[];
    /** The continuation token. */
    nextLink?: string;
}

/** Values returned by the List operation. */
export declare interface ListPrivateLinkResourcesResult {
    /** The collection of returned private link resources. */
    value?: PrivateLinkResource[];
    /** The continuation token. */
    nextLink?: string;
}

/** Interface representing a Location. */
declare interface Location_2 {
    /**
     * Gets the list of Batch supported Virtual Machine VM sizes available at the given location.
     * @param locationName The region for which to retrieve Batch service supported SKUs.
     * @param options The options parameters.
     */
    listSupportedVirtualMachineSkus(locationName: string, options?: LocationListSupportedVirtualMachineSkusOptionalParams): PagedAsyncIterableIterator<SupportedSku>;
    /**
     * Gets the list of Batch supported Cloud Service VM sizes available at the given location.
     * @param locationName The region for which to retrieve Batch service supported SKUs.
     * @param options The options parameters.
     */
    listSupportedCloudServiceSkus(locationName: string, options?: LocationListSupportedCloudServiceSkusOptionalParams): PagedAsyncIterableIterator<SupportedSku>;
    /**
     * Gets the Batch service quotas for the specified subscription at the given location.
     * @param locationName The region for which to retrieve Batch service quotas.
     * @param options The options parameters.
     */
    getQuotas(locationName: string, options?: LocationGetQuotasOptionalParams): Promise<LocationGetQuotasResponse>;
    /**
     * Checks whether the Batch account name is available in the specified region.
     * @param locationName The desired region for the name check.
     * @param parameters Properties needed to check the availability of a name.
     * @param options The options parameters.
     */
    checkNameAvailability(locationName: string, parameters: CheckNameAvailabilityParameters, options?: LocationCheckNameAvailabilityOptionalParams): Promise<LocationCheckNameAvailabilityResponse>;
}
export { Location_2 as Location }

/** Optional parameters. */
export declare interface LocationCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type LocationCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export declare interface LocationGetQuotasOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getQuotas operation. */
export declare type LocationGetQuotasResponse = BatchLocationQuota;

/** Optional parameters. */
export declare interface LocationListSupportedCloudServiceSkusNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSupportedCloudServiceSkusNext operation. */
export declare type LocationListSupportedCloudServiceSkusNextResponse = SupportedSkusResult;

/** Optional parameters. */
export declare interface LocationListSupportedCloudServiceSkusOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
    /** OData filter expression. Valid properties for filtering are "familyName". */
    filter?: string;
}

/** Contains response data for the listSupportedCloudServiceSkus operation. */
export declare type LocationListSupportedCloudServiceSkusResponse = SupportedSkusResult;

/** Optional parameters. */
export declare interface LocationListSupportedVirtualMachineSkusNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSupportedVirtualMachineSkusNext operation. */
export declare type LocationListSupportedVirtualMachineSkusNextResponse = SupportedSkusResult;

/** Optional parameters. */
export declare interface LocationListSupportedVirtualMachineSkusOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
    /** OData filter expression. Valid properties for filtering are "familyName". */
    filter?: string;
}

/** Contains response data for the listSupportedVirtualMachineSkus operation. */
export declare type LocationListSupportedVirtualMachineSkusResponse = SupportedSkusResult;

/** Defines values for LoginMode. */
export declare type LoginMode = "Batch" | "Interactive";

export declare interface ManagedDisk {
    /** The storage account type for use in creating data disks or OS disk. */
    storageAccountType?: StorageAccountType;
}

/** The Batch service does not assign any meaning to this metadata; it is solely for the use of user code. */
export declare interface MetadataItem {
    /** The name of the metadata item. */
    name: string;
    /** The value of the metadata item. */
    value: string;
}

/** The file system to mount on each node. */
export declare interface MountConfiguration {
    /** This property is mutually exclusive with all other properties. */
    azureBlobFileSystemConfiguration?: AzureBlobFileSystemConfiguration;
    /** This property is mutually exclusive with all other properties. */
    nfsMountConfiguration?: NFSMountConfiguration;
    /** This property is mutually exclusive with all other properties. */
    cifsMountConfiguration?: CifsMountConfiguration;
    /** This property is mutually exclusive with all other properties. */
    azureFileShareConfiguration?: AzureFileShareConfiguration;
}

/** Defines values for NameAvailabilityReason. */
export declare type NameAvailabilityReason = "Invalid" | "AlreadyExists";

/** The network configuration for a pool. */
export declare interface NetworkConfiguration {
    /** The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only 'classic' VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration */
    subnetId?: string;
    /** The scope of dynamic vnet assignment. */
    dynamicVnetAssignmentScope?: DynamicVNetAssignmentScope;
    /** Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property. */
    endpointConfiguration?: PoolEndpointConfiguration;
    /** This property is only supported on Pools with the virtualMachineConfiguration property. */
    publicIPAddressConfiguration?: PublicIPAddressConfiguration;
    /** Accelerated networking enables single root I/O virtualization (SR-IOV) to a VM, which may lead to improved networking performance. For more details, see: https://learn.microsoft.com/azure/virtual-network/accelerated-networking-overview. */
    enableAcceleratedNetworking?: boolean;
}

/** Network profile for Batch account, which contains network rule settings for each endpoint. */
export declare interface NetworkProfile {
    /** Network access profile for batchAccount endpoint (Batch account data plane API). */
    accountAccess?: EndpointAccessProfile;
    /** Network access profile for nodeManagement endpoint (Batch service managing compute nodes for Batch pools). */
    nodeManagementAccess?: EndpointAccessProfile;
}

/** A network security group rule to apply to an inbound endpoint. */
export declare interface NetworkSecurityGroupRule {
    /** Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400. */
    priority: number;
    /** The action that should be taken for a specified IP address, subnet range or tag. */
    access: NetworkSecurityGroupRuleAccess;
    /** Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400. */
    sourceAddressPrefix: string;
    /** Valid values are '*' (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can't overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *. */
    sourcePortRanges?: string[];
}

/** Defines values for NetworkSecurityGroupRuleAccess. */
export declare type NetworkSecurityGroupRuleAccess = "Allow" | "Deny";

/** Information used to connect to an NFS file system. */
export declare interface NFSMountConfiguration {
    /** The URI of the file system to mount. */
    source: string;
    /** All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. */
    relativeMountPath: string;
    /** These are 'net use' options in Windows and 'mount' options in Linux. */
    mountOptions?: string;
}

/** Defines values for NodeCommunicationMode. */
export declare type NodeCommunicationMode = "Default" | "Classic" | "Simplified";

/** Allocation configuration used by Batch Service to provision the nodes. */
export declare interface NodePlacementConfiguration {
    /** Allocation policy used by Batch Service to provision the nodes. If not specified, Batch will use the regional policy. */
    policy?: NodePlacementPolicyType;
}

/** Defines values for NodePlacementPolicyType. */
export declare type NodePlacementPolicyType = "Regional" | "Zonal";

/** A REST API operation */
export declare interface Operation {
    /** This is of the format {provider}/{resource}/{operation} */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** The object that describes the operation. */
    display?: OperationDisplay;
    /** The intended executor of the operation. */
    origin?: string;
    /** Properties of the operation. */
    properties?: Record<string, unknown>;
}

/** The object that describes the operation. */
export declare interface OperationDisplay {
    /** Friendly name of the resource provider. */
    provider?: string;
    /** For example: read, write, delete, or listKeys/action */
    operation?: string;
    /** The resource type on which the operation is performed. */
    resource?: string;
    /** The friendly name of the operation */
    description?: string;
}

/** Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results. */
export declare interface OperationListResult {
    /** The list of operations supported by the resource provider. */
    value?: Operation[];
    /** The URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists available operations for the Microsoft.Batch provider
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Settings for the operating system disk of the virtual machine. */
export declare interface OSDisk {
    /** Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine. */
    ephemeralOSDiskSettings?: DiffDiskSettings;
    /** The type of caching to enable for the disk. */
    caching?: CachingType;
    managedDisk?: ManagedDisk;
    /** The initial disk size in GB when creating new OS disk. */
    diskSizeGB?: number;
    /** Specifies whether writeAccelerator should be enabled or disabled on the disk. */
    writeAcceleratorEnabled?: boolean;
}

/** A collection of related endpoints from the same service for which the Batch service requires outbound access. */
export declare interface OutboundEnvironmentEndpoint {
    /**
     * The type of service that the Batch service connects to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: string;
    /**
     * The endpoints for this service to which the Batch service makes outbound calls.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoints?: EndpointDependency[];
}

/** Values returned by the List operation. */
export declare interface OutboundEnvironmentEndpointCollection {
    /**
     * The collection of outbound network dependency endpoints returned by the listing operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: OutboundEnvironmentEndpoint[];
    /** The continuation token. */
    nextLink?: string;
}

/** Defines values for PackageState. */
export declare type PackageState = "Pending" | "Active";

/** Contains information about a pool. */
export declare interface Pool extends ProxyResource {
    /** The type of identity used for the Batch Pool. */
    identity?: BatchPoolIdentity;
    /** The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. */
    displayName?: string;
    /**
     * This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /**
     * The creation time of the pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /**
     * The current state of the pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PoolProvisioningState;
    /**
     * The time at which the pool entered its current state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningStateTransitionTime?: Date;
    /**
     * Whether the pool is resizing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allocationState?: AllocationState;
    /**
     * The time at which the pool entered its current allocation state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allocationStateTransitionTime?: Date;
    /** For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series). */
    vmSize?: string;
    /** Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS). */
    deploymentConfiguration?: DeploymentConfiguration;
    /**
     * The number of dedicated compute nodes currently in the pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentDedicatedNodes?: number;
    /**
     * The number of Spot/low-priority compute nodes currently in the pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentLowPriorityNodes?: number;
    /** Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes. */
    scaleSettings?: ScaleSettings;
    /**
     * This property is set only if the pool automatically scales, i.e. autoScaleSettings are used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoScaleRun?: AutoScaleRun;
    /** This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'. */
    interNodeCommunication?: InterNodeCommunicationState;
    /** The network configuration for a pool. */
    networkConfiguration?: NetworkConfiguration;
    /** The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256. */
    taskSlotsPerNode?: number;
    /** If not specified, the default is spread. */
    taskSchedulingPolicy?: TaskSchedulingPolicy;
    /** The list of user accounts to be created on each node in the pool. */
    userAccounts?: UserAccount[];
    /** The Batch service does not assign any meaning to metadata; it is solely for the use of user code. */
    metadata?: MetadataItem[];
    /** In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool. */
    startTask?: StartTask;
    /**
     * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
     *
     * Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
     */
    certificates?: CertificateReference[];
    /** Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool. */
    applicationPackages?: ApplicationPackageReference[];
    /** The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail. */
    applicationLicenses?: string[];
    /**
     * Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resizeOperationStatus?: ResizeOperationStatus;
    /** This supports Azure Files, NFS, CIFS/SMB, and Blobfuse. */
    mountConfiguration?: MountConfiguration[];
    /** If omitted, the default value is Default. */
    targetNodeCommunicationMode?: NodeCommunicationMode;
    /**
     * Determines how a pool communicates with the Batch service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentNodeCommunicationMode?: NodeCommunicationMode;
    /** Describes an upgrade policy - automatic, manual, or rolling. */
    upgradePolicy?: UpgradePolicy;
    /** The user-defined tags to be associated with the Azure Batch Pool. When specified, these tags are propagated to the backing Azure resources associated with the pool. This property can only be specified when the Batch account was created with the poolAllocationMode property set to 'UserSubscription'. */
    resourceTags?: {
        [propertyName: string]: string;
    };
}

/** Defines values for PoolAllocationMode. */
export declare type PoolAllocationMode = "BatchService" | "UserSubscription";

/** Defines headers for Pool_create operation. */
export declare interface PoolCreateHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PoolCreateOptionalParams extends coreClient.OperationOptions {
    /** The entity state (ETag) version of the pool to update. A value of "*" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied. */
    ifMatch?: string;
    /** Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored. */
    ifNoneMatch?: string;
}

/** Contains response data for the create operation. */
export declare type PoolCreateResponse = PoolCreateHeaders & Pool;

/** Defines headers for Pool_delete operation. */
export declare interface PoolDeleteHeaders {
    /** The URL of the resource used to check the status of the asynchronous operation. */
    location?: string;
    /** Suggested delay to check the status of the asynchronous operation. The value is an integer that represents the seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface PoolDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Pool_disableAutoScale operation. */
export declare interface PoolDisableAutoScaleHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PoolDisableAutoScaleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the disableAutoScale operation. */
export declare type PoolDisableAutoScaleResponse = PoolDisableAutoScaleHeaders & Pool;

/** The endpoint configuration for a pool. */
export declare interface PoolEndpointConfiguration {
    /** The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses. */
    inboundNatPools: InboundNatPool[];
}

/** Defines headers for Pool_get operation. */
export declare interface PoolGetHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PoolGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PoolGetResponse = PoolGetHeaders & Pool;

/** Defines values for PoolIdentityType. */
export declare type PoolIdentityType = "UserAssigned" | "None";

/** Optional parameters. */
export declare interface PoolListByBatchAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBatchAccountNext operation. */
export declare type PoolListByBatchAccountNextResponse = ListPoolsResult;

/** Optional parameters. */
export declare interface PoolListByBatchAccountOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
    /**
     * OData filter expression. Valid properties for filtering are:
     *
     *  name
     *  properties/allocationState
     *  properties/allocationStateTransitionTime
     *  properties/creationTime
     *  properties/provisioningState
     *  properties/provisioningStateTransitionTime
     *  properties/lastModified
     *  properties/vmSize
     *  properties/interNodeCommunication
     *  properties/scaleSettings/autoScale
     *  properties/scaleSettings/fixedScale
     */
    filter?: string;
    /** Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. */
    select?: string;
}

/** Contains response data for the listByBatchAccount operation. */
export declare type PoolListByBatchAccountResponse = ListPoolsResult;

/** Interface representing a PoolOperations. */
export declare interface PoolOperations {
    /**
     * Lists all of the pools in the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    listByBatchAccount(resourceGroupName: string, accountName: string, options?: PoolListByBatchAccountOptionalParams): PagedAsyncIterableIterator<Pool>;
    /**
     * Creates a new pool inside the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param poolName The pool name. This must be unique within the account.
     * @param parameters Additional parameters for pool creation.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, accountName: string, poolName: string, parameters: Pool, options?: PoolCreateOptionalParams): Promise<PoolCreateResponse>;
    /**
     * Updates the properties of an existing pool.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param poolName The pool name. This must be unique within the account.
     * @param parameters Pool properties that should be updated. Properties that are supplied will be
     *                   updated, any property not supplied will be unchanged.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, accountName: string, poolName: string, parameters: Pool, options?: PoolUpdateOptionalParams): Promise<PoolUpdateResponse>;
    /**
     * Deletes the specified pool.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param poolName The pool name. This must be unique within the account.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, poolName: string, options?: PoolDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified pool.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param poolName The pool name. This must be unique within the account.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, poolName: string, options?: PoolDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about the specified pool.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param poolName The pool name. This must be unique within the account.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, poolName: string, options?: PoolGetOptionalParams): Promise<PoolGetResponse>;
    /**
     * Disables automatic scaling for a pool.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param poolName The pool name. This must be unique within the account.
     * @param options The options parameters.
     */
    disableAutoScale(resourceGroupName: string, accountName: string, poolName: string, options?: PoolDisableAutoScaleOptionalParams): Promise<PoolDisableAutoScaleResponse>;
    /**
     * This does not restore the pool to its previous state before the resize operation: it only stops any
     * further changes being made, and the pool maintains its current state. After stopping, the pool
     * stabilizes at the number of nodes it was at when the stop operation was done. During the stop
     * operation, the pool allocation state changes first to stopping and then to steady. A resize
     * operation need not be an explicit resize pool request; this API can also be used to halt the initial
     * sizing of the pool when it is created.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param poolName The pool name. This must be unique within the account.
     * @param options The options parameters.
     */
    stopResize(resourceGroupName: string, accountName: string, poolName: string, options?: PoolStopResizeOptionalParams): Promise<PoolStopResizeResponse>;
}

/** Defines values for PoolProvisioningState. */
export declare type PoolProvisioningState = "Succeeded" | "Deleting";

/** Defines headers for Pool_stopResize operation. */
export declare interface PoolStopResizeHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PoolStopResizeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the stopResize operation. */
export declare type PoolStopResizeResponse = PoolStopResizeHeaders & Pool;

/** Defines headers for Pool_update operation. */
export declare interface PoolUpdateHeaders {
    /** The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface PoolUpdateOptionalParams extends coreClient.OperationOptions {
    /** The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally. */
    ifMatch?: string;
}

/** Contains response data for the update operation. */
export declare type PoolUpdateResponse = PoolUpdateHeaders & Pool;

/** The private endpoint of the private endpoint connection. */
export declare interface PrivateEndpoint {
    /**
     * The ARM resource identifier of the private endpoint. This is of the form /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/privateEndpoints/{privateEndpoint}.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** Contains information about a private link resource. */
export declare interface PrivateEndpointConnection extends ProxyResource {
    /**
     * The provisioning state of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
    /**
     * The private endpoint of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpoint?: PrivateEndpoint;
    /**
     * The value has one and only one group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupIds?: string[];
    /** The private link service connection state of the private endpoint connection */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/** Defines headers for PrivateEndpointConnection_delete operation. */
export declare interface PrivateEndpointConnectionDeleteHeaders {
    /** The URL of the resource used to check the status of the asynchronous operation. */
    location?: string;
    /** Suggested delay to check the status of the asynchronous operation. The value is an integer that specifies the delay in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type PrivateEndpointConnectionDeleteResponse = PrivateEndpointConnectionDeleteHeaders;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionListByBatchAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBatchAccountNext operation. */
export declare type PrivateEndpointConnectionListByBatchAccountNextResponse = ListPrivateEndpointConnectionsResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionListByBatchAccountOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
}

/** Contains response data for the listByBatchAccount operation. */
export declare type PrivateEndpointConnectionListByBatchAccountResponse = ListPrivateEndpointConnectionsResult;

/** Interface representing a PrivateEndpointConnectionOperations. */
export declare interface PrivateEndpointConnectionOperations {
    /**
     * Lists all of the private endpoint connections in the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    listByBatchAccount(resourceGroupName: string, accountName: string, options?: PrivateEndpointConnectionListByBatchAccountOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets information about the specified private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param privateEndpointConnectionName The private endpoint connection name. This must be unique
     *                                      within the account.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionGetOptionalParams): Promise<PrivateEndpointConnectionGetResponse>;
    /**
     * Updates the properties of an existing private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param privateEndpointConnectionName The private endpoint connection name. This must be unique
     *                                      within the account.
     * @param parameters PrivateEndpointConnection properties that should be updated. Properties that are
     *                   supplied will be updated, any property not supplied will be unchanged.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionUpdateResponse>, PrivateEndpointConnectionUpdateResponse>>;
    /**
     * Updates the properties of an existing private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param privateEndpointConnectionName The private endpoint connection name. This must be unique
     *                                      within the account.
     * @param parameters PrivateEndpointConnection properties that should be updated. Properties that are
     *                   supplied will be updated, any property not supplied will be unchanged.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionUpdateOptionalParams): Promise<PrivateEndpointConnectionUpdateResponse>;
    /**
     * Deletes the specified private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param privateEndpointConnectionName The private endpoint connection name. This must be unique
     *                                      within the account.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionDeleteOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionDeleteResponse>, PrivateEndpointConnectionDeleteResponse>>;
    /**
     * Deletes the specified private endpoint connection.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param privateEndpointConnectionName The private endpoint connection name. This must be unique
     *                                      within the account.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionDeleteOptionalParams): Promise<PrivateEndpointConnectionDeleteResponse>;
}

/** Defines values for PrivateEndpointConnectionProvisioningState. */
export declare type PrivateEndpointConnectionProvisioningState = "Creating" | "Updating" | "Deleting" | "Succeeded" | "Failed" | "Cancelled";

/** Defines headers for PrivateEndpointConnection_update operation. */
export declare interface PrivateEndpointConnectionUpdateHeaders {
    /** The URL of the resource used to check the status of the asynchronous operation. */
    location?: string;
    /** Suggested delay to check the status of the asynchronous operation. The value is an integer that represents the seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionUpdateOptionalParams extends coreClient.OperationOptions {
    /** The state (ETag) version of the private endpoint connection to update. This value can be omitted or set to "*" to apply the operation unconditionally. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PrivateEndpointConnectionUpdateResponse = PrivateEndpointConnection;

/** Contains information about a private link resource. */
export declare interface PrivateLinkResource extends ProxyResource {
    /**
     * The group id is used to establish the private link connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The list of required members that are used to establish the private link connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /**
     * The list of required zone names for the private DNS resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredZoneNames?: string[];
}

/** Optional parameters. */
export declare interface PrivateLinkResourceGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourceGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourceListByBatchAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBatchAccountNext operation. */
export declare type PrivateLinkResourceListByBatchAccountNextResponse = ListPrivateLinkResourcesResult;

/** Optional parameters. */
export declare interface PrivateLinkResourceListByBatchAccountOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of items to return in the response. */
    maxresults?: number;
}

/** Contains response data for the listByBatchAccount operation. */
export declare type PrivateLinkResourceListByBatchAccountResponse = ListPrivateLinkResourcesResult;

/** Interface representing a PrivateLinkResourceOperations. */
export declare interface PrivateLinkResourceOperations {
    /**
     * Lists all of the private link resources in the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param options The options parameters.
     */
    listByBatchAccount(resourceGroupName: string, accountName: string, options?: PrivateLinkResourceListByBatchAccountOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Gets information about the specified private link resource.
     * @param resourceGroupName The name of the resource group that contains the Batch account.
     * @param accountName The name of the Batch account.
     * @param privateLinkResourceName The private link resource name. This must be unique within the
     *                                account.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, privateLinkResourceName: string, options?: PrivateLinkResourceGetOptionalParams): Promise<PrivateLinkResourceGetResponse>;
}

/** The private link service connection state of the private endpoint connection */
export declare interface PrivateLinkServiceConnectionState {
    /** The status of the Batch private endpoint connection */
    status: PrivateLinkServiceConnectionStatus;
    /** Description of the private Connection state */
    description?: string;
    /**
     * Action required on the private connection state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: string;
}

/** Defines values for PrivateLinkServiceConnectionStatus. */
export declare type PrivateLinkServiceConnectionStatus = "Approved" | "Pending" | "Rejected" | "Disconnected";

/** Defines values for ProvisioningState. */
export declare type ProvisioningState = "Invalid" | "Creating" | "Deleting" | "Succeeded" | "Failed" | "Cancelled";

/** A definition of an Azure resource. */
export declare interface ProxyResource {
    /**
     * The ID of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The ETag of the resource, used for concurrency statements.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
}

/** The public IP Address configuration of the networking configuration of a Pool. */
export declare interface PublicIPAddressConfiguration {
    /** The default value is BatchManaged */
    provision?: IPAddressProvisioningType;
    /** The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}. */
    ipAddressIds?: string[];
}

/** Defines values for PublicNetworkAccessType. */
export declare type PublicNetworkAccessType = "Enabled" | "Disabled";

/** An error that occurred when resizing a pool. */
export declare interface ResizeError {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message: string;
    /** Additional details about the error. */
    details?: ResizeError[];
}

/** Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady). */
export declare interface ResizeOperationStatus {
    /** The desired number of dedicated compute nodes in the pool. */
    targetDedicatedNodes?: number;
    /** The desired number of Spot/low-priority compute nodes in the pool. */
    targetLowPriorityNodes?: number;
    /** The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). */
    resizeTimeout?: string;
    /** The default value is requeue. */
    nodeDeallocationOption?: ComputeNodeDeallocationOption;
    /** The time when this resize operation was started. */
    startTime?: Date;
    /** This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady. */
    errors?: ResizeError[];
}

/** A definition of an Azure resource. */
export declare interface Resource {
    /**
     * The ID of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The location of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The tags of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tags?: {
        [propertyName: string]: string;
    };
}

/** A single file or multiple files to be downloaded to a compute node. */
export declare interface ResourceFile {
    /** The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. */
    autoStorageContainerName?: string;
    /** The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access. */
    storageContainerUrl?: string;
    /** The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access. */
    httpUrl?: string;
    /** The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded. */
    blobPrefix?: string;
    /** If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..'). */
    filePath?: string;
    /** This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file. */
    fileMode?: string;
    /** The reference to a user assigned identity associated with the Batch pool which a compute node will use. */
    identityReference?: ComputeNodeIdentityReference;
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "SystemAssigned" | "UserAssigned" | "None";

/** The configuration parameters used while performing a rolling upgrade. */
export declare interface RollingUpgradePolicy {
    /** Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the batch size. If this field is not set, Azure Azure Batch will not set its default value. The value of enableCrossZoneUpgrade on the created VirtualMachineScaleSet will be decided by the default configurations on VirtualMachineScaleSet. This field is able to be set to true or false only when using NodePlacementConfiguration as Zonal. */
    enableCrossZoneUpgrade?: boolean;
    /** The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or future batches can cause the percentage of instances in a batch to decrease to ensure higher reliability. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent. */
    maxBatchInstancePercent?: number;
    /** The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either as a result of being upgraded, or by being found in an unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The value of this field should be between 5 and 100, inclusive. If both maxBatchInstancePercent and maxUnhealthyInstancePercent are assigned with value, the value of maxBatchInstancePercent should not be more than maxUnhealthyInstancePercent. */
    maxUnhealthyInstancePercent?: number;
    /** The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check will happen after each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The value of this field should be between 0 and 100, inclusive. */
    maxUnhealthyUpgradedInstancePercent?: number;
    /** The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time duration should be specified in ISO 8601 format. */
    pauseTimeBetweenBatches?: string;
    /** Upgrade all unhealthy instances in a scale set before any healthy instances. */
    prioritizeUnhealthyInstances?: boolean;
    /** Rollback failed instances to previous model if the Rolling Upgrade policy is violated. */
    rollbackFailedInstancesOnPolicyBreach?: boolean;
}

/** Defines the desired size of the pool. This can either be 'fixedScale' where the requested targetDedicatedNodes is specified, or 'autoScale' which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes. */
export declare interface ScaleSettings {
    /** This property and autoScale are mutually exclusive and one of the properties must be specified. */
    fixedScale?: FixedScaleSettings;
    /** This property and fixedScale are mutually exclusive and one of the properties must be specified. */
    autoScale?: AutoScaleSettings;
}

/** Specifies the security profile settings for the virtual machine or virtual machine scale set. */
export declare interface SecurityProfile {
    /** Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. */
    securityType?: "trustedLaunch";
    /** This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual machine scale set. This will enable the encryption for all the disks including Resource/Temp disk at host itself. */
    encryptionAtHost?: boolean;
    /** Specifies the security settings like secure boot and vTPM used while creating the virtual machine. */
    uefiSettings?: UefiSettings;
}

/** Specifies the service artifact reference id used to set same image version for all virtual machines in the scale set when using 'latest' image version. */
export declare interface ServiceArtifactReference {
    /** The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName} */
    id: string;
}

/** A SKU capability, such as the number of cores. */
export declare interface SkuCapability {
    /**
     * The name of the feature.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The value of the feature.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** In some cases the start task may be re-run even though the node was not rebooted. Due to this, start tasks should be idempotent and exit gracefully if the setup they're performing has already been done. Special care should be taken to avoid start tasks which create breakaway process or install/launch services from the start task working directory, as this will block Batch from being able to re-run the start task. */
export declare interface StartTask {
    /** The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified. */
    commandLine?: string;
    /** A list of files that the Batch service will download to the compute node before running the command line. */
    resourceFiles?: ResourceFile[];
    /** A list of environment variable settings for the start task. */
    environmentSettings?: EnvironmentSetting[];
    /** If omitted, the task runs as a non-administrative user unique to the task. */
    userIdentity?: UserIdentity;
    /** The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit. Default is 0 */
    maxTaskRetryCount?: number;
    /** If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true. */
    waitForSuccess?: boolean;
    /** When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container. */
    containerSettings?: TaskContainerSettings;
}

/** Defines values for StorageAccountType. */
export declare type StorageAccountType = "Standard_LRS" | "Premium_LRS" | "StandardSSD_LRS";

/** Describes a Batch supported SKU. */
export declare interface SupportedSku {
    /**
     * The name of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The family name of the SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly familyName?: string;
    /**
     * A collection of capabilities which this SKU supports.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: SkuCapability[];
    /**
     * The time when Azure Batch service will retire this SKU.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly batchSupportEndOfLife?: Date;
}

/** The Batch List supported SKUs operation response. */
export declare interface SupportedSkusResult {
    /** The list of SKUs available for the Batch service in the location. */
    value: SupportedSku[];
    /**
     * The URL to use for getting the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The container settings for a task. */
export declare interface TaskContainerSettings {
    /** These additional options are supplied as arguments to the "docker create" command, in addition to those controlled by the Batch Service. */
    containerRunOptions?: string;
    /** This is the full image reference, as would be specified to "docker pull". If no tag is provided as part of the image name, the tag ":latest" is used as a default. */
    imageName: string;
    /** This setting can be omitted if was already provided at pool creation. */
    registry?: ContainerRegistry;
    /** A flag to indicate where the container task working directory is. The default is 'taskWorkingDirectory'. */
    workingDirectory?: ContainerWorkingDirectory;
}

/** Specifies how tasks should be distributed across compute nodes. */
export declare interface TaskSchedulingPolicy {
    /** How tasks should be distributed across compute nodes. */
    nodeFillType: ComputeNodeFillType;
}

/** Specifies the security settings like secure boot and vTPM used while creating the virtual machine. */
export declare interface UefiSettings {
    /** Specifies whether secure boot should be enabled on the virtual machine. */
    secureBootEnabled?: boolean;
    /** Specifies whether vTPM should be enabled on the virtual machine. */
    vTpmEnabled?: boolean;
}

/** Defines values for UpgradeMode. */
export declare type UpgradeMode = "automatic" | "manual" | "rolling";

/** Describes an upgrade policy - automatic, manual, or rolling. */
export declare interface UpgradePolicy {
    /** Specifies the mode of an upgrade to virtual machines in the scale set.<br /><br /> Possible values are:<br /><br /> **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.<br /><br /> **Automatic** - All virtual machines in the scale set are automatically updated at the same time.<br /><br /> **Rolling** - Scale set performs updates in batches with an optional pause time in between. */
    mode: UpgradeMode;
    /** The configuration parameters used for performing automatic OS upgrade. */
    automaticOSUpgradePolicy?: AutomaticOSUpgradePolicy;
    /** This property is only supported on Pools with the virtualMachineConfiguration property. */
    rollingUpgradePolicy?: RollingUpgradePolicy;
}

/** Properties used to create a user on an Azure Batch node. */
export declare interface UserAccount {
    /** The name of the user account. Names can contain any Unicode characters up to a maximum length of 20. */
    name: string;
    /** The password for the user account. */
    password: string;
    /** nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin. */
    elevationLevel?: ElevationLevel;
    /** This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options. */
    linuxUserConfiguration?: LinuxUserConfiguration;
    /** This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options. */
    windowsUserConfiguration?: WindowsUserConfiguration;
}

/** The list of associated user identities. */
export declare interface UserAssignedIdentities {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** Specify either the userName or autoUser property, but not both. */
export declare interface UserIdentity {
    /** The userName and autoUser properties are mutually exclusive; you must specify one but not both. */
    userName?: string;
    /** The userName and autoUser properties are mutually exclusive; you must specify one but not both. */
    autoUser?: AutoUserSpecification;
}

/** The configuration for compute nodes in a pool based on the Azure Virtual Machines infrastructure. */
export declare interface VirtualMachineConfiguration {
    /** A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the 'List supported node agent SKUs' operation. */
    imageReference: ImageReference;
    /** The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation. */
    nodeAgentSkuId: string;
    /** This property must not be specified if the imageReference specifies a Linux OS image. */
    windowsConfiguration?: WindowsConfiguration;
    /** This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. */
    dataDisks?: DataDisk[];
    /**
     * This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
     *
     *  Windows_Server - The on-premises license is for Windows Server.
     *  Windows_Client - The on-premises license is for Windows Client.
     *
     */
    licenseType?: string;
    /** If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it. */
    containerConfiguration?: ContainerConfiguration;
    /** If specified, encryption is performed on each node in the pool during node provisioning. */
    diskEncryptionConfiguration?: DiskEncryptionConfiguration;
    /** This configuration will specify rules on how nodes in the pool will be physically allocated. */
    nodePlacementConfiguration?: NodePlacementConfiguration;
    /** If specified, the extensions mentioned in this configuration will be installed on each node. */
    extensions?: VMExtension[];
    /** Contains configuration for ephemeral OSDisk settings. */
    osDisk?: OSDisk;
    /** Specifies the security profile settings for the virtual machine or virtual machine scale set. */
    securityProfile?: SecurityProfile;
    /** The service artifact reference id in the form of /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName} */
    serviceArtifactReference?: ServiceArtifactReference;
}

/** A VM Family and its associated core quota for the Batch account. */
export declare interface VirtualMachineFamilyCoreQuota {
    /**
     * The Virtual Machine family name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The core quota for the VM family for the Batch account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly coreQuota?: number;
}

/** The configuration for virtual machine extensions. */
export declare interface VMExtension {
    /** The name of the virtual machine extension. */
    name: string;
    /** The name of the extension handler publisher. */
    publisher: string;
    /** The type of the extensions. */
    type: string;
    /** The version of script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available. */
    enableAutomaticUpgrade?: boolean;
    /** JSON formatted public settings for the extension. */
    settings?: Record<string, unknown>;
    /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
    protectedSettings?: Record<string, unknown>;
    /** Collection of extension names after which this extension needs to be provisioned. */
    provisionAfterExtensions?: string[];
}

/** Windows operating system settings to apply to the virtual machine. */
export declare interface WindowsConfiguration {
    /** If omitted, the default value is true. */
    enableAutomaticUpdates?: boolean;
}

/** Properties used to create a user account on a Windows node. */
export declare interface WindowsUserConfiguration {
    /** Specifies login mode for the user. The default value for VirtualMachineConfiguration pools is interactive mode and for CloudServiceConfiguration pools is batch mode. */
    loginMode?: LoginMode;
}

export { }
