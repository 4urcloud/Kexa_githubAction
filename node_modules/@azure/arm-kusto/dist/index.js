'use strict';

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link AzureSkuName} that the service accepts. */
exports.KnownAzureSkuName = void 0;
(function (KnownAzureSkuName) {
    /** DevNoSLAStandardD11V2 */
    KnownAzureSkuName["DevNoSLAStandardD11V2"] = "Dev(No SLA)_Standard_D11_v2";
    /** DevNoSLAStandardE2AV4 */
    KnownAzureSkuName["DevNoSLAStandardE2AV4"] = "Dev(No SLA)_Standard_E2a_v4";
    /** StandardD11V2 */
    KnownAzureSkuName["StandardD11V2"] = "Standard_D11_v2";
    /** StandardD12V2 */
    KnownAzureSkuName["StandardD12V2"] = "Standard_D12_v2";
    /** StandardD13V2 */
    KnownAzureSkuName["StandardD13V2"] = "Standard_D13_v2";
    /** StandardD14V2 */
    KnownAzureSkuName["StandardD14V2"] = "Standard_D14_v2";
    /** StandardD32DV4 */
    KnownAzureSkuName["StandardD32DV4"] = "Standard_D32d_v4";
    /** StandardD16DV5 */
    KnownAzureSkuName["StandardD16DV5"] = "Standard_D16d_v5";
    /** StandardD32DV5 */
    KnownAzureSkuName["StandardD32DV5"] = "Standard_D32d_v5";
    /** StandardDS13V21TBPS */
    KnownAzureSkuName["StandardDS13V21TBPS"] = "Standard_DS13_v2+1TB_PS";
    /** StandardDS13V22TBPS */
    KnownAzureSkuName["StandardDS13V22TBPS"] = "Standard_DS13_v2+2TB_PS";
    /** StandardDS14V23TBPS */
    KnownAzureSkuName["StandardDS14V23TBPS"] = "Standard_DS14_v2+3TB_PS";
    /** StandardDS14V24TBPS */
    KnownAzureSkuName["StandardDS14V24TBPS"] = "Standard_DS14_v2+4TB_PS";
    /** StandardL4S */
    KnownAzureSkuName["StandardL4S"] = "Standard_L4s";
    /** StandardL8S */
    KnownAzureSkuName["StandardL8S"] = "Standard_L8s";
    /** StandardL16S */
    KnownAzureSkuName["StandardL16S"] = "Standard_L16s";
    /** StandardL8SV2 */
    KnownAzureSkuName["StandardL8SV2"] = "Standard_L8s_v2";
    /** StandardL16SV2 */
    KnownAzureSkuName["StandardL16SV2"] = "Standard_L16s_v2";
    /** StandardL8SV3 */
    KnownAzureSkuName["StandardL8SV3"] = "Standard_L8s_v3";
    /** StandardL16SV3 */
    KnownAzureSkuName["StandardL16SV3"] = "Standard_L16s_v3";
    /** StandardL32SV3 */
    KnownAzureSkuName["StandardL32SV3"] = "Standard_L32s_v3";
    /** StandardL8AsV3 */
    KnownAzureSkuName["StandardL8AsV3"] = "Standard_L8as_v3";
    /** StandardL16AsV3 */
    KnownAzureSkuName["StandardL16AsV3"] = "Standard_L16as_v3";
    /** StandardL32AsV3 */
    KnownAzureSkuName["StandardL32AsV3"] = "Standard_L32as_v3";
    /** StandardE64IV3 */
    KnownAzureSkuName["StandardE64IV3"] = "Standard_E64i_v3";
    /** StandardE80IdsV4 */
    KnownAzureSkuName["StandardE80IdsV4"] = "Standard_E80ids_v4";
    /** StandardE2AV4 */
    KnownAzureSkuName["StandardE2AV4"] = "Standard_E2a_v4";
    /** StandardE4AV4 */
    KnownAzureSkuName["StandardE4AV4"] = "Standard_E4a_v4";
    /** StandardE8AV4 */
    KnownAzureSkuName["StandardE8AV4"] = "Standard_E8a_v4";
    /** StandardE16AV4 */
    KnownAzureSkuName["StandardE16AV4"] = "Standard_E16a_v4";
    /** StandardE8AsV41TBPS */
    KnownAzureSkuName["StandardE8AsV41TBPS"] = "Standard_E8as_v4+1TB_PS";
    /** StandardE8AsV42TBPS */
    KnownAzureSkuName["StandardE8AsV42TBPS"] = "Standard_E8as_v4+2TB_PS";
    /** StandardE16AsV43TBPS */
    KnownAzureSkuName["StandardE16AsV43TBPS"] = "Standard_E16as_v4+3TB_PS";
    /** StandardE16AsV44TBPS */
    KnownAzureSkuName["StandardE16AsV44TBPS"] = "Standard_E16as_v4+4TB_PS";
    /** StandardE8AsV51TBPS */
    KnownAzureSkuName["StandardE8AsV51TBPS"] = "Standard_E8as_v5+1TB_PS";
    /** StandardE8AsV52TBPS */
    KnownAzureSkuName["StandardE8AsV52TBPS"] = "Standard_E8as_v5+2TB_PS";
    /** StandardE16AsV53TBPS */
    KnownAzureSkuName["StandardE16AsV53TBPS"] = "Standard_E16as_v5+3TB_PS";
    /** StandardE16AsV54TBPS */
    KnownAzureSkuName["StandardE16AsV54TBPS"] = "Standard_E16as_v5+4TB_PS";
    /** StandardE2AdsV5 */
    KnownAzureSkuName["StandardE2AdsV5"] = "Standard_E2ads_v5";
    /** StandardE4AdsV5 */
    KnownAzureSkuName["StandardE4AdsV5"] = "Standard_E4ads_v5";
    /** StandardE8AdsV5 */
    KnownAzureSkuName["StandardE8AdsV5"] = "Standard_E8ads_v5";
    /** StandardE16AdsV5 */
    KnownAzureSkuName["StandardE16AdsV5"] = "Standard_E16ads_v5";
    /** StandardEC8AsV51TBPS */
    KnownAzureSkuName["StandardEC8AsV51TBPS"] = "Standard_EC8as_v5+1TB_PS";
    /** StandardEC8AsV52TBPS */
    KnownAzureSkuName["StandardEC8AsV52TBPS"] = "Standard_EC8as_v5+2TB_PS";
    /** StandardEC16AsV53TBPS */
    KnownAzureSkuName["StandardEC16AsV53TBPS"] = "Standard_EC16as_v5+3TB_PS";
    /** StandardEC16AsV54TBPS */
    KnownAzureSkuName["StandardEC16AsV54TBPS"] = "Standard_EC16as_v5+4TB_PS";
    /** StandardEC8AdsV5 */
    KnownAzureSkuName["StandardEC8AdsV5"] = "Standard_EC8ads_v5";
    /** StandardEC16AdsV5 */
    KnownAzureSkuName["StandardEC16AdsV5"] = "Standard_EC16ads_v5";
    /** StandardE8SV41TBPS */
    KnownAzureSkuName["StandardE8SV41TBPS"] = "Standard_E8s_v4+1TB_PS";
    /** StandardE8SV42TBPS */
    KnownAzureSkuName["StandardE8SV42TBPS"] = "Standard_E8s_v4+2TB_PS";
    /** StandardE16SV43TBPS */
    KnownAzureSkuName["StandardE16SV43TBPS"] = "Standard_E16s_v4+3TB_PS";
    /** StandardE16SV44TBPS */
    KnownAzureSkuName["StandardE16SV44TBPS"] = "Standard_E16s_v4+4TB_PS";
    /** StandardE8SV51TBPS */
    KnownAzureSkuName["StandardE8SV51TBPS"] = "Standard_E8s_v5+1TB_PS";
    /** StandardE8SV52TBPS */
    KnownAzureSkuName["StandardE8SV52TBPS"] = "Standard_E8s_v5+2TB_PS";
    /** StandardE16SV53TBPS */
    KnownAzureSkuName["StandardE16SV53TBPS"] = "Standard_E16s_v5+3TB_PS";
    /** StandardE16SV54TBPS */
    KnownAzureSkuName["StandardE16SV54TBPS"] = "Standard_E16s_v5+4TB_PS";
    /** StandardE2DV4 */
    KnownAzureSkuName["StandardE2DV4"] = "Standard_E2d_v4";
    /** StandardE4DV4 */
    KnownAzureSkuName["StandardE4DV4"] = "Standard_E4d_v4";
    /** StandardE8DV4 */
    KnownAzureSkuName["StandardE8DV4"] = "Standard_E8d_v4";
    /** StandardE16DV4 */
    KnownAzureSkuName["StandardE16DV4"] = "Standard_E16d_v4";
    /** StandardE2DV5 */
    KnownAzureSkuName["StandardE2DV5"] = "Standard_E2d_v5";
    /** StandardE4DV5 */
    KnownAzureSkuName["StandardE4DV5"] = "Standard_E4d_v5";
    /** StandardE8DV5 */
    KnownAzureSkuName["StandardE8DV5"] = "Standard_E8d_v5";
    /** StandardE16DV5 */
    KnownAzureSkuName["StandardE16DV5"] = "Standard_E16d_v5";
})(exports.KnownAzureSkuName || (exports.KnownAzureSkuName = {}));
/** Known values of {@link AzureSkuTier} that the service accepts. */
exports.KnownAzureSkuTier = void 0;
(function (KnownAzureSkuTier) {
    /** Basic */
    KnownAzureSkuTier["Basic"] = "Basic";
    /** Standard */
    KnownAzureSkuTier["Standard"] = "Standard";
})(exports.KnownAzureSkuTier || (exports.KnownAzureSkuTier = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link IdentityType} that the service accepts. */
exports.KnownIdentityType = void 0;
(function (KnownIdentityType) {
    /** None */
    KnownIdentityType["None"] = "None";
    /** SystemAssigned */
    KnownIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
})(exports.KnownIdentityType || (exports.KnownIdentityType = {}));
/** Known values of {@link State} that the service accepts. */
exports.KnownState = void 0;
(function (KnownState) {
    /** Creating */
    KnownState["Creating"] = "Creating";
    /** Unavailable */
    KnownState["Unavailable"] = "Unavailable";
    /** Running */
    KnownState["Running"] = "Running";
    /** Deleting */
    KnownState["Deleting"] = "Deleting";
    /** Deleted */
    KnownState["Deleted"] = "Deleted";
    /** Stopping */
    KnownState["Stopping"] = "Stopping";
    /** Stopped */
    KnownState["Stopped"] = "Stopped";
    /** Starting */
    KnownState["Starting"] = "Starting";
    /** Updating */
    KnownState["Updating"] = "Updating";
    /** Migrated */
    KnownState["Migrated"] = "Migrated";
})(exports.KnownState || (exports.KnownState = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Running */
    KnownProvisioningState["Running"] = "Running";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Moving */
    KnownProvisioningState["Moving"] = "Moving";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link VnetState} that the service accepts. */
exports.KnownVnetState = void 0;
(function (KnownVnetState) {
    /** Enabled */
    KnownVnetState["Enabled"] = "Enabled";
    /** Disabled */
    KnownVnetState["Disabled"] = "Disabled";
})(exports.KnownVnetState || (exports.KnownVnetState = {}));
/** Known values of {@link LanguageExtensionName} that the service accepts. */
exports.KnownLanguageExtensionName = void 0;
(function (KnownLanguageExtensionName) {
    /** Python */
    KnownLanguageExtensionName["Python"] = "PYTHON";
    /** R */
    KnownLanguageExtensionName["R"] = "R";
})(exports.KnownLanguageExtensionName || (exports.KnownLanguageExtensionName = {}));
/** Known values of {@link LanguageExtensionImageName} that the service accepts. */
exports.KnownLanguageExtensionImageName = void 0;
(function (KnownLanguageExtensionImageName) {
    /** R */
    KnownLanguageExtensionImageName["R"] = "R";
    /** Python365 */
    KnownLanguageExtensionImageName["Python365"] = "Python3_6_5";
    /** Python3108 */
    KnownLanguageExtensionImageName["Python3108"] = "Python3_10_8";
    /** Python3108DL */
    KnownLanguageExtensionImageName["Python3108DL"] = "Python3_10_8_DL";
    /** PythonCustomImage */
    KnownLanguageExtensionImageName["PythonCustomImage"] = "PythonCustomImage";
})(exports.KnownLanguageExtensionImageName || (exports.KnownLanguageExtensionImageName = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link EngineType} that the service accepts. */
exports.KnownEngineType = void 0;
(function (KnownEngineType) {
    /** V2 */
    KnownEngineType["V2"] = "V2";
    /** V3 */
    KnownEngineType["V3"] = "V3";
})(exports.KnownEngineType || (exports.KnownEngineType = {}));
/** Known values of {@link ClusterNetworkAccessFlag} that the service accepts. */
exports.KnownClusterNetworkAccessFlag = void 0;
(function (KnownClusterNetworkAccessFlag) {
    /** Enabled */
    KnownClusterNetworkAccessFlag["Enabled"] = "Enabled";
    /** Disabled */
    KnownClusterNetworkAccessFlag["Disabled"] = "Disabled";
})(exports.KnownClusterNetworkAccessFlag || (exports.KnownClusterNetworkAccessFlag = {}));
/** Known values of {@link PublicIPType} that the service accepts. */
exports.KnownPublicIPType = void 0;
(function (KnownPublicIPType) {
    /** IPv4 */
    KnownPublicIPType["IPv4"] = "IPv4";
    /** DualStack */
    KnownPublicIPType["DualStack"] = "DualStack";
})(exports.KnownPublicIPType || (exports.KnownPublicIPType = {}));
/** Known values of {@link MigrationClusterRole} that the service accepts. */
exports.KnownMigrationClusterRole = void 0;
(function (KnownMigrationClusterRole) {
    /** Source */
    KnownMigrationClusterRole["Source"] = "Source";
    /** Destination */
    KnownMigrationClusterRole["Destination"] = "Destination";
})(exports.KnownMigrationClusterRole || (exports.KnownMigrationClusterRole = {}));
/** Known values of {@link Reason} that the service accepts. */
exports.KnownReason = void 0;
(function (KnownReason) {
    /** Invalid */
    KnownReason["Invalid"] = "Invalid";
    /** AlreadyExists */
    KnownReason["AlreadyExists"] = "AlreadyExists";
})(exports.KnownReason || (exports.KnownReason = {}));
/** Known values of {@link ClusterPrincipalRole} that the service accepts. */
exports.KnownClusterPrincipalRole = void 0;
(function (KnownClusterPrincipalRole) {
    /** AllDatabasesAdmin */
    KnownClusterPrincipalRole["AllDatabasesAdmin"] = "AllDatabasesAdmin";
    /** AllDatabasesViewer */
    KnownClusterPrincipalRole["AllDatabasesViewer"] = "AllDatabasesViewer";
})(exports.KnownClusterPrincipalRole || (exports.KnownClusterPrincipalRole = {}));
/** Known values of {@link PrincipalType} that the service accepts. */
exports.KnownPrincipalType = void 0;
(function (KnownPrincipalType) {
    /** App */
    KnownPrincipalType["App"] = "App";
    /** Group */
    KnownPrincipalType["Group"] = "Group";
    /** User */
    KnownPrincipalType["User"] = "User";
})(exports.KnownPrincipalType || (exports.KnownPrincipalType = {}));
/** Known values of {@link DatabaseShareOrigin} that the service accepts. */
exports.KnownDatabaseShareOrigin = void 0;
(function (KnownDatabaseShareOrigin) {
    /** Direct */
    KnownDatabaseShareOrigin["Direct"] = "Direct";
    /** DataShare */
    KnownDatabaseShareOrigin["DataShare"] = "DataShare";
    /** Other */
    KnownDatabaseShareOrigin["Other"] = "Other";
})(exports.KnownDatabaseShareOrigin || (exports.KnownDatabaseShareOrigin = {}));
/** Known values of {@link AzureScaleType} that the service accepts. */
exports.KnownAzureScaleType = void 0;
(function (KnownAzureScaleType) {
    /** Automatic */
    KnownAzureScaleType["Automatic"] = "automatic";
    /** Manual */
    KnownAzureScaleType["Manual"] = "manual";
    /** None */
    KnownAzureScaleType["None"] = "none";
})(exports.KnownAzureScaleType || (exports.KnownAzureScaleType = {}));
/** Known values of {@link Kind} that the service accepts. */
exports.KnownKind = void 0;
(function (KnownKind) {
    /** ReadWrite */
    KnownKind["ReadWrite"] = "ReadWrite";
    /** ReadOnlyFollowing */
    KnownKind["ReadOnlyFollowing"] = "ReadOnlyFollowing";
})(exports.KnownKind || (exports.KnownKind = {}));
/** Known values of {@link CallerRole} that the service accepts. */
exports.KnownCallerRole = void 0;
(function (KnownCallerRole) {
    /** Admin */
    KnownCallerRole["Admin"] = "Admin";
    /** None */
    KnownCallerRole["None"] = "None";
})(exports.KnownCallerRole || (exports.KnownCallerRole = {}));
/** Known values of {@link DatabasePrincipalRole} that the service accepts. */
exports.KnownDatabasePrincipalRole = void 0;
(function (KnownDatabasePrincipalRole) {
    /** Admin */
    KnownDatabasePrincipalRole["Admin"] = "Admin";
    /** Ingestor */
    KnownDatabasePrincipalRole["Ingestor"] = "Ingestor";
    /** Monitor */
    KnownDatabasePrincipalRole["Monitor"] = "Monitor";
    /** User */
    KnownDatabasePrincipalRole["User"] = "User";
    /** UnrestrictedViewer */
    KnownDatabasePrincipalRole["UnrestrictedViewer"] = "UnrestrictedViewer";
    /** Viewer */
    KnownDatabasePrincipalRole["Viewer"] = "Viewer";
})(exports.KnownDatabasePrincipalRole || (exports.KnownDatabasePrincipalRole = {}));
/** Known values of {@link DatabasePrincipalType} that the service accepts. */
exports.KnownDatabasePrincipalType = void 0;
(function (KnownDatabasePrincipalType) {
    /** App */
    KnownDatabasePrincipalType["App"] = "App";
    /** Group */
    KnownDatabasePrincipalType["Group"] = "Group";
    /** User */
    KnownDatabasePrincipalType["User"] = "User";
})(exports.KnownDatabasePrincipalType || (exports.KnownDatabasePrincipalType = {}));
/** Known values of {@link Language} that the service accepts. */
exports.KnownLanguage = void 0;
(function (KnownLanguage) {
    /** Python */
    KnownLanguage["Python"] = "Python";
})(exports.KnownLanguage || (exports.KnownLanguage = {}));
/** Known values of {@link DefaultPrincipalsModificationKind} that the service accepts. */
exports.KnownDefaultPrincipalsModificationKind = void 0;
(function (KnownDefaultPrincipalsModificationKind) {
    /** Union */
    KnownDefaultPrincipalsModificationKind["Union"] = "Union";
    /** Replace */
    KnownDefaultPrincipalsModificationKind["Replace"] = "Replace";
    /** None */
    KnownDefaultPrincipalsModificationKind["None"] = "None";
})(exports.KnownDefaultPrincipalsModificationKind || (exports.KnownDefaultPrincipalsModificationKind = {}));
/** Known values of {@link DataConnectionKind} that the service accepts. */
exports.KnownDataConnectionKind = void 0;
(function (KnownDataConnectionKind) {
    /** EventHub */
    KnownDataConnectionKind["EventHub"] = "EventHub";
    /** EventGrid */
    KnownDataConnectionKind["EventGrid"] = "EventGrid";
    /** IotHub */
    KnownDataConnectionKind["IotHub"] = "IotHub";
    /** CosmosDb */
    KnownDataConnectionKind["CosmosDb"] = "CosmosDb";
})(exports.KnownDataConnectionKind || (exports.KnownDataConnectionKind = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** Succeeded */
    KnownStatus["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownStatus["Canceled"] = "Canceled";
    /** Failed */
    KnownStatus["Failed"] = "Failed";
    /** Running */
    KnownStatus["Running"] = "Running";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link PrincipalsModificationKind} that the service accepts. */
exports.KnownPrincipalsModificationKind = void 0;
(function (KnownPrincipalsModificationKind) {
    /** Union */
    KnownPrincipalsModificationKind["Union"] = "Union";
    /** Replace */
    KnownPrincipalsModificationKind["Replace"] = "Replace";
    /** None */
    KnownPrincipalsModificationKind["None"] = "None";
})(exports.KnownPrincipalsModificationKind || (exports.KnownPrincipalsModificationKind = {}));
/** Known values of {@link EventHubDataFormat} that the service accepts. */
exports.KnownEventHubDataFormat = void 0;
(function (KnownEventHubDataFormat) {
    /** Multijson */
    KnownEventHubDataFormat["Multijson"] = "MULTIJSON";
    /** Json */
    KnownEventHubDataFormat["Json"] = "JSON";
    /** CSV */
    KnownEventHubDataFormat["CSV"] = "CSV";
    /** TSV */
    KnownEventHubDataFormat["TSV"] = "TSV";
    /** Scsv */
    KnownEventHubDataFormat["Scsv"] = "SCSV";
    /** Sohsv */
    KnownEventHubDataFormat["Sohsv"] = "SOHSV";
    /** PSV */
    KnownEventHubDataFormat["PSV"] = "PSV";
    /** TXT */
    KnownEventHubDataFormat["TXT"] = "TXT";
    /** RAW */
    KnownEventHubDataFormat["RAW"] = "RAW";
    /** Singlejson */
    KnownEventHubDataFormat["Singlejson"] = "SINGLEJSON";
    /** Avro */
    KnownEventHubDataFormat["Avro"] = "AVRO";
    /** Tsve */
    KnownEventHubDataFormat["Tsve"] = "TSVE";
    /** Parquet */
    KnownEventHubDataFormat["Parquet"] = "PARQUET";
    /** ORC */
    KnownEventHubDataFormat["ORC"] = "ORC";
    /** Apacheavro */
    KnownEventHubDataFormat["Apacheavro"] = "APACHEAVRO";
    /** W3Clogfile */
    KnownEventHubDataFormat["W3Clogfile"] = "W3CLOGFILE";
})(exports.KnownEventHubDataFormat || (exports.KnownEventHubDataFormat = {}));
/** Known values of {@link Compression} that the service accepts. */
exports.KnownCompression = void 0;
(function (KnownCompression) {
    /** None */
    KnownCompression["None"] = "None";
    /** GZip */
    KnownCompression["GZip"] = "GZip";
})(exports.KnownCompression || (exports.KnownCompression = {}));
/** Known values of {@link DatabaseRouting} that the service accepts. */
exports.KnownDatabaseRouting = void 0;
(function (KnownDatabaseRouting) {
    /** Single */
    KnownDatabaseRouting["Single"] = "Single";
    /** Multi */
    KnownDatabaseRouting["Multi"] = "Multi";
})(exports.KnownDatabaseRouting || (exports.KnownDatabaseRouting = {}));
/** Known values of {@link IotHubDataFormat} that the service accepts. */
exports.KnownIotHubDataFormat = void 0;
(function (KnownIotHubDataFormat) {
    /** Multijson */
    KnownIotHubDataFormat["Multijson"] = "MULTIJSON";
    /** Json */
    KnownIotHubDataFormat["Json"] = "JSON";
    /** CSV */
    KnownIotHubDataFormat["CSV"] = "CSV";
    /** TSV */
    KnownIotHubDataFormat["TSV"] = "TSV";
    /** Scsv */
    KnownIotHubDataFormat["Scsv"] = "SCSV";
    /** Sohsv */
    KnownIotHubDataFormat["Sohsv"] = "SOHSV";
    /** PSV */
    KnownIotHubDataFormat["PSV"] = "PSV";
    /** TXT */
    KnownIotHubDataFormat["TXT"] = "TXT";
    /** RAW */
    KnownIotHubDataFormat["RAW"] = "RAW";
    /** Singlejson */
    KnownIotHubDataFormat["Singlejson"] = "SINGLEJSON";
    /** Avro */
    KnownIotHubDataFormat["Avro"] = "AVRO";
    /** Tsve */
    KnownIotHubDataFormat["Tsve"] = "TSVE";
    /** Parquet */
    KnownIotHubDataFormat["Parquet"] = "PARQUET";
    /** ORC */
    KnownIotHubDataFormat["ORC"] = "ORC";
    /** Apacheavro */
    KnownIotHubDataFormat["Apacheavro"] = "APACHEAVRO";
    /** W3Clogfile */
    KnownIotHubDataFormat["W3Clogfile"] = "W3CLOGFILE";
})(exports.KnownIotHubDataFormat || (exports.KnownIotHubDataFormat = {}));
/** Known values of {@link EventGridDataFormat} that the service accepts. */
exports.KnownEventGridDataFormat = void 0;
(function (KnownEventGridDataFormat) {
    /** Multijson */
    KnownEventGridDataFormat["Multijson"] = "MULTIJSON";
    /** Json */
    KnownEventGridDataFormat["Json"] = "JSON";
    /** CSV */
    KnownEventGridDataFormat["CSV"] = "CSV";
    /** TSV */
    KnownEventGridDataFormat["TSV"] = "TSV";
    /** Scsv */
    KnownEventGridDataFormat["Scsv"] = "SCSV";
    /** Sohsv */
    KnownEventGridDataFormat["Sohsv"] = "SOHSV";
    /** PSV */
    KnownEventGridDataFormat["PSV"] = "PSV";
    /** TXT */
    KnownEventGridDataFormat["TXT"] = "TXT";
    /** RAW */
    KnownEventGridDataFormat["RAW"] = "RAW";
    /** Singlejson */
    KnownEventGridDataFormat["Singlejson"] = "SINGLEJSON";
    /** Avro */
    KnownEventGridDataFormat["Avro"] = "AVRO";
    /** Tsve */
    KnownEventGridDataFormat["Tsve"] = "TSVE";
    /** Parquet */
    KnownEventGridDataFormat["Parquet"] = "PARQUET";
    /** ORC */
    KnownEventGridDataFormat["ORC"] = "ORC";
    /** Apacheavro */
    KnownEventGridDataFormat["Apacheavro"] = "APACHEAVRO";
    /** W3Clogfile */
    KnownEventGridDataFormat["W3Clogfile"] = "W3CLOGFILE";
})(exports.KnownEventGridDataFormat || (exports.KnownEventGridDataFormat = {}));
/** Known values of {@link BlobStorageEventType} that the service accepts. */
exports.KnownBlobStorageEventType = void 0;
(function (KnownBlobStorageEventType) {
    /** MicrosoftStorageBlobCreated */
    KnownBlobStorageEventType["MicrosoftStorageBlobCreated"] = "Microsoft.Storage.BlobCreated";
    /** MicrosoftStorageBlobRenamed */
    KnownBlobStorageEventType["MicrosoftStorageBlobRenamed"] = "Microsoft.Storage.BlobRenamed";
})(exports.KnownBlobStorageEventType || (exports.KnownBlobStorageEventType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AzureSku = {
    type: {
        name: "Composite",
        className: "AzureSku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            },
            tier: {
                serializedName: "tier",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties"
                        }
                    }
                }
            }
        }
    }
};
const ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties = {
    type: {
        name: "Composite",
        className: "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrustedExternalTenant = {
    type: {
        name: "Composite",
        className: "TrustedExternalTenant",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OptimizedAutoscale = {
    type: {
        name: "Composite",
        className: "OptimizedAutoscale",
        modelProperties: {
            version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            },
            isEnabled: {
                serializedName: "isEnabled",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            minimum: {
                serializedName: "minimum",
                required: true,
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const VirtualNetworkConfiguration = {
    type: {
        name: "Composite",
        className: "VirtualNetworkConfiguration",
        modelProperties: {
            subnetId: {
                serializedName: "subnetId",
                required: true,
                type: {
                    name: "String"
                }
            },
            enginePublicIpId: {
                serializedName: "enginePublicIpId",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataManagementPublicIpId: {
                serializedName: "dataManagementPublicIpId",
                required: true,
                type: {
                    name: "String"
                }
            },
            state: {
                defaultValue: "Enabled",
                serializedName: "state",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            },
            keyVersion: {
                serializedName: "keyVersion",
                type: {
                    name: "String"
                }
            },
            keyVaultUri: {
                serializedName: "keyVaultUri",
                type: {
                    name: "String"
                }
            },
            userIdentity: {
                serializedName: "userIdentity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LanguageExtensionsList = {
    type: {
        name: "Composite",
        className: "LanguageExtensionsList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LanguageExtension"
                        }
                    }
                }
            }
        }
    }
};
const LanguageExtension = {
    type: {
        name: "Composite",
        className: "LanguageExtension",
        modelProperties: {
            languageExtensionName: {
                serializedName: "languageExtensionName",
                type: {
                    name: "String"
                }
            },
            languageExtensionImageName: {
                serializedName: "languageExtensionImageName",
                type: {
                    name: "String"
                }
            },
            languageExtensionCustomImageName: {
                serializedName: "languageExtensionCustomImageName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcceptedAudiences = {
    type: {
        name: "Composite",
        className: "AcceptedAudiences",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointProperty = {
    type: {
        name: "Composite",
        className: "PrivateEndpointProperty",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionStateProperty = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionStateProperty",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MigrationClusterProperties = {
    type: {
        name: "Composite",
        className: "MigrationClusterProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            uri: {
                serializedName: "uri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataIngestionUri: {
                serializedName: "dataIngestionUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            role: {
                serializedName: "role",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ClusterMigrateRequest = {
    type: {
        name: "Composite",
        className: "ClusterMigrateRequest",
        modelProperties: {
            clusterResourceId: {
                serializedName: "clusterResourceId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterPrincipalAssignmentCheckNameRequest = {
    type: {
        name: "Composite",
        className: "ClusterPrincipalAssignmentCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters/principalAssignments",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameResult = {
    type: {
        name: "Composite",
        className: "CheckNameResult",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterPrincipalAssignmentListResult = {
    type: {
        name: "Composite",
        className: "ClusterPrincipalAssignmentListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClusterPrincipalAssignment"
                        }
                    }
                }
            }
        }
    }
};
const FollowerDatabaseListResult = {
    type: {
        name: "Composite",
        className: "FollowerDatabaseListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FollowerDatabaseDefinition"
                        }
                    }
                }
            }
        }
    }
};
const FollowerDatabaseDefinition = {
    type: {
        name: "Composite",
        className: "FollowerDatabaseDefinition",
        modelProperties: {
            clusterResourceId: {
                serializedName: "clusterResourceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            attachedDatabaseConfigurationName: {
                serializedName: "attachedDatabaseConfigurationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            databaseName: {
                serializedName: "databaseName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tableLevelSharingProperties: {
                serializedName: "tableLevelSharingProperties",
                type: {
                    name: "Composite",
                    className: "TableLevelSharingProperties"
                }
            },
            databaseShareOrigin: {
                serializedName: "databaseShareOrigin",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TableLevelSharingProperties = {
    type: {
        name: "Composite",
        className: "TableLevelSharingProperties",
        modelProperties: {
            tablesToInclude: {
                serializedName: "tablesToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            tablesToExclude: {
                serializedName: "tablesToExclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            externalTablesToInclude: {
                serializedName: "externalTablesToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            externalTablesToExclude: {
                serializedName: "externalTablesToExclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            materializedViewsToInclude: {
                serializedName: "materializedViewsToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            materializedViewsToExclude: {
                serializedName: "materializedViewsToExclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            functionsToInclude: {
                serializedName: "functionsToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            functionsToExclude: {
                serializedName: "functionsToExclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const DiagnoseVirtualNetworkResult = {
    type: {
        name: "Composite",
        className: "DiagnoseVirtualNetworkResult",
        modelProperties: {
            findings: {
                serializedName: "findings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ClusterListResult = {
    type: {
        name: "Composite",
        className: "ClusterListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Cluster"
                        }
                    }
                }
            }
        }
    }
};
const SkuDescriptionList = {
    type: {
        name: "Composite",
        className: "SkuDescriptionList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuDescription"
                        }
                    }
                }
            }
        }
    }
};
const SkuDescription = {
    type: {
        name: "Composite",
        className: "SkuDescription",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            locations: {
                serializedName: "locations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            locationInfo: {
                serializedName: "locationInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SkuLocationInfoItem"
                        }
                    }
                }
            },
            restrictions: {
                serializedName: "restrictions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } }
                        }
                    }
                }
            }
        }
    }
};
const SkuLocationInfoItem = {
    type: {
        name: "Composite",
        className: "SkuLocationInfoItem",
        modelProperties: {
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            zoneDetails: {
                serializedName: "zoneDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuZoneDetails"
                        }
                    }
                }
            }
        }
    }
};
const ResourceSkuZoneDetails = {
    type: {
        name: "Composite",
        className: "ResourceSkuZoneDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            capabilities: {
                serializedName: "capabilities",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuCapabilities"
                        }
                    }
                }
            }
        }
    }
};
const ResourceSkuCapabilities = {
    type: {
        name: "Composite",
        className: "ResourceSkuCapabilities",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterCheckNameRequest = {
    type: {
        name: "Composite",
        className: "ClusterCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameRequest = {
    type: {
        name: "Composite",
        className: "CheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Microsoft.Kusto/clusters/databases",
                        "Microsoft.Kusto/clusters/attachedDatabaseConfigurations"
                    ]
                }
            }
        }
    }
};
const AttachedDatabaseConfigurationsCheckNameRequest = {
    type: {
        name: "Composite",
        className: "AttachedDatabaseConfigurationsCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters/attachedDatabaseConfigurations",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedPrivateEndpointsCheckNameRequest = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointsCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters/managedPrivateEndpoints",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ListResourceSkusResult = {
    type: {
        name: "Composite",
        className: "ListResourceSkusResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureResourceSku"
                        }
                    }
                }
            }
        }
    }
};
const AzureResourceSku = {
    type: {
        name: "Composite",
        className: "AzureResourceSku",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "AzureSku"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "AzureCapacity"
                }
            }
        }
    }
};
const AzureCapacity = {
    type: {
        name: "Composite",
        className: "AzureCapacity",
        modelProperties: {
            scaleType: {
                serializedName: "scaleType",
                required: true,
                type: {
                    name: "String"
                }
            },
            minimum: {
                serializedName: "minimum",
                required: true,
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                required: true,
                type: {
                    name: "Number"
                }
            },
            default: {
                serializedName: "default",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DatabaseListResult = {
    type: {
        name: "Composite",
        className: "DatabaseListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Database"
                        }
                    }
                }
            }
        }
    }
};
const DatabaseInviteFollowerRequest = {
    type: {
        name: "Composite",
        className: "DatabaseInviteFollowerRequest",
        modelProperties: {
            inviteeEmail: {
                serializedName: "inviteeEmail",
                required: true,
                type: {
                    name: "String"
                }
            },
            tableLevelSharingProperties: {
                serializedName: "tableLevelSharingProperties",
                type: {
                    name: "Composite",
                    className: "TableLevelSharingProperties"
                }
            }
        }
    }
};
const DatabaseInviteFollowerResult = {
    type: {
        name: "Composite",
        className: "DatabaseInviteFollowerResult",
        modelProperties: {
            generatedInvitation: {
                serializedName: "generatedInvitation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasePrincipalAssignmentCheckNameRequest = {
    type: {
        name: "Composite",
        className: "DatabasePrincipalAssignmentCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters/databases/principalAssignments",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasePrincipalAssignmentListResult = {
    type: {
        name: "Composite",
        className: "DatabasePrincipalAssignmentListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabasePrincipalAssignment"
                        }
                    }
                }
            }
        }
    }
};
const DatabasePrincipalListResult = {
    type: {
        name: "Composite",
        className: "DatabasePrincipalListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabasePrincipal"
                        }
                    }
                }
            }
        }
    }
};
const DatabasePrincipal = {
    type: {
        name: "Composite",
        className: "DatabasePrincipal",
        modelProperties: {
            role: {
                serializedName: "role",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            fqn: {
                serializedName: "fqn",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            appId: {
                serializedName: "appId",
                type: {
                    name: "String"
                }
            },
            tenantName: {
                serializedName: "tenantName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasePrincipalListRequest = {
    type: {
        name: "Composite",
        className: "DatabasePrincipalListRequest",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabasePrincipal"
                        }
                    }
                }
            }
        }
    }
};
const ScriptListResult = {
    type: {
        name: "Composite",
        className: "ScriptListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Script"
                        }
                    }
                }
            }
        }
    }
};
const SandboxCustomImagesListResult = {
    type: {
        name: "Composite",
        className: "SandboxCustomImagesListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SandboxCustomImage"
                        }
                    }
                }
            }
        }
    }
};
const SandboxCustomImagesCheckNameRequest = {
    type: {
        name: "Composite",
        className: "SandboxCustomImagesCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters/sandboxCustomImages",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedPrivateEndpointListResult = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedPrivateEndpoint"
                        }
                    }
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
const OutboundNetworkDependenciesEndpointListResult = {
    type: {
        name: "Composite",
        className: "OutboundNetworkDependenciesEndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OutboundNetworkDependenciesEndpoint"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EndpointDependency = {
    type: {
        name: "Composite",
        className: "EndpointDependency",
        modelProperties: {
            domainName: {
                serializedName: "domainName",
                type: {
                    name: "String"
                }
            },
            endpointDetails: {
                serializedName: "endpointDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EndpointDetail"
                        }
                    }
                }
            }
        }
    }
};
const EndpointDetail = {
    type: {
        name: "Composite",
        className: "EndpointDetail",
        modelProperties: {
            port: {
                serializedName: "port",
                type: {
                    name: "Number"
                }
            },
            ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AttachedDatabaseConfigurationListResult = {
    type: {
        name: "Composite",
        className: "AttachedDatabaseConfigurationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AttachedDatabaseConfiguration"
                        }
                    }
                }
            }
        }
    }
};
const DataConnectionListResult = {
    type: {
        name: "Composite",
        className: "DataConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataConnection"
                        }
                    }
                }
            }
        }
    }
};
const DataConnectionValidation = {
    type: {
        name: "Composite",
        className: "DataConnectionValidation",
        modelProperties: {
            dataConnectionName: {
                serializedName: "dataConnectionName",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DataConnection"
                }
            }
        }
    }
};
const DataConnectionValidationListResult = {
    type: {
        name: "Composite",
        className: "DataConnectionValidationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataConnectionValidationResult"
                        }
                    }
                }
            }
        }
    }
};
const DataConnectionValidationResult = {
    type: {
        name: "Composite",
        className: "DataConnectionValidationResult",
        modelProperties: {
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataConnectionCheckNameRequest = {
    type: {
        name: "Composite",
        className: "DataConnectionCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters/databases/dataConnections",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScriptCheckNameRequest = {
    type: {
        name: "Composite",
        className: "ScriptCheckNameRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.Kusto/clusters/databases/scripts",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResult = {
    type: {
        name: "Composite",
        className: "OperationResult",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            percentComplete: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "percentComplete",
                type: {
                    name: "Number"
                }
            },
            code: {
                serializedName: "error.code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "error.message",
                type: {
                    name: "String"
                }
            },
            operationKind: {
                serializedName: "properties.operationKind",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operationState: {
                serializedName: "properties.operationState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabaseStatistics = {
    type: {
        name: "Composite",
        className: "DatabaseStatistics",
        modelProperties: {
            size: {
                serializedName: "size",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SuspensionDetails = {
    type: {
        name: "Composite",
        className: "SuspensionDetails",
        modelProperties: {
            suspensionStartDate: {
                serializedName: "suspensionStartDate",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ClusterUpdate = {
    type: {
        name: "Composite",
        className: "ClusterUpdate",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "AzureSku"
                }
            }, zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, uri: {
                serializedName: "properties.uri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dataIngestionUri: {
                serializedName: "properties.dataIngestionUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, stateReason: {
                serializedName: "properties.stateReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, trustedExternalTenants: {
                serializedName: "properties.trustedExternalTenants",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrustedExternalTenant"
                        }
                    }
                }
            }, optimizedAutoscale: {
                serializedName: "properties.optimizedAutoscale",
                type: {
                    name: "Composite",
                    className: "OptimizedAutoscale"
                }
            }, enableDiskEncryption: {
                defaultValue: false,
                serializedName: "properties.enableDiskEncryption",
                type: {
                    name: "Boolean"
                }
            }, enableStreamingIngest: {
                defaultValue: false,
                serializedName: "properties.enableStreamingIngest",
                type: {
                    name: "Boolean"
                }
            }, virtualNetworkConfiguration: {
                serializedName: "properties.virtualNetworkConfiguration",
                type: {
                    name: "Composite",
                    className: "VirtualNetworkConfiguration"
                }
            }, keyVaultProperties: {
                serializedName: "properties.keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            }, enablePurge: {
                defaultValue: false,
                serializedName: "properties.enablePurge",
                type: {
                    name: "Boolean"
                }
            }, languageExtensions: {
                serializedName: "properties.languageExtensions",
                type: {
                    name: "Composite",
                    className: "LanguageExtensionsList"
                }
            }, enableDoubleEncryption: {
                defaultValue: false,
                serializedName: "properties.enableDoubleEncryption",
                type: {
                    name: "Boolean"
                }
            }, publicNetworkAccess: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }, allowedIpRangeList: {
                serializedName: "properties.allowedIpRangeList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, engineType: {
                defaultValue: "V3",
                serializedName: "properties.engineType",
                type: {
                    name: "String"
                }
            }, acceptedAudiences: {
                serializedName: "properties.acceptedAudiences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AcceptedAudiences"
                        }
                    }
                }
            }, enableAutoStop: {
                defaultValue: true,
                serializedName: "properties.enableAutoStop",
                type: {
                    name: "Boolean"
                }
            }, restrictOutboundNetworkAccess: {
                defaultValue: "Disabled",
                serializedName: "properties.restrictOutboundNetworkAccess",
                type: {
                    name: "String"
                }
            }, allowedFqdnList: {
                serializedName: "properties.allowedFqdnList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, publicIPType: {
                defaultValue: "IPv4",
                serializedName: "properties.publicIPType",
                type: {
                    name: "String"
                }
            }, virtualClusterGraduationProperties: {
                serializedName: "properties.virtualClusterGraduationProperties",
                type: {
                    name: "String"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, migrationCluster: {
                serializedName: "properties.migrationCluster",
                type: {
                    name: "Composite",
                    className: "MigrationClusterProperties"
                }
            } })
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, requiredMembers: {
                serializedName: "properties.requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpointProperty"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionStateProperty"
                }
            }, groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ClusterPrincipalAssignment = {
    type: {
        name: "Composite",
        className: "ClusterPrincipalAssignment",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { principalId: {
                serializedName: "properties.principalId",
                type: {
                    name: "String"
                }
            }, role: {
                serializedName: "properties.role",
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, principalType: {
                serializedName: "properties.principalType",
                type: {
                    name: "String"
                }
            }, tenantName: {
                serializedName: "properties.tenantName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, principalName: {
                serializedName: "properties.principalName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, aadObjectId: {
                serializedName: "properties.aadObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Database = {
    serializedName: "Database",
    type: {
        name: "Composite",
        className: "Database",
        uberParent: "ProxyResource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DatabasePrincipalAssignment = {
    type: {
        name: "Composite",
        className: "DatabasePrincipalAssignment",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { principalId: {
                serializedName: "properties.principalId",
                type: {
                    name: "String"
                }
            }, role: {
                serializedName: "properties.role",
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }, principalType: {
                serializedName: "properties.principalType",
                type: {
                    name: "String"
                }
            }, tenantName: {
                serializedName: "properties.tenantName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, principalName: {
                serializedName: "properties.principalName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, aadObjectId: {
                serializedName: "properties.aadObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Script = {
    type: {
        name: "Composite",
        className: "Script",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, scriptUrl: {
                serializedName: "properties.scriptUrl",
                type: {
                    name: "String"
                }
            }, scriptUrlSasToken: {
                serializedName: "properties.scriptUrlSasToken",
                type: {
                    name: "String"
                }
            }, scriptContent: {
                serializedName: "properties.scriptContent",
                type: {
                    name: "String"
                }
            }, forceUpdateTag: {
                serializedName: "properties.forceUpdateTag",
                type: {
                    name: "String"
                }
            }, continueOnErrors: {
                defaultValue: false,
                serializedName: "properties.continueOnErrors",
                type: {
                    name: "Boolean"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SandboxCustomImage = {
    type: {
        name: "Composite",
        className: "SandboxCustomImage",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { language: {
                serializedName: "properties.language",
                type: {
                    name: "String"
                }
            }, languageVersion: {
                serializedName: "properties.languageVersion",
                type: {
                    name: "String"
                }
            }, requirementsFileContent: {
                serializedName: "properties.requirementsFileContent",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ManagedPrivateEndpoint = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpoint",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, privateLinkResourceId: {
                serializedName: "properties.privateLinkResourceId",
                type: {
                    name: "String"
                }
            }, privateLinkResourceRegion: {
                serializedName: "properties.privateLinkResourceRegion",
                type: {
                    name: "String"
                }
            }, groupId: {
                serializedName: "properties.groupId",
                type: {
                    name: "String"
                }
            }, requestMessage: {
                serializedName: "properties.requestMessage",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const OutboundNetworkDependenciesEndpoint = {
    type: {
        name: "Composite",
        className: "OutboundNetworkDependenciesEndpoint",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, category: {
                serializedName: "properties.category",
                type: {
                    name: "String"
                }
            }, endpoints: {
                serializedName: "properties.endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EndpointDependency"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AttachedDatabaseConfiguration = {
    type: {
        name: "Composite",
        className: "AttachedDatabaseConfiguration",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, databaseName: {
                serializedName: "properties.databaseName",
                type: {
                    name: "String"
                }
            }, clusterResourceId: {
                serializedName: "properties.clusterResourceId",
                type: {
                    name: "String"
                }
            }, attachedDatabaseNames: {
                serializedName: "properties.attachedDatabaseNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, defaultPrincipalsModificationKind: {
                serializedName: "properties.defaultPrincipalsModificationKind",
                type: {
                    name: "String"
                }
            }, tableLevelSharingProperties: {
                serializedName: "properties.tableLevelSharingProperties",
                type: {
                    name: "Composite",
                    className: "TableLevelSharingProperties"
                }
            }, databaseNameOverride: {
                serializedName: "properties.databaseNameOverride",
                type: {
                    name: "String"
                }
            }, databaseNamePrefix: {
                serializedName: "properties.databaseNamePrefix",
                type: {
                    name: "String"
                }
            } })
    }
};
const DataConnection = {
    serializedName: "DataConnection",
    type: {
        name: "Composite",
        className: "DataConnection",
        uberParent: "ProxyResource",
        polymorphicDiscriminator: {
            serializedName: "kind",
            clientName: "kind"
        },
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Cluster = {
    type: {
        name: "Composite",
        className: "Cluster",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "AzureSku"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, uri: {
                serializedName: "properties.uri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dataIngestionUri: {
                serializedName: "properties.dataIngestionUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, stateReason: {
                serializedName: "properties.stateReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, trustedExternalTenants: {
                serializedName: "properties.trustedExternalTenants",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrustedExternalTenant"
                        }
                    }
                }
            }, optimizedAutoscale: {
                serializedName: "properties.optimizedAutoscale",
                type: {
                    name: "Composite",
                    className: "OptimizedAutoscale"
                }
            }, enableDiskEncryption: {
                defaultValue: false,
                serializedName: "properties.enableDiskEncryption",
                type: {
                    name: "Boolean"
                }
            }, enableStreamingIngest: {
                defaultValue: false,
                serializedName: "properties.enableStreamingIngest",
                type: {
                    name: "Boolean"
                }
            }, virtualNetworkConfiguration: {
                serializedName: "properties.virtualNetworkConfiguration",
                type: {
                    name: "Composite",
                    className: "VirtualNetworkConfiguration"
                }
            }, keyVaultProperties: {
                serializedName: "properties.keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            }, enablePurge: {
                defaultValue: false,
                serializedName: "properties.enablePurge",
                type: {
                    name: "Boolean"
                }
            }, languageExtensions: {
                serializedName: "properties.languageExtensions",
                type: {
                    name: "Composite",
                    className: "LanguageExtensionsList"
                }
            }, enableDoubleEncryption: {
                defaultValue: false,
                serializedName: "properties.enableDoubleEncryption",
                type: {
                    name: "Boolean"
                }
            }, publicNetworkAccess: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }, allowedIpRangeList: {
                serializedName: "properties.allowedIpRangeList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, engineType: {
                defaultValue: "V3",
                serializedName: "properties.engineType",
                type: {
                    name: "String"
                }
            }, acceptedAudiences: {
                serializedName: "properties.acceptedAudiences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AcceptedAudiences"
                        }
                    }
                }
            }, enableAutoStop: {
                defaultValue: true,
                serializedName: "properties.enableAutoStop",
                type: {
                    name: "Boolean"
                }
            }, restrictOutboundNetworkAccess: {
                defaultValue: "Disabled",
                serializedName: "properties.restrictOutboundNetworkAccess",
                type: {
                    name: "String"
                }
            }, allowedFqdnList: {
                serializedName: "properties.allowedFqdnList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, publicIPType: {
                defaultValue: "IPv4",
                serializedName: "properties.publicIPType",
                type: {
                    name: "String"
                }
            }, virtualClusterGraduationProperties: {
                serializedName: "properties.virtualClusterGraduationProperties",
                type: {
                    name: "String"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, migrationCluster: {
                serializedName: "properties.migrationCluster",
                type: {
                    name: "Composite",
                    className: "MigrationClusterProperties"
                }
            } })
    }
};
const ReadWriteDatabase = {
    serializedName: "ReadWrite",
    type: {
        name: "Composite",
        className: "ReadWriteDatabase",
        uberParent: "Database",
        polymorphicDiscriminator: Database.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Database.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, softDeletePeriod: {
                serializedName: "properties.softDeletePeriod",
                type: {
                    name: "TimeSpan"
                }
            }, hotCachePeriod: {
                serializedName: "properties.hotCachePeriod",
                type: {
                    name: "TimeSpan"
                }
            }, statistics: {
                serializedName: "properties.statistics",
                type: {
                    name: "Composite",
                    className: "DatabaseStatistics"
                }
            }, isFollowed: {
                serializedName: "properties.isFollowed",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, keyVaultProperties: {
                serializedName: "properties.keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            }, suspensionDetails: {
                serializedName: "properties.suspensionDetails",
                type: {
                    name: "Composite",
                    className: "SuspensionDetails"
                }
            } })
    }
};
const ReadOnlyFollowingDatabase = {
    serializedName: "ReadOnlyFollowing",
    type: {
        name: "Composite",
        className: "ReadOnlyFollowingDatabase",
        uberParent: "Database",
        polymorphicDiscriminator: Database.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, Database.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, softDeletePeriod: {
                serializedName: "properties.softDeletePeriod",
                readOnly: true,
                type: {
                    name: "TimeSpan"
                }
            }, hotCachePeriod: {
                serializedName: "properties.hotCachePeriod",
                type: {
                    name: "TimeSpan"
                }
            }, statistics: {
                serializedName: "properties.statistics",
                type: {
                    name: "Composite",
                    className: "DatabaseStatistics"
                }
            }, leaderClusterResourceId: {
                serializedName: "properties.leaderClusterResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, attachedDatabaseConfigurationName: {
                serializedName: "properties.attachedDatabaseConfigurationName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, principalsModificationKind: {
                serializedName: "properties.principalsModificationKind",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tableLevelSharingProperties: {
                serializedName: "properties.tableLevelSharingProperties",
                type: {
                    name: "Composite",
                    className: "TableLevelSharingProperties"
                }
            }, originalDatabaseName: {
                serializedName: "properties.originalDatabaseName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, databaseShareOrigin: {
                serializedName: "properties.databaseShareOrigin",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, suspensionDetails: {
                serializedName: "properties.suspensionDetails",
                type: {
                    name: "Composite",
                    className: "SuspensionDetails"
                }
            } })
    }
};
const EventHubDataConnection = {
    serializedName: "EventHub",
    type: {
        name: "Composite",
        className: "EventHubDataConnection",
        uberParent: "DataConnection",
        polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnection.type.modelProperties), { eventHubResourceId: {
                serializedName: "properties.eventHubResourceId",
                type: {
                    name: "String"
                }
            }, consumerGroup: {
                serializedName: "properties.consumerGroup",
                type: {
                    name: "String"
                }
            }, tableName: {
                serializedName: "properties.tableName",
                type: {
                    name: "String"
                }
            }, mappingRuleName: {
                serializedName: "properties.mappingRuleName",
                type: {
                    name: "String"
                }
            }, dataFormat: {
                serializedName: "properties.dataFormat",
                type: {
                    name: "String"
                }
            }, eventSystemProperties: {
                serializedName: "properties.eventSystemProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, compression: {
                defaultValue: "None",
                serializedName: "properties.compression",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, managedIdentityResourceId: {
                serializedName: "properties.managedIdentityResourceId",
                type: {
                    name: "String"
                }
            }, managedIdentityObjectId: {
                serializedName: "properties.managedIdentityObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, databaseRouting: {
                serializedName: "properties.databaseRouting",
                type: {
                    name: "String"
                }
            }, retrievalStartDate: {
                serializedName: "properties.retrievalStartDate",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const IotHubDataConnection = {
    serializedName: "IotHub",
    type: {
        name: "Composite",
        className: "IotHubDataConnection",
        uberParent: "DataConnection",
        polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnection.type.modelProperties), { iotHubResourceId: {
                serializedName: "properties.iotHubResourceId",
                type: {
                    name: "String"
                }
            }, consumerGroup: {
                serializedName: "properties.consumerGroup",
                type: {
                    name: "String"
                }
            }, tableName: {
                serializedName: "properties.tableName",
                type: {
                    name: "String"
                }
            }, mappingRuleName: {
                serializedName: "properties.mappingRuleName",
                type: {
                    name: "String"
                }
            }, dataFormat: {
                serializedName: "properties.dataFormat",
                type: {
                    name: "String"
                }
            }, eventSystemProperties: {
                serializedName: "properties.eventSystemProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, sharedAccessPolicyName: {
                serializedName: "properties.sharedAccessPolicyName",
                type: {
                    name: "String"
                }
            }, databaseRouting: {
                serializedName: "properties.databaseRouting",
                type: {
                    name: "String"
                }
            }, retrievalStartDate: {
                serializedName: "properties.retrievalStartDate",
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EventGridDataConnection = {
    serializedName: "EventGrid",
    type: {
        name: "Composite",
        className: "EventGridDataConnection",
        uberParent: "DataConnection",
        polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnection.type.modelProperties), { storageAccountResourceId: {
                serializedName: "properties.storageAccountResourceId",
                type: {
                    name: "String"
                }
            }, eventGridResourceId: {
                serializedName: "properties.eventGridResourceId",
                type: {
                    name: "String"
                }
            }, eventHubResourceId: {
                serializedName: "properties.eventHubResourceId",
                type: {
                    name: "String"
                }
            }, consumerGroup: {
                serializedName: "properties.consumerGroup",
                type: {
                    name: "String"
                }
            }, tableName: {
                serializedName: "properties.tableName",
                type: {
                    name: "String"
                }
            }, mappingRuleName: {
                serializedName: "properties.mappingRuleName",
                type: {
                    name: "String"
                }
            }, dataFormat: {
                serializedName: "properties.dataFormat",
                type: {
                    name: "String"
                }
            }, ignoreFirstRecord: {
                serializedName: "properties.ignoreFirstRecord",
                type: {
                    name: "Boolean"
                }
            }, blobStorageEventType: {
                serializedName: "properties.blobStorageEventType",
                type: {
                    name: "String"
                }
            }, managedIdentityResourceId: {
                serializedName: "properties.managedIdentityResourceId",
                type: {
                    name: "String"
                }
            }, managedIdentityObjectId: {
                serializedName: "properties.managedIdentityObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, databaseRouting: {
                serializedName: "properties.databaseRouting",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CosmosDbDataConnection = {
    serializedName: "CosmosDb",
    type: {
        name: "Composite",
        className: "CosmosDbDataConnection",
        uberParent: "DataConnection",
        polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DataConnection.type.modelProperties), { tableName: {
                serializedName: "properties.tableName",
                type: {
                    name: "String"
                }
            }, mappingRuleName: {
                serializedName: "properties.mappingRuleName",
                type: {
                    name: "String"
                }
            }, managedIdentityResourceId: {
                serializedName: "properties.managedIdentityResourceId",
                type: {
                    name: "String"
                }
            }, managedIdentityObjectId: {
                serializedName: "properties.managedIdentityObjectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, cosmosDbAccountResourceId: {
                serializedName: "properties.cosmosDbAccountResourceId",
                type: {
                    name: "String"
                }
            }, cosmosDbDatabase: {
                serializedName: "properties.cosmosDbDatabase",
                type: {
                    name: "String"
                }
            }, cosmosDbContainer: {
                serializedName: "properties.cosmosDbContainer",
                type: {
                    name: "String"
                }
            }, retrievalStartDate: {
                serializedName: "properties.retrievalStartDate",
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ClustersUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ClustersUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ClustersDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersStopHeaders = {
    type: {
        name: "Composite",
        className: "ClustersStopHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersStartHeaders = {
    type: {
        name: "Composite",
        className: "ClustersStartHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersMigrateHeaders = {
    type: {
        name: "Composite",
        className: "ClustersMigrateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersDetachFollowerDatabasesHeaders = {
    type: {
        name: "Composite",
        className: "ClustersDetachFollowerDatabasesHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersDiagnoseVirtualNetworkHeaders = {
    type: {
        name: "Composite",
        className: "ClustersDiagnoseVirtualNetworkHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersAddLanguageExtensionsHeaders = {
    type: {
        name: "Composite",
        className: "ClustersAddLanguageExtensionsHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClustersRemoveLanguageExtensionsHeaders = {
    type: {
        name: "Composite",
        className: "ClustersRemoveLanguageExtensionsHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterPrincipalAssignmentsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ClusterPrincipalAssignmentsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "DatabasesCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasesUpdateHeaders = {
    type: {
        name: "Composite",
        className: "DatabasesUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "DatabasesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AttachedDatabaseConfigurationsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "AttachedDatabaseConfigurationsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AttachedDatabaseConfigurationsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "AttachedDatabaseConfigurationsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedPrivateEndpointsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedPrivateEndpointsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointsUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ManagedPrivateEndpointsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ManagedPrivateEndpointsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasePrincipalAssignmentsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "DatabasePrincipalAssignmentsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScriptsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ScriptsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScriptsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ScriptsUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScriptsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ScriptsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SandboxCustomImagesUpdateHeaders = {
    type: {
        name: "Composite",
        className: "SandboxCustomImagesUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SandboxCustomImagesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "SandboxCustomImagesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataConnectionsDataConnectionValidationHeaders = {
    type: {
        name: "Composite",
        className: "DataConnectionsDataConnectionValidationHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataConnectionsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "DataConnectionsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataConnectionsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "DataConnectionsUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataConnectionsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "DataConnectionsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationsResultsLocationGetHeaders = {
    type: {
        name: "Composite",
        className: "OperationsResultsLocationGetHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    "ProxyResource.Database": Database,
    "ProxyResource.DataConnection": DataConnection,
    "Database.ReadWrite": ReadWriteDatabase,
    "Database.ReadOnlyFollowing": ReadOnlyFollowingDatabase,
    "DataConnection.EventHub": EventHubDataConnection,
    "DataConnection.IotHub": IotHubDataConnection,
    "DataConnection.EventGrid": EventGridDataConnection,
    "DataConnection.CosmosDb": CosmosDbDataConnection
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AcceptedAudiences: AcceptedAudiences,
    AttachedDatabaseConfiguration: AttachedDatabaseConfiguration,
    AttachedDatabaseConfigurationListResult: AttachedDatabaseConfigurationListResult,
    AttachedDatabaseConfigurationsCheckNameRequest: AttachedDatabaseConfigurationsCheckNameRequest,
    AttachedDatabaseConfigurationsCreateOrUpdateHeaders: AttachedDatabaseConfigurationsCreateOrUpdateHeaders,
    AttachedDatabaseConfigurationsDeleteHeaders: AttachedDatabaseConfigurationsDeleteHeaders,
    AzureCapacity: AzureCapacity,
    AzureResourceSku: AzureResourceSku,
    AzureSku: AzureSku,
    CheckNameRequest: CheckNameRequest,
    CheckNameResult: CheckNameResult,
    Cluster: Cluster,
    ClusterCheckNameRequest: ClusterCheckNameRequest,
    ClusterListResult: ClusterListResult,
    ClusterMigrateRequest: ClusterMigrateRequest,
    ClusterPrincipalAssignment: ClusterPrincipalAssignment,
    ClusterPrincipalAssignmentCheckNameRequest: ClusterPrincipalAssignmentCheckNameRequest,
    ClusterPrincipalAssignmentListResult: ClusterPrincipalAssignmentListResult,
    ClusterPrincipalAssignmentsDeleteHeaders: ClusterPrincipalAssignmentsDeleteHeaders,
    ClusterUpdate: ClusterUpdate,
    ClustersAddLanguageExtensionsHeaders: ClustersAddLanguageExtensionsHeaders,
    ClustersDeleteHeaders: ClustersDeleteHeaders,
    ClustersDetachFollowerDatabasesHeaders: ClustersDetachFollowerDatabasesHeaders,
    ClustersDiagnoseVirtualNetworkHeaders: ClustersDiagnoseVirtualNetworkHeaders,
    ClustersMigrateHeaders: ClustersMigrateHeaders,
    ClustersRemoveLanguageExtensionsHeaders: ClustersRemoveLanguageExtensionsHeaders,
    ClustersStartHeaders: ClustersStartHeaders,
    ClustersStopHeaders: ClustersStopHeaders,
    ClustersUpdateHeaders: ClustersUpdateHeaders,
    ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties: ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties,
    CosmosDbDataConnection: CosmosDbDataConnection,
    DataConnection: DataConnection,
    DataConnectionCheckNameRequest: DataConnectionCheckNameRequest,
    DataConnectionListResult: DataConnectionListResult,
    DataConnectionValidation: DataConnectionValidation,
    DataConnectionValidationListResult: DataConnectionValidationListResult,
    DataConnectionValidationResult: DataConnectionValidationResult,
    DataConnectionsCreateOrUpdateHeaders: DataConnectionsCreateOrUpdateHeaders,
    DataConnectionsDataConnectionValidationHeaders: DataConnectionsDataConnectionValidationHeaders,
    DataConnectionsDeleteHeaders: DataConnectionsDeleteHeaders,
    DataConnectionsUpdateHeaders: DataConnectionsUpdateHeaders,
    Database: Database,
    DatabaseInviteFollowerRequest: DatabaseInviteFollowerRequest,
    DatabaseInviteFollowerResult: DatabaseInviteFollowerResult,
    DatabaseListResult: DatabaseListResult,
    DatabasePrincipal: DatabasePrincipal,
    DatabasePrincipalAssignment: DatabasePrincipalAssignment,
    DatabasePrincipalAssignmentCheckNameRequest: DatabasePrincipalAssignmentCheckNameRequest,
    DatabasePrincipalAssignmentListResult: DatabasePrincipalAssignmentListResult,
    DatabasePrincipalAssignmentsDeleteHeaders: DatabasePrincipalAssignmentsDeleteHeaders,
    DatabasePrincipalListRequest: DatabasePrincipalListRequest,
    DatabasePrincipalListResult: DatabasePrincipalListResult,
    DatabaseStatistics: DatabaseStatistics,
    DatabasesCreateOrUpdateHeaders: DatabasesCreateOrUpdateHeaders,
    DatabasesDeleteHeaders: DatabasesDeleteHeaders,
    DatabasesUpdateHeaders: DatabasesUpdateHeaders,
    DiagnoseVirtualNetworkResult: DiagnoseVirtualNetworkResult,
    EndpointDependency: EndpointDependency,
    EndpointDetail: EndpointDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ErrorDetail: ErrorDetail,
    ErrorResponse: ErrorResponse,
    EventGridDataConnection: EventGridDataConnection,
    EventHubDataConnection: EventHubDataConnection,
    FollowerDatabaseDefinition: FollowerDatabaseDefinition,
    FollowerDatabaseListResult: FollowerDatabaseListResult,
    Identity: Identity,
    IotHubDataConnection: IotHubDataConnection,
    KeyVaultProperties: KeyVaultProperties,
    LanguageExtension: LanguageExtension,
    LanguageExtensionsList: LanguageExtensionsList,
    ListResourceSkusResult: ListResourceSkusResult,
    ManagedPrivateEndpoint: ManagedPrivateEndpoint,
    ManagedPrivateEndpointListResult: ManagedPrivateEndpointListResult,
    ManagedPrivateEndpointsCheckNameRequest: ManagedPrivateEndpointsCheckNameRequest,
    ManagedPrivateEndpointsCreateOrUpdateHeaders: ManagedPrivateEndpointsCreateOrUpdateHeaders,
    ManagedPrivateEndpointsDeleteHeaders: ManagedPrivateEndpointsDeleteHeaders,
    ManagedPrivateEndpointsUpdateHeaders: ManagedPrivateEndpointsUpdateHeaders,
    MigrationClusterProperties: MigrationClusterProperties,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    OperationListResult: OperationListResult,
    OperationResult: OperationResult,
    OperationsResultsLocationGetHeaders: OperationsResultsLocationGetHeaders,
    OptimizedAutoscale: OptimizedAutoscale,
    OutboundNetworkDependenciesEndpoint: OutboundNetworkDependenciesEndpoint,
    OutboundNetworkDependenciesEndpointListResult: OutboundNetworkDependenciesEndpointListResult,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    PrivateEndpointConnectionsDeleteHeaders: PrivateEndpointConnectionsDeleteHeaders,
    PrivateEndpointProperty: PrivateEndpointProperty,
    PrivateLinkResource: PrivateLinkResource,
    PrivateLinkResourceListResult: PrivateLinkResourceListResult,
    PrivateLinkServiceConnectionStateProperty: PrivateLinkServiceConnectionStateProperty,
    ProxyResource: ProxyResource,
    ReadOnlyFollowingDatabase: ReadOnlyFollowingDatabase,
    ReadWriteDatabase: ReadWriteDatabase,
    Resource: Resource,
    ResourceSkuCapabilities: ResourceSkuCapabilities,
    ResourceSkuZoneDetails: ResourceSkuZoneDetails,
    SandboxCustomImage: SandboxCustomImage,
    SandboxCustomImagesCheckNameRequest: SandboxCustomImagesCheckNameRequest,
    SandboxCustomImagesDeleteHeaders: SandboxCustomImagesDeleteHeaders,
    SandboxCustomImagesListResult: SandboxCustomImagesListResult,
    SandboxCustomImagesUpdateHeaders: SandboxCustomImagesUpdateHeaders,
    Script: Script,
    ScriptCheckNameRequest: ScriptCheckNameRequest,
    ScriptListResult: ScriptListResult,
    ScriptsCreateOrUpdateHeaders: ScriptsCreateOrUpdateHeaders,
    ScriptsDeleteHeaders: ScriptsDeleteHeaders,
    ScriptsUpdateHeaders: ScriptsUpdateHeaders,
    SkuDescription: SkuDescription,
    SkuDescriptionList: SkuDescriptionList,
    SkuLocationInfoItem: SkuLocationInfoItem,
    SuspensionDetails: SuspensionDetails,
    SystemData: SystemData,
    TableLevelSharingProperties: TableLevelSharingProperties,
    TrackedResource: TrackedResource,
    TrustedExternalTenant: TrustedExternalTenant,
    VirtualNetworkConfiguration: VirtualNetworkConfiguration,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-08-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Cluster
};
const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: ClusterUpdate
};
const clusterMigrateRequest = {
    parameterPath: "clusterMigrateRequest",
    mapper: ClusterMigrateRequest
};
const followerDatabaseToRemove = {
    parameterPath: "followerDatabaseToRemove",
    mapper: FollowerDatabaseDefinition
};
const clusterName1 = {
    parameterPath: "clusterName",
    mapper: ClusterCheckNameRequest
};
const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const languageExtensionsToAdd = {
    parameterPath: "languageExtensionsToAdd",
    mapper: LanguageExtensionsList
};
const languageExtensionsToRemove = {
    parameterPath: "languageExtensionsToRemove",
    mapper: LanguageExtensionsList
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const principalAssignmentName = {
    parameterPath: "principalAssignmentName",
    mapper: ClusterPrincipalAssignmentCheckNameRequest
};
const principalAssignmentName1 = {
    parameterPath: "principalAssignmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "principalAssignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: ClusterPrincipalAssignment
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: CheckNameRequest
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 5
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const databaseName = {
    parameterPath: "databaseName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "databaseName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: Database
};
const callerRole = {
    parameterPath: ["options", "callerRole"],
    mapper: {
        defaultValue: "Admin",
        serializedName: "callerRole",
        type: {
            name: "String"
        }
    }
};
const databasePrincipalsToAdd = {
    parameterPath: "databasePrincipalsToAdd",
    mapper: DatabasePrincipalListRequest
};
const databasePrincipalsToRemove = {
    parameterPath: "databasePrincipalsToRemove",
    mapper: DatabasePrincipalListRequest
};
const resourceName1 = {
    parameterPath: "resourceName",
    mapper: AttachedDatabaseConfigurationsCheckNameRequest
};
const attachedDatabaseConfigurationName = {
    parameterPath: "attachedDatabaseConfigurationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "attachedDatabaseConfigurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: AttachedDatabaseConfiguration
};
const resourceName2 = {
    parameterPath: "resourceName",
    mapper: ManagedPrivateEndpointsCheckNameRequest
};
const managedPrivateEndpointName = {
    parameterPath: "managedPrivateEndpointName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "managedPrivateEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: ManagedPrivateEndpoint
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: DatabaseInviteFollowerRequest
};
const principalAssignmentName2 = {
    parameterPath: "principalAssignmentName",
    mapper: DatabasePrincipalAssignmentCheckNameRequest
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: DatabasePrincipalAssignment
};
const scriptName = {
    parameterPath: "scriptName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "scriptName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: Script
};
const scriptName1 = {
    parameterPath: "scriptName",
    mapper: ScriptCheckNameRequest
};
const sandboxCustomImageName = {
    parameterPath: "sandboxCustomImageName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "sandboxCustomImageName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: SandboxCustomImage
};
const resourceName3 = {
    parameterPath: "resourceName",
    mapper: SandboxCustomImagesCheckNameRequest
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnection
};
const privateLinkResourceName = {
    parameterPath: "privateLinkResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "privateLinkResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters11 = {
    parameterPath: "parameters",
    mapper: DataConnectionValidation
};
const dataConnectionName = {
    parameterPath: "dataConnectionName",
    mapper: DataConnectionCheckNameRequest
};
const dataConnectionName1 = {
    parameterPath: "dataConnectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "dataConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters12 = {
    parameterPath: "parameters",
    mapper: DataConnection
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Clusters operations. */
class ClustersImpl {
    /**
     * Initialize a new instance of the class Clusters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns a list of databases that are owned by this cluster and were followed by another cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    listFollowerDatabases(resourceGroupName, clusterName, options) {
        const iter = this.listFollowerDatabasesPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listFollowerDatabasesPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listFollowerDatabasesPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listFollowerDatabasesPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listFollowerDatabases(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listFollowerDatabasesPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listFollowerDatabasesPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listFollowerDatabasesPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all Kusto clusters within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists all Kusto clusters within a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists eligible SKUs for Kusto resource provider.
     * @param options The options parameters.
     */
    listSkus(options) {
        const iter = this.listSkusPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSkusPagingPage(options, settings);
            }
        };
    }
    listSkusPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listSkusPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listSkus(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listSkusPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listSkusPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listSkusPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Returns the SKUs available for the provided resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    listSkusByResource(resourceGroupName, clusterName, options) {
        const iter = this.listSkusByResourcePagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSkusByResourcePagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listSkusByResourcePagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listSkusByResourcePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listSkusByResource(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listSkusByResourcePagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listSkusByResourcePagingAll_1() {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listSkusByResourcePagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Gets the network endpoints of all outbound dependencies of a Kusto cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    listOutboundNetworkDependenciesEndpoints(resourceGroupName, clusterName, options) {
        const iter = this.listOutboundNetworkDependenciesEndpointsPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listOutboundNetworkDependenciesEndpointsPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listOutboundNetworkDependenciesEndpointsPagingPage(resourceGroupName, clusterName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listOutboundNetworkDependenciesEndpointsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listOutboundNetworkDependenciesEndpoints(resourceGroupName, clusterName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listOutboundNetworkDependenciesEndpointsNext(resourceGroupName, clusterName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listOutboundNetworkDependenciesEndpointsPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listOutboundNetworkDependenciesEndpointsPagingAll_1() {
            var _a, e_6, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listOutboundNetworkDependenciesEndpointsPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Returns a list of language extensions that can run within KQL queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    listLanguageExtensions(resourceGroupName, clusterName, options) {
        const iter = this.listLanguageExtensionsPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listLanguageExtensionsPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listLanguageExtensionsPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listLanguageExtensionsPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listLanguageExtensions(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listLanguageExtensionsPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listLanguageExtensionsPagingAll_1() {
            var _a, e_7, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listLanguageExtensionsPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Gets a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, getOperationSpec$c);
    }
    /**
     * Create or update a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param parameters The Kusto cluster parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, parameters, options },
                spec: createOrUpdateOperationSpec$9
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param parameters The Kusto cluster parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param parameters The Kusto cluster parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, parameters, options },
                spec: updateOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param parameters The Kusto cluster parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, options },
                spec: deleteOperationSpec$9
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, options },
                spec: stopOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stops a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Starts a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, options },
                spec: startOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts a Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Migrate data from a Kusto cluster to another cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param clusterMigrateRequest The cluster migrate request parameters.
     * @param options The options parameters.
     */
    beginMigrate(resourceGroupName, clusterName, clusterMigrateRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, clusterMigrateRequest, options },
                spec: migrateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Migrate data from a Kusto cluster to another cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param clusterMigrateRequest The cluster migrate request parameters.
     * @param options The options parameters.
     */
    beginMigrateAndWait(resourceGroupName, clusterName, clusterMigrateRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMigrate(resourceGroupName, clusterName, clusterMigrateRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns a list of databases that are owned by this cluster and were followed by another cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _listFollowerDatabases(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listFollowerDatabasesOperationSpec);
    }
    /**
     * Detaches all followers of a database owned by this cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param followerDatabaseToRemove The follower databases properties to remove.
     * @param options The options parameters.
     */
    beginDetachFollowerDatabases(resourceGroupName, clusterName, followerDatabaseToRemove, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    followerDatabaseToRemove,
                    options
                },
                spec: detachFollowerDatabasesOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Detaches all followers of a database owned by this cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param followerDatabaseToRemove The follower databases properties to remove.
     * @param options The options parameters.
     */
    beginDetachFollowerDatabasesAndWait(resourceGroupName, clusterName, followerDatabaseToRemove, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDetachFollowerDatabases(resourceGroupName, clusterName, followerDatabaseToRemove, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Diagnoses network connectivity status for external resources on which the service is dependent on.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginDiagnoseVirtualNetwork(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, options },
                spec: diagnoseVirtualNetworkOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Diagnoses network connectivity status for external resources on which the service is dependent on.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    beginDiagnoseVirtualNetworkAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDiagnoseVirtualNetwork(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all Kusto clusters within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists all Kusto clusters within a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$7);
    }
    /**
     * Lists eligible SKUs for Kusto resource provider.
     * @param options The options parameters.
     */
    _listSkus(options) {
        return this.client.sendOperationRequest({ options }, listSkusOperationSpec);
    }
    /**
     * Checks that the cluster name is valid and is not already in use.
     * @param location The name of Azure region.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    checkNameAvailability(location, clusterName, options) {
        return this.client.sendOperationRequest({ location, clusterName, options }, checkNameAvailabilityOperationSpec$8);
    }
    /**
     * Returns the SKUs available for the provided resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _listSkusByResource(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listSkusByResourceOperationSpec);
    }
    /**
     * Gets the network endpoints of all outbound dependencies of a Kusto cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _listOutboundNetworkDependenciesEndpoints(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listOutboundNetworkDependenciesEndpointsOperationSpec);
    }
    /**
     * Returns a list of language extensions that can run within KQL queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _listLanguageExtensions(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listLanguageExtensionsOperationSpec);
    }
    /**
     * Add a list of language extensions that can run within KQL queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param languageExtensionsToAdd The language extensions to add.
     * @param options The options parameters.
     */
    beginAddLanguageExtensions(resourceGroupName, clusterName, languageExtensionsToAdd, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    languageExtensionsToAdd,
                    options
                },
                spec: addLanguageExtensionsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Add a list of language extensions that can run within KQL queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param languageExtensionsToAdd The language extensions to add.
     * @param options The options parameters.
     */
    beginAddLanguageExtensionsAndWait(resourceGroupName, clusterName, languageExtensionsToAdd, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginAddLanguageExtensions(resourceGroupName, clusterName, languageExtensionsToAdd, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Remove a list of language extensions that can run within KQL queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param languageExtensionsToRemove The language extensions to remove.
     * @param options The options parameters.
     */
    beginRemoveLanguageExtensions(resourceGroupName, clusterName, languageExtensionsToRemove, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    languageExtensionsToRemove,
                    options
                },
                spec: removeLanguageExtensionsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Remove a list of language extensions that can run within KQL queries.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param languageExtensionsToRemove The language extensions to remove.
     * @param options The options parameters.
     */
    beginRemoveLanguageExtensionsAndWait(resourceGroupName, clusterName, languageExtensionsToRemove, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRemoveLanguageExtensions(resourceGroupName, clusterName, languageExtensionsToRemove, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListOutboundNetworkDependenciesEndpointsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListOutboundNetworkDependenciesEndpoints method.
     * @param options The options parameters.
     */
    _listOutboundNetworkDependenciesEndpointsNext(resourceGroupName, clusterName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, nextLink, options }, listOutboundNetworkDependenciesEndpointsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const createOrUpdateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        201: {
            bodyMapper: Cluster
        },
        202: {
            bodyMapper: Cluster
        },
        204: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$f
};
const updateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        201: {
            bodyMapper: Cluster
        },
        202: {
            bodyMapper: Cluster
        },
        204: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$f
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const migrateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/migrate",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: clusterMigrateRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const listFollowerDatabasesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/listFollowerDatabases",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: FollowerDatabaseListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const detachFollowerDatabasesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/detachFollowerDatabases",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: followerDatabaseToRemove,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const diagnoseVirtualNetworkOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/diagnoseVirtualNetwork",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DiagnoseVirtualNetworkResult
        },
        201: {
            bodyMapper: DiagnoseVirtualNetworkResult
        },
        202: {
            bodyMapper: DiagnoseVirtualNetworkResult
        },
        204: {
            bodyMapper: DiagnoseVirtualNetworkResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$f
};
const listSkusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SkuDescriptionList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$f
};
const checkNameAvailabilityOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: clusterName1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const listSkusByResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ListResourceSkusResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listOutboundNetworkDependenciesEndpointsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/outboundNetworkDependenciesEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OutboundNetworkDependenciesEndpointListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listLanguageExtensionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/listLanguageExtensions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LanguageExtensionsList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const addLanguageExtensionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/addLanguageExtensions",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: languageExtensionsToAdd,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const removeLanguageExtensionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/removeLanguageExtensions",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: languageExtensionsToRemove,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const listOutboundNetworkDependenciesEndpointsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OutboundNetworkDependenciesEndpointListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ClusterPrincipalAssignments operations. */
class ClusterPrincipalAssignmentsImpl {
    /**
     * Initialize a new instance of the class ClusterPrincipalAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all Kusto cluster principalAssignments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Checks that the principal assignment name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param principalAssignmentName The name of the principal assignment.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, principalAssignmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, principalAssignmentName, options }, checkNameAvailabilityOperationSpec$7);
    }
    /**
     * Gets a Kusto cluster principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, principalAssignmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, principalAssignmentName, options }, getOperationSpec$b);
    }
    /**
     * Create a Kusto cluster principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param parameters The Kusto cluster principalAssignment's parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, principalAssignmentName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    principalAssignmentName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$8
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a Kusto cluster principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param parameters The Kusto cluster principalAssignment's parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, principalAssignmentName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, principalAssignmentName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Kusto cluster principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, principalAssignmentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    principalAssignmentName,
                    options
                },
                spec: deleteOperationSpec$8
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Kusto cluster principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, principalAssignmentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, principalAssignmentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all Kusto cluster principalAssignments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listOperationSpec$6);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/checkPrincipalAssignmentNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: principalAssignmentName,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterPrincipalAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        principalAssignmentName1
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOrUpdateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ClusterPrincipalAssignment
        },
        201: {
            bodyMapper: ClusterPrincipalAssignment
        },
        202: {
            bodyMapper: ClusterPrincipalAssignment
        },
        204: {
            bodyMapper: ClusterPrincipalAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        principalAssignmentName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        principalAssignmentName1
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterPrincipalAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Skus operations. */
class SkusImpl {
    /**
     * Initialize a new instance of the class Skus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists eligible region SKUs for Kusto resource provider by Azure region.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    list(location, options) {
        const iter = this.listPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(location, options, settings);
            }
        };
    }
    listPagingPage(location, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(location, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(location, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(location, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists eligible region SKUs for Kusto resource provider by Azure region.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    _list(location, options) {
        return this.client.sendOperationRequest({ location, options }, listOperationSpec$5);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SkuDescriptionList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Databases operations. */
class DatabasesImpl {
    /**
     * Initialize a new instance of the class Databases class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of databases of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    listByCluster(resourceGroupName, clusterName, options) {
        const iter = this.listByClusterPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByClusterPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listByClusterPagingPage(resourceGroupName, clusterName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByCluster(resourceGroupName, clusterName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByClusterNext(resourceGroupName, clusterName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByClusterPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByClusterPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns a list of database principals of the given Kusto cluster and database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    listPrincipals(resourceGroupName, clusterName, databaseName, options) {
        const iter = this.listPrincipalsPagingAll(resourceGroupName, clusterName, databaseName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPrincipalsPagingPage(resourceGroupName, clusterName, databaseName, options, settings);
            }
        };
    }
    listPrincipalsPagingPage(resourceGroupName, clusterName, databaseName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPrincipalsPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listPrincipals(resourceGroupName, clusterName, databaseName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPrincipalsPagingAll(resourceGroupName, clusterName, databaseName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPrincipalsPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPrincipalsPagingPage(resourceGroupName, clusterName, databaseName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Checks that the databases resource name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, resourceName, options }, checkNameAvailabilityOperationSpec$6);
    }
    /**
     * Returns the list of databases of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _listByCluster(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listByClusterOperationSpec$2);
    }
    /**
     * Returns a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, databaseName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, options }, getOperationSpec$a);
    }
    /**
     * Creates or updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$7
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param parameters The database parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    parameters,
                    options
                },
                spec: updateOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param parameters The database parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, databaseName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the database with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, databaseName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, databaseName, options },
                spec: deleteOperationSpec$7
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the database with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, databaseName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, databaseName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns a list of database principals of the given Kusto cluster and database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    _listPrincipals(resourceGroupName, clusterName, databaseName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, options }, listPrincipalsOperationSpec);
    }
    /**
     * Add Database principals permissions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param databasePrincipalsToAdd List of database principals to add.
     * @param options The options parameters.
     */
    addPrincipals(resourceGroupName, clusterName, databaseName, databasePrincipalsToAdd, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            databaseName,
            databasePrincipalsToAdd,
            options
        }, addPrincipalsOperationSpec);
    }
    /**
     * Remove Database principals permissions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param databasePrincipalsToRemove List of database principals to remove.
     * @param options The options parameters.
     */
    removePrincipals(resourceGroupName, clusterName, databaseName, databasePrincipalsToRemove, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            databaseName,
            databasePrincipalsToRemove,
            options
        }, removePrincipalsOperationSpec);
    }
    /**
     * ListByClusterNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param nextLink The nextLink from the previous successful call to the ListByCluster method.
     * @param options The options parameters.
     */
    _listByClusterNext(resourceGroupName, clusterName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, nextLink, options }, listByClusterNextOperationSpec);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resourceName,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const listByClusterOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatabaseListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        top,
        skiptoken
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Database
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const createOrUpdateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Database
        },
        201: {
            bodyMapper: Database
        },
        202: {
            bodyMapper: Database
        },
        204: {
            bodyMapper: Database
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion, callerRole],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Database
        },
        201: {
            bodyMapper: Database
        },
        202: {
            bodyMapper: Database
        },
        204: {
            bodyMapper: Database
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion, callerRole],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listPrincipalsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/listPrincipals",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatabasePrincipalListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const addPrincipalsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/addPrincipals",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatabasePrincipalListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: databasePrincipalsToAdd,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const removePrincipalsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/removePrincipals",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatabasePrincipalListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: databasePrincipalsToRemove,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const listByClusterNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatabaseListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AttachedDatabaseConfigurations operations. */
class AttachedDatabaseConfigurationsImpl {
    /**
     * Initialize a new instance of the class AttachedDatabaseConfigurations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of attached database configurations of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    listByCluster(resourceGroupName, clusterName, options) {
        const iter = this.listByClusterPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByClusterPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listByClusterPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByCluster(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByClusterPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByClusterPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Checks that the attached database configuration resource name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, resourceName, options }, checkNameAvailabilityOperationSpec$5);
    }
    /**
     * Returns the list of attached database configurations of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _listByCluster(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listByClusterOperationSpec$1);
    }
    /**
     * Returns an attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, attachedDatabaseConfigurationName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            attachedDatabaseConfigurationName,
            options
        }, getOperationSpec$9);
    }
    /**
     * Creates or updates an attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, attachedDatabaseConfigurationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    attachedDatabaseConfigurationName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$6
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates an attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, attachedDatabaseConfigurationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, attachedDatabaseConfigurationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the attached database configuration with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, attachedDatabaseConfigurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    attachedDatabaseConfigurationName,
                    options
                },
                spec: deleteOperationSpec$6
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the attached database configuration with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, attachedDatabaseConfigurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, attachedDatabaseConfigurationName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurationCheckNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resourceName1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const listByClusterOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttachedDatabaseConfigurationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AttachedDatabaseConfiguration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        attachedDatabaseConfigurationName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AttachedDatabaseConfiguration
        },
        201: {
            bodyMapper: AttachedDatabaseConfiguration
        },
        202: {
            bodyMapper: AttachedDatabaseConfiguration
        },
        204: {
            bodyMapper: AttachedDatabaseConfiguration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        attachedDatabaseConfigurationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        attachedDatabaseConfigurationName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedPrivateEndpoints operations. */
class ManagedPrivateEndpointsImpl {
    /**
     * Initialize a new instance of the class ManagedPrivateEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of managed private endpoints.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Checks that the managed private endpoints resource name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, resourceName, options }, checkNameAvailabilityOperationSpec$4);
    }
    /**
     * Returns the list of managed private endpoints.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listOperationSpec$4);
    }
    /**
     * Gets a managed private endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param managedPrivateEndpointName The name of the managed private endpoint.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, managedPrivateEndpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, managedPrivateEndpointName, options }, getOperationSpec$8);
    }
    /**
     * Creates a managed private endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param managedPrivateEndpointName The name of the managed private endpoint.
     * @param parameters The managed private endpoint parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    managedPrivateEndpointName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a managed private endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param managedPrivateEndpointName The name of the managed private endpoint.
     * @param parameters The managed private endpoint parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a managed private endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param managedPrivateEndpointName The name of the managed private endpoint.
     * @param parameters The managed private endpoint parameters.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    managedPrivateEndpointName,
                    parameters,
                    options
                },
                spec: updateOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a managed private endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param managedPrivateEndpointName The name of the managed private endpoint.
     * @param parameters The managed private endpoint parameters.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, managedPrivateEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a managed private endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param managedPrivateEndpointName The name of the managed private endpoint.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, managedPrivateEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    managedPrivateEndpointName,
                    options
                },
                spec: deleteOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a managed private endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param managedPrivateEndpointName The name of the managed private endpoint.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, managedPrivateEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, managedPrivateEndpointName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/managedPrivateEndpointsCheckNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resourceName2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/managedPrivateEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpointListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpoint
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        managedPrivateEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpoint
        },
        201: {
            bodyMapper: ManagedPrivateEndpoint
        },
        202: {
            bodyMapper: ManagedPrivateEndpoint
        },
        204: {
            bodyMapper: ManagedPrivateEndpoint
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        managedPrivateEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ManagedPrivateEndpoint
        },
        201: {
            bodyMapper: ManagedPrivateEndpoint
        },
        202: {
            bodyMapper: ManagedPrivateEndpoint
        },
        204: {
            bodyMapper: ManagedPrivateEndpoint
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        managedPrivateEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        managedPrivateEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing DatabaseOperations operations. */
class DatabaseOperationsImpl {
    /**
     * Initialize a new instance of the class DatabaseOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Generates an invitation token that allows attaching a follower database to this database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param parameters The follower invitation request parameters.
     * @param options The options parameters.
     */
    inviteFollower(resourceGroupName, clusterName, databaseName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, parameters, options }, inviteFollowerOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const inviteFollowerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/inviteFollower",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatabaseInviteFollowerResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DatabasePrincipalAssignments operations. */
class DatabasePrincipalAssignmentsImpl {
    /**
     * Initialize a new instance of the class DatabasePrincipalAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all Kusto cluster database principalAssignments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterName, databaseName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterName, databaseName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterName, databaseName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterName, databaseName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, clusterName, databaseName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, clusterName, databaseName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterName, databaseName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Checks that the database principal assignment is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param principalAssignmentName The name of the resource.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, databaseName, principalAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            databaseName,
            principalAssignmentName,
            options
        }, checkNameAvailabilityOperationSpec$3);
    }
    /**
     * Gets a Kusto cluster database principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, databaseName, principalAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            databaseName,
            principalAssignmentName,
            options
        }, getOperationSpec$7);
    }
    /**
     * Creates a Kusto cluster database principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param parameters The Kusto principalAssignments parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, principalAssignmentName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    principalAssignmentName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a Kusto cluster database principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param parameters The Kusto principalAssignments parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, databaseName, principalAssignmentName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, principalAssignmentName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, databaseName, principalAssignmentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    principalAssignmentName,
                    options
                },
                spec: deleteOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, databaseName, principalAssignmentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, databaseName, principalAssignmentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all Kusto cluster database principalAssignments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterName, databaseName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, options }, listOperationSpec$3);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/checkPrincipalAssignmentNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: principalAssignmentName2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments/{principalAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatabasePrincipalAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        principalAssignmentName1,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments/{principalAssignmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DatabasePrincipalAssignment
        },
        201: {
            bodyMapper: DatabasePrincipalAssignment
        },
        202: {
            bodyMapper: DatabasePrincipalAssignment
        },
        204: {
            bodyMapper: DatabasePrincipalAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        principalAssignmentName1,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments/{principalAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        principalAssignmentName1,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/principalAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatabasePrincipalAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Scripts operations. */
class ScriptsImpl {
    /**
     * Initialize a new instance of the class Scripts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of database scripts for given database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    listByDatabase(resourceGroupName, clusterName, databaseName, options) {
        const iter = this.listByDatabasePagingAll(resourceGroupName, clusterName, databaseName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByDatabasePagingPage(resourceGroupName, clusterName, databaseName, options, settings);
            }
        };
    }
    listByDatabasePagingPage(resourceGroupName, clusterName, databaseName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByDatabasePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByDatabase(resourceGroupName, clusterName, databaseName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByDatabasePagingAll(resourceGroupName, clusterName, databaseName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByDatabasePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByDatabasePagingPage(resourceGroupName, clusterName, databaseName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of database scripts for given database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    _listByDatabase(resourceGroupName, clusterName, databaseName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, options }, listByDatabaseOperationSpec$1);
    }
    /**
     * Gets a Kusto cluster database script.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the Kusto database script.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, databaseName, scriptName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, scriptName, options }, getOperationSpec$6);
    }
    /**
     * Creates a Kusto database script.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the Kusto database script.
     * @param parameters The Kusto Script parameters contains the KQL to run.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, scriptName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    scriptName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a Kusto database script.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the Kusto database script.
     * @param parameters The Kusto Script parameters contains the KQL to run.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, databaseName, scriptName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, scriptName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a database script.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the Kusto database script.
     * @param parameters The Kusto Script parameters contains to the KQL to run.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, databaseName, scriptName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    scriptName,
                    parameters,
                    options
                },
                spec: updateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a database script.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the Kusto database script.
     * @param parameters The Kusto Script parameters contains to the KQL to run.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, databaseName, scriptName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, databaseName, scriptName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Kusto database script.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the Kusto database script.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, databaseName, scriptName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    scriptName,
                    options
                },
                spec: deleteOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a Kusto database script.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the Kusto database script.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, databaseName, scriptName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, databaseName, scriptName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Checks that the script name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param scriptName The name of the script.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, databaseName, scriptName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, scriptName, options }, checkNameAvailabilityOperationSpec$2);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByDatabaseOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScriptListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Script
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        scriptName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Script
        },
        201: {
            bodyMapper: Script
        },
        202: {
            bodyMapper: Script
        },
        204: {
            bodyMapper: Script
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        scriptName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Script
        },
        201: {
            bodyMapper: Script
        },
        202: {
            bodyMapper: Script
        },
        204: {
            bodyMapper: Script
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        scriptName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        scriptName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const checkNameAvailabilityOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scriptsCheckNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: scriptName1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SandboxCustomImages operations. */
class SandboxCustomImagesImpl {
    /**
     * Initialize a new instance of the class SandboxCustomImages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of the existing sandbox custom images of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    listByCluster(resourceGroupName, clusterName, options) {
        const iter = this.listByClusterPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByClusterPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listByClusterPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByCluster(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByClusterPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByClusterPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of the existing sandbox custom images of the given Kusto cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _listByCluster(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listByClusterOperationSpec);
    }
    /**
     * Returns a sandbox custom image
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param sandboxCustomImageName The name of the sandbox custom image.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, sandboxCustomImageName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, sandboxCustomImageName, options }, getOperationSpec$5);
    }
    /**
     * Creates or updates a sandbox custom image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param sandboxCustomImageName The name of the sandbox custom image.
     * @param parameters The sandbox custom image parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, sandboxCustomImageName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    sandboxCustomImageName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a sandbox custom image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param sandboxCustomImageName The name of the sandbox custom image.
     * @param parameters The sandbox custom image parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, sandboxCustomImageName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, sandboxCustomImageName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a sandbox custom image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param sandboxCustomImageName The name of the sandbox custom image.
     * @param parameters The sandbox custom image parameters.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, sandboxCustomImageName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    sandboxCustomImageName,
                    parameters,
                    options
                },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a sandbox custom image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param sandboxCustomImageName The name of the sandbox custom image.
     * @param parameters The sandbox custom image parameters.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, sandboxCustomImageName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, sandboxCustomImageName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a sandbox custom image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param sandboxCustomImageName The name of the sandbox custom image.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, sandboxCustomImageName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, clusterName, sandboxCustomImageName, options },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a sandbox custom image.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param sandboxCustomImageName The name of the sandbox custom image.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, sandboxCustomImageName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, sandboxCustomImageName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Checks that the sandbox custom image resource name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param resourceName The name of the resource.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, resourceName, options }, checkNameAvailabilityOperationSpec$1);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByClusterOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/sandboxCustomImages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SandboxCustomImagesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/sandboxCustomImages/{sandboxCustomImageName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SandboxCustomImage
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        sandboxCustomImageName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/sandboxCustomImages/{sandboxCustomImageName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SandboxCustomImage
        },
        201: {
            bodyMapper: SandboxCustomImage
        },
        202: {
            bodyMapper: SandboxCustomImage
        },
        204: {
            bodyMapper: SandboxCustomImage
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        sandboxCustomImageName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/sandboxCustomImages/{sandboxCustomImageName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: SandboxCustomImage
        },
        201: {
            bodyMapper: SandboxCustomImage
        },
        202: {
            bodyMapper: SandboxCustomImage
        },
        204: {
            bodyMapper: SandboxCustomImage
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        sandboxCustomImageName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/sandboxCustomImages/{sandboxCustomImageName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        sandboxCustomImageName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const checkNameAvailabilityOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/sandboxCustomImagesCheckNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resourceName3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of private endpoint connections.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of private endpoint connections.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listOperationSpec$2);
    }
    /**
     * Gets a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$4);
    }
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, privateEndpointConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    privateEndpointConnectionName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, privateEndpointConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, privateEndpointConnectionName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    privateEndpointConnectionName,
                    options
                },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of private link resources.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of private link resources.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listOperationSpec$1);
    }
    /**
     * Gets a private link resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param privateLinkResourceName The name of the private link resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, privateLinkResourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, privateLinkResourceName, options }, getOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/privateLinkResources/{privateLinkResourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        privateLinkResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DataConnections operations. */
class DataConnectionsImpl {
    /**
     * Initialize a new instance of the class DataConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of data connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    listByDatabase(resourceGroupName, clusterName, databaseName, options) {
        const iter = this.listByDatabasePagingAll(resourceGroupName, clusterName, databaseName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByDatabasePagingPage(resourceGroupName, clusterName, databaseName, options, settings);
            }
        };
    }
    listByDatabasePagingPage(resourceGroupName, clusterName, databaseName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByDatabasePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByDatabase(resourceGroupName, clusterName, databaseName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByDatabasePagingAll(resourceGroupName, clusterName, databaseName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByDatabasePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByDatabasePagingPage(resourceGroupName, clusterName, databaseName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of data connections of the given Kusto database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param options The options parameters.
     */
    _listByDatabase(resourceGroupName, clusterName, databaseName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, databaseName, options }, listByDatabaseOperationSpec);
    }
    /**
     * Checks that the data connection parameters are valid.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginDataConnectionValidation(resourceGroupName, clusterName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    parameters,
                    options
                },
                spec: dataConnectionValidationOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Checks that the data connection parameters are valid.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginDataConnectionValidationAndWait(resourceGroupName, clusterName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDataConnectionValidation(resourceGroupName, clusterName, databaseName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Checks that the data connection name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, clusterName, databaseName, dataConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            databaseName,
            dataConnectionName,
            options
        }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Returns a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, databaseName, dataConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            databaseName,
            dataConnectionName,
            options
        }, getOperationSpec$2);
    }
    /**
     * Creates or updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    dataConnectionName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    dataConnectionName,
                    parameters,
                    options
                },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the data connection with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, databaseName, dataConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterName,
                    databaseName,
                    dataConnectionName,
                    options
                },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the data connection with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Kusto cluster.
     * @param databaseName The name of the database in the Kusto cluster.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, databaseName, dataConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, databaseName, dataConnectionName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByDatabaseOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const dataConnectionValidationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnectionValidation",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DataConnectionValidationListResult
        },
        201: {
            bodyMapper: DataConnectionValidationListResult
        },
        202: {
            bodyMapper: DataConnectionValidationListResult
        },
        204: {
            bodyMapper: DataConnectionValidationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: dataConnectionName,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        dataConnectionName1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DataConnection
        },
        201: {
            bodyMapper: DataConnection
        },
        202: {
            bodyMapper: DataConnection
        },
        204: {
            bodyMapper: DataConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters12,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        dataConnectionName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DataConnection
        },
        201: {
            bodyMapper: DataConnection
        },
        202: {
            bodyMapper: DataConnection
        },
        204: {
            bodyMapper: DataConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters12,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        dataConnectionName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        clusterName,
        subscriptionId,
        databaseName,
        dataConnectionName1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists available operations for the Microsoft.Kusto provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists available operations for the Microsoft.Kusto provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Kusto/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationsResults operations. */
class OperationsResultsImpl {
    /**
     * Initialize a new instance of the class OperationsResults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns operation results.
     * @param location The name of Azure region.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    get(location, operationId, options) {
        return this.client.sendOperationRequest({ location, operationId, options }, getOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationsResultsLocation operations. */
class OperationsResultsLocationImpl {
    /**
     * Initialize a new instance of the class OperationsResultsLocation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns operation results.
     * @param location The name of Azure region.
     * @param operationId The ID of an ongoing async operation.
     * @param options The options parameters.
     */
    get(location, operationId, options) {
        return this.client.sendOperationRequest({ location, operationId, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {},
        202: {
            headersMapper: OperationsResultsLocationGetHeaders
        },
        default: {}
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location,
        operationId
    ],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class KustoManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the KustoManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-kusto/8.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-08-15";
        this.clusters = new ClustersImpl(this);
        this.clusterPrincipalAssignments = new ClusterPrincipalAssignmentsImpl(this);
        this.skus = new SkusImpl(this);
        this.databases = new DatabasesImpl(this);
        this.attachedDatabaseConfigurations = new AttachedDatabaseConfigurationsImpl(this);
        this.managedPrivateEndpoints = new ManagedPrivateEndpointsImpl(this);
        this.databaseOperations = new DatabaseOperationsImpl(this);
        this.databasePrincipalAssignments = new DatabasePrincipalAssignmentsImpl(this);
        this.scripts = new ScriptsImpl(this);
        this.sandboxCustomImages = new SandboxCustomImagesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.dataConnections = new DataConnectionsImpl(this);
        this.operations = new OperationsImpl(this);
        this.operationsResults = new OperationsResultsImpl(this);
        this.operationsResultsLocation = new OperationsResultsLocationImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.KustoManagementClient = KustoManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
