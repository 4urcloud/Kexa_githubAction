/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { KustoManagementClient } from "@azure/arm-kusto";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates a data connection.
 *
 * @summary Updates a data connection.
 * x-ms-original-file: specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2023-08-15/examples/KustoDataConnectionsCosmosDbUpdate.json
 */
function kustoDataConnectionsCosmosDbUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["KUSTO_SUBSCRIPTION_ID"] ||
            "12345678-1234-1234-1234-123456789098";
        const resourceGroupName = process.env["KUSTO_RESOURCE_GROUP"] || "kustorptest";
        const clusterName = "kustoCluster";
        const databaseName = "KustoDatabase1";
        const dataConnectionName = "dataConnectionTest";
        const parameters = {
            cosmosDbAccountResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.DocumentDb/databaseAccounts/cosmosDbAccountTest1",
            cosmosDbContainer: "cosmosDbContainerTest",
            cosmosDbDatabase: "cosmosDbDatabaseTest",
            kind: "CosmosDb",
            location: "westus",
            managedIdentityResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1",
            mappingRuleName: "TestMapping",
            retrievalStartDate: new Date("2022-07-29T12:00:00.6554616Z"),
            tableName: "TestTable"
        };
        const credential = new DefaultAzureCredential();
        const client = new KustoManagementClient(credential, subscriptionId);
        const result = yield client.dataConnections.beginUpdateAndWait(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a data connection.
 *
 * @summary Updates a data connection.
 * x-ms-original-file: specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2023-08-15/examples/KustoDataConnectionsEventGridUpdate.json
 */
function kustoDataConnectionsEventGridUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["KUSTO_SUBSCRIPTION_ID"] ||
            "12345678-1234-1234-1234-123456789098";
        const resourceGroupName = process.env["KUSTO_RESOURCE_GROUP"] || "kustorptest";
        const clusterName = "kustoCluster";
        const databaseName = "KustoDatabase8";
        const dataConnectionName = "dataConnectionTest";
        const parameters = {
            blobStorageEventType: "Microsoft.Storage.BlobCreated",
            consumerGroup: "$Default",
            dataFormat: "JSON",
            databaseRouting: "Single",
            eventGridResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/teststorageaccount/providers/Microsoft.EventGrid/eventSubscriptions/eventSubscriptionTest",
            eventHubResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest2",
            ignoreFirstRecord: false,
            kind: "EventGrid",
            location: "westus",
            managedIdentityResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1",
            mappingRuleName: "TestMapping",
            storageAccountResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.Storage/storageAccounts/teststorageaccount",
            tableName: "TestTable"
        };
        const credential = new DefaultAzureCredential();
        const client = new KustoManagementClient(credential, subscriptionId);
        const result = yield client.dataConnections.beginUpdateAndWait(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a data connection.
 *
 * @summary Updates a data connection.
 * x-ms-original-file: specification/azure-kusto/resource-manager/Microsoft.Kusto/stable/2023-08-15/examples/KustoDataConnectionsUpdate.json
 */
function kustoDataConnectionsUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["KUSTO_SUBSCRIPTION_ID"] ||
            "12345678-1234-1234-1234-123456789098";
        const resourceGroupName = process.env["KUSTO_RESOURCE_GROUP"] || "kustorptest";
        const clusterName = "kustoCluster";
        const databaseName = "KustoDatabase8";
        const dataConnectionName = "dataConnectionTest";
        const parameters = {
            consumerGroup: "testConsumerGroup1",
            eventHubResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.EventHub/namespaces/eventhubTestns1/eventhubs/eventhubTest1",
            kind: "EventHub",
            location: "westus",
            managedIdentityResourceId: "/subscriptions/12345678-1234-1234-1234-123456789098/resourceGroups/kustorptest/providers/Microsoft.ManagedIdentity/userAssignedIdentities/managedidentityTest1"
        };
        const credential = new DefaultAzureCredential();
        const client = new KustoManagementClient(credential, subscriptionId);
        const result = yield client.dataConnections.beginUpdateAndWait(resourceGroupName, clusterName, databaseName, dataConnectionName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        kustoDataConnectionsCosmosDbUpdate();
        kustoDataConnectionsEventGridUpdate();
        kustoDataConnectionsUpdate();
    });
}
main().catch(console.error);
//# sourceMappingURL=dataConnectionsUpdateSample.js.map