import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Clusters, ClusterPrincipalAssignments, Skus, Databases, AttachedDatabaseConfigurations, ManagedPrivateEndpoints, DatabaseOperations, DatabasePrincipalAssignments, Scripts, SandboxCustomImages, PrivateEndpointConnections, PrivateLinkResources, DataConnections, Operations, OperationsResults, OperationsResultsLocation } from "./operationsInterfaces";
import { KustoManagementClientOptionalParams } from "./models";
export declare class KustoManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the KustoManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: KustoManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    clusters: Clusters;
    clusterPrincipalAssignments: ClusterPrincipalAssignments;
    skus: Skus;
    databases: Databases;
    attachedDatabaseConfigurations: AttachedDatabaseConfigurations;
    managedPrivateEndpoints: ManagedPrivateEndpoints;
    databaseOperations: DatabaseOperations;
    databasePrincipalAssignments: DatabasePrincipalAssignments;
    scripts: Scripts;
    sandboxCustomImages: SandboxCustomImages;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    dataConnections: DataConnections;
    operations: Operations;
    operationsResults: OperationsResults;
    operationsResultsLocation: OperationsResultsLocation;
}
//# sourceMappingURL=kustoManagementClient.d.ts.map