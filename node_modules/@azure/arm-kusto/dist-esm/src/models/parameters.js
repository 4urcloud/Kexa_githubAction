/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Cluster as ClusterMapper, ClusterUpdate as ClusterUpdateMapper, ClusterMigrateRequest as ClusterMigrateRequestMapper, FollowerDatabaseDefinition as FollowerDatabaseDefinitionMapper, ClusterCheckNameRequest as ClusterCheckNameRequestMapper, LanguageExtensionsList as LanguageExtensionsListMapper, ClusterPrincipalAssignmentCheckNameRequest as ClusterPrincipalAssignmentCheckNameRequestMapper, ClusterPrincipalAssignment as ClusterPrincipalAssignmentMapper, CheckNameRequest as CheckNameRequestMapper, Database as DatabaseMapper, DatabasePrincipalListRequest as DatabasePrincipalListRequestMapper, AttachedDatabaseConfigurationsCheckNameRequest as AttachedDatabaseConfigurationsCheckNameRequestMapper, AttachedDatabaseConfiguration as AttachedDatabaseConfigurationMapper, ManagedPrivateEndpointsCheckNameRequest as ManagedPrivateEndpointsCheckNameRequestMapper, ManagedPrivateEndpoint as ManagedPrivateEndpointMapper, DatabaseInviteFollowerRequest as DatabaseInviteFollowerRequestMapper, DatabasePrincipalAssignmentCheckNameRequest as DatabasePrincipalAssignmentCheckNameRequestMapper, DatabasePrincipalAssignment as DatabasePrincipalAssignmentMapper, Script as ScriptMapper, ScriptCheckNameRequest as ScriptCheckNameRequestMapper, SandboxCustomImage as SandboxCustomImageMapper, SandboxCustomImagesCheckNameRequest as SandboxCustomImagesCheckNameRequestMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, DataConnectionValidation as DataConnectionValidationMapper, DataConnectionCheckNameRequest as DataConnectionCheckNameRequestMapper, DataConnection as DataConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-08-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: ClusterMapper
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: ClusterUpdateMapper
};
export const clusterMigrateRequest = {
    parameterPath: "clusterMigrateRequest",
    mapper: ClusterMigrateRequestMapper
};
export const followerDatabaseToRemove = {
    parameterPath: "followerDatabaseToRemove",
    mapper: FollowerDatabaseDefinitionMapper
};
export const clusterName1 = {
    parameterPath: "clusterName",
    mapper: ClusterCheckNameRequestMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const languageExtensionsToAdd = {
    parameterPath: "languageExtensionsToAdd",
    mapper: LanguageExtensionsListMapper
};
export const languageExtensionsToRemove = {
    parameterPath: "languageExtensionsToRemove",
    mapper: LanguageExtensionsListMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const principalAssignmentName = {
    parameterPath: "principalAssignmentName",
    mapper: ClusterPrincipalAssignmentCheckNameRequestMapper
};
export const principalAssignmentName1 = {
    parameterPath: "principalAssignmentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "principalAssignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: ClusterPrincipalAssignmentMapper
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: CheckNameRequestMapper
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 5
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
export const databaseName = {
    parameterPath: "databaseName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "databaseName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: DatabaseMapper
};
export const callerRole = {
    parameterPath: ["options", "callerRole"],
    mapper: {
        defaultValue: "Admin",
        serializedName: "callerRole",
        type: {
            name: "String"
        }
    }
};
export const databasePrincipalsToAdd = {
    parameterPath: "databasePrincipalsToAdd",
    mapper: DatabasePrincipalListRequestMapper
};
export const databasePrincipalsToRemove = {
    parameterPath: "databasePrincipalsToRemove",
    mapper: DatabasePrincipalListRequestMapper
};
export const resourceName1 = {
    parameterPath: "resourceName",
    mapper: AttachedDatabaseConfigurationsCheckNameRequestMapper
};
export const attachedDatabaseConfigurationName = {
    parameterPath: "attachedDatabaseConfigurationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "attachedDatabaseConfigurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: AttachedDatabaseConfigurationMapper
};
export const resourceName2 = {
    parameterPath: "resourceName",
    mapper: ManagedPrivateEndpointsCheckNameRequestMapper
};
export const managedPrivateEndpointName = {
    parameterPath: "managedPrivateEndpointName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "managedPrivateEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: ManagedPrivateEndpointMapper
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: DatabaseInviteFollowerRequestMapper
};
export const principalAssignmentName2 = {
    parameterPath: "principalAssignmentName",
    mapper: DatabasePrincipalAssignmentCheckNameRequestMapper
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: DatabasePrincipalAssignmentMapper
};
export const scriptName = {
    parameterPath: "scriptName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "scriptName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: ScriptMapper
};
export const scriptName1 = {
    parameterPath: "scriptName",
    mapper: ScriptCheckNameRequestMapper
};
export const sandboxCustomImageName = {
    parameterPath: "sandboxCustomImageName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "sandboxCustomImageName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: SandboxCustomImageMapper
};
export const resourceName3 = {
    parameterPath: "resourceName",
    mapper: SandboxCustomImagesCheckNameRequestMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnectionMapper
};
export const privateLinkResourceName = {
    parameterPath: "privateLinkResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "privateLinkResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: DataConnectionValidationMapper
};
export const dataConnectionName = {
    parameterPath: "dataConnectionName",
    mapper: DataConnectionCheckNameRequestMapper
};
export const dataConnectionName1 = {
    parameterPath: "dataConnectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^.*$")
        },
        serializedName: "dataConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters12 = {
    parameterPath: "parameters",
    mapper: DataConnectionMapper
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map