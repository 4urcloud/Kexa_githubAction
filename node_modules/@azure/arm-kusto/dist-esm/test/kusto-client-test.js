/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { KustoManagementClient } from "../src";
import { assert } from "chai";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("KustoManagementClient", () => {
    let recorder;
    let subscriptionId;
    let client;
    let resourceGroup;
    let clusterName_1;
    let clusterName_2;
    let clusterParameters;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new KustoManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            resourceGroup = "myjstest";
            clusterName_1 = "mytestclustername5";
            clusterName_2 = "mytestclustername6";
            clusterParameters = {
                "location": "westeurope",
                "sku": {
                    "name": "Standard_L8s_v2",
                    "tier": "Standard"
                },
                "identity": {
                    "type": "SystemAssigned"
                },
            };
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    //kusto_client.clusters.beginCreateOrUpdateAndWait
    it("could create clusters", function () {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield client.clusters.beginCreateOrUpdateAndWait(resourceGroup, clusterName_1, clusterParameters, testPollingOptions);
            assert.strictEqual(res.name, clusterName_1);
            res = yield client.clusters.beginCreateOrUpdateAndWait(resourceGroup, clusterName_2, clusterParameters, testPollingOptions);
            assert.strictEqual(res.name, clusterName_2);
        });
    }).timeout(3600000);
    //kusto_client.clusters.beginUpdateAndWait
    // it("could update tags in cluster", async () => {
    //   const updateParams: ClusterUpdate = {
    //     tags: {
    //       key1: "value1",
    //       key2: "value2",
    //     }
    //   };
    //   const res = await client.clusters.beginUpdateAndWait(resourceGroup, clusterName_2, updateParams, testPollingOptions);
    //   if (!isPlaybackMode()) {
    //     await delay(600000);
    //   }
    //   assert.equal(res.name, clusterName_2);
    // });
    //kusto_client.clusters.get
    it("could get cluster", () => __awaiter(void 0, void 0, void 0, function* () {
        const res = yield client.clusters.get(resourceGroup, clusterName_1);
        assert.strictEqual(res.name, clusterName_1);
    }));
    //kusto_client.clusters.list
    it("could list cluster filtered by resource group", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, e_1, _b, _c;
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.clusters.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    const item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        assert.ok(resArray.length >= 2);
    }));
    //kusto_client.clusters.beginDeleteAndWait
    it("could delete clusters", () => __awaiter(void 0, void 0, void 0, function* () {
        var _g, _h;
        let res = yield client.clusters.beginDeleteAndWait(resourceGroup, clusterName_1, testPollingOptions);
        assert.strictEqual((_g = res === null || res === void 0 ? void 0 : res.body) === null || _g === void 0 ? void 0 : _g.status, "Succeeded");
        res = yield client.clusters.beginDeleteAndWait(resourceGroup, clusterName_2, testPollingOptions);
        assert.strictEqual((_h = res === null || res === void 0 ? void 0 : res.body) === null || _h === void 0 ? void 0 : _h.status, "Succeeded");
    }));
});
//# sourceMappingURL=kusto-client-test.js.map