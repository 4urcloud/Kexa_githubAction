import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ServicemapManagementClientContext } from "../servicemapManagementClientContext";
/** Class representing a Machines. */
export declare class Machines {
    private readonly client;
    /**
     * Create a Machines.
     * @param {ServicemapManagementClientContext} client Reference to the service client.
     */
    constructor(client: ServicemapManagementClientContext);
    /**
     * Returns a collection of machines matching the specified conditions.  The returned collection
     * represents either machines that are active/live during the specified interval  of time
     * (`live=true` and `startTime`/`endTime` are specified) or that are known to have existed at or
     * some time prior to the specified point in time (`live=false` and `timestamp` is specified).
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListByWorkspaceResponse>
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: Models.MachinesListByWorkspaceOptionalParams): Promise<Models.MachinesListByWorkspaceResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param callback The callback
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.MachineCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options: Models.MachinesListByWorkspaceOptionalParams, callback: msRest.ServiceCallback<Models.MachineCollection>): void;
    /**
     * Returns the specified machine.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesGetResponse>
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, options?: Models.MachinesGetOptionalParams): Promise<Models.MachinesGetResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param callback The callback
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, callback: msRest.ServiceCallback<Models.Machine>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, options: Models.MachinesGetOptionalParams, callback: msRest.ServiceCallback<Models.Machine>): void;
    /**
     * Obtains the liveness status of the machine during the specified time interval.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesGetLivenessResponse>
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, options?: Models.MachinesGetLivenessOptionalParams): Promise<Models.MachinesGetLivenessResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param callback The callback
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, callback: msRest.ServiceCallback<Models.Liveness>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, options: Models.MachinesGetLivenessOptionalParams, callback: msRest.ServiceCallback<Models.Liveness>): void;
    /**
     * Returns a collection of connections terminating or originating at the specified machine
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListConnectionsResponse>
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, options?: Models.MachinesListConnectionsOptionalParams): Promise<Models.MachinesListConnectionsResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param callback The callback
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, options: Models.MachinesListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * Returns a collection of processes on the specified machine matching the specified conditions.
     * The returned collection represents either processes that are active/live during the specified
     * interval  of time (`live=true` and `startTime`/`endTime` are specified) or that are known to
     * have existed at or  some time prior to the specified point in time (`live=false` and `timestamp`
     * is specified).
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListProcessesResponse>
     */
    listProcesses(resourceGroupName: string, workspaceName: string, machineName: string, options?: Models.MachinesListProcessesOptionalParams): Promise<Models.MachinesListProcessesResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param callback The callback
     */
    listProcesses(resourceGroupName: string, workspaceName: string, machineName: string, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcesses(resourceGroupName: string, workspaceName: string, machineName: string, options: Models.MachinesListProcessesOptionalParams, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * Returns a collection of live ports on the specified machine during the specified time interval.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListPortsResponse>
     */
    listPorts(resourceGroupName: string, workspaceName: string, machineName: string, options?: Models.MachinesListPortsOptionalParams): Promise<Models.MachinesListPortsResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param callback The callback
     */
    listPorts(resourceGroupName: string, workspaceName: string, machineName: string, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPorts(resourceGroupName: string, workspaceName: string, machineName: string, options: Models.MachinesListPortsOptionalParams, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * Returns a collection of machine groups this machine belongs to during the specified time
     * interval.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListMachineGroupMembershipResponse>
     */
    listMachineGroupMembership(resourceGroupName: string, workspaceName: string, machineName: string, options?: Models.MachinesListMachineGroupMembershipOptionalParams): Promise<Models.MachinesListMachineGroupMembershipResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param callback The callback
     */
    listMachineGroupMembership(resourceGroupName: string, workspaceName: string, machineName: string, callback: msRest.ServiceCallback<Models.MachineGroupCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMachineGroupMembership(resourceGroupName: string, workspaceName: string, machineName: string, options: Models.MachinesListMachineGroupMembershipOptionalParams, callback: msRest.ServiceCallback<Models.MachineGroupCollection>): void;
    /**
     * Returns a collection of machines matching the specified conditions.  The returned collection
     * represents either machines that are active/live during the specified interval  of time
     * (`live=true` and `startTime`/`endTime` are specified) or that are known to have existed at or
     * some time prior to the specified point in time (`live=false` and `timestamp` is specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListByWorkspaceNextResponse>
     */
    listByWorkspaceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MachinesListByWorkspaceNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByWorkspaceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MachineCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByWorkspaceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MachineCollection>): void;
    /**
     * Returns a collection of connections terminating or originating at the specified machine
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListConnectionsNextResponse>
     */
    listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MachinesListConnectionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * Returns a collection of processes on the specified machine matching the specified conditions.
     * The returned collection represents either processes that are active/live during the specified
     * interval  of time (`live=true` and `startTime`/`endTime` are specified) or that are known to
     * have existed at or  some time prior to the specified point in time (`live=false` and `timestamp`
     * is specified).
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListProcessesNextResponse>
     */
    listProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MachinesListProcessesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listProcessesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listProcessesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * Returns a collection of live ports on the specified machine during the specified time interval.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListPortsNextResponse>
     */
    listPortsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MachinesListPortsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listPortsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPortsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * Returns a collection of machine groups this machine belongs to during the specified time
     * interval.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.MachinesListMachineGroupMembershipNextResponse>
     */
    listMachineGroupMembershipNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MachinesListMachineGroupMembershipNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listMachineGroupMembershipNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MachineGroupCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listMachineGroupMembershipNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MachineGroupCollection>): void;
}
//# sourceMappingURL=machines.d.ts.map