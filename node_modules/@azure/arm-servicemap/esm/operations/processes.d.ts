import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ServicemapManagementClientContext } from "../servicemapManagementClientContext";
/** Class representing a Processes. */
export declare class Processes {
    private readonly client;
    /**
     * Create a Processes.
     * @param {ServicemapManagementClientContext} client Reference to the service client.
     */
    constructor(client: ServicemapManagementClientContext);
    /**
     * Returns the specified process.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProcessesGetResponse>
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesGetOptionalParams): Promise<Models.ProcessesGetResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param callback The callback
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.Process>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesGetOptionalParams, callback: msRest.ServiceCallback<Models.Process>): void;
    /**
     * Obtains the liveness status of the process during the specified time interval.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProcessesGetLivenessResponse>
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesGetLivenessOptionalParams): Promise<Models.ProcessesGetLivenessResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param callback The callback
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.Liveness>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesGetLivenessOptionalParams, callback: msRest.ServiceCallback<Models.Liveness>): void;
    /**
     * Returns a collection of ports on which this process is accepting
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProcessesListAcceptingPortsResponse>
     */
    listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesListAcceptingPortsOptionalParams): Promise<Models.ProcessesListAcceptingPortsResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param callback The callback
     */
    listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAcceptingPorts(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesListAcceptingPortsOptionalParams, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * Returns a collection of connections terminating or originating at the specified process
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProcessesListConnectionsResponse>
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options?: Models.ProcessesListConnectionsOptionalParams): Promise<Models.ProcessesListConnectionsResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param callback The callback
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param processName Process resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, processName: string, options: Models.ProcessesListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * Returns a collection of ports on which this process is accepting
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProcessesListAcceptingPortsNextResponse>
     */
    listAcceptingPortsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProcessesListAcceptingPortsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAcceptingPortsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAcceptingPortsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PortCollection>): void;
    /**
     * Returns a collection of connections terminating or originating at the specified process
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProcessesListConnectionsNextResponse>
     */
    listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProcessesListConnectionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
}
//# sourceMappingURL=processes.d.ts.map