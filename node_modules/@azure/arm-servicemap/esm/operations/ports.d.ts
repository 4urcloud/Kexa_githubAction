import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ServicemapManagementClientContext } from "../servicemapManagementClientContext";
/** Class representing a Ports. */
export declare class Ports {
    private readonly client;
    /**
     * Create a Ports.
     * @param {ServicemapManagementClientContext} client Reference to the service client.
     */
    constructor(client: ServicemapManagementClientContext);
    /**
     * Returns the specified port. The port must be live during the specified time interval. If the
     * port is not live during the interval, status 404 (Not Found) is returned.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.PortsGetResponse>
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsGetOptionalParams): Promise<Models.PortsGetResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param callback The callback
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.Port>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsGetOptionalParams, callback: msRest.ServiceCallback<Models.Port>): void;
    /**
     * Obtains the liveness status of the port during the specified time interval.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.PortsGetLivenessResponse>
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsGetLivenessOptionalParams): Promise<Models.PortsGetLivenessResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param callback The callback
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.Liveness>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    getLiveness(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsGetLivenessOptionalParams, callback: msRest.ServiceCallback<Models.Liveness>): void;
    /**
     * Returns a collection of processes accepting on the specified port
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.PortsListAcceptingProcessesResponse>
     */
    listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsListAcceptingProcessesOptionalParams): Promise<Models.PortsListAcceptingProcessesResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param callback The callback
     */
    listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAcceptingProcesses(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsListAcceptingProcessesOptionalParams, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * Returns a collection of connections established via the specified port.
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param [options] The optional parameters
     * @returns Promise<Models.PortsListConnectionsResponse>
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options?: Models.PortsListConnectionsOptionalParams): Promise<Models.PortsListConnectionsResponse>;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param callback The callback
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * @param resourceGroupName Resource group name within the specified subscriptionId.
     * @param workspaceName OMS workspace containing the resources of interest.
     * @param machineName Machine resource name.
     * @param portName Port resource name.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnections(resourceGroupName: string, workspaceName: string, machineName: string, portName: string, options: Models.PortsListConnectionsOptionalParams, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * Returns a collection of processes accepting on the specified port
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.PortsListAcceptingProcessesNextResponse>
     */
    listAcceptingProcessesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PortsListAcceptingProcessesNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAcceptingProcessesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAcceptingProcessesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProcessCollection>): void;
    /**
     * Returns a collection of connections established via the specified port.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.PortsListConnectionsNextResponse>
     */
    listConnectionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PortsListConnectionsNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listConnectionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listConnectionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionCollection>): void;
}
//# sourceMappingURL=ports.d.ts.map