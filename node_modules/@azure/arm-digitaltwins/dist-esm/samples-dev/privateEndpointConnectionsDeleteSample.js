/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureDigitalTwinsManagementClient } from "@azure/arm-digitaltwins";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Delete private endpoint connection with the specified name.
 *
 * @summary Delete private endpoint connection with the specified name.
 * x-ms-original-file: specification/digitaltwins/resource-manager/Microsoft.DigitalTwins/stable/2023-01-31/examples/PrivateEndpointConnectionDelete_example.json
 */
function deletePrivateEndpointConnectionWithTheSpecifiedName() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DIGITALTWINS_SUBSCRIPTION_ID"] ||
            "50016170-c839-41ba-a724-51e9df440b9e";
        const resourceGroupName = process.env["DIGITALTWINS_RESOURCE_GROUP"] || "resRg";
        const resourceName = "myDigitalTwinsService";
        const privateEndpointConnectionName = "myPrivateConnection";
        const credential = new DefaultAzureCredential();
        const client = new AzureDigitalTwinsManagementClient(credential, subscriptionId);
        const result = yield client.privateEndpointConnections.beginDeleteAndWait(resourceGroupName, resourceName, privateEndpointConnectionName);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        deletePrivateEndpointConnectionWithTheSpecifiedName();
    });
}
main().catch(console.error);
//# sourceMappingURL=privateEndpointConnectionsDeleteSample.js.map