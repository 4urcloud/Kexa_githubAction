import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TimeSeriesDatabaseConnections } from "../operationsInterfaces";
import { AzureDigitalTwinsManagementClient } from "../azureDigitalTwinsManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { TimeSeriesDatabaseConnection, TimeSeriesDatabaseConnectionsListOptionalParams, TimeSeriesDatabaseConnectionsGetOptionalParams, TimeSeriesDatabaseConnectionsGetResponse, TimeSeriesDatabaseConnectionsCreateOrUpdateOptionalParams, TimeSeriesDatabaseConnectionsCreateOrUpdateResponse, TimeSeriesDatabaseConnectionsDeleteOptionalParams, TimeSeriesDatabaseConnectionsDeleteResponse } from "../models";
/** Class containing TimeSeriesDatabaseConnections operations. */
export declare class TimeSeriesDatabaseConnectionsImpl implements TimeSeriesDatabaseConnections {
    private readonly client;
    /**
     * Initialize a new instance of the class TimeSeriesDatabaseConnections class.
     * @param client Reference to the service client
     */
    constructor(client: AzureDigitalTwinsManagementClient);
    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: TimeSeriesDatabaseConnectionsListOptionalParams): PagedAsyncIterableIterator<TimeSeriesDatabaseConnection>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the description of an existing time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, options?: TimeSeriesDatabaseConnectionsGetOptionalParams): Promise<TimeSeriesDatabaseConnectionsGetResponse>;
    /**
     * Create or update a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, timeSeriesDatabaseConnectionDescription: TimeSeriesDatabaseConnection, options?: TimeSeriesDatabaseConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<TimeSeriesDatabaseConnectionsCreateOrUpdateResponse>, TimeSeriesDatabaseConnectionsCreateOrUpdateResponse>>;
    /**
     * Create or update a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, timeSeriesDatabaseConnectionDescription: TimeSeriesDatabaseConnection, options?: TimeSeriesDatabaseConnectionsCreateOrUpdateOptionalParams): Promise<TimeSeriesDatabaseConnectionsCreateOrUpdateResponse>;
    /**
     * Delete a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, options?: TimeSeriesDatabaseConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<TimeSeriesDatabaseConnectionsDeleteResponse>, TimeSeriesDatabaseConnectionsDeleteResponse>>;
    /**
     * Delete a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, options?: TimeSeriesDatabaseConnectionsDeleteOptionalParams): Promise<TimeSeriesDatabaseConnectionsDeleteResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=timeSeriesDatabaseConnections.d.ts.map