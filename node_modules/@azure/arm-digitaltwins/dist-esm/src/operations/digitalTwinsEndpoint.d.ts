import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DigitalTwinsEndpoint } from "../operationsInterfaces";
import { AzureDigitalTwinsManagementClient } from "../azureDigitalTwinsManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { DigitalTwinsEndpointResource, DigitalTwinsEndpointListOptionalParams, DigitalTwinsEndpointGetOptionalParams, DigitalTwinsEndpointGetResponse, DigitalTwinsEndpointCreateOrUpdateOptionalParams, DigitalTwinsEndpointCreateOrUpdateResponse, DigitalTwinsEndpointDeleteOptionalParams, DigitalTwinsEndpointDeleteResponse } from "../models";
/** Class containing DigitalTwinsEndpoint operations. */
export declare class DigitalTwinsEndpointImpl implements DigitalTwinsEndpoint {
    private readonly client;
    /**
     * Initialize a new instance of the class DigitalTwinsEndpoint class.
     * @param client Reference to the service client
     */
    constructor(client: AzureDigitalTwinsManagementClient);
    /**
     * Get DigitalTwinsInstance Endpoints.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: DigitalTwinsEndpointListOptionalParams): PagedAsyncIterableIterator<DigitalTwinsEndpointResource>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get DigitalTwinsInstance Endpoints.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get DigitalTwinsInstances Endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, endpointName: string, options?: DigitalTwinsEndpointGetOptionalParams): Promise<DigitalTwinsEndpointGetResponse>;
    /**
     * Create or update DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param endpointDescription The DigitalTwinsInstance endpoint metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, endpointName: string, endpointDescription: DigitalTwinsEndpointResource, options?: DigitalTwinsEndpointCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DigitalTwinsEndpointCreateOrUpdateResponse>, DigitalTwinsEndpointCreateOrUpdateResponse>>;
    /**
     * Create or update DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param endpointDescription The DigitalTwinsInstance endpoint metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, endpointName: string, endpointDescription: DigitalTwinsEndpointResource, options?: DigitalTwinsEndpointCreateOrUpdateOptionalParams): Promise<DigitalTwinsEndpointCreateOrUpdateResponse>;
    /**
     * Delete a DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, endpointName: string, options?: DigitalTwinsEndpointDeleteOptionalParams): Promise<SimplePollerLike<OperationState<DigitalTwinsEndpointDeleteResponse>, DigitalTwinsEndpointDeleteResponse>>;
    /**
     * Delete a DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, endpointName: string, options?: DigitalTwinsEndpointDeleteOptionalParams): Promise<DigitalTwinsEndpointDeleteResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=digitalTwinsEndpoint.d.ts.map