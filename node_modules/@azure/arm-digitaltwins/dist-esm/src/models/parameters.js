/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { DigitalTwinsDescription as DigitalTwinsDescriptionMapper, DigitalTwinsPatchDescription as DigitalTwinsPatchDescriptionMapper, CheckNameRequest as CheckNameRequestMapper, DigitalTwinsEndpointResource as DigitalTwinsEndpointResourceMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, TimeSeriesDatabaseConnection as TimeSeriesDatabaseConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-01-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^(?!-)[A-Za-z0-9-]{3,63}(?<!-)$"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const digitalTwinsCreate = {
    parameterPath: "digitalTwinsCreate",
    mapper: DigitalTwinsDescriptionMapper
};
export const digitalTwinsPatchDescription = {
    parameterPath: "digitalTwinsPatchDescription",
    mapper: DigitalTwinsPatchDescriptionMapper
};
export const digitalTwinsInstanceCheckName = {
    parameterPath: "digitalTwinsInstanceCheckName",
    mapper: CheckNameRequestMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        constraints: {
            MinLength: 3
        },
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const endpointName = {
    parameterPath: "endpointName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$"),
            MaxLength: 49,
            MinLength: 2
        },
        serializedName: "endpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const endpointDescription = {
    parameterPath: "endpointDescription",
    mapper: DigitalTwinsEndpointResourceMapper
};
export const resourceId = {
    parameterPath: "resourceId",
    mapper: {
        serializedName: "resourceId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
export const timeSeriesDatabaseConnectionName = {
    parameterPath: "timeSeriesDatabaseConnectionName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$"),
            MaxLength: 49,
            MinLength: 2
        },
        serializedName: "timeSeriesDatabaseConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const timeSeriesDatabaseConnectionDescription = {
    parameterPath: "timeSeriesDatabaseConnectionDescription",
    mapper: TimeSeriesDatabaseConnectionMapper
};
export const cleanupConnectionArtifacts = {
    parameterPath: ["options", "cleanupConnectionArtifacts"],
    mapper: {
        serializedName: "cleanupConnectionArtifacts",
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map