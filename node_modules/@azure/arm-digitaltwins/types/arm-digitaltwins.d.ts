import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for AuthenticationType. \
 * {@link KnownAuthenticationType} can be used interchangeably with AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KeyBased** \
 * **IdentityBased**
 */
export declare type AuthenticationType = string;

/** Properties of a time series database connection to Azure Data Explorer with data being sent via an EventHub. */
export declare interface AzureDataExplorerConnectionProperties extends TimeSeriesDatabaseConnectionProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    connectionType: "AzureDataExplorer";
    /** The resource ID of the Azure Data Explorer cluster. */
    adxResourceId: string;
    /** The URI of the Azure Data Explorer endpoint. */
    adxEndpointUri: string;
    /** The name of the Azure Data Explorer database. */
    adxDatabaseName: string;
    /** The name of the Azure Data Explorer table used for storing updates to properties of twins and relationships. Defaults to AdtPropertyEvents. */
    adxTableName?: string;
    /** The name of the Azure Data Explorer table used for recording twin lifecycle events. The table will not be created if this property is left unspecified. */
    adxTwinLifecycleEventsTableName?: string;
    /** The name of the Azure Data Explorer table used for recording relationship lifecycle events. The table will not be created if this property is left unspecified. */
    adxRelationshipLifecycleEventsTableName?: string;
    /** The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb:// */
    eventHubEndpointUri: string;
    /** The EventHub name in the EventHub namespace for identity-based authentication. */
    eventHubEntityPath: string;
    /** The resource ID of the EventHub namespace. */
    eventHubNamespaceResourceId: string;
    /** The EventHub consumer group to use when ADX reads from EventHub. Defaults to $Default. */
    eventHubConsumerGroup?: string;
    /** Specifies whether or not to record twin / relationship property and item removals, including removals of indexed or keyed values (such as map entries, array elements, etc.). This feature is de-activated unless explicitly set to 'true'. Setting this property to 'true' will generate an additional column in the property events table in ADX. */
    recordPropertyAndItemRemovals?: RecordPropertyAndItemRemovals;
}

export declare class AzureDigitalTwinsManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureDigitalTwinsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription identifier.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureDigitalTwinsManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    digitalTwins: DigitalTwins;
    digitalTwinsEndpoint: DigitalTwinsEndpoint;
    operations: Operations;
    privateLinkResources: PrivateLinkResources;
    privateEndpointConnections: PrivateEndpointConnections;
    timeSeriesDatabaseConnections: TimeSeriesDatabaseConnections;
}

/** Optional parameters. */
export declare interface AzureDigitalTwinsManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The result returned from a database check name availability request. */
export declare interface CheckNameRequest {
    /** Resource name. */
    name: string;
    /** The type of resource, for instance Microsoft.DigitalTwins/digitalTwinsInstances. */
    type: "Microsoft.DigitalTwins/digitalTwinsInstances";
}

/** The result returned from a check name availability request. */
export declare interface CheckNameResult {
    /** Specifies a Boolean value that indicates if the name is available. */
    nameAvailable?: boolean;
    /** Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated. */
    message?: string;
    /** Message providing the reason why the given name is invalid. */
    reason?: Reason;
}

/**
 * Defines values for CleanupConnectionArtifacts. \
 * {@link KnownCleanupConnectionArtifacts} can be used interchangeably with CleanupConnectionArtifacts,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export declare type CleanupConnectionArtifacts = string;

/** The properties of a private endpoint connection. */
export declare interface ConnectionProperties {
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ConnectionPropertiesProvisioningState;
    /** The private endpoint. */
    privateEndpoint?: PrivateEndpoint;
    /** The list of group ids for the private endpoint connection. */
    groupIds?: string[];
    /** The connection state. */
    privateLinkServiceConnectionState?: ConnectionPropertiesPrivateLinkServiceConnectionState;
}

/** The connection state. */
export declare interface ConnectionPropertiesPrivateLinkServiceConnectionState extends ConnectionState {
}

/**
 * Defines values for ConnectionPropertiesProvisioningState. \
 * {@link KnownConnectionPropertiesProvisioningState} can be used interchangeably with ConnectionPropertiesProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type ConnectionPropertiesProvisioningState = string;

/** The current state of a private endpoint connection. */
export declare interface ConnectionState {
    /** The status of a private endpoint connection. */
    status: PrivateLinkServiceConnectionStatus;
    /** The description for the current state of a private endpoint connection. */
    description: string;
    /** Actions required for a private endpoint connection. */
    actionsRequired?: string;
}

/**
 * Defines values for ConnectionType. \
 * {@link KnownConnectionType} can be used interchangeably with ConnectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureDataExplorer**
 */
export declare type ConnectionType = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Interface representing a DigitalTwins. */
export declare interface DigitalTwins {
    /**
     * Get all the DigitalTwinsInstances in a subscription.
     * @param options The options parameters.
     */
    list(options?: DigitalTwinsListOptionalParams): PagedAsyncIterableIterator<DigitalTwinsDescription>;
    /**
     * Get all the DigitalTwinsInstances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DigitalTwinsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DigitalTwinsDescription>;
    /**
     * Get DigitalTwinsInstances resource.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, options?: DigitalTwinsGetOptionalParams): Promise<DigitalTwinsGetResponse>;
    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is
     * to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified
     * values in a new body to update the DigitalTwinsInstance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, digitalTwinsCreate: DigitalTwinsDescription, options?: DigitalTwinsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DigitalTwinsCreateOrUpdateResponse>, DigitalTwinsCreateOrUpdateResponse>>;
    /**
     * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property is
     * to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the modified
     * values in a new body to update the DigitalTwinsInstance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, digitalTwinsCreate: DigitalTwinsDescription, options?: DigitalTwinsCreateOrUpdateOptionalParams): Promise<DigitalTwinsCreateOrUpdateResponse>;
    /**
     * Update metadata of DigitalTwinsInstance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsPatchDescription The DigitalTwinsInstance and security metadata.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, resourceName: string, digitalTwinsPatchDescription: DigitalTwinsPatchDescription, options?: DigitalTwinsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DigitalTwinsUpdateResponse>, DigitalTwinsUpdateResponse>>;
    /**
     * Update metadata of DigitalTwinsInstance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param digitalTwinsPatchDescription The DigitalTwinsInstance and security metadata.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, resourceName: string, digitalTwinsPatchDescription: DigitalTwinsPatchDescription, options?: DigitalTwinsUpdateOptionalParams): Promise<DigitalTwinsUpdateResponse>;
    /**
     * Delete a DigitalTwinsInstance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, options?: DigitalTwinsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<DigitalTwinsDeleteResponse>, DigitalTwinsDeleteResponse>>;
    /**
     * Delete a DigitalTwinsInstance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, options?: DigitalTwinsDeleteOptionalParams): Promise<DigitalTwinsDeleteResponse>;
    /**
     * Check if a DigitalTwinsInstance name is available.
     * @param location Location of DigitalTwinsInstance.
     * @param digitalTwinsInstanceCheckName Set the name parameter in the DigitalTwinsInstanceCheckName
     *                                      structure to the name of the DigitalTwinsInstance to check.
     * @param options The options parameters.
     */
    checkNameAvailability(location: string, digitalTwinsInstanceCheckName: CheckNameRequest, options?: DigitalTwinsCheckNameAvailabilityOptionalParams): Promise<DigitalTwinsCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface DigitalTwinsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type DigitalTwinsCheckNameAvailabilityResponse = CheckNameResult;

/** Optional parameters. */
export declare interface DigitalTwinsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DigitalTwinsCreateOrUpdateResponse = DigitalTwinsDescription;

/** Optional parameters. */
export declare interface DigitalTwinsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type DigitalTwinsDeleteResponse = DigitalTwinsDescription;

/** The description of the DigitalTwins service. */
export declare interface DigitalTwinsDescription extends DigitalTwinsResource {
    /**
     * Time when DigitalTwinsInstance was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Time when DigitalTwinsInstance was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTime?: Date;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Api endpoint to work with DigitalTwinsInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /** The private endpoint connections. */
    privateEndpointConnections?: PrivateEndpointConnection[];
    /** Public network access for the DigitalTwinsInstance. */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** A list of DigitalTwins description objects with a next link. */
export declare interface DigitalTwinsDescriptionListResult {
    /** The link used to get the next page of DigitalTwins description objects. */
    nextLink?: string;
    /** A list of DigitalTwins description objects. */
    value?: DigitalTwinsDescription[];
}

/** Interface representing a DigitalTwinsEndpoint. */
export declare interface DigitalTwinsEndpoint {
    /**
     * Get DigitalTwinsInstance Endpoints.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: DigitalTwinsEndpointListOptionalParams): PagedAsyncIterableIterator<DigitalTwinsEndpointResource>;
    /**
     * Get DigitalTwinsInstances Endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, endpointName: string, options?: DigitalTwinsEndpointGetOptionalParams): Promise<DigitalTwinsEndpointGetResponse>;
    /**
     * Create or update DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param endpointDescription The DigitalTwinsInstance endpoint metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, endpointName: string, endpointDescription: DigitalTwinsEndpointResource, options?: DigitalTwinsEndpointCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DigitalTwinsEndpointCreateOrUpdateResponse>, DigitalTwinsEndpointCreateOrUpdateResponse>>;
    /**
     * Create or update DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param endpointDescription The DigitalTwinsInstance endpoint metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, endpointName: string, endpointDescription: DigitalTwinsEndpointResource, options?: DigitalTwinsEndpointCreateOrUpdateOptionalParams): Promise<DigitalTwinsEndpointCreateOrUpdateResponse>;
    /**
     * Delete a DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, endpointName: string, options?: DigitalTwinsEndpointDeleteOptionalParams): Promise<SimplePollerLike<OperationState<DigitalTwinsEndpointDeleteResponse>, DigitalTwinsEndpointDeleteResponse>>;
    /**
     * Delete a DigitalTwinsInstance endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param endpointName Name of Endpoint Resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, endpointName: string, options?: DigitalTwinsEndpointDeleteOptionalParams): Promise<DigitalTwinsEndpointDeleteResponse>;
}

/** Optional parameters. */
export declare interface DigitalTwinsEndpointCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DigitalTwinsEndpointCreateOrUpdateResponse = DigitalTwinsEndpointResource;

/** Optional parameters. */
export declare interface DigitalTwinsEndpointDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type DigitalTwinsEndpointDeleteResponse = DigitalTwinsEndpointResource;

/** Optional parameters. */
export declare interface DigitalTwinsEndpointGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DigitalTwinsEndpointGetResponse = DigitalTwinsEndpointResource;

/** Optional parameters. */
export declare interface DigitalTwinsEndpointListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DigitalTwinsEndpointListNextResponse = DigitalTwinsEndpointResourceListResult;

/** Optional parameters. */
export declare interface DigitalTwinsEndpointListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DigitalTwinsEndpointListResponse = DigitalTwinsEndpointResourceListResult;

/** DigitalTwinsInstance endpoint resource. */
export declare interface DigitalTwinsEndpointResource extends ExternalResource {
    /** DigitalTwinsInstance endpoint resource properties. */
    properties: DigitalTwinsEndpointResourcePropertiesUnion;
}

/** A list of DigitalTwinsInstance Endpoints with a next link. */
export declare interface DigitalTwinsEndpointResourceListResult {
    /** The link used to get the next page of DigitalTwinsInstance Endpoints. */
    nextLink?: string;
    /** A list of DigitalTwinsInstance Endpoints. */
    value?: DigitalTwinsEndpointResource[];
}

/** Properties related to Digital Twins Endpoint */
export declare interface DigitalTwinsEndpointResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "ServiceBus" | "EventHub" | "EventGrid";
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: EndpointProvisioningState;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /** Specifies the authentication type being used for connecting to the endpoint. Defaults to 'KeyBased'. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is select, the endpointUri and entityPath properties must be specified. */
    authenticationType?: AuthenticationType;
    /** Dead letter storage secret for key-based authentication. Will be obfuscated during read. */
    deadLetterSecret?: string;
    /** Dead letter storage URL for identity-based authentication. */
    deadLetterUri?: string;
    /** Managed identity properties for the endpoint. */
    identity?: ManagedIdentityReference;
}

export declare type DigitalTwinsEndpointResourcePropertiesUnion = DigitalTwinsEndpointResourceProperties | ServiceBus | EventHub | EventGrid;

/** Optional parameters. */
export declare interface DigitalTwinsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DigitalTwinsGetResponse = DigitalTwinsDescription;

/** The managed identity for the DigitalTwinsInstance. */
export declare interface DigitalTwinsIdentity {
    /** The type of Managed Identity used by the DigitalTwinsInstance. */
    type?: DigitalTwinsIdentityType;
    /**
     * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     * .
     */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for DigitalTwinsIdentityType. \
 * {@link KnownDigitalTwinsIdentityType} can be used interchangeably with DigitalTwinsIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type DigitalTwinsIdentityType = string;

/** Optional parameters. */
export declare interface DigitalTwinsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DigitalTwinsListByResourceGroupNextResponse = DigitalTwinsDescriptionListResult;

/** Optional parameters. */
export declare interface DigitalTwinsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DigitalTwinsListByResourceGroupResponse = DigitalTwinsDescriptionListResult;

/** Optional parameters. */
export declare interface DigitalTwinsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DigitalTwinsListNextResponse = DigitalTwinsDescriptionListResult;

/** Optional parameters. */
export declare interface DigitalTwinsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DigitalTwinsListResponse = DigitalTwinsDescriptionListResult;

/** The description of the DigitalTwins service. */
export declare interface DigitalTwinsPatchDescription {
    /** Instance patch properties */
    tags?: {
        [propertyName: string]: string;
    };
    /** The managed identity for the DigitalTwinsInstance. */
    identity?: DigitalTwinsIdentity;
    /** Properties for the DigitalTwinsInstance. */
    properties?: DigitalTwinsPatchProperties;
}

/** The properties of a DigitalTwinsInstance. */
export declare interface DigitalTwinsPatchProperties {
    /** Public network access for the DigitalTwinsInstance. */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** The common properties of a DigitalTwinsInstance. */
export declare interface DigitalTwinsResource {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource location. */
    location: string;
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The managed identity for the DigitalTwinsInstance. */
    identity?: DigitalTwinsIdentity;
    /**
     * Metadata pertaining to creation and last modification of the DigitalTwinsInstance.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Optional parameters. */
export declare interface DigitalTwinsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DigitalTwinsUpdateResponse = DigitalTwinsDescription;

/**
 * Defines values for EndpointProvisioningState. \
 * {@link KnownEndpointProvisioningState} can be used interchangeably with EndpointProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Deleting** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **Warning** \
 * **Suspending** \
 * **Restoring** \
 * **Moving** \
 * **Disabled**
 */
export declare type EndpointProvisioningState = string;

/**
 * Defines values for EndpointType. \
 * {@link KnownEndpointType} can be used interchangeably with EndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EventHub** \
 * **EventGrid** \
 * **ServiceBus**
 */
export declare type EndpointType = string;

/** Error definition. */
export declare interface ErrorDefinition {
    /**
     * Service specific error code which serves as the substatus for the HTTP error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Description of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Internal error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDefinition[];
}

/** Error response. */
export declare interface ErrorResponse {
    /** Error description */
    error?: ErrorDefinition;
}

/** Properties related to EventGrid. */
export declare interface EventGrid extends DigitalTwinsEndpointResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "EventGrid";
    /** EventGrid Topic Endpoint. */
    topicEndpoint: string;
    /** EventGrid secondary accesskey. Will be obfuscated during read. */
    accessKey1: string | null;
    /** EventGrid secondary accesskey. Will be obfuscated during read. */
    accessKey2?: string;
}

/** Properties related to EventHub. */
export declare interface EventHub extends DigitalTwinsEndpointResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "EventHub";
    /** PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
    connectionStringPrimaryKey?: string;
    /** SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
    connectionStringSecondaryKey?: string;
    /** The URL of the EventHub namespace for identity-based authentication. It must include the protocol 'sb://'. */
    endpointUri?: string;
    /** The EventHub name in the EventHub namespace for identity-based authentication. */
    entityPath?: string;
}

/** Definition of a resource. */
export declare interface ExternalResource {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Extension resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The group information for creating a private endpoint on Digital Twin. */
export declare interface GroupIdInformation {
    /** The group information properties. */
    properties: GroupIdInformationProperties;
    /** The resource identifier. */
    id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The properties for a group information object. */
export declare interface GroupIdInformationProperties {
    /** The group id. */
    groupId?: string;
    /** The required members for a specific group id. */
    requiredMembers?: string[];
    /** The required DNS zones for a specific group id. */
    requiredZoneNames?: string[];
}

/** The available private link resources for a Digital Twin. */
export declare interface GroupIdInformationResponse {
    /** The list of available private link resources for a Digital Twin. */
    value?: GroupIdInformation[];
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned**
 */
export declare type IdentityType = string;

/** Known values of {@link AuthenticationType} that the service accepts. */
export declare enum KnownAuthenticationType {
    /** KeyBased */
    KeyBased = "KeyBased",
    /** IdentityBased */
    IdentityBased = "IdentityBased"
}

/** Known values of {@link CleanupConnectionArtifacts} that the service accepts. */
export declare enum KnownCleanupConnectionArtifacts {
    /** True */
    True = "true",
    /** False */
    False = "false"
}

/** Known values of {@link ConnectionPropertiesProvisioningState} that the service accepts. */
export declare enum KnownConnectionPropertiesProvisioningState {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link ConnectionType} that the service accepts. */
export declare enum KnownConnectionType {
    /** AzureDataExplorer */
    AzureDataExplorer = "AzureDataExplorer"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DigitalTwinsIdentityType} that the service accepts. */
export declare enum KnownDigitalTwinsIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Known values of {@link EndpointProvisioningState} that the service accepts. */
export declare enum KnownEndpointProvisioningState {
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleted */
    Deleted = "Deleted",
    /** Warning */
    Warning = "Warning",
    /** Suspending */
    Suspending = "Suspending",
    /** Restoring */
    Restoring = "Restoring",
    /** Moving */
    Moving = "Moving",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link EndpointType} that the service accepts. */
export declare enum KnownEndpointType {
    /** EventHub */
    EventHub = "EventHub",
    /** EventGrid */
    EventGrid = "EventGrid",
    /** ServiceBus */
    ServiceBus = "ServiceBus"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned"
}

/** Known values of {@link PrivateLinkServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateLinkServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleted */
    Deleted = "Deleted",
    /** Warning */
    Warning = "Warning",
    /** Suspending */
    Suspending = "Suspending",
    /** Restoring */
    Restoring = "Restoring",
    /** Moving */
    Moving = "Moving"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link Reason} that the service accepts. */
export declare enum KnownReason {
    /** Invalid */
    Invalid = "Invalid",
    /** AlreadyExists */
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link RecordPropertyAndItemRemovals} that the service accepts. */
export declare enum KnownRecordPropertyAndItemRemovals {
    /** True */
    True = "true",
    /** False */
    False = "false"
}

/** Known values of {@link TimeSeriesDatabaseConnectionState} that the service accepts. */
export declare enum KnownTimeSeriesDatabaseConnectionState {
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Deleting */
    Deleting = "Deleting",
    /** Updating */
    Updating = "Updating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleted */
    Deleted = "Deleted",
    /** Warning */
    Warning = "Warning",
    /** Suspending */
    Suspending = "Suspending",
    /** Restoring */
    Restoring = "Restoring",
    /** Moving */
    Moving = "Moving",
    /** Disabled */
    Disabled = "Disabled"
}

/** The properties of the Managed Identity. */
export declare interface ManagedIdentityReference {
    /** The type of managed identity used. */
    type?: IdentityType;
    /** The user identity ARM resource id if the managed identity type is 'UserAssigned'. */
    userAssignedIdentity?: string;
}

/** DigitalTwins service REST API operation */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{read | write | action | delete}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Operation properties display */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: string;
    /**
     * If the operation is a data action (for data plane rbac).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /**
     * Operation properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Microsoft DigitalTwins.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource Type: DigitalTwinsInstances.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Name of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Friendly description for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of DigitalTwins service operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** The link used to get the next page of DigitalTwins description objects. */
    nextLink?: string;
    /**
     * A list of DigitalTwins operations supported by the Microsoft.DigitalTwins resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available DigitalTwins service REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** The private endpoint property of a private endpoint connection. */
export declare interface PrivateEndpoint {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The private endpoint connection of a Digital Twin. */
export declare interface PrivateEndpointConnection {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The connection properties. */
    properties: ConnectionProperties;
    /**
     * Metadata pertaining to creation and last modification of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List private endpoint connection properties.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: PrivateEndpointConnectionsListOptionalParams): Promise<PrivateEndpointConnectionsListResponse>;
    /**
     * Get private endpoint connection properties for the given private endpoint.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Delete private endpoint connection with the specified name.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete private endpoint connection with the specified name.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
    /**
     * Update the status of a private endpoint connection with the given name.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection The private endpoint connection with updated properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Update the status of a private endpoint connection with the given name.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection The private endpoint connection with updated properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionsResponse;

/** The available private link connections for a Digital Twin. */
export declare interface PrivateEndpointConnectionsResponse {
    /** The list of available private link connections for a Digital Twin. */
    value?: PrivateEndpointConnection[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * List private link resources for given Digital Twin.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: PrivateLinkResourcesListOptionalParams): Promise<PrivateLinkResourcesListResponse>;
    /**
     * Get the specified private link resource for the given Digital Twin.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param resourceId The name of the private link resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, resourceId: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = GroupIdInformation;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkResourcesListResponse = GroupIdInformationResponse;

/**
 * Defines values for PrivateLinkServiceConnectionStatus. \
 * {@link KnownPrivateLinkServiceConnectionStatus} can be used interchangeably with PrivateLinkServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type PrivateLinkServiceConnectionStatus = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Deleting** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **Warning** \
 * **Suspending** \
 * **Restoring** \
 * **Moving**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type Reason = string;

/**
 * Defines values for RecordPropertyAndItemRemovals. \
 * {@link KnownRecordPropertyAndItemRemovals} can be used interchangeably with RecordPropertyAndItemRemovals,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export declare type RecordPropertyAndItemRemovals = string;

/** Properties related to ServiceBus. */
export declare interface ServiceBus extends DigitalTwinsEndpointResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "ServiceBus";
    /** PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
    primaryConnectionString?: string;
    /** SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
    secondaryConnectionString?: string;
    /** The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol 'sb://'. */
    endpointUri?: string;
    /** The ServiceBus Topic name for identity-based authentication. */
    entityPath?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Describes a time series database connection resource. */
export declare interface TimeSeriesDatabaseConnection extends ExternalResource {
    /** Properties of a specific time series database connection. */
    properties?: TimeSeriesDatabaseConnectionPropertiesUnion;
}

/** A pageable list of time series database connection resources. */
export declare interface TimeSeriesDatabaseConnectionListResult {
    /** The link used to get the next page of results. */
    nextLink?: string;
    /** A list of time series database connection resources. */
    value?: TimeSeriesDatabaseConnection[];
}

/** Properties of a time series database connection resource. */
export declare interface TimeSeriesDatabaseConnectionProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    connectionType: "AzureDataExplorer";
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: TimeSeriesDatabaseConnectionState;
    /** Managed identity properties for the time series database connection resource. */
    identity?: ManagedIdentityReference;
}

export declare type TimeSeriesDatabaseConnectionPropertiesUnion = TimeSeriesDatabaseConnectionProperties | AzureDataExplorerConnectionProperties;

/** Interface representing a TimeSeriesDatabaseConnections. */
export declare interface TimeSeriesDatabaseConnections {
    /**
     * Get all existing time series database connections for this DigitalTwins instance.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: TimeSeriesDatabaseConnectionsListOptionalParams): PagedAsyncIterableIterator<TimeSeriesDatabaseConnection>;
    /**
     * Get the description of an existing time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, options?: TimeSeriesDatabaseConnectionsGetOptionalParams): Promise<TimeSeriesDatabaseConnectionsGetResponse>;
    /**
     * Create or update a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, timeSeriesDatabaseConnectionDescription: TimeSeriesDatabaseConnection, options?: TimeSeriesDatabaseConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<TimeSeriesDatabaseConnectionsCreateOrUpdateResponse>, TimeSeriesDatabaseConnectionsCreateOrUpdateResponse>>;
    /**
     * Create or update a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param timeSeriesDatabaseConnectionDescription The time series database connection description.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, timeSeriesDatabaseConnectionDescription: TimeSeriesDatabaseConnection, options?: TimeSeriesDatabaseConnectionsCreateOrUpdateOptionalParams): Promise<TimeSeriesDatabaseConnectionsCreateOrUpdateResponse>;
    /**
     * Delete a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, options?: TimeSeriesDatabaseConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<TimeSeriesDatabaseConnectionsDeleteResponse>, TimeSeriesDatabaseConnectionsDeleteResponse>>;
    /**
     * Delete a time series database connection.
     * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
     * @param resourceName The name of the DigitalTwinsInstance.
     * @param timeSeriesDatabaseConnectionName Name of time series database connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, timeSeriesDatabaseConnectionName: string, options?: TimeSeriesDatabaseConnectionsDeleteOptionalParams): Promise<TimeSeriesDatabaseConnectionsDeleteResponse>;
}

/** Optional parameters. */
export declare interface TimeSeriesDatabaseConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TimeSeriesDatabaseConnectionsCreateOrUpdateResponse = TimeSeriesDatabaseConnection;

/** Optional parameters. */
export declare interface TimeSeriesDatabaseConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Specifies whether or not to attempt to clean up artifacts that were created in order to establish a connection to the time series database. This is a best-effort attempt that will fail if appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data. */
    cleanupConnectionArtifacts?: CleanupConnectionArtifacts;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type TimeSeriesDatabaseConnectionsDeleteResponse = TimeSeriesDatabaseConnection;

/** Optional parameters. */
export declare interface TimeSeriesDatabaseConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TimeSeriesDatabaseConnectionsGetResponse = TimeSeriesDatabaseConnection;

/** Optional parameters. */
export declare interface TimeSeriesDatabaseConnectionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TimeSeriesDatabaseConnectionsListNextResponse = TimeSeriesDatabaseConnectionListResult;

/** Optional parameters. */
export declare interface TimeSeriesDatabaseConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TimeSeriesDatabaseConnectionsListResponse = TimeSeriesDatabaseConnectionListResult;

/**
 * Defines values for TimeSeriesDatabaseConnectionState. \
 * {@link KnownTimeSeriesDatabaseConnectionState} can be used interchangeably with TimeSeriesDatabaseConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Deleting** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **Warning** \
 * **Suspending** \
 * **Restoring** \
 * **Moving** \
 * **Disabled**
 */
export declare type TimeSeriesDatabaseConnectionState = string;

/** The information about the user assigned identity. */
export declare interface UserAssignedIdentity {
    /**
     * The client id of the User Assigned Identity Resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
    /**
     * The object id of the User Assigned Identity Resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
}

export { }
