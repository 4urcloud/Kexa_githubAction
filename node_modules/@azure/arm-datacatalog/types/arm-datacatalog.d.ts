import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Azure Data Catalog. */
export declare interface ADCCatalog extends Resource {
    /** Azure data catalog SKU. */
    sku?: SkuType;
    /** Azure data catalog units. */
    units?: number;
    /** Azure data catalog admin list. */
    admins?: Principals[];
    /** Azure data catalog user list. */
    users?: Principals[];
    /** Azure data catalog provision status. */
    successfullyProvisioned?: boolean;
    /** Automatic unit adjustment enabled or not. */
    enableAutomaticUnitAdjustment?: boolean;
}

/** Interface representing a ADCCatalogs. */
export declare interface ADCCatalogs {
    /**
     * The List catalogs in Resource Group operation lists all the Azure Data Catalogs available under the
     * given resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param options The options parameters.
     */
    listtByResourceGroup(resourceGroupName: string, options?: ADCCatalogsListtByResourceGroupOptionalParams): Promise<ADCCatalogsListtByResourceGroupResponse>;
    /**
     * The Create Azure Data Catalog service operation creates a new data catalog service with the
     * specified parameters. If the specific service already exists, then any patchable properties will be
     * updated and any immutable properties will remain unchanged.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param catalogName The name of the data catalog in the specified subscription and resource group.
     * @param properties Properties supplied to the Create or Update a data catalog.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, catalogName: string, properties: ADCCatalog, options?: ADCCatalogsCreateOrUpdateOptionalParams): Promise<ADCCatalogsCreateOrUpdateResponse>;
    /**
     * The Get Azure Data Catalog Service operation retrieves a json representation of the data catalog.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param catalogName The name of the data catalog in the specified subscription and resource group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, catalogName: string, options?: ADCCatalogsGetOptionalParams): Promise<ADCCatalogsGetResponse>;
    /**
     * The Delete Azure Data Catalog Service operation deletes an existing data catalog.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param catalogName The name of the data catalog in the specified subscription and resource group.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, catalogName: string, options?: ADCCatalogsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * The Delete Azure Data Catalog Service operation deletes an existing data catalog.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param catalogName The name of the data catalog in the specified subscription and resource group.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, catalogName: string, options?: ADCCatalogsDeleteOptionalParams): Promise<void>;
    /**
     * The Update Azure Data Catalog Service operation can be used to update the existing deployment. The
     * update call only supports the properties listed in the PATCH body.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param catalogName The name of the data catalog in the specified subscription and resource group.
     * @param properties Properties supplied to the Update a data catalog.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, catalogName: string, properties: ADCCatalog, options?: ADCCatalogsUpdateOptionalParams): Promise<ADCCatalogsUpdateResponse>;
}

/** Optional parameters. */
export declare interface ADCCatalogsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ADCCatalogsCreateOrUpdateResponse = ADCCatalog;

/** Optional parameters. */
export declare interface ADCCatalogsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ADCCatalogsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ADCCatalogsGetResponse = ADCCatalog;

/** The response from the List Azure Data Catalog operation. */
export declare interface ADCCatalogsListResult {
    /** the list of Azure Data Catalogs. */
    value?: ADCCatalog[];
}

/** Optional parameters. */
export declare interface ADCCatalogsListtByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listtByResourceGroup operation. */
export declare type ADCCatalogsListtByResourceGroupResponse = ADCCatalogsListResult;

/** Optional parameters. */
export declare interface ADCCatalogsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ADCCatalogsUpdateResponse = ADCCatalog;

/** Interface representing a ADCOperations. */
export declare interface ADCOperations {
    /**
     * Lists all the available Azure Data Catalog service operations.
     * @param options The options parameters.
     */
    list(options?: ADCOperationsListOptionalParams): Promise<ADCOperationsListResponse>;
}

/** Optional parameters. */
export declare interface ADCOperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ADCOperationsListResponse = OperationEntityListResult;

export declare class DataCatalogRestClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DataCatalogRestClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DataCatalogRestClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    aDCOperations: ADCOperations;
    aDCCatalogs: ADCCatalogs;
}

/** Optional parameters. */
export declare interface DataCatalogRestClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Known values of {@link SkuType} that the service accepts. */
export declare enum KnownSkuType {
    /** Free */
    Free = "Free",
    /** Standard */
    Standard = "Standard"
}

/** The operation supported by Azure Data Catalog Service. */
export declare interface OperationDisplayInfo {
    /** The description of the operation. */
    description?: string;
    /** The action that users can perform, based on their permission level. */
    operation?: string;
    /** Service provider: Azure Data Catalog Service. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
}

/** The operation supported by Azure Data Catalog Service. */
export declare interface OperationEntity {
    /** Operation name: {provider}/{resource}/{operation}. */
    name?: string;
    /** The operation supported by Azure Data Catalog Service. */
    display?: OperationDisplayInfo;
}

/** The list of Azure data catalog service operation response. */
export declare interface OperationEntityListResult {
    /** The list of operations. */
    value?: OperationEntity[];
}

/** User principals. */
export declare interface Principals {
    /** UPN of the user. */
    upn?: string;
    /** Object Id for the user */
    objectId?: string;
}

/** The Resource model definition. */
export declare interface Resource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location */
    location?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** Resource etag */
    etag?: string;
}

/**
 * Defines values for SkuType. \
 * {@link KnownSkuType} can be used interchangeably with SkuType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Standard**
 */
export declare type SkuType = string;

export { }
