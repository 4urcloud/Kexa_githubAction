/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureDatabricksManagementClient } from "@azure/arm-databricks";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a new workspace.
 *
 * @summary Creates a new workspace.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/PrepareEncryption.json
 */
function createAWorkspaceWhichIsReadyForCustomerManagedKeyCmkEncryption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const workspaceName = "myWorkspace";
        const parameters = {
            location: "westus",
            managedResourceGroupId: "/subscriptions/subid/resourceGroups/myManagedRG",
            parameters: { prepareEncryption: { value: true } }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new workspace.
 *
 * @summary Creates a new workspace.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/WorkspaceManagedDiskEncryptionCreate.json
 */
function createAWorkspaceWithCustomerManagedKeyCmkEncryptionForManagedDisks() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const workspaceName = "myWorkspace";
        const parameters = {
            encryption: {
                entities: {
                    managedDisk: {
                        keySource: "Microsoft.Keyvault",
                        keyVaultProperties: {
                            keyName: "test-cmk-key",
                            keyVaultUri: "https://test-vault-name.vault.azure.net/",
                            keyVersion: "00000000000000000000000000000000"
                        },
                        rotationToLatestKeyVersionEnabled: true
                    }
                }
            },
            location: "westus",
            managedResourceGroupId: "/subscriptions/subid/resourceGroups/myManagedRG"
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new workspace.
 *
 * @summary Creates a new workspace.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/WorkspaceCreate.json
 */
function createOrUpdateWorkspace() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const workspaceName = "myWorkspace";
        const parameters = {
            location: "westus",
            managedResourceGroupId: "/subscriptions/subid/resourceGroups/myManagedRG"
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new workspace.
 *
 * @summary Creates a new workspace.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/WorkspaceCreateWithParameters.json
 */
function createOrUpdateWorkspaceWithCustomParameters() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const workspaceName = "myWorkspace";
        const parameters = {
            location: "westus",
            managedResourceGroupId: "/subscriptions/subid/resourceGroups/myManagedRG",
            parameters: {
                customPrivateSubnetName: { value: "myPrivateSubnet" },
                customPublicSubnetName: { value: "myPublicSubnet" },
                customVirtualNetworkId: {
                    value: "/subscriptions/subid/resourceGroups/rg/providers/Microsoft.Network/virtualNetworks/myNetwork"
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new workspace.
 *
 * @summary Creates a new workspace.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/EnableEncryption.json
 */
function enableCustomerManagedKeyCmkEncryptionOnAWorkspaceWhichIsPreparedForEncryption() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const workspaceName = "myWorkspace";
        const parameters = {
            location: "westus",
            managedResourceGroupId: "/subscriptions/subid/resourceGroups/myManagedRG",
            parameters: {
                encryption: {
                    value: {
                        keyName: "myKeyName",
                        keySource: "Microsoft.Keyvault",
                        keyVaultUri: "https://myKeyVault.vault.azure.net/",
                        keyVersion: "00000000000000000000000000000000"
                    }
                },
                prepareEncryption: { value: true }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new workspace.
 *
 * @summary Creates a new workspace.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/DisableEncryption.json
 */
function revertCustomerManagedKeyCmkEncryptionToMicrosoftManagedKeysEncryptionOnAWorkspace() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const workspaceName = "myWorkspace";
        const parameters = {
            location: "westus",
            managedResourceGroupId: "/subscriptions/subid/resourceGroups/myManagedRG",
            parameters: { encryption: { value: { keySource: "Default" } } }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new workspace.
 *
 * @summary Creates a new workspace.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/WorkspaceManagedDiskEncryptionUpdate.json
 */
function updateAWorkspaceWithCustomerManagedKeyCmkEncryptionForManagedDisks() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const workspaceName = "myWorkspace";
        const parameters = {
            encryption: {
                entities: {
                    managedDisk: {
                        keySource: "Microsoft.Keyvault",
                        keyVaultProperties: {
                            keyName: "test-cmk-key",
                            keyVaultUri: "https://test-vault-name.vault.azure.net/",
                            keyVersion: "00000000000000000000000000000000"
                        },
                        rotationToLatestKeyVersionEnabled: true
                    }
                }
            },
            location: "westus",
            managedResourceGroupId: "/subscriptions/subid/resourceGroups/myManagedRG",
            tags: { mytag1: "myvalue1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createAWorkspaceWhichIsReadyForCustomerManagedKeyCmkEncryption();
        createAWorkspaceWithCustomerManagedKeyCmkEncryptionForManagedDisks();
        createOrUpdateWorkspace();
        createOrUpdateWorkspaceWithCustomParameters();
        enableCustomerManagedKeyCmkEncryptionOnAWorkspaceWhichIsPreparedForEncryption();
        revertCustomerManagedKeyCmkEncryptionToMicrosoftManagedKeysEncryptionOnAWorkspace();
        updateAWorkspaceWithCustomerManagedKeyCmkEncryptionForManagedDisks();
    });
}
main().catch(console.error);
//# sourceMappingURL=workspacesCreateOrUpdateSample.js.map