/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureDatabricksManagementClient } from "@azure/arm-databricks";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates azure databricks accessConnector.
 *
 * @summary Creates or updates azure databricks accessConnector.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-05-01/examples/AccessConnectorCreateOrUpdate.json
 */
function createAnAzureDatabricksAccessConnectorWithSystemAssignedIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const connectorName = "myAccessConnector";
        const parameters = { location: "westus" };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.accessConnectors.beginCreateOrUpdateAndWait(resourceGroupName, connectorName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates azure databricks accessConnector.
 *
 * @summary Creates or updates azure databricks accessConnector.
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-05-01/examples/AccessConnectorCreateOrUpdateWithUserAssigned.json
 */
function createAnAzureDatabricksAccessConnectorWithUserAssignedIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "rg";
        const connectorName = "myAccessConnector";
        const parameters = { location: "westus" };
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const result = yield client.accessConnectors.beginCreateOrUpdateAndWait(resourceGroupName, connectorName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createAnAzureDatabricksAccessConnectorWithSystemAssignedIdentity();
        createAnAzureDatabricksAccessConnectorWithUserAssignedIdentity();
    });
}
main().catch(console.error);
//# sourceMappingURL=accessConnectorsCreateOrUpdateSample.js.map