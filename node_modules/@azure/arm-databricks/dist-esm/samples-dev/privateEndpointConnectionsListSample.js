/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AzureDatabricksManagementClient } from "@azure/arm-databricks";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to List private endpoint connections of the workspace
 *
 * @summary List private endpoint connections of the workspace
 * x-ms-original-file: specification/databricks/resource-manager/Microsoft.Databricks/stable/2023-02-01/examples/ListPrivateEndpointConnections.json
 */
function listPrivateEndpointConnections() {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DATABRICKS_SUBSCRIPTION_ID"] ||
            "11111111-1111-1111-1111-111111111111";
        const resourceGroupName = process.env["DATABRICKS_RESOURCE_GROUP"] || "myResourceGroup";
        const workspaceName = "myWorkspace";
        const credential = new DefaultAzureCredential();
        const client = new AzureDatabricksManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.privateEndpointConnections.list(resourceGroupName, workspaceName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                _c = _f.value;
                _d = false;
                let item = _c;
                resArray.push(item);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        console.log(resArray);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        listPrivateEndpointConnections();
    });
}
main().catch(console.error);
//# sourceMappingURL=privateEndpointConnectionsListSample.js.map