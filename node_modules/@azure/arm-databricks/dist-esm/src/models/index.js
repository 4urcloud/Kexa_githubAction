/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CustomParameterType} that the service accepts. */
export var KnownCustomParameterType;
(function (KnownCustomParameterType) {
    /** Bool */
    KnownCustomParameterType["Bool"] = "Bool";
    /** Object */
    KnownCustomParameterType["Object"] = "Object";
    /** String */
    KnownCustomParameterType["String"] = "String";
})(KnownCustomParameterType || (KnownCustomParameterType = {}));
/** Known values of {@link KeySource} that the service accepts. */
export var KnownKeySource;
(function (KnownKeySource) {
    /** Default */
    KnownKeySource["Default"] = "Default";
    /** MicrosoftKeyvault */
    KnownKeySource["MicrosoftKeyvault"] = "Microsoft.Keyvault";
})(KnownKeySource || (KnownKeySource = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
export var KnownProvisioningState;
(function (KnownProvisioningState) {
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Running */
    KnownProvisioningState["Running"] = "Running";
    /** Ready */
    KnownProvisioningState["Ready"] = "Ready";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Created */
    KnownProvisioningState["Created"] = "Created";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Deleted */
    KnownProvisioningState["Deleted"] = "Deleted";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
})(KnownProvisioningState || (KnownProvisioningState = {}));
/** Known values of {@link EncryptionKeySource} that the service accepts. */
export var KnownEncryptionKeySource;
(function (KnownEncryptionKeySource) {
    /** MicrosoftKeyvault */
    KnownEncryptionKeySource["MicrosoftKeyvault"] = "Microsoft.Keyvault";
})(KnownEncryptionKeySource || (KnownEncryptionKeySource = {}));
/** Known values of {@link PrivateLinkServiceConnectionStatus} that the service accepts. */
export var KnownPrivateLinkServiceConnectionStatus;
(function (KnownPrivateLinkServiceConnectionStatus) {
    /** Pending */
    KnownPrivateLinkServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateLinkServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateLinkServiceConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateLinkServiceConnectionStatus["Disconnected"] = "Disconnected";
})(KnownPrivateLinkServiceConnectionStatus || (KnownPrivateLinkServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export var KnownPrivateEndpointConnectionProvisioningState;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownPrivateEndpointConnectionProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link RequiredNsgRules} that the service accepts. */
export var KnownRequiredNsgRules;
(function (KnownRequiredNsgRules) {
    /** AllRules */
    KnownRequiredNsgRules["AllRules"] = "AllRules";
    /** NoAzureDatabricksRules */
    KnownRequiredNsgRules["NoAzureDatabricksRules"] = "NoAzureDatabricksRules";
    /** NoAzureServiceRules */
    KnownRequiredNsgRules["NoAzureServiceRules"] = "NoAzureServiceRules";
})(KnownRequiredNsgRules || (KnownRequiredNsgRules = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link PeeringState} that the service accepts. */
export var KnownPeeringState;
(function (KnownPeeringState) {
    /** Initiated */
    KnownPeeringState["Initiated"] = "Initiated";
    /** Connected */
    KnownPeeringState["Connected"] = "Connected";
    /** Disconnected */
    KnownPeeringState["Disconnected"] = "Disconnected";
})(KnownPeeringState || (KnownPeeringState = {}));
/** Known values of {@link PeeringProvisioningState} that the service accepts. */
export var KnownPeeringProvisioningState;
(function (KnownPeeringProvisioningState) {
    /** Succeeded */
    KnownPeeringProvisioningState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownPeeringProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownPeeringProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPeeringProvisioningState["Failed"] = "Failed";
})(KnownPeeringProvisioningState || (KnownPeeringProvisioningState = {}));
/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export var KnownManagedServiceIdentityType;
(function (KnownManagedServiceIdentityType) {
    /** None */
    KnownManagedServiceIdentityType["None"] = "None";
    /** SystemAssigned */
    KnownManagedServiceIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownManagedServiceIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownManagedServiceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned,UserAssigned";
})(KnownManagedServiceIdentityType || (KnownManagedServiceIdentityType = {}));
//# sourceMappingURL=index.js.map