import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Information about azure databricks accessConnector. */
export declare interface AccessConnector extends TrackedResource {
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
    /**
     * The system metadata relating to this resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Azure Databricks accessConnector properties */
    properties?: AccessConnectorProperties;
}

/** List of azure databricks accessConnector. */
export declare interface AccessConnectorListResult {
    /** The array of azure databricks accessConnector. */
    value?: AccessConnector[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

export declare interface AccessConnectorProperties {
    /**
     * Provisioning status of the accessConnector.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Interface representing a AccessConnectors. */
export declare interface AccessConnectors {
    /**
     * Gets all the azure databricks accessConnectors within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AccessConnectorsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<AccessConnector>;
    /**
     * Gets all the azure databricks accessConnectors within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: AccessConnectorsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<AccessConnector>;
    /**
     * Gets an azure databricks accessConnector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the azure databricks accessConnector.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, connectorName: string, options?: AccessConnectorsGetOptionalParams): Promise<AccessConnectorsGetResponse>;
    /**
     * Deletes the azure databricks accessConnector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the azure databricks accessConnector.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, connectorName: string, options?: AccessConnectorsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the azure databricks accessConnector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the azure databricks accessConnector.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, connectorName: string, options?: AccessConnectorsDeleteOptionalParams): Promise<void>;
    /**
     * Creates or updates azure databricks accessConnector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the azure databricks accessConnector.
     * @param parameters Parameters supplied to the create or update an azure databricks accessConnector.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, connectorName: string, parameters: AccessConnector, options?: AccessConnectorsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AccessConnectorsCreateOrUpdateResponse>, AccessConnectorsCreateOrUpdateResponse>>;
    /**
     * Creates or updates azure databricks accessConnector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the azure databricks accessConnector.
     * @param parameters Parameters supplied to the create or update an azure databricks accessConnector.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, connectorName: string, parameters: AccessConnector, options?: AccessConnectorsCreateOrUpdateOptionalParams): Promise<AccessConnectorsCreateOrUpdateResponse>;
    /**
     * Updates an azure databricks accessConnector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the azure databricks accessConnector.
     * @param parameters The update to the azure databricks accessConnector.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, connectorName: string, parameters: AccessConnectorUpdate, options?: AccessConnectorsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<AccessConnectorsUpdateResponse>, AccessConnectorsUpdateResponse>>;
    /**
     * Updates an azure databricks accessConnector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the azure databricks accessConnector.
     * @param parameters The update to the azure databricks accessConnector.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, connectorName: string, parameters: AccessConnectorUpdate, options?: AccessConnectorsUpdateOptionalParams): Promise<AccessConnectorsUpdateResponse>;
}

/** Optional parameters. */
export declare interface AccessConnectorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AccessConnectorsCreateOrUpdateResponse = AccessConnector;

/** Optional parameters. */
export declare interface AccessConnectorsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AccessConnectorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AccessConnectorsGetResponse = AccessConnector;

/** Optional parameters. */
export declare interface AccessConnectorsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type AccessConnectorsListByResourceGroupNextResponse = AccessConnectorListResult;

/** Optional parameters. */
export declare interface AccessConnectorsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type AccessConnectorsListByResourceGroupResponse = AccessConnectorListResult;

/** Optional parameters. */
export declare interface AccessConnectorsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type AccessConnectorsListBySubscriptionNextResponse = AccessConnectorListResult;

/** Optional parameters. */
export declare interface AccessConnectorsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type AccessConnectorsListBySubscriptionResponse = AccessConnectorListResult;

/** Optional parameters. */
export declare interface AccessConnectorsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type AccessConnectorsUpdateResponse = AccessConnector;

/** An update to an azure databricks accessConnector. */
export declare interface AccessConnectorUpdate {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Managed service identity (system assigned and/or user assigned identities) */
    identity?: ManagedServiceIdentity;
}

/** AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network. */
export declare interface AddressSpace {
    /** A list of address blocks reserved for this virtual network in CIDR notation. */
    addressPrefixes?: string[];
}

export declare class AzureDatabricksManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureDatabricksManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureDatabricksManagementClientOptionalParams);
    workspaces: Workspaces;
    operations: Operations;
    privateLinkResources: PrivateLinkResources;
    privateEndpointConnections: PrivateEndpointConnections;
    outboundNetworkDependenciesEndpoints: OutboundNetworkDependenciesEndpoints;
    vNetPeering: VNetPeering;
    accessConnectors: AccessConnectors;
}

/** Optional parameters. */
export declare interface AzureDatabricksManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Provides details of the entity that created/updated the workspace. */
export declare interface CreatedBy {
    /**
     * The Object ID that created the workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly oid?: string;
    /**
     * The Personal Object ID corresponding to the object ID above
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly puid?: string;
    /**
     * The application ID of the application that initiated the creation of the workspace. For example, Azure Portal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly applicationId?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for CustomParameterType. \
 * {@link KnownCustomParameterType} can be used interchangeably with CustomParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Bool** \
 * **Object** \
 * **String**
 */
export declare type CustomParameterType = string;

/** The object that contains details of encryption used on the workspace. */
export declare interface Encryption {
    /** The encryption keySource (provider). Possible values (case-insensitive):  Default, Microsoft.Keyvault */
    keySource?: KeySource;
    /** The name of KeyVault key. */
    keyName?: string;
    /** The version of KeyVault key. */
    keyVersion?: string;
    /** The Uri of KeyVault. */
    keyVaultUri?: string;
}

/** Encryption entities for databricks workspace resource. */
export declare interface EncryptionEntitiesDefinition {
    /** Encryption properties for the databricks managed services. */
    managedServices?: EncryptionV2;
    /** Encryption properties for the databricks managed disks. */
    managedDisk?: ManagedDiskEncryption;
}

/**
 * Defines values for EncryptionKeySource. \
 * {@link KnownEncryptionKeySource} can be used interchangeably with EncryptionKeySource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Keyvault**
 */
export declare type EncryptionKeySource = string;

/** The object that contains details of encryption used on the workspace. */
export declare interface EncryptionV2 {
    /** The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Keyvault */
    keySource: EncryptionKeySource;
    /** Key Vault input properties for encryption. */
    keyVaultProperties?: EncryptionV2KeyVaultProperties;
}

/** Key Vault input properties for encryption. */
export declare interface EncryptionV2KeyVaultProperties {
    /** The Uri of KeyVault. */
    keyVaultUri: string;
    /** The name of KeyVault key. */
    keyName: string;
    /** The version of KeyVault key. */
    keyVersion: string;
}

/** A domain name or IP address the Workspace is reaching at. */
export declare interface EndpointDependency {
    /** The domain name of the dependency. */
    domainName?: string;
    /** The Ports used when connecting to domainName. */
    endpointDetails?: EndpointDetail[];
}

/** Connect information from the Workspace to a single endpoint. */
export declare interface EndpointDetail {
    /** An IP Address that Domain Name currently resolves to. */
    ipAddress?: string;
    /** The port an endpoint is connected to. */
    port?: number;
    /** The time in milliseconds it takes for the connection to be created from the Workspace to this IpAddress at this Port. */
    latency?: number;
    /** Whether it is possible to create a connection from the Workspace to this IpAddress at this Port. */
    isAccessible?: boolean;
}

/** Error details. */
export declare interface ErrorDetail {
    /** The error's code. */
    code: string;
    /** A human readable error message. */
    message: string;
    /** Indicates which property in the request is responsible for the error. */
    target?: string;
}

/** The code and message for an error. */
export declare interface ErrorInfo {
    /** A machine readable error code. */
    code: string;
    /** A human readable error message. */
    message: string;
    /** error details. */
    details?: ErrorDetail[];
    /** Inner error details if they exist. */
    innererror?: string;
}

/** Contains details when the response code indicates an error. */
export declare interface ErrorResponse {
    /** The error details. */
    error: ErrorInfo;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The group information for creating a private endpoint on a workspace */
export declare interface GroupIdInformation extends Resource {
    /** The group id properties. */
    properties: GroupIdInformationProperties;
}

/** The properties for a group information object */
export declare interface GroupIdInformationProperties {
    /** The group id */
    groupId?: string;
    /** The required members for a specific group id */
    requiredMembers?: string[];
    /** The required DNS zones for a specific group id */
    requiredZoneNames?: string[];
}

/**
 * Defines values for KeySource. \
 * {@link KnownKeySource} can be used interchangeably with KeySource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Microsoft.Keyvault**
 */
export declare type KeySource = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CustomParameterType} that the service accepts. */
export declare enum KnownCustomParameterType {
    /** Bool */
    Bool = "Bool",
    /** Object */
    Object = "Object",
    /** String */
    String = "String"
}

/** Known values of {@link EncryptionKeySource} that the service accepts. */
export declare enum KnownEncryptionKeySource {
    /** MicrosoftKeyvault */
    MicrosoftKeyvault = "Microsoft.Keyvault"
}

/** Known values of {@link KeySource} that the service accepts. */
export declare enum KnownKeySource {
    /** Default */
    Default = "Default",
    /** MicrosoftKeyvault */
    MicrosoftKeyvault = "Microsoft.Keyvault"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Known values of {@link PeeringProvisioningState} that the service accepts. */
export declare enum KnownPeeringProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PeeringState} that the service accepts. */
export declare enum KnownPeeringState {
    /** Initiated */
    Initiated = "Initiated",
    /** Connected */
    Connected = "Connected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateLinkServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateLinkServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Accepted */
    Accepted = "Accepted",
    /** Running */
    Running = "Running",
    /** Ready */
    Ready = "Ready",
    /** Creating */
    Creating = "Creating",
    /** Created */
    Created = "Created",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link RequiredNsgRules} that the service accepts. */
export declare enum KnownRequiredNsgRules {
    /** AllRules */
    AllRules = "AllRules",
    /** NoAzureDatabricksRules */
    NoAzureDatabricksRules = "NoAzureDatabricksRules",
    /** NoAzureServiceRules */
    NoAzureServiceRules = "NoAzureServiceRules"
}

/** The object that contains details of encryption used on the workspace. */
export declare interface ManagedDiskEncryption {
    /** The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Keyvault */
    keySource: EncryptionKeySource;
    /** Key Vault input properties for encryption. */
    keyVaultProperties: ManagedDiskEncryptionKeyVaultProperties;
    /** Indicate whether the latest key version should be automatically used for Managed Disk Encryption. */
    rotationToLatestKeyVersionEnabled?: boolean;
}

/** Key Vault input properties for encryption. */
export declare interface ManagedDiskEncryptionKeyVaultProperties {
    /** The URI of KeyVault. */
    keyVaultUri: string;
    /** The name of KeyVault key. */
    keyName: string;
    /** The version of KeyVault key. */
    keyVersion: string;
}

/** The Managed Identity details for storage account. */
export declare interface ManagedIdentityConfiguration {
    /**
     * The objectId of the Managed Identity that is linked to the Managed Storage account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant Id where the Managed Identity is created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The type of Identity created. It can be either SystemAssigned or UserAssigned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export declare interface ManagedServiceIdentity {
    /**
     * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
    type: ManagedServiceIdentityType;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type ManagedServiceIdentityType = string;

/** REST API operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: ex Microsoft.Databricks */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
    /** Operation type: Read, write, delete, etc. */
    operation?: string;
    /** Description for the resource operation. */
    description?: string;
}

/** Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** List of Resource Provider operations supported by the Resource Provider resource provider. */
    value?: Operation[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available RP operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** Egress endpoints which Workspace connects to for common purposes. */
export declare interface OutboundEnvironmentEndpoint {
    /** The category of endpoints accessed by the Workspace, e.g. azure-storage, azure-mysql, etc. */
    category?: string;
    /** The endpoints that Workspace connect to */
    endpoints?: EndpointDependency[];
}

/** Interface representing a OutboundNetworkDependenciesEndpoints. */
export declare interface OutboundNetworkDependenciesEndpoints {
    /**
     * Gets the list of endpoints that VNET Injected Workspace calls Azure Databricks Control Plane. You
     * must configure outbound access with these endpoints. For more information, see
     * https://docs.microsoft.com/azure/databricks/administration-guide/cloud-configurations/azure/udr
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: OutboundNetworkDependenciesEndpointsListOptionalParams): Promise<OutboundNetworkDependenciesEndpointsListResponse>;
}

/** Optional parameters. */
export declare interface OutboundNetworkDependenciesEndpointsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OutboundNetworkDependenciesEndpointsListResponse = OutboundEnvironmentEndpoint[];

/**
 * Defines values for PeeringProvisioningState. \
 * {@link KnownPeeringProvisioningState} can be used interchangeably with PeeringProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PeeringProvisioningState = string;

/**
 * Defines values for PeeringState. \
 * {@link KnownPeeringState} can be used interchangeably with PeeringState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initiated** \
 * **Connected** \
 * **Disconnected**
 */
export declare type PeeringState = string;

/** The private endpoint property of a private endpoint connection */
export declare interface PrivateEndpoint {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The private endpoint connection of a workspace */
export declare interface PrivateEndpointConnection {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The private endpoint connection properties. */
    properties: PrivateEndpointConnectionProperties;
}

/** The properties of a private endpoint connection */
export declare interface PrivateEndpointConnectionProperties {
    /** Private endpoint */
    privateEndpoint?: PrivateEndpoint;
    /** GroupIds from the private link service resource. */
    groupIds?: string[];
    /** Private endpoint connection state */
    privateLinkServiceConnectionState: PrivateLinkServiceConnectionState;
    /**
     * Provisioning state of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List private endpoint connections of the workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Get a private endpoint connection properties for a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionsCreateResponse>, PrivateEndpointConnectionsCreateResponse>>;
    /**
     * Update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<PrivateEndpointConnectionsCreateResponse>;
    /**
     * Remove private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Remove private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type PrivateEndpointConnectionsCreateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** List of private link connections. */
export declare interface PrivateEndpointConnectionsList {
    /** The list of returned private endpoint connection. */
    value?: PrivateEndpointConnection[];
    /** The URL to get the next set of endpoint connections. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionsList;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionsList;

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * List private link resources for a given workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: PrivateLinkResourcesListOptionalParams): PagedAsyncIterableIterator<GroupIdInformation>;
    /**
     * Get the specified private link resource for the given group id (sub-resource)
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param groupId The name of the private link resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, groupId: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = GroupIdInformation;

/** The available private link resources for a workspace */
export declare interface PrivateLinkResourcesList {
    /** The list of available private link resources for a workspace */
    value?: GroupIdInformation[];
    /** The URL to get the next set of private link resources. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateLinkResourcesListNextResponse = PrivateLinkResourcesList;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkResourcesListResponse = PrivateLinkResourcesList;

/** The current state of a private endpoint connection */
export declare interface PrivateLinkServiceConnectionState {
    /** The status of a private endpoint connection */
    status: PrivateLinkServiceConnectionStatus;
    /** The description for the current state of a private endpoint connection */
    description?: string;
    /** Actions required for a private endpoint connection */
    actionsRequired?: string;
}

/**
 * Defines values for PrivateLinkServiceConnectionStatus. \
 * {@link KnownPrivateLinkServiceConnectionStatus} can be used interchangeably with PrivateLinkServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type PrivateLinkServiceConnectionStatus = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Running** \
 * **Ready** \
 * **Creating** \
 * **Created** \
 * **Deleting** \
 * **Deleted** \
 * **Canceled** \
 * **Failed** \
 * **Succeeded** \
 * **Updating**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/**
 * Defines values for RequiredNsgRules. \
 * {@link KnownRequiredNsgRules} can be used interchangeably with RequiredNsgRules,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllRules** \
 * **NoAzureDatabricksRules** \
 * **NoAzureServiceRules**
 */
export declare type RequiredNsgRules = string;

/** The core properties of ARM resources */
export declare interface Resource {
    /**
     * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** SKU for the resource. */
export declare interface Sku {
    /** The SKU name. */
    name: string;
    /** The SKU tier. */
    tier?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for a ARM tracked top level resource */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** Peerings in a VirtualNetwork resource */
export declare interface VirtualNetworkPeering {
    /**
     * Name of the virtual network peering resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * type of the virtual network peering resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. */
    allowVirtualNetworkAccess?: boolean;
    /** Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. */
    allowForwardedTraffic?: boolean;
    /** If gateway links can be used in remote virtual networking to link to this virtual network. */
    allowGatewayTransit?: boolean;
    /** If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. */
    useRemoteGateways?: boolean;
    /**  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering). */
    databricksVirtualNetwork?: VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetwork;
    /** The reference to the databricks virtual network address space. */
    databricksAddressSpace?: AddressSpace;
    /**  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering). */
    remoteVirtualNetwork: VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetwork;
    /** The reference to the remote virtual network address space. */
    remoteAddressSpace?: AddressSpace;
    /**
     * The status of the virtual network peering.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly peeringState?: PeeringState;
    /**
     * The provisioning state of the virtual network peering resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PeeringProvisioningState;
}

/** Gets all virtual network peerings under a workspace. */
export declare interface VirtualNetworkPeeringList {
    /** List of virtual network peerings on workspace. */
    value?: VirtualNetworkPeering[];
    /** URL to get the next set of virtual network peering list results if there are any. */
    nextLink?: string;
}

/**  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering). */
export declare interface VirtualNetworkPeeringPropertiesFormatDatabricksVirtualNetwork {
    /** The Id of the databricks virtual network. */
    id?: string;
}

/**  The remote virtual network should be in the same region. See here to learn more (https://docs.microsoft.com/en-us/azure/databricks/administration-guide/cloud-configurations/azure/vnet-peering). */
export declare interface VirtualNetworkPeeringPropertiesFormatRemoteVirtualNetwork {
    /** The Id of the remote virtual network. */
    id?: string;
}

/** Interface representing a VNetPeering. */
export declare interface VNetPeering {
    /**
     * Lists the workspace vNet Peerings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: VNetPeeringListByWorkspaceOptionalParams): PagedAsyncIterableIterator<VirtualNetworkPeering>;
    /**
     * Gets the workspace vNet Peering.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param peeringName The name of the workspace vNet peering.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, peeringName: string, options?: VNetPeeringGetOptionalParams): Promise<VNetPeeringGetResponse>;
    /**
     * Deletes the workspace vNetPeering.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param peeringName The name of the workspace vNet peering.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, peeringName: string, options?: VNetPeeringDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the workspace vNetPeering.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param peeringName The name of the workspace vNet peering.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, peeringName: string, options?: VNetPeeringDeleteOptionalParams): Promise<void>;
    /**
     * Creates vNet Peering for workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param peeringName The name of the workspace vNet peering.
     * @param virtualNetworkPeeringParameters Parameters supplied to the create workspace vNet Peering.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, peeringName: string, virtualNetworkPeeringParameters: VirtualNetworkPeering, options?: VNetPeeringCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VNetPeeringCreateOrUpdateResponse>, VNetPeeringCreateOrUpdateResponse>>;
    /**
     * Creates vNet Peering for workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param peeringName The name of the workspace vNet peering.
     * @param virtualNetworkPeeringParameters Parameters supplied to the create workspace vNet Peering.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, peeringName: string, virtualNetworkPeeringParameters: VirtualNetworkPeering, options?: VNetPeeringCreateOrUpdateOptionalParams): Promise<VNetPeeringCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface VNetPeeringCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VNetPeeringCreateOrUpdateResponse = VirtualNetworkPeering;

/** Optional parameters. */
export declare interface VNetPeeringDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VNetPeeringGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VNetPeeringGetResponse = VirtualNetworkPeering;

/** Optional parameters. */
export declare interface VNetPeeringListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type VNetPeeringListByWorkspaceNextResponse = VirtualNetworkPeeringList;

/** Optional parameters. */
export declare interface VNetPeeringListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type VNetPeeringListByWorkspaceResponse = VirtualNetworkPeeringList;

/** Information about workspace. */
export declare interface Workspace extends TrackedResource {
    /** The SKU of the resource. */
    sku?: Sku;
    /**
     * The system metadata relating to this resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The managed resource group Id. */
    managedResourceGroupId: string;
    /** The workspace's custom parameters. */
    parameters?: WorkspaceCustomParameters;
    /**
     * The workspace provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The blob URI where the UI definition file is located. */
    uiDefinitionUri?: string;
    /** The workspace provider authorizations. */
    authorizations?: WorkspaceProviderAuthorization[];
    /** Indicates the Object ID, PUID and Application ID of entity that created the workspace. */
    createdBy?: CreatedBy;
    /** Indicates the Object ID, PUID and Application ID of entity that last updated the workspace. */
    updatedBy?: CreatedBy;
    /**
     * Specifies the date and time when the workspace is created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDateTime?: Date;
    /**
     * The unique identifier of the databricks workspace in databricks control plane.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceId?: string;
    /**
     * The workspace URL which is of the format 'adb-{workspaceId}.{random}.azuredatabricks.net'
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceUrl?: string;
    /** The details of Managed Identity of Storage Account */
    storageAccountIdentity?: ManagedIdentityConfiguration;
    /** The details of Managed Identity of Disk Encryption Set used for Managed Disk Encryption */
    managedDiskIdentity?: ManagedIdentityConfiguration;
    /**
     * The resource Id of the managed disk encryption set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly diskEncryptionSetId?: string;
    /** Encryption properties for databricks workspace */
    encryption?: WorkspacePropertiesEncryption;
    /**
     * Private endpoint connections created on the workspace
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** The network access type for accessing workspace. Set value to disabled to access workspace only via private link. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Gets or sets a value indicating whether data plane (clusters) to control plane communication happen over private endpoint. Supported values are 'AllRules' and 'NoAzureDatabricksRules'. 'NoAzureServiceRules' value is for internal use only. */
    requiredNsgRules?: RequiredNsgRules;
}

/** The value which should be used for this field. */
export declare interface WorkspaceCustomBooleanParameter {
    /**
     * The type of variable that this is
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: CustomParameterType;
    /** The value which should be used for this field. */
    value: boolean;
}

/** The value which should be used for this field. */
export declare interface WorkspaceCustomObjectParameter {
    /**
     * The type of variable that this is
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: CustomParameterType;
    /** The value which should be used for this field. */
    value: Record<string, unknown>;
}

/** Custom Parameters used for Cluster Creation. */
export declare interface WorkspaceCustomParameters {
    /** The ID of a Azure Machine Learning workspace to link with Databricks workspace */
    amlWorkspaceId?: WorkspaceCustomStringParameter;
    /** The ID of a Virtual Network where this Databricks Cluster should be created */
    customVirtualNetworkId?: WorkspaceCustomStringParameter;
    /** The name of a Public Subnet within the Virtual Network */
    customPublicSubnetName?: WorkspaceCustomStringParameter;
    /** The name of the Private Subnet within the Virtual Network */
    customPrivateSubnetName?: WorkspaceCustomStringParameter;
    /** Should the Public IP be Disabled? */
    enableNoPublicIp?: WorkspaceCustomBooleanParameter;
    /** Name of the outbound Load Balancer Backend Pool for Secure Cluster Connectivity (No Public IP). */
    loadBalancerBackendPoolName?: WorkspaceCustomStringParameter;
    /** Resource URI of Outbound Load balancer for Secure Cluster Connectivity (No Public IP) workspace. */
    loadBalancerId?: WorkspaceCustomStringParameter;
    /** Name of the NAT gateway for Secure Cluster Connectivity (No Public IP) workspace subnets. */
    natGatewayName?: WorkspaceCustomStringParameter;
    /** Name of the Public IP for No Public IP workspace with managed vNet. */
    publicIpName?: WorkspaceCustomStringParameter;
    /** Prepare the workspace for encryption. Enables the Managed Identity for managed storage account. */
    prepareEncryption?: WorkspaceCustomBooleanParameter;
    /** Contains the encryption details for Customer-Managed Key (CMK) enabled workspace. */
    encryption?: WorkspaceEncryptionParameter;
    /** A boolean indicating whether or not the DBFS root file system will be enabled with secondary layer of encryption with platform managed keys for data at rest. */
    requireInfrastructureEncryption?: WorkspaceCustomBooleanParameter;
    /** Default DBFS storage account name. */
    storageAccountName?: WorkspaceCustomStringParameter;
    /** Storage account SKU name, ex: Standard_GRS, Standard_LRS. Refer https://aka.ms/storageskus for valid inputs. */
    storageAccountSkuName?: WorkspaceCustomStringParameter;
    /** Address prefix for Managed virtual network. Default value for this input is 10.139. */
    vnetAddressPrefix?: WorkspaceCustomStringParameter;
    /**
     * Tags applied to resources under Managed resource group. These can be updated by updating tags at workspace level.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceTags?: WorkspaceCustomObjectParameter;
}

/** The Value. */
export declare interface WorkspaceCustomStringParameter {
    /**
     * The type of variable that this is
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: CustomParameterType;
    /** The value which should be used for this field. */
    value: string;
}

/** The object that contains details of encryption used on the workspace. */
export declare interface WorkspaceEncryptionParameter {
    /**
     * The type of variable that this is
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: CustomParameterType;
    /** The value which should be used for this field. */
    value?: Encryption;
}

/** List of workspaces. */
export declare interface WorkspaceListResult {
    /** The array of workspaces. */
    value?: Workspace[];
    /** The URL to use for getting the next set of results. */
    nextLink?: string;
}

/** Encryption properties for databricks workspace */
export declare interface WorkspacePropertiesEncryption {
    /** Encryption entities definition for the workspace. */
    entities: EncryptionEntitiesDefinition;
}

/** The workspace provider authorization. */
export declare interface WorkspaceProviderAuthorization {
    /** The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the workspace resources. */
    principalId: string;
    /** The provider's role definition identifier. This role will define all the permissions that the provider must have on the workspace's container resource group. This role definition cannot have permission to delete the resource group. */
    roleDefinitionId: string;
}

/** Interface representing a Workspaces. */
export declare interface Workspaces {
    /**
     * Gets all the workspaces within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets all the workspaces within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: WorkspacesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspacesGetOptionalParams): Promise<WorkspacesGetResponse>;
    /**
     * Deletes the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<void>;
    /**
     * Creates a new workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters Parameters supplied to the create or update a workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, parameters: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<WorkspacesCreateOrUpdateResponse>, WorkspacesCreateOrUpdateResponse>>;
    /**
     * Creates a new workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters Parameters supplied to the create or update a workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, parameters: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<WorkspacesCreateOrUpdateResponse>;
    /**
     * Updates a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The update to the workspace.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, parameters: WorkspaceUpdate, options?: WorkspacesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<WorkspacesUpdateResponse>, WorkspacesUpdateResponse>>;
    /**
     * Updates a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The update to the workspace.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, parameters: WorkspaceUpdate, options?: WorkspacesUpdateOptionalParams): Promise<WorkspacesUpdateResponse>;
}

/** Optional parameters. */
export declare interface WorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type WorkspacesListByResourceGroupNextResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkspacesListByResourceGroupResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type WorkspacesListBySubscriptionNextResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type WorkspacesListBySubscriptionResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type WorkspacesUpdateResponse = Workspace;

/** An update to a workspace. */
export declare interface WorkspaceUpdate {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

export { }
