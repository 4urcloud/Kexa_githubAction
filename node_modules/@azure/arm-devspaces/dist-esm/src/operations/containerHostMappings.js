/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing ContainerHostMappings operations. */
export class ContainerHostMappingsImpl {
    /**
     * Initialize a new instance of the class ContainerHostMappings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns container host mapping object for a container host resource ID if an associated controller
     * exists.
     * @param resourceGroupName Resource group to which the resource belongs.
     * @param location Location of the container host.
     * @param containerHostMapping Container host mapping object specifying the Container host resource ID
     *                             and its associated Controller resource.
     * @param options The options parameters.
     */
    getContainerHostMapping(resourceGroupName, location, containerHostMapping, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, containerHostMapping, options }, getContainerHostMappingOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getContainerHostMappingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/locations/{location}/checkContainerHostMapping",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ContainerHostMapping
        },
        204: {},
        default: {
            bodyMapper: Mappers.DevSpacesErrorResponse
        }
    },
    requestBody: Parameters.containerHostMapping,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.location
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=containerHostMappings.js.map