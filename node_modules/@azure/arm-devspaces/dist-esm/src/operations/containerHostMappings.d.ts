import { ContainerHostMappings } from "../operationsInterfaces";
import { DevSpacesManagementClient } from "../devSpacesManagementClient";
import { ContainerHostMapping, ContainerHostMappingsGetContainerHostMappingOptionalParams, ContainerHostMappingsGetContainerHostMappingResponse } from "../models";
/** Class containing ContainerHostMappings operations. */
export declare class ContainerHostMappingsImpl implements ContainerHostMappings {
    private readonly client;
    /**
     * Initialize a new instance of the class ContainerHostMappings class.
     * @param client Reference to the service client
     */
    constructor(client: DevSpacesManagementClient);
    /**
     * Returns container host mapping object for a container host resource ID if an associated controller
     * exists.
     * @param resourceGroupName Resource group to which the resource belongs.
     * @param location Location of the container host.
     * @param containerHostMapping Container host mapping object specifying the Container host resource ID
     *                             and its associated Controller resource.
     * @param options The options parameters.
     */
    getContainerHostMapping(resourceGroupName: string, location: string, containerHostMapping: ContainerHostMapping, options?: ContainerHostMappingsGetContainerHostMappingOptionalParams): Promise<ContainerHostMappingsGetContainerHostMappingResponse>;
}
//# sourceMappingURL=containerHostMappings.d.ts.map