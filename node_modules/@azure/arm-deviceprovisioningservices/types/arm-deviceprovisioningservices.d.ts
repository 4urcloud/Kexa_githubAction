import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for AccessRightsDescription. \
 * {@link KnownAccessRightsDescription} can be used interchangeably with AccessRightsDescription,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceConfig** \
 * **EnrollmentRead** \
 * **EnrollmentWrite** \
 * **DeviceConnect** \
 * **RegistrationStatusRead** \
 * **RegistrationStatusWrite**
 */
export declare type AccessRightsDescription = string;

/**
 * Defines values for AllocationPolicy. \
 * {@link KnownAllocationPolicy} can be used interchangeably with AllocationPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hashed** \
 * **GeoLatency** \
 * **Static**
 */
export declare type AllocationPolicy = string;

/** Result of a long running operation. */
export declare interface AsyncOperationResult {
    /** current status of a long running operation. */
    status?: string;
    /** Error message containing code, description and details */
    error?: ErrorMessage;
}

/** The JSON-serialized X509 Certificate. */
export declare interface CertificateBodyDescription {
    /** Base-64 representation of the X509 leaf certificate .cer file or just .pem file content. */
    certificate?: string;
    /** True indicates that the certificate will be created in verified state and proof of possession will not be required. */
    isVerified?: boolean;
}

/** The JSON-serialized array of Certificate objects. */
export declare interface CertificateListDescription {
    /** The array of Certificate objects. */
    value?: CertificateResponse[];
}

/** The description of an X509 CA Certificate. */
export declare interface CertificateProperties {
    /**
     * The certificate's subject name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subject?: string;
    /**
     * The certificate's expiration date and time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiry?: Date;
    /**
     * The certificate's thumbprint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly thumbprint?: string;
    /** Determines whether certificate has been verified. */
    isVerified?: boolean;
    /** base-64 representation of X509 certificate .cer file or just .pem file content. */
    certificate?: Uint8Array;
    /**
     * The certificate's creation date and time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly created?: Date;
    /**
     * The certificate's last update date and time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updated?: Date;
}

/**
 * Defines values for CertificatePurpose. \
 * {@link KnownCertificatePurpose} can be used interchangeably with CertificatePurpose,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **clientAuthentication** \
 * **serverAuthentication**
 */
export declare type CertificatePurpose = string;

/** The X509 Certificate. */
export declare interface CertificateResponse {
    /** properties of a certificate */
    properties?: CertificateProperties;
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The entity tag.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Interface representing a DpsCertificate. */
export declare interface DpsCertificate {
    /**
     * Get the certificate from the provisioning service.
     * @param certificateName Name of the certificate to retrieve.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of the provisioning service the certificate is associated with.
     * @param options The options parameters.
     */
    get(certificateName: string, resourceGroupName: string, provisioningServiceName: string, options?: DpsCertificateGetOptionalParams): Promise<DpsCertificateGetResponse>;
    /**
     * Add new certificate or update an existing certificate.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName The name of the provisioning service.
     * @param certificateName The name of the certificate create or update.
     * @param certificateDescription The certificate body.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, provisioningServiceName: string, certificateName: string, certificateDescription: CertificateResponse, options?: DpsCertificateCreateOrUpdateOptionalParams): Promise<DpsCertificateCreateOrUpdateResponse>;
    /**
     * Deletes the specified certificate associated with the Provisioning Service
     * @param resourceGroupName Resource group identifier.
     * @param ifMatch ETag of the certificate
     * @param provisioningServiceName The name of the provisioning service.
     * @param certificateName This is a mandatory field, and is the logical name of the certificate that
     *                        the provisioning service will access by.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, ifMatch: string, provisioningServiceName: string, certificateName: string, options?: DpsCertificateDeleteOptionalParams): Promise<void>;
    /**
     * Get all the certificates tied to the provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, provisioningServiceName: string, options?: DpsCertificateListOptionalParams): Promise<DpsCertificateListResponse>;
    /**
     * Generate verification code for Proof of Possession.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service
     *                        uses to access.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and
     *                ignored while creating a brand new certificate.
     * @param resourceGroupName name of resource group.
     * @param provisioningServiceName Name of provisioning service.
     * @param options The options parameters.
     */
    generateVerificationCode(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, options?: DpsCertificateGenerateVerificationCodeOptionalParams): Promise<DpsCertificateGenerateVerificationCodeResponse>;
    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying
     * pre uploaded certificate.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service
     *                        uses to access.
     * @param ifMatch ETag of the certificate.
     * @param resourceGroupName Resource group name.
     * @param provisioningServiceName Provisioning service name.
     * @param request The name of the certificate
     * @param options The options parameters.
     */
    verifyCertificate(certificateName: string, ifMatch: string, resourceGroupName: string, provisioningServiceName: string, request: VerificationCodeRequest, options?: DpsCertificateVerifyCertificateOptionalParams): Promise<DpsCertificateVerifyCertificateResponse>;
}

/** Optional parameters. */
export declare interface DpsCertificateCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. */
    ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DpsCertificateCreateOrUpdateResponse = CertificateResponse;

/** Optional parameters. */
export declare interface DpsCertificateDeleteOptionalParams extends coreClient.OperationOptions {
    /** This is optional, and it is the Common Name of the certificate. */
    certificateName1?: string;
    /** Raw data within the certificate. */
    certificateRawBytes?: Uint8Array;
    /** Indicates if certificate has been verified by owner of the private key. */
    certificateIsVerified?: boolean;
    /** A description that mentions the purpose of the certificate. */
    certificatePurpose?: CertificatePurpose;
    /** Time the certificate is created. */
    certificateCreated?: Date;
    /** Time the certificate is last updated. */
    certificateLastUpdated?: Date;
    /** Indicates if the certificate contains a private key. */
    certificateHasPrivateKey?: boolean;
    /** Random number generated to indicate Proof of Possession. */
    certificateNonce?: string;
}

/** Optional parameters. */
export declare interface DpsCertificateGenerateVerificationCodeOptionalParams extends coreClient.OperationOptions {
    /** Common Name for the certificate. */
    certificateName1?: string;
    /** Raw data of certificate. */
    certificateRawBytes?: Uint8Array;
    /** Indicates if the certificate has been verified by owner of the private key. */
    certificateIsVerified?: boolean;
    /** Description mentioning the purpose of the certificate. */
    certificatePurpose?: CertificatePurpose;
    /** Certificate creation time. */
    certificateCreated?: Date;
    /** Certificate last updated time. */
    certificateLastUpdated?: Date;
    /** Indicates if the certificate contains private key. */
    certificateHasPrivateKey?: boolean;
    /** Random number generated to indicate Proof of Possession. */
    certificateNonce?: string;
}

/** Contains response data for the generateVerificationCode operation. */
export declare type DpsCertificateGenerateVerificationCodeResponse = VerificationCodeResponse;

/** Optional parameters. */
export declare interface DpsCertificateGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the certificate. */
    ifMatch?: string;
}

/** Contains response data for the get operation. */
export declare type DpsCertificateGetResponse = CertificateResponse;

/** Optional parameters. */
export declare interface DpsCertificateListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DpsCertificateListResponse = CertificateListDescription;

/** Optional parameters. */
export declare interface DpsCertificateVerifyCertificateOptionalParams extends coreClient.OperationOptions {
    /** Common Name for the certificate. */
    certificateName1?: string;
    /** Raw data of certificate. */
    certificateRawBytes?: Uint8Array;
    /** Indicates if the certificate has been verified by owner of the private key. */
    certificateIsVerified?: boolean;
    /** Describe the purpose of the certificate. */
    certificatePurpose?: CertificatePurpose;
    /** Certificate creation time. */
    certificateCreated?: Date;
    /** Certificate last updated time. */
    certificateLastUpdated?: Date;
    /** Indicates if the certificate contains private key. */
    certificateHasPrivateKey?: boolean;
    /** Random number generated to indicate Proof of Possession. */
    certificateNonce?: string;
}

/** Contains response data for the verifyCertificate operation. */
export declare type DpsCertificateVerifyCertificateResponse = CertificateResponse;

/** Error details. */
export declare interface ErrorDetails {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The HTTP status code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly httpStatusCode?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: string;
}

/** Error response containing message and code. */
export declare interface ErrorMessage {
    /** standard error code */
    code?: string;
    /** standard error description */
    message?: string;
    /** detailed summary of error */
    details?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The group information for creating a private endpoint on a provisioning service */
export declare interface GroupIdInformation {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The properties for a group information object */
    properties: GroupIdInformationProperties;
}

/** The properties for a group information object */
export declare interface GroupIdInformationProperties {
    /** The group id */
    groupId?: string;
    /** The required members for a specific group id */
    requiredMembers?: string[];
    /** The required DNS zones for a specific group id */
    requiredZoneNames?: string[];
}

export declare class IotDpsClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the IotDpsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription identifier.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: IotDpsClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    dpsCertificate: DpsCertificate;
    iotDpsResource: IotDpsResource;
}

/** Optional parameters. */
export declare interface IotDpsClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope */
export declare interface IotDpsPropertiesDescription {
    /** Current state of the provisioning service. */
    state?: State;
    /** Whether requests from Public Network are allowed */
    publicNetworkAccess?: PublicNetworkAccess;
    /** The IP filter rules. */
    ipFilterRules?: IpFilterRule[];
    /** Private endpoint connections created on this IotHub */
    privateEndpointConnections?: PrivateEndpointConnection[];
    /** The ARM provisioning state of the provisioning service. */
    provisioningState?: string;
    /** List of IoT hubs associated with this provisioning service. */
    iotHubs?: IotHubDefinitionDescription[];
    /** Allocation policy to be used by this provisioning service. */
    allocationPolicy?: AllocationPolicy;
    /**
     * Service endpoint for provisioning service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceOperationsHostName?: string;
    /**
     * Device endpoint for this provisioning service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deviceProvisioningHostName?: string;
    /**
     * Unique identifier of this provisioning service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly idScope?: string;
    /** List of authorization keys for a provisioning service. */
    authorizationPolicies?: SharedAccessSignatureAuthorizationRuleAccessRightsDescription[];
    /**
     * Optional.
     * Indicates if the DPS instance has Data Residency enabled, removing the cross geo-pair disaster recovery.
     */
    enableDataResidency?: boolean;
}

/** Interface representing a IotDpsResource. */
export declare interface IotDpsResource {
    /**
     * List all the provisioning services for a given subscription id.
     * @param options The options parameters.
     */
    listBySubscription(options?: IotDpsResourceListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ProvisioningServiceDescription>;
    /**
     * Get a list of all provisioning services in the given resource group.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: IotDpsResourceListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ProvisioningServiceDescription>;
    /**
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param options The options parameters.
     */
    listValidSkus(provisioningServiceName: string, resourceGroupName: string, options?: IotDpsResourceListValidSkusOptionalParams): PagedAsyncIterableIterator<IotDpsSkuDefinition>;
    /**
     * List the primary and secondary keys for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param resourceGroupName resource group name
     * @param options The options parameters.
     */
    listKeys(provisioningServiceName: string, resourceGroupName: string, options?: IotDpsResourceListKeysOptionalParams): PagedAsyncIterableIterator<SharedAccessSignatureAuthorizationRuleAccessRightsDescription>;
    /**
     * Get the metadata of the provisioning service without SAS keys.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    get(provisioningServiceName: string, resourceGroupName: string, options?: IotDpsResourceGetOptionalParams): Promise<IotDpsResourceGetResponse>;
    /**
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is
     * to retrieve the provisioning service metadata and security metadata, and then combine them with the
     * modified values in a new body to update the provisioning service.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param iotDpsDescription Description of the provisioning service to create or update.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: ProvisioningServiceDescription, options?: IotDpsResourceCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<IotDpsResourceCreateOrUpdateResponse>, IotDpsResourceCreateOrUpdateResponse>>;
    /**
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is
     * to retrieve the provisioning service metadata and security metadata, and then combine them with the
     * modified values in a new body to update the provisioning service.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param iotDpsDescription Description of the provisioning service to create or update.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, provisioningServiceName: string, iotDpsDescription: ProvisioningServiceDescription, options?: IotDpsResourceCreateOrUpdateOptionalParams): Promise<IotDpsResourceCreateOrUpdateResponse>;
    /**
     * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param provisioningServiceTags Updated tag information to set into the provisioning service
     *                                instance.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: TagsResource, options?: IotDpsResourceUpdateOptionalParams): Promise<PollerLike<PollOperationState<IotDpsResourceUpdateResponse>, IotDpsResourceUpdateResponse>>;
    /**
     * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param provisioningServiceTags Updated tag information to set into the provisioning service
     *                                instance.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, provisioningServiceName: string, provisioningServiceTags: TagsResource, options?: IotDpsResourceUpdateOptionalParams): Promise<IotDpsResourceUpdateResponse>;
    /**
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    beginDelete(provisioningServiceName: string, resourceGroupName: string, options?: IotDpsResourceDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    beginDeleteAndWait(provisioningServiceName: string, resourceGroupName: string, options?: IotDpsResourceDeleteOptionalParams): Promise<void>;
    /**
     * Gets the status of a long running operation, such as create, update or delete a provisioning
     * service.
     * @param operationId Operation id corresponding to long running operation. Use this to poll for the
     *                    status.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service that the operation is running on.
     * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating
     *                  the long running operation.
     * @param options The options parameters.
     */
    getOperationResult(operationId: string, resourceGroupName: string, provisioningServiceName: string, asyncinfo: string, options?: IotDpsResourceGetOperationResultOptionalParams): Promise<IotDpsResourceGetOperationResultResponse>;
    /**
     * Check if a provisioning service name is available. This will validate if the name is syntactically
     * valid and if the name is usable
     * @param argumentsParam Set the name parameter in the OperationInputs structure to the name of the
     *                       provisioning service to check.
     * @param options The options parameters.
     */
    checkProvisioningServiceNameAvailability(argumentsParam: OperationInputs, options?: IotDpsResourceCheckProvisioningServiceNameAvailabilityOptionalParams): Promise<IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse>;
    /**
     * List primary and secondary keys for a specific key name
     * @param provisioningServiceName Name of the provisioning service.
     * @param keyName Logical key name to get key-values for.
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param options The options parameters.
     */
    listKeysForKeyName(provisioningServiceName: string, keyName: string, resourceGroupName: string, options?: IotDpsResourceListKeysForKeyNameOptionalParams): Promise<IotDpsResourceListKeysForKeyNameResponse>;
    /**
     * List private link resources for the given provisioning service
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param options The options parameters.
     */
    listPrivateLinkResources(resourceGroupName: string, resourceName: string, options?: IotDpsResourceListPrivateLinkResourcesOptionalParams): Promise<IotDpsResourceListPrivateLinkResourcesResponse>;
    /**
     * Get the specified private link resource for the given provisioning service
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param groupId The name of the private link resource
     * @param options The options parameters.
     */
    getPrivateLinkResources(resourceGroupName: string, resourceName: string, groupId: string, options?: IotDpsResourceGetPrivateLinkResourcesOptionalParams): Promise<IotDpsResourceGetPrivateLinkResourcesResponse>;
    /**
     * List private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param options The options parameters.
     */
    listPrivateEndpointConnections(resourceGroupName: string, resourceName: string, options?: IotDpsResourceListPrivateEndpointConnectionsOptionalParams): Promise<IotDpsResourceListPrivateEndpointConnectionsResponse>;
    /**
     * Get private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    getPrivateEndpointConnection(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: IotDpsResourceGetPrivateEndpointConnectionOptionalParams): Promise<IotDpsResourceGetPrivateEndpointConnectionResponse>;
    /**
     * Create or update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreateOrUpdatePrivateEndpointConnection(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: IotDpsResourceCreateOrUpdatePrivateEndpointConnectionOptionalParams): Promise<PollerLike<PollOperationState<IotDpsResourceCreateOrUpdatePrivateEndpointConnectionResponse>, IotDpsResourceCreateOrUpdatePrivateEndpointConnectionResponse>>;
    /**
     * Create or update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreateOrUpdatePrivateEndpointConnectionAndWait(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: IotDpsResourceCreateOrUpdatePrivateEndpointConnectionOptionalParams): Promise<IotDpsResourceCreateOrUpdatePrivateEndpointConnectionResponse>;
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeletePrivateEndpointConnection(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: IotDpsResourceDeletePrivateEndpointConnectionOptionalParams): Promise<PollerLike<PollOperationState<IotDpsResourceDeletePrivateEndpointConnectionResponse>, IotDpsResourceDeletePrivateEndpointConnectionResponse>>;
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeletePrivateEndpointConnectionAndWait(resourceGroupName: string, resourceName: string, privateEndpointConnectionName: string, options?: IotDpsResourceDeletePrivateEndpointConnectionOptionalParams): Promise<IotDpsResourceDeletePrivateEndpointConnectionResponse>;
}

/** Optional parameters. */
export declare interface IotDpsResourceCheckProvisioningServiceNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkProvisioningServiceNameAvailability operation. */
export declare type IotDpsResourceCheckProvisioningServiceNameAvailabilityResponse = NameAvailabilityInfo;

/** Optional parameters. */
export declare interface IotDpsResourceCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IotDpsResourceCreateOrUpdatePrivateEndpointConnectionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdatePrivateEndpointConnection operation. */
export declare type IotDpsResourceCreateOrUpdatePrivateEndpointConnectionResponse = PrivateEndpointConnection;

/** Contains response data for the createOrUpdate operation. */
export declare type IotDpsResourceCreateOrUpdateResponse = ProvisioningServiceDescription;

/** Optional parameters. */
export declare interface IotDpsResourceDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for IotDpsResource_deletePrivateEndpointConnection operation. */
export declare interface IotDpsResourceDeletePrivateEndpointConnectionHeaders {
    /** Operation Status Location URI */
    azureAsyncOperation?: string;
    /** Operation Status Location URI */
    location?: string;
    /** Retry After */
    retryAfter?: string;
}

/** Optional parameters. */
export declare interface IotDpsResourceDeletePrivateEndpointConnectionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deletePrivateEndpointConnection operation. */
export declare type IotDpsResourceDeletePrivateEndpointConnectionResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface IotDpsResourceGetOperationResultOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getOperationResult operation. */
export declare type IotDpsResourceGetOperationResultResponse = AsyncOperationResult;

/** Optional parameters. */
export declare interface IotDpsResourceGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IotDpsResourceGetPrivateEndpointConnectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPrivateEndpointConnection operation. */
export declare type IotDpsResourceGetPrivateEndpointConnectionResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface IotDpsResourceGetPrivateLinkResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPrivateLinkResources operation. */
export declare type IotDpsResourceGetPrivateLinkResourcesResponse = GroupIdInformation;

/** Contains response data for the get operation. */
export declare type IotDpsResourceGetResponse = ProvisioningServiceDescription;

/** Optional parameters. */
export declare interface IotDpsResourceListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type IotDpsResourceListByResourceGroupNextResponse = ProvisioningServiceDescriptionListResult;

/** Optional parameters. */
export declare interface IotDpsResourceListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type IotDpsResourceListByResourceGroupResponse = ProvisioningServiceDescriptionListResult;

/** Optional parameters. */
export declare interface IotDpsResourceListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type IotDpsResourceListBySubscriptionNextResponse = ProvisioningServiceDescriptionListResult;

/** Optional parameters. */
export declare interface IotDpsResourceListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type IotDpsResourceListBySubscriptionResponse = ProvisioningServiceDescriptionListResult;

/** Optional parameters. */
export declare interface IotDpsResourceListKeysForKeyNameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeysForKeyName operation. */
export declare type IotDpsResourceListKeysForKeyNameResponse = SharedAccessSignatureAuthorizationRuleAccessRightsDescription;

/** Optional parameters. */
export declare interface IotDpsResourceListKeysNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeysNext operation. */
export declare type IotDpsResourceListKeysNextResponse = SharedAccessSignatureAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface IotDpsResourceListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type IotDpsResourceListKeysResponse = SharedAccessSignatureAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface IotDpsResourceListPrivateEndpointConnectionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPrivateEndpointConnections operation. */
export declare type IotDpsResourceListPrivateEndpointConnectionsResponse = PrivateEndpointConnection[];

/** Optional parameters. */
export declare interface IotDpsResourceListPrivateLinkResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPrivateLinkResources operation. */
export declare type IotDpsResourceListPrivateLinkResourcesResponse = PrivateLinkResources;

/** Optional parameters. */
export declare interface IotDpsResourceListValidSkusNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listValidSkusNext operation. */
export declare type IotDpsResourceListValidSkusNextResponse = IotDpsSkuDefinitionListResult;

/** Optional parameters. */
export declare interface IotDpsResourceListValidSkusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listValidSkus operation. */
export declare type IotDpsResourceListValidSkusResponse = IotDpsSkuDefinitionListResult;

/** Optional parameters. */
export declare interface IotDpsResourceUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type IotDpsResourceUpdateResponse = ProvisioningServiceDescription;

/**
 * Defines values for IotDpsSku. \
 * {@link KnownIotDpsSku} can be used interchangeably with IotDpsSku,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **S1**
 */
export declare type IotDpsSku = string;

/** Available SKUs of tier and units. */
export declare interface IotDpsSkuDefinition {
    /** Sku name. */
    name?: IotDpsSku;
}

/** List of available SKUs. */
export declare interface IotDpsSkuDefinitionListResult {
    /** The list of SKUs */
    value?: IotDpsSkuDefinition[];
    /**
     * The next link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** List of possible provisioning service SKUs. */
export declare interface IotDpsSkuInfo {
    /** Sku name. */
    name?: IotDpsSku;
    /**
     * Pricing tier name of the provisioning service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: string;
    /** The number of units to provision */
    capacity?: number;
}

/** Description of the IoT hub. */
export declare interface IotHubDefinitionDescription {
    /** flag for applying allocationPolicy or not for a given iot hub. */
    applyAllocationPolicy?: boolean;
    /** weight to apply for a given iot h. */
    allocationWeight?: number;
    /**
     * Host name of the IoT hub.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Connection string of the IoT hub. */
    connectionString: string;
    /** ARM region of the IoT hub. */
    location: string;
}

/** Defines values for IpFilterActionType. */
export declare type IpFilterActionType = "Accept" | "Reject";

/** The IP filter rules for a provisioning Service. */
export declare interface IpFilterRule {
    /** The name of the IP filter rule. */
    filterName: string;
    /** The desired action for requests captured by this rule. */
    action: IpFilterActionType;
    /** A string that contains the IP address range in CIDR notation for the rule. */
    ipMask: string;
    /** Target for requests captured by this rule. */
    target?: IpFilterTargetType;
}

/** Defines values for IpFilterTargetType. */
export declare type IpFilterTargetType = "all" | "serviceApi" | "deviceApi";

/** Known values of {@link AccessRightsDescription} that the service accepts. */
export declare enum KnownAccessRightsDescription {
    /** ServiceConfig */
    ServiceConfig = "ServiceConfig",
    /** EnrollmentRead */
    EnrollmentRead = "EnrollmentRead",
    /** EnrollmentWrite */
    EnrollmentWrite = "EnrollmentWrite",
    /** DeviceConnect */
    DeviceConnect = "DeviceConnect",
    /** RegistrationStatusRead */
    RegistrationStatusRead = "RegistrationStatusRead",
    /** RegistrationStatusWrite */
    RegistrationStatusWrite = "RegistrationStatusWrite"
}

/** Known values of {@link AllocationPolicy} that the service accepts. */
export declare enum KnownAllocationPolicy {
    /** Hashed */
    Hashed = "Hashed",
    /** GeoLatency */
    GeoLatency = "GeoLatency",
    /** Static */
    Static = "Static"
}

/** Known values of {@link CertificatePurpose} that the service accepts. */
export declare enum KnownCertificatePurpose {
    /** ClientAuthentication */
    ClientAuthentication = "clientAuthentication",
    /** ServerAuthentication */
    ServerAuthentication = "serverAuthentication"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link IotDpsSku} that the service accepts. */
export declare enum KnownIotDpsSku {
    /** S1 */
    S1 = "S1"
}

/** Known values of {@link NameUnavailabilityReason} that the service accepts. */
export declare enum KnownNameUnavailabilityReason {
    /** Invalid */
    Invalid = "Invalid",
    /** AlreadyExists */
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link PrivateLinkServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateLinkServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link State} that the service accepts. */
export declare enum KnownState {
    /** Activating */
    Activating = "Activating",
    /** Active */
    Active = "Active",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** ActivationFailed */
    ActivationFailed = "ActivationFailed",
    /** DeletionFailed */
    DeletionFailed = "DeletionFailed",
    /** Transitioning */
    Transitioning = "Transitioning",
    /** Suspending */
    Suspending = "Suspending",
    /** Suspended */
    Suspended = "Suspended",
    /** Resuming */
    Resuming = "Resuming",
    /** FailingOver */
    FailingOver = "FailingOver",
    /** FailoverFailed */
    FailoverFailed = "FailoverFailed"
}

/** Description of name availability. */
export declare interface NameAvailabilityInfo {
    /** specifies if a name is available or not */
    nameAvailable?: boolean;
    /** specifies the reason a name is unavailable */
    reason?: NameUnavailabilityReason;
    /** message containing a detailed reason name is unavailable */
    message?: string;
}

/**
 * Defines values for NameUnavailabilityReason. \
 * {@link KnownNameUnavailabilityReason} can be used interchangeably with NameUnavailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type NameUnavailabilityReason = string;

/** Provisioning Service REST API operation. */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{read | write | action | delete}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Microsoft Devices.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource Type: ProvisioningServices.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Name of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
}

/** Input values for operation results call. */
export declare interface OperationInputs {
    /** The name of the Provisioning Service to check. */
    name: string;
}

/** Result of the request to list provisioning service operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * Provisioning service operations supported by the Microsoft.Devices resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Microsoft.Devices REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** The private endpoint property of a private endpoint connection */
export declare interface PrivateEndpoint {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The private endpoint connection of a provisioning service */
export declare interface PrivateEndpointConnection {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The properties of a private endpoint connection */
    properties: PrivateEndpointConnectionProperties;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** The properties of a private endpoint connection */
export declare interface PrivateEndpointConnectionProperties {
    /** The private endpoint property of a private endpoint connection */
    privateEndpoint?: PrivateEndpoint;
    /** The current state of a private endpoint connection */
    privateLinkServiceConnectionState: PrivateLinkServiceConnectionState;
}

/** The available private link resources for a provisioning service */
export declare interface PrivateLinkResources {
    /** The list of available private link resources for a provisioning service */
    value?: GroupIdInformation[];
}

/** The current state of a private endpoint connection */
export declare interface PrivateLinkServiceConnectionState {
    /** The status of a private endpoint connection */
    status: PrivateLinkServiceConnectionStatus;
    /** The description for the current state of a private endpoint connection */
    description: string;
    /** Actions required for a private endpoint connection */
    actionsRequired?: string;
}

/**
 * Defines values for PrivateLinkServiceConnectionStatus. \
 * {@link KnownPrivateLinkServiceConnectionStatus} can be used interchangeably with PrivateLinkServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type PrivateLinkServiceConnectionStatus = string;

/** The description of the provisioning service. */
export declare interface ProvisioningServiceDescription extends Resource {
    /** The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention. */
    etag?: string;
    /** Service specific properties for a provisioning service */
    properties: IotDpsPropertiesDescription;
    /** Sku info for a provisioning Service. */
    sku: IotDpsSkuInfo;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** List of provisioning service descriptions. */
export declare interface ProvisioningServiceDescriptionListResult {
    /** List of provisioning service descriptions. */
    value?: ProvisioningServiceDescription[];
    /**
     * the next link
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** The common properties of an Azure resource. */
export declare interface Resource {
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource location. */
    location: string;
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Description of the shared access key. */
export declare interface SharedAccessSignatureAuthorizationRuleAccessRightsDescription {
    /** Name of the key. */
    keyName: string;
    /** Primary SAS key value. */
    primaryKey?: string;
    /** Secondary SAS key value. */
    secondaryKey?: string;
    /** Rights that this key has. */
    rights: AccessRightsDescription;
}

/** List of shared access keys. */
export declare interface SharedAccessSignatureAuthorizationRuleListResult {
    /** The list of shared access policies. */
    value?: SharedAccessSignatureAuthorizationRuleAccessRightsDescription[];
    /**
     * The next link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Activating** \
 * **Active** \
 * **Deleting** \
 * **Deleted** \
 * **ActivationFailed** \
 * **DeletionFailed** \
 * **Transitioning** \
 * **Suspending** \
 * **Suspended** \
 * **Resuming** \
 * **FailingOver** \
 * **FailoverFailed**
 */
export declare type State = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** A container holding only the Tags for a resource, allowing the user to update the tags on a Provisioning Service instance. */
export declare interface TagsResource {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The JSON-serialized leaf certificate */
export declare interface VerificationCodeRequest {
    /** base-64 representation of X509 certificate .cer file or just .pem file content. */
    certificate?: string;
}

/** Description of the response of the verification code. */
export declare interface VerificationCodeResponse {
    /**
     * Name of certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Request etag.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * The resource identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    properties?: VerificationCodeResponseProperties;
}

export declare interface VerificationCodeResponseProperties {
    /** Verification code. */
    verificationCode?: string;
    /** Certificate subject. */
    subject?: string;
    /** Code expiry. */
    expiry?: string;
    /** Certificate thumbprint. */
    thumbprint?: string;
    /** Indicate if the certificate is verified by owner of private key. */
    isVerified?: boolean;
    /** base-64 representation of X509 certificate .cer file or just .pem file content. */
    certificate?: Uint8Array;
    /** Certificate created time. */
    created?: string;
    /** Certificate updated time. */
    updated?: string;
}

export { }
