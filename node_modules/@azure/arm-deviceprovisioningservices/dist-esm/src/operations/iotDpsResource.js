/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing IotDpsResource operations. */
export class IotDpsResourceImpl {
    /**
     * Initialize a new instance of the class IotDpsResource class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the provisioning services for a given subscription id.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of all provisioning services in the given resource group.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param options The options parameters.
     */
    listValidSkus(provisioningServiceName, resourceGroupName, options) {
        const iter = this.listValidSkusPagingAll(provisioningServiceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listValidSkusPagingPage(provisioningServiceName, resourceGroupName, options, settings);
            }
        };
    }
    listValidSkusPagingPage(provisioningServiceName, resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listValidSkusPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listValidSkus(provisioningServiceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listValidSkusNext(provisioningServiceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listValidSkusPagingAll(provisioningServiceName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listValidSkusPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listValidSkusPagingPage(provisioningServiceName, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List the primary and secondary keys for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param resourceGroupName resource group name
     * @param options The options parameters.
     */
    listKeys(provisioningServiceName, resourceGroupName, options) {
        const iter = this.listKeysPagingAll(provisioningServiceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listKeysPagingPage(provisioningServiceName, resourceGroupName, options, settings);
            }
        };
    }
    listKeysPagingPage(provisioningServiceName, resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listKeysPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listKeys(provisioningServiceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listKeysNext(provisioningServiceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listKeysPagingAll(provisioningServiceName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listKeysPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listKeysPagingPage(provisioningServiceName, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Get the metadata of the provisioning service without SAS keys.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    get(provisioningServiceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, options }, getOperationSpec);
    }
    /**
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is
     * to retrieve the provisioning service metadata and security metadata, and then combine them with the
     * modified values in a new body to update the provisioning service.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param iotDpsDescription Description of the provisioning service to create or update.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, provisioningServiceName, iotDpsDescription, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                provisioningServiceName,
                iotDpsDescription,
                options
            }, createOrUpdateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is
     * to retrieve the provisioning service metadata and security metadata, and then combine them with the
     * modified values in a new body to update the provisioning service.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param iotDpsDescription Description of the provisioning service to create or update.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, provisioningServiceName, iotDpsDescription, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, provisioningServiceName, iotDpsDescription, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param provisioningServiceTags Updated tag information to set into the provisioning service
     *                                instance.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, provisioningServiceName, provisioningServiceTags, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                provisioningServiceName,
                provisioningServiceTags,
                options
            }, updateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param provisioningServiceTags Updated tag information to set into the provisioning service
     *                                instance.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, provisioningServiceName, provisioningServiceTags, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, provisioningServiceName, provisioningServiceTags, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    beginDelete(provisioningServiceName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { provisioningServiceName, resourceGroupName, options }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    beginDeleteAndWait(provisioningServiceName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(provisioningServiceName, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all the provisioning services for a given subscription id.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get a list of all provisioning services in the given resource group.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets the status of a long running operation, such as create, update or delete a provisioning
     * service.
     * @param operationId Operation id corresponding to long running operation. Use this to poll for the
     *                    status.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service that the operation is running on.
     * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating
     *                  the long running operation.
     * @param options The options parameters.
     */
    getOperationResult(operationId, resourceGroupName, provisioningServiceName, asyncinfo, options) {
        return this.client.sendOperationRequest({
            operationId,
            resourceGroupName,
            provisioningServiceName,
            asyncinfo,
            options
        }, getOperationResultOperationSpec);
    }
    /**
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param options The options parameters.
     */
    _listValidSkus(provisioningServiceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, options }, listValidSkusOperationSpec);
    }
    /**
     * Check if a provisioning service name is available. This will validate if the name is syntactically
     * valid and if the name is usable
     * @param argumentsParam Set the name parameter in the OperationInputs structure to the name of the
     *                       provisioning service to check.
     * @param options The options parameters.
     */
    checkProvisioningServiceNameAvailability(argumentsParam, options) {
        return this.client.sendOperationRequest({ argumentsParam, options }, checkProvisioningServiceNameAvailabilityOperationSpec);
    }
    /**
     * List the primary and secondary keys for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param resourceGroupName resource group name
     * @param options The options parameters.
     */
    _listKeys(provisioningServiceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, options }, listKeysOperationSpec);
    }
    /**
     * List primary and secondary keys for a specific key name
     * @param provisioningServiceName Name of the provisioning service.
     * @param keyName Logical key name to get key-values for.
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param options The options parameters.
     */
    listKeysForKeyName(provisioningServiceName, keyName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, keyName, resourceGroupName, options }, listKeysForKeyNameOperationSpec);
    }
    /**
     * List private link resources for the given provisioning service
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param options The options parameters.
     */
    listPrivateLinkResources(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listPrivateLinkResourcesOperationSpec);
    }
    /**
     * Get the specified private link resource for the given provisioning service
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param groupId The name of the private link resource
     * @param options The options parameters.
     */
    getPrivateLinkResources(resourceGroupName, resourceName, groupId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, groupId, options }, getPrivateLinkResourcesOperationSpec);
    }
    /**
     * List private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param options The options parameters.
     */
    listPrivateEndpointConnections(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listPrivateEndpointConnectionsOperationSpec);
    }
    /**
     * Get private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    getPrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName,
            options
        }, getPrivateEndpointConnectionOperationSpec);
    }
    /**
     * Create or update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreateOrUpdatePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                resourceName,
                privateEndpointConnectionName,
                privateEndpointConnection,
                options
            }, createOrUpdatePrivateEndpointConnectionOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreateOrUpdatePrivateEndpointConnectionAndWait(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdatePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeletePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                resourceName,
                privateEndpointConnectionName,
                options
            }, deletePrivateEndpointConnectionOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeletePrivateEndpointConnectionAndWait(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeletePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Resource group identifier.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListValidSkusNext
     * @param provisioningServiceName Name of provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param nextLink The nextLink from the previous successful call to the ListValidSkus method.
     * @param options The options parameters.
     */
    _listValidSkusNext(provisioningServiceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, nextLink, options }, listValidSkusNextOperationSpec);
    }
    /**
     * ListKeysNext
     * @param provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param resourceGroupName resource group name
     * @param nextLink The nextLink from the previous successful call to the ListKeys method.
     * @param options The options parameters.
     */
    _listKeysNext(provisioningServiceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, nextLink, options }, listKeysNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        201: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        202: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        204: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    requestBody: Parameters.iotDpsDescription,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        201: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        202: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        },
        204: {
            bodyMapper: Mappers.ProvisioningServiceDescription
        }
    },
    requestBody: Parameters.provisioningServiceTags,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationResultOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AsyncOperationResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.asyncinfo],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName,
        Parameters.operationId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listValidSkusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IotDpsSkuDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const checkProvisioningServiceNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.NameAvailabilityInfo
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    requestBody: Parameters.argumentsParam,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listKeysForKeyNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleAccessRightsDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName,
        Parameters.keyName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listPrivateLinkResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PrivateLinkResources
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getPrivateLinkResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateLinkResources/{groupId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GroupIdInformation
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.groupId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listPrivateEndpointConnectionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "PrivateEndpointConnection" }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getPrivateEndpointConnectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.privateEndpointConnectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdatePrivateEndpointConnectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        201: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        202: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        204: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    requestBody: Parameters.privateEndpointConnection,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.privateEndpointConnectionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deletePrivateEndpointConnectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        201: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        202: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        204: {
            bodyMapper: Mappers.PrivateEndpointConnection
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.privateEndpointConnectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listValidSkusNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IotDpsSkuDefinitionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listKeysNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.provisioningServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=iotDpsResource.js.map