/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CertificateResponse as CertificateResponseMapper, VerificationCodeRequest as VerificationCodeRequestMapper, ProvisioningServiceDescription as ProvisioningServiceDescriptionMapper, TagsResource as TagsResourceMapper, OperationInputs as OperationInputsMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-02-05",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const provisioningServiceName = {
    parameterPath: "provisioningServiceName",
    mapper: {
        serializedName: "provisioningServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const certificateDescription = {
    parameterPath: "certificateDescription",
    mapper: CertificateResponseMapper
};
export const certificateName1 = {
    parameterPath: "certificateName",
    mapper: {
        constraints: {
            MaxLength: 256
        },
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const certificateName11 = {
    parameterPath: ["options", "certificateName1"],
    mapper: {
        serializedName: "certificate.name",
        type: {
            name: "String"
        }
    }
};
export const certificateRawBytes = {
    parameterPath: ["options", "certificateRawBytes"],
    mapper: {
        serializedName: "certificate.rawBytes",
        type: {
            name: "ByteArray"
        }
    }
};
export const certificateIsVerified = {
    parameterPath: ["options", "certificateIsVerified"],
    mapper: {
        serializedName: "certificate.isVerified",
        type: {
            name: "Boolean"
        }
    }
};
export const certificatePurpose = {
    parameterPath: ["options", "certificatePurpose"],
    mapper: {
        serializedName: "certificate.purpose",
        type: {
            name: "String"
        }
    }
};
export const certificateCreated = {
    parameterPath: ["options", "certificateCreated"],
    mapper: {
        serializedName: "certificate.created",
        type: {
            name: "DateTime"
        }
    }
};
export const certificateLastUpdated = {
    parameterPath: ["options", "certificateLastUpdated"],
    mapper: {
        serializedName: "certificate.lastUpdated",
        type: {
            name: "DateTime"
        }
    }
};
export const certificateHasPrivateKey = {
    parameterPath: ["options", "certificateHasPrivateKey"],
    mapper: {
        serializedName: "certificate.hasPrivateKey",
        type: {
            name: "Boolean"
        }
    }
};
export const certificateNonce = {
    parameterPath: ["options", "certificateNonce"],
    mapper: {
        serializedName: "certificate.nonce",
        type: {
            name: "String"
        }
    }
};
export const request = {
    parameterPath: "request",
    mapper: VerificationCodeRequestMapper
};
export const iotDpsDescription = {
    parameterPath: "iotDpsDescription",
    mapper: ProvisioningServiceDescriptionMapper
};
export const provisioningServiceTags = {
    parameterPath: "provisioningServiceTags",
    mapper: TagsResourceMapper
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const asyncinfo = {
    parameterPath: "asyncinfo",
    mapper: {
        defaultValue: "true",
        serializedName: "asyncinfo",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const argumentsParam = {
    parameterPath: "argumentsParam",
    mapper: OperationInputsMapper
};
export const keyName = {
    parameterPath: "keyName",
    mapper: {
        serializedName: "keyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
//# sourceMappingURL=parameters.js.map