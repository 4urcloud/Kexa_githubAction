'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link CertificatePurpose} that the service accepts. */
exports.KnownCertificatePurpose = void 0;
(function (KnownCertificatePurpose) {
    /** ClientAuthentication */
    KnownCertificatePurpose["ClientAuthentication"] = "clientAuthentication";
    /** ServerAuthentication */
    KnownCertificatePurpose["ServerAuthentication"] = "serverAuthentication";
})(exports.KnownCertificatePurpose || (exports.KnownCertificatePurpose = {}));
/** Known values of {@link State} that the service accepts. */
exports.KnownState = void 0;
(function (KnownState) {
    /** Activating */
    KnownState["Activating"] = "Activating";
    /** Active */
    KnownState["Active"] = "Active";
    /** Deleting */
    KnownState["Deleting"] = "Deleting";
    /** Deleted */
    KnownState["Deleted"] = "Deleted";
    /** ActivationFailed */
    KnownState["ActivationFailed"] = "ActivationFailed";
    /** DeletionFailed */
    KnownState["DeletionFailed"] = "DeletionFailed";
    /** Transitioning */
    KnownState["Transitioning"] = "Transitioning";
    /** Suspending */
    KnownState["Suspending"] = "Suspending";
    /** Suspended */
    KnownState["Suspended"] = "Suspended";
    /** Resuming */
    KnownState["Resuming"] = "Resuming";
    /** FailingOver */
    KnownState["FailingOver"] = "FailingOver";
    /** FailoverFailed */
    KnownState["FailoverFailed"] = "FailoverFailed";
})(exports.KnownState || (exports.KnownState = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link PrivateLinkServiceConnectionStatus} that the service accepts. */
exports.KnownPrivateLinkServiceConnectionStatus = void 0;
(function (KnownPrivateLinkServiceConnectionStatus) {
    /** Pending */
    KnownPrivateLinkServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateLinkServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateLinkServiceConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateLinkServiceConnectionStatus["Disconnected"] = "Disconnected";
})(exports.KnownPrivateLinkServiceConnectionStatus || (exports.KnownPrivateLinkServiceConnectionStatus = {}));
/** Known values of {@link AllocationPolicy} that the service accepts. */
exports.KnownAllocationPolicy = void 0;
(function (KnownAllocationPolicy) {
    /** Hashed */
    KnownAllocationPolicy["Hashed"] = "Hashed";
    /** GeoLatency */
    KnownAllocationPolicy["GeoLatency"] = "GeoLatency";
    /** Static */
    KnownAllocationPolicy["Static"] = "Static";
})(exports.KnownAllocationPolicy || (exports.KnownAllocationPolicy = {}));
/** Known values of {@link AccessRightsDescription} that the service accepts. */
exports.KnownAccessRightsDescription = void 0;
(function (KnownAccessRightsDescription) {
    /** ServiceConfig */
    KnownAccessRightsDescription["ServiceConfig"] = "ServiceConfig";
    /** EnrollmentRead */
    KnownAccessRightsDescription["EnrollmentRead"] = "EnrollmentRead";
    /** EnrollmentWrite */
    KnownAccessRightsDescription["EnrollmentWrite"] = "EnrollmentWrite";
    /** DeviceConnect */
    KnownAccessRightsDescription["DeviceConnect"] = "DeviceConnect";
    /** RegistrationStatusRead */
    KnownAccessRightsDescription["RegistrationStatusRead"] = "RegistrationStatusRead";
    /** RegistrationStatusWrite */
    KnownAccessRightsDescription["RegistrationStatusWrite"] = "RegistrationStatusWrite";
})(exports.KnownAccessRightsDescription || (exports.KnownAccessRightsDescription = {}));
/** Known values of {@link IotDpsSku} that the service accepts. */
exports.KnownIotDpsSku = void 0;
(function (KnownIotDpsSku) {
    /** S1 */
    KnownIotDpsSku["S1"] = "S1";
})(exports.KnownIotDpsSku || (exports.KnownIotDpsSku = {}));
/** Known values of {@link NameUnavailabilityReason} that the service accepts. */
exports.KnownNameUnavailabilityReason = void 0;
(function (KnownNameUnavailabilityReason) {
    /** Invalid */
    KnownNameUnavailabilityReason["Invalid"] = "Invalid";
    /** AlreadyExists */
    KnownNameUnavailabilityReason["AlreadyExists"] = "AlreadyExists";
})(exports.KnownNameUnavailabilityReason || (exports.KnownNameUnavailabilityReason = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorDetails = {
    type: {
        name: "Composite",
        className: "ErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            httpStatusCode: {
                serializedName: "httpStatusCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CertificateResponse = {
    type: {
        name: "Composite",
        className: "CertificateResponse",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CertificateProperties"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const CertificateProperties = {
    type: {
        name: "Composite",
        className: "CertificateProperties",
        modelProperties: {
            subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expiry: {
                serializedName: "expiry",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isVerified: {
                serializedName: "isVerified",
                type: {
                    name: "Boolean"
                }
            },
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "ByteArray"
                }
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            updated: {
                serializedName: "updated",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const IotDpsPropertiesDescription = {
    type: {
        name: "Composite",
        className: "IotDpsPropertiesDescription",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            publicNetworkAccess: {
                serializedName: "publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            ipFilterRules: {
                serializedName: "ipFilterRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IpFilterRule"
                        }
                    }
                }
            },
            privateEndpointConnections: {
                serializedName: "privateEndpointConnections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                type: {
                    name: "String"
                }
            },
            iotHubs: {
                serializedName: "iotHubs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IotHubDefinitionDescription"
                        }
                    }
                }
            },
            allocationPolicy: {
                serializedName: "allocationPolicy",
                type: {
                    name: "String"
                }
            },
            serviceOperationsHostName: {
                serializedName: "serviceOperationsHostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            deviceProvisioningHostName: {
                serializedName: "deviceProvisioningHostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            idScope: {
                serializedName: "idScope",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            authorizationPolicies: {
                serializedName: "authorizationPolicies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessSignatureAuthorizationRuleAccessRightsDescription"
                        }
                    }
                }
            },
            enableDataResidency: {
                serializedName: "enableDataResidency",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const IpFilterRule = {
    type: {
        name: "Composite",
        className: "IpFilterRule",
        modelProperties: {
            filterName: {
                serializedName: "filterName",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Accept", "Reject"]
                }
            },
            ipMask: {
                serializedName: "ipMask",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "Enum",
                    allowedValues: ["all", "serviceApi", "deviceApi"]
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
                },
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateEndpointConnectionProperties"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const PrivateEndpointConnectionProperties = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionProperties",
        modelProperties: {
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                required: true,
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotHubDefinitionDescription = {
    type: {
        name: "Composite",
        className: "IotHubDefinitionDescription",
        modelProperties: {
            applyAllocationPolicy: {
                serializedName: "applyAllocationPolicy",
                type: {
                    name: "Boolean"
                }
            },
            allocationWeight: {
                serializedName: "allocationWeight",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            connectionString: {
                serializedName: "connectionString",
                required: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SharedAccessSignatureAuthorizationRuleAccessRightsDescription = {
    type: {
        name: "Composite",
        className: "SharedAccessSignatureAuthorizationRuleAccessRightsDescription",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                required: true,
                type: {
                    name: "String"
                }
            },
            primaryKey: {
                serializedName: "primaryKey",
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                type: {
                    name: "String"
                }
            },
            rights: {
                serializedName: "rights",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotDpsSkuInfo = {
    type: {
        name: "Composite",
        className: "IotDpsSkuInfo",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
                },
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const TagsResource = {
    type: {
        name: "Composite",
        className: "TagsResource",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const CertificateListDescription = {
    type: {
        name: "Composite",
        className: "CertificateListDescription",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CertificateResponse"
                        }
                    }
                }
            }
        }
    }
};
const ProvisioningServiceDescriptionListResult = {
    type: {
        name: "Composite",
        className: "ProvisioningServiceDescriptionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProvisioningServiceDescription"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AsyncOperationResult = {
    type: {
        name: "Composite",
        className: "AsyncOperationResult",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorMessage"
                }
            }
        }
    }
};
const ErrorMessage = {
    type: {
        name: "Composite",
        className: "ErrorMessage",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotDpsSkuDefinitionListResult = {
    type: {
        name: "Composite",
        className: "IotDpsSkuDefinitionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IotDpsSkuDefinition"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IotDpsSkuDefinition = {
    type: {
        name: "Composite",
        className: "IotDpsSkuDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VerificationCodeResponse = {
    type: {
        name: "Composite",
        className: "VerificationCodeResponse",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "VerificationCodeResponseProperties"
                }
            }
        }
    }
};
const VerificationCodeResponseProperties = {
    type: {
        name: "Composite",
        className: "VerificationCodeResponseProperties",
        modelProperties: {
            verificationCode: {
                serializedName: "verificationCode",
                type: {
                    name: "String"
                }
            },
            subject: {
                serializedName: "subject",
                type: {
                    name: "String"
                }
            },
            expiry: {
                serializedName: "expiry",
                type: {
                    name: "String"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                type: {
                    name: "String"
                }
            },
            isVerified: {
                serializedName: "isVerified",
                type: {
                    name: "Boolean"
                }
            },
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "ByteArray"
                }
            },
            created: {
                serializedName: "created",
                type: {
                    name: "String"
                }
            },
            updated: {
                serializedName: "updated",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VerificationCodeRequest = {
    type: {
        name: "Composite",
        className: "VerificationCodeRequest",
        modelProperties: {
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationInputs = {
    type: {
        name: "Composite",
        className: "OperationInputs",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NameAvailabilityInfo = {
    type: {
        name: "Composite",
        className: "NameAvailabilityInfo",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SharedAccessSignatureAuthorizationRuleListResult = {
    type: {
        name: "Composite",
        className: "SharedAccessSignatureAuthorizationRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SharedAccessSignatureAuthorizationRuleAccessRightsDescription"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResources = {
    type: {
        name: "Composite",
        className: "PrivateLinkResources",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GroupIdInformation"
                        }
                    }
                }
            }
        }
    }
};
const GroupIdInformation = {
    type: {
        name: "Composite",
        className: "GroupIdInformation",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                constraints: {
                    Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
                },
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "GroupIdInformationProperties"
                }
            }
        }
    }
};
const GroupIdInformationProperties = {
    type: {
        name: "Composite",
        className: "GroupIdInformationProperties",
        modelProperties: {
            groupId: {
                serializedName: "groupId",
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "requiredMembers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CertificateBodyDescription = {
    type: {
        name: "Composite",
        className: "CertificateBodyDescription",
        modelProperties: {
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "String"
                }
            },
            isVerified: {
                serializedName: "isVerified",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ProvisioningServiceDescription = {
    type: {
        name: "Composite",
        className: "ProvisioningServiceDescription",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IotDpsPropertiesDescription"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "IotDpsSkuInfo"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            } })
    }
};
const IotDpsResourceDeletePrivateEndpointConnectionHeaders = {
    type: {
        name: "Composite",
        className: "IotDpsResourceDeletePrivateEndpointConnectionHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorDetails: ErrorDetails,
    CertificateResponse: CertificateResponse,
    CertificateProperties: CertificateProperties,
    SystemData: SystemData,
    IotDpsPropertiesDescription: IotDpsPropertiesDescription,
    IpFilterRule: IpFilterRule,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateEndpointConnectionProperties: PrivateEndpointConnectionProperties,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    IotHubDefinitionDescription: IotHubDefinitionDescription,
    SharedAccessSignatureAuthorizationRuleAccessRightsDescription: SharedAccessSignatureAuthorizationRuleAccessRightsDescription,
    IotDpsSkuInfo: IotDpsSkuInfo,
    Resource: Resource,
    TagsResource: TagsResource,
    CertificateListDescription: CertificateListDescription,
    ProvisioningServiceDescriptionListResult: ProvisioningServiceDescriptionListResult,
    AsyncOperationResult: AsyncOperationResult,
    ErrorMessage: ErrorMessage,
    IotDpsSkuDefinitionListResult: IotDpsSkuDefinitionListResult,
    IotDpsSkuDefinition: IotDpsSkuDefinition,
    VerificationCodeResponse: VerificationCodeResponse,
    VerificationCodeResponseProperties: VerificationCodeResponseProperties,
    VerificationCodeRequest: VerificationCodeRequest,
    OperationInputs: OperationInputs,
    NameAvailabilityInfo: NameAvailabilityInfo,
    SharedAccessSignatureAuthorizationRuleListResult: SharedAccessSignatureAuthorizationRuleListResult,
    PrivateLinkResources: PrivateLinkResources,
    GroupIdInformation: GroupIdInformation,
    GroupIdInformationProperties: GroupIdInformationProperties,
    CertificateBodyDescription: CertificateBodyDescription,
    ProvisioningServiceDescription: ProvisioningServiceDescription,
    IotDpsResourceDeletePrivateEndpointConnectionHeaders: IotDpsResourceDeletePrivateEndpointConnectionHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-02-05",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const provisioningServiceName = {
    parameterPath: "provisioningServiceName",
    mapper: {
        serializedName: "provisioningServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const certificateDescription = {
    parameterPath: "certificateDescription",
    mapper: CertificateResponse
};
const certificateName1 = {
    parameterPath: "certificateName",
    mapper: {
        constraints: {
            MaxLength: 256
        },
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const ifMatch1 = {
    parameterPath: "ifMatch",
    mapper: {
        serializedName: "If-Match",
        required: true,
        type: {
            name: "String"
        }
    }
};
const certificateName11 = {
    parameterPath: ["options", "certificateName1"],
    mapper: {
        serializedName: "certificate.name",
        type: {
            name: "String"
        }
    }
};
const certificateRawBytes = {
    parameterPath: ["options", "certificateRawBytes"],
    mapper: {
        serializedName: "certificate.rawBytes",
        type: {
            name: "ByteArray"
        }
    }
};
const certificateIsVerified = {
    parameterPath: ["options", "certificateIsVerified"],
    mapper: {
        serializedName: "certificate.isVerified",
        type: {
            name: "Boolean"
        }
    }
};
const certificatePurpose = {
    parameterPath: ["options", "certificatePurpose"],
    mapper: {
        serializedName: "certificate.purpose",
        type: {
            name: "String"
        }
    }
};
const certificateCreated = {
    parameterPath: ["options", "certificateCreated"],
    mapper: {
        serializedName: "certificate.created",
        type: {
            name: "DateTime"
        }
    }
};
const certificateLastUpdated = {
    parameterPath: ["options", "certificateLastUpdated"],
    mapper: {
        serializedName: "certificate.lastUpdated",
        type: {
            name: "DateTime"
        }
    }
};
const certificateHasPrivateKey = {
    parameterPath: ["options", "certificateHasPrivateKey"],
    mapper: {
        serializedName: "certificate.hasPrivateKey",
        type: {
            name: "Boolean"
        }
    }
};
const certificateNonce = {
    parameterPath: ["options", "certificateNonce"],
    mapper: {
        serializedName: "certificate.nonce",
        type: {
            name: "String"
        }
    }
};
const request = {
    parameterPath: "request",
    mapper: VerificationCodeRequest
};
const iotDpsDescription = {
    parameterPath: "iotDpsDescription",
    mapper: ProvisioningServiceDescription
};
const provisioningServiceTags = {
    parameterPath: "provisioningServiceTags",
    mapper: TagsResource
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const asyncinfo = {
    parameterPath: "asyncinfo",
    mapper: {
        defaultValue: "true",
        serializedName: "asyncinfo",
        required: true,
        type: {
            name: "String"
        }
    }
};
const argumentsParam = {
    parameterPath: "argumentsParam",
    mapper: OperationInputs
};
const keyName = {
    parameterPath: "keyName",
    mapper: {
        serializedName: "keyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const groupId = {
    parameterPath: "groupId",
    mapper: {
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnection
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Microsoft.Devices REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Microsoft.Devices REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.Devices/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing DpsCertificate operations. */
class DpsCertificateImpl {
    /**
     * Initialize a new instance of the class DpsCertificate class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the certificate from the provisioning service.
     * @param certificateName Name of the certificate to retrieve.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of the provisioning service the certificate is associated with.
     * @param options The options parameters.
     */
    get(certificateName, resourceGroupName, provisioningServiceName, options) {
        return this.client.sendOperationRequest({ certificateName, resourceGroupName, provisioningServiceName, options }, getOperationSpec$1);
    }
    /**
     * Add new certificate or update an existing certificate.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName The name of the provisioning service.
     * @param certificateName The name of the certificate create or update.
     * @param certificateDescription The certificate body.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, provisioningServiceName, certificateName, certificateDescription, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            provisioningServiceName,
            certificateName,
            certificateDescription,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Deletes the specified certificate associated with the Provisioning Service
     * @param resourceGroupName Resource group identifier.
     * @param ifMatch ETag of the certificate
     * @param provisioningServiceName The name of the provisioning service.
     * @param certificateName This is a mandatory field, and is the logical name of the certificate that
     *                        the provisioning service will access by.
     * @param options The options parameters.
     */
    delete(resourceGroupName, ifMatch, provisioningServiceName, certificateName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            ifMatch,
            provisioningServiceName,
            certificateName,
            options
        }, deleteOperationSpec$1);
    }
    /**
     * Get all the certificates tied to the provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param provisioningServiceName Name of provisioning service to retrieve certificates for.
     * @param options The options parameters.
     */
    list(resourceGroupName, provisioningServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, provisioningServiceName, options }, listOperationSpec);
    }
    /**
     * Generate verification code for Proof of Possession.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service
     *                        uses to access.
     * @param ifMatch ETag of the certificate. This is required to update an existing certificate, and
     *                ignored while creating a brand new certificate.
     * @param resourceGroupName name of resource group.
     * @param provisioningServiceName Name of provisioning service.
     * @param options The options parameters.
     */
    generateVerificationCode(certificateName, ifMatch, resourceGroupName, provisioningServiceName, options) {
        return this.client.sendOperationRequest({
            certificateName,
            ifMatch,
            resourceGroupName,
            provisioningServiceName,
            options
        }, generateVerificationCodeOperationSpec);
    }
    /**
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying
     * pre uploaded certificate.
     * @param certificateName The mandatory logical name of the certificate, that the provisioning service
     *                        uses to access.
     * @param ifMatch ETag of the certificate.
     * @param resourceGroupName Resource group name.
     * @param provisioningServiceName Provisioning service name.
     * @param request The name of the certificate
     * @param options The options parameters.
     */
    verifyCertificate(certificateName, ifMatch, resourceGroupName, provisioningServiceName, request, options) {
        return this.client.sendOperationRequest({
            certificateName,
            ifMatch,
            resourceGroupName,
            provisioningServiceName,
            request,
            options
        }, verifyCertificateOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateResponse
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        certificateName,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$1
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CertificateResponse
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: certificateDescription,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName,
        certificateName1
    ],
    headerParameters: [
        accept,
        ifMatch,
        contentType
    ],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [
        apiVersion,
        certificateName11,
        certificateRawBytes,
        certificateIsVerified,
        certificatePurpose,
        certificateCreated,
        certificateLastUpdated,
        certificateHasPrivateKey,
        certificateNonce
    ],
    urlParameters: [
        $host,
        certificateName,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept, ifMatch1],
    serializer: serializer$1
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CertificateListDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const generateVerificationCodeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: VerificationCodeResponse
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [
        apiVersion,
        certificateName11,
        certificateRawBytes,
        certificateIsVerified,
        certificatePurpose,
        certificateCreated,
        certificateLastUpdated,
        certificateHasPrivateKey,
        certificateNonce
    ],
    urlParameters: [
        $host,
        certificateName,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept, ifMatch1],
    serializer: serializer$1
};
const verifyCertificateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CertificateResponse
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: request,
    queryParameters: [
        apiVersion,
        certificateName11,
        certificateRawBytes,
        certificateIsVerified,
        certificatePurpose,
        certificateCreated,
        certificateLastUpdated,
        certificateHasPrivateKey,
        certificateNonce
    ],
    urlParameters: [
        $host,
        certificateName,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [
        accept,
        contentType,
        ifMatch1
    ],
    mediaType: "json",
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing IotDpsResource operations. */
class IotDpsResourceImpl {
    /**
     * Initialize a new instance of the class IotDpsResource class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the provisioning services for a given subscription id.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of all provisioning services in the given resource group.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param options The options parameters.
     */
    listValidSkus(provisioningServiceName, resourceGroupName, options) {
        const iter = this.listValidSkusPagingAll(provisioningServiceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listValidSkusPagingPage(provisioningServiceName, resourceGroupName, options, settings);
            }
        };
    }
    listValidSkusPagingPage(provisioningServiceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listValidSkusPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listValidSkus(provisioningServiceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listValidSkusNext(provisioningServiceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listValidSkusPagingAll(provisioningServiceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listValidSkusPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listValidSkusPagingPage(provisioningServiceName, resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List the primary and secondary keys for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param resourceGroupName resource group name
     * @param options The options parameters.
     */
    listKeys(provisioningServiceName, resourceGroupName, options) {
        const iter = this.listKeysPagingAll(provisioningServiceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listKeysPagingPage(provisioningServiceName, resourceGroupName, options, settings);
            }
        };
    }
    listKeysPagingPage(provisioningServiceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listKeysPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listKeys(provisioningServiceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listKeysNext(provisioningServiceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listKeysPagingAll(provisioningServiceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listKeysPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listKeysPagingPage(provisioningServiceName, resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Get the metadata of the provisioning service without SAS keys.
     * @param provisioningServiceName Name of the provisioning service to retrieve.
     * @param resourceGroupName Resource group name.
     * @param options The options parameters.
     */
    get(provisioningServiceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, options }, getOperationSpec);
    }
    /**
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is
     * to retrieve the provisioning service metadata and security metadata, and then combine them with the
     * modified values in a new body to update the provisioning service.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param iotDpsDescription Description of the provisioning service to create or update.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, provisioningServiceName, iotDpsDescription, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                provisioningServiceName,
                iotDpsDescription,
                options
            }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the metadata of the provisioning service. The usual pattern to modify a property is
     * to retrieve the provisioning service metadata and security metadata, and then combine them with the
     * modified values in a new body to update the provisioning service.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param iotDpsDescription Description of the provisioning service to create or update.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, provisioningServiceName, iotDpsDescription, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, provisioningServiceName, iotDpsDescription, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param provisioningServiceTags Updated tag information to set into the provisioning service
     *                                instance.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, provisioningServiceName, provisioningServiceTags, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                provisioningServiceName,
                provisioningServiceTags,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update an existing provisioning service's tags. to update other fields use the CreateOrUpdate method
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service to create or update.
     * @param provisioningServiceTags Updated tag information to set into the provisioning service
     *                                instance.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, provisioningServiceName, provisioningServiceTags, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, provisioningServiceName, provisioningServiceTags, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    beginDelete(provisioningServiceName, resourceGroupName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { provisioningServiceName, resourceGroupName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the Provisioning Service.
     * @param provisioningServiceName Name of provisioning service to delete.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    beginDeleteAndWait(provisioningServiceName, resourceGroupName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(provisioningServiceName, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all the provisioning services for a given subscription id.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get a list of all provisioning services in the given resource group.
     * @param resourceGroupName Resource group identifier.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets the status of a long running operation, such as create, update or delete a provisioning
     * service.
     * @param operationId Operation id corresponding to long running operation. Use this to poll for the
     *                    status.
     * @param resourceGroupName Resource group identifier.
     * @param provisioningServiceName Name of provisioning service that the operation is running on.
     * @param asyncinfo Async header used to poll on the status of the operation, obtained while creating
     *                  the long running operation.
     * @param options The options parameters.
     */
    getOperationResult(operationId, resourceGroupName, provisioningServiceName, asyncinfo, options) {
        return this.client.sendOperationRequest({
            operationId,
            resourceGroupName,
            provisioningServiceName,
            asyncinfo,
            options
        }, getOperationResultOperationSpec);
    }
    /**
     * Gets the list of valid SKUs and tiers for a provisioning service.
     * @param provisioningServiceName Name of provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param options The options parameters.
     */
    _listValidSkus(provisioningServiceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, options }, listValidSkusOperationSpec);
    }
    /**
     * Check if a provisioning service name is available. This will validate if the name is syntactically
     * valid and if the name is usable
     * @param argumentsParam Set the name parameter in the OperationInputs structure to the name of the
     *                       provisioning service to check.
     * @param options The options parameters.
     */
    checkProvisioningServiceNameAvailability(argumentsParam, options) {
        return this.client.sendOperationRequest({ argumentsParam, options }, checkProvisioningServiceNameAvailabilityOperationSpec);
    }
    /**
     * List the primary and secondary keys for a provisioning service.
     * @param provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param resourceGroupName resource group name
     * @param options The options parameters.
     */
    _listKeys(provisioningServiceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, options }, listKeysOperationSpec);
    }
    /**
     * List primary and secondary keys for a specific key name
     * @param provisioningServiceName Name of the provisioning service.
     * @param keyName Logical key name to get key-values for.
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param options The options parameters.
     */
    listKeysForKeyName(provisioningServiceName, keyName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, keyName, resourceGroupName, options }, listKeysForKeyNameOperationSpec);
    }
    /**
     * List private link resources for the given provisioning service
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param options The options parameters.
     */
    listPrivateLinkResources(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listPrivateLinkResourcesOperationSpec);
    }
    /**
     * Get the specified private link resource for the given provisioning service
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param groupId The name of the private link resource
     * @param options The options parameters.
     */
    getPrivateLinkResources(resourceGroupName, resourceName, groupId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, groupId, options }, getPrivateLinkResourcesOperationSpec);
    }
    /**
     * List private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param options The options parameters.
     */
    listPrivateEndpointConnections(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, listPrivateEndpointConnectionsOperationSpec);
    }
    /**
     * Get private endpoint connection properties
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    getPrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName,
            options
        }, getPrivateEndpointConnectionOperationSpec);
    }
    /**
     * Create or update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreateOrUpdatePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                resourceName,
                privateEndpointConnectionName,
                privateEndpointConnection,
                options
            }, createOrUpdatePrivateEndpointConnectionOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the status of a private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param privateEndpointConnection The private endpoint connection with updated properties
     * @param options The options parameters.
     */
    beginCreateOrUpdatePrivateEndpointConnectionAndWait(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdatePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, privateEndpointConnection, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeletePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                resourceName,
                privateEndpointConnectionName,
                options
            }, deletePrivateEndpointConnectionOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete private endpoint connection with the specified name
     * @param resourceGroupName The name of the resource group that contains the provisioning service.
     * @param resourceName The name of the provisioning service.
     * @param privateEndpointConnectionName The name of the private endpoint connection
     * @param options The options parameters.
     */
    beginDeletePrivateEndpointConnectionAndWait(resourceGroupName, resourceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeletePrivateEndpointConnection(resourceGroupName, resourceName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Resource group identifier.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListValidSkusNext
     * @param provisioningServiceName Name of provisioning service.
     * @param resourceGroupName Name of resource group.
     * @param nextLink The nextLink from the previous successful call to the ListValidSkus method.
     * @param options The options parameters.
     */
    _listValidSkusNext(provisioningServiceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, nextLink, options }, listValidSkusNextOperationSpec);
    }
    /**
     * ListKeysNext
     * @param provisioningServiceName The provisioning service name to get the shared access keys for.
     * @param resourceGroupName resource group name
     * @param nextLink The nextLink from the previous successful call to the ListKeys method.
     * @param options The options parameters.
     */
    _listKeysNext(provisioningServiceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ provisioningServiceName, resourceGroupName, nextLink, options }, listKeysNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProvisioningServiceDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProvisioningServiceDescription
        },
        201: {
            bodyMapper: ProvisioningServiceDescription
        },
        202: {
            bodyMapper: ProvisioningServiceDescription
        },
        204: {
            bodyMapper: ProvisioningServiceDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: iotDpsDescription,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ProvisioningServiceDescription
        },
        201: {
            bodyMapper: ProvisioningServiceDescription
        },
        202: {
            bodyMapper: ProvisioningServiceDescription
        },
        204: {
            bodyMapper: ProvisioningServiceDescription
        }
    },
    requestBody: provisioningServiceTags,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept],
    serializer
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/provisioningServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationResultOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/operationresults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AsyncOperationResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion, asyncinfo],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName,
        operationId
    ],
    headerParameters: [accept],
    serializer
};
const listValidSkusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotDpsSkuDefinitionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept],
    serializer
};
const checkProvisioningServiceNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkProvisioningServiceNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: NameAvailabilityInfo
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: argumentsParam,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/listkeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept],
    serializer
};
const listKeysForKeyNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/keys/{keyName}/listkeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SharedAccessSignatureAuthorizationRuleAccessRightsDescription
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName,
        keyName
    ],
    headerParameters: [accept],
    serializer
};
const listPrivateLinkResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResources
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer
};
const getPrivateLinkResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateLinkResources/{groupId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GroupIdInformation
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        groupId
    ],
    headerParameters: [accept],
    serializer
};
const listPrivateEndpointConnectionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "PrivateEndpointConnection" }
                    }
                }
            }
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName
    ],
    headerParameters: [accept],
    serializer
};
const getPrivateEndpointConnectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdatePrivateEndpointConnectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    requestBody: privateEndpointConnection,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deletePrivateEndpointConnectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        resourceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProvisioningServiceDescriptionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer
};
const listValidSkusNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: IotDpsSkuDefinitionListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept],
    serializer
};
const listKeysNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorDetails
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        provisioningServiceName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class IotDpsClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the IotDpsClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription identifier.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-deviceprovisioningservices/5.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-02-05";
        this.operations = new OperationsImpl(this);
        this.dpsCertificate = new DpsCertificateImpl(this);
        this.iotDpsResource = new IotDpsResourceImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.IotDpsClient = IotDpsClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
