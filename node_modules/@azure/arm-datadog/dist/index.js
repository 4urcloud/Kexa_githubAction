'use strict';

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Deleted */
    KnownProvisioningState["Deleted"] = "Deleted";
    /** NotSpecified */
    KnownProvisioningState["NotSpecified"] = "NotSpecified";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link MonitoringStatus} that the service accepts. */
exports.KnownMonitoringStatus = void 0;
(function (KnownMonitoringStatus) {
    /** Enabled */
    KnownMonitoringStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownMonitoringStatus["Disabled"] = "Disabled";
})(exports.KnownMonitoringStatus || (exports.KnownMonitoringStatus = {}));
/** Known values of {@link MarketplaceSubscriptionStatus} that the service accepts. */
exports.KnownMarketplaceSubscriptionStatus = void 0;
(function (KnownMarketplaceSubscriptionStatus) {
    /** Provisioning */
    KnownMarketplaceSubscriptionStatus["Provisioning"] = "Provisioning";
    /** Active */
    KnownMarketplaceSubscriptionStatus["Active"] = "Active";
    /** Suspended */
    KnownMarketplaceSubscriptionStatus["Suspended"] = "Suspended";
    /** Unsubscribed */
    KnownMarketplaceSubscriptionStatus["Unsubscribed"] = "Unsubscribed";
})(exports.KnownMarketplaceSubscriptionStatus || (exports.KnownMarketplaceSubscriptionStatus = {}));
/** Known values of {@link LiftrResourceCategories} that the service accepts. */
exports.KnownLiftrResourceCategories = void 0;
(function (KnownLiftrResourceCategories) {
    /** Unknown */
    KnownLiftrResourceCategories["Unknown"] = "Unknown";
    /** MonitorLogs */
    KnownLiftrResourceCategories["MonitorLogs"] = "MonitorLogs";
})(exports.KnownLiftrResourceCategories || (exports.KnownLiftrResourceCategories = {}));
/** Known values of {@link ManagedIdentityTypes} that the service accepts. */
exports.KnownManagedIdentityTypes = void 0;
(function (KnownManagedIdentityTypes) {
    /** SystemAssigned */
    KnownManagedIdentityTypes["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownManagedIdentityTypes["UserAssigned"] = "UserAssigned";
})(exports.KnownManagedIdentityTypes || (exports.KnownManagedIdentityTypes = {}));
/** Known values of {@link TagAction} that the service accepts. */
exports.KnownTagAction = void 0;
(function (KnownTagAction) {
    /** Include */
    KnownTagAction["Include"] = "Include";
    /** Exclude */
    KnownTagAction["Exclude"] = "Exclude";
})(exports.KnownTagAction || (exports.KnownTagAction = {}));
/** Known values of {@link SingleSignOnStates} that the service accepts. */
exports.KnownSingleSignOnStates = void 0;
(function (KnownSingleSignOnStates) {
    /** Initial */
    KnownSingleSignOnStates["Initial"] = "Initial";
    /** Enable */
    KnownSingleSignOnStates["Enable"] = "Enable";
    /** Disable */
    KnownSingleSignOnStates["Disable"] = "Disable";
    /** Existing */
    KnownSingleSignOnStates["Existing"] = "Existing";
})(exports.KnownSingleSignOnStates || (exports.KnownSingleSignOnStates = {}));
/** Known values of {@link Operation} that the service accepts. */
exports.KnownOperation = void 0;
(function (KnownOperation) {
    /** AddBegin */
    KnownOperation["AddBegin"] = "AddBegin";
    /** AddComplete */
    KnownOperation["AddComplete"] = "AddComplete";
    /** DeleteBegin */
    KnownOperation["DeleteBegin"] = "DeleteBegin";
    /** DeleteComplete */
    KnownOperation["DeleteComplete"] = "DeleteComplete";
    /** Active */
    KnownOperation["Active"] = "Active";
})(exports.KnownOperation || (exports.KnownOperation = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** InProgress */
    KnownStatus["InProgress"] = "InProgress";
    /** Active */
    KnownStatus["Active"] = "Active";
    /** Failed */
    KnownStatus["Failed"] = "Failed";
    /** Deleting */
    KnownStatus["Deleting"] = "Deleting";
})(exports.KnownStatus || (exports.KnownStatus = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const DatadogAgreementResourceListResponse = {
    type: {
        name: "Composite",
        className: "DatadogAgreementResourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatadogAgreementResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogAgreementResource = {
    type: {
        name: "Composite",
        className: "DatadogAgreementResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DatadogAgreementProperties"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const DatadogAgreementProperties = {
    type: {
        name: "Composite",
        className: "DatadogAgreementProperties",
        modelProperties: {
            publisher: {
                serializedName: "publisher",
                type: {
                    name: "String"
                }
            },
            product: {
                serializedName: "product",
                type: {
                    name: "String"
                }
            },
            plan: {
                serializedName: "plan",
                type: {
                    name: "String"
                }
            },
            licenseTextLink: {
                serializedName: "licenseTextLink",
                type: {
                    name: "String"
                }
            },
            privacyPolicyLink: {
                serializedName: "privacyPolicyLink",
                type: {
                    name: "String"
                }
            },
            retrieveDatetime: {
                serializedName: "retrieveDatetime",
                type: {
                    name: "DateTime"
                }
            },
            signature: {
                serializedName: "signature",
                type: {
                    name: "String"
                }
            },
            accepted: {
                serializedName: "accepted",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const CreateResourceSupportedResponseList = {
    type: {
        name: "Composite",
        className: "CreateResourceSupportedResponseList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CreateResourceSupportedResponse"
                        }
                    }
                }
            }
        }
    }
};
const CreateResourceSupportedResponse = {
    type: {
        name: "Composite",
        className: "CreateResourceSupportedResponse",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreateResourceSupportedProperties"
                }
            }
        }
    }
};
const CreateResourceSupportedProperties = {
    type: {
        name: "Composite",
        className: "CreateResourceSupportedProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            creationSupported: {
                serializedName: "creationSupported",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DatadogApiKeyListResponse = {
    type: {
        name: "Composite",
        className: "DatadogApiKeyListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatadogApiKey"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogApiKey = {
    type: {
        name: "Composite",
        className: "DatadogApiKey",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "created",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogHostListResponse = {
    type: {
        name: "Composite",
        className: "DatadogHostListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatadogHost"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogHost = {
    type: {
        name: "Composite",
        className: "DatadogHost",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            aliases: {
                serializedName: "aliases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            apps: {
                serializedName: "apps",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            meta: {
                serializedName: "meta",
                type: {
                    name: "Composite",
                    className: "DatadogHostMetadata"
                }
            }
        }
    }
};
const DatadogHostMetadata = {
    type: {
        name: "Composite",
        className: "DatadogHostMetadata",
        modelProperties: {
            agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String"
                }
            },
            installMethod: {
                serializedName: "installMethod",
                type: {
                    name: "Composite",
                    className: "DatadogInstallMethod"
                }
            },
            logsAgent: {
                serializedName: "logsAgent",
                type: {
                    name: "Composite",
                    className: "DatadogLogsAgent"
                }
            }
        }
    }
};
const DatadogInstallMethod = {
    type: {
        name: "Composite",
        className: "DatadogInstallMethod",
        modelProperties: {
            tool: {
                serializedName: "tool",
                type: {
                    name: "String"
                }
            },
            toolVersion: {
                serializedName: "toolVersion",
                type: {
                    name: "String"
                }
            },
            installerVersion: {
                serializedName: "installerVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogLogsAgent = {
    type: {
        name: "Composite",
        className: "DatadogLogsAgent",
        modelProperties: {
            transport: {
                serializedName: "transport",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedResourceListResponse = {
    type: {
        name: "Composite",
        className: "LinkedResourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedResource = {
    type: {
        name: "Composite",
        className: "LinkedResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoredResourceListResponse = {
    type: {
        name: "Composite",
        className: "MonitoredResourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitoredResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoredResource = {
    type: {
        name: "Composite",
        className: "MonitoredResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            sendingMetrics: {
                serializedName: "sendingMetrics",
                type: {
                    name: "Boolean"
                }
            },
            reasonForMetricsStatus: {
                serializedName: "reasonForMetricsStatus",
                type: {
                    name: "String"
                }
            },
            sendingLogs: {
                serializedName: "sendingLogs",
                type: {
                    name: "Boolean"
                }
            },
            reasonForLogsStatus: {
                serializedName: "reasonForLogsStatus",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationResult"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResult = {
    type: {
        name: "Composite",
        className: "OperationResult",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogMonitorResourceListResponse = {
    type: {
        name: "Composite",
        className: "DatadogMonitorResourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatadogMonitorResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogMonitorResource = {
    type: {
        name: "Composite",
        className: "DatadogMonitorResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ResourceSku"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MonitorProperties"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const ResourceSku = {
    type: {
        name: "Composite",
        className: "ResourceSku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitorProperties = {
    type: {
        name: "Composite",
        className: "MonitorProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            monitoringStatus: {
                defaultValue: "Enabled",
                serializedName: "monitoringStatus",
                type: {
                    name: "String"
                }
            },
            marketplaceSubscriptionStatus: {
                serializedName: "marketplaceSubscriptionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            datadogOrganizationProperties: {
                serializedName: "datadogOrganizationProperties",
                type: {
                    name: "Composite",
                    className: "DatadogOrganizationProperties"
                }
            },
            userInfo: {
                serializedName: "userInfo",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            },
            liftrResourceCategory: {
                serializedName: "liftrResourceCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            liftrResourcePreference: {
                serializedName: "liftrResourcePreference",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DatadogOrganizationProperties = {
    type: {
        name: "Composite",
        className: "DatadogOrganizationProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            linkingAuthCode: {
                serializedName: "linkingAuthCode",
                type: {
                    name: "String"
                }
            },
            linkingClientId: {
                serializedName: "linkingClientId",
                type: {
                    name: "String"
                }
            },
            redirectUri: {
                serializedName: "redirectUri",
                type: {
                    name: "String"
                }
            },
            apiKey: {
                serializedName: "apiKey",
                type: {
                    name: "String"
                }
            },
            applicationKey: {
                serializedName: "applicationKey",
                type: {
                    name: "String"
                }
            },
            enterpriseAppId: {
                serializedName: "enterpriseAppId",
                type: {
                    name: "String"
                }
            },
            cspm: {
                serializedName: "cspm",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const UserInfo = {
    type: {
        name: "Composite",
        className: "UserInfo",
        modelProperties: {
            name: {
                constraints: {
                    MaxLength: 50
                },
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            emailAddress: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$")
                },
                serializedName: "emailAddress",
                type: {
                    name: "String"
                }
            },
            phoneNumber: {
                constraints: {
                    MaxLength: 40
                },
                serializedName: "phoneNumber",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IdentityProperties = {
    type: {
        name: "Composite",
        className: "IdentityProperties",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogMonitorResourceUpdateParameters = {
    type: {
        name: "Composite",
        className: "DatadogMonitorResourceUpdateParameters",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MonitorUpdateProperties"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ResourceSku"
                }
            }
        }
    }
};
const MonitorUpdateProperties = {
    type: {
        name: "Composite",
        className: "MonitorUpdateProperties",
        modelProperties: {
            monitoringStatus: {
                defaultValue: "Enabled",
                serializedName: "monitoringStatus",
                type: {
                    name: "String"
                }
            },
            cspm: {
                serializedName: "cspm",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DatadogSetPasswordLink = {
    type: {
        name: "Composite",
        className: "DatadogSetPasswordLink",
        modelProperties: {
            setPasswordLink: {
                serializedName: "setPasswordLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoringTagRulesListResponse = {
    type: {
        name: "Composite",
        className: "MonitoringTagRulesListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitoringTagRules"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoringTagRules = {
    type: {
        name: "Composite",
        className: "MonitoringTagRules",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MonitoringTagRulesProperties"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const MonitoringTagRulesProperties = {
    type: {
        name: "Composite",
        className: "MonitoringTagRulesProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            logRules: {
                serializedName: "logRules",
                type: {
                    name: "Composite",
                    className: "LogRules"
                }
            },
            metricRules: {
                serializedName: "metricRules",
                type: {
                    name: "Composite",
                    className: "MetricRules"
                }
            },
            automuting: {
                serializedName: "automuting",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const LogRules = {
    type: {
        name: "Composite",
        className: "LogRules",
        modelProperties: {
            sendAadLogs: {
                serializedName: "sendAadLogs",
                type: {
                    name: "Boolean"
                }
            },
            sendSubscriptionLogs: {
                serializedName: "sendSubscriptionLogs",
                type: {
                    name: "Boolean"
                }
            },
            sendResourceLogs: {
                serializedName: "sendResourceLogs",
                type: {
                    name: "Boolean"
                }
            },
            filteringTags: {
                serializedName: "filteringTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilteringTag"
                        }
                    }
                }
            }
        }
    }
};
const FilteringTag = {
    type: {
        name: "Composite",
        className: "FilteringTag",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricRules = {
    type: {
        name: "Composite",
        className: "MetricRules",
        modelProperties: {
            filteringTags: {
                serializedName: "filteringTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilteringTag"
                        }
                    }
                }
            }
        }
    }
};
const DatadogSingleSignOnResourceListResponse = {
    type: {
        name: "Composite",
        className: "DatadogSingleSignOnResourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatadogSingleSignOnResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatadogSingleSignOnResource = {
    type: {
        name: "Composite",
        className: "DatadogSingleSignOnResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DatadogSingleSignOnProperties"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const DatadogSingleSignOnProperties = {
    type: {
        name: "Composite",
        className: "DatadogSingleSignOnProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            singleSignOnState: {
                serializedName: "singleSignOnState",
                type: {
                    name: "String"
                }
            },
            enterpriseAppId: {
                serializedName: "enterpriseAppId",
                type: {
                    name: "String"
                }
            },
            singleSignOnUrl: {
                serializedName: "singleSignOnUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoredSubscriptionPropertiesList = {
    type: {
        name: "Composite",
        className: "MonitoredSubscriptionPropertiesList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitoredSubscriptionProperties"
                        }
                    }
                }
            }
        }
    }
};
const MonitoredSubscriptionProperties = {
    type: {
        name: "Composite",
        className: "MonitoredSubscriptionProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SubscriptionList"
                }
            }
        }
    }
};
const SubscriptionList = {
    type: {
        name: "Composite",
        className: "SubscriptionList",
        modelProperties: {
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            monitoredSubscriptionList: {
                serializedName: "monitoredSubscriptionList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitoredSubscription"
                        }
                    }
                }
            }
        }
    }
};
const MonitoredSubscription = {
    type: {
        name: "Composite",
        className: "MonitoredSubscription",
        modelProperties: {
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "String"
                }
            },
            tagRules: {
                serializedName: "tagRules",
                type: {
                    name: "Composite",
                    className: "MonitoringTagRulesProperties"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CreateResourceSupportedProperties: CreateResourceSupportedProperties,
    CreateResourceSupportedResponse: CreateResourceSupportedResponse,
    CreateResourceSupportedResponseList: CreateResourceSupportedResponseList,
    DatadogAgreementProperties: DatadogAgreementProperties,
    DatadogAgreementResource: DatadogAgreementResource,
    DatadogAgreementResourceListResponse: DatadogAgreementResourceListResponse,
    DatadogApiKey: DatadogApiKey,
    DatadogApiKeyListResponse: DatadogApiKeyListResponse,
    DatadogHost: DatadogHost,
    DatadogHostListResponse: DatadogHostListResponse,
    DatadogHostMetadata: DatadogHostMetadata,
    DatadogInstallMethod: DatadogInstallMethod,
    DatadogLogsAgent: DatadogLogsAgent,
    DatadogMonitorResource: DatadogMonitorResource,
    DatadogMonitorResourceListResponse: DatadogMonitorResourceListResponse,
    DatadogMonitorResourceUpdateParameters: DatadogMonitorResourceUpdateParameters,
    DatadogOrganizationProperties: DatadogOrganizationProperties,
    DatadogSetPasswordLink: DatadogSetPasswordLink,
    DatadogSingleSignOnProperties: DatadogSingleSignOnProperties,
    DatadogSingleSignOnResource: DatadogSingleSignOnResource,
    DatadogSingleSignOnResourceListResponse: DatadogSingleSignOnResourceListResponse,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ErrorDetail: ErrorDetail,
    ErrorResponse: ErrorResponse,
    FilteringTag: FilteringTag,
    IdentityProperties: IdentityProperties,
    LinkedResource: LinkedResource,
    LinkedResourceListResponse: LinkedResourceListResponse,
    LogRules: LogRules,
    MetricRules: MetricRules,
    MonitorProperties: MonitorProperties,
    MonitorUpdateProperties: MonitorUpdateProperties,
    MonitoredResource: MonitoredResource,
    MonitoredResourceListResponse: MonitoredResourceListResponse,
    MonitoredSubscription: MonitoredSubscription,
    MonitoredSubscriptionProperties: MonitoredSubscriptionProperties,
    MonitoredSubscriptionPropertiesList: MonitoredSubscriptionPropertiesList,
    MonitoringTagRules: MonitoringTagRules,
    MonitoringTagRulesListResponse: MonitoringTagRulesListResponse,
    MonitoringTagRulesProperties: MonitoringTagRulesProperties,
    OperationDisplay: OperationDisplay,
    OperationListResult: OperationListResult,
    OperationResult: OperationResult,
    ResourceSku: ResourceSku,
    SubscriptionList: SubscriptionList,
    SystemData: SystemData,
    UserInfo: UserInfo
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: ["options", "body"],
    mapper: DatadogAgreementResource
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const datadogOrganizationId = {
    parameterPath: "datadogOrganizationId",
    mapper: {
        serializedName: "datadogOrganizationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const monitorName = {
    parameterPath: "monitorName",
    mapper: {
        serializedName: "monitorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: ["options", "body"],
    mapper: DatadogApiKey
};
const body2 = {
    parameterPath: ["options", "body"],
    mapper: DatadogMonitorResource
};
const body3 = {
    parameterPath: ["options", "body"],
    mapper: DatadogMonitorResourceUpdateParameters
};
const body4 = {
    parameterPath: ["options", "body"],
    mapper: MonitoringTagRules
};
const ruleSetName = {
    parameterPath: "ruleSetName",
    mapper: {
        serializedName: "ruleSetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body5 = {
    parameterPath: ["options", "body"],
    mapper: DatadogSingleSignOnResource
};
const configurationName = {
    parameterPath: "configurationName",
    mapper: {
        serializedName: "configurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body6 = {
    parameterPath: ["options", "body"],
    mapper: MonitoredSubscriptionProperties
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MarketplaceAgreements operations. */
class MarketplaceAgreementsImpl {
    /**
     * Initialize a new instance of the class MarketplaceAgreements class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Datadog marketplace agreements in the subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List Datadog marketplace agreements in the subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$6);
    }
    /**
     * Create Datadog marketplace agreement in the subscription.
     * @param options The options parameters.
     */
    createOrUpdate(options) {
        return this.client.sendOperationRequest({ options }, createOrUpdateOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogAgreementResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DatadogAgreementResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogAgreementResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CreationSupported operations. */
class CreationSupportedImpl {
    /**
     * Initialize a new instance of the class CreationSupported class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Informs if the current subscription is being already monitored for selected Datadog organization.
     * @param datadogOrganizationId Datadog Organization Id
     * @param options The options parameters.
     */
    list(datadogOrganizationId, options) {
        const iter = this.listPagingAll(datadogOrganizationId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(datadogOrganizationId, options, settings);
            }
        };
    }
    listPagingPage(datadogOrganizationId, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(datadogOrganizationId, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(datadogOrganizationId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(datadogOrganizationId, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Informs if the current subscription is being already monitored for selected Datadog organization.
     * @param datadogOrganizationId Datadog Organization Id
     * @param options The options parameters.
     */
    _list(datadogOrganizationId, options) {
        return this.client.sendOperationRequest({ datadogOrganizationId, options }, listOperationSpec$5);
    }
    /**
     * Informs if the current subscription is being already monitored for selected Datadog organization.
     * @param datadogOrganizationId Datadog Organization Id
     * @param options The options parameters.
     */
    get(datadogOrganizationId, options) {
        return this.client.sendOperationRequest({ datadogOrganizationId, options }, getOperationSpec$4);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/subscriptionStatuses",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CreateResourceSupportedResponseList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, datadogOrganizationId],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/subscriptionStatuses/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CreateResourceSupportedResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, datadogOrganizationId],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Monitors operations. */
class MonitorsImpl {
    /**
     * Initialize a new instance of the class Monitors class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the api keys for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listApiKeys(resourceGroupName, monitorName, options) {
        const iter = this.listApiKeysPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listApiKeysPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listApiKeysPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listApiKeysPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listApiKeys(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listApiKeysNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listApiKeysPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listApiKeysPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listApiKeysPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the hosts for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listHosts(resourceGroupName, monitorName, options) {
        const iter = this.listHostsPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listHostsPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listHostsPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listHostsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listHosts(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listHostsNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listHostsPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listHostsPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listHostsPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List all Azure resources associated to the same Datadog organization as the target resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listLinkedResources(resourceGroupName, monitorName, options) {
        const iter = this.listLinkedResourcesPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listLinkedResourcesPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listLinkedResourcesPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listLinkedResourcesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listLinkedResources(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listLinkedResourcesNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listLinkedResourcesPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listLinkedResourcesPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listLinkedResourcesPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List the resources currently being monitored by the Datadog monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listMonitoredResources(resourceGroupName, monitorName, options) {
        const iter = this.listMonitoredResourcesPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listMonitoredResourcesPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listMonitoredResourcesPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listMonitoredResourcesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listMonitoredResources(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listMonitoredResourcesNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listMonitoredResourcesPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listMonitoredResourcesPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listMonitoredResourcesPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * List all monitors under the specified subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * List all monitors under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_6, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * List the api keys for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _listApiKeys(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listApiKeysOperationSpec);
    }
    /**
     * Get the default api key.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    getDefaultKey(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, getDefaultKeyOperationSpec);
    }
    /**
     * Set the default api key.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    setDefaultKey(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, setDefaultKeyOperationSpec);
    }
    /**
     * List the hosts for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _listHosts(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listHostsOperationSpec);
    }
    /**
     * List all Azure resources associated to the same Datadog organization as the target resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _listLinkedResources(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listLinkedResourcesOperationSpec);
    }
    /**
     * List the resources currently being monitored by the Datadog monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _listMonitoredResources(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listMonitoredResourcesOperationSpec);
    }
    /**
     * List all monitors under the specified subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$4);
    }
    /**
     * List all monitors under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get the properties of a specific monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, getOperationSpec$3);
    }
    /**
     * Create a monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, options },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, monitorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update a monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, options },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update a monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, monitorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, monitorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Refresh the set password link and return a latest one.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    refreshSetPasswordLink(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, refreshSetPasswordLinkOperationSpec);
    }
    /**
     * ListApiKeysNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the ListApiKeys method.
     * @param options The options parameters.
     */
    _listApiKeysNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listApiKeysNextOperationSpec);
    }
    /**
     * ListHostsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the ListHosts method.
     * @param options The options parameters.
     */
    _listHostsNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listHostsNextOperationSpec);
    }
    /**
     * ListLinkedResourcesNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the ListLinkedResources method.
     * @param options The options parameters.
     */
    _listLinkedResourcesNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listLinkedResourcesNextOperationSpec);
    }
    /**
     * ListMonitoredResourcesNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the ListMonitoredResources method.
     * @param options The options parameters.
     */
    _listMonitoredResourcesNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listMonitoredResourcesNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listApiKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listApiKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatadogApiKeyListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getDefaultKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/getDefaultKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatadogApiKey
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const setDefaultKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/setDefaultKey",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listHostsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listHosts",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatadogHostListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listLinkedResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listLinkedResources",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LinkedResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listMonitoredResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listMonitoredResources",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MonitoredResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/monitors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogMonitorResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogMonitorResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogMonitorResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DatadogMonitorResource
        },
        201: {
            bodyMapper: DatadogMonitorResource
        },
        202: {
            bodyMapper: DatadogMonitorResource
        },
        204: {
            bodyMapper: DatadogMonitorResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DatadogMonitorResource
        },
        201: {
            bodyMapper: DatadogMonitorResource
        },
        202: {
            bodyMapper: DatadogMonitorResource
        },
        204: {
            bodyMapper: DatadogMonitorResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const refreshSetPasswordLinkOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/refreshSetPasswordLink",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DatadogSetPasswordLink
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listApiKeysNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogApiKeyListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listHostsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogHostListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listLinkedResourcesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listMonitoredResourcesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoredResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogMonitorResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogMonitorResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all operations provided by Microsoft.Datadog for the 2023-01-01 api version.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all operations provided by Microsoft.Datadog for the 2023-01-01 api version.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Datadog/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing TagRules operations. */
class TagRulesImpl {
    /**
     * Initialize a new instance of the class TagRules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the tag rules for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName, monitorName, options) {
        const iter = this.listPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the tag rules for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _list(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listOperationSpec$2);
    }
    /**
     * Create or update a tag rule set for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Rule set name
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, monitorName, ruleSetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, ruleSetName, options }, createOrUpdateOperationSpec$1);
    }
    /**
     * Get a tag rule set for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Rule set name
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, ruleSetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, ruleSetName, options }, getOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/tagRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoringTagRulesListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/tagRules/{ruleSetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MonitoringTagRules
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        ruleSetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/tagRules/{ruleSetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoringTagRules
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        ruleSetName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoringTagRulesListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SingleSignOnConfigurations operations. */
class SingleSignOnConfigurationsImpl {
    /**
     * Initialize a new instance of the class SingleSignOnConfigurations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the single sign-on configurations for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName, monitorName, options) {
        const iter = this.listPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the single sign-on configurations for a given monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _list(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listOperationSpec$1);
    }
    /**
     * Configures single-sign-on for this resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Configuration name
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, configurationName, options },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Configures single-sign-on for this resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Configuration name
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, monitorName, configurationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the datadog single sign-on resource for the given Monitor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Configuration name
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, configurationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, configurationName, options }, getOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/singleSignOnConfigurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogSingleSignOnResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DatadogSingleSignOnResource
        },
        201: {
            bodyMapper: DatadogSingleSignOnResource
        },
        202: {
            bodyMapper: DatadogSingleSignOnResource
        },
        204: {
            bodyMapper: DatadogSingleSignOnResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogSingleSignOnResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatadogSingleSignOnResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MonitoredSubscriptions operations. */
class MonitoredSubscriptionsImpl {
    /**
     * Initialize a new instance of the class MonitoredSubscriptions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the subscriptions currently being monitored by the Datadog monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName, monitorName, options) {
        const iter = this.listPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, monitorName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, monitorName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the subscriptions currently being monitored by the Datadog monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _list(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listOperationSpec);
    }
    /**
     * List the subscriptions currently being monitored by the Datadog monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, configurationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, configurationName, options }, getOperationSpec);
    }
    /**
     * Add the subscriptions that should be monitored by the Datadog monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param options The options parameters.
     */
    beginCreateorUpdate(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, configurationName, options },
                spec: createorUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Add the subscriptions that should be monitored by the Datadog monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param options The options parameters.
     */
    beginCreateorUpdateAndWait(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateorUpdate(resourceGroupName, monitorName, configurationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the subscriptions that are being monitored by the Datadog monitor resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, configurationName, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the subscriptions that are being monitored by the Datadog monitor resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName The configuration name. Only 'default' value is supported.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, monitorName, configurationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates the subscriptions that are being monitored by the Datadog monitor resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Configuration name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, configurationName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the subscriptions that are being monitored by the Datadog monitor resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Configuration name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, monitorName, configurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, monitorName, configurationName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/monitoredSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoredSubscriptionPropertiesList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept],
    serializer
};
const createorUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        201: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        202: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        204: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        201: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        202: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        204: {
            bodyMapper: MonitoredSubscriptionProperties
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class MicrosoftDatadogClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the MicrosoftDatadogClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-datadog/3.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-01-01";
        this.marketplaceAgreements = new MarketplaceAgreementsImpl(this);
        this.creationSupported = new CreationSupportedImpl(this);
        this.monitors = new MonitorsImpl(this);
        this.operations = new OperationsImpl(this);
        this.tagRules = new TagRulesImpl(this);
        this.singleSignOnConfigurations = new SingleSignOnConfigurationsImpl(this);
        this.monitoredSubscriptions = new MonitoredSubscriptionsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.MicrosoftDatadogClient = MicrosoftDatadogClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
