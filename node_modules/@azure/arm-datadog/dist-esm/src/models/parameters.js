/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { DatadogAgreementResource as DatadogAgreementResourceMapper, DatadogApiKey as DatadogApiKeyMapper, DatadogMonitorResource as DatadogMonitorResourceMapper, DatadogMonitorResourceUpdateParameters as DatadogMonitorResourceUpdateParametersMapper, MonitoringTagRules as MonitoringTagRulesMapper, DatadogSingleSignOnResource as DatadogSingleSignOnResourceMapper, MonitoredSubscriptionProperties as MonitoredSubscriptionPropertiesMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const body = {
    parameterPath: ["options", "body"],
    mapper: DatadogAgreementResourceMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const datadogOrganizationId = {
    parameterPath: "datadogOrganizationId",
    mapper: {
        serializedName: "datadogOrganizationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const monitorName = {
    parameterPath: "monitorName",
    mapper: {
        serializedName: "monitorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body1 = {
    parameterPath: ["options", "body"],
    mapper: DatadogApiKeyMapper
};
export const body2 = {
    parameterPath: ["options", "body"],
    mapper: DatadogMonitorResourceMapper
};
export const body3 = {
    parameterPath: ["options", "body"],
    mapper: DatadogMonitorResourceUpdateParametersMapper
};
export const body4 = {
    parameterPath: ["options", "body"],
    mapper: MonitoringTagRulesMapper
};
export const ruleSetName = {
    parameterPath: "ruleSetName",
    mapper: {
        serializedName: "ruleSetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body5 = {
    parameterPath: ["options", "body"],
    mapper: DatadogSingleSignOnResourceMapper
};
export const configurationName = {
    parameterPath: "configurationName",
    mapper: {
        serializedName: "configurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const body6 = {
    parameterPath: ["options", "body"],
    mapper: MonitoredSubscriptionPropertiesMapper
};
//# sourceMappingURL=parameters.js.map