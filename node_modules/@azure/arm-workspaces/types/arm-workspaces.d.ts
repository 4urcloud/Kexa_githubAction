import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** The error response send when an operation fails. */
export declare interface ErrorResponse {
    /** error code */
    code: string;
    /** error message */
    message: string;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

export declare class MachineLearningWorkspacesManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MachineLearningWorkspacesManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Microsoft Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MachineLearningWorkspacesManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    workspaces: Workspaces;
}

/** Optional parameters. */
export declare interface MachineLearningWorkspacesManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Azure Machine Learning Studio REST API operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** Display name of operation */
    display?: OperationDisplay;
}

/** Display name of operation */
export declare interface OperationDisplay {
    /** The resource provider name: Microsoft.MachineLearning */
    provider?: string;
    /** The resource on which the operation is performed. */
    resource?: string;
    /** The operation that users can perform. */
    operation?: string;
    /** The description for the operation. */
    description?: string;
}

/** An array of operations supported by the resource provider. */
export declare interface OperationListResult {
    /** List of AML Studio operations supported by the AML Studio resource provider. */
    value?: Operation[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Azure Machine Learning Studio REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** An Azure resource. */
export declare interface Resource {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The location of the resource. This cannot be changed after the resource is created. */
    location: string;
    /** The tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The sku of the workspace. */
    sku?: Sku;
}

/** Sku of the resource */
export declare interface Sku {
    /** Name of the sku */
    name?: string;
    /** Tier of the sku like Basic or Enterprise */
    tier?: string;
}

/** An object that represents a machine learning workspace. */
export declare interface Workspace extends Resource {
    /** The fully qualified arm id of the storage account associated with this workspace. */
    userStorageAccountId?: string;
    /** The email id of the owner for this workspace. */
    ownerEmail?: string;
    /**
     * The type of this workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceType?: WorkspaceType;
    /**
     * The current state of workspace resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceState?: WorkspaceState;
    /**
     * The immutable id associated with this workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceId?: string;
    /**
     * The creation time for this workspace resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: string;
    /**
     * The regional endpoint for the machine learning studio service which hosts this workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly studioEndpoint?: string;
    /** The key vault identifier used for encrypted workspaces. */
    keyVaultIdentifierId?: string;
}

/** Workspace authorization keys for a workspace. */
export declare interface WorkspaceKeysResponse {
    /** Primary authorization key for this workspace. */
    primaryToken?: string;
    /** Secondary authorization key for this workspace. */
    secondaryToken?: string;
}

/** The result of a request to list machine learning workspace keys. */
export declare interface WorkspaceListResult {
    /** The list of machine learning workspaces. Since this list may be incomplete, the nextLink field should be used to request the next list of machine learning workspaces. */
    value?: Workspace[];
    /** The URI that can be used to request the next list of machine learning workspaces. */
    nextLink?: string;
}

/** Interface representing a Workspaces. */
export declare interface Workspaces {
    /**
     * Lists all the available machine learning workspaces under the specified resource group.
     * @param resourceGroupName The name of the resource group to which the machine learning workspace
     *                          belongs.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Lists all the available machine learning workspaces under the specified subscription.
     * @param options The options parameters.
     */
    list(options?: WorkspacesListOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets the properties of the specified machine learning workspace.
     * @param resourceGroupName The name of the resource group to which the machine learning workspace
     *                          belongs.
     * @param workspaceName The name of the machine learning workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspacesGetOptionalParams): Promise<WorkspacesGetResponse>;
    /**
     * Creates or updates a workspace with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the machine learning workspace
     *                          belongs.
     * @param workspaceName The name of the machine learning workspace.
     * @param parameters The parameters for creating or updating a machine learning workspace.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, parameters: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<WorkspacesCreateOrUpdateResponse>;
    /**
     * Deletes a machine learning workspace.
     * @param resourceGroupName The name of the resource group to which the machine learning workspace
     *                          belongs.
     * @param workspaceName The name of the machine learning workspace.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<void>;
    /**
     * Updates a machine learning workspace with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the machine learning workspace
     *                          belongs.
     * @param workspaceName The name of the machine learning workspace.
     * @param parameters The parameters for updating a machine learning workspace.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, parameters: WorkspaceUpdateParameters, options?: WorkspacesUpdateOptionalParams): Promise<WorkspacesUpdateResponse>;
    /**
     * Resync storage keys associated with this workspace.
     * @param workspaceName The name of the machine learning workspace.
     * @param resourceGroupName The name of the resource group to which the machine learning workspace
     *                          belongs.
     * @param options The options parameters.
     */
    resyncStorageKeys(workspaceName: string, resourceGroupName: string, options?: WorkspacesResyncStorageKeysOptionalParams): Promise<void>;
    /**
     * List the authorization keys associated with this workspace.
     * @param workspaceName The name of the machine learning workspace.
     * @param resourceGroupName The name of the resource group to which the machine learning workspace
     *                          belongs.
     * @param options The options parameters.
     */
    listWorkspaceKeys(workspaceName: string, resourceGroupName: string, options?: WorkspacesListWorkspaceKeysOptionalParams): Promise<WorkspacesListWorkspaceKeysResponse>;
}

/** Optional parameters. */
export declare interface WorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type WorkspacesListByResourceGroupNextResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkspacesListByResourceGroupResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspacesListNextResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspacesListResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListWorkspaceKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listWorkspaceKeys operation. */
export declare type WorkspacesListWorkspaceKeysResponse = WorkspaceKeysResponse;

/** Optional parameters. */
export declare interface WorkspacesResyncStorageKeysOptionalParams extends coreClient.OperationOptions {
}

/** Defines values for WorkspaceState. */
export declare type WorkspaceState = "Deleted" | "Enabled" | "Disabled" | "Migrated" | "Updated" | "Registered" | "Unregistered";

/** Optional parameters. */
export declare interface WorkspacesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type WorkspacesUpdateResponse = Workspace;

/** Defines values for WorkspaceType. */
export declare type WorkspaceType = "Production" | "Free" | "Anonymous" | "PaidStandard" | "PaidPremium";

/** The parameters for updating a machine learning workspace. */
export declare interface WorkspaceUpdateParameters {
    /** The resource tags for the machine learning workspace. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The current state of workspace resource. */
    workspaceState?: WorkspaceState;
    /** The key vault identifier used for encrypted workspaces. */
    keyVaultIdentifierId?: string;
    /** The sku of the workspace. */
    sku?: Sku;
}

export { }
