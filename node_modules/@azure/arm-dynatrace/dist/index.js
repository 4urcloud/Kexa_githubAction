'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link SendingMetricsStatus} that the service accepts. */
exports.KnownSendingMetricsStatus = void 0;
(function (KnownSendingMetricsStatus) {
    /** Enabled */
    KnownSendingMetricsStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownSendingMetricsStatus["Disabled"] = "Disabled";
})(exports.KnownSendingMetricsStatus || (exports.KnownSendingMetricsStatus = {}));
/** Known values of {@link SendingLogsStatus} that the service accepts. */
exports.KnownSendingLogsStatus = void 0;
(function (KnownSendingLogsStatus) {
    /** Enabled */
    KnownSendingLogsStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownSendingLogsStatus["Disabled"] = "Disabled";
})(exports.KnownSendingLogsStatus || (exports.KnownSendingLogsStatus = {}));
/** Known values of {@link MonitoringStatus} that the service accepts. */
exports.KnownMonitoringStatus = void 0;
(function (KnownMonitoringStatus) {
    /** Enabled */
    KnownMonitoringStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownMonitoringStatus["Disabled"] = "Disabled";
})(exports.KnownMonitoringStatus || (exports.KnownMonitoringStatus = {}));
/** Known values of {@link MarketplaceSubscriptionStatus} that the service accepts. */
exports.KnownMarketplaceSubscriptionStatus = void 0;
(function (KnownMarketplaceSubscriptionStatus) {
    /** Active */
    KnownMarketplaceSubscriptionStatus["Active"] = "Active";
    /** Suspended */
    KnownMarketplaceSubscriptionStatus["Suspended"] = "Suspended";
})(exports.KnownMarketplaceSubscriptionStatus || (exports.KnownMarketplaceSubscriptionStatus = {}));
/** Known values of {@link SingleSignOnStates} that the service accepts. */
exports.KnownSingleSignOnStates = void 0;
(function (KnownSingleSignOnStates) {
    /** Initial */
    KnownSingleSignOnStates["Initial"] = "Initial";
    /** Enable */
    KnownSingleSignOnStates["Enable"] = "Enable";
    /** Disable */
    KnownSingleSignOnStates["Disable"] = "Disable";
    /** Existing */
    KnownSingleSignOnStates["Existing"] = "Existing";
})(exports.KnownSingleSignOnStates || (exports.KnownSingleSignOnStates = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Deleted */
    KnownProvisioningState["Deleted"] = "Deleted";
    /** NotSpecified */
    KnownProvisioningState["NotSpecified"] = "NotSpecified";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link LiftrResourceCategories} that the service accepts. */
exports.KnownLiftrResourceCategories = void 0;
(function (KnownLiftrResourceCategories) {
    /** Unknown */
    KnownLiftrResourceCategories["Unknown"] = "Unknown";
    /** MonitorLogs */
    KnownLiftrResourceCategories["MonitorLogs"] = "MonitorLogs";
})(exports.KnownLiftrResourceCategories || (exports.KnownLiftrResourceCategories = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ManagedIdentityType} that the service accepts. */
exports.KnownManagedIdentityType = void 0;
(function (KnownManagedIdentityType) {
    /** SystemAssigned */
    KnownManagedIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownManagedIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAndUserAssigned */
    KnownManagedIdentityType["SystemAndUserAssigned"] = "SystemAndUserAssigned";
})(exports.KnownManagedIdentityType || (exports.KnownManagedIdentityType = {}));
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link SendAadLogsStatus} that the service accepts. */
exports.KnownSendAadLogsStatus = void 0;
(function (KnownSendAadLogsStatus) {
    /** Enabled */
    KnownSendAadLogsStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownSendAadLogsStatus["Disabled"] = "Disabled";
})(exports.KnownSendAadLogsStatus || (exports.KnownSendAadLogsStatus = {}));
/** Known values of {@link SendSubscriptionLogsStatus} that the service accepts. */
exports.KnownSendSubscriptionLogsStatus = void 0;
(function (KnownSendSubscriptionLogsStatus) {
    /** Enabled */
    KnownSendSubscriptionLogsStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownSendSubscriptionLogsStatus["Disabled"] = "Disabled";
})(exports.KnownSendSubscriptionLogsStatus || (exports.KnownSendSubscriptionLogsStatus = {}));
/** Known values of {@link SendActivityLogsStatus} that the service accepts. */
exports.KnownSendActivityLogsStatus = void 0;
(function (KnownSendActivityLogsStatus) {
    /** Enabled */
    KnownSendActivityLogsStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownSendActivityLogsStatus["Disabled"] = "Disabled";
})(exports.KnownSendActivityLogsStatus || (exports.KnownSendActivityLogsStatus = {}));
/** Known values of {@link TagAction} that the service accepts. */
exports.KnownTagAction = void 0;
(function (KnownTagAction) {
    /** Include */
    KnownTagAction["Include"] = "Include";
    /** Exclude */
    KnownTagAction["Exclude"] = "Exclude";
})(exports.KnownTagAction || (exports.KnownTagAction = {}));
/** Known values of {@link MonitoringType} that the service accepts. */
exports.KnownMonitoringType = void 0;
(function (KnownMonitoringType) {
    /** CloudInfrastructure */
    KnownMonitoringType["CloudInfrastructure"] = "CLOUD_INFRASTRUCTURE";
    /** FullStack */
    KnownMonitoringType["FullStack"] = "FULL_STACK";
})(exports.KnownMonitoringType || (exports.KnownMonitoringType = {}));
/** Known values of {@link AutoUpdateSetting} that the service accepts. */
exports.KnownAutoUpdateSetting = void 0;
(function (KnownAutoUpdateSetting) {
    /** Enabled */
    KnownAutoUpdateSetting["Enabled"] = "ENABLED";
    /** Disabled */
    KnownAutoUpdateSetting["Disabled"] = "DISABLED";
})(exports.KnownAutoUpdateSetting || (exports.KnownAutoUpdateSetting = {}));
/** Known values of {@link UpdateStatus} that the service accepts. */
exports.KnownUpdateStatus = void 0;
(function (KnownUpdateStatus) {
    /** Incompatible */
    KnownUpdateStatus["Incompatible"] = "INCOMPATIBLE";
    /** Outdated */
    KnownUpdateStatus["Outdated"] = "OUTDATED";
    /** Scheduled */
    KnownUpdateStatus["Scheduled"] = "SCHEDULED";
    /** Suppressed */
    KnownUpdateStatus["Suppressed"] = "SUPPRESSED";
    /** Unknown */
    KnownUpdateStatus["Unknown"] = "UNKNOWN";
    /** UP2Date */
    KnownUpdateStatus["UP2Date"] = "UP2DATE";
    /** UpdateINProgress */
    KnownUpdateStatus["UpdateINProgress"] = "UPDATE_IN_PROGRESS";
    /** UpdatePending */
    KnownUpdateStatus["UpdatePending"] = "UPDATE_PENDING";
    /** UpdateProblem */
    KnownUpdateStatus["UpdateProblem"] = "UPDATE_PROBLEM";
})(exports.KnownUpdateStatus || (exports.KnownUpdateStatus = {}));
/** Known values of {@link AvailabilityState} that the service accepts. */
exports.KnownAvailabilityState = void 0;
(function (KnownAvailabilityState) {
    /** Crashed */
    KnownAvailabilityState["Crashed"] = "CRASHED";
    /** Lost */
    KnownAvailabilityState["Lost"] = "LOST";
    /** Monitored */
    KnownAvailabilityState["Monitored"] = "MONITORED";
    /** PREMonitored */
    KnownAvailabilityState["PREMonitored"] = "PRE_MONITORED";
    /** Shutdown */
    KnownAvailabilityState["Shutdown"] = "SHUTDOWN";
    /** UnexpectedShutdown */
    KnownAvailabilityState["UnexpectedShutdown"] = "UNEXPECTED_SHUTDOWN";
    /** Unknown */
    KnownAvailabilityState["Unknown"] = "UNKNOWN";
    /** Unmonitored */
    KnownAvailabilityState["Unmonitored"] = "UNMONITORED";
})(exports.KnownAvailabilityState || (exports.KnownAvailabilityState = {}));
/** Known values of {@link LogModule} that the service accepts. */
exports.KnownLogModule = void 0;
(function (KnownLogModule) {
    /** Enabled */
    KnownLogModule["Enabled"] = "ENABLED";
    /** Disabled */
    KnownLogModule["Disabled"] = "DISABLED";
})(exports.KnownLogModule || (exports.KnownLogModule = {}));
/** Known values of {@link SSOStatus} that the service accepts. */
exports.KnownSSOStatus = void 0;
(function (KnownSSOStatus) {
    /** Enabled */
    KnownSSOStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownSSOStatus["Disabled"] = "Disabled";
})(exports.KnownSSOStatus || (exports.KnownSSOStatus = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const MonitoredResourceListResponse = {
    type: {
        name: "Composite",
        className: "MonitoredResourceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitoredResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoredResource = {
    type: {
        name: "Composite",
        className: "MonitoredResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            sendingMetrics: {
                serializedName: "sendingMetrics",
                type: {
                    name: "String"
                }
            },
            reasonForMetricsStatus: {
                serializedName: "reasonForMetricsStatus",
                type: {
                    name: "String"
                }
            },
            sendingLogs: {
                serializedName: "sendingLogs",
                type: {
                    name: "String"
                }
            },
            reasonForLogsStatus: {
                serializedName: "reasonForLogsStatus",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const VMExtensionPayload = {
    type: {
        name: "Composite",
        className: "VMExtensionPayload",
        modelProperties: {
            ingestionKey: {
                serializedName: "ingestionKey",
                type: {
                    name: "String"
                }
            },
            environmentId: {
                serializedName: "environmentId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DynatraceEnvironmentProperties = {
    type: {
        name: "Composite",
        className: "DynatraceEnvironmentProperties",
        modelProperties: {
            userId: {
                serializedName: "userId",
                type: {
                    name: "String"
                }
            },
            accountInfo: {
                serializedName: "accountInfo",
                type: {
                    name: "Composite",
                    className: "AccountInfo"
                }
            },
            environmentInfo: {
                serializedName: "environmentInfo",
                type: {
                    name: "Composite",
                    className: "EnvironmentInfo"
                }
            },
            singleSignOnProperties: {
                serializedName: "singleSignOnProperties",
                type: {
                    name: "Composite",
                    className: "DynatraceSingleSignOnProperties"
                }
            }
        }
    }
};
const AccountInfo = {
    type: {
        name: "Composite",
        className: "AccountInfo",
        modelProperties: {
            accountId: {
                serializedName: "accountId",
                type: {
                    name: "String"
                }
            },
            regionId: {
                serializedName: "regionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnvironmentInfo = {
    type: {
        name: "Composite",
        className: "EnvironmentInfo",
        modelProperties: {
            environmentId: {
                serializedName: "environmentId",
                type: {
                    name: "String"
                }
            },
            ingestionKey: {
                serializedName: "ingestionKey",
                type: {
                    name: "String"
                }
            },
            logsIngestionEndpoint: {
                serializedName: "logsIngestionEndpoint",
                type: {
                    name: "String"
                }
            },
            landingURL: {
                serializedName: "landingURL",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DynatraceSingleSignOnProperties = {
    type: {
        name: "Composite",
        className: "DynatraceSingleSignOnProperties",
        modelProperties: {
            singleSignOnState: {
                serializedName: "singleSignOnState",
                type: {
                    name: "String"
                }
            },
            enterpriseAppId: {
                serializedName: "enterpriseAppId",
                type: {
                    name: "String"
                }
            },
            singleSignOnUrl: {
                serializedName: "singleSignOnUrl",
                type: {
                    name: "String"
                }
            },
            aadDomains: {
                serializedName: "aadDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserInfo = {
    type: {
        name: "Composite",
        className: "UserInfo",
        modelProperties: {
            firstName: {
                serializedName: "firstName",
                type: {
                    name: "String"
                }
            },
            lastName: {
                serializedName: "lastName",
                type: {
                    name: "String"
                }
            },
            emailAddress: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$")
                },
                serializedName: "emailAddress",
                type: {
                    name: "String"
                }
            },
            phoneNumber: {
                constraints: {
                    MaxLength: 40
                },
                serializedName: "phoneNumber",
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PlanData = {
    type: {
        name: "Composite",
        className: "PlanData",
        modelProperties: {
            usageType: {
                serializedName: "usageType",
                type: {
                    name: "String"
                }
            },
            billingCycle: {
                serializedName: "billingCycle",
                type: {
                    name: "String"
                }
            },
            planDetails: {
                serializedName: "planDetails",
                type: {
                    name: "String"
                }
            },
            effectiveDate: {
                serializedName: "effectiveDate",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const IdentityProperties = {
    type: {
        name: "Composite",
        className: "IdentityProperties",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                required: true,
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "principalId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitorResourceUpdate = {
    type: {
        name: "Composite",
        className: "MonitorResourceUpdate",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitorResourceListResult = {
    type: {
        name: "Composite",
        className: "MonitorResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitorResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LogRules = {
    type: {
        name: "Composite",
        className: "LogRules",
        modelProperties: {
            sendAadLogs: {
                serializedName: "sendAadLogs",
                type: {
                    name: "String"
                }
            },
            sendSubscriptionLogs: {
                serializedName: "sendSubscriptionLogs",
                type: {
                    name: "String"
                }
            },
            sendActivityLogs: {
                serializedName: "sendActivityLogs",
                type: {
                    name: "String"
                }
            },
            filteringTags: {
                serializedName: "filteringTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilteringTag"
                        }
                    }
                }
            }
        }
    }
};
const FilteringTag = {
    type: {
        name: "Composite",
        className: "FilteringTag",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricRules = {
    type: {
        name: "Composite",
        className: "MetricRules",
        modelProperties: {
            sendingMetrics: {
                serializedName: "sendingMetrics",
                type: {
                    name: "String"
                }
            },
            filteringTags: {
                serializedName: "filteringTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilteringTag"
                        }
                    }
                }
            }
        }
    }
};
const TagRuleListResult = {
    type: {
        name: "Composite",
        className: "TagRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TagRule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MarketplaceSaaSResourceDetailsRequest = {
    type: {
        name: "Composite",
        className: "MarketplaceSaaSResourceDetailsRequest",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MarketplaceSaaSResourceDetailsResponse = {
    type: {
        name: "Composite",
        className: "MarketplaceSaaSResourceDetailsResponse",
        modelProperties: {
            marketplaceSaaSResourceId: {
                serializedName: "marketplaceSaaSResourceId",
                type: {
                    name: "String"
                }
            },
            planId: {
                serializedName: "planId",
                type: {
                    name: "String"
                }
            },
            marketplaceSubscriptionStatus: {
                serializedName: "marketplaceSubscriptionStatus",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DynatraceSingleSignOnResourceListResult = {
    type: {
        name: "Composite",
        className: "DynatraceSingleSignOnResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DynatraceSingleSignOnResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VMHostsListResponse = {
    type: {
        name: "Composite",
        className: "VMHostsListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VMInfo = {
    type: {
        name: "Composite",
        className: "VMInfo",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            monitoringType: {
                serializedName: "monitoringType",
                type: {
                    name: "String"
                }
            },
            autoUpdateSetting: {
                serializedName: "autoUpdateSetting",
                type: {
                    name: "String"
                }
            },
            updateStatus: {
                serializedName: "updateStatus",
                type: {
                    name: "String"
                }
            },
            availabilityState: {
                serializedName: "availabilityState",
                type: {
                    name: "String"
                }
            },
            logModule: {
                serializedName: "logModule",
                type: {
                    name: "String"
                }
            },
            hostGroup: {
                serializedName: "hostGroup",
                type: {
                    name: "String"
                }
            },
            hostName: {
                serializedName: "hostName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricsStatusResponse = {
    type: {
        name: "Composite",
        className: "MetricsStatusResponse",
        modelProperties: {
            azureResourceIds: {
                serializedName: "azureResourceIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AppServiceListResponse = {
    type: {
        name: "Composite",
        className: "AppServiceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AppServiceInfo"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppServiceInfo = {
    type: {
        name: "Composite",
        className: "AppServiceInfo",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            },
            monitoringType: {
                serializedName: "monitoringType",
                type: {
                    name: "String"
                }
            },
            autoUpdateSetting: {
                serializedName: "autoUpdateSetting",
                type: {
                    name: "String"
                }
            },
            updateStatus: {
                serializedName: "updateStatus",
                type: {
                    name: "String"
                }
            },
            availabilityState: {
                serializedName: "availabilityState",
                type: {
                    name: "String"
                }
            },
            logModule: {
                serializedName: "logModule",
                type: {
                    name: "String"
                }
            },
            hostGroup: {
                serializedName: "hostGroup",
                type: {
                    name: "String"
                }
            },
            hostName: {
                serializedName: "hostName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SSODetailsRequest = {
    type: {
        name: "Composite",
        className: "SSODetailsRequest",
        modelProperties: {
            userPrincipal: {
                serializedName: "userPrincipal",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SSODetailsResponse = {
    type: {
        name: "Composite",
        className: "SSODetailsResponse",
        modelProperties: {
            isSsoEnabled: {
                serializedName: "isSsoEnabled",
                type: {
                    name: "String"
                }
            },
            metadataUrl: {
                serializedName: "metadataUrl",
                type: {
                    name: "String"
                }
            },
            singleSignOnUrl: {
                serializedName: "singleSignOnUrl",
                type: {
                    name: "String"
                }
            },
            aadDomains: {
                serializedName: "aadDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            adminUsers: {
                serializedName: "adminUsers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const LinkableEnvironmentRequest = {
    type: {
        name: "Composite",
        className: "LinkableEnvironmentRequest",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            userPrincipal: {
                serializedName: "userPrincipal",
                required: true,
                type: {
                    name: "String"
                }
            },
            region: {
                serializedName: "region",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkableEnvironmentListResponse = {
    type: {
        name: "Composite",
        className: "LinkableEnvironmentListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkableEnvironmentResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkableEnvironmentResponse = {
    type: {
        name: "Composite",
        className: "LinkableEnvironmentResponse",
        modelProperties: {
            environmentId: {
                serializedName: "environmentId",
                type: {
                    name: "String"
                }
            },
            environmentName: {
                serializedName: "environmentName",
                type: {
                    name: "String"
                }
            },
            planData: {
                serializedName: "planData",
                type: {
                    name: "Composite",
                    className: "PlanData"
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const MonitorResource = {
    type: {
        name: "Composite",
        className: "MonitorResource",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            }, monitoringStatus: {
                serializedName: "properties.monitoringStatus",
                type: {
                    name: "String"
                }
            }, marketplaceSubscriptionStatus: {
                serializedName: "properties.marketplaceSubscriptionStatus",
                type: {
                    name: "String"
                }
            }, dynatraceEnvironmentProperties: {
                serializedName: "properties.dynatraceEnvironmentProperties",
                type: {
                    name: "Composite",
                    className: "DynatraceEnvironmentProperties"
                }
            }, userInfo: {
                serializedName: "properties.userInfo",
                type: {
                    name: "Composite",
                    className: "UserInfo"
                }
            }, planData: {
                serializedName: "properties.planData",
                type: {
                    name: "Composite",
                    className: "PlanData"
                }
            }, liftrResourceCategory: {
                serializedName: "properties.liftrResourceCategory",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, liftrResourcePreference: {
                serializedName: "properties.liftrResourcePreference",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const TagRule = {
    type: {
        name: "Composite",
        className: "TagRule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, logRules: {
                serializedName: "properties.logRules",
                type: {
                    name: "Composite",
                    className: "LogRules"
                }
            }, metricRules: {
                serializedName: "properties.metricRules",
                type: {
                    name: "Composite",
                    className: "MetricRules"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DynatraceSingleSignOnResource = {
    type: {
        name: "Composite",
        className: "DynatraceSingleSignOnResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, singleSignOnState: {
                serializedName: "properties.singleSignOnState",
                type: {
                    name: "String"
                }
            }, enterpriseAppId: {
                serializedName: "properties.enterpriseAppId",
                type: {
                    name: "String"
                }
            }, singleSignOnUrl: {
                serializedName: "properties.singleSignOnUrl",
                type: {
                    name: "String"
                }
            }, aadDomains: {
                serializedName: "properties.aadDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MonitoredResourceListResponse: MonitoredResourceListResponse,
    MonitoredResource: MonitoredResource,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    VMExtensionPayload: VMExtensionPayload,
    DynatraceEnvironmentProperties: DynatraceEnvironmentProperties,
    AccountInfo: AccountInfo,
    EnvironmentInfo: EnvironmentInfo,
    DynatraceSingleSignOnProperties: DynatraceSingleSignOnProperties,
    UserInfo: UserInfo,
    PlanData: PlanData,
    SystemData: SystemData,
    IdentityProperties: IdentityProperties,
    UserAssignedIdentity: UserAssignedIdentity,
    Resource: Resource,
    MonitorResourceUpdate: MonitorResourceUpdate,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    MonitorResourceListResult: MonitorResourceListResult,
    LogRules: LogRules,
    FilteringTag: FilteringTag,
    MetricRules: MetricRules,
    TagRuleListResult: TagRuleListResult,
    MarketplaceSaaSResourceDetailsRequest: MarketplaceSaaSResourceDetailsRequest,
    MarketplaceSaaSResourceDetailsResponse: MarketplaceSaaSResourceDetailsResponse,
    DynatraceSingleSignOnResourceListResult: DynatraceSingleSignOnResourceListResult,
    VMHostsListResponse: VMHostsListResponse,
    VMInfo: VMInfo,
    MetricsStatusResponse: MetricsStatusResponse,
    AppServiceListResponse: AppServiceListResponse,
    AppServiceInfo: AppServiceInfo,
    SSODetailsRequest: SSODetailsRequest,
    SSODetailsResponse: SSODetailsResponse,
    LinkableEnvironmentRequest: LinkableEnvironmentRequest,
    LinkableEnvironmentListResponse: LinkableEnvironmentListResponse,
    LinkableEnvironmentResponse: LinkableEnvironmentResponse,
    TrackedResource: TrackedResource,
    ProxyResource: ProxyResource,
    MonitorResource: MonitorResource,
    TagRule: TagRule,
    DynatraceSingleSignOnResource: DynatraceSingleSignOnResource
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-04-27",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const monitorName = {
    parameterPath: "monitorName",
    mapper: {
        serializedName: "monitorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const resource = {
    parameterPath: "resource",
    mapper: MonitorResource
};
const resource1 = {
    parameterPath: "resource",
    mapper: MonitorResourceUpdate
};
const request = {
    parameterPath: "request",
    mapper: MarketplaceSaaSResourceDetailsRequest
};
const request1 = {
    parameterPath: ["options", "request"],
    mapper: SSODetailsRequest
};
const request2 = {
    parameterPath: "request",
    mapper: LinkableEnvironmentRequest
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const ruleSetName = {
    parameterPath: "ruleSetName",
    mapper: {
        serializedName: "ruleSetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resource2 = {
    parameterPath: "resource",
    mapper: TagRule
};
const resource3 = {
    parameterPath: "resource",
    mapper: DynatraceSingleSignOnResource
};
const configurationName = {
    parameterPath: "configurationName",
    mapper: {
        serializedName: "configurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Monitors operations. */
class MonitorsImpl {
    /**
     * Initialize a new instance of the class Monitors class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the resources currently being monitored by the Dynatrace monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listMonitoredResources(resourceGroupName, monitorName, options) {
        const iter = this.listMonitoredResourcesPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listMonitoredResourcesPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listMonitoredResourcesPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listMonitoredResourcesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listMonitoredResources(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listMonitoredResourcesNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listMonitoredResourcesPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listMonitoredResourcesPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listMonitoredResourcesPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all MonitorResource by subscriptionId
     * @param options The options parameters.
     */
    listBySubscriptionId(options) {
        const iter = this.listBySubscriptionIdPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionIdPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionId(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionIdPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionIdPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List MonitorResource resources by resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List the VM/VMSS resources currently being monitored by the Dynatrace resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listHosts(resourceGroupName, monitorName, options) {
        const iter = this.listHostsPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listHostsPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listHostsPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listHostsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listHosts(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listHostsNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listHostsPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listHostsPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listHostsPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Gets list of App Services with Dynatrace PaaS OneAgent enabled
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listAppServices(resourceGroupName, monitorName, options) {
        const iter = this.listAppServicesPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAppServicesPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listAppServicesPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAppServicesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAppServices(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAppServicesNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAppServicesPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAppServicesPagingAll_1() {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listAppServicesPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Gets all the Dynatrace environments that a user can link a azure resource to
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param request The details of the linkable environment request.
     * @param options The options parameters.
     */
    listLinkableEnvironments(resourceGroupName, monitorName, request, options) {
        const iter = this.listLinkableEnvironmentsPagingAll(resourceGroupName, monitorName, request, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listLinkableEnvironmentsPagingPage(resourceGroupName, monitorName, request, options, settings);
            }
        };
    }
    listLinkableEnvironmentsPagingPage(resourceGroupName, monitorName, request, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listLinkableEnvironmentsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listLinkableEnvironments(resourceGroupName, monitorName, request, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listLinkableEnvironmentsNext(resourceGroupName, monitorName, request, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listLinkableEnvironmentsPagingAll(resourceGroupName, monitorName, request, options) {
        return tslib.__asyncGenerator(this, arguments, function* listLinkableEnvironmentsPagingAll_1() {
            var _a, e_6, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listLinkableEnvironmentsPagingPage(resourceGroupName, monitorName, request, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * List the resources currently being monitored by the Dynatrace monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _listMonitoredResources(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listMonitoredResourcesOperationSpec);
    }
    /**
     * Returns the payload that needs to be passed in the request body for installing Dynatrace agent on a
     * VM.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    getVMHostPayload(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, getVMHostPayloadOperationSpec);
    }
    /**
     * Get a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, getOperationSpec$2);
    }
    /**
     * Create a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, monitorName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, resource, options },
                spec: createOrUpdateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, monitorName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, monitorName, resource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param resource The resource properties to be updated.
     * @param options The options parameters.
     */
    update(resourceGroupName, monitorName, resource, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, resource, options }, updateOperationSpec);
    }
    /**
     * Delete a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, monitorName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, monitorName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all MonitorResource by subscriptionId
     * @param options The options parameters.
     */
    _listBySubscriptionId(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionIdOperationSpec);
    }
    /**
     * List MonitorResource resources by resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get Marketplace SaaS resource details of a tenant under a specific subscription
     * @param request Tenant Id
     * @param options The options parameters.
     */
    getMarketplaceSaaSResourceDetails(request, options) {
        return this.client.sendOperationRequest({ request, options }, getMarketplaceSaaSResourceDetailsOperationSpec);
    }
    /**
     * List the VM/VMSS resources currently being monitored by the Dynatrace resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _listHosts(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listHostsOperationSpec);
    }
    /**
     * Get metric status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitor resource
     * @param options The options parameters.
     */
    getMetricStatus(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, getMetricStatusOperationSpec);
    }
    /**
     * Gets list of App Services with Dynatrace PaaS OneAgent enabled
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _listAppServices(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listAppServicesOperationSpec);
    }
    /**
     * Gets the SSO configuration details from the partner.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    getSSODetails(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, getSSODetailsOperationSpec);
    }
    /**
     * Gets all the Dynatrace environments that a user can link a azure resource to
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param request The details of the linkable environment request.
     * @param options The options parameters.
     */
    _listLinkableEnvironments(resourceGroupName, monitorName, request, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, request, options }, listLinkableEnvironmentsOperationSpec);
    }
    /**
     * ListMonitoredResourcesNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the ListMonitoredResources method.
     * @param options The options parameters.
     */
    _listMonitoredResourcesNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listMonitoredResourcesNextOperationSpec);
    }
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionIdNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListHostsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the ListHosts method.
     * @param options The options parameters.
     */
    _listHostsNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listHostsNextOperationSpec);
    }
    /**
     * ListAppServicesNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the ListAppServices method.
     * @param options The options parameters.
     */
    _listAppServicesNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listAppServicesNextOperationSpec);
    }
    /**
     * ListLinkableEnvironmentsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param request The details of the linkable environment request.
     * @param nextLink The nextLink from the previous successful call to the ListLinkableEnvironments
     *                 method.
     * @param options The options parameters.
     */
    _listLinkableEnvironmentsNext(resourceGroupName, monitorName, request, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, request, nextLink, options }, listLinkableEnvironmentsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listMonitoredResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/listMonitoredResources",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MonitoredResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getVMHostPayloadOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/getVMHostPayload",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: VMExtensionPayload
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitorResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MonitorResource
        },
        201: {
            bodyMapper: MonitorResource
        },
        202: {
            bodyMapper: MonitorResource
        },
        204: {
            bodyMapper: MonitorResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resource,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MonitorResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resource1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listBySubscriptionIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Dynatrace.Observability/monitors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitorResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitorResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getMarketplaceSaaSResourceDetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Dynatrace.Observability/getMarketplaceSaaSResourceDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MarketplaceSaaSResourceDetailsResponse
        },
        404: {
            isError: true
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: request,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listHostsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/listHosts",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: VMHostsListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getMetricStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/getMetricStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MetricsStatusResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listAppServicesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/listAppServices",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AppServiceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getSSODetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/getSSODetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SSODetailsResponse
        },
        401: {
            isError: true
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: request1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listLinkableEnvironmentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/listLinkableEnvironments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LinkableEnvironmentListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: request2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listMonitoredResourcesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitoredResourceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listBySubscriptionIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitorResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MonitorResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listHostsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VMHostsListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listAppServicesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AppServiceListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listLinkableEnvironmentsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkableEnvironmentListResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        nextLink
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the operations for Dynatrace.Observability
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the operations for Dynatrace.Observability
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Dynatrace.Observability/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing TagRules operations. */
class TagRulesImpl {
    /**
     * Initialize a new instance of the class TagRules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all TagRule by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName, monitorName, options) {
        const iter = this.listPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, ruleSetName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, ruleSetName, options }, getOperationSpec$1);
    }
    /**
     * Create a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, monitorName, ruleSetName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, ruleSetName, resource, options },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, monitorName, ruleSetName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, monitorName, ruleSetName, resource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, monitorName, ruleSetName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, monitorName, ruleSetName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, monitorName, ruleSetName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, monitorName, ruleSetName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all TagRule by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _list(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/tagRules/{ruleSetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TagRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        ruleSetName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/tagRules/{ruleSetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: TagRule
        },
        201: {
            bodyMapper: TagRule
        },
        202: {
            bodyMapper: TagRule
        },
        204: {
            bodyMapper: TagRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resource2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        ruleSetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/tagRules/{ruleSetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        ruleSetName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/tagRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TagRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TagRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SingleSignOn operations. */
class SingleSignOnImpl {
    /**
     * Initialize a new instance of the class SingleSignOn class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all DynatraceSingleSignOnResource by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName, monitorName, options) {
        const iter = this.listPagingAll(resourceGroupName, monitorName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, monitorName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, monitorName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, monitorName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, monitorName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, monitorName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, monitorName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, monitorName, configurationName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    monitorName,
                    configurationName,
                    resource,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, monitorName, configurationName, resource, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, monitorName, configurationName, resource, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param options The options parameters.
     */
    get(resourceGroupName, monitorName, configurationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, configurationName, options }, getOperationSpec);
    }
    /**
     * List all DynatraceSingleSignOnResource by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    _list(resourceGroupName, monitorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, monitorName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, monitorName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DynatraceSingleSignOnResource
        },
        201: {
            bodyMapper: DynatraceSingleSignOnResource
        },
        202: {
            bodyMapper: DynatraceSingleSignOnResource
        },
        204: {
            bodyMapper: DynatraceSingleSignOnResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: resource3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DynatraceSingleSignOnResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        configurationName
    ],
    headerParameters: [accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}/singleSignOnConfigurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DynatraceSingleSignOnResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DynatraceSingleSignOnResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        monitorName,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class DynatraceObservability extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the DynatraceObservability class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-dynatrace/2.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-04-27";
        this.monitors = new MonitorsImpl(this);
        this.operations = new OperationsImpl(this);
        this.tagRules = new TagRulesImpl(this);
        this.singleSignOn = new SingleSignOnImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.DynatraceObservability = DynatraceObservability;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
