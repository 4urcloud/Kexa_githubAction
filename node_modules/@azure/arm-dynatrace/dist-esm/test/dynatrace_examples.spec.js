/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { DynatraceObservability } from "../src/dynatraceObservability";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Dynatrace test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let monitorName;
    let resource;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new DynatraceObservability(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            monitorName = "myMonitormtest1";
            resource = {
                dynatraceEnvironmentProperties: {
                    accountInfo: {},
                    environmentInfo: {},
                    singleSignOnProperties: {}
                },
                identity: { type: "SystemAssigned" },
                liftrResourceCategory: "Unknown",
                location,
                marketplaceSubscriptionStatus: "Active",
                monitoringStatus: "Enabled",
                planData: {
                    billingCycle: "Monthly",
                    effectiveDate: new Date("2023-08-22T15:14:33+02:00"),
                    planDetails: "dynatraceapitestplan",
                    usageType: "Committed"
                },
                provisioningState: "Accepted",
                tags: { environment: "Dev" },
                userInfo: {
                    country: "westus2",
                    emailAddress: "alice@microsoft.com",
                    firstName: "Alice",
                    lastName: "Bobab",
                    phoneNumber: "123456"
                }
            };
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it.skip("monitor create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.monitors.beginCreateOrUpdateAndWait(resourceGroup, monitorName, resource, testPollingOptions);
            assert.equal(res.name, monitorName);
        });
    });
    it("monitor get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.monitors.get(resourceGroup, monitorName);
            assert.equal(res.name, monitorName);
        });
    });
    it("monitor list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.monitors.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("operation list test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.operations.list()), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    });
    it("monitor delete test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.monitors.beginDeleteAndWait(resourceGroup, monitorName);
            try {
                for (var _d = true, _e = __asyncValues(client.monitors.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=dynatrace_examples.spec.js.map