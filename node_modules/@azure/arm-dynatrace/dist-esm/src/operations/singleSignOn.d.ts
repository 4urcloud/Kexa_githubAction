import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SingleSignOn } from "../operationsInterfaces";
import { DynatraceObservability } from "../dynatraceObservability";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { DynatraceSingleSignOnResource, SingleSignOnListOptionalParams, SingleSignOnCreateOrUpdateOptionalParams, SingleSignOnCreateOrUpdateResponse, SingleSignOnGetOptionalParams, SingleSignOnGetResponse } from "../models";
/** Class containing SingleSignOn operations. */
export declare class SingleSignOnImpl implements SingleSignOn {
    private readonly client;
    /**
     * Initialize a new instance of the class SingleSignOn class.
     * @param client Reference to the service client
     */
    constructor(client: DynatraceObservability);
    /**
     * List all DynatraceSingleSignOnResource by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, monitorName: string, options?: SingleSignOnListOptionalParams): PagedAsyncIterableIterator<DynatraceSingleSignOnResource>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Create a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, monitorName: string, configurationName: string, resource: DynatraceSingleSignOnResource, options?: SingleSignOnCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SingleSignOnCreateOrUpdateResponse>, SingleSignOnCreateOrUpdateResponse>>;
    /**
     * Create a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, monitorName: string, configurationName: string, resource: DynatraceSingleSignOnResource, options?: SingleSignOnCreateOrUpdateOptionalParams): Promise<SingleSignOnCreateOrUpdateResponse>;
    /**
     * Get a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, monitorName: string, configurationName: string, options?: SingleSignOnGetOptionalParams): Promise<SingleSignOnGetResponse>;
    /**
     * List all DynatraceSingleSignOnResource by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=singleSignOn.d.ts.map