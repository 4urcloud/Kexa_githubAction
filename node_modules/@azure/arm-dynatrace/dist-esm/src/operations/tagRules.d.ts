import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TagRules } from "../operationsInterfaces";
import { DynatraceObservability } from "../dynatraceObservability";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { TagRule, TagRulesListOptionalParams, TagRulesGetOptionalParams, TagRulesGetResponse, TagRulesCreateOrUpdateOptionalParams, TagRulesCreateOrUpdateResponse, TagRulesDeleteOptionalParams } from "../models";
/** Class containing TagRules operations. */
export declare class TagRulesImpl implements TagRules {
    private readonly client;
    /**
     * Initialize a new instance of the class TagRules class.
     * @param client Reference to the service client
     */
    constructor(client: DynatraceObservability);
    /**
     * List all TagRule by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, monitorName: string, options?: TagRulesListOptionalParams): PagedAsyncIterableIterator<TagRule>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: TagRulesGetOptionalParams): Promise<TagRulesGetResponse>;
    /**
     * Create a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, monitorName: string, ruleSetName: string, resource: TagRule, options?: TagRulesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<TagRulesCreateOrUpdateResponse>, TagRulesCreateOrUpdateResponse>>;
    /**
     * Create a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, monitorName: string, ruleSetName: string, resource: TagRule, options?: TagRulesCreateOrUpdateOptionalParams): Promise<TagRulesCreateOrUpdateResponse>;
    /**
     * Delete a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: TagRulesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: TagRulesDeleteOptionalParams): Promise<void>;
    /**
     * List all TagRule by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=tagRules.d.ts.map