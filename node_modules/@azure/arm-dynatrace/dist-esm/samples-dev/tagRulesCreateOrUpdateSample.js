/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { DynatraceObservability } from "@azure/arm-dynatrace";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create a TagRule
 *
 * @summary Create a TagRule
 * x-ms-original-file: specification/dynatrace/resource-manager/Dynatrace.Observability/stable/2023-04-27/examples/TagRules_CreateOrUpdate_MaximumSet_Gen.json
 */
function tagRulesCreateOrUpdateMaximumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DYNATRACE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["DYNATRACE_RESOURCE_GROUP"] || "myResourceGroup";
        const monitorName = "myMonitor";
        const ruleSetName = "default";
        const resource = {
            logRules: {
                filteringTags: [
                    { name: "Environment", action: "Include", value: "Prod" },
                    { name: "Environment", action: "Exclude", value: "Dev" }
                ],
                sendAadLogs: "Enabled",
                sendActivityLogs: "Enabled",
                sendSubscriptionLogs: "Enabled"
            },
            metricRules: {
                filteringTags: [
                    { name: "Environment", action: "Include", value: "Prod" }
                ],
                sendingMetrics: "Enabled"
            },
            provisioningState: "Accepted"
        };
        const credential = new DefaultAzureCredential();
        const client = new DynatraceObservability(credential, subscriptionId);
        const result = yield client.tagRules.beginCreateOrUpdateAndWait(resourceGroupName, monitorName, ruleSetName, resource);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Create a TagRule
 *
 * @summary Create a TagRule
 * x-ms-original-file: specification/dynatrace/resource-manager/Dynatrace.Observability/stable/2023-04-27/examples/TagRules_CreateOrUpdate_MinimumSet_Gen.json
 */
function tagRulesCreateOrUpdateMinimumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["DYNATRACE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["DYNATRACE_RESOURCE_GROUP"] || "myResourceGroup";
        const monitorName = "myMonitor";
        const ruleSetName = "default";
        const resource = {};
        const credential = new DefaultAzureCredential();
        const client = new DynatraceObservability(credential, subscriptionId);
        const result = yield client.tagRules.beginCreateOrUpdateAndWait(resourceGroupName, monitorName, ruleSetName, resource);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        tagRulesCreateOrUpdateMaximumSetGen();
        tagRulesCreateOrUpdateMinimumSetGen();
    });
}
main().catch(console.error);
//# sourceMappingURL=tagRulesCreateOrUpdateSample.js.map