import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Dynatrace Account Information */
export declare interface AccountInfo {
    /** Account Id of the account this environment is linked to */
    accountId?: string;
    /** Region in which the account is created */
    regionId?: string;
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** Details of App Services having Dynatrace OneAgent installed */
export declare interface AppServiceInfo {
    /** App service resource ID */
    resourceId?: string;
    /** Version of the Dynatrace agent installed on the App Service. */
    version?: string;
    /** The monitoring mode of OneAgent */
    monitoringType?: MonitoringType;
    /** Update settings of OneAgent. */
    autoUpdateSetting?: AutoUpdateSetting;
    /** The current update status of OneAgent. */
    updateStatus?: UpdateStatus;
    /** The availability state of OneAgent. */
    availabilityState?: AvailabilityState;
    /** Tells whether log modules are enabled or not */
    logModule?: LogModule;
    /** The name of the host group */
    hostGroup?: string;
    /** The name of the host */
    hostName?: string;
}

/** Response of a list App Services Operation. */
export declare interface AppServiceListResponse {
    /** The items on this page */
    value?: AppServiceInfo[];
    /** The link to the next page of items */
    nextLink?: string;
}

/**
 * Defines values for AutoUpdateSetting. \
 * {@link KnownAutoUpdateSetting} can be used interchangeably with AutoUpdateSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ENABLED** \
 * **DISABLED**
 */
export declare type AutoUpdateSetting = string;

/**
 * Defines values for AvailabilityState. \
 * {@link KnownAvailabilityState} can be used interchangeably with AvailabilityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CRASHED** \
 * **LOST** \
 * **MONITORED** \
 * **PRE_MONITORED** \
 * **SHUTDOWN** \
 * **UNEXPECTED_SHUTDOWN** \
 * **UNKNOWN** \
 * **UNMONITORED**
 */
export declare type AvailabilityState = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Properties of the Dynatrace environment. */
export declare interface DynatraceEnvironmentProperties {
    /** User id */
    userId?: string;
    /** Dynatrace Account Information */
    accountInfo?: AccountInfo;
    /** Dynatrace Environment Information */
    environmentInfo?: EnvironmentInfo;
    /** The details of a Dynatrace single sign-on. */
    singleSignOnProperties?: DynatraceSingleSignOnProperties;
}

export declare class DynatraceObservability extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DynatraceObservability class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DynatraceObservabilityOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    monitors: Monitors;
    operations: Operations;
    tagRules: TagRules;
    singleSignOn: SingleSignOn;
}

/** Optional parameters. */
export declare interface DynatraceObservabilityOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The details of a Dynatrace single sign-on. */
export declare interface DynatraceSingleSignOnProperties {
    /** State of Single Sign On */
    singleSignOnState?: SingleSignOnStates;
    /** Version of the Dynatrace agent installed on the VM. */
    enterpriseAppId?: string;
    /** The login URL specific to this Dynatrace Environment */
    singleSignOnUrl?: string;
    /** array of Aad(azure active directory) domains */
    aadDomains?: string[];
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Single sign-on configurations for a given monitor resource. */
export declare interface DynatraceSingleSignOnResource extends ProxyResource {
    /**
     * System metadata for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** State of Single Sign On */
    singleSignOnState?: SingleSignOnStates;
    /** Version of the Dynatrace agent installed on the VM. */
    enterpriseAppId?: string;
    /** The login URL specific to this Dynatrace Environment */
    singleSignOnUrl?: string;
    /** array of Aad(azure active directory) domains */
    aadDomains?: string[];
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The response of a DynatraceSingleSignOnResource list operation. */
export declare interface DynatraceSingleSignOnResourceListResult {
    /** The items on this page */
    value: DynatraceSingleSignOnResource[];
    /** The link to the next page of items */
    nextLink?: string;
}

/** Dynatrace Environment Information */
export declare interface EnvironmentInfo {
    /** Id of the environment created */
    environmentId?: string;
    /** Ingestion key of the environment */
    ingestionKey?: string;
    /** Ingestion endpoint used for sending logs */
    logsIngestionEndpoint?: string;
    /** Landing URL for Dynatrace environment */
    landingURL?: string;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored. */
export declare interface FilteringTag {
    /** The name (also known as the key) of the tag. */
    name?: string;
    /** The value of the tag. */
    value?: string;
    /** Valid actions for a filtering tag. Exclusion takes priority over inclusion. */
    action?: TagAction;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The properties of the managed service identities assigned to this resource. */
export declare interface IdentityProperties {
    /**
     * The Active Directory tenant id of the principal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The active directory identifier of this principal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /** The type of managed identity assigned to this resource. */
    type: ManagedIdentityType;
    /** The identities assigned to this resource by the user. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link AutoUpdateSetting} that the service accepts. */
export declare enum KnownAutoUpdateSetting {
    /** Enabled */
    Enabled = "ENABLED",
    /** Disabled */
    Disabled = "DISABLED"
}

/** Known values of {@link AvailabilityState} that the service accepts. */
export declare enum KnownAvailabilityState {
    /** Crashed */
    Crashed = "CRASHED",
    /** Lost */
    Lost = "LOST",
    /** Monitored */
    Monitored = "MONITORED",
    /** PREMonitored */
    PREMonitored = "PRE_MONITORED",
    /** Shutdown */
    Shutdown = "SHUTDOWN",
    /** UnexpectedShutdown */
    UnexpectedShutdown = "UNEXPECTED_SHUTDOWN",
    /** Unknown */
    Unknown = "UNKNOWN",
    /** Unmonitored */
    Unmonitored = "UNMONITORED"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link LiftrResourceCategories} that the service accepts. */
export declare enum KnownLiftrResourceCategories {
    /** Unknown */
    Unknown = "Unknown",
    /** MonitorLogs */
    MonitorLogs = "MonitorLogs"
}

/** Known values of {@link LogModule} that the service accepts. */
export declare enum KnownLogModule {
    /** Enabled */
    Enabled = "ENABLED",
    /** Disabled */
    Disabled = "DISABLED"
}

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export declare enum KnownManagedIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAndUserAssigned */
    SystemAndUserAssigned = "SystemAndUserAssigned"
}

/** Known values of {@link MarketplaceSubscriptionStatus} that the service accepts. */
export declare enum KnownMarketplaceSubscriptionStatus {
    /** Active */
    Active = "Active",
    /** Suspended */
    Suspended = "Suspended"
}

/** Known values of {@link MonitoringStatus} that the service accepts. */
export declare enum KnownMonitoringStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link MonitoringType} that the service accepts. */
export declare enum KnownMonitoringType {
    /** CloudInfrastructure */
    CloudInfrastructure = "CLOUD_INFRASTRUCTURE",
    /** FullStack */
    FullStack = "FULL_STACK"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Accepted */
    Accepted = "Accepted",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleted */
    Deleted = "Deleted",
    /** NotSpecified */
    NotSpecified = "NotSpecified"
}

/** Known values of {@link SendAadLogsStatus} that the service accepts. */
export declare enum KnownSendAadLogsStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SendActivityLogsStatus} that the service accepts. */
export declare enum KnownSendActivityLogsStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SendingLogsStatus} that the service accepts. */
export declare enum KnownSendingLogsStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SendingMetricsStatus} that the service accepts. */
export declare enum KnownSendingMetricsStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SendSubscriptionLogsStatus} that the service accepts. */
export declare enum KnownSendSubscriptionLogsStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link SingleSignOnStates} that the service accepts. */
export declare enum KnownSingleSignOnStates {
    /** Initial */
    Initial = "Initial",
    /** Enable */
    Enable = "Enable",
    /** Disable */
    Disable = "Disable",
    /** Existing */
    Existing = "Existing"
}

/** Known values of {@link SSOStatus} that the service accepts. */
export declare enum KnownSSOStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link TagAction} that the service accepts. */
export declare enum KnownTagAction {
    /** Include */
    Include = "Include",
    /** Exclude */
    Exclude = "Exclude"
}

/** Known values of {@link UpdateStatus} that the service accepts. */
export declare enum KnownUpdateStatus {
    /** Incompatible */
    Incompatible = "INCOMPATIBLE",
    /** Outdated */
    Outdated = "OUTDATED",
    /** Scheduled */
    Scheduled = "SCHEDULED",
    /** Suppressed */
    Suppressed = "SUPPRESSED",
    /** Unknown */
    Unknown = "UNKNOWN",
    /** UP2Date */
    UP2Date = "UP2DATE",
    /** UpdateINProgress */
    UpdateINProgress = "UPDATE_IN_PROGRESS",
    /** UpdatePending */
    UpdatePending = "UPDATE_PENDING",
    /** UpdateProblem */
    UpdateProblem = "UPDATE_PROBLEM"
}

/**
 * Defines values for LiftrResourceCategories. \
 * {@link KnownLiftrResourceCategories} can be used interchangeably with LiftrResourceCategories,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **MonitorLogs**
 */
export declare type LiftrResourceCategories = string;

/** Response for getting all the linkable environments */
export declare interface LinkableEnvironmentListResponse {
    /** List of environments for which user is an admin */
    value?: LinkableEnvironmentResponse[];
    /** Link to the next set of results, if any. */
    nextLink?: string;
}

/** Request for getting all the linkable environments for a user */
export declare interface LinkableEnvironmentRequest {
    /** Tenant Id of the user in which they want to link the environment */
    tenantId: string;
    /** user principal id of the user */
    userPrincipal: string;
    /** Azure region in which we want to link the environment */
    region: string;
}

/** Response for getting all the linkable environments */
export declare interface LinkableEnvironmentResponse {
    /** environment id for which user is an admin */
    environmentId?: string;
    /** Name of the environment */
    environmentName?: string;
    /** Billing plan information. */
    planData?: PlanData;
}

/**
 * Defines values for LogModule. \
 * {@link KnownLogModule} can be used interchangeably with LogModule,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ENABLED** \
 * **DISABLED**
 */
export declare type LogModule = string;

/** Set of rules for sending logs for the Monitor resource. */
export declare interface LogRules {
    /** Flag specifying if AAD logs should be sent for the Monitor resource. */
    sendAadLogs?: SendAadLogsStatus;
    /** Flag specifying if subscription logs should be sent for the Monitor resource. */
    sendSubscriptionLogs?: SendSubscriptionLogsStatus;
    /** Flag specifying if activity logs from Azure resources should be sent for the Monitor resource. */
    sendActivityLogs?: SendActivityLogsStatus;
    /**
     * List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.
     * If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
     */
    filteringTags?: FilteringTag[];
}

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAndUserAssigned**
 */
export declare type ManagedIdentityType = string;

/** Request for getting Marketplace SaaS resource details for a tenant Id */
export declare interface MarketplaceSaaSResourceDetailsRequest {
    /** Tenant Id */
    tenantId: string;
}

/** Marketplace SaaS resource details linked to the given tenant Id */
export declare interface MarketplaceSaaSResourceDetailsResponse {
    /** Id of the Marketplace SaaS Resource */
    marketplaceSaaSResourceId?: string;
    /** Id of the plan */
    planId?: string;
    /** Marketplace subscription status */
    marketplaceSubscriptionStatus?: MarketplaceSubscriptionStatus;
}

/**
 * Defines values for MarketplaceSubscriptionStatus. \
 * {@link KnownMarketplaceSubscriptionStatus} can be used interchangeably with MarketplaceSubscriptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Suspended**
 */
export declare type MarketplaceSubscriptionStatus = string;

/** Set of rules for sending metrics for the Monitor resource. */
export declare interface MetricRules {
    /** Flag specifying if metrics from Azure resources should be sent for the Monitor resource. */
    sendingMetrics?: SendingMetricsStatus;
    /** List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags. */
    filteringTags?: FilteringTag[];
}

/** Response of get metrics status operation */
export declare interface MetricsStatusResponse {
    /** Azure resource IDs */
    azureResourceIds?: string[];
}

/** Details of resource being monitored by Dynatrace monitor resource */
export declare interface MonitoredResource {
    /** The ARM id of the resource. */
    id?: string;
    /** Flag indicating if resource is sending metrics to Dynatrace. */
    sendingMetrics?: SendingMetricsStatus;
    /** Reason for why the resource is sending metrics (or why it is not sending). */
    reasonForMetricsStatus?: string;
    /** Flag indicating if resource is sending logs to Dynatrace. */
    sendingLogs?: SendingLogsStatus;
    /** Reason for why the resource is sending logs (or why it is not sending). */
    reasonForLogsStatus?: string;
}

/** List of all the resources being monitored by Dynatrace monitor resource */
export declare interface MonitoredResourceListResponse {
    /** The items on this page */
    value?: MonitoredResource[];
    /** The link to the next page of items */
    nextLink?: string;
}

/**
 * Defines values for MonitoringStatus. \
 * {@link KnownMonitoringStatus} can be used interchangeably with MonitoringStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type MonitoringStatus = string;

/**
 * Defines values for MonitoringType. \
 * {@link KnownMonitoringType} can be used interchangeably with MonitoringType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CLOUD_INFRASTRUCTURE** \
 * **FULL_STACK**
 */
export declare type MonitoringType = string;

/** Dynatrace Monitor Resource */
export declare interface MonitorResource extends TrackedResource {
    /**
     * System metadata for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The managed service identities assigned to this resource. */
    identity?: IdentityProperties;
    /** Status of the monitor. */
    monitoringStatus?: MonitoringStatus;
    /** Marketplace subscription status. */
    marketplaceSubscriptionStatus?: MarketplaceSubscriptionStatus;
    /** Properties of the Dynatrace environment. */
    dynatraceEnvironmentProperties?: DynatraceEnvironmentProperties;
    /** User info. */
    userInfo?: UserInfo;
    /** Billing plan information. */
    planData?: PlanData;
    /**
     * Liftr Resource category.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly liftrResourceCategory?: LiftrResourceCategories;
    /**
     * The priority of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly liftrResourcePreference?: number;
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The response of a MonitorResource list operation. */
export declare interface MonitorResourceListResult {
    /** The items on this page */
    value: MonitorResource[];
    /** The link to the next page of items */
    nextLink?: string;
}

/** The updatable properties of the MonitorResource. */
export declare interface MonitorResourceUpdate {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a Monitors. */
export declare interface Monitors {
    /**
     * List the resources currently being monitored by the Dynatrace monitor resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listMonitoredResources(resourceGroupName: string, monitorName: string, options?: MonitorsListMonitoredResourcesOptionalParams): PagedAsyncIterableIterator<MonitoredResource>;
    /**
     * List all MonitorResource by subscriptionId
     * @param options The options parameters.
     */
    listBySubscriptionId(options?: MonitorsListBySubscriptionIdOptionalParams): PagedAsyncIterableIterator<MonitorResource>;
    /**
     * List MonitorResource resources by resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: MonitorsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<MonitorResource>;
    /**
     * List the VM/VMSS resources currently being monitored by the Dynatrace resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listHosts(resourceGroupName: string, monitorName: string, options?: MonitorsListHostsOptionalParams): PagedAsyncIterableIterator<VMInfo>;
    /**
     * Gets list of App Services with Dynatrace PaaS OneAgent enabled
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    listAppServices(resourceGroupName: string, monitorName: string, options?: MonitorsListAppServicesOptionalParams): PagedAsyncIterableIterator<AppServiceInfo>;
    /**
     * Gets all the Dynatrace environments that a user can link a azure resource to
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param request The details of the linkable environment request.
     * @param options The options parameters.
     */
    listLinkableEnvironments(resourceGroupName: string, monitorName: string, request: LinkableEnvironmentRequest, options?: MonitorsListLinkableEnvironmentsOptionalParams): PagedAsyncIterableIterator<LinkableEnvironmentResponse>;
    /**
     * Returns the payload that needs to be passed in the request body for installing Dynatrace agent on a
     * VM.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    getVMHostPayload(resourceGroupName: string, monitorName: string, options?: MonitorsGetVMHostPayloadOptionalParams): Promise<MonitorsGetVMHostPayloadResponse>;
    /**
     * Get a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, monitorName: string, options?: MonitorsGetOptionalParams): Promise<MonitorsGetResponse>;
    /**
     * Create a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, monitorName: string, resource: MonitorResource, options?: MonitorsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<MonitorsCreateOrUpdateResponse>, MonitorsCreateOrUpdateResponse>>;
    /**
     * Create a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, monitorName: string, resource: MonitorResource, options?: MonitorsCreateOrUpdateOptionalParams): Promise<MonitorsCreateOrUpdateResponse>;
    /**
     * Update a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param resource The resource properties to be updated.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, monitorName: string, resource: MonitorResourceUpdate, options?: MonitorsUpdateOptionalParams): Promise<MonitorsUpdateResponse>;
    /**
     * Delete a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, monitorName: string, options?: MonitorsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a MonitorResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, monitorName: string, options?: MonitorsDeleteOptionalParams): Promise<void>;
    /**
     * Get Marketplace SaaS resource details of a tenant under a specific subscription
     * @param request Tenant Id
     * @param options The options parameters.
     */
    getMarketplaceSaaSResourceDetails(request: MarketplaceSaaSResourceDetailsRequest, options?: MonitorsGetMarketplaceSaaSResourceDetailsOptionalParams): Promise<MonitorsGetMarketplaceSaaSResourceDetailsResponse>;
    /**
     * Get metric status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Name of the Monitor resource
     * @param options The options parameters.
     */
    getMetricStatus(resourceGroupName: string, monitorName: string, options?: MonitorsGetMetricStatusOptionalParams): Promise<MonitorsGetMetricStatusResponse>;
    /**
     * Gets the SSO configuration details from the partner.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    getSSODetails(resourceGroupName: string, monitorName: string, options?: MonitorsGetSSODetailsOptionalParams): Promise<MonitorsGetSSODetailsResponse>;
}

/** Optional parameters. */
export declare interface MonitorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type MonitorsCreateOrUpdateResponse = MonitorResource;

/** Optional parameters. */
export declare interface MonitorsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface MonitorsGetMarketplaceSaaSResourceDetailsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMarketplaceSaaSResourceDetails operation. */
export declare type MonitorsGetMarketplaceSaaSResourceDetailsResponse = MarketplaceSaaSResourceDetailsResponse;

/** Optional parameters. */
export declare interface MonitorsGetMetricStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMetricStatus operation. */
export declare type MonitorsGetMetricStatusResponse = MetricsStatusResponse;

/** Optional parameters. */
export declare interface MonitorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MonitorsGetResponse = MonitorResource;

/** Optional parameters. */
export declare interface MonitorsGetSSODetailsOptionalParams extends coreClient.OperationOptions {
    /** The details of the get sso details request. */
    request?: SSODetailsRequest;
}

/** Contains response data for the getSSODetails operation. */
export declare type MonitorsGetSSODetailsResponse = SSODetailsResponse;

/** Optional parameters. */
export declare interface MonitorsGetVMHostPayloadOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getVMHostPayload operation. */
export declare type MonitorsGetVMHostPayloadResponse = VMExtensionPayload;

/** Optional parameters. */
export declare interface MonitorsListAppServicesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAppServicesNext operation. */
export declare type MonitorsListAppServicesNextResponse = AppServiceListResponse;

/** Optional parameters. */
export declare interface MonitorsListAppServicesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAppServices operation. */
export declare type MonitorsListAppServicesResponse = AppServiceListResponse;

/** Optional parameters. */
export declare interface MonitorsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type MonitorsListByResourceGroupNextResponse = MonitorResourceListResult;

/** Optional parameters. */
export declare interface MonitorsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type MonitorsListByResourceGroupResponse = MonitorResourceListResult;

/** Optional parameters. */
export declare interface MonitorsListBySubscriptionIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionIdNext operation. */
export declare type MonitorsListBySubscriptionIdNextResponse = MonitorResourceListResult;

/** Optional parameters. */
export declare interface MonitorsListBySubscriptionIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionId operation. */
export declare type MonitorsListBySubscriptionIdResponse = MonitorResourceListResult;

/** Optional parameters. */
export declare interface MonitorsListHostsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listHostsNext operation. */
export declare type MonitorsListHostsNextResponse = VMHostsListResponse;

/** Optional parameters. */
export declare interface MonitorsListHostsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listHosts operation. */
export declare type MonitorsListHostsResponse = VMHostsListResponse;

/** Optional parameters. */
export declare interface MonitorsListLinkableEnvironmentsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listLinkableEnvironmentsNext operation. */
export declare type MonitorsListLinkableEnvironmentsNextResponse = LinkableEnvironmentListResponse;

/** Optional parameters. */
export declare interface MonitorsListLinkableEnvironmentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listLinkableEnvironments operation. */
export declare type MonitorsListLinkableEnvironmentsResponse = LinkableEnvironmentListResponse;

/** Optional parameters. */
export declare interface MonitorsListMonitoredResourcesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMonitoredResourcesNext operation. */
export declare type MonitorsListMonitoredResourcesNextResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export declare interface MonitorsListMonitoredResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMonitoredResources operation. */
export declare type MonitorsListMonitoredResourcesResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export declare interface MonitorsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type MonitorsUpdateResponse = MonitorResource;

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * List the operations for Dynatrace.Observability
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/** Billing plan information. */
export declare interface PlanData {
    /** different usage type like PAYG/COMMITTED. this could be enum */
    usageType?: string;
    /** different billing cycles like MONTHLY/WEEKLY. this could be enum */
    billingCycle?: string;
    /** plan id as published by Dynatrace */
    planDetails?: string;
    /** date when plan was applied */
    effectiveDate?: Date;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **NotSpecified**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/**
 * Defines values for SendAadLogsStatus. \
 * {@link KnownSendAadLogsStatus} can be used interchangeably with SendAadLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SendAadLogsStatus = string;

/**
 * Defines values for SendActivityLogsStatus. \
 * {@link KnownSendActivityLogsStatus} can be used interchangeably with SendActivityLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SendActivityLogsStatus = string;

/**
 * Defines values for SendingLogsStatus. \
 * {@link KnownSendingLogsStatus} can be used interchangeably with SendingLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SendingLogsStatus = string;

/**
 * Defines values for SendingMetricsStatus. \
 * {@link KnownSendingMetricsStatus} can be used interchangeably with SendingMetricsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SendingMetricsStatus = string;

/**
 * Defines values for SendSubscriptionLogsStatus. \
 * {@link KnownSendSubscriptionLogsStatus} can be used interchangeably with SendSubscriptionLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SendSubscriptionLogsStatus = string;

/** Interface representing a SingleSignOn. */
export declare interface SingleSignOn {
    /**
     * List all DynatraceSingleSignOnResource by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, monitorName: string, options?: SingleSignOnListOptionalParams): PagedAsyncIterableIterator<DynatraceSingleSignOnResource>;
    /**
     * Create a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, monitorName: string, configurationName: string, resource: DynatraceSingleSignOnResource, options?: SingleSignOnCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<SingleSignOnCreateOrUpdateResponse>, SingleSignOnCreateOrUpdateResponse>>;
    /**
     * Create a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, monitorName: string, configurationName: string, resource: DynatraceSingleSignOnResource, options?: SingleSignOnCreateOrUpdateOptionalParams): Promise<SingleSignOnCreateOrUpdateResponse>;
    /**
     * Get a DynatraceSingleSignOnResource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param configurationName Single Sign On Configuration Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, monitorName: string, configurationName: string, options?: SingleSignOnGetOptionalParams): Promise<SingleSignOnGetResponse>;
}

/** Optional parameters. */
export declare interface SingleSignOnCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SingleSignOnCreateOrUpdateResponse = DynatraceSingleSignOnResource;

/** Optional parameters. */
export declare interface SingleSignOnGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SingleSignOnGetResponse = DynatraceSingleSignOnResource;

/** Optional parameters. */
export declare interface SingleSignOnListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SingleSignOnListNextResponse = DynatraceSingleSignOnResourceListResult;

/** Optional parameters. */
export declare interface SingleSignOnListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SingleSignOnListResponse = DynatraceSingleSignOnResourceListResult;

/**
 * Defines values for SingleSignOnStates. \
 * {@link KnownSingleSignOnStates} can be used interchangeably with SingleSignOnStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Enable** \
 * **Disable** \
 * **Existing**
 */
export declare type SingleSignOnStates = string;

/** Request for getting sso details for a user */
export declare interface SSODetailsRequest {
    /** user principal id of the user */
    userPrincipal: string;
}

/** SSO details from the Dynatrace partner */
export declare interface SSODetailsResponse {
    /** Whether the SSO is enabled for this resource or not. */
    isSsoEnabled?: SSOStatus;
    /** URL for Azure AD metadata */
    metadataUrl?: string;
    /** The login URL specific to this Dynatrace Environment */
    singleSignOnUrl?: string;
    /** array of Aad(azure active directory) domains */
    aadDomains?: string[];
    /** Array of admin user emails. */
    adminUsers?: string[];
}

/**
 * Defines values for SSOStatus. \
 * {@link KnownSSOStatus} can be used interchangeably with SSOStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type SSOStatus = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/**
 * Defines values for TagAction. \
 * {@link KnownTagAction} can be used interchangeably with TagAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Include** \
 * **Exclude**
 */
export declare type TagAction = string;

/** Tag rules for a monitor resource */
export declare interface TagRule extends ProxyResource {
    /**
     * System metadata for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Set of rules for sending logs for the Monitor resource. */
    logRules?: LogRules;
    /** Set of rules for sending metrics for the Monitor resource. */
    metricRules?: MetricRules;
    /**
     * Provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The response of a TagRule list operation. */
export declare interface TagRuleListResult {
    /** The items on this page */
    value: TagRule[];
    /** The link to the next page of items */
    nextLink?: string;
}

/** Interface representing a TagRules. */
export declare interface TagRules {
    /**
     * List all TagRule by monitorName
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, monitorName: string, options?: TagRulesListOptionalParams): PagedAsyncIterableIterator<TagRule>;
    /**
     * Get a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: TagRulesGetOptionalParams): Promise<TagRulesGetResponse>;
    /**
     * Create a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, monitorName: string, ruleSetName: string, resource: TagRule, options?: TagRulesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<TagRulesCreateOrUpdateResponse>, TagRulesCreateOrUpdateResponse>>;
    /**
     * Create a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param resource Resource create parameters.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, monitorName: string, ruleSetName: string, resource: TagRule, options?: TagRulesCreateOrUpdateOptionalParams): Promise<TagRulesCreateOrUpdateResponse>;
    /**
     * Delete a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: TagRulesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a TagRule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param monitorName Monitor resource name
     * @param ruleSetName Monitor resource name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, monitorName: string, ruleSetName: string, options?: TagRulesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface TagRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TagRulesCreateOrUpdateResponse = TagRule;

/** Optional parameters. */
export declare interface TagRulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TagRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TagRulesGetResponse = TagRule;

/** Optional parameters. */
export declare interface TagRulesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TagRulesListNextResponse = TagRuleListResult;

/** Optional parameters. */
export declare interface TagRulesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TagRulesListResponse = TagRuleListResult;

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/**
 * Defines values for UpdateStatus. \
 * {@link KnownUpdateStatus} can be used interchangeably with UpdateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **INCOMPATIBLE** \
 * **OUTDATED** \
 * **SCHEDULED** \
 * **SUPPRESSED** \
 * **UNKNOWN** \
 * **UP2DATE** \
 * **UPDATE_IN_PROGRESS** \
 * **UPDATE_PENDING** \
 * **UPDATE_PROBLEM**
 */
export declare type UpdateStatus = string;

/** A managed identity assigned by the user. */
export declare interface UserAssignedIdentity {
    /** The active directory client identifier for this principal. */
    clientId: string;
    /** The active directory identifier for this principal. */
    principalId: string;
}

/** User info. */
export declare interface UserInfo {
    /** First Name of the user */
    firstName?: string;
    /** Last Name of the user */
    lastName?: string;
    /** Email of the user used by Dynatrace for contacting them if needed */
    emailAddress?: string;
    /** Phone number of the user used by Dynatrace for contacting them if needed */
    phoneNumber?: string;
    /** Country of the user */
    country?: string;
}

/** Response of payload to be passed while installing VM agent. */
export declare interface VMExtensionPayload {
    /** Ingestion key of the environment */
    ingestionKey?: string;
    /** Id of the environment created */
    environmentId?: string;
}

/** Response of a list VM Host Operation. */
export declare interface VMHostsListResponse {
    /** The items on this page */
    value?: VMInfo[];
    /** The link to the next page of items */
    nextLink?: string;
}

/** Details of VM Resource having Dynatrace OneAgent installed */
export declare interface VMInfo {
    /** Azure VM resource ID */
    resourceId?: string;
    /** Version of the Dynatrace agent installed on the VM. */
    version?: string;
    /** The monitoring mode of OneAgent */
    monitoringType?: MonitoringType;
    /** Update settings of OneAgent. */
    autoUpdateSetting?: AutoUpdateSetting;
    /** The current update status of OneAgent. */
    updateStatus?: UpdateStatus;
    /** The availability state of OneAgent. */
    availabilityState?: AvailabilityState;
    /** Tells whether log modules are enabled or not */
    logModule?: LogModule;
    /** The name of the host group */
    hostGroup?: string;
    /** The name of the host */
    hostName?: string;
}

export { }
