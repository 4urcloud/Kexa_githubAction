/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmAppinsights = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var Annotation = {
        serializedName: "Annotation",
        type: {
            name: "Composite",
            className: "Annotation",
            modelProperties: {
                annotationName: {
                    serializedName: "AnnotationName",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "Category",
                    type: {
                        name: "String"
                    }
                },
                eventTime: {
                    serializedName: "EventTime",
                    type: {
                        name: "DateTime"
                    }
                },
                id: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "Properties",
                    type: {
                        name: "String"
                    }
                },
                relatedAnnotation: {
                    serializedName: "RelatedAnnotation",
                    defaultValue: 'null',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InnerError = {
        serializedName: "InnerError",
        type: {
            name: "Composite",
            className: "InnerError",
            modelProperties: {
                diagnosticcontext: {
                    serializedName: "diagnosticcontext",
                    type: {
                        name: "String"
                    }
                },
                time: {
                    serializedName: "time",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var AnnotationError = {
        serializedName: "AnnotationError",
        type: {
            name: "Composite",
            className: "AnnotationError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "InnerError"
                    }
                }
            }
        }
    };
    var APIKeyRequest = {
        serializedName: "APIKeyRequest",
        type: {
            name: "Composite",
            className: "APIKeyRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                linkedReadProperties: {
                    serializedName: "linkedReadProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                linkedWriteProperties: {
                    serializedName: "linkedWriteProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAPIKey = {
        serializedName: "ApplicationInsightsComponentAPIKey",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAPIKey",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                apiKey: {
                    readOnly: true,
                    serializedName: "apiKey",
                    type: {
                        name: "String"
                    }
                },
                createdDate: {
                    serializedName: "createdDate",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                linkedReadProperties: {
                    serializedName: "linkedReadProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                linkedWriteProperties: {
                    serializedName: "linkedWriteProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentExportRequest = {
        serializedName: "ApplicationInsightsComponentExportRequest",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentExportRequest",
            modelProperties: {
                recordTypes: {
                    serializedName: "RecordTypes",
                    type: {
                        name: "String"
                    }
                },
                destinationType: {
                    serializedName: "DestinationType",
                    type: {
                        name: "String"
                    }
                },
                destinationAddress: {
                    serializedName: "DestinationAddress",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    serializedName: "IsEnabled",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueEnabled: {
                    serializedName: "NotificationQueueEnabled",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueUri: {
                    serializedName: "NotificationQueueUri",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageSubscriptionId: {
                    serializedName: "DestinationStorageSubscriptionId",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageLocationId: {
                    serializedName: "DestinationStorageLocationId",
                    type: {
                        name: "String"
                    }
                },
                destinationAccountId: {
                    serializedName: "DestinationAccountId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentExportConfiguration = {
        serializedName: "ApplicationInsightsComponentExportConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentExportConfiguration",
            modelProperties: {
                exportId: {
                    readOnly: true,
                    serializedName: "ExportId",
                    type: {
                        name: "String"
                    }
                },
                instrumentationKey: {
                    readOnly: true,
                    serializedName: "InstrumentationKey",
                    type: {
                        name: "String"
                    }
                },
                recordTypes: {
                    serializedName: "RecordTypes",
                    type: {
                        name: "String"
                    }
                },
                applicationName: {
                    readOnly: true,
                    serializedName: "ApplicationName",
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    readOnly: true,
                    serializedName: "SubscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    readOnly: true,
                    serializedName: "ResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageSubscriptionId: {
                    readOnly: true,
                    serializedName: "DestinationStorageSubscriptionId",
                    type: {
                        name: "String"
                    }
                },
                destinationStorageLocationId: {
                    readOnly: true,
                    serializedName: "DestinationStorageLocationId",
                    type: {
                        name: "String"
                    }
                },
                destinationAccountId: {
                    readOnly: true,
                    serializedName: "DestinationAccountId",
                    type: {
                        name: "String"
                    }
                },
                destinationType: {
                    readOnly: true,
                    serializedName: "DestinationType",
                    type: {
                        name: "String"
                    }
                },
                isUserEnabled: {
                    readOnly: true,
                    serializedName: "IsUserEnabled",
                    type: {
                        name: "String"
                    }
                },
                lastUserUpdate: {
                    readOnly: true,
                    serializedName: "LastUserUpdate",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueEnabled: {
                    serializedName: "NotificationQueueEnabled",
                    type: {
                        name: "String"
                    }
                },
                exportStatus: {
                    readOnly: true,
                    serializedName: "ExportStatus",
                    type: {
                        name: "String"
                    }
                },
                lastSuccessTime: {
                    readOnly: true,
                    serializedName: "LastSuccessTime",
                    type: {
                        name: "String"
                    }
                },
                lastGapTime: {
                    readOnly: true,
                    serializedName: "LastGapTime",
                    type: {
                        name: "String"
                    }
                },
                permanentErrorReason: {
                    readOnly: true,
                    serializedName: "PermanentErrorReason",
                    type: {
                        name: "String"
                    }
                },
                storageName: {
                    readOnly: true,
                    serializedName: "StorageName",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    readOnly: true,
                    serializedName: "ContainerName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentDataVolumeCap = {
        serializedName: "ApplicationInsightsComponentDataVolumeCap",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentDataVolumeCap",
            modelProperties: {
                cap: {
                    serializedName: "Cap",
                    type: {
                        name: "Number"
                    }
                },
                resetTime: {
                    readOnly: true,
                    serializedName: "ResetTime",
                    type: {
                        name: "Number"
                    }
                },
                warningThreshold: {
                    serializedName: "WarningThreshold",
                    type: {
                        name: "Number"
                    }
                },
                stopSendNotificationWhenHitThreshold: {
                    serializedName: "StopSendNotificationWhenHitThreshold",
                    type: {
                        name: "Boolean"
                    }
                },
                stopSendNotificationWhenHitCap: {
                    serializedName: "StopSendNotificationWhenHitCap",
                    type: {
                        name: "Boolean"
                    }
                },
                maxHistoryCap: {
                    readOnly: true,
                    serializedName: "MaxHistoryCap",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentBillingFeatures = {
        serializedName: "ApplicationInsightsComponentBillingFeatures",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentBillingFeatures",
            modelProperties: {
                dataVolumeCap: {
                    serializedName: "DataVolumeCap",
                    type: {
                        name: "Composite",
                        className: "ApplicationInsightsComponentDataVolumeCap"
                    }
                },
                currentBillingFeatures: {
                    serializedName: "CurrentBillingFeatures",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentQuotaStatus = {
        serializedName: "ApplicationInsightsComponentQuotaStatus",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentQuotaStatus",
            modelProperties: {
                appId: {
                    readOnly: true,
                    serializedName: "AppId",
                    type: {
                        name: "String"
                    }
                },
                shouldBeThrottled: {
                    readOnly: true,
                    serializedName: "ShouldBeThrottled",
                    type: {
                        name: "Boolean"
                    }
                },
                expirationTime: {
                    readOnly: true,
                    serializedName: "ExpirationTime",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFeatureCapabilities = {
        serializedName: "ApplicationInsightsComponentFeatureCapabilities",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFeatureCapabilities",
            modelProperties: {
                supportExportData: {
                    readOnly: true,
                    serializedName: "SupportExportData",
                    type: {
                        name: "Boolean"
                    }
                },
                burstThrottlePolicy: {
                    readOnly: true,
                    serializedName: "BurstThrottlePolicy",
                    type: {
                        name: "String"
                    }
                },
                metadataClass: {
                    readOnly: true,
                    serializedName: "MetadataClass",
                    type: {
                        name: "String"
                    }
                },
                liveStreamMetrics: {
                    readOnly: true,
                    serializedName: "LiveStreamMetrics",
                    type: {
                        name: "Boolean"
                    }
                },
                applicationMap: {
                    readOnly: true,
                    serializedName: "ApplicationMap",
                    type: {
                        name: "Boolean"
                    }
                },
                workItemIntegration: {
                    readOnly: true,
                    serializedName: "WorkItemIntegration",
                    type: {
                        name: "Boolean"
                    }
                },
                powerBIIntegration: {
                    readOnly: true,
                    serializedName: "PowerBIIntegration",
                    type: {
                        name: "Boolean"
                    }
                },
                openSchema: {
                    readOnly: true,
                    serializedName: "OpenSchema",
                    type: {
                        name: "Boolean"
                    }
                },
                proactiveDetection: {
                    readOnly: true,
                    serializedName: "ProactiveDetection",
                    type: {
                        name: "Boolean"
                    }
                },
                analyticsIntegration: {
                    readOnly: true,
                    serializedName: "AnalyticsIntegration",
                    type: {
                        name: "Boolean"
                    }
                },
                multipleStepWebTest: {
                    readOnly: true,
                    serializedName: "MultipleStepWebTest",
                    type: {
                        name: "Boolean"
                    }
                },
                apiAccessLevel: {
                    readOnly: true,
                    serializedName: "ApiAccessLevel",
                    type: {
                        name: "String"
                    }
                },
                trackingType: {
                    readOnly: true,
                    serializedName: "TrackingType",
                    type: {
                        name: "String"
                    }
                },
                dailyCap: {
                    readOnly: true,
                    serializedName: "DailyCap",
                    type: {
                        name: "Number"
                    }
                },
                dailyCapResetTime: {
                    readOnly: true,
                    serializedName: "DailyCapResetTime",
                    type: {
                        name: "Number"
                    }
                },
                throttleRate: {
                    readOnly: true,
                    serializedName: "ThrottleRate",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFeatureCapability = {
        serializedName: "ApplicationInsightsComponentFeatureCapability",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFeatureCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "Value",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    readOnly: true,
                    serializedName: "Unit",
                    type: {
                        name: "String"
                    }
                },
                meterId: {
                    readOnly: true,
                    serializedName: "MeterId",
                    type: {
                        name: "String"
                    }
                },
                meterRateFrequency: {
                    readOnly: true,
                    serializedName: "MeterRateFrequency",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFeature = {
        serializedName: "ApplicationInsightsComponentFeature",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFeature",
            modelProperties: {
                featureName: {
                    readOnly: true,
                    serializedName: "FeatureName",
                    type: {
                        name: "String"
                    }
                },
                meterId: {
                    readOnly: true,
                    serializedName: "MeterId",
                    type: {
                        name: "String"
                    }
                },
                meterRateFrequency: {
                    readOnly: true,
                    serializedName: "MeterRateFrequency",
                    type: {
                        name: "String"
                    }
                },
                resouceId: {
                    readOnly: true,
                    serializedName: "ResouceId",
                    type: {
                        name: "String"
                    }
                },
                isHidden: {
                    readOnly: true,
                    serializedName: "IsHidden",
                    type: {
                        name: "Boolean"
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "Capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentFeatureCapability"
                            }
                        }
                    }
                },
                title: {
                    readOnly: true,
                    serializedName: "Title",
                    type: {
                        name: "String"
                    }
                },
                isMainFeature: {
                    readOnly: true,
                    serializedName: "IsMainFeature",
                    type: {
                        name: "Boolean"
                    }
                },
                supportedAddonFeatures: {
                    readOnly: true,
                    serializedName: "SupportedAddonFeatures",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAvailableFeatures = {
        serializedName: "ApplicationInsightsComponentAvailableFeatures",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAvailableFeatures",
            modelProperties: {
                result: {
                    readOnly: true,
                    serializedName: "Result",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentFeature"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions = {
        serializedName: "ApplicationInsightsComponentProactiveDetectionConfiguration_RuleDefinitions",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions",
            modelProperties: {
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "DisplayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "Description",
                    type: {
                        name: "String"
                    }
                },
                helpUrl: {
                    serializedName: "HelpUrl",
                    type: {
                        name: "String"
                    }
                },
                isHidden: {
                    serializedName: "IsHidden",
                    type: {
                        name: "Boolean"
                    }
                },
                isEnabledByDefault: {
                    serializedName: "IsEnabledByDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                isInPreview: {
                    serializedName: "IsInPreview",
                    type: {
                        name: "Boolean"
                    }
                },
                supportsEmailNotifications: {
                    serializedName: "SupportsEmailNotifications",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentProactiveDetectionConfiguration = {
        serializedName: "ApplicationInsightsComponentProactiveDetectionConfiguration",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentProactiveDetectionConfiguration",
            modelProperties: {
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                enabled: {
                    serializedName: "Enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                sendEmailsToSubscriptionOwners: {
                    serializedName: "SendEmailsToSubscriptionOwners",
                    type: {
                        name: "Boolean"
                    }
                },
                customEmails: {
                    serializedName: "CustomEmails",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                lastUpdatedTime: {
                    serializedName: "LastUpdatedTime",
                    type: {
                        name: "String"
                    }
                },
                ruleDefinitions: {
                    serializedName: "RuleDefinitions",
                    type: {
                        name: "Composite",
                        className: "ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions"
                    }
                }
            }
        }
    };
    var WorkItemConfiguration = {
        serializedName: "WorkItemConfiguration",
        type: {
            name: "Composite",
            className: "WorkItemConfiguration",
            modelProperties: {
                connectorId: {
                    serializedName: "ConnectorId",
                    type: {
                        name: "String"
                    }
                },
                configDisplayName: {
                    serializedName: "ConfigDisplayName",
                    type: {
                        name: "String"
                    }
                },
                isDefault: {
                    serializedName: "IsDefault",
                    type: {
                        name: "Boolean"
                    }
                },
                id: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                configProperties: {
                    serializedName: "ConfigProperties",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkItemCreateConfiguration = {
        serializedName: "WorkItemCreateConfiguration",
        type: {
            name: "Composite",
            className: "WorkItemCreateConfiguration",
            modelProperties: {
                connectorId: {
                    serializedName: "ConnectorId",
                    type: {
                        name: "String"
                    }
                },
                connectorDataConfiguration: {
                    serializedName: "ConnectorDataConfiguration",
                    type: {
                        name: "String"
                    }
                },
                validateOnly: {
                    serializedName: "ValidateOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                workItemProperties: {
                    serializedName: "WorkItemProperties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkItemConfigurationError = {
        serializedName: "WorkItemConfigurationError",
        type: {
            name: "Composite",
            className: "WorkItemConfigurationError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innererror: {
                    serializedName: "innererror",
                    type: {
                        name: "Composite",
                        className: "InnerError"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentFavorite = {
        serializedName: "ApplicationInsightsComponentFavorite",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentFavorite",
            modelProperties: {
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                config: {
                    serializedName: "Config",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    serializedName: "Version",
                    type: {
                        name: "String"
                    }
                },
                favoriteId: {
                    readOnly: true,
                    serializedName: "FavoriteId",
                    type: {
                        name: "String"
                    }
                },
                favoriteType: {
                    serializedName: "FavoriteType",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "shared",
                            "user"
                        ]
                    }
                },
                sourceType: {
                    serializedName: "SourceType",
                    type: {
                        name: "String"
                    }
                },
                timeModified: {
                    readOnly: true,
                    serializedName: "TimeModified",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "Tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                category: {
                    serializedName: "Category",
                    type: {
                        name: "String"
                    }
                },
                isGeneratedFromTemplate: {
                    serializedName: "IsGeneratedFromTemplate",
                    type: {
                        name: "Boolean"
                    }
                },
                userId: {
                    readOnly: true,
                    serializedName: "UserId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentWebTestLocation = {
        serializedName: "ApplicationInsightsComponentWebTestLocation",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentWebTestLocation",
            modelProperties: {
                displayName: {
                    readOnly: true,
                    serializedName: "DisplayName",
                    type: {
                        name: "String"
                    }
                },
                tag: {
                    readOnly: true,
                    serializedName: "Tag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebtestsResource = {
        serializedName: "WebtestsResource",
        type: {
            name: "Composite",
            className: "WebtestsResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var TagsResource = {
        serializedName: "TagsResource",
        type: {
            name: "Composite",
            className: "TagsResource",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebTestGeolocation = {
        serializedName: "WebTestGeolocation",
        type: {
            name: "Composite",
            className: "WebTestGeolocation",
            modelProperties: {
                location: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebTestPropertiesConfiguration = {
        serializedName: "WebTestProperties_Configuration",
        type: {
            name: "Composite",
            className: "WebTestPropertiesConfiguration",
            modelProperties: {
                webTest: {
                    serializedName: "WebTest",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WebTest = {
        serializedName: "WebTest",
        type: {
            name: "Composite",
            className: "WebTest",
            modelProperties: __assign(__assign({}, WebtestsResource.type.modelProperties), { kind: {
                    serializedName: "kind",
                    defaultValue: 'ping',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ping",
                            "multistep"
                        ]
                    }
                }, syntheticMonitorId: {
                    required: true,
                    serializedName: "properties.SyntheticMonitorId",
                    type: {
                        name: "String"
                    }
                }, webTestName: {
                    required: true,
                    serializedName: "properties.Name",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.Description",
                    type: {
                        name: "String"
                    }
                }, enabled: {
                    serializedName: "properties.Enabled",
                    type: {
                        name: "Boolean"
                    }
                }, frequency: {
                    serializedName: "properties.Frequency",
                    defaultValue: 300,
                    type: {
                        name: "Number"
                    }
                }, timeout: {
                    serializedName: "properties.Timeout",
                    defaultValue: 30,
                    type: {
                        name: "Number"
                    }
                }, webTestKind: {
                    required: true,
                    serializedName: "properties.Kind",
                    defaultValue: 'ping',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "ping",
                            "multistep"
                        ]
                    }
                }, retryEnabled: {
                    serializedName: "properties.RetryEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, locations: {
                    required: true,
                    serializedName: "properties.Locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebTestGeolocation"
                            }
                        }
                    }
                }, configuration: {
                    serializedName: "properties.Configuration",
                    type: {
                        name: "Composite",
                        className: "WebTestPropertiesConfiguration"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationInsightsComponentAnalyticsItemProperties = {
        serializedName: "ApplicationInsightsComponentAnalyticsItemProperties",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAnalyticsItemProperties",
            modelProperties: {
                functionAlias: {
                    serializedName: "functionAlias",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAnalyticsItem = {
        serializedName: "ApplicationInsightsComponentAnalyticsItem",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAnalyticsItem",
            modelProperties: {
                id: {
                    serializedName: "Id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "Name",
                    type: {
                        name: "String"
                    }
                },
                content: {
                    serializedName: "Content",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "Version",
                    type: {
                        name: "String"
                    }
                },
                scope: {
                    serializedName: "Scope",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "Type",
                    type: {
                        name: "String"
                    }
                },
                timeCreated: {
                    readOnly: true,
                    serializedName: "TimeCreated",
                    type: {
                        name: "String"
                    }
                },
                timeModified: {
                    readOnly: true,
                    serializedName: "TimeModified",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "Properties",
                    type: {
                        name: "Composite",
                        className: "ApplicationInsightsComponentAnalyticsItemProperties"
                    }
                }
            }
        }
    };
    var WorkbookTemplateResource = {
        serializedName: "WorkbookTemplateResource",
        type: {
            name: "Composite",
            className: "WorkbookTemplateResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkbookTemplateGallery = {
        serializedName: "WorkbookTemplateGallery",
        type: {
            name: "Composite",
            className: "WorkbookTemplateGallery",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "category",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                order: {
                    serializedName: "order",
                    type: {
                        name: "Number"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkbookTemplateLocalizedGallery = {
        serializedName: "WorkbookTemplateLocalizedGallery",
        type: {
            name: "Composite",
            className: "WorkbookTemplateLocalizedGallery",
            modelProperties: {
                templateData: {
                    serializedName: "templateData",
                    type: {
                        name: "Object"
                    }
                },
                galleries: {
                    serializedName: "galleries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkbookTemplateGallery"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkbookTemplate = {
        serializedName: "WorkbookTemplate",
        type: {
            name: "Composite",
            className: "WorkbookTemplate",
            modelProperties: __assign(__assign({}, WorkbookTemplateResource.type.modelProperties), { priority: {
                    serializedName: "properties.priority",
                    type: {
                        name: "Number"
                    }
                }, author: {
                    serializedName: "properties.author",
                    type: {
                        name: "String"
                    }
                }, templateData: {
                    required: true,
                    serializedName: "properties.templateData",
                    type: {
                        name: "Object"
                    }
                }, galleries: {
                    required: true,
                    serializedName: "properties.galleries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkbookTemplateGallery"
                            }
                        }
                    }
                }, localized: {
                    serializedName: "properties.localized",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "WorkbookTemplateLocalizedGallery"
                                    }
                                }
                            }
                        }
                    }
                } })
        }
    };
    var WorkbookTemplateUpdateParameters = {
        serializedName: "WorkbookTemplateUpdateParameters",
        type: {
            name: "Composite",
            className: "WorkbookTemplateUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                priority: {
                    serializedName: "properties.priority",
                    type: {
                        name: "Number"
                    }
                },
                author: {
                    serializedName: "properties.author",
                    type: {
                        name: "String"
                    }
                },
                templateData: {
                    required: true,
                    serializedName: "properties.templateData",
                    type: {
                        name: "Object"
                    }
                },
                galleries: {
                    required: true,
                    serializedName: "properties.galleries",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkbookTemplateGallery"
                            }
                        }
                    }
                },
                localized: {
                    serializedName: "properties.localized",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "WorkbookTemplateLocalizedGallery"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkbookTemplateErrorFieldContract = {
        serializedName: "WorkbookTemplateErrorFieldContract",
        type: {
            name: "Composite",
            className: "WorkbookTemplateErrorFieldContract",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkbookTemplateErrorBody = {
        serializedName: "WorkbookTemplateErrorBody",
        type: {
            name: "Composite",
            className: "WorkbookTemplateErrorBody",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkbookTemplateErrorFieldContract"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkbookTemplateError = {
        serializedName: "WorkbookTemplateError",
        type: {
            name: "Composite",
            className: "WorkbookTemplateError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "WorkbookTemplateErrorBody"
                    }
                }
            }
        }
    };
    var MyWorkbookUserAssignedIdentities = {
        serializedName: "MyWorkbookUserAssignedIdentities",
        type: {
            name: "Composite",
            className: "MyWorkbookUserAssignedIdentities",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MyWorkbookManagedIdentity = {
        serializedName: "MyWorkbookManagedIdentity",
        type: {
            name: "Composite",
            className: "MyWorkbookManagedIdentity",
            modelProperties: {
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Composite",
                        className: "MyWorkbookUserAssignedIdentities"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MyWorkbookResource = {
        serializedName: "MyWorkbookResource",
        type: {
            name: "Composite",
            className: "MyWorkbookResource",
            modelProperties: {
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "MyWorkbookManagedIdentity"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SystemData = {
        serializedName: "systemData",
        type: {
            name: "Composite",
            className: "SystemData",
            modelProperties: {
                createdBy: {
                    serializedName: "createdBy",
                    type: {
                        name: "String"
                    }
                },
                createdByType: {
                    serializedName: "createdByType",
                    type: {
                        name: "String"
                    }
                },
                createdAt: {
                    serializedName: "createdAt",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModifiedBy: {
                    serializedName: "lastModifiedBy",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedByType: {
                    serializedName: "lastModifiedByType",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedAt: {
                    serializedName: "lastModifiedAt",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var MyWorkbook = {
        serializedName: "MyWorkbook",
        type: {
            name: "Composite",
            className: "MyWorkbook",
            modelProperties: __assign(__assign({}, MyWorkbookResource.type.modelProperties), { kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, serializedData: {
                    required: true,
                    nullable: true,
                    serializedName: "properties.serializedData",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, timeModified: {
                    readOnly: true,
                    serializedName: "properties.timeModified",
                    type: {
                        name: "String"
                    }
                }, category: {
                    required: true,
                    serializedName: "properties.category",
                    type: {
                        name: "String"
                    }
                }, myWorkbookTags: {
                    serializedName: "properties.tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, userId: {
                    readOnly: true,
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                }, sourceId: {
                    serializedName: "properties.sourceId",
                    type: {
                        name: "String"
                    }
                }, storageUri: {
                    nullable: true,
                    serializedName: "properties.storageUri",
                    type: {
                        name: "String"
                    }
                }, systemData: {
                    readOnly: true,
                    serializedName: "systemData",
                    type: {
                        name: "Composite",
                        className: "SystemData"
                    }
                } })
        }
    };
    var ErrorDefinition = {
        serializedName: "ErrorDefinition",
        type: {
            name: "Composite",
            className: "ErrorDefinition",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innererror: {
                    readOnly: true,
                    serializedName: "innererror",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var MyWorkbookError = {
        serializedName: "MyWorkbookError",
        type: {
            name: "Composite",
            className: "MyWorkbookError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDefinition"
                    }
                }
            }
        }
    };
    var InnerErrorTrace = {
        serializedName: "InnerErrorTrace",
        type: {
            name: "Composite",
            className: "InnerErrorTrace",
            modelProperties: {
                trace: {
                    readOnly: true,
                    serializedName: "trace",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ManagedServiceIdentity = {
        serializedName: "ManagedServiceIdentity",
        type: {
            name: "Composite",
            className: "ManagedServiceIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "UserAssignedIdentity"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkbookResourceIdentity = {
        serializedName: "WorkbookResource_identity",
        type: {
            name: "Composite",
            className: "WorkbookResourceIdentity",
            modelProperties: __assign({}, ManagedServiceIdentity.type.modelProperties)
        }
    };
    var WorkbookResource = {
        serializedName: "WorkbookResource",
        type: {
            name: "Composite",
            className: "WorkbookResource",
            modelProperties: {
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "WorkbookResourceIdentity"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Workbook = {
        serializedName: "Workbook",
        type: {
            name: "Composite",
            className: "Workbook",
            modelProperties: __assign(__assign({}, WorkbookResource.type.modelProperties), { displayName: {
                    required: true,
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                }, serializedData: {
                    required: true,
                    nullable: true,
                    serializedName: "properties.serializedData",
                    type: {
                        name: "String"
                    }
                }, version: {
                    serializedName: "properties.version",
                    type: {
                        name: "String"
                    }
                }, timeModified: {
                    readOnly: true,
                    serializedName: "properties.timeModified",
                    type: {
                        name: "DateTime"
                    }
                }, category: {
                    required: true,
                    serializedName: "properties.category",
                    type: {
                        name: "String"
                    }
                }, workbookTags: {
                    serializedName: "properties.tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, userId: {
                    readOnly: true,
                    serializedName: "properties.userId",
                    type: {
                        name: "String"
                    }
                }, sourceId: {
                    serializedName: "properties.sourceId",
                    type: {
                        name: "String"
                    }
                }, storageUri: {
                    nullable: true,
                    serializedName: "properties.storageUri",
                    type: {
                        name: "String"
                    }
                }, description: {
                    nullable: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, revision: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "properties.revision",
                    type: {
                        name: "String"
                    }
                }, systemData: {
                    readOnly: true,
                    serializedName: "systemData",
                    type: {
                        name: "Composite",
                        className: "SystemData"
                    }
                } })
        }
    };
    var WorkbookUpdateParameters = {
        serializedName: "WorkbookUpdateParameters",
        type: {
            name: "Composite",
            className: "WorkbookUpdateParameters",
            modelProperties: {
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                displayName: {
                    serializedName: "properties.displayName",
                    type: {
                        name: "String"
                    }
                },
                serializedData: {
                    serializedName: "properties.serializedData",
                    type: {
                        name: "String"
                    }
                },
                category: {
                    serializedName: "properties.category",
                    type: {
                        name: "String"
                    }
                },
                tags1: {
                    serializedName: "properties.tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                description: {
                    nullable: true,
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                },
                revision: {
                    nullable: true,
                    serializedName: "properties.revision",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkbookErrorDefinition = {
        serializedName: "WorkbookErrorDefinition",
        type: {
            name: "Composite",
            className: "WorkbookErrorDefinition",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    readOnly: true,
                    serializedName: "innerError",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var WorkbookError = {
        serializedName: "WorkbookError",
        type: {
            name: "Composite",
            className: "WorkbookError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "WorkbookErrorDefinition"
                    }
                }
            }
        }
    };
    var WorkbookInnerErrorTrace = {
        serializedName: "WorkbookInnerErrorTrace",
        type: {
            name: "Composite",
            className: "WorkbookInnerErrorTrace",
            modelProperties: {
                trace: {
                    readOnly: true,
                    serializedName: "trace",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var UserAssignedIdentity = {
        serializedName: "UserAssignedIdentity",
        type: {
            name: "Composite",
            className: "UserAssignedIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                clientId: {
                    readOnly: true,
                    serializedName: "clientId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var AzureEntityResource = {
        serializedName: "AzureEntityResource",
        type: {
            name: "Composite",
            className: "AzureEntityResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ComponentsResource = {
        serializedName: "ComponentsResource",
        type: {
            name: "Composite",
            className: "ComponentsResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrivateLinkScopedResource = {
        serializedName: "PrivateLinkScopedResource",
        type: {
            name: "Composite",
            className: "PrivateLinkScopedResource",
            modelProperties: {
                resourceId: {
                    serializedName: "ResourceId",
                    type: {
                        name: "String"
                    }
                },
                scopeId: {
                    serializedName: "ScopeId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponent = {
        serializedName: "ApplicationInsightsComponent",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponent",
            modelProperties: __assign(__assign({}, ComponentsResource.type.modelProperties), { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, applicationId: {
                    readOnly: true,
                    serializedName: "properties.ApplicationId",
                    type: {
                        name: "String"
                    }
                }, appId: {
                    readOnly: true,
                    serializedName: "properties.AppId",
                    type: {
                        name: "String"
                    }
                }, applicationType: {
                    required: true,
                    serializedName: "properties.Application_Type",
                    defaultValue: 'web',
                    type: {
                        name: "String"
                    }
                }, flowType: {
                    serializedName: "properties.Flow_Type",
                    defaultValue: 'Bluefield',
                    type: {
                        name: "String"
                    }
                }, requestSource: {
                    serializedName: "properties.Request_Source",
                    defaultValue: 'rest',
                    type: {
                        name: "String"
                    }
                }, instrumentationKey: {
                    readOnly: true,
                    serializedName: "properties.InstrumentationKey",
                    type: {
                        name: "String"
                    }
                }, creationDate: {
                    readOnly: true,
                    serializedName: "properties.CreationDate",
                    type: {
                        name: "DateTime"
                    }
                }, tenantId: {
                    readOnly: true,
                    serializedName: "properties.TenantId",
                    type: {
                        name: "String"
                    }
                }, hockeyAppId: {
                    serializedName: "properties.HockeyAppId",
                    type: {
                        name: "String"
                    }
                }, hockeyAppToken: {
                    readOnly: true,
                    serializedName: "properties.HockeyAppToken",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, samplingPercentage: {
                    serializedName: "properties.SamplingPercentage",
                    type: {
                        name: "Number"
                    }
                }, connectionString: {
                    readOnly: true,
                    serializedName: "properties.ConnectionString",
                    type: {
                        name: "String"
                    }
                }, retentionInDays: {
                    serializedName: "properties.RetentionInDays",
                    defaultValue: 90,
                    type: {
                        name: "Number"
                    }
                }, disableIpMasking: {
                    serializedName: "properties.DisableIpMasking",
                    type: {
                        name: "Boolean"
                    }
                }, immediatePurgeDataOn30Days: {
                    serializedName: "properties.ImmediatePurgeDataOn30Days",
                    type: {
                        name: "Boolean"
                    }
                }, privateLinkScopedResources: {
                    readOnly: true,
                    serializedName: "properties.PrivateLinkScopedResources",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateLinkScopedResource"
                            }
                        }
                    }
                }, publicNetworkAccessForIngestion: {
                    serializedName: "properties.publicNetworkAccessForIngestion",
                    defaultValue: 'Enabled',
                    type: {
                        name: "String"
                    }
                }, publicNetworkAccessForQuery: {
                    serializedName: "properties.publicNetworkAccessForQuery",
                    defaultValue: 'Enabled',
                    type: {
                        name: "String"
                    }
                }, ingestionMode: {
                    serializedName: "properties.IngestionMode",
                    defaultValue: 'ApplicationInsights',
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ComponentPurgeBodyFilters = {
        serializedName: "ComponentPurgeBodyFilters",
        type: {
            name: "Composite",
            className: "ComponentPurgeBodyFilters",
            modelProperties: {
                column: {
                    serializedName: "column",
                    type: {
                        name: "String"
                    }
                },
                operator: {
                    serializedName: "operator",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "Object"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComponentPurgeBody = {
        serializedName: "ComponentPurgeBody",
        type: {
            name: "Composite",
            className: "ComponentPurgeBody",
            modelProperties: {
                table: {
                    required: true,
                    serializedName: "table",
                    type: {
                        name: "String"
                    }
                },
                filters: {
                    required: true,
                    serializedName: "filters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComponentPurgeBodyFilters"
                            }
                        }
                    }
                }
            }
        }
    };
    var ComponentPurgeResponse = {
        serializedName: "ComponentPurgeResponse",
        type: {
            name: "Composite",
            className: "ComponentPurgeResponse",
            modelProperties: {
                operationId: {
                    required: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComponentPurgeStatusResponse = {
        serializedName: "ComponentPurgeStatusResponse",
        type: {
            name: "Composite",
            className: "ComponentPurgeStatusResponse",
            modelProperties: {
                status: {
                    required: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponseLinkedStorageError = {
        serializedName: "ErrorResponseLinkedStorage_error",
        type: {
            name: "Composite",
            className: "ErrorResponseLinkedStorageError",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponseLinkedStorage = {
        serializedName: "ErrorResponseLinkedStorage",
        type: {
            name: "Composite",
            className: "ErrorResponseLinkedStorage",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponseLinkedStorageError"
                    }
                }
            }
        }
    };
    var ComponentLinkedStorageAccounts = {
        serializedName: "ComponentLinkedStorageAccounts",
        type: {
            name: "Composite",
            className: "ComponentLinkedStorageAccounts",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { linkedStorageAccount: {
                    serializedName: "properties.linkedStorageAccount",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ComponentLinkedStorageAccountsPatch = {
        serializedName: "ComponentLinkedStorageAccountsPatch",
        type: {
            name: "Composite",
            className: "ComponentLinkedStorageAccountsPatch",
            modelProperties: {
                linkedStorageAccount: {
                    serializedName: "properties.linkedStorageAccount",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LiveTokenResponse = {
        serializedName: "LiveTokenResponse",
        type: {
            name: "Composite",
            className: "LiveTokenResponse",
            modelProperties: {
                liveToken: {
                    readOnly: true,
                    serializedName: "liveToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationInfo = {
        serializedName: "OperationInfo",
        type: {
            name: "Composite",
            className: "OperationInfo",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationLive = {
        serializedName: "OperationLive",
        type: {
            name: "Composite",
            className: "OperationLive",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationInfo"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationsListResult = {
        serializedName: "OperationsListResult",
        type: {
            name: "Composite",
            className: "OperationsListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationLive"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AnnotationsListResult = {
        serializedName: "AnnotationsListResult",
        type: {
            name: "Composite",
            className: "AnnotationsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Annotation"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentAPIKeyListResult = {
        serializedName: "ApplicationInsightsComponentAPIKeyListResult",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentAPIKeyListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentAPIKey"
                            }
                        }
                    }
                }
            }
        }
    };
    var WorkItemConfigurationsListResult = {
        serializedName: "WorkItemConfigurationsListResult",
        type: {
            name: "Composite",
            className: "WorkItemConfigurationsListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkItemConfiguration"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationInsightsWebTestLocationsListResult = {
        serializedName: "ApplicationInsightsWebTestLocationsListResult",
        type: {
            name: "Composite",
            className: "ApplicationInsightsWebTestLocationsListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentWebTestLocation"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebTestListResult = {
        serializedName: "webTestListResult",
        type: {
            name: "Composite",
            className: "WebTestListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebTest"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkbookTemplatesListResult = {
        serializedName: "WorkbookTemplatesListResult",
        type: {
            name: "Composite",
            className: "WorkbookTemplatesListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WorkbookTemplate"
                            }
                        }
                    }
                }
            }
        }
    };
    var MyWorkbooksListResult = {
        serializedName: "MyWorkbooksListResult",
        type: {
            name: "Composite",
            className: "MyWorkbooksListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MyWorkbook"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WorkbooksListResult = {
        serializedName: "WorkbooksListResult",
        type: {
            name: "Composite",
            className: "WorkbooksListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Workbook"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationInsightsComponentListResult = {
        serializedName: "ApplicationInsightsComponentListResult",
        type: {
            name: "Composite",
            className: "ApplicationInsightsComponentListResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponent"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        ErrorResponse: ErrorResponse,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        Annotation: Annotation,
        InnerError: InnerError,
        AnnotationError: AnnotationError,
        APIKeyRequest: APIKeyRequest,
        ApplicationInsightsComponentAPIKey: ApplicationInsightsComponentAPIKey,
        ApplicationInsightsComponentExportRequest: ApplicationInsightsComponentExportRequest,
        ApplicationInsightsComponentExportConfiguration: ApplicationInsightsComponentExportConfiguration,
        ApplicationInsightsComponentDataVolumeCap: ApplicationInsightsComponentDataVolumeCap,
        ApplicationInsightsComponentBillingFeatures: ApplicationInsightsComponentBillingFeatures,
        ApplicationInsightsComponentQuotaStatus: ApplicationInsightsComponentQuotaStatus,
        ApplicationInsightsComponentFeatureCapabilities: ApplicationInsightsComponentFeatureCapabilities,
        ApplicationInsightsComponentFeatureCapability: ApplicationInsightsComponentFeatureCapability,
        ApplicationInsightsComponentFeature: ApplicationInsightsComponentFeature,
        ApplicationInsightsComponentAvailableFeatures: ApplicationInsightsComponentAvailableFeatures,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        WorkItemConfiguration: WorkItemConfiguration,
        WorkItemCreateConfiguration: WorkItemCreateConfiguration,
        WorkItemConfigurationError: WorkItemConfigurationError,
        ApplicationInsightsComponentFavorite: ApplicationInsightsComponentFavorite,
        ApplicationInsightsComponentWebTestLocation: ApplicationInsightsComponentWebTestLocation,
        WebtestsResource: WebtestsResource,
        TagsResource: TagsResource,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebTest: WebTest,
        ApplicationInsightsComponentAnalyticsItemProperties: ApplicationInsightsComponentAnalyticsItemProperties,
        ApplicationInsightsComponentAnalyticsItem: ApplicationInsightsComponentAnalyticsItem,
        WorkbookTemplateResource: WorkbookTemplateResource,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateUpdateParameters: WorkbookTemplateUpdateParameters,
        WorkbookTemplateErrorFieldContract: WorkbookTemplateErrorFieldContract,
        WorkbookTemplateErrorBody: WorkbookTemplateErrorBody,
        WorkbookTemplateError: WorkbookTemplateError,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        SystemData: SystemData,
        MyWorkbook: MyWorkbook,
        ErrorDefinition: ErrorDefinition,
        MyWorkbookError: MyWorkbookError,
        InnerErrorTrace: InnerErrorTrace,
        ManagedServiceIdentity: ManagedServiceIdentity,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbookResource: WorkbookResource,
        Workbook: Workbook,
        WorkbookUpdateParameters: WorkbookUpdateParameters,
        WorkbookErrorDefinition: WorkbookErrorDefinition,
        WorkbookError: WorkbookError,
        WorkbookInnerErrorTrace: WorkbookInnerErrorTrace,
        UserAssignedIdentity: UserAssignedIdentity,
        Resource: Resource,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource,
        TrackedResource: TrackedResource,
        ComponentsResource: ComponentsResource,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ComponentPurgeBodyFilters: ComponentPurgeBodyFilters,
        ComponentPurgeBody: ComponentPurgeBody,
        ComponentPurgeResponse: ComponentPurgeResponse,
        ComponentPurgeStatusResponse: ComponentPurgeStatusResponse,
        ErrorResponseLinkedStorageError: ErrorResponseLinkedStorageError,
        ErrorResponseLinkedStorage: ErrorResponseLinkedStorage,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentLinkedStorageAccountsPatch: ComponentLinkedStorageAccountsPatch,
        LiveTokenResponse: LiveTokenResponse,
        OperationInfo: OperationInfo,
        OperationLive: OperationLive,
        OperationListResult: OperationListResult,
        OperationsListResult: OperationsListResult,
        AnnotationsListResult: AnnotationsListResult,
        ApplicationInsightsComponentAPIKeyListResult: ApplicationInsightsComponentAPIKeyListResult,
        WorkItemConfigurationsListResult: WorkItemConfigurationsListResult,
        ApplicationInsightsWebTestLocationsListResult: ApplicationInsightsWebTestLocationsListResult,
        WebTestListResult: WebTestListResult,
        WorkbookTemplatesListResult: WorkbookTemplatesListResult,
        MyWorkbooksListResult: MyWorkbooksListResult,
        WorkbooksListResult: WorkbooksListResult,
        ApplicationInsightsComponentListResult: ApplicationInsightsComponentListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        ErrorResponse: ErrorResponse,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationInfo: OperationInfo,
        OperationListResult: OperationListResult,
        OperationLive: OperationLive,
        OperationsListResult: OperationsListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var annotationId = {
        parameterPath: "annotationId",
        mapper: {
            required: true,
            serializedName: "annotationId",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion0 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2015-05-01',
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion1 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2020-06-02-preview',
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion2 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2020-11-20',
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion3 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2021-03-08',
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion4 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2021-08-01',
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion5 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-05-01-preview',
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var apiVersion6 = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2020-03-01-preview',
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var canFetchContent = {
        parameterPath: [
            "options",
            "canFetchContent"
        ],
        mapper: {
            serializedName: "canFetchContent",
            type: {
                name: "Boolean"
            }
        }
    };
    var category = {
        parameterPath: "category",
        mapper: {
            required: true,
            serializedName: "category",
            type: {
                name: "String"
            }
        }
    };
    var componentName = {
        parameterPath: "componentName",
        mapper: {
            required: true,
            serializedName: "componentName",
            type: {
                name: "String"
            }
        }
    };
    var configurationId = {
        parameterPath: "configurationId",
        mapper: {
            required: true,
            serializedName: "ConfigurationId",
            type: {
                name: "String"
            }
        }
    };
    var end = {
        parameterPath: "end",
        mapper: {
            required: true,
            serializedName: "end",
            type: {
                name: "String"
            }
        }
    };
    var exportId = {
        parameterPath: "exportId",
        mapper: {
            required: true,
            serializedName: "exportId",
            type: {
                name: "String"
            }
        }
    };
    var favoriteId = {
        parameterPath: "favoriteId",
        mapper: {
            required: true,
            serializedName: "favoriteId",
            type: {
                name: "String"
            }
        }
    };
    var favoriteType = {
        parameterPath: [
            "options",
            "favoriteType"
        ],
        mapper: {
            serializedName: "favoriteType",
            defaultValue: 'shared',
            type: {
                name: "Enum",
                allowedValues: [
                    "shared",
                    "user"
                ]
            }
        }
    };
    var id = {
        parameterPath: [
            "options",
            "id"
        ],
        mapper: {
            serializedName: "id",
            type: {
                name: "String"
            }
        }
    };
    var includeContent = {
        parameterPath: [
            "options",
            "includeContent"
        ],
        mapper: {
            serializedName: "includeContent",
            type: {
                name: "Boolean"
            }
        }
    };
    var keyId = {
        parameterPath: "keyId",
        mapper: {
            required: true,
            serializedName: "keyId",
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: [
            "options",
            "name"
        ],
        mapper: {
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var overrideItem = {
        parameterPath: [
            "options",
            "overrideItem"
        ],
        mapper: {
            serializedName: "overrideItem",
            type: {
                name: "Boolean"
            }
        }
    };
    var purgeId = {
        parameterPath: "purgeId",
        mapper: {
            required: true,
            serializedName: "purgeId",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceUri = {
        parameterPath: "resourceUri",
        mapper: {
            required: true,
            serializedName: "resourceUri",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var revisionId = {
        parameterPath: "revisionId",
        mapper: {
            required: true,
            serializedName: "revisionId",
            type: {
                name: "String"
            }
        }
    };
    var scope = {
        parameterPath: [
            "options",
            "scope"
        ],
        mapper: {
            serializedName: "scope",
            defaultValue: 'shared',
            type: {
                name: "String"
            }
        }
    };
    var scopePath = {
        parameterPath: "scopePath",
        mapper: {
            required: true,
            serializedName: "scopePath",
            type: {
                name: "String"
            }
        }
    };
    var sourceId = {
        parameterPath: [
            "options",
            "sourceId"
        ],
        mapper: {
            serializedName: "sourceId",
            type: {
                name: "String"
            }
        }
    };
    var sourceType = {
        parameterPath: [
            "options",
            "sourceType"
        ],
        mapper: {
            serializedName: "sourceType",
            type: {
                name: "String"
            }
        }
    };
    var start = {
        parameterPath: "start",
        mapper: {
            required: true,
            serializedName: "start",
            type: {
                name: "String"
            }
        }
    };
    var storageType = {
        parameterPath: "storageType",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "storageType",
            defaultValue: 'ServiceProfiler',
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            constraints: {
                MinLength: 1
            },
            type: {
                name: "String"
            }
        }
    };
    var tags = {
        parameterPath: [
            "options",
            "tags"
        ],
        mapper: {
            serializedName: "tags",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var type = {
        parameterPath: [
            "options",
            "type"
        ],
        mapper: {
            serializedName: "type",
            defaultValue: 'none',
            type: {
                name: "String"
            }
        }
    };
    var webTestName = {
        parameterPath: "webTestName",
        mapper: {
            required: true,
            serializedName: "webTestName",
            type: {
                name: "String"
            }
        }
    };
    var workItemConfigId = {
        parameterPath: "workItemConfigId",
        mapper: {
            required: true,
            serializedName: "workItemConfigId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.list1 = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, list1OperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        Operations.prototype.list1Next = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, list1NextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.Insights/operations",
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var list1OperationSpec = {
        httpMethod: "GET",
        path: "providers/microsoft.insights/operations",
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var list1NextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Annotation: Annotation,
        AnnotationError: AnnotationError,
        AnnotationsListResult: AnnotationsListResult,
        CloudError: CloudError,
        InnerError: InnerError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Annotations. */
    var Annotations = /** @class */ (function () {
        /**
         * Create a Annotations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Annotations(client) {
            this.client = client;
        }
        Annotations.prototype.list = function (resourceGroupName, resourceName, start, end, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                start: start,
                end: end,
                options: options
            }, listOperationSpec$1, callback);
        };
        Annotations.prototype.create = function (resourceGroupName, resourceName, annotationProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                annotationProperties: annotationProperties,
                options: options
            }, createOperationSpec, callback);
        };
        Annotations.prototype.deleteMethod = function (resourceGroupName, resourceName, annotationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                annotationId: annotationId,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Annotations.prototype.get = function (resourceGroupName, resourceName, annotationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                annotationId: annotationId,
                options: options
            }, getOperationSpec, callback);
        };
        return Annotations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0,
            start,
            end
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AnnotationsListResult
            },
            default: {
                bodyMapper: AnnotationError
            }
        },
        serializer: serializer$1
    };
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "annotationProperties",
            mapper: __assign(__assign({}, Annotation), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Annotation"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: AnnotationError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations/{annotationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            annotationId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/Annotations/{annotationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            annotationId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Annotation"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: AnnotationError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        APIKeyRequest: APIKeyRequest,
        ApplicationInsightsComponentAPIKey: ApplicationInsightsComponentAPIKey,
        ApplicationInsightsComponentAPIKeyListResult: ApplicationInsightsComponentAPIKeyListResult,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a APIKeys. */
    var APIKeys = /** @class */ (function () {
        /**
         * Create a APIKeys.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function APIKeys(client) {
            this.client = client;
        }
        APIKeys.prototype.list = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, listOperationSpec$2, callback);
        };
        APIKeys.prototype.create = function (resourceGroupName, resourceName, aPIKeyProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                aPIKeyProperties: aPIKeyProperties,
                options: options
            }, createOperationSpec$1, callback);
        };
        APIKeys.prototype.deleteMethod = function (resourceGroupName, resourceName, keyId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                keyId: keyId,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        APIKeys.prototype.get = function (resourceGroupName, resourceName, keyId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                keyId: keyId,
                options: options
            }, getOperationSpec$1, callback);
        };
        return APIKeys;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ApiKeys",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKeyListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ApiKeys",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "aPIKeyProperties",
            mapper: __assign(__assign({}, APIKeyRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/APIKeys/{keyId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            keyId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/APIKeys/{keyId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            keyId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAPIKey
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentExportConfiguration: ApplicationInsightsComponentExportConfiguration,
        ApplicationInsightsComponentExportRequest: ApplicationInsightsComponentExportRequest,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ExportConfigurations. */
    var ExportConfigurations = /** @class */ (function () {
        /**
         * Create a ExportConfigurations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ExportConfigurations(client) {
            this.client = client;
        }
        ExportConfigurations.prototype.list = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, listOperationSpec$3, callback);
        };
        ExportConfigurations.prototype.create = function (resourceGroupName, resourceName, exportProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                exportProperties: exportProperties,
                options: options
            }, createOperationSpec$2, callback);
        };
        ExportConfigurations.prototype.deleteMethod = function (resourceGroupName, resourceName, exportId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                exportId: exportId,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ExportConfigurations.prototype.get = function (resourceGroupName, resourceName, exportId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                exportId: exportId,
                options: options
            }, getOperationSpec$2, callback);
        };
        ExportConfigurations.prototype.update = function (resourceGroupName, resourceName, exportId, exportProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                exportId: exportId,
                exportProperties: exportProperties,
                options: options
            }, updateOperationSpec, callback);
        };
        return ExportConfigurations;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentExportConfiguration"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec$2 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "exportProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponentExportRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentExportConfiguration"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            exportId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentExportConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            exportId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentExportConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            exportId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "exportProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponentExportRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentExportConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentBillingFeatures: ApplicationInsightsComponentBillingFeatures,
        ApplicationInsightsComponentDataVolumeCap: ApplicationInsightsComponentDataVolumeCap,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentCurrentBillingFeatures. */
    var ComponentCurrentBillingFeatures = /** @class */ (function () {
        /**
         * Create a ComponentCurrentBillingFeatures.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentCurrentBillingFeatures(client) {
            this.client = client;
        }
        ComponentCurrentBillingFeatures.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$3, callback);
        };
        ComponentCurrentBillingFeatures.prototype.update = function (resourceGroupName, resourceName, billingFeaturesProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                billingFeaturesProperties: billingFeaturesProperties,
                options: options
            }, updateOperationSpec$1, callback);
        };
        return ComponentCurrentBillingFeatures;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/currentbillingfeatures",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentBillingFeatures
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/currentbillingfeatures",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "billingFeaturesProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponentBillingFeatures), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentBillingFeatures
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentQuotaStatus: ApplicationInsightsComponentQuotaStatus,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentQuotaStatus. */
    var ComponentQuotaStatus = /** @class */ (function () {
        /**
         * Create a ComponentQuotaStatus.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentQuotaStatus(client) {
            this.client = client;
        }
        ComponentQuotaStatus.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$4, callback);
        };
        return ComponentQuotaStatus;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/quotastatus",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentQuotaStatus
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentFeatureCapabilities: ApplicationInsightsComponentFeatureCapabilities,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentFeatureCapabilities. */
    var ComponentFeatureCapabilities = /** @class */ (function () {
        /**
         * Create a ComponentFeatureCapabilities.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentFeatureCapabilities(client) {
            this.client = client;
        }
        ComponentFeatureCapabilities.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$5, callback);
        };
        return ComponentFeatureCapabilities;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/featurecapabilities",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFeatureCapabilities
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentAvailableFeatures: ApplicationInsightsComponentAvailableFeatures,
        ApplicationInsightsComponentFeature: ApplicationInsightsComponentFeature,
        ApplicationInsightsComponentFeatureCapability: ApplicationInsightsComponentFeatureCapability,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentAvailableFeatures. */
    var ComponentAvailableFeatures = /** @class */ (function () {
        /**
         * Create a ComponentAvailableFeatures.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentAvailableFeatures(client) {
            this.client = client;
        }
        ComponentAvailableFeatures.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$6, callback);
        };
        return ComponentAvailableFeatures;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/getavailablebillingfeatures",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAvailableFeatures
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentsResource: ComponentsResource,
        ManagedServiceIdentity: ManagedServiceIdentity,
        MyWorkbook: MyWorkbook,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ProxyResource: ProxyResource,
        Resource: Resource,
        SystemData: SystemData,
        TrackedResource: TrackedResource,
        UserAssignedIdentity: UserAssignedIdentity,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebtestsResource: WebtestsResource,
        Workbook: Workbook,
        WorkbookResource: WorkbookResource,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplateResource: WorkbookTemplateResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ProactiveDetectionConfigurations. */
    var ProactiveDetectionConfigurations = /** @class */ (function () {
        /**
         * Create a ProactiveDetectionConfigurations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ProactiveDetectionConfigurations(client) {
            this.client = client;
        }
        ProactiveDetectionConfigurations.prototype.list = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, listOperationSpec$4, callback);
        };
        ProactiveDetectionConfigurations.prototype.get = function (resourceGroupName, resourceName, configurationId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                configurationId: configurationId,
                options: options
            }, getOperationSpec$7, callback);
        };
        ProactiveDetectionConfigurations.prototype.update = function (resourceGroupName, resourceName, configurationId, proactiveDetectionProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                configurationId: configurationId,
                proactiveDetectionProperties: proactiveDetectionProperties,
                options: options
            }, updateOperationSpec$2, callback);
        };
        return ProactiveDetectionConfigurations;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentProactiveDetectionConfiguration"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            configurationId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentProactiveDetectionConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };
    var updateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            configurationId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "proactiveDetectionProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponentProactiveDetectionConfiguration), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentProactiveDetectionConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        InnerError: InnerError,
        WorkItemConfiguration: WorkItemConfiguration,
        WorkItemConfigurationError: WorkItemConfigurationError,
        WorkItemConfigurationsListResult: WorkItemConfigurationsListResult,
        WorkItemCreateConfiguration: WorkItemCreateConfiguration
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkItemConfigurations. */
    var WorkItemConfigurations = /** @class */ (function () {
        /**
         * Create a WorkItemConfigurations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function WorkItemConfigurations(client) {
            this.client = client;
        }
        WorkItemConfigurations.prototype.list = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, listOperationSpec$5, callback);
        };
        WorkItemConfigurations.prototype.create = function (resourceGroupName, resourceName, workItemConfigurationProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workItemConfigurationProperties: workItemConfigurationProperties,
                options: options
            }, createOperationSpec$3, callback);
        };
        WorkItemConfigurations.prototype.getDefault = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getDefaultOperationSpec, callback);
        };
        WorkItemConfigurations.prototype.deleteMethod = function (resourceGroupName, resourceName, workItemConfigId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workItemConfigId: workItemConfigId,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        WorkItemConfigurations.prototype.getItem = function (resourceGroupName, resourceName, workItemConfigId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workItemConfigId: workItemConfigId,
                options: options
            }, getItemOperationSpec, callback);
        };
        WorkItemConfigurations.prototype.updateItem = function (resourceGroupName, resourceName, workItemConfigId, workItemConfigurationProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workItemConfigId: workItemConfigId,
                workItemConfigurationProperties: workItemConfigurationProperties,
                options: options
            }, updateItemOperationSpec, callback);
        };
        return WorkItemConfigurations;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkItemConfigurationsListResult
            },
            default: {
                bodyMapper: WorkItemConfigurationError
            }
        },
        serializer: serializer$9
    };
    var createOperationSpec$3 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workItemConfigurationProperties",
            mapper: __assign(__assign({}, WorkItemCreateConfiguration), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkItemConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getDefaultOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/DefaultWorkItemConfig",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkItemConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs/{workItemConfigId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            workItemConfigId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var getItemOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs/{workItemConfigId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            workItemConfigId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkItemConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };
    var updateItemOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs/{workItemConfigId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            workItemConfigId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workItemConfigurationProperties",
            mapper: __assign(__assign({}, WorkItemCreateConfiguration), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkItemConfiguration
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$a = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentFavorite: ApplicationInsightsComponentFavorite,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Favorites. */
    var Favorites = /** @class */ (function () {
        /**
         * Create a Favorites.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Favorites(client) {
            this.client = client;
        }
        Favorites.prototype.list = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, listOperationSpec$6, callback);
        };
        Favorites.prototype.get = function (resourceGroupName, resourceName, favoriteId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                favoriteId: favoriteId,
                options: options
            }, getOperationSpec$8, callback);
        };
        Favorites.prototype.add = function (resourceGroupName, resourceName, favoriteId, favoriteProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                favoriteId: favoriteId,
                favoriteProperties: favoriteProperties,
                options: options
            }, addOperationSpec, callback);
        };
        Favorites.prototype.update = function (resourceGroupName, resourceName, favoriteId, favoriteProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                favoriteId: favoriteId,
                favoriteProperties: favoriteProperties,
                options: options
            }, updateOperationSpec$3, callback);
        };
        Favorites.prototype.deleteMethod = function (resourceGroupName, resourceName, favoriteId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                favoriteId: favoriteId,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        return Favorites;
    }());
    // Operation Specifications
    var serializer$a = new msRest.Serializer(Mappers$a);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0,
            favoriteType,
            sourceType,
            canFetchContent,
            tags
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentFavorite"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var getOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFavorite
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var addOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "favoriteProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponentFavorite), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFavorite
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "favoriteProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponentFavorite), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentFavorite
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            favoriteId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$a
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$b = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentWebTestLocation: ApplicationInsightsComponentWebTestLocation,
        ApplicationInsightsWebTestLocationsListResult: ApplicationInsightsWebTestLocationsListResult,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WebTestLocations. */
    var WebTestLocations = /** @class */ (function () {
        /**
         * Create a WebTestLocations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function WebTestLocations(client) {
            this.client = client;
        }
        WebTestLocations.prototype.list = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, listOperationSpec$7, callback);
        };
        return WebTestLocations;
    }());
    // Operation Specifications
    var serializer$b = new msRest.Serializer(Mappers$b);
    var listOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/syntheticmonitorlocations",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsWebTestLocationsListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$b
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$c = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentsResource: ComponentsResource,
        ManagedServiceIdentity: ManagedServiceIdentity,
        MyWorkbook: MyWorkbook,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ProxyResource: ProxyResource,
        Resource: Resource,
        SystemData: SystemData,
        TagsResource: TagsResource,
        TrackedResource: TrackedResource,
        UserAssignedIdentity: UserAssignedIdentity,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestListResult: WebTestListResult,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebtestsResource: WebtestsResource,
        Workbook: Workbook,
        WorkbookResource: WorkbookResource,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplateResource: WorkbookTemplateResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WebTests. */
    var WebTests = /** @class */ (function () {
        /**
         * Create a WebTests.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function WebTests(client) {
            this.client = client;
        }
        WebTests.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        WebTests.prototype.get = function (resourceGroupName, webTestName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                webTestName: webTestName,
                options: options
            }, getOperationSpec$9, callback);
        };
        WebTests.prototype.createOrUpdate = function (resourceGroupName, webTestName, webTestDefinition, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                webTestName: webTestName,
                webTestDefinition: webTestDefinition,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        WebTests.prototype.updateTags = function (resourceGroupName, webTestName, webTestTags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                webTestName: webTestName,
                webTestTags: webTestTags,
                options: options
            }, updateTagsOperationSpec, callback);
        };
        WebTests.prototype.deleteMethod = function (resourceGroupName, webTestName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                webTestName: webTestName,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        WebTests.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$8, callback);
        };
        WebTests.prototype.listByComponent = function (componentName, resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                componentName: componentName,
                resourceGroupName: resourceGroupName,
                options: options
            }, listByComponentOperationSpec, callback);
        };
        WebTests.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        WebTests.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        WebTests.prototype.listByComponentNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByComponentNextOperationSpec, callback);
        };
        return WebTests;
    }());
    // Operation Specifications
    var serializer$c = new msRest.Serializer(Mappers$c);
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var getOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            webTestName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTest
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            webTestName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "webTestDefinition",
            mapper: __assign(__assign({}, WebTest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WebTest
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var updateTagsOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            webTestName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "webTestTags",
            mapper: __assign(__assign({}, TagsResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WebTest
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            webTestName
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listOperationSpec$8 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/webtests",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByComponentOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{componentName}/webtests",
        urlParameters: [
            componentName,
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };
    var listByComponentNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion0
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WebTestListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$c
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$d = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponentAnalyticsItem: ApplicationInsightsComponentAnalyticsItem,
        ApplicationInsightsComponentAnalyticsItemProperties: ApplicationInsightsComponentAnalyticsItemProperties,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AnalyticsItems. */
    var AnalyticsItems = /** @class */ (function () {
        /**
         * Create a AnalyticsItems.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function AnalyticsItems(client) {
            this.client = client;
        }
        AnalyticsItems.prototype.list = function (resourceGroupName, resourceName, scopePath, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                scopePath: scopePath,
                options: options
            }, listOperationSpec$9, callback);
        };
        AnalyticsItems.prototype.get = function (resourceGroupName, resourceName, scopePath, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                scopePath: scopePath,
                options: options
            }, getOperationSpec$a, callback);
        };
        AnalyticsItems.prototype.put = function (resourceGroupName, resourceName, scopePath, itemProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                scopePath: scopePath,
                itemProperties: itemProperties,
                options: options
            }, putOperationSpec, callback);
        };
        AnalyticsItems.prototype.deleteMethod = function (resourceGroupName, resourceName, scopePath, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                scopePath: scopePath,
                options: options
            }, deleteMethodOperationSpec$6, callback);
        };
        return AnalyticsItems;
    }());
    // Operation Specifications
    var serializer$d = new msRest.Serializer(Mappers$d);
    var listOperationSpec$9 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion0,
            scope,
            type,
            includeContent
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationInsightsComponentAnalyticsItem"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var getOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion0,
            id,
            name
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAnalyticsItem
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var putOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion0,
            overrideItem
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "itemProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponentAnalyticsItem), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentAnalyticsItem
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };
    var deleteMethodOperationSpec$6 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/{scopePath}/item",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            scopePath
        ],
        queryParameters: [
            apiVersion0,
            id,
            name
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$d
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$e = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentsResource: ComponentsResource,
        ManagedServiceIdentity: ManagedServiceIdentity,
        MyWorkbook: MyWorkbook,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ProxyResource: ProxyResource,
        Resource: Resource,
        SystemData: SystemData,
        TrackedResource: TrackedResource,
        UserAssignedIdentity: UserAssignedIdentity,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebtestsResource: WebtestsResource,
        Workbook: Workbook,
        WorkbookResource: WorkbookResource,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateError: WorkbookTemplateError,
        WorkbookTemplateErrorBody: WorkbookTemplateErrorBody,
        WorkbookTemplateErrorFieldContract: WorkbookTemplateErrorFieldContract,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplateResource: WorkbookTemplateResource,
        WorkbookTemplatesListResult: WorkbookTemplatesListResult,
        WorkbookTemplateUpdateParameters: WorkbookTemplateUpdateParameters
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a WorkbookTemplates. */
    var WorkbookTemplates = /** @class */ (function () {
        /**
         * Create a WorkbookTemplates.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function WorkbookTemplates(client) {
            this.client = client;
        }
        WorkbookTemplates.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        WorkbookTemplates.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$b, callback);
        };
        WorkbookTemplates.prototype.deleteMethod = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, deleteMethodOperationSpec$7, callback);
        };
        WorkbookTemplates.prototype.createOrUpdate = function (resourceGroupName, resourceName, workbookTemplateProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workbookTemplateProperties: workbookTemplateProperties,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        WorkbookTemplates.prototype.update = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, updateOperationSpec$4, callback);
        };
        return WorkbookTemplates;
    }());
    // Operation Specifications
    var serializer$e = new msRest.Serializer(Mappers$e);
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooktemplates",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbookTemplatesListResult
            },
            default: {
                bodyMapper: WorkbookTemplateError
            }
        },
        serializer: serializer$e
    };
    var getOperationSpec$b = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooktemplates/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbookTemplate
            },
            default: {
                bodyMapper: WorkbookTemplateError
            }
        },
        serializer: serializer$e
    };
    var deleteMethodOperationSpec$7 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooktemplates/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: WorkbookTemplateError
            }
        },
        serializer: serializer$e
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooktemplates/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workbookTemplateProperties",
            mapper: __assign(__assign({}, WorkbookTemplate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: WorkbookTemplate
            },
            201: {
                bodyMapper: WorkbookTemplate
            },
            default: {
                bodyMapper: WorkbookTemplateError
            }
        },
        serializer: serializer$e
    };
    var updateOperationSpec$4 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooktemplates/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion2
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "workbookTemplateUpdateParameters"
            ],
            mapper: WorkbookTemplateUpdateParameters
        },
        responses: {
            200: {
                bodyMapper: WorkbookTemplate
            },
            default: {
                bodyMapper: WorkbookTemplateError
            }
        },
        serializer: serializer$e
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$f = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentsResource: ComponentsResource,
        ErrorDefinition: ErrorDefinition,
        ManagedServiceIdentity: ManagedServiceIdentity,
        MyWorkbook: MyWorkbook,
        MyWorkbookError: MyWorkbookError,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        MyWorkbooksListResult: MyWorkbooksListResult,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ProxyResource: ProxyResource,
        Resource: Resource,
        SystemData: SystemData,
        TrackedResource: TrackedResource,
        UserAssignedIdentity: UserAssignedIdentity,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebtestsResource: WebtestsResource,
        Workbook: Workbook,
        WorkbookResource: WorkbookResource,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplateResource: WorkbookTemplateResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MyWorkbooks. */
    var MyWorkbooks = /** @class */ (function () {
        /**
         * Create a MyWorkbooks.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function MyWorkbooks(client) {
            this.client = client;
        }
        MyWorkbooks.prototype.listByResourceGroup = function (resourceGroupName, category, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                category: category,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        MyWorkbooks.prototype.listBySubscription = function (category, options, callback) {
            return this.client.sendOperationRequest({
                category: category,
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        MyWorkbooks.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$c, callback);
        };
        MyWorkbooks.prototype.deleteMethod = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, deleteMethodOperationSpec$8, callback);
        };
        MyWorkbooks.prototype.createOrUpdate = function (resourceGroupName, resourceName, workbookProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workbookProperties: workbookProperties,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        MyWorkbooks.prototype.update = function (resourceGroupName, resourceName, workbookProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workbookProperties: workbookProperties,
                options: options
            }, updateOperationSpec$5, callback);
        };
        MyWorkbooks.prototype.listByResourceGroupNext = function (nextPageLink, category, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                category: category,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        MyWorkbooks.prototype.listBySubscriptionNext = function (nextPageLink, category, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                category: category,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        return MyWorkbooks;
    }());
    // Operation Specifications
    var serializer$f = new msRest.Serializer(Mappers$f);
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            category,
            tags,
            sourceId,
            canFetchContent,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MyWorkbooksListResult
            },
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/myWorkbooks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            category,
            tags,
            canFetchContent,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MyWorkbooksListResult
            },
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };
    var getOperationSpec$c = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MyWorkbook
            },
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };
    var deleteMethodOperationSpec$8 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            sourceId,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workbookProperties",
            mapper: __assign(__assign({}, MyWorkbook), { required: true })
        },
        responses: {
            200: {
                bodyMapper: MyWorkbook
            },
            201: {
                bodyMapper: MyWorkbook
            },
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };
    var updateOperationSpec$5 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            sourceId,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workbookProperties",
            mapper: __assign(__assign({}, MyWorkbook), { required: true })
        },
        responses: {
            201: {
                bodyMapper: MyWorkbook
            },
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            category,
            tags,
            sourceId,
            canFetchContent,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MyWorkbooksListResult
            },
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            category,
            tags,
            canFetchContent,
            apiVersion3
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: MyWorkbooksListResult
            },
            default: {
                bodyMapper: MyWorkbookError
            }
        },
        serializer: serializer$f
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$g = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentsResource: ComponentsResource,
        ManagedServiceIdentity: ManagedServiceIdentity,
        MyWorkbook: MyWorkbook,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ProxyResource: ProxyResource,
        Resource: Resource,
        SystemData: SystemData,
        TrackedResource: TrackedResource,
        UserAssignedIdentity: UserAssignedIdentity,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebtestsResource: WebtestsResource,
        Workbook: Workbook,
        WorkbookError: WorkbookError,
        WorkbookErrorDefinition: WorkbookErrorDefinition,
        WorkbookResource: WorkbookResource,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbooksListResult: WorkbooksListResult,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplateResource: WorkbookTemplateResource,
        WorkbookUpdateParameters: WorkbookUpdateParameters
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Workbooks. */
    var Workbooks = /** @class */ (function () {
        /**
         * Create a Workbooks.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Workbooks(client) {
            this.client = client;
        }
        Workbooks.prototype.listBySubscription = function (category, options, callback) {
            return this.client.sendOperationRequest({
                category: category,
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        Workbooks.prototype.listByResourceGroup = function (resourceGroupName, category, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                category: category,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        Workbooks.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$d, callback);
        };
        Workbooks.prototype.deleteMethod = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, deleteMethodOperationSpec$9, callback);
        };
        Workbooks.prototype.createOrUpdate = function (resourceGroupName, resourceName, workbookProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                workbookProperties: workbookProperties,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        Workbooks.prototype.update = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, updateOperationSpec$6, callback);
        };
        Workbooks.prototype.revisionsList = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, revisionsListOperationSpec, callback);
        };
        Workbooks.prototype.revisionGet = function (resourceGroupName, resourceName, revisionId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                revisionId: revisionId,
                options: options
            }, revisionGetOperationSpec, callback);
        };
        Workbooks.prototype.listBySubscriptionNext = function (nextPageLink, category, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                category: category,
                options: options
            }, listBySubscriptionNextOperationSpec$1, callback);
        };
        Workbooks.prototype.listByResourceGroupNext = function (nextPageLink, category, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                category: category,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        Workbooks.prototype.revisionsListNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, revisionsListNextOperationSpec, callback);
        };
        return Workbooks;
    }());
    // Operation Specifications
    var serializer$g = new msRest.Serializer(Mappers$g);
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/workbooks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            category,
            tags,
            canFetchContent,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbooksListResult
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            category,
            tags,
            sourceId,
            canFetchContent,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbooksListResult
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var getOperationSpec$d = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workbook
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var deleteMethodOperationSpec$9 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            sourceId,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "workbookProperties",
            mapper: __assign(__assign({}, Workbook), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Workbook
            },
            201: {
                bodyMapper: Workbook
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var updateOperationSpec$6 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            sourceId,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "workbookUpdateParameters"
            ],
            mapper: WorkbookUpdateParameters
        },
        responses: {
            201: {
                bodyMapper: Workbook
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var revisionsListOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}/revisions",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbooksListResult
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var revisionGetOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/workbooks/{resourceName}/revisions/{revisionId}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            resourceName,
            revisionId
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Workbook
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var listBySubscriptionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            category,
            tags,
            canFetchContent,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbooksListResult
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            category,
            tags,
            sourceId,
            canFetchContent,
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbooksListResult
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };
    var revisionsListNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion4
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: WorkbooksListResult
            },
            default: {
                bodyMapper: WorkbookError
            }
        },
        serializer: serializer$g
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$h = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ApplicationInsightsComponentListResult: ApplicationInsightsComponentListResult,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentPurgeBody: ComponentPurgeBody,
        ComponentPurgeBodyFilters: ComponentPurgeBodyFilters,
        ComponentPurgeResponse: ComponentPurgeResponse,
        ComponentPurgeStatusResponse: ComponentPurgeStatusResponse,
        ComponentsResource: ComponentsResource,
        ManagedServiceIdentity: ManagedServiceIdentity,
        MyWorkbook: MyWorkbook,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ProxyResource: ProxyResource,
        Resource: Resource,
        SystemData: SystemData,
        TagsResource: TagsResource,
        TrackedResource: TrackedResource,
        UserAssignedIdentity: UserAssignedIdentity,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebtestsResource: WebtestsResource,
        Workbook: Workbook,
        WorkbookResource: WorkbookResource,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplateResource: WorkbookTemplateResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Components. */
    var Components = /** @class */ (function () {
        /**
         * Create a Components.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function Components(client) {
            this.client = client;
        }
        Components.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$a, callback);
        };
        Components.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$4, callback);
        };
        Components.prototype.deleteMethod = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, deleteMethodOperationSpec$a, callback);
        };
        Components.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$e, callback);
        };
        Components.prototype.createOrUpdate = function (resourceGroupName, resourceName, insightProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                insightProperties: insightProperties,
                options: options
            }, createOrUpdateOperationSpec$4, callback);
        };
        Components.prototype.updateTags = function (resourceGroupName, resourceName, componentTags, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                componentTags: componentTags,
                options: options
            }, updateTagsOperationSpec$1, callback);
        };
        Components.prototype.purge = function (resourceGroupName, resourceName, body, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                body: body,
                options: options
            }, purgeOperationSpec, callback);
        };
        Components.prototype.getPurgeStatus = function (resourceGroupName, resourceName, purgeId, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                purgeId: purgeId,
                options: options
            }, getPurgeStatusOperationSpec, callback);
        };
        Components.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        Components.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$3, callback);
        };
        return Components;
    }());
    // Operation Specifications
    var serializer$h = new msRest.Serializer(Mappers$h);
    var listOperationSpec$a = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/components",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listByResourceGroupOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var deleteMethodOperationSpec$a = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var getOperationSpec$e = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var createOrUpdateOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "insightProperties",
            mapper: __assign(__assign({}, ApplicationInsightsComponent), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponent
            },
            201: {
                bodyMapper: ApplicationInsightsComponent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var updateTagsOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "componentTags",
            mapper: __assign(__assign({}, TagsResource), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponent
            },
            201: {
                bodyMapper: ApplicationInsightsComponent
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var purgeOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/purge",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "body",
            mapper: __assign(__assign({}, ComponentPurgeBody), { required: true })
        },
        responses: {
            202: {
                bodyMapper: ComponentPurgeResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var getPurgeStatusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/operations/{purgeId}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            purgeId
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComponentPurgeStatusResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };
    var listByResourceGroupNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion5
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationInsightsComponentListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$h
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$i = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ApplicationInsightsComponent: ApplicationInsightsComponent,
        ApplicationInsightsComponentProactiveDetectionConfiguration: ApplicationInsightsComponentProactiveDetectionConfiguration,
        ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions: ApplicationInsightsComponentProactiveDetectionConfigurationRuleDefinitions,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        ComponentLinkedStorageAccounts: ComponentLinkedStorageAccounts,
        ComponentLinkedStorageAccountsPatch: ComponentLinkedStorageAccountsPatch,
        ComponentsResource: ComponentsResource,
        ErrorResponseLinkedStorage: ErrorResponseLinkedStorage,
        ErrorResponseLinkedStorageError: ErrorResponseLinkedStorageError,
        ManagedServiceIdentity: ManagedServiceIdentity,
        MyWorkbook: MyWorkbook,
        MyWorkbookManagedIdentity: MyWorkbookManagedIdentity,
        MyWorkbookResource: MyWorkbookResource,
        MyWorkbookUserAssignedIdentities: MyWorkbookUserAssignedIdentities,
        PrivateLinkScopedResource: PrivateLinkScopedResource,
        ProxyResource: ProxyResource,
        Resource: Resource,
        SystemData: SystemData,
        TrackedResource: TrackedResource,
        UserAssignedIdentity: UserAssignedIdentity,
        WebTest: WebTest,
        WebTestGeolocation: WebTestGeolocation,
        WebTestPropertiesConfiguration: WebTestPropertiesConfiguration,
        WebtestsResource: WebtestsResource,
        Workbook: Workbook,
        WorkbookResource: WorkbookResource,
        WorkbookResourceIdentity: WorkbookResourceIdentity,
        WorkbookTemplate: WorkbookTemplate,
        WorkbookTemplateGallery: WorkbookTemplateGallery,
        WorkbookTemplateLocalizedGallery: WorkbookTemplateLocalizedGallery,
        WorkbookTemplateResource: WorkbookTemplateResource
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComponentLinkedStorageAccountsOperations. */
    var ComponentLinkedStorageAccountsOperations = /** @class */ (function () {
        /**
         * Create a ComponentLinkedStorageAccountsOperations.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function ComponentLinkedStorageAccountsOperations(client) {
            this.client = client;
        }
        ComponentLinkedStorageAccountsOperations.prototype.get = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, getOperationSpec$f, callback);
        };
        ComponentLinkedStorageAccountsOperations.prototype.createAndUpdate = function (resourceGroupName, resourceName, linkedStorageAccountsProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                linkedStorageAccountsProperties: linkedStorageAccountsProperties,
                options: options
            }, createAndUpdateOperationSpec, callback);
        };
        ComponentLinkedStorageAccountsOperations.prototype.update = function (resourceGroupName, resourceName, linkedStorageAccountsProperties, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                linkedStorageAccountsProperties: linkedStorageAccountsProperties,
                options: options
            }, updateOperationSpec$7, callback);
        };
        ComponentLinkedStorageAccountsOperations.prototype.deleteMethod = function (resourceGroupName, resourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                resourceName: resourceName,
                options: options
            }, deleteMethodOperationSpec$b, callback);
        };
        return ComponentLinkedStorageAccountsOperations;
    }());
    // Operation Specifications
    var serializer$i = new msRest.Serializer(Mappers$i);
    var getOperationSpec$f = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            storageType
        ],
        queryParameters: [
            apiVersion6
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComponentLinkedStorageAccounts
            },
            default: {
                bodyMapper: ErrorResponseLinkedStorage
            }
        },
        serializer: serializer$i
    };
    var createAndUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            storageType
        ],
        queryParameters: [
            apiVersion6
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "linkedStorageAccountsProperties",
            mapper: __assign(__assign({}, ComponentLinkedStorageAccounts), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ComponentLinkedStorageAccounts
            },
            default: {
                bodyMapper: ErrorResponseLinkedStorage
            }
        },
        serializer: serializer$i
    };
    var updateOperationSpec$7 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            storageType
        ],
        queryParameters: [
            apiVersion6
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "linkedStorageAccountsProperties",
            mapper: __assign(__assign({}, ComponentLinkedStorageAccountsPatch), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ComponentLinkedStorageAccounts
            },
            default: {
                bodyMapper: ErrorResponseLinkedStorage
            }
        },
        serializer: serializer$i
    };
    var deleteMethodOperationSpec$b = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/components/{resourceName}/linkedStorageAccounts/{storageType}",
        urlParameters: [
            resourceGroupName,
            subscriptionId,
            resourceName,
            storageType
        ],
        queryParameters: [
            apiVersion6
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponseLinkedStorage
            }
        },
        serializer: serializer$i
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$j = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorResponseLinkedStorage: ErrorResponseLinkedStorage,
        ErrorResponseLinkedStorageError: ErrorResponseLinkedStorageError,
        LiveTokenResponse: LiveTokenResponse
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a LiveToken. */
    var LiveToken = /** @class */ (function () {
        /**
         * Create a LiveToken.
         * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
         */
        function LiveToken(client) {
            this.client = client;
        }
        LiveToken.prototype.get = function (resourceUri, options, callback) {
            return this.client.sendOperationRequest({
                resourceUri: resourceUri,
                options: options
            }, getOperationSpec$g, callback);
        };
        return LiveToken;
    }());
    // Operation Specifications
    var serializer$j = new msRest.Serializer(Mappers$j);
    var getOperationSpec$g = {
        httpMethod: "POST",
        path: "{resourceUri}/providers/microsoft.insights/generatelivetoken",
        urlParameters: [
            resourceUri
        ],
        queryParameters: [
            apiVersion1
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: LiveTokenResponse
            },
            default: {
                bodyMapper: ErrorResponseLinkedStorage
            }
        },
        serializer: serializer$j
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-appinsights";
    var packageVersion = "4.0.0";
    var ApplicationInsightsManagementClientContext = /** @class */ (function (_super) {
        __extends(ApplicationInsightsManagementClientContext, _super);
        /**
         * Initializes a new instance of the ApplicationInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function ApplicationInsightsManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ApplicationInsightsManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ApplicationInsightsManagementClient = /** @class */ (function (_super) {
        __extends(ApplicationInsightsManagementClient, _super);
        /**
         * Initializes a new instance of the ApplicationInsightsManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The ID of the target subscription.
         * @param [options] The parameter options
         */
        function ApplicationInsightsManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.annotations = new Annotations(_this);
            _this.aPIKeys = new APIKeys(_this);
            _this.exportConfigurations = new ExportConfigurations(_this);
            _this.componentCurrentBillingFeatures = new ComponentCurrentBillingFeatures(_this);
            _this.componentQuotaStatus = new ComponentQuotaStatus(_this);
            _this.componentFeatureCapabilities = new ComponentFeatureCapabilities(_this);
            _this.componentAvailableFeatures = new ComponentAvailableFeatures(_this);
            _this.proactiveDetectionConfigurations = new ProactiveDetectionConfigurations(_this);
            _this.workItemConfigurations = new WorkItemConfigurations(_this);
            _this.favorites = new Favorites(_this);
            _this.webTestLocations = new WebTestLocations(_this);
            _this.webTests = new WebTests(_this);
            _this.analyticsItems = new AnalyticsItems(_this);
            _this.workbookTemplates = new WorkbookTemplates(_this);
            _this.myWorkbooks = new MyWorkbooks(_this);
            _this.workbooks = new Workbooks(_this);
            _this.components = new Components(_this);
            _this.componentLinkedStorageAccounts = new ComponentLinkedStorageAccountsOperations(_this);
            _this.liveToken = new LiveToken(_this);
            return _this;
        }
        return ApplicationInsightsManagementClient;
    }(ApplicationInsightsManagementClientContext));

    exports.APIKeys = APIKeys;
    exports.AnalyticsItems = AnalyticsItems;
    exports.Annotations = Annotations;
    exports.ApplicationInsightsManagementClient = ApplicationInsightsManagementClient;
    exports.ApplicationInsightsManagementClientContext = ApplicationInsightsManagementClientContext;
    exports.ApplicationInsightsManagementMappers = mappers;
    exports.ApplicationInsightsManagementModels = index;
    exports.ComponentAvailableFeatures = ComponentAvailableFeatures;
    exports.ComponentCurrentBillingFeatures = ComponentCurrentBillingFeatures;
    exports.ComponentFeatureCapabilities = ComponentFeatureCapabilities;
    exports.ComponentLinkedStorageAccountsOperations = ComponentLinkedStorageAccountsOperations;
    exports.ComponentQuotaStatus = ComponentQuotaStatus;
    exports.Components = Components;
    exports.ExportConfigurations = ExportConfigurations;
    exports.Favorites = Favorites;
    exports.LiveToken = LiveToken;
    exports.MyWorkbooks = MyWorkbooks;
    exports.Operations = Operations;
    exports.ProactiveDetectionConfigurations = ProactiveDetectionConfigurations;
    exports.WebTestLocations = WebTestLocations;
    exports.WebTests = WebTests;
    exports.WorkItemConfigurations = WorkItemConfigurations;
    exports.WorkbookTemplates = WorkbookTemplates;
    exports.Workbooks = Workbooks;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-appinsights.js.map
