import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { ApplicationInsightsManagementClientContext } from "./applicationInsightsManagementClientContext";
declare class ApplicationInsightsManagementClient extends ApplicationInsightsManagementClientContext {
    operations: operations.Operations;
    annotations: operations.Annotations;
    aPIKeys: operations.APIKeys;
    exportConfigurations: operations.ExportConfigurations;
    componentCurrentBillingFeatures: operations.ComponentCurrentBillingFeatures;
    componentQuotaStatus: operations.ComponentQuotaStatus;
    componentFeatureCapabilities: operations.ComponentFeatureCapabilities;
    componentAvailableFeatures: operations.ComponentAvailableFeatures;
    proactiveDetectionConfigurations: operations.ProactiveDetectionConfigurations;
    workItemConfigurations: operations.WorkItemConfigurations;
    favorites: operations.Favorites;
    webTestLocations: operations.WebTestLocations;
    webTests: operations.WebTests;
    analyticsItems: operations.AnalyticsItems;
    workbookTemplates: operations.WorkbookTemplates;
    myWorkbooks: operations.MyWorkbooks;
    workbooks: operations.Workbooks;
    components: operations.Components;
    componentLinkedStorageAccounts: operations.ComponentLinkedStorageAccountsOperations;
    liveToken: operations.LiveToken;
    /**
     * Initializes a new instance of the ApplicationInsightsManagementClient class.
     * @param credentials Credentials needed for the client to connect to Azure. Credentials
     * implementing the TokenCredential interface from the @azure/identity package are recommended. For
     * more information about these credentials, see
     * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
     * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
     * @azure/ms-rest-browserauth are also supported.
     * @param subscriptionId The ID of the target subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.ApplicationInsightsManagementClientOptions);
}
export { ApplicationInsightsManagementClient, ApplicationInsightsManagementClientContext, Models as ApplicationInsightsManagementModels, Mappers as ApplicationInsightsManagementMappers };
export * from "./operations";
//# sourceMappingURL=applicationInsightsManagementClient.d.ts.map