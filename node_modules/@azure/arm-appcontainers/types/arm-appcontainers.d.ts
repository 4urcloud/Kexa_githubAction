import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for AccessMode. \
 * {@link KnownAccessMode} can be used interchangeably with AccessMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadOnly** \
 * **ReadWrite**
 */
export declare type AccessMode = string;

/**
 * Defines values for Action. \
 * {@link KnownAction} can be used interchangeably with Action,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export declare type Action = string;

/**
 * Defines values for ActiveRevisionsMode. \
 * {@link KnownActiveRevisionsMode} can be used interchangeably with ActiveRevisionsMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Multiple** \
 * **Single**
 */
export declare type ActiveRevisionsMode = string;

/**
 * Defines values for Affinity. \
 * {@link KnownAffinity} can be used interchangeably with Affinity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **sticky** \
 * **none**
 */
export declare type Affinity = string;

/** The configuration settings of the Allowed Audiences validation flow. */
export declare interface AllowedAudiencesValidation {
    /** The configuration settings of the allowed list of audiences from which to validate the JWT token. */
    allowedAudiences?: string[];
}

/** The configuration settings of the Azure Active Directory allowed principals. */
export declare interface AllowedPrincipals {
    /** The list of the allowed groups. */
    groups?: string[];
    /** The list of the allowed identities. */
    identities?: string[];
}

/** The configuration settings of the Apple provider. */
export declare interface Apple {
    /** <code>false</code> if the Apple provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the Apple registration. */
    registration?: AppleRegistration;
    /** The configuration settings of the login flow. */
    login?: LoginScopes;
}

/** The configuration settings of the registration for the Apple provider */
export declare interface AppleRegistration {
    /** The Client ID of the app used for login. */
    clientId?: string;
    /** The app setting name that contains the client secret. */
    clientSecretSettingName?: string;
}

/**
 * Defines values for Applicability. \
 * {@link KnownApplicability} can be used interchangeably with Applicability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LocationDefault** \
 * **Custom**
 */
export declare type Applicability = string;

/** Configuration of application logs */
export declare interface AppLogsConfiguration {
    /** Logs destination, can be 'log-analytics', 'azure-monitor' or 'none' */
    destination?: string;
    /** Log Analytics configuration, must only be provided when destination is configured as 'log-analytics' */
    logAnalyticsConfiguration?: LogAnalyticsConfiguration;
}

/**
 * Defines values for AppProtocol. \
 * {@link KnownAppProtocol} can be used interchangeably with AppProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **http** \
 * **grpc**
 */
export declare type AppProtocol = string;

/** The configuration settings of the app registration for providers that have app ids and app secrets */
export declare interface AppRegistration {
    /** The App ID of the app used for login. */
    appId?: string;
    /** The app setting name that contains the app secret. */
    appSecretSettingName?: string;
}

/** Configuration settings for the Azure ContainerApp Service Authentication / Authorization feature. */
export declare interface AuthConfig extends ProxyResource {
    /** The configuration settings of the platform of ContainerApp Service Authentication/Authorization. */
    platform?: AuthPlatform;
    /** The configuration settings that determines the validation flow of users using  Service Authentication/Authorization. */
    globalValidation?: GlobalValidation;
    /** The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization. */
    identityProviders?: IdentityProviders;
    /** The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization. */
    login?: Login;
    /** The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization. */
    httpSettings?: HttpSettings;
}

/** AuthConfig collection ARM resource. */
export declare interface AuthConfigCollection {
    /** Collection of resources. */
    value: AuthConfig[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The configuration settings of the platform of ContainerApp Service Authentication/Authorization. */
export declare interface AuthPlatform {
    /** <code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>. */
    enabled?: boolean;
    /**
     * The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
     */
    runtimeVersion?: string;
}

/** Available operations of the service */
export declare interface AvailableOperations {
    /** Collection of available operation details */
    value?: OperationDetail[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/** A workload profile with specific hardware configure to run container apps. */
export declare interface AvailableWorkloadProfile extends ProxyResource {
    /** Region of the workload profile. */
    location?: string;
    /** Revision resource specific properties */
    properties?: AvailableWorkloadProfileProperties;
}

/** Revision resource specific properties */
export declare interface AvailableWorkloadProfileProperties {
    /** Used to categorize workload profiles. */
    category?: string;
    /** indicates whether the profile is default for the location. */
    applicability?: Applicability;
    /** Number of cores in CPU. */
    cores?: number;
    /** Memory in GiB. */
    memoryGiB?: number;
    /** The everyday name of the workload profile. */
    displayName?: string;
}

/** Interface representing a AvailableWorkloadProfiles. */
export declare interface AvailableWorkloadProfiles {
    /**
     * Get all available workload profiles for a location.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    list(location: string, options?: AvailableWorkloadProfilesGetOptionalParams): PagedAsyncIterableIterator<AvailableWorkloadProfile>;
}

/** Collection of available workload profiles in the location. */
export declare interface AvailableWorkloadProfilesCollection {
    /** Collection of workload profiles. */
    value: AvailableWorkloadProfile[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface AvailableWorkloadProfilesGetNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getNext operation. */
export declare type AvailableWorkloadProfilesGetNextResponse = AvailableWorkloadProfilesCollection;

/** Optional parameters. */
export declare interface AvailableWorkloadProfilesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AvailableWorkloadProfilesGetResponse = AvailableWorkloadProfilesCollection;

/** The configuration settings of the Azure Active directory provider. */
export declare interface AzureActiveDirectory {
    /** <code>false</code> if the Azure Active Directory provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the Azure Active Directory app registration. */
    registration?: AzureActiveDirectoryRegistration;
    /** The configuration settings of the Azure Active Directory login flow. */
    login?: AzureActiveDirectoryLogin;
    /** The configuration settings of the Azure Active Directory token validation flow. */
    validation?: AzureActiveDirectoryValidation;
    /**
     * Gets a value indicating whether the Azure AD configuration was auto-provisioned using 1st party tooling.
     * This is an internal flag primarily intended to support the Azure Management Portal. Users should not
     * read or write to this property.
     */
    isAutoProvisioned?: boolean;
}

/** The configuration settings of the Azure Active Directory login flow. */
export declare interface AzureActiveDirectoryLogin {
    /**
     * Login parameters to send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form "key=value".
     */
    loginParameters?: string[];
    /** <code>true</code> if the www-authenticate provider should be omitted from the request; otherwise, <code>false</code>. */
    disableWWWAuthenticate?: boolean;
}

/** The configuration settings of the Azure Active Directory app registration. */
export declare interface AzureActiveDirectoryRegistration {
    /**
     * The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://login.microsoftonline.com/v2.0/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
     */
    openIdIssuer?: string;
    /**
     * The Client ID of this relying party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
     */
    clientId?: string;
    /** The app setting name that contains the client secret of the relying party application. */
    clientSecretSettingName?: string;
    /**
     * An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret. It is also optional.
     */
    clientSecretCertificateThumbprint?: string;
    /**
     * An alternative to the client secret thumbprint, that is the subject alternative name of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret Certificate Thumbprint. It is also optional.
     */
    clientSecretCertificateSubjectAlternativeName?: string;
    /**
     * An alternative to the client secret thumbprint, that is the issuer of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret Certificate Thumbprint. It is also optional.
     */
    clientSecretCertificateIssuer?: string;
}

/** The configuration settings of the Azure Active Directory token validation flow. */
export declare interface AzureActiveDirectoryValidation {
    /** The configuration settings of the checks that should be made while validating the JWT Claims. */
    jwtClaimChecks?: JwtClaimChecks;
    /** The list of audiences that can make successful authentication/authorization requests. */
    allowedAudiences?: string[];
    /** The configuration settings of the default authorization policy. */
    defaultAuthorizationPolicy?: DefaultAuthorizationPolicy;
}

/** Container App credentials. */
export declare interface AzureCredentials {
    /** Client Id. */
    clientId?: string;
    /** Client Secret. */
    clientSecret?: string;
    /** Tenant Id. */
    tenantId?: string;
    /** Kind of auth github does for deploying the template */
    kind?: string;
    /** Subscription Id. */
    subscriptionId?: string;
}

/** Azure File Properties. */
export declare interface AzureFileProperties {
    /** Storage account name for azure file. */
    accountName?: string;
    /** Storage account key for azure file. */
    accountKey?: string;
    /** Access mode for storage */
    accessMode?: AccessMode;
    /** Azure file share name. */
    shareName?: string;
}

/** The configuration settings of the Azure Static Web Apps provider. */
export declare interface AzureStaticWebApps {
    /** <code>false</code> if the Azure Static Web Apps provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the Azure Static Web Apps registration. */
    registration?: AzureStaticWebAppsRegistration;
}

/** The configuration settings of the registration for the Azure Static Web Apps provider */
export declare interface AzureStaticWebAppsRegistration {
    /** The Client ID of the app used for login. */
    clientId?: string;
}

/** Container App base container definition. */
export declare interface BaseContainer {
    /** Container image tag. */
    image?: string;
    /** Custom container name. */
    name?: string;
    /** Container start command. */
    command?: string[];
    /** Container start command arguments. */
    args?: string[];
    /** Container environment variables. */
    env?: EnvironmentVar[];
    /** Container resource requirements. */
    resources?: ContainerResources;
    /** Container volume mounts. */
    volumeMounts?: VolumeMount[];
}

/** Billing meter. */
export declare interface BillingMeter extends ProxyResource {
    /** Region for the billing meter. */
    location?: string;
    /** Revision resource specific properties */
    properties?: BillingMeterProperties;
}

/** Collection of billing meters. */
export declare interface BillingMeterCollection {
    /** Collection of billing meters. */
    value: BillingMeter[];
}

/** Revision resource specific properties */
export declare interface BillingMeterProperties {
    /** Used to categorize billing meters. */
    category?: string;
    /** Billing meter type. */
    meterType?: string;
    /** The everyday name of the billing meter. */
    displayName?: string;
}

/** Interface representing a BillingMeters. */
export declare interface BillingMeters {
    /**
     * Get all billingMeters for a location.
     * @param location The name of Azure region.
     * @param options The options parameters.
     */
    get(location: string, options?: BillingMetersGetOptionalParams): Promise<BillingMetersGetResponse>;
}

/** Optional parameters. */
export declare interface BillingMetersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BillingMetersGetResponse = BillingMeterCollection;

/**
 * Defines values for BindingType. \
 * {@link KnownBindingType} can be used interchangeably with BindingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **SniEnabled**
 */
export declare type BindingType = string;

/** Certificate used for Custom Domain bindings of Container Apps in a Managed Environment */
export declare interface Certificate extends TrackedResource {
    /** Certificate resource specific properties */
    properties?: CertificateProperties;
}

/** Collection of Certificates. */
export declare interface CertificateCollection {
    /** Collection of resources. */
    value: Certificate[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A certificate to update */
export declare interface CertificatePatch {
    /** Application-specific metadata in the form of key-value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Certificate resource specific properties */
export declare interface CertificateProperties {
    /**
     * Provisioning state of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: CertificateProvisioningState;
    /** Certificate password. */
    password?: string;
    /**
     * Subject name of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subjectName?: string;
    /**
     * Subject alternative names the certificate applies to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subjectAlternativeNames?: string[];
    /** PFX or PEM blob */
    value?: Uint8Array;
    /**
     * Certificate issuer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly issuer?: string;
    /**
     * Certificate issue Date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly issueDate?: Date;
    /**
     * Certificate expiration date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expirationDate?: Date;
    /**
     * Certificate thumbprint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly thumbprint?: string;
    /**
     * Is the certificate valid?.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valid?: boolean;
    /**
     * Public key hash.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicKeyHash?: string;
}

/**
 * Defines values for CertificateProvisioningState. \
 * {@link KnownCertificateProvisioningState} can be used interchangeably with CertificateProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **DeleteFailed** \
 * **Pending**
 */
export declare type CertificateProvisioningState = string;

/** Interface representing a Certificates. */
export declare interface Certificates {
    /**
     * Get the Certificates in a given managed environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, environmentName: string, options?: CertificatesListOptionalParams): PagedAsyncIterableIterator<Certificate>;
    /**
     * Get the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, certificateName: string, options?: CertificatesGetOptionalParams): Promise<CertificatesGetResponse>;
    /**
     * Create or Update a Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, environmentName: string, certificateName: string, options?: CertificatesCreateOrUpdateOptionalParams): Promise<CertificatesCreateOrUpdateResponse>;
    /**
     * Deletes the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, certificateName: string, options?: CertificatesDeleteOptionalParams): Promise<void>;
    /**
     * Patches a certificate. Currently only patching of tags is supported
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param certificateName Name of the Certificate.
     * @param certificateEnvelope Properties of a certificate that need to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName: string, environmentName: string, certificateName: string, certificateEnvelope: CertificatePatch, options?: CertificatesUpdateOptionalParams): Promise<CertificatesUpdateResponse>;
}

/** Optional parameters. */
export declare interface CertificatesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Certificate to be created or updated */
    certificateEnvelope?: Certificate;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CertificatesCreateOrUpdateResponse = Certificate;

/** Optional parameters. */
export declare interface CertificatesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface CertificatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CertificatesGetResponse = Certificate;

/** Optional parameters. */
export declare interface CertificatesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CertificatesListNextResponse = CertificateCollection;

/** Optional parameters. */
export declare interface CertificatesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CertificatesListResponse = CertificateCollection;

/** Optional parameters. */
export declare interface CertificatesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type CertificatesUpdateResponse = Certificate;

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type CheckNameAvailabilityReason = string;

/** The check availability request body. */
export declare interface CheckNameAvailabilityRequest {
    /** The name of the resource for which availability needs to be checked. */
    name?: string;
    /** The resource type. */
    type?: string;
}

/** The check availability result. */
export declare interface CheckNameAvailabilityResponse {
    /** Indicates if the resource name is available. */
    nameAvailable?: boolean;
    /** The reason why the given name is not available. */
    reason?: CheckNameAvailabilityReason;
    /** Detailed reason why the given name is available. */
    message?: string;
}

/** The configuration settings of the app registration for providers that have client ids and client secrets */
export declare interface ClientRegistration {
    /** The Client ID of the app used for login. */
    clientId?: string;
    /** The app setting name that contains the client secret. */
    clientSecretSettingName?: string;
}

/** Non versioned Container App configuration properties that define the mutable settings of a Container app */
export declare interface Configuration {
    /** Collection of secrets used by a Container app */
    secrets?: Secret[];
    /**
     * ActiveRevisionsMode controls how active revisions are handled for the Container app:
     * <list><item>Multiple: multiple revisions can be active.</item><item>Single: Only one revision can be active at a time. Revision weights can not be used in this mode. If no value if provided, this is the default.</item></list>
     */
    activeRevisionsMode?: ActiveRevisionsMode;
    /** Ingress configurations. */
    ingress?: Ingress;
    /** Collection of private container registry credentials for containers used by the Container app */
    registries?: RegistryCredentials[];
    /** Dapr configuration for the Container App. */
    dapr?: Dapr;
    /** Optional. Max inactive revisions a Container App can have. */
    maxInactiveRevisions?: number;
    /** Container App to be a dev Container App Service */
    service?: Service;
}

/** An environment for Kubernetes cluster specialized for web workloads by Azure App Service */
export declare interface ConnectedEnvironment extends TrackedResource {
    /** The complex type of the extended location. */
    extendedLocation?: ExtendedLocation;
    /**
     * Provisioning state of the Kubernetes Environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ConnectedEnvironmentProvisioningState;
    /**
     * Any errors that occurred during deployment or deployment validation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deploymentErrors?: string;
    /**
     * Default Domain Name for the cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultDomain?: string;
    /** Static IP of the connectedEnvironment */
    staticIp?: string;
    /** Application Insights connection string used by Dapr to export Service to Service communication telemetry */
    daprAIConnectionString?: string;
    /** Custom domain configuration for the environment */
    customDomainConfiguration?: CustomDomainConfiguration;
}

/** Collection of connectedEnvironments */
export declare interface ConnectedEnvironmentCollection {
    /** Collection of resources. */
    value?: ConnectedEnvironment[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for ConnectedEnvironmentProvisioningState. \
 * {@link KnownConnectedEnvironmentProvisioningState} can be used interchangeably with ConnectedEnvironmentProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Waiting** \
 * **InitializationInProgress** \
 * **InfrastructureSetupInProgress** \
 * **InfrastructureSetupComplete** \
 * **ScheduledForDelete**
 */
export declare type ConnectedEnvironmentProvisioningState = string;

/** Interface representing a ConnectedEnvironments. */
export declare interface ConnectedEnvironments {
    /**
     * Get all connectedEnvironments for a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ConnectedEnvironmentsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConnectedEnvironment>;
    /**
     * Get all connectedEnvironments in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ConnectedEnvironmentsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConnectedEnvironment>;
    /**
     * Get the properties of an connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connectedEnvironment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsGetOptionalParams): Promise<ConnectedEnvironmentsGetResponse>;
    /**
     * Creates or updates an connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connectedEnvironment.
     * @param environmentEnvelope Configuration details of the connectedEnvironment.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, connectedEnvironmentName: string, environmentEnvelope: ConnectedEnvironment, options?: ConnectedEnvironmentsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ConnectedEnvironmentsCreateOrUpdateResponse>, ConnectedEnvironmentsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connectedEnvironment.
     * @param environmentEnvelope Configuration details of the connectedEnvironment.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, connectedEnvironmentName: string, environmentEnvelope: ConnectedEnvironment, options?: ConnectedEnvironmentsCreateOrUpdateOptionalParams): Promise<ConnectedEnvironmentsCreateOrUpdateResponse>;
    /**
     * Delete an connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connectedEnvironment.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete an connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connectedEnvironment.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsDeleteOptionalParams): Promise<void>;
    /**
     * Patches a Managed Environment. Only patching of tags is supported currently
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connectedEnvironment.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsUpdateOptionalParams): Promise<ConnectedEnvironmentsUpdateResponse>;
    /**
     * Checks if resource connectedEnvironmentName is available.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Managed Environment.
     * @param checkNameAvailabilityRequest The check connectedEnvironmentName availability request.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName: string, connectedEnvironmentName: string, checkNameAvailabilityRequest: CheckNameAvailabilityRequest, options?: ConnectedEnvironmentsCheckNameAvailabilityOptionalParams): Promise<ConnectedEnvironmentsCheckNameAvailabilityResponse>;
}

/** Interface representing a ConnectedEnvironmentsCertificates. */
export declare interface ConnectedEnvironmentsCertificates {
    /**
     * Get the Certificates in a given connected environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsCertificatesListOptionalParams): PagedAsyncIterableIterator<Certificate>;
    /**
     * Get the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, options?: ConnectedEnvironmentsCertificatesGetOptionalParams): Promise<ConnectedEnvironmentsCertificatesGetResponse>;
    /**
     * Create or Update a Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, options?: ConnectedEnvironmentsCertificatesCreateOrUpdateOptionalParams): Promise<ConnectedEnvironmentsCertificatesCreateOrUpdateResponse>;
    /**
     * Deletes the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, options?: ConnectedEnvironmentsCertificatesDeleteOptionalParams): Promise<void>;
    /**
     * Patches a certificate. Currently only patching of tags is supported
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param certificateEnvelope Properties of a certificate that need to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, certificateEnvelope: CertificatePatch, options?: ConnectedEnvironmentsCertificatesUpdateOptionalParams): Promise<ConnectedEnvironmentsCertificatesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCertificatesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Certificate to be created or updated */
    certificateEnvelope?: Certificate;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConnectedEnvironmentsCertificatesCreateOrUpdateResponse = Certificate;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCertificatesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCertificatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConnectedEnvironmentsCertificatesGetResponse = Certificate;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCertificatesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ConnectedEnvironmentsCertificatesListNextResponse = CertificateCollection;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCertificatesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ConnectedEnvironmentsCertificatesListResponse = CertificateCollection;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCertificatesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ConnectedEnvironmentsCertificatesUpdateResponse = Certificate;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type ConnectedEnvironmentsCheckNameAvailabilityResponse = CheckNameAvailabilityResponse;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConnectedEnvironmentsCreateOrUpdateResponse = ConnectedEnvironment;

/** Interface representing a ConnectedEnvironmentsDaprComponents. */
export declare interface ConnectedEnvironmentsDaprComponents {
    /**
     * Get the Dapr Components for a connected environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connected environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsDaprComponentsListOptionalParams): PagedAsyncIterableIterator<DaprComponent>;
    /**
     * Get a dapr component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connected environment.
     * @param componentName Name of the Dapr Component.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, connectedEnvironmentName: string, componentName: string, options?: ConnectedEnvironmentsDaprComponentsGetOptionalParams): Promise<ConnectedEnvironmentsDaprComponentsGetResponse>;
    /**
     * Creates or updates a Dapr Component in a connected environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connected environment.
     * @param componentName Name of the Dapr Component.
     * @param daprComponentEnvelope Configuration details of the Dapr Component.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, connectedEnvironmentName: string, componentName: string, daprComponentEnvelope: DaprComponent, options?: ConnectedEnvironmentsDaprComponentsCreateOrUpdateOptionalParams): Promise<ConnectedEnvironmentsDaprComponentsCreateOrUpdateResponse>;
    /**
     * Delete a Dapr Component from a connected environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connected environment.
     * @param componentName Name of the Dapr Component.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, connectedEnvironmentName: string, componentName: string, options?: ConnectedEnvironmentsDaprComponentsDeleteOptionalParams): Promise<void>;
    /**
     * List secrets for a dapr component
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the connected environment.
     * @param componentName Name of the Dapr Component.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, connectedEnvironmentName: string, componentName: string, options?: ConnectedEnvironmentsDaprComponentsListSecretsOptionalParams): Promise<ConnectedEnvironmentsDaprComponentsListSecretsResponse>;
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsDaprComponentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConnectedEnvironmentsDaprComponentsCreateOrUpdateResponse = DaprComponent;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsDaprComponentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsDaprComponentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConnectedEnvironmentsDaprComponentsGetResponse = DaprComponent;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsDaprComponentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ConnectedEnvironmentsDaprComponentsListNextResponse = DaprComponentsCollection;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsDaprComponentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ConnectedEnvironmentsDaprComponentsListResponse = DaprComponentsCollection;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsDaprComponentsListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type ConnectedEnvironmentsDaprComponentsListSecretsResponse = DaprSecretsCollection;

/** Defines headers for ConnectedEnvironments_delete operation. */
export declare interface ConnectedEnvironmentsDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConnectedEnvironmentsGetResponse = ConnectedEnvironment;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ConnectedEnvironmentsListByResourceGroupNextResponse = ConnectedEnvironmentCollection;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ConnectedEnvironmentsListByResourceGroupResponse = ConnectedEnvironmentCollection;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ConnectedEnvironmentsListBySubscriptionNextResponse = ConnectedEnvironmentCollection;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ConnectedEnvironmentsListBySubscriptionResponse = ConnectedEnvironmentCollection;

/** Interface representing a ConnectedEnvironmentsStorages. */
export declare interface ConnectedEnvironmentsStorages {
    /**
     * Get all storages for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsStoragesListOptionalParams): Promise<ConnectedEnvironmentsStoragesListResponse>;
    /**
     * Get storage for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, connectedEnvironmentName: string, storageName: string, options?: ConnectedEnvironmentsStoragesGetOptionalParams): Promise<ConnectedEnvironmentsStoragesGetResponse>;
    /**
     * Create or update storage for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param storageEnvelope Configuration details of storage.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, connectedEnvironmentName: string, storageName: string, storageEnvelope: ConnectedEnvironmentStorage, options?: ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams): Promise<ConnectedEnvironmentsStoragesCreateOrUpdateResponse>;
    /**
     * Delete storage for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, connectedEnvironmentName: string, storageName: string, options?: ConnectedEnvironmentsStoragesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConnectedEnvironmentsStoragesCreateOrUpdateResponse = ConnectedEnvironmentStorage;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsStoragesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsStoragesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConnectedEnvironmentsStoragesGetResponse = ConnectedEnvironmentStorage;

/** Optional parameters. */
export declare interface ConnectedEnvironmentsStoragesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ConnectedEnvironmentsStoragesListResponse = ConnectedEnvironmentStoragesCollection;

/** Storage resource for connectedEnvironment. */
export declare interface ConnectedEnvironmentStorage extends ProxyResource {
    /** Storage properties */
    properties?: ConnectedEnvironmentStorageProperties;
}

/** Storage properties */
export declare interface ConnectedEnvironmentStorageProperties {
    /** Azure file properties */
    azureFile?: AzureFileProperties;
}

/** Collection of Storage for Environments */
export declare interface ConnectedEnvironmentStoragesCollection {
    /** Collection of storage resources. */
    value: ConnectedEnvironmentStorage[];
}

/** Optional parameters. */
export declare interface ConnectedEnvironmentsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ConnectedEnvironmentsUpdateResponse = ConnectedEnvironment;

/** Container App container definition */
export declare interface Container extends BaseContainer {
    /** List of probes for the container. */
    probes?: ContainerAppProbe[];
}

/** Container App. */
export declare interface ContainerApp extends TrackedResource {
    /** The complex type of the extended location. */
    extendedLocation?: ExtendedLocation;
    /** managed identities for the Container App to interact with other Azure services without maintaining any secrets or credentials in code. */
    identity?: ManagedServiceIdentity;
    /** The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource. */
    managedBy?: string;
    /**
     * Provisioning state of the Container App.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ContainerAppProvisioningState;
    /** Deprecated. Resource ID of the Container App's environment. */
    managedEnvironmentId?: string;
    /** Resource ID of environment. */
    environmentId?: string;
    /** Workload profile name to pin for container app execution. */
    workloadProfileName?: string;
    /**
     * Name of the latest revision of the Container App.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latestRevisionName?: string;
    /**
     * Name of the latest ready revision of the Container App.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latestReadyRevisionName?: string;
    /**
     * Fully Qualified Domain Name of the latest revision of the Container App.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latestRevisionFqdn?: string;
    /**
     * Id used to verify domain name ownership
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customDomainVerificationId?: string;
    /** Non versioned Container App configuration properties. */
    configuration?: Configuration;
    /** Container App versioned application definition. */
    template?: Template;
    /**
     * Outbound IP Addresses for container app.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outboundIpAddresses?: string[];
    /**
     * The endpoint of the eventstream of the container app.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventStreamEndpoint?: string;
}

/** Container App Auth Token. */
export declare interface ContainerAppAuthToken extends TrackedResource {
    /**
     * Auth token value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly token?: string;
    /**
     * Token expiration date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expires?: Date;
}

/** Container App collection ARM resource. */
export declare interface ContainerAppCollection {
    /** Collection of resources. */
    value: ContainerApp[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for ContainerAppContainerRunningState. \
 * {@link KnownContainerAppContainerRunningState} can be used interchangeably with ContainerAppContainerRunningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Terminated** \
 * **Waiting**
 */
export declare type ContainerAppContainerRunningState = string;

/** Container App executions collection ARM resource. */
export declare interface ContainerAppJobExecutions {
    /** Collection of resources. */
    value: JobExecution[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic. */
export declare interface ContainerAppProbe {
    /** Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1. Maximum value is 10. */
    failureThreshold?: number;
    /** HTTPGet specifies the http request to perform. */
    httpGet?: ContainerAppProbeHttpGet;
    /** Number of seconds after the container has started before liveness probes are initiated. Minimum value is 1. Maximum value is 60. */
    initialDelaySeconds?: number;
    /** How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value is 240. */
    periodSeconds?: number;
    /** Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1. Maximum value is 10. */
    successThreshold?: number;
    /** TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported. */
    tcpSocket?: ContainerAppProbeTcpSocket;
    /** Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour) */
    terminationGracePeriodSeconds?: number;
    /** Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 240. */
    timeoutSeconds?: number;
    /** The type of probe. */
    type?: Type;
}

/** HTTPGet specifies the http request to perform. */
export declare interface ContainerAppProbeHttpGet {
    /** Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead. */
    host?: string;
    /** Custom headers to set in the request. HTTP allows repeated headers. */
    httpHeaders?: ContainerAppProbeHttpGetHttpHeadersItem[];
    /** Path to access on the HTTP server. */
    path?: string;
    /** Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
    port: number;
    /** Scheme to use for connecting to the host. Defaults to HTTP. */
    scheme?: Scheme;
}

/** HTTPHeader describes a custom header to be used in HTTP probes */
export declare interface ContainerAppProbeHttpGetHttpHeadersItem {
    /** The header field name */
    name: string;
    /** The header field value */
    value: string;
}

/** TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported. */
export declare interface ContainerAppProbeTcpSocket {
    /** Optional: Host name to connect to, defaults to the pod IP. */
    host?: string;
    /** Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. */
    port: number;
}

/**
 * Defines values for ContainerAppProvisioningState. \
 * {@link KnownContainerAppProvisioningState} can be used interchangeably with ContainerAppProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleting**
 */
export declare type ContainerAppProvisioningState = string;

/**
 * Defines values for ContainerAppReplicaRunningState. \
 * {@link KnownContainerAppReplicaRunningState} can be used interchangeably with ContainerAppReplicaRunningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **NotRunning** \
 * **Unknown**
 */
export declare type ContainerAppReplicaRunningState = string;

/** Interface representing a ContainerApps. */
export declare interface ContainerApps {
    /**
     * Get the Container Apps in a given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ContainerAppsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ContainerApp>;
    /**
     * Get the Container Apps in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ContainerAppsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ContainerApp>;
    /**
     * Get the properties of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, containerAppName: string, options?: ContainerAppsGetOptionalParams): Promise<ContainerAppsGetResponse>;
    /**
     * Create or update a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param containerAppEnvelope Properties used to create a container app
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, containerAppName: string, containerAppEnvelope: ContainerApp, options?: ContainerAppsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ContainerAppsCreateOrUpdateResponse>, ContainerAppsCreateOrUpdateResponse>>;
    /**
     * Create or update a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param containerAppEnvelope Properties used to create a container app
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, containerAppName: string, containerAppEnvelope: ContainerApp, options?: ContainerAppsCreateOrUpdateOptionalParams): Promise<ContainerAppsCreateOrUpdateResponse>;
    /**
     * Delete a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, containerAppName: string, options?: ContainerAppsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, containerAppName: string, options?: ContainerAppsDeleteOptionalParams): Promise<void>;
    /**
     * Patches a Container App using JSON Merge Patch
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param containerAppEnvelope Properties of a Container App that need to be updated
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, containerAppName: string, containerAppEnvelope: ContainerApp, options?: ContainerAppsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ContainerAppsUpdateResponse>, ContainerAppsUpdateResponse>>;
    /**
     * Patches a Container App using JSON Merge Patch
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param containerAppEnvelope Properties of a Container App that need to be updated
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, containerAppName: string, containerAppEnvelope: ContainerApp, options?: ContainerAppsUpdateOptionalParams): Promise<ContainerAppsUpdateResponse>;
    /**
     * Analyzes a custom hostname for a Container App
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    listCustomHostNameAnalysis(resourceGroupName: string, containerAppName: string, options?: ContainerAppsListCustomHostNameAnalysisOptionalParams): Promise<ContainerAppsListCustomHostNameAnalysisResponse>;
    /**
     * List secrets for a container app
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, containerAppName: string, options?: ContainerAppsListSecretsOptionalParams): Promise<ContainerAppsListSecretsResponse>;
    /**
     * Get auth token for a container app
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    getAuthToken(resourceGroupName: string, containerAppName: string, options?: ContainerAppsGetAuthTokenOptionalParams): Promise<ContainerAppsGetAuthTokenResponse>;
    /**
     * Start a container app
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, containerAppName: string, options?: ContainerAppsStartOptionalParams): Promise<SimplePollerLike<OperationState<ContainerAppsStartResponse>, ContainerAppsStartResponse>>;
    /**
     * Start a container app
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, containerAppName: string, options?: ContainerAppsStartOptionalParams): Promise<ContainerAppsStartResponse>;
    /**
     * Stop a container app
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, containerAppName: string, options?: ContainerAppsStopOptionalParams): Promise<SimplePollerLike<OperationState<ContainerAppsStopResponse>, ContainerAppsStopResponse>>;
    /**
     * Stop a container app
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, containerAppName: string, options?: ContainerAppsStopOptionalParams): Promise<ContainerAppsStopResponse>;
}

export declare class ContainerAppsAPIClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ContainerAppsAPIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ContainerAppsAPIClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Get details of a single job execution
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobExecutionName Job execution name.
     * @param options The options parameters.
     */
    jobExecution(resourceGroupName: string, jobName: string, jobExecutionName: string, options?: JobExecutionOptionalParams): Promise<JobExecutionResponse>;
    containerAppsAuthConfigs: ContainerAppsAuthConfigs;
    availableWorkloadProfiles: AvailableWorkloadProfiles;
    billingMeters: BillingMeters;
    connectedEnvironments: ConnectedEnvironments;
    connectedEnvironmentsCertificates: ConnectedEnvironmentsCertificates;
    connectedEnvironmentsDaprComponents: ConnectedEnvironmentsDaprComponents;
    connectedEnvironmentsStorages: ConnectedEnvironmentsStorages;
    containerApps: ContainerApps;
    containerAppsRevisions: ContainerAppsRevisions;
    containerAppsRevisionReplicas: ContainerAppsRevisionReplicas;
    containerAppsDiagnostics: ContainerAppsDiagnostics;
    managedEnvironmentDiagnostics: ManagedEnvironmentDiagnostics;
    managedEnvironmentsDiagnostics: ManagedEnvironmentsDiagnostics;
    operations: Operations;
    jobs: Jobs;
    jobsExecutions: JobsExecutions;
    managedEnvironments: ManagedEnvironments;
    certificates: Certificates;
    managedCertificates: ManagedCertificates;
    namespaces: Namespaces;
    daprComponents: DaprComponents;
    managedEnvironmentsStorages: ManagedEnvironmentsStorages;
    containerAppsSourceControls: ContainerAppsSourceControls;
}

/** Optional parameters. */
export declare interface ContainerAppsAPIClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Interface representing a ContainerAppsAuthConfigs. */
export declare interface ContainerAppsAuthConfigs {
    /**
     * Get the Container App AuthConfigs in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    listByContainerApp(resourceGroupName: string, containerAppName: string, options?: ContainerAppsAuthConfigsListByContainerAppOptionalParams): PagedAsyncIterableIterator<AuthConfig>;
    /**
     * Get a AuthConfig of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param authConfigName Name of the Container App AuthConfig.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, containerAppName: string, authConfigName: string, options?: ContainerAppsAuthConfigsGetOptionalParams): Promise<ContainerAppsAuthConfigsGetResponse>;
    /**
     * Create or update the AuthConfig for a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param authConfigName Name of the Container App AuthConfig.
     * @param authConfigEnvelope Properties used to create a Container App AuthConfig
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, containerAppName: string, authConfigName: string, authConfigEnvelope: AuthConfig, options?: ContainerAppsAuthConfigsCreateOrUpdateOptionalParams): Promise<ContainerAppsAuthConfigsCreateOrUpdateResponse>;
    /**
     * Delete a Container App AuthConfig.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param authConfigName Name of the Container App AuthConfig.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, containerAppName: string, authConfigName: string, options?: ContainerAppsAuthConfigsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ContainerAppsAuthConfigsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContainerAppsAuthConfigsCreateOrUpdateResponse = AuthConfig;

/** Optional parameters. */
export declare interface ContainerAppsAuthConfigsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ContainerAppsAuthConfigsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContainerAppsAuthConfigsGetResponse = AuthConfig;

/** Optional parameters. */
export declare interface ContainerAppsAuthConfigsListByContainerAppNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByContainerAppNext operation. */
export declare type ContainerAppsAuthConfigsListByContainerAppNextResponse = AuthConfigCollection;

/** Optional parameters. */
export declare interface ContainerAppsAuthConfigsListByContainerAppOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByContainerApp operation. */
export declare type ContainerAppsAuthConfigsListByContainerAppResponse = AuthConfigCollection;

/** Optional parameters. */
export declare interface ContainerAppsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContainerAppsCreateOrUpdateResponse = ContainerApp;

/** Defines headers for ContainerApps_delete operation. */
export declare interface ContainerAppsDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ContainerAppsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a ContainerAppsDiagnostics. */
export declare interface ContainerAppsDiagnostics {
    /**
     * Get the list of diagnostics for a given Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App for which detector info is needed.
     * @param options The options parameters.
     */
    listDetectors(resourceGroupName: string, containerAppName: string, options?: ContainerAppsDiagnosticsListDetectorsOptionalParams): PagedAsyncIterableIterator<Diagnostics>;
    /**
     * Get the Revisions for a given Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App for which Revisions are needed.
     * @param options The options parameters.
     */
    listRevisions(resourceGroupName: string, containerAppName: string, options?: ContainerAppsDiagnosticsListRevisionsOptionalParams): PagedAsyncIterableIterator<Revision>;
    /**
     * Get a diagnostics result of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param detectorName Name of the Container App Detector.
     * @param options The options parameters.
     */
    getDetector(resourceGroupName: string, containerAppName: string, detectorName: string, options?: ContainerAppsDiagnosticsGetDetectorOptionalParams): Promise<ContainerAppsDiagnosticsGetDetectorResponse>;
    /**
     * Get a revision of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param revisionName Name of the Container App Revision.
     * @param options The options parameters.
     */
    getRevision(resourceGroupName: string, containerAppName: string, revisionName: string, options?: ContainerAppsDiagnosticsGetRevisionOptionalParams): Promise<ContainerAppsDiagnosticsGetRevisionResponse>;
    /**
     * Get the properties of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    getRoot(resourceGroupName: string, containerAppName: string, options?: ContainerAppsDiagnosticsGetRootOptionalParams): Promise<ContainerAppsDiagnosticsGetRootResponse>;
}

/** Optional parameters. */
export declare interface ContainerAppsDiagnosticsGetDetectorOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDetector operation. */
export declare type ContainerAppsDiagnosticsGetDetectorResponse = Diagnostics;

/** Optional parameters. */
export declare interface ContainerAppsDiagnosticsGetRevisionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRevision operation. */
export declare type ContainerAppsDiagnosticsGetRevisionResponse = Revision;

/** Optional parameters. */
export declare interface ContainerAppsDiagnosticsGetRootOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRoot operation. */
export declare type ContainerAppsDiagnosticsGetRootResponse = ContainerApp;

/** Optional parameters. */
export declare interface ContainerAppsDiagnosticsListDetectorsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDetectorsNext operation. */
export declare type ContainerAppsDiagnosticsListDetectorsNextResponse = DiagnosticsCollection;

/** Optional parameters. */
export declare interface ContainerAppsDiagnosticsListDetectorsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDetectors operation. */
export declare type ContainerAppsDiagnosticsListDetectorsResponse = DiagnosticsCollection;

/** Optional parameters. */
export declare interface ContainerAppsDiagnosticsListRevisionsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRevisionsNext operation. */
export declare type ContainerAppsDiagnosticsListRevisionsNextResponse = RevisionCollection;

/** Optional parameters. */
export declare interface ContainerAppsDiagnosticsListRevisionsOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. */
    filter?: string;
}

/** Contains response data for the listRevisions operation. */
export declare type ContainerAppsDiagnosticsListRevisionsResponse = RevisionCollection;

/** Container App Secret. */
export declare interface ContainerAppSecret {
    /**
     * Secret Name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Secret Value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
    /**
     * Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly identity?: string;
    /**
     * Azure Key Vault URL pointing to the secret referenced by the container app.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyVaultUrl?: string;
}

/** Optional parameters. */
export declare interface ContainerAppsGetAuthTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthToken operation. */
export declare type ContainerAppsGetAuthTokenResponse = ContainerAppAuthToken;

/** Optional parameters. */
export declare interface ContainerAppsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContainerAppsGetResponse = ContainerApp;

/** Optional parameters. */
export declare interface ContainerAppsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ContainerAppsListByResourceGroupNextResponse = ContainerAppCollection;

/** Optional parameters. */
export declare interface ContainerAppsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ContainerAppsListByResourceGroupResponse = ContainerAppCollection;

/** Optional parameters. */
export declare interface ContainerAppsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ContainerAppsListBySubscriptionNextResponse = ContainerAppCollection;

/** Optional parameters. */
export declare interface ContainerAppsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ContainerAppsListBySubscriptionResponse = ContainerAppCollection;

/** Optional parameters. */
export declare interface ContainerAppsListCustomHostNameAnalysisOptionalParams extends coreClient.OperationOptions {
    /** Custom hostname. */
    customHostname?: string;
}

/** Contains response data for the listCustomHostNameAnalysis operation. */
export declare type ContainerAppsListCustomHostNameAnalysisResponse = CustomHostnameAnalysisResult;

/** Optional parameters. */
export declare interface ContainerAppsListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type ContainerAppsListSecretsResponse = SecretsCollection;

/** Interface representing a ContainerAppsRevisionReplicas. */
export declare interface ContainerAppsRevisionReplicas {
    /**
     * Get a replica for a Container App Revision.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param revisionName Name of the Container App Revision.
     * @param replicaName Name of the Container App Revision Replica.
     * @param options The options parameters.
     */
    getReplica(resourceGroupName: string, containerAppName: string, revisionName: string, replicaName: string, options?: ContainerAppsRevisionReplicasGetReplicaOptionalParams): Promise<ContainerAppsRevisionReplicasGetReplicaResponse>;
    /**
     * List replicas for a Container App Revision.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param revisionName Name of the Container App Revision.
     * @param options The options parameters.
     */
    listReplicas(resourceGroupName: string, containerAppName: string, revisionName: string, options?: ContainerAppsRevisionReplicasListReplicasOptionalParams): Promise<ContainerAppsRevisionReplicasListReplicasResponse>;
}

/** Optional parameters. */
export declare interface ContainerAppsRevisionReplicasGetReplicaOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getReplica operation. */
export declare type ContainerAppsRevisionReplicasGetReplicaResponse = Replica;

/** Optional parameters. */
export declare interface ContainerAppsRevisionReplicasListReplicasOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listReplicas operation. */
export declare type ContainerAppsRevisionReplicasListReplicasResponse = ReplicaCollection;

/** Interface representing a ContainerAppsRevisions. */
export declare interface ContainerAppsRevisions {
    /**
     * Get the Revisions for a given Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App for which Revisions are needed.
     * @param options The options parameters.
     */
    listRevisions(resourceGroupName: string, containerAppName: string, options?: ContainerAppsRevisionsListRevisionsOptionalParams): PagedAsyncIterableIterator<Revision>;
    /**
     * Get a revision of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param revisionName Name of the Container App Revision.
     * @param options The options parameters.
     */
    getRevision(resourceGroupName: string, containerAppName: string, revisionName: string, options?: ContainerAppsRevisionsGetRevisionOptionalParams): Promise<ContainerAppsRevisionsGetRevisionResponse>;
    /**
     * Activates a revision for a Container App
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param revisionName Name of the Container App Revision.
     * @param options The options parameters.
     */
    activateRevision(resourceGroupName: string, containerAppName: string, revisionName: string, options?: ContainerAppsRevisionsActivateRevisionOptionalParams): Promise<void>;
    /**
     * Deactivates a revision for a Container App
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param revisionName Name of the Container App Revision.
     * @param options The options parameters.
     */
    deactivateRevision(resourceGroupName: string, containerAppName: string, revisionName: string, options?: ContainerAppsRevisionsDeactivateRevisionOptionalParams): Promise<void>;
    /**
     * Restarts a revision for a Container App
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param revisionName Name of the Container App Revision.
     * @param options The options parameters.
     */
    restartRevision(resourceGroupName: string, containerAppName: string, revisionName: string, options?: ContainerAppsRevisionsRestartRevisionOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ContainerAppsRevisionsActivateRevisionOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ContainerAppsRevisionsDeactivateRevisionOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ContainerAppsRevisionsGetRevisionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRevision operation. */
export declare type ContainerAppsRevisionsGetRevisionResponse = Revision;

/** Optional parameters. */
export declare interface ContainerAppsRevisionsListRevisionsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRevisionsNext operation. */
export declare type ContainerAppsRevisionsListRevisionsNextResponse = RevisionCollection;

/** Optional parameters. */
export declare interface ContainerAppsRevisionsListRevisionsOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. */
    filter?: string;
}

/** Contains response data for the listRevisions operation. */
export declare type ContainerAppsRevisionsListRevisionsResponse = RevisionCollection;

/** Optional parameters. */
export declare interface ContainerAppsRevisionsRestartRevisionOptionalParams extends coreClient.OperationOptions {
}

/** Interface representing a ContainerAppsSourceControls. */
export declare interface ContainerAppsSourceControls {
    /**
     * Get the Container App SourceControls in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param options The options parameters.
     */
    listByContainerApp(resourceGroupName: string, containerAppName: string, options?: ContainerAppsSourceControlsListByContainerAppOptionalParams): PagedAsyncIterableIterator<SourceControl>;
    /**
     * Get a SourceControl of a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param sourceControlName Name of the Container App SourceControl.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, containerAppName: string, sourceControlName: string, options?: ContainerAppsSourceControlsGetOptionalParams): Promise<ContainerAppsSourceControlsGetResponse>;
    /**
     * Create or update the SourceControl for a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param sourceControlName Name of the Container App SourceControl.
     * @param sourceControlEnvelope Properties used to create a Container App SourceControl
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, containerAppName: string, sourceControlName: string, sourceControlEnvelope: SourceControl, options?: ContainerAppsSourceControlsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ContainerAppsSourceControlsCreateOrUpdateResponse>, ContainerAppsSourceControlsCreateOrUpdateResponse>>;
    /**
     * Create or update the SourceControl for a Container App.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param sourceControlName Name of the Container App SourceControl.
     * @param sourceControlEnvelope Properties used to create a Container App SourceControl
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, containerAppName: string, sourceControlName: string, sourceControlEnvelope: SourceControl, options?: ContainerAppsSourceControlsCreateOrUpdateOptionalParams): Promise<ContainerAppsSourceControlsCreateOrUpdateResponse>;
    /**
     * Delete a Container App SourceControl.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param sourceControlName Name of the Container App SourceControl.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, containerAppName: string, sourceControlName: string, options?: ContainerAppsSourceControlsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Container App SourceControl.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param containerAppName Name of the Container App.
     * @param sourceControlName Name of the Container App SourceControl.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, containerAppName: string, sourceControlName: string, options?: ContainerAppsSourceControlsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ContainerAppsSourceControlsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ContainerAppsSourceControlsCreateOrUpdateResponse = SourceControl;

/** Optional parameters. */
export declare interface ContainerAppsSourceControlsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ContainerAppsSourceControlsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ContainerAppsSourceControlsGetResponse = SourceControl;

/** Optional parameters. */
export declare interface ContainerAppsSourceControlsListByContainerAppNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByContainerAppNext operation. */
export declare type ContainerAppsSourceControlsListByContainerAppNextResponse = SourceControlCollection;

/** Optional parameters. */
export declare interface ContainerAppsSourceControlsListByContainerAppOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByContainerApp operation. */
export declare type ContainerAppsSourceControlsListByContainerAppResponse = SourceControlCollection;

/** Defines headers for ContainerApps_start operation. */
export declare interface ContainerAppsStartHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ContainerAppsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the start operation. */
export declare type ContainerAppsStartResponse = ContainerApp;

/** Defines headers for ContainerApps_stop operation. */
export declare interface ContainerAppsStopHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ContainerAppsStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the stop operation. */
export declare type ContainerAppsStopResponse = ContainerApp;

/** Defines headers for ContainerApps_update operation. */
export declare interface ContainerAppsUpdateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ContainerAppsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ContainerAppsUpdateResponse = ContainerApp;

/** Container App container resource requirements. */
export declare interface ContainerResources {
    /** Required CPU in cores, e.g. 0.5 */
    cpu?: number;
    /** Required memory, e.g. "250Mb" */
    memory?: string;
    /**
     * Ephemeral Storage, e.g. "1Gi"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ephemeralStorage?: string;
}

/** The configuration settings of the session cookie's expiration. */
export declare interface CookieExpiration {
    /** The convention used when determining the session cookie's expiration. */
    convention?: CookieExpirationConvention;
    /** The time after the request is made when the session cookie should expire. */
    timeToExpiration?: string;
}

/** Defines values for CookieExpirationConvention. */
export declare type CookieExpirationConvention = "FixedTime" | "IdentityProviderDerived";

/** Cross-Origin-Resource-Sharing policy */
export declare interface CorsPolicy {
    /** Specifies the content for the access-control-allow-origins header */
    allowedOrigins: string[];
    /** Specifies the content for the access-control-allow-methods header */
    allowedMethods?: string[];
    /** Specifies the content for the access-control-allow-headers header */
    allowedHeaders?: string[];
    /** Specifies the content for the access-control-expose-headers header */
    exposeHeaders?: string[];
    /** Specifies the content for the access-control-max-age header */
    maxAge?: number;
    /** Specifies whether the resource allows credentials */
    allowCredentials?: boolean;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Custom Domain of a Container App */
export declare interface CustomDomain {
    /** Hostname. */
    name: string;
    /** Custom Domain binding type. */
    bindingType?: BindingType;
    /** Resource Id of the Certificate to be bound to this hostname. Must exist in the Managed Environment. */
    certificateId?: string;
}

/** Configuration properties for apps environment custom domain */
export declare interface CustomDomainConfiguration {
    /**
     * Id used to verify domain name ownership
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customDomainVerificationId?: string;
    /** Dns suffix for the environment domain */
    dnsSuffix?: string;
    /** PFX or PEM blob */
    certificateValue?: Uint8Array;
    /** Certificate password */
    certificatePassword?: string;
    /**
     * Certificate expiration date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expirationDate?: Date;
    /**
     * Certificate thumbprint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly thumbprint?: string;
    /**
     * Subject name of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subjectName?: string;
}

/** Custom domain analysis. */
export declare interface CustomHostnameAnalysisResult {
    /**
     * Host name that was analyzed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostName?: string;
    /**
     * <code>true</code> if hostname is already verified; otherwise, <code>false</code>.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isHostnameAlreadyVerified?: boolean;
    /**
     * DNS verification test result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customDomainVerificationTest?: DnsVerificationTestResult;
    /**
     * Raw failure information if DNS verification fails.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customDomainVerificationFailureInfo?: CustomHostnameAnalysisResultCustomDomainVerificationFailureInfo;
    /**
     * <code>true</code> if there is a conflict on the Container App's managed environment; otherwise, <code>false</code>.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hasConflictOnManagedEnvironment?: boolean;
    /**
     * <code>true</code> if there is a conflict on the Container App's managed environment level custom domain; otherwise, <code>false</code>.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly conflictWithEnvironmentCustomDomain?: boolean;
    /**
     * Name of the conflicting Container App on the Managed Environment if it's within the same subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly conflictingContainerAppResourceId?: string;
    /** CName records visible for this hostname. */
    cNameRecords?: string[];
    /** TXT records visible for this hostname. */
    txtRecords?: string[];
    /** A records visible for this hostname. */
    aRecords?: string[];
    /** Alternate CName records visible for this hostname. */
    alternateCNameRecords?: string[];
    /** Alternate TXT records visible for this hostname. */
    alternateTxtRecords?: string[];
}

/** Raw failure information if DNS verification fails. */
export declare interface CustomHostnameAnalysisResultCustomDomainVerificationFailureInfo {
    /**
     * Standardized string to programmatically identify the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /** Details or the error */
    details?: CustomHostnameAnalysisResultCustomDomainVerificationFailureInfoDetailsItem[];
}

/** Detailed errors. */
export declare interface CustomHostnameAnalysisResultCustomDomainVerificationFailureInfoDetailsItem {
    /**
     * Standardized string to programmatically identify the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
}

/** The configuration settings of the custom Open ID Connect provider. */
export declare interface CustomOpenIdConnectProvider {
    /** <code>false</code> if the custom Open ID provider provider should not be enabled; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the app registration for the custom Open ID Connect provider. */
    registration?: OpenIdConnectRegistration;
    /** The configuration settings of the login flow of the custom Open ID Connect provider. */
    login?: OpenIdConnectLogin;
}

/** Container App container Custom scaling rule. */
export declare interface CustomScaleRule {
    /**
     * Type of the custom scale rule
     * eg: azure-servicebus, redis etc.
     */
    type?: string;
    /** Metadata properties to describe custom scale rule. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** Authentication secrets for the custom scale rule. */
    auth?: ScaleRuleAuth[];
}

/** Container App Dapr configuration. */
export declare interface Dapr {
    /** Boolean indicating if the Dapr side car is enabled */
    enabled?: boolean;
    /** Dapr application identifier */
    appId?: string;
    /** Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http */
    appProtocol?: AppProtocol;
    /** Tells Dapr which port your application is listening on */
    appPort?: number;
    /** Dapr max size of http header read buffer in KB to handle when sending multi-KB headers. Default is 65KB. */
    httpReadBufferSize?: number;
    /** Increasing max size of request body http and grpc servers parameter in MB to handle uploading of big files. Default is 4 MB. */
    httpMaxRequestSize?: number;
    /** Sets the log level for the Dapr sidecar. Allowed values are debug, info, warn, error. Default is info. */
    logLevel?: LogLevel;
    /** Enables API logging for the Dapr sidecar */
    enableApiLogging?: boolean;
}

/** Dapr Component. */
export declare interface DaprComponent extends ProxyResource {
    /** Component type */
    componentType?: string;
    /** Component version */
    version?: string;
    /** Boolean describing if the component errors are ignores */
    ignoreErrors?: boolean;
    /** Initialization timeout */
    initTimeout?: string;
    /** Collection of secrets used by a Dapr component */
    secrets?: Secret[];
    /** Name of a Dapr component to retrieve component secrets from */
    secretStoreComponent?: string;
    /** Component metadata */
    metadata?: DaprMetadata[];
    /** Names of container apps that can use this Dapr component */
    scopes?: string[];
}

/** Interface representing a DaprComponents. */
export declare interface DaprComponents {
    /**
     * Get the Dapr Components for a managed environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, environmentName: string, options?: DaprComponentsListOptionalParams): PagedAsyncIterableIterator<DaprComponent>;
    /**
     * Get a dapr component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param componentName Name of the Dapr Component.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, componentName: string, options?: DaprComponentsGetOptionalParams): Promise<DaprComponentsGetResponse>;
    /**
     * Creates or updates a Dapr Component in a Managed Environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param componentName Name of the Dapr Component.
     * @param daprComponentEnvelope Configuration details of the Dapr Component.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, environmentName: string, componentName: string, daprComponentEnvelope: DaprComponent, options?: DaprComponentsCreateOrUpdateOptionalParams): Promise<DaprComponentsCreateOrUpdateResponse>;
    /**
     * Delete a Dapr Component from a Managed Environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param componentName Name of the Dapr Component.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, componentName: string, options?: DaprComponentsDeleteOptionalParams): Promise<void>;
    /**
     * List secrets for a dapr component
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param componentName Name of the Dapr Component.
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, environmentName: string, componentName: string, options?: DaprComponentsListSecretsOptionalParams): Promise<DaprComponentsListSecretsResponse>;
}

/** Dapr Components ARM resource. */
export declare interface DaprComponentsCollection {
    /** Collection of resources. */
    value: DaprComponent[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface DaprComponentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DaprComponentsCreateOrUpdateResponse = DaprComponent;

/** Optional parameters. */
export declare interface DaprComponentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DaprComponentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DaprComponentsGetResponse = DaprComponent;

/** Optional parameters. */
export declare interface DaprComponentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DaprComponentsListNextResponse = DaprComponentsCollection;

/** Optional parameters. */
export declare interface DaprComponentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DaprComponentsListResponse = DaprComponentsCollection;

/** Optional parameters. */
export declare interface DaprComponentsListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type DaprComponentsListSecretsResponse = DaprSecretsCollection;

/** Configuration properties Dapr component */
export declare interface DaprConfiguration {
    /**
     * The version of Dapr
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
}

/** Dapr component metadata. */
export declare interface DaprMetadata {
    /** Metadata property name. */
    name?: string;
    /** Metadata property value. */
    value?: string;
    /** Name of the Dapr Component secret from which to pull the metadata property value. */
    secretRef?: string;
}

/** Dapr component Secret for ListSecrets Action */
export declare interface DaprSecret {
    /**
     * Secret Name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Secret Value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** Dapr component Secrets Collection for ListSecrets Action. */
export declare interface DaprSecretsCollection {
    /** Collection of secrets used by a Dapr component */
    value: DaprSecret[];
}

/** The configuration settings of the Azure Active Directory default authorization policy. */
export declare interface DefaultAuthorizationPolicy {
    /** The configuration settings of the Azure Active Directory allowed principals. */
    allowedPrincipals?: AllowedPrincipals;
    /** The configuration settings of the Azure Active Directory allowed applications. */
    allowedApplications?: string[];
}

/** App Service error response. */
export declare interface DefaultErrorResponse {
    /**
     * Error model.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: DefaultErrorResponseError;
}

/** Error model. */
export declare interface DefaultErrorResponseError {
    /**
     * Standardized string to programmatically identify the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /** Details or the error */
    details?: DefaultErrorResponseErrorDetailsItem[];
    /**
     * More information to debug error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly innererror?: string;
}

/** Detailed errors. */
export declare interface DefaultErrorResponseErrorDetailsItem {
    /**
     * Standardized string to programmatically identify the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Detailed error description and debugging information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
}

/** Details of a diagnostics data provider */
export declare interface DiagnosticDataProviderMetadata {
    /** Name of data provider */
    providerName?: string;
    /** Collection of properties */
    propertyBag?: DiagnosticDataProviderMetadataPropertyBagItem[];
}

/** Property details */
export declare interface DiagnosticDataProviderMetadataPropertyBagItem {
    /** Property name */
    name?: string;
    /** Property value */
    value?: string;
}

/** Diagnostics data column */
export declare interface DiagnosticDataTableResponseColumn {
    /** Column name */
    columnName?: string;
    /** Data type of the column */
    dataType?: string;
    /** Column type */
    columnType?: string;
}

/** Diagnostics data table */
export declare interface DiagnosticDataTableResponseObject {
    /** Table name */
    tableName?: string;
    /** Columns in the table */
    columns?: DiagnosticDataTableResponseColumn[];
    /** Rows in the table */
    rows?: Record<string, unknown>[];
}

/** Rendering details of a diagnostics table */
export declare interface DiagnosticRendering {
    /** Rendering type */
    type?: number;
    /** Title of the table */
    title?: string;
    /** Description of the table */
    description?: string;
    /** Flag if the table should be rendered */
    isVisible?: boolean;
}

/** Diagnostics data for a resource. */
export declare interface Diagnostics extends ProxyResource {
    /** Diagnostics resource specific properties */
    properties?: DiagnosticsProperties;
}

/** Diagnostics data collection for a resource. */
export declare interface DiagnosticsCollection {
    /** Collection of diagnostic data. */
    value: Diagnostics[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Diagnostics data returned from a detector */
export declare interface DiagnosticsDataApiResponse {
    /** Table response */
    table?: DiagnosticDataTableResponseObject;
    /** Details of the table response */
    renderingProperties?: DiagnosticRendering;
}

/** Metadata of the diagnostics response */
export declare interface DiagnosticsDefinition {
    /**
     * Unique detector name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Display Name of the detector
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Details of the diagnostics info
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Authors' names of the detector
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly author?: string;
    /**
     * Category of the detector
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: string;
    /** List of support topics */
    supportTopicList?: DiagnosticSupportTopic[];
    /** List of analysis types */
    analysisTypes?: string[];
    /**
     * Authors' names of the detector
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Authors' names of the detector
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly score?: number;
}

/** Diagnostics resource specific properties */
export declare interface DiagnosticsProperties {
    /** Metadata of the diagnostics response. */
    metadata?: DiagnosticsDefinition;
    /** Set of data collections associated with the response. */
    dataset?: DiagnosticsDataApiResponse[];
    /** Status of the diagnostics response. */
    status?: DiagnosticsStatus;
    /** List of data providers' metadata. */
    dataProviderMetadata?: DiagnosticDataProviderMetadata;
}

/** Rendering details of a diagnostics table */
export declare interface DiagnosticsStatus {
    /** Diagnostic message */
    message?: string;
    /** Status */
    statusId?: number;
}

/** Support topic information */
export declare interface DiagnosticSupportTopic {
    /**
     * Unique topic identifier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * PES identifier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pesId?: string;
}

/** Defines values for DnsVerificationTestResult. */
export declare type DnsVerificationTestResult = "Passed" | "Failed" | "Skipped";

/** Environment Auth Token. */
export declare interface EnvironmentAuthToken extends TrackedResource {
    /**
     * Auth token value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly token?: string;
    /**
     * Token expiration date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expires?: Date;
}

/**
 * Defines values for EnvironmentProvisioningState. \
 * {@link KnownEnvironmentProvisioningState} can be used interchangeably with EnvironmentProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Waiting** \
 * **InitializationInProgress** \
 * **InfrastructureSetupInProgress** \
 * **InfrastructureSetupComplete** \
 * **ScheduledForDelete** \
 * **UpgradeRequested** \
 * **UpgradeFailed**
 */
export declare type EnvironmentProvisioningState = string;

/** Container App container environment variable. */
export declare interface EnvironmentVar {
    /** Environment variable name. */
    name?: string;
    /** Non-secret environment variable value. */
    value?: string;
    /** Name of the Container App secret from which to pull the environment variable value. */
    secretRef?: string;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** The complex type of the extended location. */
export declare interface ExtendedLocation {
    /** The name of the extended location. */
    name?: string;
    /** The type of the extended location. */
    type?: ExtendedLocationTypes;
}

/**
 * Defines values for ExtendedLocationTypes. \
 * {@link KnownExtendedLocationTypes} can be used interchangeably with ExtendedLocationTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CustomLocation**
 */
export declare type ExtendedLocationTypes = string;

/** The configuration settings of the Facebook provider. */
export declare interface Facebook {
    /** <code>false</code> if the Facebook provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the app registration for the Facebook provider. */
    registration?: AppRegistration;
    /** The version of the Facebook api to be used while logging in. */
    graphApiVersion?: string;
    /** The configuration settings of the login flow. */
    login?: LoginScopes;
}

/** The configuration settings of a forward proxy used to make the requests. */
export declare interface ForwardProxy {
    /** The convention used to determine the url of the request made. */
    convention?: ForwardProxyConvention;
    /** The name of the header containing the host of the request. */
    customHostHeaderName?: string;
    /** The name of the header containing the scheme of the request. */
    customProtoHeaderName?: string;
}

/** Defines values for ForwardProxyConvention. */
export declare type ForwardProxyConvention = "NoProxy" | "Standard" | "Custom";

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The configuration settings of the GitHub provider. */
export declare interface GitHub {
    /** <code>false</code> if the GitHub provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the app registration for the GitHub provider. */
    registration?: ClientRegistration;
    /** The configuration settings of the login flow. */
    login?: LoginScopes;
}

/** Configuration properties that define the mutable settings of a Container App SourceControl */
export declare interface GithubActionConfiguration {
    /** Registry configurations. */
    registryInfo?: RegistryInfo;
    /** AzureCredentials configurations. */
    azureCredentials?: AzureCredentials;
    /** Context path */
    contextPath?: string;
    /** One time Github PAT to configure github environment */
    githubPersonalAccessToken?: string;
    /** Image name */
    image?: string;
    /** Code or Image */
    publishType?: string;
    /** Operation system */
    os?: string;
    /** Runtime stack */
    runtimeStack?: string;
    /** Runtime version */
    runtimeVersion?: string;
}

/** The configuration settings that determines the validation flow of users using ContainerApp Service Authentication/Authorization. */
export declare interface GlobalValidation {
    /** The action to take when an unauthenticated client attempts to access the app. */
    unauthenticatedClientAction?: UnauthenticatedClientActionV2;
    /**
     * The default authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the unauthenticated client
     * action is set to "RedirectToLoginPage".
     */
    redirectToProvider?: string;
    /** The paths for which unauthenticated flow would not be redirected to the login page. */
    excludedPaths?: string[];
}

/** The configuration settings of the Google provider. */
export declare interface Google {
    /** <code>false</code> if the Google provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the app registration for the Google provider. */
    registration?: ClientRegistration;
    /** The configuration settings of the login flow. */
    login?: LoginScopes;
    /** The configuration settings of the Azure Active Directory token validation flow. */
    validation?: AllowedAudiencesValidation;
}

/** Container App container Http scaling rule. */
export declare interface HttpScaleRule {
    /** Metadata properties to describe http scale rule. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** Authentication secrets for the custom scale rule. */
    auth?: ScaleRuleAuth[];
}

/** The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization. */
export declare interface HttpSettings {
    /** <code>false</code> if the authentication/authorization responses not having the HTTPS scheme are permissible; otherwise, <code>true</code>. */
    requireHttps?: boolean;
    /** The configuration settings of the paths HTTP requests. */
    routes?: HttpSettingsRoutes;
    /** The configuration settings of a forward proxy used to make the requests. */
    forwardProxy?: ForwardProxy;
}

/** The configuration settings of the paths HTTP requests. */
export declare interface HttpSettingsRoutes {
    /** The prefix that should precede all the authentication/authorization paths. */
    apiPrefix?: string;
}

/** The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization. */
export declare interface IdentityProviders {
    /** The configuration settings of the Azure Active directory provider. */
    azureActiveDirectory?: AzureActiveDirectory;
    /** The configuration settings of the Facebook provider. */
    facebook?: Facebook;
    /** The configuration settings of the GitHub provider. */
    gitHub?: GitHub;
    /** The configuration settings of the Google provider. */
    google?: Google;
    /** The configuration settings of the Twitter provider. */
    twitter?: Twitter;
    /** The configuration settings of the Apple provider. */
    apple?: Apple;
    /** The configuration settings of the Azure Static Web Apps provider. */
    azureStaticWebApps?: AzureStaticWebApps;
    /**
     * The map of the name of the alias of each custom Open ID Connect provider to the
     * configuration settings of the custom Open ID Connect provider.
     */
    customOpenIdConnectProviders?: {
        [propertyName: string]: CustomOpenIdConnectProvider;
    };
}

/** Container App Ingress configuration. */
export declare interface Ingress {
    /**
     * Hostname.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /** Bool indicating if app exposes an external http endpoint */
    external?: boolean;
    /** Target Port in containers for traffic from ingress */
    targetPort?: number;
    /** Exposed Port in containers for TCP traffic from ingress */
    exposedPort?: number;
    /** Ingress transport protocol */
    transport?: IngressTransportMethod;
    /** Traffic weights for app's revisions */
    traffic?: TrafficWeight[];
    /** custom domain bindings for Container Apps' hostnames. */
    customDomains?: CustomDomain[];
    /** Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections */
    allowInsecure?: boolean;
    /** Rules to restrict incoming IP address. */
    ipSecurityRestrictions?: IpSecurityRestrictionRule[];
    /** Sticky Sessions for Single Revision Mode */
    stickySessions?: IngressStickySessions;
    /** Client certificate mode for mTLS authentication. Ignore indicates server drops client certificate on forwarding. Accept indicates server forwards client certificate but does not require a client certificate. Require indicates server requires a client certificate. */
    clientCertificateMode?: IngressClientCertificateMode;
    /** CORS policy for container app */
    corsPolicy?: CorsPolicy;
}

/**
 * Defines values for IngressClientCertificateMode. \
 * {@link KnownIngressClientCertificateMode} can be used interchangeably with IngressClientCertificateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ignore** \
 * **accept** \
 * **require**
 */
export declare type IngressClientCertificateMode = string;

/** Sticky Sessions for Single Revision Mode */
export declare interface IngressStickySessions {
    /** Sticky Session Affinity */
    affinity?: Affinity;
}

/**
 * Defines values for IngressTransportMethod. \
 * {@link KnownIngressTransportMethod} can be used interchangeably with IngressTransportMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **auto** \
 * **http** \
 * **http2** \
 * **tcp**
 */
export declare type IngressTransportMethod = string;

/** Container App init container definition */
export declare interface InitContainer extends BaseContainer {
}

/** Rule to restrict incoming IP address. */
export declare interface IpSecurityRestrictionRule {
    /** Name for the IP restriction rule. */
    name: string;
    /** Describe the IP restriction rule that is being sent to the container-app. This is an optional field. */
    description?: string;
    /** CIDR notation to match incoming IP address */
    ipAddressRange: string;
    /** Allow or Deny rules to determine for incoming IP. Note: Rules can only consist of ALL Allow or ALL Deny */
    action: Action;
}

/** Container App Job */
export declare interface Job extends TrackedResource {
    /** Managed identities needed by a container app job to interact with other Azure services to not maintain any secrets or credentials in code. */
    identity?: ManagedServiceIdentity;
    /**
     * Provisioning state of the Container Apps Job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: JobProvisioningState;
    /** Resource ID of environment. */
    environmentId?: string;
    /** Workload profile name to pin for container apps job execution. */
    workloadProfileName?: string;
    /** Container Apps Job configuration properties. */
    configuration?: JobConfiguration;
    /** Container Apps job definition. */
    template?: JobTemplate;
    /**
     * Outbound IP Addresses of a container apps job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outboundIpAddresses?: string[];
    /**
     * The endpoint of the eventstream of the container apps job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventStreamEndpoint?: string;
}

/** Non versioned Container Apps Job configuration properties */
export declare interface JobConfiguration {
    /** Collection of secrets used by a Container Apps Job */
    secrets?: Secret[];
    /** Trigger type of the job */
    triggerType: TriggerType;
    /** Maximum number of seconds a replica is allowed to run. */
    replicaTimeout: number;
    /** Maximum number of retries before failing the job. */
    replicaRetryLimit?: number;
    /** Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default */
    manualTriggerConfig?: JobConfigurationManualTriggerConfig;
    /** Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default */
    scheduleTriggerConfig?: JobConfigurationScheduleTriggerConfig;
    /** Trigger configuration of an event driven job. */
    eventTriggerConfig?: JobConfigurationEventTriggerConfig;
    /** Collection of private container registry credentials used by a Container apps job */
    registries?: RegistryCredentials[];
}

/** Trigger configuration of an event driven job. */
export declare interface JobConfigurationEventTriggerConfig {
    /** Minimum number of successful replica completions before overall job completion. */
    replicaCompletionCount?: number;
    /** Number of parallel replicas of a job that can run at a given time. */
    parallelism?: number;
    /** Scaling configurations for event driven jobs. */
    scale?: JobScale;
}

/** Manual trigger configuration for a single execution job. Properties replicaCompletionCount and parallelism would be set to 1 by default */
export declare interface JobConfigurationManualTriggerConfig {
    /** Minimum number of successful replica completions before overall job completion. */
    replicaCompletionCount?: number;
    /** Number of parallel replicas of a job that can run at a given time. */
    parallelism?: number;
}

/** Cron formatted repeating trigger schedule ("* * * * *") for cronjobs. Properties completions and parallelism would be set to 1 by default */
export declare interface JobConfigurationScheduleTriggerConfig {
    /** Minimum number of successful replica completions before overall job completion. */
    replicaCompletionCount?: number;
    /** Cron formatted repeating schedule ("* * * * *") of a Cron Job. */
    cronExpression: string;
    /** Number of parallel replicas of a job that can run at a given time. */
    parallelism?: number;
}

/** Container Apps Job execution. */
export declare interface JobExecution {
    /** Job execution Name. */
    name?: string;
    /** Job execution Id. */
    id?: string;
    /** Job Type. */
    type?: string;
    /**
     * Current running State of the job
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: JobExecutionRunningState;
    /** Job execution start time. */
    startTime?: Date;
    /** Job execution end time. */
    endTime?: Date;
    /** Job's execution container. */
    template?: JobExecutionTemplate;
}

/** Container App's Job execution name. */
export declare interface JobExecutionBase {
    /** Job execution name. */
    name?: string;
    /** Job execution Id. */
    id?: string;
}

/** Container Apps Jobs execution container definition. */
export declare interface JobExecutionContainer {
    /** Container image tag. */
    image?: string;
    /** Custom container name. */
    name?: string;
    /** Container start command. */
    command?: string[];
    /** Container start command arguments. */
    args?: string[];
    /** Container environment variables. */
    env?: EnvironmentVar[];
    /** Container resource requirements. */
    resources?: ContainerResources;
}

/** Container App executions names list. */
export declare interface JobExecutionNamesCollection {
    /** Collection of resources. */
    value: JobExecutionBase[];
}

/** Optional parameters. */
export declare interface JobExecutionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the jobExecution operation. */
export declare type JobExecutionResponse = JobExecution;

/**
 * Defines values for JobExecutionRunningState. \
 * {@link KnownJobExecutionRunningState} can be used interchangeably with JobExecutionRunningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Processing** \
 * **Stopped** \
 * **Degraded** \
 * **Failed** \
 * **Unknown** \
 * **Succeeded**
 */
export declare type JobExecutionRunningState = string;

/** Job's execution template, containing container configuration for a job's execution */
export declare interface JobExecutionTemplate {
    /** List of container definitions for the Container Apps Job. */
    containers?: JobExecutionContainer[];
    /** List of specialized containers that run before job containers. */
    initContainers?: JobExecutionContainer[];
}

/** Container Apps Job resource specific properties. */
export declare interface JobPatchProperties {
    /** Managed identities needed by a container app job to interact with other Azure services to not maintain any secrets or credentials in code. */
    identity?: ManagedServiceIdentity;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    properties?: JobPatchPropertiesProperties;
}

export declare interface JobPatchPropertiesProperties {
    /** Resource ID of environment. */
    environmentId?: string;
    /** Container Apps Job configuration properties. */
    configuration?: JobConfiguration;
    /** Container Apps job definition. */
    template?: JobTemplate;
    /** Outbound IP Addresses of a container apps job. */
    outboundIpAddresses?: string[];
    /** The endpoint of the eventstream of the container apps job. */
    eventStreamEndpoint?: string;
}

/**
 * Defines values for JobProvisioningState. \
 * {@link KnownJobProvisioningState} can be used interchangeably with JobProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleting**
 */
export declare type JobProvisioningState = string;

/** Interface representing a Jobs. */
export declare interface Jobs {
    /**
     * Get the Container Apps Jobs in a given subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: JobsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Job>;
    /**
     * Get the Container Apps Jobs in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: JobsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Job>;
    /**
     * Get the properties of a Container Apps Job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, jobName: string, options?: JobsGetOptionalParams): Promise<JobsGetResponse>;
    /**
     * Create or Update a Container Apps Job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobEnvelope Properties used to create a container apps job
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, jobName: string, jobEnvelope: Job, options?: JobsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<JobsCreateOrUpdateResponse>, JobsCreateOrUpdateResponse>>;
    /**
     * Create or Update a Container Apps Job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobEnvelope Properties used to create a container apps job
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, jobName: string, jobEnvelope: Job, options?: JobsCreateOrUpdateOptionalParams): Promise<JobsCreateOrUpdateResponse>;
    /**
     * Delete a Container Apps Job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, jobName: string, options?: JobsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Container Apps Job.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, jobName: string, options?: JobsDeleteOptionalParams): Promise<void>;
    /**
     * Patches a Container Apps Job using JSON Merge Patch
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobEnvelope Properties used to create a container apps job
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, jobName: string, jobEnvelope: JobPatchProperties, options?: JobsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<JobsUpdateResponse>, JobsUpdateResponse>>;
    /**
     * Patches a Container Apps Job using JSON Merge Patch
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobEnvelope Properties used to create a container apps job
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, jobName: string, jobEnvelope: JobPatchProperties, options?: JobsUpdateOptionalParams): Promise<JobsUpdateResponse>;
    /**
     * Start a Container Apps Job
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, jobName: string, options?: JobsStartOptionalParams): Promise<SimplePollerLike<OperationState<JobsStartResponse>, JobsStartResponse>>;
    /**
     * Start a Container Apps Job
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, jobName: string, options?: JobsStartOptionalParams): Promise<JobsStartResponse>;
    /**
     * Terminates execution of a running container apps job
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobExecutionName Job execution name.
     * @param options The options parameters.
     */
    beginStopExecution(resourceGroupName: string, jobName: string, jobExecutionName: string, options?: JobsStopExecutionOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Terminates execution of a running container apps job
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobExecutionName Job execution name.
     * @param options The options parameters.
     */
    beginStopExecutionAndWait(resourceGroupName: string, jobName: string, jobExecutionName: string, options?: JobsStopExecutionOptionalParams): Promise<void>;
    /**
     * Terminates execution of a running container apps job
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    beginStopMultipleExecutions(resourceGroupName: string, jobName: string, options?: JobsStopMultipleExecutionsOptionalParams): Promise<SimplePollerLike<OperationState<JobsStopMultipleExecutionsResponse>, JobsStopMultipleExecutionsResponse>>;
    /**
     * Terminates execution of a running container apps job
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    beginStopMultipleExecutionsAndWait(resourceGroupName: string, jobName: string, options?: JobsStopMultipleExecutionsOptionalParams): Promise<JobsStopMultipleExecutionsResponse>;
    /**
     * List secrets for a container apps job
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    listSecrets(resourceGroupName: string, jobName: string, options?: JobsListSecretsOptionalParams): Promise<JobsListSecretsResponse>;
}

/** Scaling configurations for event driven jobs. */
export declare interface JobScale {
    /** Interval to check each event source in seconds. Defaults to 30s */
    pollingInterval?: number;
    /** Minimum number of job executions that are created for a trigger, default 0 */
    minExecutions?: number;
    /** Maximum number of job executions that are created for a trigger, default 100. */
    maxExecutions?: number;
    /** Scaling rules. */
    rules?: JobScaleRule[];
}

/** Scaling rule. */
export declare interface JobScaleRule {
    /** Scale Rule Name */
    name?: string;
    /**
     * Type of the scale rule
     * eg: azure-servicebus, redis etc.
     */
    type?: string;
    /** Metadata properties to describe the scale rule. */
    metadata?: Record<string, unknown>;
    /** Authentication secrets for the scale rule. */
    auth?: ScaleRuleAuth[];
}

/** Container Apps Jobs collection ARM resource. */
export declare interface JobsCollection {
    /** Collection of resources. */
    value: Job[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface JobsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type JobsCreateOrUpdateResponse = Job;

/** Defines headers for Jobs_delete operation. */
export declare interface JobsDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface JobsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Container Apps Job Secrets Collection ARM resource. */
export declare interface JobSecretsCollection {
    /** Collection of resources. */
    value: Secret[];
}

/** Interface representing a JobsExecutions. */
export declare interface JobsExecutions {
    /**
     * Get a Container Apps Job's executions
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, jobName: string, options?: JobsExecutionsListOptionalParams): PagedAsyncIterableIterator<JobExecution>;
}

/** Optional parameters. */
export declare interface JobsExecutionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type JobsExecutionsListNextResponse = ContainerAppJobExecutions;

/** Optional parameters. */
export declare interface JobsExecutionsListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type JobsExecutionsListResponse = ContainerAppJobExecutions;

/** Optional parameters. */
export declare interface JobsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type JobsGetResponse = Job;

/** Optional parameters. */
export declare interface JobsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type JobsListByResourceGroupNextResponse = JobsCollection;

/** Optional parameters. */
export declare interface JobsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type JobsListByResourceGroupResponse = JobsCollection;

/** Optional parameters. */
export declare interface JobsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type JobsListBySubscriptionNextResponse = JobsCollection;

/** Optional parameters. */
export declare interface JobsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type JobsListBySubscriptionResponse = JobsCollection;

/** Optional parameters. */
export declare interface JobsListSecretsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSecrets operation. */
export declare type JobsListSecretsResponse = JobSecretsCollection;

/** Defines headers for Jobs_start operation. */
export declare interface JobsStartHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface JobsStartOptionalParams extends coreClient.OperationOptions {
    /** Properties used to start a job execution. */
    template?: JobExecutionTemplate;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the start operation. */
export declare type JobsStartResponse = JobExecutionBase;

/** Defines headers for Jobs_stopExecution operation. */
export declare interface JobsStopExecutionHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface JobsStopExecutionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Jobs_stopMultipleExecutions operation. */
export declare interface JobsStopMultipleExecutionsHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface JobsStopMultipleExecutionsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the stopMultipleExecutions operation. */
export declare type JobsStopMultipleExecutionsResponse = ContainerAppJobExecutions;

/** Defines headers for Jobs_update operation. */
export declare interface JobsUpdateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface JobsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type JobsUpdateResponse = Job;

/** Container Apps Job versioned application definition. Defines the desired state of an immutable revision. Any changes to this section Will result in a new revision being created */
export declare interface JobTemplate {
    /** List of specialized containers that run before app containers. */
    initContainers?: InitContainer[];
    /** List of container definitions for the Container App. */
    containers?: Container[];
    /** List of volume definitions for the Container App. */
    volumes?: Volume[];
}

/** The configuration settings of the checks that should be made while validating the JWT Claims. */
export declare interface JwtClaimChecks {
    /** The list of the allowed groups. */
    allowedGroups?: string[];
    /** The list of the allowed client applications. */
    allowedClientApplications?: string[];
}

/** Configuration properties Keda component */
export declare interface KedaConfiguration {
    /**
     * The version of Keda
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
}

/** Known values of {@link AccessMode} that the service accepts. */
export declare enum KnownAccessMode {
    /** ReadOnly */
    ReadOnly = "ReadOnly",
    /** ReadWrite */
    ReadWrite = "ReadWrite"
}

/** Known values of {@link Action} that the service accepts. */
export declare enum KnownAction {
    /** Allow */
    Allow = "Allow",
    /** Deny */
    Deny = "Deny"
}

/** Known values of {@link ActiveRevisionsMode} that the service accepts. */
export declare enum KnownActiveRevisionsMode {
    /** Multiple */
    Multiple = "Multiple",
    /** Single */
    Single = "Single"
}

/** Known values of {@link Affinity} that the service accepts. */
export declare enum KnownAffinity {
    /** Sticky */
    Sticky = "sticky",
    /** None */
    None = "none"
}

/** Known values of {@link Applicability} that the service accepts. */
export declare enum KnownApplicability {
    /** LocationDefault */
    LocationDefault = "LocationDefault",
    /** Custom */
    Custom = "Custom"
}

/** Known values of {@link AppProtocol} that the service accepts. */
export declare enum KnownAppProtocol {
    /** Http */
    Http = "http",
    /** Grpc */
    Grpc = "grpc"
}

/** Known values of {@link BindingType} that the service accepts. */
export declare enum KnownBindingType {
    /** Disabled */
    Disabled = "Disabled",
    /** SniEnabled */
    SniEnabled = "SniEnabled"
}

/** Known values of {@link CertificateProvisioningState} that the service accepts. */
export declare enum KnownCertificateProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** DeleteFailed */
    DeleteFailed = "DeleteFailed",
    /** Pending */
    Pending = "Pending"
}

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export declare enum KnownCheckNameAvailabilityReason {
    /** Invalid */
    Invalid = "Invalid",
    /** AlreadyExists */
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link ConnectedEnvironmentProvisioningState} that the service accepts. */
export declare enum KnownConnectedEnvironmentProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Waiting */
    Waiting = "Waiting",
    /** InitializationInProgress */
    InitializationInProgress = "InitializationInProgress",
    /** InfrastructureSetupInProgress */
    InfrastructureSetupInProgress = "InfrastructureSetupInProgress",
    /** InfrastructureSetupComplete */
    InfrastructureSetupComplete = "InfrastructureSetupComplete",
    /** ScheduledForDelete */
    ScheduledForDelete = "ScheduledForDelete"
}

/** Known values of {@link ContainerAppContainerRunningState} that the service accepts. */
export declare enum KnownContainerAppContainerRunningState {
    /** Running */
    Running = "Running",
    /** Terminated */
    Terminated = "Terminated",
    /** Waiting */
    Waiting = "Waiting"
}

/** Known values of {@link ContainerAppProvisioningState} that the service accepts. */
export declare enum KnownContainerAppProvisioningState {
    /** InProgress */
    InProgress = "InProgress",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link ContainerAppReplicaRunningState} that the service accepts. */
export declare enum KnownContainerAppReplicaRunningState {
    /** Running */
    Running = "Running",
    /** NotRunning */
    NotRunning = "NotRunning",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link EnvironmentProvisioningState} that the service accepts. */
export declare enum KnownEnvironmentProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Waiting */
    Waiting = "Waiting",
    /** InitializationInProgress */
    InitializationInProgress = "InitializationInProgress",
    /** InfrastructureSetupInProgress */
    InfrastructureSetupInProgress = "InfrastructureSetupInProgress",
    /** InfrastructureSetupComplete */
    InfrastructureSetupComplete = "InfrastructureSetupComplete",
    /** ScheduledForDelete */
    ScheduledForDelete = "ScheduledForDelete",
    /** UpgradeRequested */
    UpgradeRequested = "UpgradeRequested",
    /** UpgradeFailed */
    UpgradeFailed = "UpgradeFailed"
}

/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export declare enum KnownExtendedLocationTypes {
    /** CustomLocation */
    CustomLocation = "CustomLocation"
}

/** Known values of {@link IngressClientCertificateMode} that the service accepts. */
export declare enum KnownIngressClientCertificateMode {
    /** Ignore */
    Ignore = "ignore",
    /** Accept */
    Accept = "accept",
    /** Require */
    Require = "require"
}

/** Known values of {@link IngressTransportMethod} that the service accepts. */
export declare enum KnownIngressTransportMethod {
    /** Auto */
    Auto = "auto",
    /** Http */
    Http = "http",
    /** Http2 */
    Http2 = "http2",
    /** Tcp */
    Tcp = "tcp"
}

/** Known values of {@link JobExecutionRunningState} that the service accepts. */
export declare enum KnownJobExecutionRunningState {
    /** Running */
    Running = "Running",
    /** Processing */
    Processing = "Processing",
    /** Stopped */
    Stopped = "Stopped",
    /** Degraded */
    Degraded = "Degraded",
    /** Failed */
    Failed = "Failed",
    /** Unknown */
    Unknown = "Unknown",
    /** Succeeded */
    Succeeded = "Succeeded"
}

/** Known values of {@link JobProvisioningState} that the service accepts. */
export declare enum KnownJobProvisioningState {
    /** InProgress */
    InProgress = "InProgress",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link LogLevel} that the service accepts. */
export declare enum KnownLogLevel {
    /** Info */
    Info = "info",
    /** Debug */
    Debug = "debug",
    /** Warn */
    Warn = "warn",
    /** Error */
    Error = "error"
}

/** Known values of {@link ManagedCertificateDomainControlValidation} that the service accepts. */
export declare enum KnownManagedCertificateDomainControlValidation {
    /** Cname */
    Cname = "CNAME",
    /** Http */
    Http = "HTTP",
    /** TXT */
    TXT = "TXT"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/** Known values of {@link RevisionHealthState} that the service accepts. */
export declare enum KnownRevisionHealthState {
    /** Healthy */
    Healthy = "Healthy",
    /** Unhealthy */
    Unhealthy = "Unhealthy",
    /** None */
    None = "None"
}

/** Known values of {@link RevisionProvisioningState} that the service accepts. */
export declare enum KnownRevisionProvisioningState {
    /** Provisioning */
    Provisioning = "Provisioning",
    /** Provisioned */
    Provisioned = "Provisioned",
    /** Failed */
    Failed = "Failed",
    /** Deprovisioning */
    Deprovisioning = "Deprovisioning",
    /** Deprovisioned */
    Deprovisioned = "Deprovisioned"
}

/** Known values of {@link RevisionRunningState} that the service accepts. */
export declare enum KnownRevisionRunningState {
    /** Running */
    Running = "Running",
    /** Processing */
    Processing = "Processing",
    /** Stopped */
    Stopped = "Stopped",
    /** Degraded */
    Degraded = "Degraded",
    /** Failed */
    Failed = "Failed",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link Scheme} that the service accepts. */
export declare enum KnownScheme {
    /** Http */
    Http = "HTTP",
    /** Https */
    Https = "HTTPS"
}

/** Known values of {@link SourceControlOperationState} that the service accepts. */
export declare enum KnownSourceControlOperationState {
    /** InProgress */
    InProgress = "InProgress",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link StorageType} that the service accepts. */
export declare enum KnownStorageType {
    /** AzureFile */
    AzureFile = "AzureFile",
    /** EmptyDir */
    EmptyDir = "EmptyDir",
    /** Secret */
    Secret = "Secret"
}

/** Known values of {@link TriggerType} that the service accepts. */
export declare enum KnownTriggerType {
    /** Schedule */
    Schedule = "Schedule",
    /** Event */
    Event = "Event",
    /** Manual */
    Manual = "Manual"
}

/** Known values of {@link Type} that the service accepts. */
export declare enum KnownType {
    /** Liveness */
    Liveness = "Liveness",
    /** Readiness */
    Readiness = "Readiness",
    /** Startup */
    Startup = "Startup"
}

/** Log Analytics configuration, must only be provided when destination is configured as 'log-analytics' */
export declare interface LogAnalyticsConfiguration {
    /** Log analytics customer id */
    customerId?: string;
    /** Log analytics customer key */
    sharedKey?: string;
}

/** The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization. */
export declare interface Login {
    /** The routes that specify the endpoints used for login and logout requests. */
    routes?: LoginRoutes;
    /** <code>true</code> if the fragments from the request are preserved after the login request is made; otherwise, <code>false</code>. */
    preserveUrlFragmentsForLogins?: boolean;
    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     */
    allowedExternalRedirectUrls?: string[];
    /** The configuration settings of the session cookie's expiration. */
    cookieExpiration?: CookieExpiration;
    /** The configuration settings of the nonce used in the login flow. */
    nonce?: Nonce;
}

/** The routes that specify the endpoints used for login and logout requests. */
export declare interface LoginRoutes {
    /** The endpoint at which a logout request should be made. */
    logoutEndpoint?: string;
}

/** The configuration settings of the login flow, including the scopes that should be requested. */
export declare interface LoginScopes {
    /** A list of the scopes that should be requested while authenticating. */
    scopes?: string[];
}

/**
 * Defines values for LogLevel. \
 * {@link KnownLogLevel} can be used interchangeably with LogLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **info** \
 * **debug** \
 * **warn** \
 * **error**
 */
export declare type LogLevel = string;

/** Managed certificates used for Custom Domain bindings of Container Apps in a Managed Environment */
export declare interface ManagedCertificate extends TrackedResource {
    /** Certificate resource specific properties */
    properties?: ManagedCertificateProperties;
}

/** Collection of Managed Certificates. */
export declare interface ManagedCertificateCollection {
    /** Collection of resources. */
    value: ManagedCertificate[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for ManagedCertificateDomainControlValidation. \
 * {@link KnownManagedCertificateDomainControlValidation} can be used interchangeably with ManagedCertificateDomainControlValidation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CNAME** \
 * **HTTP** \
 * **TXT**
 */
export declare type ManagedCertificateDomainControlValidation = string;

/** A managed certificate to update */
export declare interface ManagedCertificatePatch {
    /** Application-specific metadata in the form of key-value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Certificate resource specific properties */
export declare interface ManagedCertificateProperties {
    /**
     * Provisioning state of the certificate.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: CertificateProvisioningState;
    /** Subject name of the certificate. */
    subjectName?: string;
    /**
     * Any error occurred during the certificate provision.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: string;
    /** Selected type of domain control validation for managed certificates. */
    domainControlValidation?: ManagedCertificateDomainControlValidation;
    /**
     * A TXT token used for DNS TXT domain control validation when issuing this type of managed certificates.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly validationToken?: string;
}

/** Interface representing a ManagedCertificates. */
export declare interface ManagedCertificates {
    /**
     * Get the Managed Certificates in a given managed environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, environmentName: string, options?: ManagedCertificatesListOptionalParams): PagedAsyncIterableIterator<ManagedCertificate>;
    /**
     * Get the specified Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesGetOptionalParams): Promise<ManagedCertificatesGetResponse>;
    /**
     * Create or Update a Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ManagedCertificatesCreateOrUpdateResponse>, ManagedCertificatesCreateOrUpdateResponse>>;
    /**
     * Create or Update a Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesCreateOrUpdateOptionalParams): Promise<ManagedCertificatesCreateOrUpdateResponse>;
    /**
     * Deletes the specified Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesDeleteOptionalParams): Promise<void>;
    /**
     * Patches a managed certificate. Oly patching of tags is supported
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param managedCertificateEnvelope Properties of a managed certificate that need to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName: string, environmentName: string, managedCertificateName: string, managedCertificateEnvelope: ManagedCertificatePatch, options?: ManagedCertificatesUpdateOptionalParams): Promise<ManagedCertificatesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ManagedCertificatesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Managed Certificate to be created or updated */
    managedCertificateEnvelope?: ManagedCertificate;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ManagedCertificatesCreateOrUpdateResponse = ManagedCertificate;

/** Optional parameters. */
export declare interface ManagedCertificatesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ManagedCertificatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ManagedCertificatesGetResponse = ManagedCertificate;

/** Optional parameters. */
export declare interface ManagedCertificatesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ManagedCertificatesListNextResponse = ManagedCertificateCollection;

/** Optional parameters. */
export declare interface ManagedCertificatesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ManagedCertificatesListResponse = ManagedCertificateCollection;

/** Optional parameters. */
export declare interface ManagedCertificatesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ManagedCertificatesUpdateResponse = ManagedCertificate;

/** An environment for hosting container apps */
export declare interface ManagedEnvironment extends TrackedResource {
    /** Kind of the Environment. */
    kind?: string;
    /**
     * Provisioning state of the Environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: EnvironmentProvisioningState;
    /** Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry */
    daprAIInstrumentationKey?: string;
    /** Application Insights connection string used by Dapr to export Service to Service communication telemetry */
    daprAIConnectionString?: string;
    /** Vnet configuration for the environment */
    vnetConfiguration?: VnetConfiguration;
    /**
     * Any errors that occurred during deployment or deployment validation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deploymentErrors?: string;
    /**
     * Default Domain Name for the cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultDomain?: string;
    /**
     * Static IP of the Environment
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly staticIp?: string;
    /**
     * Cluster configuration which enables the log daemon to export
     * app logs to a destination. Currently only "log-analytics" is
     * supported
     */
    appLogsConfiguration?: AppLogsConfiguration;
    /** Whether or not this Managed Environment is zone-redundant. */
    zoneRedundant?: boolean;
    /** Custom domain configuration for the environment */
    customDomainConfiguration?: CustomDomainConfiguration;
    /**
     * The endpoint of the eventstream of the Environment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventStreamEndpoint?: string;
    /** Workload profiles configured for the Managed Environment. */
    workloadProfiles?: WorkloadProfile[];
    /** The configuration of Keda component. */
    kedaConfiguration?: KedaConfiguration;
    /** The configuration of Dapr component. */
    daprConfiguration?: DaprConfiguration;
    /** Name of the platform-managed resource group created for the Managed Environment to host infrastructure resources. If a subnet ID is provided, this resource group will be created in the same subscription as the subnet. */
    infrastructureResourceGroup?: string;
    /** Peer authentication settings for the Managed Environment */
    peerAuthentication?: ManagedEnvironmentPropertiesPeerAuthentication;
}

/** Interface representing a ManagedEnvironmentDiagnostics. */
export declare interface ManagedEnvironmentDiagnostics {
    /**
     * Get the list of diagnostics for a Managed Environment used to host container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    listDetectors(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentDiagnosticsListDetectorsOptionalParams): Promise<ManagedEnvironmentDiagnosticsListDetectorsResponse>;
    /**
     * Get the diagnostics data for a Managed Environment used to host container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param detectorName Name of the Managed Environment detector.
     * @param options The options parameters.
     */
    getDetector(resourceGroupName: string, environmentName: string, detectorName: string, options?: ManagedEnvironmentDiagnosticsGetDetectorOptionalParams): Promise<ManagedEnvironmentDiagnosticsGetDetectorResponse>;
}

/** Optional parameters. */
export declare interface ManagedEnvironmentDiagnosticsGetDetectorOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDetector operation. */
export declare type ManagedEnvironmentDiagnosticsGetDetectorResponse = Diagnostics;

/** Optional parameters. */
export declare interface ManagedEnvironmentDiagnosticsListDetectorsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDetectors operation. */
export declare type ManagedEnvironmentDiagnosticsListDetectorsResponse = DiagnosticsCollection;

/** Peer authentication settings for the Managed Environment */
export declare interface ManagedEnvironmentPropertiesPeerAuthentication {
    /** Mutual TLS authentication settings for the Managed Environment */
    mtls?: Mtls;
}

/** Interface representing a ManagedEnvironments. */
export declare interface ManagedEnvironments {
    /**
     * Get all Managed Environments for a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ManagedEnvironmentsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ManagedEnvironment>;
    /**
     * Get all the Managed Environments in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ManagedEnvironmentsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ManagedEnvironment>;
    /**
     * Get all workload Profile States for a Managed Environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    listWorkloadProfileStates(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsListWorkloadProfileStatesOptionalParams): PagedAsyncIterableIterator<WorkloadProfileStates>;
    /**
     * Get the properties of a Managed Environment used to host container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsGetOptionalParams): Promise<ManagedEnvironmentsGetResponse>;
    /**
     * Creates or updates a Managed Environment used to host container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param environmentEnvelope Configuration details of the Environment.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, environmentName: string, environmentEnvelope: ManagedEnvironment, options?: ManagedEnvironmentsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ManagedEnvironmentsCreateOrUpdateResponse>, ManagedEnvironmentsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Managed Environment used to host container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param environmentEnvelope Configuration details of the Environment.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, environmentName: string, environmentEnvelope: ManagedEnvironment, options?: ManagedEnvironmentsCreateOrUpdateOptionalParams): Promise<ManagedEnvironmentsCreateOrUpdateResponse>;
    /**
     * Delete a Managed Environment if it does not have any container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Managed Environment if it does not have any container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsDeleteOptionalParams): Promise<void>;
    /**
     * Patches a Managed Environment using JSON Merge Patch
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param environmentEnvelope Configuration details of the Environment.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, environmentName: string, environmentEnvelope: ManagedEnvironment, options?: ManagedEnvironmentsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ManagedEnvironmentsUpdateResponse>, ManagedEnvironmentsUpdateResponse>>;
    /**
     * Patches a Managed Environment using JSON Merge Patch
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param environmentEnvelope Configuration details of the Environment.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, environmentName: string, environmentEnvelope: ManagedEnvironment, options?: ManagedEnvironmentsUpdateOptionalParams): Promise<ManagedEnvironmentsUpdateResponse>;
    /**
     * Checks if resource name is available.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    getAuthToken(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsGetAuthTokenOptionalParams): Promise<ManagedEnvironmentsGetAuthTokenResponse>;
}

/** Collection of Environments */
export declare interface ManagedEnvironmentsCollection {
    /** Collection of resources. */
    value: ManagedEnvironment[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface ManagedEnvironmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ManagedEnvironmentsCreateOrUpdateResponse = ManagedEnvironment;

/** Optional parameters. */
export declare interface ManagedEnvironmentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a ManagedEnvironmentsDiagnostics. */
export declare interface ManagedEnvironmentsDiagnostics {
    /**
     * Get the properties of a Managed Environment used to host container apps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    getRoot(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsDiagnosticsGetRootOptionalParams): Promise<ManagedEnvironmentsDiagnosticsGetRootResponse>;
}

/** Optional parameters. */
export declare interface ManagedEnvironmentsDiagnosticsGetRootOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getRoot operation. */
export declare type ManagedEnvironmentsDiagnosticsGetRootResponse = ManagedEnvironment;

/** Optional parameters. */
export declare interface ManagedEnvironmentsGetAuthTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthToken operation. */
export declare type ManagedEnvironmentsGetAuthTokenResponse = EnvironmentAuthToken;

/** Optional parameters. */
export declare interface ManagedEnvironmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ManagedEnvironmentsGetResponse = ManagedEnvironment;

/** Optional parameters. */
export declare interface ManagedEnvironmentsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ManagedEnvironmentsListByResourceGroupNextResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export declare interface ManagedEnvironmentsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ManagedEnvironmentsListByResourceGroupResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export declare interface ManagedEnvironmentsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ManagedEnvironmentsListBySubscriptionNextResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export declare interface ManagedEnvironmentsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ManagedEnvironmentsListBySubscriptionResponse = ManagedEnvironmentsCollection;

/** Optional parameters. */
export declare interface ManagedEnvironmentsListWorkloadProfileStatesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listWorkloadProfileStatesNext operation. */
export declare type ManagedEnvironmentsListWorkloadProfileStatesNextResponse = WorkloadProfileStatesCollection;

/** Optional parameters. */
export declare interface ManagedEnvironmentsListWorkloadProfileStatesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listWorkloadProfileStates operation. */
export declare type ManagedEnvironmentsListWorkloadProfileStatesResponse = WorkloadProfileStatesCollection;

/** Interface representing a ManagedEnvironmentsStorages. */
export declare interface ManagedEnvironmentsStorages {
    /**
     * Get all storages for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, environmentName: string, options?: ManagedEnvironmentsStoragesListOptionalParams): Promise<ManagedEnvironmentsStoragesListResponse>;
    /**
     * Get storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, storageName: string, options?: ManagedEnvironmentsStoragesGetOptionalParams): Promise<ManagedEnvironmentsStoragesGetResponse>;
    /**
     * Create or update storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param storageEnvelope Configuration details of storage.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, environmentName: string, storageName: string, storageEnvelope: ManagedEnvironmentStorage, options?: ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams): Promise<ManagedEnvironmentsStoragesCreateOrUpdateResponse>;
    /**
     * Delete storage for a managedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, storageName: string, options?: ManagedEnvironmentsStoragesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ManagedEnvironmentsStoragesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ManagedEnvironmentsStoragesCreateOrUpdateResponse = ManagedEnvironmentStorage;

/** Optional parameters. */
export declare interface ManagedEnvironmentsStoragesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ManagedEnvironmentsStoragesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ManagedEnvironmentsStoragesGetResponse = ManagedEnvironmentStorage;

/** Optional parameters. */
export declare interface ManagedEnvironmentsStoragesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ManagedEnvironmentsStoragesListResponse = ManagedEnvironmentStoragesCollection;

/** Storage resource for managedEnvironment. */
export declare interface ManagedEnvironmentStorage extends ProxyResource {
    /** Storage properties */
    properties?: ManagedEnvironmentStorageProperties;
}

/** Storage properties */
export declare interface ManagedEnvironmentStorageProperties {
    /** Azure file properties */
    azureFile?: AzureFileProperties;
}

/** Collection of Storage for Environments */
export declare interface ManagedEnvironmentStoragesCollection {
    /** Collection of storage resources. */
    value: ManagedEnvironmentStorage[];
}

/** Optional parameters. */
export declare interface ManagedEnvironmentsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ManagedEnvironmentsUpdateResponse = ManagedEnvironment;

/** Managed service identity (system assigned and/or user assigned identities) */
export declare interface ManagedServiceIdentity {
    /**
     * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
    type: ManagedServiceIdentityType;
    /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export declare type ManagedServiceIdentityType = string;

/** Configuration properties for mutual TLS authentication */
export declare interface Mtls {
    /** Boolean indicating whether the mutual TLS authentication is enabled */
    enabled?: boolean;
}

/** Interface representing a Namespaces. */
export declare interface Namespaces {
    /**
     * Checks if resource name is available.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param checkNameAvailabilityRequest The check name availability request.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName: string, environmentName: string, checkNameAvailabilityRequest: CheckNameAvailabilityRequest, options?: NamespacesCheckNameAvailabilityOptionalParams): Promise<NamespacesCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface NamespacesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type NamespacesCheckNameAvailabilityResponse = CheckNameAvailabilityResponse;

/** The configuration settings of the nonce used in the login flow. */
export declare interface Nonce {
    /** <code>false</code> if the nonce should not be validated while completing the login flow; otherwise, <code>true</code>. */
    validateNonce?: boolean;
    /** The time after the request is made when the nonce should expire. */
    nonceExpirationInterval?: string;
}

/** The authentication client credentials of the custom Open ID Connect provider. */
export declare interface OpenIdConnectClientCredential {
    /** The method that should be used to authenticate the user. */
    method?: "ClientSecretPost";
    /** The app setting that contains the client secret for the custom Open ID Connect provider. */
    clientSecretSettingName?: string;
}

/** The configuration settings of the endpoints used for the custom Open ID Connect provider. */
export declare interface OpenIdConnectConfig {
    /** The endpoint to be used to make an authorization request. */
    authorizationEndpoint?: string;
    /** The endpoint to be used to request a token. */
    tokenEndpoint?: string;
    /** The endpoint that issues the token. */
    issuer?: string;
    /** The endpoint that provides the keys necessary to validate the token. */
    certificationUri?: string;
    /** The endpoint that contains all the configuration endpoints for the provider. */
    wellKnownOpenIdConfiguration?: string;
}

/** The configuration settings of the login flow of the custom Open ID Connect provider. */
export declare interface OpenIdConnectLogin {
    /** The name of the claim that contains the users name. */
    nameClaimType?: string;
    /** A list of the scopes that should be requested while authenticating. */
    scopes?: string[];
}

/** The configuration settings of the app registration for the custom Open ID Connect provider. */
export declare interface OpenIdConnectRegistration {
    /** The client id of the custom Open ID Connect provider. */
    clientId?: string;
    /** The authentication credentials of the custom Open ID Connect provider. */
    clientCredential?: OpenIdConnectClientCredential;
    /** The configuration settings of the endpoints used for the custom Open ID Connect provider. */
    openIdConnectConfiguration?: OpenIdConnectConfig;
}

/** Operation detail payload */
export declare interface OperationDetail {
    /** Name of the operation */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** Display of the operation */
    display?: OperationDisplay;
    /** Origin of the operation */
    origin?: string;
}

/** Operation display payload */
export declare interface OperationDisplay {
    /** Resource provider of the operation */
    provider?: string;
    /** Resource of the operation */
    resource?: string;
    /** Localized friendly name for the operation */
    operation?: string;
    /** Localized friendly description for the operation */
    description?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available RP operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationDetail>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = AvailableOperations;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = AvailableOperations;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Container App container Azure Queue based scaling rule. */
export declare interface QueueScaleRule {
    /** Queue name. */
    queueName?: string;
    /** Queue length. */
    queueLength?: number;
    /** Authentication secrets for the queue scale rule. */
    auth?: ScaleRuleAuth[];
}

/** Container App Private Registry */
export declare interface RegistryCredentials {
    /** Container Registry Server */
    server?: string;
    /** Container Registry Username */
    username?: string;
    /** The name of the Secret that contains the registry login password */
    passwordSecretRef?: string;
    /** A Managed Identity to use to authenticate with Azure Container Registry. For user-assigned identities, use the full user-assigned identity Resource ID. For system-assigned identities, use 'system' */
    identity?: string;
}

/** Container App registry information. */
export declare interface RegistryInfo {
    /** registry server Url. */
    registryUrl?: string;
    /** registry username. */
    registryUserName?: string;
    /** registry secret. */
    registryPassword?: string;
}

/** Container App Revision Replica. */
export declare interface Replica extends ProxyResource {
    /**
     * Timestamp describing when the pod was created by controller
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Current running state of the replica
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningState?: ContainerAppReplicaRunningState;
    /**
     * The details of replica current running state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningStateDetails?: string;
    /** The containers collection under a replica. */
    containers?: ReplicaContainer[];
    /** The init containers collection under a replica. */
    initContainers?: ReplicaContainer[];
}

/** Container App Revision Replicas collection ARM resource. */
export declare interface ReplicaCollection {
    /** Collection of resources. */
    value: Replica[];
}

/** Container object under Container App Revision Replica. */
export declare interface ReplicaContainer {
    /** The Name of the Container */
    name?: string;
    /** The Id of the Container */
    containerId?: string;
    /** The container ready status */
    ready?: boolean;
    /** The container start status */
    started?: boolean;
    /** The container restart count */
    restartCount?: number;
    /**
     * Current running state of the container
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningState?: ContainerAppContainerRunningState;
    /**
     * The details of container current running state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningStateDetails?: string;
    /**
     * Log Stream endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly logStreamEndpoint?: string;
    /**
     * Container exec endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly execEndpoint?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Container App Revision. */
export declare interface Revision extends ProxyResource {
    /**
     * Timestamp describing when the revision was created
     * by controller
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Timestamp describing when the revision was last active. Only meaningful when revision is inactive
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastActiveTime?: Date;
    /**
     * Fully qualified domain name of the revision
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /**
     * Container App Revision Template with all possible settings and the
     * defaults if user did not provide them. The defaults are populated
     * as they were at the creation time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly template?: Template;
    /**
     * Boolean describing if the Revision is Active
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly active?: boolean;
    /**
     * Number of pods currently running for this revision
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicas?: number;
    /**
     * Traffic weight assigned to this revision
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trafficWeight?: number;
    /**
     * Optional Field - Platform Error Message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningError?: string;
    /**
     * Current health State of the revision
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly healthState?: RevisionHealthState;
    /**
     * Current provisioning State of the revision
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: RevisionProvisioningState;
    /**
     * Current running state of the revision
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runningState?: RevisionRunningState;
}

/** Container App Revisions collection ARM resource. */
export declare interface RevisionCollection {
    /** Collection of resources. */
    value: Revision[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for RevisionHealthState. \
 * {@link KnownRevisionHealthState} can be used interchangeably with RevisionHealthState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Healthy** \
 * **Unhealthy** \
 * **None**
 */
export declare type RevisionHealthState = string;

/**
 * Defines values for RevisionProvisioningState. \
 * {@link KnownRevisionProvisioningState} can be used interchangeably with RevisionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Provisioned** \
 * **Failed** \
 * **Deprovisioning** \
 * **Deprovisioned**
 */
export declare type RevisionProvisioningState = string;

/**
 * Defines values for RevisionRunningState. \
 * {@link KnownRevisionRunningState} can be used interchangeably with RevisionRunningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Processing** \
 * **Stopped** \
 * **Degraded** \
 * **Failed** \
 * **Unknown**
 */
export declare type RevisionRunningState = string;

/** Container App scaling configurations. */
export declare interface Scale {
    /** Optional. Minimum number of container replicas. */
    minReplicas?: number;
    /** Optional. Maximum number of container replicas. Defaults to 10 if not set. */
    maxReplicas?: number;
    /** Scaling rules. */
    rules?: ScaleRule[];
}

/** Container App container scaling rule. */
export declare interface ScaleRule {
    /** Scale Rule Name */
    name?: string;
    /** Azure Queue based scaling. */
    azureQueue?: QueueScaleRule;
    /** Custom scale rule. */
    custom?: CustomScaleRule;
    /** HTTP requests based scaling. */
    http?: HttpScaleRule;
    /** Tcp requests based scaling. */
    tcp?: TcpScaleRule;
}

/** Auth Secrets for Scale Rule */
export declare interface ScaleRuleAuth {
    /** Name of the secret from which to pull the auth params. */
    secretRef?: string;
    /** Trigger Parameter that uses the secret */
    triggerParameter?: string;
}

/**
 * Defines values for Scheme. \
 * {@link KnownScheme} can be used interchangeably with Scheme,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTP** \
 * **HTTPS**
 */
export declare type Scheme = string;

/** Secret definition. */
export declare interface Secret {
    /** Secret Name. */
    name?: string;
    /** Secret Value. */
    value?: string;
    /** Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity. */
    identity?: string;
    /** Azure Key Vault URL pointing to the secret referenced by the container app. */
    keyVaultUrl?: string;
}

/** Container App Secrets Collection ARM resource. */
export declare interface SecretsCollection {
    /** Collection of resources. */
    value: ContainerAppSecret[];
}

/** Secret to be added to volume. */
export declare interface SecretVolumeItem {
    /** Name of the Container App secret from which to pull the secret value. */
    secretRef?: string;
    /** Path to project secret to. If no path is provided, path defaults to name of secret listed in secretRef. */
    path?: string;
}

/** Container App to be a dev service */
export declare interface Service {
    /** Dev ContainerApp service type */
    type: string;
}

/** Configuration to bind a ContainerApp to a dev ContainerApp Service */
export declare interface ServiceBind {
    /** Resource id of the target service */
    serviceId?: string;
    /** Name of the service bind */
    name?: string;
}

/** Container App SourceControl. */
export declare interface SourceControl extends ProxyResource {
    /**
     * Current provisioning State of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationState?: SourceControlOperationState;
    /** The repo url which will be integrated to ContainerApp. */
    repoUrl?: string;
    /** The branch which will trigger the auto deployment */
    branch?: string;
    /**
     * Container App Revision Template with all possible settings and the
     * defaults if user did not provide them. The defaults are populated
     * as they were at the creation time
     */
    githubActionConfiguration?: GithubActionConfiguration;
}

/** SourceControl collection ARM resource. */
export declare interface SourceControlCollection {
    /** Collection of resources. */
    value: SourceControl[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for SourceControlOperationState. \
 * {@link KnownSourceControlOperationState} can be used interchangeably with SourceControlOperationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type SourceControlOperationState = string;

/**
 * Defines values for StorageType. \
 * {@link KnownStorageType} can be used interchangeably with StorageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureFile** \
 * **EmptyDir** \
 * **Secret**
 */
export declare type StorageType = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Container App container Tcp scaling rule. */
export declare interface TcpScaleRule {
    /** Metadata properties to describe tcp scale rule. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** Authentication secrets for the tcp scale rule. */
    auth?: ScaleRuleAuth[];
}

/**
 * Container App versioned application definition.
 * Defines the desired state of an immutable revision.
 * Any changes to this section Will result in a new revision being created
 */
export declare interface Template {
    /** User friendly suffix that is appended to the revision name */
    revisionSuffix?: string;
    /** Optional duration in seconds the Container App Instance needs to terminate gracefully. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds. */
    terminationGracePeriodSeconds?: number;
    /** List of specialized containers that run before app containers. */
    initContainers?: InitContainer[];
    /** List of container definitions for the Container App. */
    containers?: Container[];
    /** Scaling properties for the Container App. */
    scale?: Scale;
    /** List of volume definitions for the Container App. */
    volumes?: Volume[];
    /** List of container app services bound to the app */
    serviceBinds?: ServiceBind[];
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** Traffic weight assigned to a revision */
export declare interface TrafficWeight {
    /** Name of a revision */
    revisionName?: string;
    /** Traffic weight assigned to a revision */
    weight?: number;
    /** Indicates that the traffic weight belongs to a latest stable revision */
    latestRevision?: boolean;
    /** Associates a traffic label with a revision */
    label?: string;
}

/**
 * Defines values for TriggerType. \
 * {@link KnownTriggerType} can be used interchangeably with TriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Schedule** \
 * **Event** \
 * **Manual**
 */
export declare type TriggerType = string;

/** The configuration settings of the Twitter provider. */
export declare interface Twitter {
    /** <code>false</code> if the Twitter provider should not be enabled despite the set registration; otherwise, <code>true</code>. */
    enabled?: boolean;
    /** The configuration settings of the app registration for the Twitter provider. */
    registration?: TwitterRegistration;
}

/** The configuration settings of the app registration for the Twitter provider. */
export declare interface TwitterRegistration {
    /**
     * The OAuth 1.0a consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     */
    consumerKey?: string;
    /**
     * The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
     * application used for sign-in.
     */
    consumerSecretSettingName?: string;
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Liveness** \
 * **Readiness** \
 * **Startup**
 */
export declare type Type = string;

/** Defines values for UnauthenticatedClientActionV2. */
export declare type UnauthenticatedClientActionV2 = "RedirectToLoginPage" | "AllowAnonymous" | "Return401" | "Return403";

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** Configuration properties for apps environment to join a Virtual Network */
export declare interface VnetConfiguration {
    /** Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property */
    internal?: boolean;
    /** Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges. */
    infrastructureSubnetId?: string;
    /** CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges. */
    dockerBridgeCidr?: string;
    /** IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges. */
    platformReservedCidr?: string;
    /**  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server. */
    platformReservedDnsIP?: string;
}

/** Volume definitions for the Container App. */
export declare interface Volume {
    /** Volume name. */
    name?: string;
    /** Storage type for the volume. If not provided, use EmptyDir. */
    storageType?: StorageType;
    /** Name of storage resource. No need to provide for EmptyDir and Secret. */
    storageName?: string;
    /** List of secrets to be added in volume. If no secrets are provided, all secrets in collection will be added to volume. */
    secrets?: SecretVolumeItem[];
    /** Mount options used while mounting the AzureFile. Must be a comma-separated string. */
    mountOptions?: string;
}

/** Volume mount for the Container App. */
export declare interface VolumeMount {
    /** This must match the Name of a Volume. */
    volumeName?: string;
    /** Path within the container at which the volume should be mounted.Must not contain ':'. */
    mountPath?: string;
    /** Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root). */
    subPath?: string;
}

/** Workload profile to scope container app execution. */
export declare interface WorkloadProfile {
    /** Workload profile type for the workloads to run on. */
    name: string;
    /** Workload profile type for the workloads to run on. */
    workloadProfileType: string;
    /** The minimum capacity. */
    minimumCount?: number;
    /** The maximum capacity. */
    maximumCount?: number;
}

/** Collection of all the workload Profile States for a Managed Environment.. */
export declare interface WorkloadProfileStates extends ProxyResource {
    /** Workload Profile resource specific properties. */
    properties?: WorkloadProfileStatesProperties;
}

/** Collection of workloadProfileStates */
export declare interface WorkloadProfileStatesCollection {
    /** Collection of resources. */
    value: WorkloadProfileStates[];
    /**
     * Link to next page of resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Workload Profile resource specific properties. */
export declare interface WorkloadProfileStatesProperties {
    /** Minimum count of instances. */
    minimumCount?: number;
    /** Maximum count of nodes. */
    maximumCount?: number;
    /** Current count of nodes. */
    currentCount?: number;
}

export { }
