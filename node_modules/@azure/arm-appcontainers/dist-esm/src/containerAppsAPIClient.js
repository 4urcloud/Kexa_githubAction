/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { ContainerAppsAuthConfigsImpl, AvailableWorkloadProfilesImpl, BillingMetersImpl, ConnectedEnvironmentsImpl, ConnectedEnvironmentsCertificatesImpl, ConnectedEnvironmentsDaprComponentsImpl, ConnectedEnvironmentsStoragesImpl, ContainerAppsImpl, ContainerAppsRevisionsImpl, ContainerAppsRevisionReplicasImpl, ContainerAppsDiagnosticsImpl, ManagedEnvironmentDiagnosticsImpl, ManagedEnvironmentsDiagnosticsImpl, OperationsImpl, JobsImpl, JobsExecutionsImpl, ManagedEnvironmentsImpl, CertificatesImpl, ManagedCertificatesImpl, NamespacesImpl, DaprComponentsImpl, ManagedEnvironmentsStoragesImpl, ContainerAppsSourceControlsImpl } from "./operations";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
export class ContainerAppsAPIClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the ContainerAppsAPIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-appcontainers/2.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-05-01";
        this.containerAppsAuthConfigs = new ContainerAppsAuthConfigsImpl(this);
        this.availableWorkloadProfiles = new AvailableWorkloadProfilesImpl(this);
        this.billingMeters = new BillingMetersImpl(this);
        this.connectedEnvironments = new ConnectedEnvironmentsImpl(this);
        this.connectedEnvironmentsCertificates = new ConnectedEnvironmentsCertificatesImpl(this);
        this.connectedEnvironmentsDaprComponents = new ConnectedEnvironmentsDaprComponentsImpl(this);
        this.connectedEnvironmentsStorages = new ConnectedEnvironmentsStoragesImpl(this);
        this.containerApps = new ContainerAppsImpl(this);
        this.containerAppsRevisions = new ContainerAppsRevisionsImpl(this);
        this.containerAppsRevisionReplicas = new ContainerAppsRevisionReplicasImpl(this);
        this.containerAppsDiagnostics = new ContainerAppsDiagnosticsImpl(this);
        this.managedEnvironmentDiagnostics = new ManagedEnvironmentDiagnosticsImpl(this);
        this.managedEnvironmentsDiagnostics = new ManagedEnvironmentsDiagnosticsImpl(this);
        this.operations = new OperationsImpl(this);
        this.jobs = new JobsImpl(this);
        this.jobsExecutions = new JobsExecutionsImpl(this);
        this.managedEnvironments = new ManagedEnvironmentsImpl(this);
        this.certificates = new CertificatesImpl(this);
        this.managedCertificates = new ManagedCertificatesImpl(this);
        this.namespaces = new NamespacesImpl(this);
        this.daprComponents = new DaprComponentsImpl(this);
        this.managedEnvironmentsStorages = new ManagedEnvironmentsStoragesImpl(this);
        this.containerAppsSourceControls = new ContainerAppsSourceControlsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return __awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Get details of a single job execution
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobExecutionName Job execution name.
     * @param options The options parameters.
     */
    jobExecution(resourceGroupName, jobName, jobExecutionName, options) {
        return this.sendOperationRequest({ resourceGroupName, jobName, jobExecutionName, options }, jobExecutionOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const jobExecutionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.App/jobs/{jobName}/executions/{jobExecutionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.JobExecution
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.jobName,
        Parameters.jobExecutionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=containerAppsAPIClient.js.map