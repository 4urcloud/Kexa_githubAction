import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedCertificates } from "../operationsInterfaces";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ManagedCertificate, ManagedCertificatesListOptionalParams, ManagedCertificatesGetOptionalParams, ManagedCertificatesGetResponse, ManagedCertificatesCreateOrUpdateOptionalParams, ManagedCertificatesCreateOrUpdateResponse, ManagedCertificatesDeleteOptionalParams, ManagedCertificatePatch, ManagedCertificatesUpdateOptionalParams, ManagedCertificatesUpdateResponse } from "../models";
/** Class containing ManagedCertificates operations. */
export declare class ManagedCertificatesImpl implements ManagedCertificates {
    private readonly client;
    /**
     * Initialize a new instance of the class ManagedCertificates class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerAppsAPIClient);
    /**
     * Get the Managed Certificates in a given managed environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, environmentName: string, options?: ManagedCertificatesListOptionalParams): PagedAsyncIterableIterator<ManagedCertificate>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get the specified Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesGetOptionalParams): Promise<ManagedCertificatesGetResponse>;
    /**
     * Create or Update a Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ManagedCertificatesCreateOrUpdateResponse>, ManagedCertificatesCreateOrUpdateResponse>>;
    /**
     * Create or Update a Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesCreateOrUpdateOptionalParams): Promise<ManagedCertificatesCreateOrUpdateResponse>;
    /**
     * Deletes the specified Managed Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, environmentName: string, managedCertificateName: string, options?: ManagedCertificatesDeleteOptionalParams): Promise<void>;
    /**
     * Patches a managed certificate. Oly patching of tags is supported
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param managedCertificateName Name of the Managed Certificate.
     * @param managedCertificateEnvelope Properties of a managed certificate that need to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName: string, environmentName: string, managedCertificateName: string, managedCertificateEnvelope: ManagedCertificatePatch, options?: ManagedCertificatesUpdateOptionalParams): Promise<ManagedCertificatesUpdateResponse>;
    /**
     * Get the Managed Certificates in a given managed environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param environmentName Name of the Managed Environment.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=managedCertificates.d.ts.map