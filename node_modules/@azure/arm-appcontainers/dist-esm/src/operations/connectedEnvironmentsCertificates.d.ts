import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConnectedEnvironmentsCertificates } from "../operationsInterfaces";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { Certificate, ConnectedEnvironmentsCertificatesListOptionalParams, ConnectedEnvironmentsCertificatesGetOptionalParams, ConnectedEnvironmentsCertificatesGetResponse, ConnectedEnvironmentsCertificatesCreateOrUpdateOptionalParams, ConnectedEnvironmentsCertificatesCreateOrUpdateResponse, ConnectedEnvironmentsCertificatesDeleteOptionalParams, CertificatePatch, ConnectedEnvironmentsCertificatesUpdateOptionalParams, ConnectedEnvironmentsCertificatesUpdateResponse } from "../models";
/** Class containing ConnectedEnvironmentsCertificates operations. */
export declare class ConnectedEnvironmentsCertificatesImpl implements ConnectedEnvironmentsCertificates {
    private readonly client;
    /**
     * Initialize a new instance of the class ConnectedEnvironmentsCertificates class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerAppsAPIClient);
    /**
     * Get the Certificates in a given connected environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsCertificatesListOptionalParams): PagedAsyncIterableIterator<Certificate>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get the Certificates in a given connected environment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, options?: ConnectedEnvironmentsCertificatesGetOptionalParams): Promise<ConnectedEnvironmentsCertificatesGetResponse>;
    /**
     * Create or Update a Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, options?: ConnectedEnvironmentsCertificatesCreateOrUpdateOptionalParams): Promise<ConnectedEnvironmentsCertificatesCreateOrUpdateResponse>;
    /**
     * Deletes the specified Certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, options?: ConnectedEnvironmentsCertificatesDeleteOptionalParams): Promise<void>;
    /**
     * Patches a certificate. Currently only patching of tags is supported
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param certificateName Name of the Certificate.
     * @param certificateEnvelope Properties of a certificate that need to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName: string, connectedEnvironmentName: string, certificateName: string, certificateEnvelope: CertificatePatch, options?: ConnectedEnvironmentsCertificatesUpdateOptionalParams): Promise<ConnectedEnvironmentsCertificatesUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Connected Environment.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=connectedEnvironmentsCertificates.d.ts.map