import { ConnectedEnvironmentsStorages } from "../operationsInterfaces";
import { ContainerAppsAPIClient } from "../containerAppsAPIClient";
import { ConnectedEnvironmentsStoragesListOptionalParams, ConnectedEnvironmentsStoragesListResponse, ConnectedEnvironmentsStoragesGetOptionalParams, ConnectedEnvironmentsStoragesGetResponse, ConnectedEnvironmentStorage, ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams, ConnectedEnvironmentsStoragesCreateOrUpdateResponse, ConnectedEnvironmentsStoragesDeleteOptionalParams } from "../models";
/** Class containing ConnectedEnvironmentsStorages operations. */
export declare class ConnectedEnvironmentsStoragesImpl implements ConnectedEnvironmentsStorages {
    private readonly client;
    /**
     * Initialize a new instance of the class ConnectedEnvironmentsStorages class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerAppsAPIClient);
    /**
     * Get all storages for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, connectedEnvironmentName: string, options?: ConnectedEnvironmentsStoragesListOptionalParams): Promise<ConnectedEnvironmentsStoragesListResponse>;
    /**
     * Get storage for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, connectedEnvironmentName: string, storageName: string, options?: ConnectedEnvironmentsStoragesGetOptionalParams): Promise<ConnectedEnvironmentsStoragesGetResponse>;
    /**
     * Create or update storage for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param storageEnvelope Configuration details of storage.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, connectedEnvironmentName: string, storageName: string, storageEnvelope: ConnectedEnvironmentStorage, options?: ConnectedEnvironmentsStoragesCreateOrUpdateOptionalParams): Promise<ConnectedEnvironmentsStoragesCreateOrUpdateResponse>;
    /**
     * Delete storage for a connectedEnvironment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectedEnvironmentName Name of the Environment.
     * @param storageName Name of the storage.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, connectedEnvironmentName: string, storageName: string, options?: ConnectedEnvironmentsStoragesDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=connectedEnvironmentsStorages.d.ts.map