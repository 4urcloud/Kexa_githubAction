import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { ContainerAppsAuthConfigs, AvailableWorkloadProfiles, BillingMeters, ConnectedEnvironments, ConnectedEnvironmentsCertificates, ConnectedEnvironmentsDaprComponents, ConnectedEnvironmentsStorages, ContainerApps, ContainerAppsRevisions, ContainerAppsRevisionReplicas, ContainerAppsDiagnostics, ManagedEnvironmentDiagnostics, ManagedEnvironmentsDiagnostics, Operations, Jobs, JobsExecutions, ManagedEnvironments, Certificates, ManagedCertificates, Namespaces, DaprComponents, ManagedEnvironmentsStorages, ContainerAppsSourceControls } from "./operationsInterfaces";
import { ContainerAppsAPIClientOptionalParams, JobExecutionOptionalParams, JobExecutionResponse } from "./models";
export declare class ContainerAppsAPIClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the ContainerAppsAPIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ContainerAppsAPIClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Get details of a single job execution
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param jobName Job Name
     * @param jobExecutionName Job execution name.
     * @param options The options parameters.
     */
    jobExecution(resourceGroupName: string, jobName: string, jobExecutionName: string, options?: JobExecutionOptionalParams): Promise<JobExecutionResponse>;
    containerAppsAuthConfigs: ContainerAppsAuthConfigs;
    availableWorkloadProfiles: AvailableWorkloadProfiles;
    billingMeters: BillingMeters;
    connectedEnvironments: ConnectedEnvironments;
    connectedEnvironmentsCertificates: ConnectedEnvironmentsCertificates;
    connectedEnvironmentsDaprComponents: ConnectedEnvironmentsDaprComponents;
    connectedEnvironmentsStorages: ConnectedEnvironmentsStorages;
    containerApps: ContainerApps;
    containerAppsRevisions: ContainerAppsRevisions;
    containerAppsRevisionReplicas: ContainerAppsRevisionReplicas;
    containerAppsDiagnostics: ContainerAppsDiagnostics;
    managedEnvironmentDiagnostics: ManagedEnvironmentDiagnostics;
    managedEnvironmentsDiagnostics: ManagedEnvironmentsDiagnostics;
    operations: Operations;
    jobs: Jobs;
    jobsExecutions: JobsExecutions;
    managedEnvironments: ManagedEnvironments;
    certificates: Certificates;
    managedCertificates: ManagedCertificates;
    namespaces: Namespaces;
    daprComponents: DaprComponents;
    managedEnvironmentsStorages: ManagedEnvironmentsStorages;
    containerAppsSourceControls: ContainerAppsSourceControls;
}
//# sourceMappingURL=containerAppsAPIClient.d.ts.map