'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link UsagesTypes} that the service accepts. */
exports.KnownUsagesTypes = void 0;
(function (KnownUsagesTypes) {
    /** Individual */
    KnownUsagesTypes["Individual"] = "Individual";
    /** Combined */
    KnownUsagesTypes["Combined"] = "Combined";
})(exports.KnownUsagesTypes || (exports.KnownUsagesTypes = {}));
/** Known values of {@link LimitType} that the service accepts. */
exports.KnownLimitType = void 0;
(function (KnownLimitType) {
    /** LimitValue */
    KnownLimitType["LimitValue"] = "LimitValue";
})(exports.KnownLimitType || (exports.KnownLimitType = {}));
/** Known values of {@link QuotaRequestState} that the service accepts. */
exports.KnownQuotaRequestState = void 0;
(function (KnownQuotaRequestState) {
    /** Accepted */
    KnownQuotaRequestState["Accepted"] = "Accepted";
    /** Invalid */
    KnownQuotaRequestState["Invalid"] = "Invalid";
    /** Succeeded */
    KnownQuotaRequestState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownQuotaRequestState["Failed"] = "Failed";
    /** InProgress */
    KnownQuotaRequestState["InProgress"] = "InProgress";
})(exports.KnownQuotaRequestState || (exports.KnownQuotaRequestState = {}));
/** Known values of {@link QuotaLimitTypes} that the service accepts. */
exports.KnownQuotaLimitTypes = void 0;
(function (KnownQuotaLimitTypes) {
    /** Independent */
    KnownQuotaLimitTypes["Independent"] = "Independent";
    /** Shared */
    KnownQuotaLimitTypes["Shared"] = "Shared";
})(exports.KnownQuotaLimitTypes || (exports.KnownQuotaLimitTypes = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const CurrentUsagesBase = {
    type: {
        name: "Composite",
        className: "CurrentUsagesBase",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UsagesProperties"
                }
            }
        }
    }
};
const UsagesProperties = {
    type: {
        name: "Composite",
        className: "UsagesProperties",
        modelProperties: {
            usages: {
                serializedName: "usages",
                type: {
                    name: "Composite",
                    className: "UsagesObject"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResourceName"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isQuotaApplicable: {
                serializedName: "isQuotaApplicable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const UsagesObject = {
    type: {
        name: "Composite",
        className: "UsagesObject",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Number"
                }
            },
            usagesType: {
                serializedName: "usagesType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceName = {
    type: {
        name: "Composite",
        className: "ResourceName",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExceptionResponse = {
    type: {
        name: "Composite",
        className: "ExceptionResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ServiceError"
                }
            }
        }
    }
};
const ServiceError = {
    type: {
        name: "Composite",
        className: "ServiceError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceErrorDetail"
                        }
                    }
                }
            }
        }
    }
};
const ServiceErrorDetail = {
    type: {
        name: "Composite",
        className: "ServiceErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UsagesLimits = {
    type: {
        name: "Composite",
        className: "UsagesLimits",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CurrentUsagesBase"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CurrentQuotaLimitBase = {
    type: {
        name: "Composite",
        className: "CurrentQuotaLimitBase",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "QuotaProperties"
                }
            }
        }
    }
};
const QuotaProperties = {
    type: {
        name: "Composite",
        className: "QuotaProperties",
        modelProperties: {
            limit: {
                serializedName: "limit",
                type: {
                    name: "Composite",
                    className: "LimitJsonObject"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResourceName"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isQuotaApplicable: {
                serializedName: "isQuotaApplicable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const LimitJsonObject = {
    type: {
        name: "Composite",
        className: "LimitJsonObject",
        uberParent: "LimitJsonObject",
        polymorphicDiscriminator: {
            serializedName: "limitObjectType",
            clientName: "limitObjectType"
        },
        modelProperties: {
            limitObjectType: {
                serializedName: "limitObjectType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaLimits = {
    type: {
        name: "Composite",
        className: "QuotaLimits",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CurrentQuotaLimitBase"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaRequestDetails = {
    type: {
        name: "Composite",
        className: "QuotaRequestDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "QuotaRequestProperties"
                }
            }
        }
    }
};
const QuotaRequestProperties = {
    type: {
        name: "Composite",
        className: "QuotaRequestProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ServiceErrorDetail"
                }
            },
            requestSubmitTime: {
                serializedName: "requestSubmitTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubRequest"
                        }
                    }
                }
            }
        }
    }
};
const SubRequest = {
    type: {
        name: "Composite",
        className: "SubRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResourceName"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subRequestId: {
                serializedName: "subRequestId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Composite",
                    className: "LimitJsonObject"
                }
            }
        }
    }
};
const QuotaRequestDetailsList = {
    type: {
        name: "Composite",
        className: "QuotaRequestDetailsList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "QuotaRequestDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationList = {
    type: {
        name: "Composite",
        className: "OperationList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationResponse"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResponse = {
    type: {
        name: "Composite",
        className: "OperationResponse",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommonResourceProperties = {
    type: {
        name: "Composite",
        className: "CommonResourceProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaLimitsResponse = {
    type: {
        name: "Composite",
        className: "QuotaLimitsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CurrentQuotaLimitBase"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CreateGenericQuotaRequestParameters = {
    type: {
        name: "Composite",
        className: "CreateGenericQuotaRequestParameters",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CurrentQuotaLimitBase"
                        }
                    }
                }
            }
        }
    }
};
const QuotaRequestOneResourceSubmitResponse = {
    type: {
        name: "Composite",
        className: "QuotaRequestOneResourceSubmitResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "QuotaRequestOneResourceProperties"
                }
            }
        }
    }
};
const QuotaRequestOneResourceProperties = {
    type: {
        name: "Composite",
        className: "QuotaRequestOneResourceProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requestSubmitTime: {
                serializedName: "requestSubmitTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Composite",
                    className: "LimitObject"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResourceName"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isQuotaApplicable: {
                serializedName: "isQuotaApplicable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ServiceErrorDetail"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const QuotaRequestSubmitResponse = {
    type: {
        name: "Composite",
        className: "QuotaRequestSubmitResponse",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "QuotaRequestProperties"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaRequestSubmitResponse202 = {
    type: {
        name: "Composite",
        className: "QuotaRequestSubmitResponse202",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "QuotaRequestStatusDetails"
                }
            }
        }
    }
};
const QuotaRequestStatusDetails = {
    type: {
        name: "Composite",
        className: "QuotaRequestStatusDetails",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Composite",
                    className: "LimitObject"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "ResourceName"
                }
            },
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const LimitObject = {
    serializedName: "LimitValue",
    type: {
        name: "Composite",
        className: "LimitObject",
        uberParent: "LimitJsonObject",
        polymorphicDiscriminator: LimitJsonObject.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, LimitJsonObject.type.modelProperties), { value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Number"
                }
            }, limitType: {
                serializedName: "limitType",
                type: {
                    name: "String"
                }
            } })
    }
};
const UsagesGetHeaders = {
    type: {
        name: "Composite",
        className: "UsagesGetHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UsagesListHeaders = {
    type: {
        name: "Composite",
        className: "UsagesListHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UsagesListNextHeaders = {
    type: {
        name: "Composite",
        className: "UsagesListNextHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaGetHeaders = {
    type: {
        name: "Composite",
        className: "QuotaGetHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaListHeaders = {
    type: {
        name: "Composite",
        className: "QuotaListHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaListNextHeaders = {
    type: {
        name: "Composite",
        className: "QuotaListNextHeaders",
        modelProperties: {
            eTag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    LimitJsonObject: LimitJsonObject,
    "LimitJsonObject.LimitValue": LimitObject
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CommonResourceProperties: CommonResourceProperties,
    CreateGenericQuotaRequestParameters: CreateGenericQuotaRequestParameters,
    CurrentQuotaLimitBase: CurrentQuotaLimitBase,
    CurrentUsagesBase: CurrentUsagesBase,
    ExceptionResponse: ExceptionResponse,
    LimitJsonObject: LimitJsonObject,
    LimitObject: LimitObject,
    OperationDisplay: OperationDisplay,
    OperationList: OperationList,
    OperationResponse: OperationResponse,
    QuotaGetHeaders: QuotaGetHeaders,
    QuotaLimits: QuotaLimits,
    QuotaLimitsResponse: QuotaLimitsResponse,
    QuotaListHeaders: QuotaListHeaders,
    QuotaListNextHeaders: QuotaListNextHeaders,
    QuotaProperties: QuotaProperties,
    QuotaRequestDetails: QuotaRequestDetails,
    QuotaRequestDetailsList: QuotaRequestDetailsList,
    QuotaRequestOneResourceProperties: QuotaRequestOneResourceProperties,
    QuotaRequestOneResourceSubmitResponse: QuotaRequestOneResourceSubmitResponse,
    QuotaRequestProperties: QuotaRequestProperties,
    QuotaRequestStatusDetails: QuotaRequestStatusDetails,
    QuotaRequestSubmitResponse: QuotaRequestSubmitResponse,
    QuotaRequestSubmitResponse202: QuotaRequestSubmitResponse202,
    ResourceName: ResourceName,
    ServiceError: ServiceError,
    ServiceErrorDetail: ServiceErrorDetail,
    SubRequest: SubRequest,
    UsagesGetHeaders: UsagesGetHeaders,
    UsagesLimits: UsagesLimits,
    UsagesListHeaders: UsagesListHeaders,
    UsagesListNextHeaders: UsagesListNextHeaders,
    UsagesObject: UsagesObject,
    UsagesProperties: UsagesProperties,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-02-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const createQuotaRequest = {
    parameterPath: "createQuotaRequest",
    mapper: CurrentQuotaLimitBase
};
const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Usages operations. */
class UsagesImpl {
    /**
     * Initialize a new instance of the class Usages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of current usage for all resources for the scope specified.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(scope, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the current usage of a resource.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(resourceName, scope, options) {
        return this.client.sendOperationRequest({ resourceName, scope, options }, getOperationSpec$2);
    }
    /**
     * Get a list of current usage for all resources for the scope specified.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/{scope}/providers/Microsoft.Quota/usages/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CurrentUsagesBase,
            headersMapper: UsagesGetHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, resourceName, scope],
    headerParameters: [accept],
    serializer: serializer$3
};
const listOperationSpec$3 = {
    path: "/{scope}/providers/Microsoft.Quota/usages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UsagesLimits,
            headersMapper: UsagesListHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UsagesLimits,
            headersMapper: UsagesListNextHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Quota operations. */
class QuotaImpl {
    /**
     * Initialize a new instance of the class Quota class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of current quota limits of all resources for the specified scope. The response from this
     * GET operation can be leveraged to submit requests to update a quota.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(scope, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the quota limit of a resource. The response can be used to determine the remaining quota to
     * calculate a new quota limit that can be submitted with a PUT request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(resourceName, scope, options) {
        return this.client.sendOperationRequest({ resourceName, scope, options }, getOperationSpec$1);
    }
    /**
     * Create or update the quota limit for the specified resource with the requested value. To update the
     * quota, follow these steps:
     * 1. Use the GET operation for quotas and usages to determine how much quota remains for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceName, scope, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, scope, createQuotaRequest, options },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "original-uri"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the quota limit for the specified resource with the requested value. To update the
     * quota, follow these steps:
     * 1. Use the GET operation for quotas and usages to determine how much quota remains for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceName, scope, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceName, scope, createQuotaRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the quota limit for a specific resource to the specified value:
     * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, scope, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, scope, createQuotaRequest, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "original-uri"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the quota limit for a specific resource to the specified value:
     * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, scope, createQuotaRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, scope, createQuotaRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a list of current quota limits of all resources for the specified scope. The response from this
     * GET operation can be leveraged to submit requests to update a quota.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CurrentQuotaLimitBase,
            headersMapper: QuotaGetHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, resourceName, scope],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CurrentQuotaLimitBase
        },
        201: {
            bodyMapper: CurrentQuotaLimitBase
        },
        202: {
            bodyMapper: CurrentQuotaLimitBase
        },
        204: {
            bodyMapper: CurrentQuotaLimitBase
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: createQuotaRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, resourceName, scope],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: CurrentQuotaLimitBase
        },
        201: {
            bodyMapper: CurrentQuotaLimitBase
        },
        202: {
            bodyMapper: CurrentQuotaLimitBase
        },
        204: {
            bodyMapper: CurrentQuotaLimitBase
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: createQuotaRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, resourceName, scope],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listOperationSpec$2 = {
    path: "/{scope}/providers/Microsoft.Quota/quotas",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaLimits,
            headersMapper: QuotaListHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaLimits,
            headersMapper: QuotaListNextHeaders
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing QuotaRequestStatus operations. */
class QuotaRequestStatusImpl {
    /**
     * Initialize a new instance of the class QuotaRequestStatus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is
     * made. Use the **oData** filter to select quota requests.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(scope, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the quota request details and status by quota request ID for the resources of the resource
     * provider at a specific location. The quota request ID **id** is returned in the response of the PUT
     * operation.
     * @param id Quota request ID.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(id, scope, options) {
        return this.client.sendOperationRequest({ id, scope, options }, getOperationSpec);
    }
    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is
     * made. Use the **oData** filter to select quota requests.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotaRequests/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaRequestDetails
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, scope, id],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/{scope}/providers/Microsoft.Quota/quotaRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaRequestDetailsList
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        top,
        skiptoken
    ],
    urlParameters: [$host, scope],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: QuotaRequestDetailsList
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [$host, scope, nextLink],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing QuotaOperation operations. */
class QuotaOperationImpl {
    /**
     * Initialize a new instance of the class QuotaOperation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the operations supported by the Microsoft.Quota resource provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the operations supported by the Microsoft.Quota resource provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Quota/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationList
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureQuotaExtensionAPI extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureQuotaExtensionAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-quota/1.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-02-01";
        this.usages = new UsagesImpl(this);
        this.quota = new QuotaImpl(this);
        this.quotaRequestStatus = new QuotaRequestStatusImpl(this);
        this.quotaOperation = new QuotaOperationImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AzureQuotaExtensionAPI = AzureQuotaExtensionAPI;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
