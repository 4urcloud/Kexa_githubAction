import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

export declare class AzureQuotaExtensionAPI extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the AzureQuotaExtensionAPI class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: AzureQuotaExtensionAPIOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    usages: Usages;
    quota: Quota;
    quotaRequestStatus: QuotaRequestStatus;
    quotaOperation: QuotaOperation;
}

/** Optional parameters. */
export declare interface AzureQuotaExtensionAPIOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Resource properties. */
export declare interface CommonResourceProperties {
    /**
     * Resource ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type. Example: "Microsoft.Quota/quotas"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Quota change requests information. */
export declare interface CreateGenericQuotaRequestParameters {
    /** Quota change requests. */
    value?: CurrentQuotaLimitBase[];
}

/** Quota limit. */
export declare interface CurrentQuotaLimitBase {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Quota properties for the specified resource, based on the API called, Quotas or Usages. */
    properties?: QuotaProperties;
}

/** Resource usage. */
export declare interface CurrentUsagesBase {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Usage properties for the specified resource. */
    properties?: UsagesProperties;
}

/** Error. */
export declare interface ExceptionResponse {
    /** API error details. */
    error?: ServiceError;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link LimitType} that the service accepts. */
export declare enum KnownLimitType {
    /** LimitValue */
    LimitValue = "LimitValue"
}

/** Known values of {@link QuotaLimitTypes} that the service accepts. */
export declare enum KnownQuotaLimitTypes {
    /** Independent */
    Independent = "Independent",
    /** Shared */
    Shared = "Shared"
}

/** Known values of {@link QuotaRequestState} that the service accepts. */
export declare enum KnownQuotaRequestState {
    /** Accepted */
    Accepted = "Accepted",
    /** Invalid */
    Invalid = "Invalid",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** InProgress */
    InProgress = "InProgress"
}

/** Known values of {@link UsagesTypes} that the service accepts. */
export declare enum KnownUsagesTypes {
    /** Individual */
    Individual = "Individual",
    /** Combined */
    Combined = "Combined"
}

/** LimitJson abstract class. */
export declare interface LimitJsonObject {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    limitObjectType: "LimitValue";
}

export declare type LimitJsonObjectUnion = LimitJsonObject | LimitObject;

/** The resource quota limit value. */
export declare interface LimitObject extends LimitJsonObject {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    limitObjectType: "LimitValue";
    /** The quota/limit value */
    value: number;
    /** The quota or usages limit types. */
    limitType?: QuotaLimitTypes;
}

/**
 * Defines values for LimitType. \
 * {@link KnownLimitType} can be used interchangeably with LimitType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LimitValue**
 */
export declare type LimitType = string;

export declare interface OperationDisplay {
    /** Provider name. */
    provider?: string;
    /** Resource name. */
    resource?: string;
    /** Operation name. */
    operation?: string;
    /** Operation description. */
    description?: string;
}

export declare interface OperationList {
    value?: OperationResponse[];
    /** URL to get the next page of items. */
    nextLink?: string;
}

export declare interface OperationResponse {
    name?: string;
    display?: OperationDisplay;
    origin?: string;
}

/** Interface representing a Quota. */
export declare interface Quota {
    /**
     * Get a list of current quota limits of all resources for the specified scope. The response from this
     * GET operation can be leveraged to submit requests to update a quota.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope: string, options?: QuotaListOptionalParams): PagedAsyncIterableIterator<CurrentQuotaLimitBase>;
    /**
     * Get the quota limit of a resource. The response can be used to determine the remaining quota to
     * calculate a new quota limit that can be submitted with a PUT request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(resourceName: string, scope: string, options?: QuotaGetOptionalParams): Promise<QuotaGetResponse>;
    /**
     * Create or update the quota limit for the specified resource with the requested value. To update the
     * quota, follow these steps:
     * 1. Use the GET operation for quotas and usages to determine how much quota remains for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceName: string, scope: string, createQuotaRequest: CurrentQuotaLimitBase, options?: QuotaCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<QuotaCreateOrUpdateResponse>, QuotaCreateOrUpdateResponse>>;
    /**
     * Create or update the quota limit for the specified resource with the requested value. To update the
     * quota, follow these steps:
     * 1. Use the GET operation for quotas and usages to determine how much quota remains for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceName: string, scope: string, createQuotaRequest: CurrentQuotaLimitBase, options?: QuotaCreateOrUpdateOptionalParams): Promise<QuotaCreateOrUpdateResponse>;
    /**
     * Update the quota limit for a specific resource to the specified value:
     * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceName: string, scope: string, createQuotaRequest: CurrentQuotaLimitBase, options?: QuotaUpdateOptionalParams): Promise<SimplePollerLike<OperationState<QuotaUpdateResponse>, QuotaUpdateResponse>>;
    /**
     * Update the quota limit for a specific resource to the specified value:
     * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName: string, scope: string, createQuotaRequest: CurrentQuotaLimitBase, options?: QuotaUpdateOptionalParams): Promise<QuotaUpdateResponse>;
}

/** Optional parameters. */
export declare interface QuotaCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type QuotaCreateOrUpdateResponse = CurrentQuotaLimitBase;

/** Defines headers for Quota_get operation. */
export declare interface QuotaGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface QuotaGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QuotaGetResponse = QuotaGetHeaders & CurrentQuotaLimitBase;

/** Quota limits. */
export declare interface QuotaLimits {
    /** List of quota limits. */
    value?: CurrentQuotaLimitBase[];
    /** The URI used to fetch the next page of quota limits. When there are no more pages, this string is null. */
    nextLink?: string;
}

/** Quota limits request response. */
export declare interface QuotaLimitsResponse {
    /** List of quota limits with the quota request status. */
    value?: CurrentQuotaLimitBase[];
    /** The URI used to fetch the next page of quota limits. When there are no more pages, this is null. */
    nextLink?: string;
}

/**
 * Defines values for QuotaLimitTypes. \
 * {@link KnownQuotaLimitTypes} can be used interchangeably with QuotaLimitTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Independent** \
 * **Shared**
 */
export declare type QuotaLimitTypes = string;

/** Defines headers for Quota_list operation. */
export declare interface QuotaListHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Defines headers for Quota_listNext operation. */
export declare interface QuotaListNextHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface QuotaListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type QuotaListNextResponse = QuotaListNextHeaders & QuotaLimits;

/** Optional parameters. */
export declare interface QuotaListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type QuotaListResponse = QuotaListHeaders & QuotaLimits;

/** Interface representing a QuotaOperation. */
export declare interface QuotaOperation {
    /**
     * List all the operations supported by the Microsoft.Quota resource provider.
     * @param options The options parameters.
     */
    list(options?: QuotaOperationListOptionalParams): PagedAsyncIterableIterator<OperationResponse>;
}

/** Optional parameters. */
export declare interface QuotaOperationListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type QuotaOperationListNextResponse = OperationList;

/** Optional parameters. */
export declare interface QuotaOperationListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type QuotaOperationListResponse = OperationList;

/** Quota properties for the specified resource. */
export declare interface QuotaProperties {
    /** Resource quota limit properties. */
    limit?: LimitJsonObjectUnion;
    /**
     *  The quota units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /** Resource name provided by the resource provider. Use this property name when requesting quota. */
    name?: ResourceName;
    /** The name of the resource type. Optional field. */
    resourceType?: string;
    /**
     * The time period over which the quota usage values are summarized. For example:
     * *P1D (per one day)
     * *PT1M (per one minute)
     * *PT1S (per one second).
     * This parameter is optional because, for some resources like compute, the period is irrelevant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaPeriod?: string;
    /**
     * States if quota can be requested for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isQuotaApplicable?: boolean;
    /** Additional properties for the specific resource provider. */
    properties?: Record<string, unknown>;
}

/** List of quota requests with details. */
export declare interface QuotaRequestDetails {
    /**
     * Quota request ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Quota request name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type. "Microsoft.Quota/quotas".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Quota request details. */
    properties?: QuotaRequestProperties;
}

/** Quota request information. */
export declare interface QuotaRequestDetailsList {
    /** Quota request details. */
    value?: QuotaRequestDetails[];
    /** The URI for fetching the next page of quota limits. When there are no more pages, this string is null. */
    nextLink?: string;
}

/** Quota request. */
export declare interface QuotaRequestOneResourceProperties {
    /**
     * Quota request status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: QuotaRequestState;
    /**
     * User-friendly status message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Quota request submission time. The date conforms to the following ISO 8601 standard format: yyyy-MM-ddTHH:mm:ssZ.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requestSubmitTime?: Date;
    /** Resource quota limit properties. */
    limit?: LimitObject;
    /**
     * Usage information for the current resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentValue?: number;
    /**  The quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. */
    unit?: string;
    /** Resource name provided by the resource provider. Use this property name when requesting quota. */
    name?: ResourceName;
    /** The name of the resource type. Optional field. */
    resourceType?: string;
    /**
     * The time period over which the quota usage values are summarized. For example:
     * *P1D (per one day)
     * *PT1M (per one minute)
     * *PT1S (per one second).
     * This parameter is optional because, for some resources like compute, the period is irrelevant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaPeriod?: string;
    /**
     * States if quota can be requested for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isQuotaApplicable?: boolean;
    /** Error details of the quota request. */
    error?: ServiceErrorDetail;
    /** Additional properties for the specific resource provider. */
    properties?: Record<string, unknown>;
}

/** Quota request response. */
export declare interface QuotaRequestOneResourceSubmitResponse {
    /**
     * Quota request ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the quota request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type. "Microsoft.Quota/ServiceLimitRequests"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Quota request details. */
    properties?: QuotaRequestOneResourceProperties;
}

/** Quota request properties. */
export declare interface QuotaRequestProperties {
    /**
     * The quota request status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: QuotaRequestState;
    /**
     * User-friendly status message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /** Error details of the quota request. */
    error?: ServiceErrorDetail;
    /**
     * The quota request submission time. The date conforms to the following format specified by the ISO 8601 standard: yyyy-MM-ddTHH:mm:ssZ
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requestSubmitTime?: Date;
    /** Quota request details. */
    value?: SubRequest[];
}

/**
 * Defines values for QuotaRequestState. \
 * {@link KnownQuotaRequestState} can be used interchangeably with QuotaRequestState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Invalid** \
 * **Succeeded** \
 * **Failed** \
 * **InProgress**
 */
export declare type QuotaRequestState = string;

/** Interface representing a QuotaRequestStatus. */
export declare interface QuotaRequestStatus {
    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is
     * made. Use the **oData** filter to select quota requests.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope: string, options?: QuotaRequestStatusListOptionalParams): PagedAsyncIterableIterator<QuotaRequestDetails>;
    /**
     * Get the quota request details and status by quota request ID for the resources of the resource
     * provider at a specific location. The quota request ID **id** is returned in the response of the PUT
     * operation.
     * @param id Quota request ID.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(id: string, scope: string, options?: QuotaRequestStatusGetOptionalParams): Promise<QuotaRequestStatusGetResponse>;
}

/** Quota request status details. */
export declare interface QuotaRequestStatusDetails {
    /**
     * Quota request status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: QuotaRequestState;
    /**
     * User-friendly message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /** Resource quota limit properties. */
    limit?: LimitObject;
    /**  The quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. */
    unit?: string;
    /** Resource name provided by the resource provider. Use this property name when requesting quota. */
    name?: ResourceName;
    /** The name of the resource type. Optional field. */
    resourceType?: string;
    /**
     * The time period over which the quota usage values are summarized. For example:
     * *P1D (per one day)
     * *PT1M (per one minute)
     * *PT1S (per one second).
     * This parameter is optional because, for some resources like compute, the period is irrelevant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaPeriod?: string;
    /** Additional properties for the specific resource provider. */
    properties?: Record<string, unknown>;
}

/** Optional parameters. */
export declare interface QuotaRequestStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QuotaRequestStatusGetResponse = QuotaRequestDetails;

/** Optional parameters. */
export declare interface QuotaRequestStatusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type QuotaRequestStatusListNextResponse = QuotaRequestDetailsList;

/** Optional parameters. */
export declare interface QuotaRequestStatusListOptionalParams extends coreClient.OperationOptions {
    /**
     * | Field                    | Supported operators
     * |---------------------|------------------------
     *
     * |requestSubmitTime | ge, le, eq, gt, lt
     *  |provisioningState eq {QuotaRequestState}
     *  |resourceName eq {resourceName}
     *
     */
    filter?: string;
    /** Number of records to return. */
    top?: number;
    /** The **Skiptoken** parameter is used only if a previous operation returned a partial result. If a previous response contains a **nextLink** element, its value includes a **skiptoken** parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
}

/** Contains response data for the list operation. */
export declare type QuotaRequestStatusListResponse = QuotaRequestDetailsList;

/** Quota request response. */
export declare interface QuotaRequestSubmitResponse {
    /**
     * Quota request ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Quota request name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Quota request details. */
    properties?: QuotaRequestProperties;
    /**
     * Resource type. "Microsoft.Quota/quotas".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The quota request response with the quota request ID. */
export declare interface QuotaRequestSubmitResponse202 {
    /**
     * The quota request ID. To check the request status, use the **id** value in a [Quota Request Status](https://docs.microsoft.com/en-us/rest/api/reserved-vm-instances/quotarequeststatus/get) GET operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Operation ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Quota request status. */
    properties?: QuotaRequestStatusDetails;
}

/** Optional parameters. */
export declare interface QuotaUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type QuotaUpdateResponse = CurrentQuotaLimitBase;

/** Name of the resource provided by the resource Provider. When requesting quota, use this property name. */
export declare interface ResourceName {
    /** Resource name. */
    value?: string;
    /**
     * Resource display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly localizedValue?: string;
}

/** API error details. */
export declare interface ServiceError {
    /** Error code. */
    code?: string;
    /** Error message. */
    message?: string;
    /**
     * List of error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ServiceErrorDetail[];
}

/** Error details. */
export declare interface ServiceErrorDetail {
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Request property. */
export declare interface SubRequest {
    /** Resource name. */
    name?: ResourceName;
    /**
     * Resource type for which the quota properties were requested.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**  Quota limit units, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation. */
    unit?: string;
    /**
     * The quota request status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: QuotaRequestState;
    /**
     * User-friendly status message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Quota request ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subRequestId?: string;
    /** Resource quota limit properties. */
    limit?: LimitJsonObjectUnion;
}

/** Interface representing a Usages. */
export declare interface Usages {
    /**
     * Get a list of current usage for all resources for the scope specified.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope: string, options?: UsagesListOptionalParams): PagedAsyncIterableIterator<CurrentUsagesBase>;
    /**
     * Get the current usage of a resource.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(resourceName: string, scope: string, options?: UsagesGetOptionalParams): Promise<UsagesGetResponse>;
}

/** Defines headers for Usages_get operation. */
export declare interface UsagesGetHeaders {
    /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface UsagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type UsagesGetResponse = UsagesGetHeaders & CurrentUsagesBase;

/** Quota limits. */
export declare interface UsagesLimits {
    /** List of quota limits. */
    value?: CurrentUsagesBase[];
    /** The URI used to fetch the next page of quota limits. When there are no more pages, this is null. */
    nextLink?: string;
}

/** Defines headers for Usages_list operation. */
export declare interface UsagesListHeaders {
    /** Current entity state version. It should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Defines headers for Usages_listNext operation. */
export declare interface UsagesListNextHeaders {
    /** Current entity state version. It should be treated as opaque and used to make conditional HTTP requests. */
    eTag?: string;
}

/** Optional parameters. */
export declare interface UsagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type UsagesListNextResponse = UsagesListNextHeaders & UsagesLimits;

/** Optional parameters. */
export declare interface UsagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type UsagesListResponse = UsagesListHeaders & UsagesLimits;

/** The resource usages value. */
export declare interface UsagesObject {
    /** The usages value. */
    value: number;
    /** The quota or usages limit types. */
    usagesType?: UsagesTypes;
}

/** Usage properties for the specified resource. */
export declare interface UsagesProperties {
    /** The quota limit properties for this resource. */
    usages?: UsagesObject;
    /**
     *  The units for the quota usage, such as Count and Bytes. When requesting quota, use the **unit** value returned in the GET response in the request body of your PUT operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /** Resource name provided by the resource provider. Use this property name when requesting quota. */
    name?: ResourceName;
    /** The name of the resource type. Optional field. */
    resourceType?: string;
    /**
     * The time period for the summary of the quota usage values. For example:
     * *P1D (per one day)
     * *PT1M (per one minute)
     * *PT1S (per one second).
     * This parameter is optional because it is not relevant for all resources such as compute.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaPeriod?: string;
    /**
     * States if quota can be requested for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isQuotaApplicable?: boolean;
    /** Additional properties for the specific resource provider. */
    properties?: Record<string, unknown>;
}

/**
 * Defines values for UsagesTypes. \
 * {@link KnownUsagesTypes} can be used interchangeably with UsagesTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Individual** \
 * **Combined**
 */
export declare type UsagesTypes = string;

export { }
