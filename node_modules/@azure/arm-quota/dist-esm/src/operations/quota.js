/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Quota operations. */
export class QuotaImpl {
    /**
     * Initialize a new instance of the class Quota class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of current quota limits of all resources for the specified scope. The response from this
     * GET operation can be leveraged to submit requests to update a quota.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(scope, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the quota limit of a resource. The response can be used to determine the remaining quota to
     * calculate a new quota limit that can be submitted with a PUT request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(resourceName, scope, options) {
        return this.client.sendOperationRequest({ resourceName, scope, options }, getOperationSpec);
    }
    /**
     * Create or update the quota limit for the specified resource with the requested value. To update the
     * quota, follow these steps:
     * 1. Use the GET operation for quotas and usages to determine how much quota remains for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceName, scope, createQuotaRequest, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, scope, createQuotaRequest, options },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "original-uri"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update the quota limit for the specified resource with the requested value. To update the
     * quota, follow these steps:
     * 1. Use the GET operation for quotas and usages to determine how much quota remains for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota request payload.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceName, scope, createQuotaRequest, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceName, scope, createQuotaRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the quota limit for a specific resource to the specified value:
     * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, scope, createQuotaRequest, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, scope, createQuotaRequest, options },
                spec: updateOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "original-uri"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the quota limit for a specific resource to the specified value:
     * 1. Use the Usages-GET and Quota-GET operations to determine the remaining quota for the specific
     * resource and to calculate the new quota limit. These steps are detailed in [this
     * example](https://techcommunity.microsoft.com/t5/azure-governance-and-management/using-the-new-quota-rest-api/ba-p/2183670).
     * 2. Use this PUT operation to update the quota limit. Please check the URI in location header for the
     * detailed status of the request.
     * @param resourceName Resource name for a given resource provider. For example:
     *                     - SKU name for Microsoft.Compute
     *                     - SKU or TotalLowPriorityCores for Microsoft.MachineLearningServices
     *                      For Microsoft.Network PublicIPAddresses.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param createQuotaRequest Quota requests payload.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, scope, createQuotaRequest, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, scope, createQuotaRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a list of current quota limits of all resources for the specified scope. The response from this
     * GET operation can be leveraged to submit requests to update a quota.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CurrentQuotaLimitBase,
            headersMapper: Mappers.QuotaGetHeaders
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.resourceName, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        201: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        202: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        204: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    requestBody: Parameters.createQuotaRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.resourceName, Parameters.scope],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        201: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        202: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        204: {
            bodyMapper: Mappers.CurrentQuotaLimitBase
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    requestBody: Parameters.createQuotaRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.resourceName, Parameters.scope],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotas",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QuotaLimits,
            headersMapper: Mappers.QuotaListHeaders
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QuotaLimits,
            headersMapper: Mappers.QuotaListNextHeaders
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=quota.js.map