/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing QuotaRequestStatus operations. */
export class QuotaRequestStatusImpl {
    /**
     * Initialize a new instance of the class QuotaRequestStatus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is
     * made. Use the **oData** filter to select quota requests.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    list(scope, options) {
        const iter = this.listPagingAll(scope, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(scope, options, settings);
            }
        };
    }
    listPagingPage(scope, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(scope, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(scope, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(scope, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(scope, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the quota request details and status by quota request ID for the resources of the resource
     * provider at a specific location. The quota request ID **id** is returned in the response of the PUT
     * operation.
     * @param id Quota request ID.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    get(id, scope, options) {
        return this.client.sendOperationRequest({ id, scope, options }, getOperationSpec);
    }
    /**
     * For the specified scope, get the current quota requests for a one year period ending at the time is
     * made. Use the **oData** filter to select quota requests.
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param options The options parameters.
     */
    _list(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param scope The target Azure resource URI. For example,
     *              `/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/qms-test/providers/Microsoft.Batch/batchAccounts/testAccount/`.
     *              This is the target Azure resource URI for the List GET operation. If a `{resourceName}` is added
     *              after `/quotas`, then it's the target Azure resource URI in the GET operation for the specific
     *              resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(scope, nextLink, options) {
        return this.client.sendOperationRequest({ scope, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotaRequests/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QuotaRequestDetails
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/{scope}/providers/Microsoft.Quota/quotaRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QuotaRequestDetailsList
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.top,
        Parameters.skiptoken
    ],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.QuotaRequestDetailsList
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    urlParameters: [Parameters.$host, Parameters.scope, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=quotaRequestStatus.js.map