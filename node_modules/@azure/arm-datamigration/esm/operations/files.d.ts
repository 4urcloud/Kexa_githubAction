import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { DataMigrationServiceClientContext } from "../dataMigrationServiceClientContext";
/** Class representing a Files. */
export declare class Files {
    private readonly client;
    /**
     * Create a Files.
     * @param {DataMigrationServiceClientContext} client Reference to the service client.
     */
    constructor(client: DataMigrationServiceClientContext);
    /**
     * The project resource is a nested resource representing a stored migration project. This method
     * returns a list of files owned by a project resource.
     * @summary Get files in a project
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param [options] The optional parameters
     * @returns Promise<Models.FilesListResponse>
     */
    list(groupName: string, serviceName: string, projectName: string, options?: msRest.RequestOptionsBase): Promise<Models.FilesListResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param callback The callback
     */
    list(groupName: string, serviceName: string, projectName: string, callback: msRest.ServiceCallback<Models.FileList>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param options The optional parameters
     * @param callback The callback
     */
    list(groupName: string, serviceName: string, projectName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FileList>): void;
    /**
     * The files resource is a nested, proxy-only resource representing a file stored under the project
     * resource. This method retrieves information about a file.
     * @summary Get file information
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param [options] The optional parameters
     * @returns Promise<Models.FilesGetResponse>
     */
    get(groupName: string, serviceName: string, projectName: string, fileName: string, options?: msRest.RequestOptionsBase): Promise<Models.FilesGetResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param callback The callback
     */
    get(groupName: string, serviceName: string, projectName: string, fileName: string, callback: msRest.ServiceCallback<Models.ProjectFile>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param options The optional parameters
     * @param callback The callback
     */
    get(groupName: string, serviceName: string, projectName: string, fileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectFile>): void;
    /**
     * The PUT method creates a new file or updates an existing one.
     * @summary Create a file resource
     * @param parameters Information about the file
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param [options] The optional parameters
     * @returns Promise<Models.FilesCreateOrUpdateResponse>
     */
    createOrUpdate(parameters: Models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options?: msRest.RequestOptionsBase): Promise<Models.FilesCreateOrUpdateResponse>;
    /**
     * @param parameters Information about the file
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param callback The callback
     */
    createOrUpdate(parameters: Models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, callback: msRest.ServiceCallback<Models.ProjectFile>): void;
    /**
     * @param parameters Information about the file
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(parameters: Models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectFile>): void;
    /**
     * This method deletes a file.
     * @summary Delete file
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, fileName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param callback The callback
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, fileName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, fileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * This method updates an existing file.
     * @summary Update a file
     * @param parameters Information about the file
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param [options] The optional parameters
     * @returns Promise<Models.FilesUpdateResponse>
     */
    update(parameters: Models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options?: msRest.RequestOptionsBase): Promise<Models.FilesUpdateResponse>;
    /**
     * @param parameters Information about the file
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param callback The callback
     */
    update(parameters: Models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, callback: msRest.ServiceCallback<Models.ProjectFile>): void;
    /**
     * @param parameters Information about the file
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param options The optional parameters
     * @param callback The callback
     */
    update(parameters: Models.ProjectFile, groupName: string, serviceName: string, projectName: string, fileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectFile>): void;
    /**
     * This method is used for requesting storage information using which contents of the file can be
     * downloaded.
     * @summary Request storage information for downloading the file content
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param [options] The optional parameters
     * @returns Promise<Models.FilesReadResponse>
     */
    read(groupName: string, serviceName: string, projectName: string, fileName: string, options?: msRest.RequestOptionsBase): Promise<Models.FilesReadResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param callback The callback
     */
    read(groupName: string, serviceName: string, projectName: string, fileName: string, callback: msRest.ServiceCallback<Models.FileStorageInfo>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param options The optional parameters
     * @param callback The callback
     */
    read(groupName: string, serviceName: string, projectName: string, fileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FileStorageInfo>): void;
    /**
     * This method is used for requesting information for reading and writing the file content.
     * @summary Request information for reading and writing file content.
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param [options] The optional parameters
     * @returns Promise<Models.FilesReadWriteResponse>
     */
    readWrite(groupName: string, serviceName: string, projectName: string, fileName: string, options?: msRest.RequestOptionsBase): Promise<Models.FilesReadWriteResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param callback The callback
     */
    readWrite(groupName: string, serviceName: string, projectName: string, fileName: string, callback: msRest.ServiceCallback<Models.FileStorageInfo>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param fileName Name of the File
     * @param options The optional parameters
     * @param callback The callback
     */
    readWrite(groupName: string, serviceName: string, projectName: string, fileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FileStorageInfo>): void;
    /**
     * The project resource is a nested resource representing a stored migration project. This method
     * returns a list of files owned by a project resource.
     * @summary Get files in a project
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.FilesListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.FilesListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FileList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FileList>): void;
}
//# sourceMappingURL=files.d.ts.map