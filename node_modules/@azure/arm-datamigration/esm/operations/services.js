/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/servicesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Services. */
var Services = /** @class */ (function () {
    /**
     * Create a Services.
     * @param {DataMigrationServiceClientContext} client Reference to the service client.
     */
    function Services(client) {
        this.client = client;
    }
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * The PUT method creates a new service or updates an existing one. When a service is updated,
     * existing child resources (i.e. tasks) are unaffected. Services currently support a single kind,
     * "vm", which refers to a VM-based service, although other kinds may be added in the future. This
     * method can change the kind, SKU, and network of the service, but if tasks are currently running
     * (i.e. the service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider
     * will reply when successful with 200 OK or 201 Created. Long-running operations use the
     * provisioningState property.
     * @summary Create or update DMS Instance
     * @param parameters Information about the service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<Models.ServicesCreateOrUpdateResponse>
     */
    Services.prototype.createOrUpdate = function (parameters, groupName, serviceName, options) {
        return this.beginCreateOrUpdate(parameters, groupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Services.prototype.get = function (groupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * The DELETE method deletes a service. Any running tasks will be canceled.
     * @summary Delete DMS Service Instance
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Services.prototype.deleteMethod = function (groupName, serviceName, options) {
        return this.beginDeleteMethod(groupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * The PATCH method updates an existing service. This method can change the kind, SKU, and network
     * of the service, but if tasks are currently running (i.e. the service is busy), this will fail
     * with 400 Bad Request ("ServiceIsBusy").
     * @summary Create or update DMS Service Instance
     * @param parameters Information about the service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<Models.ServicesUpdateResponse>
     */
    Services.prototype.update = function (parameters, groupName, serviceName, options) {
        return this.beginUpdate(parameters, groupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Services.prototype.checkStatus = function (groupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, checkStatusOperationSpec, callback);
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This action starts the service and the service can be used for data migration.
     * @summary Start service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Services.prototype.start = function (groupName, serviceName, options) {
        return this.beginStart(groupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This action stops the service and the service cannot be used for data migration. The service
     * owner won't be billed when the service is stopped.
     * @summary Stop service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Services.prototype.stop = function (groupName, serviceName, options) {
        return this.beginStop(groupName, serviceName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Services.prototype.listSkus = function (groupName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, listSkusOperationSpec, callback);
    };
    Services.prototype.checkChildrenNameAvailability = function (groupName, serviceName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            parameters: parameters,
            options: options
        }, checkChildrenNameAvailabilityOperationSpec, callback);
    };
    Services.prototype.listByResourceGroup = function (groupName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    Services.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Services.prototype.checkNameAvailability = function (location, parameters, options, callback) {
        return this.client.sendOperationRequest({
            location: location,
            parameters: parameters,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * The PUT method creates a new service or updates an existing one. When a service is updated,
     * existing child resources (i.e. tasks) are unaffected. Services currently support a single kind,
     * "vm", which refers to a VM-based service, although other kinds may be added in the future. This
     * method can change the kind, SKU, and network of the service, but if tasks are currently running
     * (i.e. the service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider
     * will reply when successful with 200 OK or 201 Created. Long-running operations use the
     * provisioningState property.
     * @summary Create or update DMS Instance
     * @param parameters Information about the service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginCreateOrUpdate = function (parameters, groupName, serviceName, options) {
        return this.client.sendLRORequest({
            parameters: parameters,
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * The DELETE method deletes a service. Any running tasks will be canceled.
     * @summary Delete DMS Service Instance
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginDeleteMethod = function (groupName, serviceName, options) {
        return this.client.sendLRORequest({
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * The PATCH method updates an existing service. This method can change the kind, SKU, and network
     * of the service, but if tasks are currently running (i.e. the service is busy), this will fail
     * with 400 Bad Request ("ServiceIsBusy").
     * @summary Create or update DMS Service Instance
     * @param parameters Information about the service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginUpdate = function (parameters, groupName, serviceName, options) {
        return this.client.sendLRORequest({
            parameters: parameters,
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This action starts the service and the service can be used for data migration.
     * @summary Start service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginStart = function (groupName, serviceName, options) {
        return this.client.sendLRORequest({
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, beginStartOperationSpec, options);
    };
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This action stops the service and the service cannot be used for data migration. The service
     * owner won't be billed when the service is stopped.
     * @summary Stop service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Services.prototype.beginStop = function (groupName, serviceName, options) {
        return this.client.sendLRORequest({
            groupName: groupName,
            serviceName: serviceName,
            options: options
        }, beginStopOperationSpec, options);
    };
    Services.prototype.listSkusNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listSkusNextOperationSpec, callback);
    };
    Services.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    Services.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Services;
}());
export { Services };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationService
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var checkStatusOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkStatus",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationServiceStatusResponse
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var listSkusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/skus",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceSkuList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var checkChildrenNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.NameAvailabilityRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.NameAvailabilityResponse
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationServiceList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/services",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationServiceList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.location
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.NameAvailabilityRequest), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.NameAvailabilityResponse
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DataMigrationService), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationService
        },
        201: {
            bodyMapper: Mappers.DataMigrationService
        },
        202: {},
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.deleteRunningTasks,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DataMigrationService), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationService
        },
        202: {},
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var beginStartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/start",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var beginStopOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/stop",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var listSkusNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceSkuList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationServiceList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataMigrationServiceList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=services.js.map