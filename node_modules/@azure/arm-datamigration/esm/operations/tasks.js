/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/tasksMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Tasks. */
var Tasks = /** @class */ (function () {
    /**
     * Create a Tasks.
     * @param {DataMigrationServiceClientContext} client Reference to the service client.
     */
    function Tasks(client) {
        this.client = client;
    }
    Tasks.prototype.list = function (groupName, serviceName, projectName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            projectName: projectName,
            options: options
        }, listOperationSpec, callback);
    };
    Tasks.prototype.createOrUpdate = function (parameters, groupName, serviceName, projectName, taskName, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            groupName: groupName,
            serviceName: serviceName,
            projectName: projectName,
            taskName: taskName,
            options: options
        }, createOrUpdateOperationSpec, callback);
    };
    Tasks.prototype.get = function (groupName, serviceName, projectName, taskName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            projectName: projectName,
            taskName: taskName,
            options: options
        }, getOperationSpec, callback);
    };
    Tasks.prototype.deleteMethod = function (groupName, serviceName, projectName, taskName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            projectName: projectName,
            taskName: taskName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Tasks.prototype.update = function (parameters, groupName, serviceName, projectName, taskName, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            groupName: groupName,
            serviceName: serviceName,
            projectName: projectName,
            taskName: taskName,
            options: options
        }, updateOperationSpec, callback);
    };
    Tasks.prototype.cancel = function (groupName, serviceName, projectName, taskName, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            projectName: projectName,
            taskName: taskName,
            options: options
        }, cancelOperationSpec, callback);
    };
    Tasks.prototype.command = function (groupName, serviceName, projectName, taskName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            groupName: groupName,
            serviceName: serviceName,
            projectName: projectName,
            taskName: taskName,
            parameters: parameters,
            options: options
        }, commandOperationSpec, callback);
    };
    Tasks.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Tasks;
}());
export { Tasks };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName,
        Parameters.projectName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.taskType
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TaskList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var createOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName,
        Parameters.projectName,
        Parameters.taskName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ProjectTask), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTask
        },
        201: {
            bodyMapper: Mappers.ProjectTask
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName,
        Parameters.projectName,
        Parameters.taskName
    ],
    queryParameters: [
        Parameters.expand,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTask
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName,
        Parameters.projectName,
        Parameters.taskName
    ],
    queryParameters: [
        Parameters.deleteRunningTasks,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName,
        Parameters.projectName,
        Parameters.taskName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ProjectTask), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTask
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var cancelOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/cancel",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName,
        Parameters.projectName,
        Parameters.taskName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ProjectTask
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var commandOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/command",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.groupName,
        Parameters.serviceName,
        Parameters.projectName,
        Parameters.taskName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.CommandProperties), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CommandProperties
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.TaskList
        },
        default: {
            bodyMapper: Mappers.ApiError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=tasks.js.map