import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { DataMigrationServiceClientContext } from "../dataMigrationServiceClientContext";
/** Class representing a ServiceTasks. */
export declare class ServiceTasks {
    private readonly client;
    /**
     * Create a ServiceTasks.
     * @param {DataMigrationServiceClientContext} client Reference to the service client.
     */
    constructor(client: DataMigrationServiceClientContext);
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This method returns a list of service level tasks owned by a service resource. Some tasks may
     * have a status of Unknown, which indicates that an error occurred while querying the status of
     * that task.
     * @summary Get service level tasks for a service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTasksListResponse>
     */
    list(groupName: string, serviceName: string, options?: Models.ServiceTasksListOptionalParams): Promise<Models.ServiceTasksListResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param callback The callback
     */
    list(groupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.TaskList>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param options The optional parameters
     * @param callback The callback
     */
    list(groupName: string, serviceName: string, options: Models.ServiceTasksListOptionalParams, callback: msRest.ServiceCallback<Models.TaskList>): void;
    /**
     * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The PUT method creates a new service task or updates an existing one, although since
     * service tasks have no mutable custom properties, there is little reason to update an existing
     * one.
     * @summary Create or update service task
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTasksCreateOrUpdateResponse>
     */
    createOrUpdate(parameters: Models.ProjectTask, groupName: string, serviceName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTasksCreateOrUpdateResponse>;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param callback The callback
     */
    createOrUpdate(parameters: Models.ProjectTask, groupName: string, serviceName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(parameters: Models.ProjectTask, groupName: string, serviceName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The GET method retrieves information about a service task.
     * @summary Get service task information
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTasksGetResponse>
     */
    get(groupName: string, serviceName: string, taskName: string, options?: Models.ServiceTasksGetOptionalParams): Promise<Models.ServiceTasksGetResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param callback The callback
     */
    get(groupName: string, serviceName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    get(groupName: string, serviceName: string, taskName: string, options: Models.ServiceTasksGetOptionalParams, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The DELETE method deletes a service task, canceling it first if it's running.
     * @summary Delete service task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(groupName: string, serviceName: string, taskName: string, options?: Models.ServiceTasksDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param callback The callback
     */
    deleteMethod(groupName: string, serviceName: string, taskName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(groupName: string, serviceName: string, taskName: string, options: Models.ServiceTasksDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The PATCH method updates an existing service task, but since service tasks have no
     * mutable custom properties, there is little reason to do so.
     * @summary Create or update service task
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTasksUpdateResponse>
     */
    update(parameters: Models.ProjectTask, groupName: string, serviceName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTasksUpdateResponse>;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param callback The callback
     */
    update(parameters: Models.ProjectTask, groupName: string, serviceName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    update(parameters: Models.ProjectTask, groupName: string, serviceName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. This method cancels a service task if it's currently queued or running.
     * @summary Cancel a service task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTasksCancelResponse>
     */
    cancel(groupName: string, serviceName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTasksCancelResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param callback The callback
     */
    cancel(groupName: string, serviceName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    cancel(groupName: string, serviceName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This method returns a list of service level tasks owned by a service resource. Some tasks may
     * have a status of Unknown, which indicates that an error occurred while querying the status of
     * that task.
     * @summary Get service level tasks for a service
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTasksListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTasksListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TaskList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaskList>): void;
}
//# sourceMappingURL=serviceTasks.d.ts.map