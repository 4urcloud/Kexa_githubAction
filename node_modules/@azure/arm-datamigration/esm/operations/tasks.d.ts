import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { DataMigrationServiceClientContext } from "../dataMigrationServiceClientContext";
/** Class representing a Tasks. */
export declare class Tasks {
    private readonly client;
    /**
     * Create a Tasks.
     * @param {DataMigrationServiceClientContext} client Reference to the service client.
     */
    constructor(client: DataMigrationServiceClientContext);
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This method returns a list of tasks owned by a service resource. Some tasks may have a status of
     * Unknown, which indicates that an error occurred while querying the status of that task.
     * @summary Get tasks in a service
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param [options] The optional parameters
     * @returns Promise<Models.TasksListResponse>
     */
    list(groupName: string, serviceName: string, projectName: string, options?: Models.TasksListOptionalParams): Promise<Models.TasksListResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param callback The callback
     */
    list(groupName: string, serviceName: string, projectName: string, callback: msRest.ServiceCallback<Models.TaskList>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param options The optional parameters
     * @param callback The callback
     */
    list(groupName: string, serviceName: string, projectName: string, options: Models.TasksListOptionalParams, callback: msRest.ServiceCallback<Models.TaskList>): void;
    /**
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The PUT method creates a new task or updates an existing one, although since tasks
     * have no mutable custom properties, there is little reason to update an existing one.
     * @summary Create or update task
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.TasksCreateOrUpdateResponse>
     */
    createOrUpdate(parameters: Models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksCreateOrUpdateResponse>;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param callback The callback
     */
    createOrUpdate(parameters: Models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(parameters: Models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The GET method retrieves information about a task.
     * @summary Get task information
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.TasksGetResponse>
     */
    get(groupName: string, serviceName: string, projectName: string, taskName: string, options?: Models.TasksGetOptionalParams): Promise<Models.TasksGetResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param callback The callback
     */
    get(groupName: string, serviceName: string, projectName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    get(groupName: string, serviceName: string, projectName: string, taskName: string, options: Models.TasksGetOptionalParams, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The DELETE method deletes a task, canceling it first if it's running.
     * @summary Delete task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, taskName: string, options?: Models.TasksDeleteMethodOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param callback The callback
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, taskName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(groupName: string, serviceName: string, projectName: string, taskName: string, options: Models.TasksDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. The PATCH method updates an existing task, but since tasks have no mutable custom
     * properties, there is little reason to do so.
     * @summary Create or update task
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.TasksUpdateResponse>
     */
    update(parameters: Models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksUpdateResponse>;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param callback The callback
     */
    update(parameters: Models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param parameters Information about the task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    update(parameters: Models.ProjectTask, groupName: string, serviceName: string, projectName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. This method cancels a task if it's currently queued or running.
     * @summary Cancel a task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param [options] The optional parameters
     * @returns Promise<Models.TasksCancelResponse>
     */
    cancel(groupName: string, serviceName: string, projectName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksCancelResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param callback The callback
     */
    cancel(groupName: string, serviceName: string, projectName: string, taskName: string, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param options The optional parameters
     * @param callback The callback
     */
    cancel(groupName: string, serviceName: string, projectName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectTask>): void;
    /**
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS
     * instance. This method executes a command on a running task.
     * @summary Execute a command on a task
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param parameters Command to execute
     * @param [options] The optional parameters
     * @returns Promise<Models.TasksCommandResponse>
     */
    command(groupName: string, serviceName: string, projectName: string, taskName: string, parameters: Models.CommandPropertiesUnion, options?: msRest.RequestOptionsBase): Promise<Models.TasksCommandResponse>;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param parameters Command to execute
     * @param callback The callback
     */
    command(groupName: string, serviceName: string, projectName: string, taskName: string, parameters: Models.CommandPropertiesUnion, callback: msRest.ServiceCallback<Models.CommandPropertiesUnion>): void;
    /**
     * @param groupName Name of the resource group
     * @param serviceName Name of the service
     * @param projectName Name of the project
     * @param taskName Name of the Task
     * @param parameters Command to execute
     * @param options The optional parameters
     * @param callback The callback
     */
    command(groupName: string, serviceName: string, projectName: string, taskName: string, parameters: Models.CommandPropertiesUnion, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommandPropertiesUnion>): void;
    /**
     * The services resource is the top-level resource that represents the Database Migration Service.
     * This method returns a list of tasks owned by a service resource. Some tasks may have a status of
     * Unknown, which indicates that an error occurred while querying the status of that task.
     * @summary Get tasks in a service
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.TasksListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TaskList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaskList>): void;
}
//# sourceMappingURL=tasks.d.ts.map