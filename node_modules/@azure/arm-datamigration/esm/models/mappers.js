/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __assign } from "tslib";
import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
export var CloudError = CloudErrorMapper;
export var BaseResource = BaseResourceMapper;
export var Resource = {
    serializedName: "Resource",
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var TrackedResource = {
    serializedName: "TrackedResource",
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, location: {
                required: true,
                serializedName: "location",
                type: {
                    name: "String"
                }
            } })
    }
};
export var ProjectFileProperties = {
    serializedName: "ProjectFileProperties",
    type: {
        name: "Composite",
        className: "ProjectFileProperties",
        modelProperties: {
            extension: {
                serializedName: "extension",
                type: {
                    name: "String"
                }
            },
            filePath: {
                serializedName: "filePath",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                readOnly: true,
                serializedName: "lastModified",
                type: {
                    name: "DateTime"
                }
            },
            mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            },
            size: {
                readOnly: true,
                serializedName: "size",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var ProjectFile = {
    serializedName: "ProjectFile",
    type: {
        name: "Composite",
        className: "ProjectFile",
        modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProjectFileProperties"
                }
            } })
    }
};
export var ODataError = {
    serializedName: "ODataError",
    type: {
        name: "Composite",
        className: "ODataError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ODataError"
                        }
                    }
                }
            }
        }
    }
};
export var ReportableException = {
    serializedName: "ReportableException",
    type: {
        name: "Composite",
        className: "ReportableException",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            actionableMessage: {
                serializedName: "actionableMessage",
                type: {
                    name: "String"
                }
            },
            filePath: {
                serializedName: "filePath",
                type: {
                    name: "String"
                }
            },
            lineNumber: {
                serializedName: "lineNumber",
                type: {
                    name: "String"
                }
            },
            hResult: {
                serializedName: "hResult",
                type: {
                    name: "Number"
                }
            },
            stackTrace: {
                serializedName: "stackTrace",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateMISyncCompleteCommandOutput = {
    serializedName: "MigrateMISyncCompleteCommandOutput",
    type: {
        name: "Composite",
        className: "MigrateMISyncCompleteCommandOutput",
        modelProperties: {
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateMISyncCompleteCommandInput = {
    serializedName: "MigrateMISyncCompleteCommandInput",
    type: {
        name: "Composite",
        className: "MigrateMISyncCompleteCommandInput",
        modelProperties: {
            sourceDatabaseName: {
                required: true,
                serializedName: "sourceDatabaseName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CommandProperties = {
    serializedName: "CommandProperties",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "commandType",
            clientName: "commandType"
        },
        uberParent: "CommandProperties",
        className: "CommandProperties",
        modelProperties: {
            errors: {
                readOnly: true,
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ODataError"
                        }
                    }
                }
            },
            state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            commandType: {
                required: true,
                serializedName: "commandType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateMISyncCompleteCommandProperties = {
    serializedName: "Migrate.SqlServer.AzureDbSqlMi.Complete",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
        uberParent: "CommandProperties",
        className: "MigrateMISyncCompleteCommandProperties",
        modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateMISyncCompleteCommandInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Composite",
                    className: "MigrateMISyncCompleteCommandOutput"
                }
            } })
    }
};
export var MigrateSyncCompleteCommandOutput = {
    serializedName: "MigrateSyncCompleteCommandOutput",
    type: {
        name: "Composite",
        className: "MigrateSyncCompleteCommandOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            errors: {
                readOnly: true,
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateSyncCompleteCommandInput = {
    serializedName: "MigrateSyncCompleteCommandInput",
    type: {
        name: "Composite",
        className: "MigrateSyncCompleteCommandInput",
        modelProperties: {
            databaseName: {
                required: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            commitTimeStamp: {
                serializedName: "commitTimeStamp",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export var MigrateSyncCompleteCommandProperties = {
    serializedName: "Migrate.Sync.Complete.Database",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
        uberParent: "CommandProperties",
        className: "MigrateSyncCompleteCommandProperties",
        modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateSyncCompleteCommandInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Composite",
                    className: "MigrateSyncCompleteCommandOutput"
                }
            } })
    }
};
export var MigrateSsisTaskOutput = {
    serializedName: "MigrateSsisTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateSsisTaskOutput",
        className: "MigrateSsisTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSsisTaskOutputProjectLevel = {
    serializedName: "SsisProjectLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSsisTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSsisTaskOutput",
        className: "MigrateSsisTaskOutputProjectLevel",
        modelProperties: __assign(__assign({}, MigrateSsisTaskOutput.type.modelProperties), { folderName: {
                readOnly: true,
                serializedName: "folderName",
                type: {
                    name: "String"
                }
            }, projectName: {
                readOnly: true,
                serializedName: "projectName",
                type: {
                    name: "String"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, stage: {
                readOnly: true,
                serializedName: "stage",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var MigrateSsisTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSsisTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSsisTaskOutput",
        className: "MigrateSsisTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateSsisTaskOutput.type.modelProperties), { startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }, stage: {
                readOnly: true,
                serializedName: "stage",
                type: {
                    name: "String"
                }
            } })
    }
};
export var SsisMigrationInfo = {
    serializedName: "SsisMigrationInfo",
    type: {
        name: "Composite",
        className: "SsisMigrationInfo",
        modelProperties: {
            ssisStoreType: {
                serializedName: "ssisStoreType",
                type: {
                    name: "String"
                }
            },
            projectOverwriteOption: {
                serializedName: "projectOverwriteOption",
                type: {
                    name: "String"
                }
            },
            environmentOverwriteOption: {
                serializedName: "environmentOverwriteOption",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ConnectionInfo = {
    serializedName: "ConnectionInfo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        uberParent: "ConnectionInfo",
        className: "ConnectionInfo",
        modelProperties: {
            userName: {
                serializedName: "userName",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MiSqlConnectionInfo = {
    serializedName: "MiSqlConnectionInfo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
        uberParent: "ConnectionInfo",
        className: "MiSqlConnectionInfo",
        modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { managedInstanceResourceId: {
                required: true,
                serializedName: "managedInstanceResourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
export var PostgreSqlConnectionInfo = {
    serializedName: "PostgreSqlConnectionInfo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
        uberParent: "ConnectionInfo",
        className: "PostgreSqlConnectionInfo",
        modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { serverName: {
                required: true,
                serializedName: "serverName",
                type: {
                    name: "String"
                }
            }, databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, port: {
                required: true,
                serializedName: "port",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var OracleConnectionInfo = {
    serializedName: "OracleConnectionInfo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
        uberParent: "ConnectionInfo",
        className: "OracleConnectionInfo",
        modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { dataSource: {
                required: true,
                serializedName: "dataSource",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MySqlConnectionInfo = {
    serializedName: "MySqlConnectionInfo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
        uberParent: "ConnectionInfo",
        className: "MySqlConnectionInfo",
        modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { serverName: {
                required: true,
                serializedName: "serverName",
                type: {
                    name: "String"
                }
            }, port: {
                required: true,
                serializedName: "port",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MongoDbConnectionInfo = {
    serializedName: "MongoDbConnectionInfo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
        uberParent: "ConnectionInfo",
        className: "MongoDbConnectionInfo",
        modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { connectionString: {
                required: true,
                serializedName: "connectionString",
                type: {
                    name: "String"
                }
            } })
    }
};
export var SqlConnectionInfo = {
    serializedName: "SqlConnectionInfo",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
        uberParent: "ConnectionInfo",
        className: "SqlConnectionInfo",
        modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { dataSource: {
                required: true,
                serializedName: "dataSource",
                type: {
                    name: "String"
                }
            }, authentication: {
                serializedName: "authentication",
                type: {
                    name: "String"
                }
            }, encryptConnection: {
                serializedName: "encryptConnection",
                defaultValue: true,
                type: {
                    name: "Boolean"
                }
            }, additionalSettings: {
                serializedName: "additionalSettings",
                type: {
                    name: "String"
                }
            }, trustServerCertificate: {
                serializedName: "trustServerCertificate",
                defaultValue: false,
                type: {
                    name: "Boolean"
                }
            }, platform: {
                serializedName: "platform",
                type: {
                    name: "String"
                }
            } })
    }
};
export var SqlMigrationTaskInput = {
    serializedName: "SqlMigrationTaskInput",
    type: {
        name: "Composite",
        className: "SqlMigrationTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            }
        }
    }
};
export var MigrateSsisTaskInput = {
    serializedName: "MigrateSsisTaskInput",
    type: {
        name: "Composite",
        className: "MigrateSsisTaskInput",
        modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { ssisMigrationInfo: {
                required: true,
                serializedName: "ssisMigrationInfo",
                type: {
                    name: "Composite",
                    className: "SsisMigrationInfo"
                }
            } })
    }
};
export var ProjectTaskProperties = {
    serializedName: "ProjectTaskProperties",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "taskType",
            clientName: "taskType"
        },
        uberParent: "ProjectTaskProperties",
        className: "ProjectTaskProperties",
        modelProperties: {
            errors: {
                readOnly: true,
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ODataError"
                        }
                    }
                }
            },
            state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            commands: {
                readOnly: true,
                serializedName: "commands",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommandProperties"
                        }
                    }
                }
            },
            clientData: {
                serializedName: "clientData",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            taskType: {
                required: true,
                serializedName: "taskType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSsisTaskProperties = {
    serializedName: "Migrate.Ssis",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateSsisTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateSsisTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSsisTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var GetTdeCertificatesSqlTaskOutput = {
    serializedName: "GetTdeCertificatesSqlTaskOutput",
    type: {
        name: "Composite",
        className: "GetTdeCertificatesSqlTaskOutput",
        modelProperties: {
            base64EncodedCertificates: {
                readOnly: true,
                serializedName: "base64EncodedCertificates",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var SelectedCertificateInput = {
    serializedName: "SelectedCertificateInput",
    type: {
        name: "Composite",
        className: "SelectedCertificateInput",
        modelProperties: {
            certificateName: {
                required: true,
                serializedName: "certificateName",
                type: {
                    name: "String"
                }
            },
            password: {
                required: true,
                serializedName: "password",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var FileShare = {
    serializedName: "FileShare",
    type: {
        name: "Composite",
        className: "FileShare",
        modelProperties: {
            userName: {
                serializedName: "userName",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            },
            path: {
                required: true,
                serializedName: "path",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var GetTdeCertificatesSqlTaskInput = {
    serializedName: "GetTdeCertificatesSqlTaskInput",
    type: {
        name: "Composite",
        className: "GetTdeCertificatesSqlTaskInput",
        modelProperties: {
            connectionInfo: {
                required: true,
                serializedName: "connectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            backupFileShare: {
                required: true,
                serializedName: "backupFileShare",
                type: {
                    name: "Composite",
                    className: "FileShare"
                }
            },
            selectedCertificates: {
                required: true,
                serializedName: "selectedCertificates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SelectedCertificateInput"
                        }
                    }
                }
            }
        }
    }
};
export var GetTdeCertificatesSqlTaskProperties = {
    serializedName: "GetTDECertificates.Sql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "GetTdeCertificatesSqlTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "GetTdeCertificatesSqlTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GetTdeCertificatesSqlTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ValidateOracleAzureDbPostgreSqlSyncTaskOutput = {
    serializedName: "ValidateOracleAzureDbPostgreSqlSyncTaskOutput",
    type: {
        name: "Composite",
        className: "ValidateOracleAzureDbPostgreSqlSyncTaskOutput",
        modelProperties: {
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncDatabaseInput = {
    serializedName: "MigrateOracleAzureDbPostgreSqlSyncDatabaseInput",
    type: {
        name: "Composite",
        className: "MigrateOracleAzureDbPostgreSqlSyncDatabaseInput",
        modelProperties: {
            caseManipulation: {
                serializedName: "caseManipulation",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            schemaName: {
                serializedName: "schemaName",
                type: {
                    name: "String"
                }
            },
            tableMap: {
                serializedName: "tableMap",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetDatabaseName: {
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            migrationSetting: {
                serializedName: "migrationSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            sourceSetting: {
                serializedName: "sourceSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetSetting: {
                serializedName: "targetSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncTaskInput = {
    serializedName: "MigrateOracleAzureDbPostgreSqlSyncTaskInput",
    type: {
        name: "Composite",
        className: "MigrateOracleAzureDbPostgreSqlSyncTaskInput",
        modelProperties: {
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateOracleAzureDbPostgreSqlSyncDatabaseInput"
                        }
                    }
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            },
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "OracleConnectionInfo"
                }
            }
        }
    }
};
export var ValidateOracleAzureDbForPostgreSqlSyncTaskProperties = {
    serializedName: "Validate.Oracle.AzureDbPostgreSql.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ValidateOracleAzureDbForPostgreSqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateOracleAzureDbPostgreSqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidateOracleAzureDbPostgreSqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MongoDbError = {
    serializedName: "MongoDbError",
    type: {
        name: "Composite",
        className: "MongoDbError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MongoDbProgress = {
    serializedName: "MongoDbProgress",
    type: {
        name: "Composite",
        className: "MongoDbProgress",
        modelProperties: {
            bytesCopied: {
                required: true,
                serializedName: "bytesCopied",
                type: {
                    name: "Number"
                }
            },
            documentsCopied: {
                required: true,
                serializedName: "documentsCopied",
                type: {
                    name: "Number"
                }
            },
            elapsedTime: {
                required: true,
                serializedName: "elapsedTime",
                type: {
                    name: "String"
                }
            },
            errors: {
                required: true,
                serializedName: "errors",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "MongoDbError"
                        }
                    }
                }
            },
            eventsPending: {
                required: true,
                serializedName: "eventsPending",
                type: {
                    name: "Number"
                }
            },
            eventsReplayed: {
                required: true,
                serializedName: "eventsReplayed",
                type: {
                    name: "Number"
                }
            },
            lastEventTime: {
                serializedName: "lastEventTime",
                type: {
                    name: "DateTime"
                }
            },
            lastReplayTime: {
                serializedName: "lastReplayTime",
                type: {
                    name: "DateTime"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            qualifiedName: {
                serializedName: "qualifiedName",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            },
            state: {
                required: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            totalBytes: {
                required: true,
                serializedName: "totalBytes",
                type: {
                    name: "Number"
                }
            },
            totalDocuments: {
                required: true,
                serializedName: "totalDocuments",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var MongoDbCollectionProgress = {
    serializedName: "Collection",
    type: {
        name: "Composite",
        className: "MongoDbCollectionProgress",
        modelProperties: __assign({}, MongoDbProgress.type.modelProperties)
    }
};
export var MongoDbDatabaseProgress = {
    serializedName: "Database",
    type: {
        name: "Composite",
        className: "MongoDbDatabaseProgress",
        modelProperties: __assign(__assign({}, MongoDbProgress.type.modelProperties), { collections: {
                serializedName: "collections",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "MongoDbCollectionProgress"
                        }
                    }
                }
            } })
    }
};
export var MongoDbMigrationProgress = {
    serializedName: "Migration",
    type: {
        name: "Composite",
        className: "MongoDbMigrationProgress",
        modelProperties: __assign(__assign({}, MongoDbProgress.type.modelProperties), { databases: {
                serializedName: "databases",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "MongoDbDatabaseProgress"
                        }
                    }
                }
            } })
    }
};
export var MongoDbThrottlingSettings = {
    serializedName: "MongoDbThrottlingSettings",
    type: {
        name: "Composite",
        className: "MongoDbThrottlingSettings",
        modelProperties: {
            minFreeCpu: {
                serializedName: "minFreeCpu",
                type: {
                    name: "Number"
                }
            },
            minFreeMemoryMb: {
                serializedName: "minFreeMemoryMb",
                type: {
                    name: "Number"
                }
            },
            maxParallelism: {
                serializedName: "maxParallelism",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var MongoDbShardKeyField = {
    serializedName: "MongoDbShardKeyField",
    type: {
        name: "Composite",
        className: "MongoDbShardKeyField",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            order: {
                required: true,
                serializedName: "order",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MongoDbShardKeySetting = {
    serializedName: "MongoDbShardKeySetting",
    type: {
        name: "Composite",
        className: "MongoDbShardKeySetting",
        modelProperties: {
            fields: {
                required: true,
                serializedName: "fields",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MongoDbShardKeyField"
                        }
                    }
                }
            },
            isUnique: {
                required: true,
                serializedName: "isUnique",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var MongoDbCollectionSettings = {
    serializedName: "MongoDbCollectionSettings",
    type: {
        name: "Composite",
        className: "MongoDbCollectionSettings",
        modelProperties: {
            canDelete: {
                serializedName: "canDelete",
                type: {
                    name: "Boolean"
                }
            },
            shardKey: {
                serializedName: "shardKey",
                type: {
                    name: "Composite",
                    className: "MongoDbShardKeySetting"
                }
            },
            targetRUs: {
                serializedName: "targetRUs",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var MongoDbDatabaseSettings = {
    serializedName: "MongoDbDatabaseSettings",
    type: {
        name: "Composite",
        className: "MongoDbDatabaseSettings",
        modelProperties: {
            collections: {
                required: true,
                serializedName: "collections",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "MongoDbCollectionSettings"
                        }
                    }
                }
            },
            targetRUs: {
                serializedName: "targetRUs",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var MongoDbMigrationSettings = {
    serializedName: "MongoDbMigrationSettings",
    type: {
        name: "Composite",
        className: "MongoDbMigrationSettings",
        modelProperties: {
            boostRUs: {
                serializedName: "boostRUs",
                type: {
                    name: "Number"
                }
            },
            databases: {
                required: true,
                serializedName: "databases",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "MongoDbDatabaseSettings"
                        }
                    }
                }
            },
            replication: {
                serializedName: "replication",
                type: {
                    name: "String"
                }
            },
            source: {
                required: true,
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "MongoDbConnectionInfo"
                }
            },
            target: {
                required: true,
                serializedName: "target",
                type: {
                    name: "Composite",
                    className: "MongoDbConnectionInfo"
                }
            },
            throttling: {
                serializedName: "throttling",
                type: {
                    name: "Composite",
                    className: "MongoDbThrottlingSettings"
                }
            }
        }
    }
};
export var ValidateMongoDbTaskProperties = {
    serializedName: "Validate.MongoDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ValidateMongoDbTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MongoDbMigrationSettings"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MongoDbMigrationProgress"
                        }
                    }
                }
            } })
    }
};
export var ValidateMigrationInputSqlServerSqlMISyncTaskOutput = {
    serializedName: "ValidateMigrationInputSqlServerSqlMISyncTaskOutput",
    type: {
        name: "Composite",
        className: "ValidateMigrationInputSqlServerSqlMISyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var AzureActiveDirectoryApp = {
    serializedName: "AzureActiveDirectoryApp",
    type: {
        name: "Composite",
        className: "AzureActiveDirectoryApp",
        modelProperties: {
            applicationId: {
                required: true,
                serializedName: "applicationId",
                type: {
                    name: "String"
                }
            },
            appKey: {
                required: true,
                serializedName: "appKey",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                required: true,
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlMIDatabaseInput = {
    serializedName: "MigrateSqlServerSqlMIDatabaseInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlMIDatabaseInput",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            restoreDatabaseName: {
                required: true,
                serializedName: "restoreDatabaseName",
                type: {
                    name: "String"
                }
            },
            backupFileShare: {
                serializedName: "backupFileShare",
                type: {
                    name: "Composite",
                    className: "FileShare"
                }
            },
            backupFilePaths: {
                serializedName: "backupFilePaths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var SqlServerSqlMISyncTaskInput = {
    serializedName: "SqlServerSqlMISyncTaskInput",
    type: {
        name: "Composite",
        className: "SqlServerSqlMISyncTaskInput",
        modelProperties: {
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlMIDatabaseInput"
                        }
                    }
                }
            },
            backupFileShare: {
                serializedName: "backupFileShare",
                type: {
                    name: "Composite",
                    className: "FileShare"
                }
            },
            storageResourceId: {
                required: true,
                serializedName: "storageResourceId",
                type: {
                    name: "String"
                }
            },
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "MiSqlConnectionInfo"
                }
            },
            azureApp: {
                required: true,
                serializedName: "azureApp",
                type: {
                    name: "Composite",
                    className: "AzureActiveDirectoryApp"
                }
            }
        }
    }
};
export var ValidateMigrationInputSqlServerSqlMISyncTaskInput = {
    serializedName: "ValidateMigrationInputSqlServerSqlMISyncTaskInput",
    type: {
        name: "Composite",
        className: "ValidateMigrationInputSqlServerSqlMISyncTaskInput",
        modelProperties: __assign({}, SqlServerSqlMISyncTaskInput.type.modelProperties)
    }
};
export var ValidateMigrationInputSqlServerSqlMISyncTaskProperties = {
    serializedName: "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ValidateMigrationInputSqlServerSqlMISyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ValidateMigrationInputSqlServerSqlMISyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidateMigrationInputSqlServerSqlMISyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var DatabaseBackupInfo = {
    serializedName: "DatabaseBackupInfo",
    type: {
        name: "Composite",
        className: "DatabaseBackupInfo",
        modelProperties: {
            databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            backupType: {
                readOnly: true,
                serializedName: "backupType",
                type: {
                    name: "String"
                }
            },
            backupFiles: {
                readOnly: true,
                serializedName: "backupFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            position: {
                readOnly: true,
                serializedName: "position",
                type: {
                    name: "Number"
                }
            },
            isDamaged: {
                readOnly: true,
                serializedName: "isDamaged",
                type: {
                    name: "Boolean"
                }
            },
            isCompressed: {
                readOnly: true,
                serializedName: "isCompressed",
                type: {
                    name: "Boolean"
                }
            },
            familyCount: {
                readOnly: true,
                serializedName: "familyCount",
                type: {
                    name: "Number"
                }
            },
            backupFinishDate: {
                readOnly: true,
                serializedName: "backupFinishDate",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export var ValidateMigrationInputSqlServerSqlMITaskOutput = {
    serializedName: "ValidateMigrationInputSqlServerSqlMITaskOutput",
    type: {
        name: "Composite",
        className: "ValidateMigrationInputSqlServerSqlMITaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            restoreDatabaseNameErrors: {
                readOnly: true,
                serializedName: "restoreDatabaseNameErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            },
            backupFolderErrors: {
                readOnly: true,
                serializedName: "backupFolderErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            },
            backupShareCredentialsErrors: {
                readOnly: true,
                serializedName: "backupShareCredentialsErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            },
            backupStorageAccountErrors: {
                readOnly: true,
                serializedName: "backupStorageAccountErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            },
            existingBackupErrors: {
                readOnly: true,
                serializedName: "existingBackupErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            },
            databaseBackupInfo: {
                serializedName: "databaseBackupInfo",
                type: {
                    name: "Composite",
                    className: "DatabaseBackupInfo"
                }
            }
        }
    }
};
export var BlobShare = {
    serializedName: "BlobShare",
    type: {
        name: "Composite",
        className: "BlobShare",
        modelProperties: {
            sasUri: {
                required: true,
                serializedName: "sasUri",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ValidateMigrationInputSqlServerSqlMITaskInput = {
    serializedName: "ValidateMigrationInputSqlServerSqlMITaskInput",
    type: {
        name: "Composite",
        className: "ValidateMigrationInputSqlServerSqlMITaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlMIDatabaseInput"
                        }
                    }
                }
            },
            selectedLogins: {
                serializedName: "selectedLogins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            backupFileShare: {
                serializedName: "backupFileShare",
                type: {
                    name: "Composite",
                    className: "FileShare"
                }
            },
            backupBlobShare: {
                required: true,
                serializedName: "backupBlobShare",
                type: {
                    name: "Composite",
                    className: "BlobShare"
                }
            },
            backupMode: {
                serializedName: "backupMode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ValidateMigrationInputSqlServerSqlMITaskProperties = {
    serializedName: "ValidateMigrationInput.SqlServer.AzureSqlDbMI",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ValidateMigrationInputSqlServerSqlMITaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ValidateMigrationInputSqlServerSqlMITaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidateMigrationInputSqlServerSqlMITaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ValidateSyncMigrationInputSqlServerTaskOutput = {
    serializedName: "ValidateSyncMigrationInputSqlServerTaskOutput",
    type: {
        name: "Composite",
        className: "ValidateSyncMigrationInputSqlServerTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateSqlServerSqlDbSyncDatabaseInput = {
    serializedName: "MigrateSqlServerSqlDbSyncDatabaseInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlDbSyncDatabaseInput",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            targetDatabaseName: {
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            schemaName: {
                serializedName: "schemaName",
                type: {
                    name: "String"
                }
            },
            tableMap: {
                serializedName: "tableMap",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            migrationSetting: {
                serializedName: "migrationSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            sourceSetting: {
                serializedName: "sourceSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetSetting: {
                serializedName: "targetSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var ValidateSyncMigrationInputSqlServerTaskInput = {
    serializedName: "ValidateSyncMigrationInputSqlServerTaskInput",
    type: {
        name: "Composite",
        className: "ValidateSyncMigrationInputSqlServerTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlDbSyncDatabaseInput"
                        }
                    }
                }
            }
        }
    }
};
export var ValidateMigrationInputSqlServerSqlDbSyncTaskProperties = {
    serializedName: "ValidateMigrationInput.SqlServer.SqlDb.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ValidateMigrationInputSqlServerSqlDbSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ValidateSyncMigrationInputSqlServerTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ValidateSyncMigrationInputSqlServerTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var SyncMigrationDatabaseErrorEvent = {
    serializedName: "SyncMigrationDatabaseErrorEvent",
    type: {
        name: "Composite",
        className: "SyncMigrationDatabaseErrorEvent",
        modelProperties: {
            timestampString: {
                readOnly: true,
                serializedName: "timestampString",
                type: {
                    name: "String"
                }
            },
            eventTypeString: {
                readOnly: true,
                serializedName: "eventTypeString",
                type: {
                    name: "String"
                }
            },
            eventText: {
                readOnly: true,
                serializedName: "eventText",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncTaskOutput = {
    serializedName: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError = {
    serializedName: "DatabaseLevelErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError",
        modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            }, events: {
                serializedName: "events",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SyncMigrationDatabaseErrorEvent"
                        }
                    }
                }
            } })
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncTaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputError",
        modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel = {
    serializedName: "TableLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel",
        modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { tableName: {
                readOnly: true,
                serializedName: "tableName",
                type: {
                    name: "String"
                }
            }, databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "Number"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "Number"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "Number"
                }
            }, fullLoadEstFinishTime: {
                readOnly: true,
                serializedName: "fullLoadEstFinishTime",
                type: {
                    name: "DateTime"
                }
            }, fullLoadStartedOn: {
                readOnly: true,
                serializedName: "fullLoadStartedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadEndedOn: {
                readOnly: true,
                serializedName: "fullLoadEndedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadTotalRows: {
                readOnly: true,
                serializedName: "fullLoadTotalRows",
                type: {
                    name: "Number"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, totalChangesApplied: {
                readOnly: true,
                serializedName: "totalChangesApplied",
                type: {
                    name: "Number"
                }
            }, dataErrorsCounter: {
                readOnly: true,
                serializedName: "dataErrorsCounter",
                type: {
                    name: "Number"
                }
            }, lastModifiedTime: {
                readOnly: true,
                serializedName: "lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, migrationState: {
                readOnly: true,
                serializedName: "migrationState",
                type: {
                    name: "String"
                }
            }, incomingChanges: {
                readOnly: true,
                serializedName: "incomingChanges",
                type: {
                    name: "Number"
                }
            }, appliedChanges: {
                readOnly: true,
                serializedName: "appliedChanges",
                type: {
                    name: "Number"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "Number"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "Number"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "Number"
                }
            }, fullLoadCompletedTables: {
                readOnly: true,
                serializedName: "fullLoadCompletedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadLoadingTables: {
                readOnly: true,
                serializedName: "fullLoadLoadingTables",
                type: {
                    name: "Number"
                }
            }, fullLoadQueuedTables: {
                readOnly: true,
                serializedName: "fullLoadQueuedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadErroredTables: {
                readOnly: true,
                serializedName: "fullLoadErroredTables",
                type: {
                    name: "Number"
                }
            }, initializationCompleted: {
                readOnly: true,
                serializedName: "initializationCompleted",
                type: {
                    name: "Boolean"
                }
            }, latency: {
                readOnly: true,
                serializedName: "latency",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServer: {
                readOnly: true,
                serializedName: "sourceServer",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServer: {
                readOnly: true,
                serializedName: "targetServer",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MigrateOracleAzureDbForPostgreSqlSyncTaskProperties = {
    serializedName: "Migrate.Oracle.AzureDbForPostgreSql.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateOracleAzureDbForPostgreSqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateOracleAzureDbPostgreSqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput = {
    serializedName: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError = {
    serializedName: "DatabaseLevelErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError",
        modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            }, events: {
                serializedName: "events",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SyncMigrationDatabaseErrorEvent"
                        }
                    }
                }
            } })
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError",
        modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel = {
    serializedName: "TableLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel",
        modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { tableName: {
                readOnly: true,
                serializedName: "tableName",
                type: {
                    name: "String"
                }
            }, databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "Number"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "Number"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "Number"
                }
            }, fullLoadEstFinishTime: {
                readOnly: true,
                serializedName: "fullLoadEstFinishTime",
                type: {
                    name: "DateTime"
                }
            }, fullLoadStartedOn: {
                readOnly: true,
                serializedName: "fullLoadStartedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadEndedOn: {
                readOnly: true,
                serializedName: "fullLoadEndedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadTotalRows: {
                readOnly: true,
                serializedName: "fullLoadTotalRows",
                type: {
                    name: "Number"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, totalChangesApplied: {
                readOnly: true,
                serializedName: "totalChangesApplied",
                type: {
                    name: "Number"
                }
            }, dataErrorsCounter: {
                readOnly: true,
                serializedName: "dataErrorsCounter",
                type: {
                    name: "Number"
                }
            }, lastModifiedTime: {
                readOnly: true,
                serializedName: "lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, migrationState: {
                readOnly: true,
                serializedName: "migrationState",
                type: {
                    name: "String"
                }
            }, incomingChanges: {
                readOnly: true,
                serializedName: "incomingChanges",
                type: {
                    name: "Number"
                }
            }, appliedChanges: {
                readOnly: true,
                serializedName: "appliedChanges",
                type: {
                    name: "Number"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "Number"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "Number"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "Number"
                }
            }, fullLoadCompletedTables: {
                readOnly: true,
                serializedName: "fullLoadCompletedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadLoadingTables: {
                readOnly: true,
                serializedName: "fullLoadLoadingTables",
                type: {
                    name: "Number"
                }
            }, fullLoadQueuedTables: {
                readOnly: true,
                serializedName: "fullLoadQueuedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadErroredTables: {
                readOnly: true,
                serializedName: "fullLoadErroredTables",
                type: {
                    name: "Number"
                }
            }, initializationCompleted: {
                readOnly: true,
                serializedName: "initializationCompleted",
                type: {
                    name: "Boolean"
                }
            }, latency: {
                readOnly: true,
                serializedName: "latency",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServer: {
                readOnly: true,
                serializedName: "sourceServer",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServer: {
                readOnly: true,
                serializedName: "targetServer",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput = {
    serializedName: "MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput",
    type: {
        name: "Composite",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            targetDatabaseName: {
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            migrationSetting: {
                serializedName: "migrationSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            sourceSetting: {
                serializedName: "sourceSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetSetting: {
                serializedName: "targetSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput = {
    serializedName: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput",
    type: {
        name: "Composite",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput",
        modelProperties: {
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput"
                        }
                    }
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            },
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            }
        }
    }
};
export var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties = {
    serializedName: "Migrate.PostgreSql.AzureDbForPostgreSql.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskOutput = {
    serializedName: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError = {
    serializedName: "DatabaseLevelErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError",
        modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            }, events: {
                serializedName: "events",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SyncMigrationDatabaseErrorEvent"
                        }
                    }
                }
            } })
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputError",
        modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel = {
    serializedName: "TableLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel",
        modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { tableName: {
                readOnly: true,
                serializedName: "tableName",
                type: {
                    name: "String"
                }
            }, databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "String"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "String"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "String"
                }
            }, fullLoadEstFinishTime: {
                readOnly: true,
                serializedName: "fullLoadEstFinishTime",
                type: {
                    name: "DateTime"
                }
            }, fullLoadStartedOn: {
                readOnly: true,
                serializedName: "fullLoadStartedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadEndedOn: {
                readOnly: true,
                serializedName: "fullLoadEndedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadTotalRows: {
                readOnly: true,
                serializedName: "fullLoadTotalRows",
                type: {
                    name: "Number"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, totalChangesApplied: {
                readOnly: true,
                serializedName: "totalChangesApplied",
                type: {
                    name: "Number"
                }
            }, dataErrorsCounter: {
                readOnly: true,
                serializedName: "dataErrorsCounter",
                type: {
                    name: "Number"
                }
            }, lastModifiedTime: {
                readOnly: true,
                serializedName: "lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, migrationState: {
                readOnly: true,
                serializedName: "migrationState",
                type: {
                    name: "String"
                }
            }, incomingChanges: {
                readOnly: true,
                serializedName: "incomingChanges",
                type: {
                    name: "Number"
                }
            }, appliedChanges: {
                readOnly: true,
                serializedName: "appliedChanges",
                type: {
                    name: "Number"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "Number"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "Number"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "Number"
                }
            }, fullLoadCompletedTables: {
                readOnly: true,
                serializedName: "fullLoadCompletedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadLoadingTables: {
                readOnly: true,
                serializedName: "fullLoadLoadingTables",
                type: {
                    name: "Number"
                }
            }, fullLoadQueuedTables: {
                readOnly: true,
                serializedName: "fullLoadQueuedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadErroredTables: {
                readOnly: true,
                serializedName: "fullLoadErroredTables",
                type: {
                    name: "Number"
                }
            }, initializationCompleted: {
                readOnly: true,
                serializedName: "initializationCompleted",
                type: {
                    name: "Boolean"
                }
            }, latency: {
                readOnly: true,
                serializedName: "latency",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServer: {
                readOnly: true,
                serializedName: "sourceServer",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServer: {
                readOnly: true,
                serializedName: "targetServer",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MigrateMySqlAzureDbForMySqlSyncDatabaseInput = {
    serializedName: "MigrateMySqlAzureDbForMySqlSyncDatabaseInput",
    type: {
        name: "Composite",
        className: "MigrateMySqlAzureDbForMySqlSyncDatabaseInput",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            targetDatabaseName: {
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            migrationSetting: {
                serializedName: "migrationSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            sourceSetting: {
                serializedName: "sourceSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetSetting: {
                serializedName: "targetSetting",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskInput = {
    serializedName: "MigrateMySqlAzureDbForMySqlSyncTaskInput",
    type: {
        name: "Composite",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "MySqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "MySqlConnectionInfo"
                }
            },
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateMySqlAzureDbForMySqlSyncDatabaseInput"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateMySqlAzureDbForMySqlSyncTaskProperties = {
    serializedName: "Migrate.MySql.AzureDbForMySql.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateMySqlAzureDbForMySqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateMySqlAzureDbForMySqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateMySqlAzureDbForMySqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlDbSyncTaskOutput = {
    serializedName: "MigrateSqlServerSqlDbSyncTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
        className: "MigrateSqlServerSqlDbSyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlDbSyncTaskOutputDatabaseError = {
    serializedName: "DatabaseLevelErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
        className: "MigrateSqlServerSqlDbSyncTaskOutputDatabaseError",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String"
                }
            }, events: {
                serializedName: "events",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SyncMigrationDatabaseErrorEvent"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlDbSyncTaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
        className: "MigrateSqlServerSqlDbSyncTaskOutputError",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var MigrateSqlServerSqlDbSyncTaskOutputTableLevel = {
    serializedName: "TableLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
        className: "MigrateSqlServerSqlDbSyncTaskOutputTableLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { tableName: {
                readOnly: true,
                serializedName: "tableName",
                type: {
                    name: "String"
                }
            }, databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "Number"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "Number"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "Number"
                }
            }, fullLoadEstFinishTime: {
                readOnly: true,
                serializedName: "fullLoadEstFinishTime",
                type: {
                    name: "DateTime"
                }
            }, fullLoadStartedOn: {
                readOnly: true,
                serializedName: "fullLoadStartedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadEndedOn: {
                readOnly: true,
                serializedName: "fullLoadEndedOn",
                type: {
                    name: "DateTime"
                }
            }, fullLoadTotalRows: {
                readOnly: true,
                serializedName: "fullLoadTotalRows",
                type: {
                    name: "Number"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, totalChangesApplied: {
                readOnly: true,
                serializedName: "totalChangesApplied",
                type: {
                    name: "Number"
                }
            }, dataErrorsCounter: {
                readOnly: true,
                serializedName: "dataErrorsCounter",
                type: {
                    name: "Number"
                }
            }, lastModifiedTime: {
                readOnly: true,
                serializedName: "lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export var MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
        className: "MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, migrationState: {
                readOnly: true,
                serializedName: "migrationState",
                type: {
                    name: "String"
                }
            }, incomingChanges: {
                readOnly: true,
                serializedName: "incomingChanges",
                type: {
                    name: "Number"
                }
            }, appliedChanges: {
                readOnly: true,
                serializedName: "appliedChanges",
                type: {
                    name: "Number"
                }
            }, cdcInsertCounter: {
                readOnly: true,
                serializedName: "cdcInsertCounter",
                type: {
                    name: "Number"
                }
            }, cdcDeleteCounter: {
                readOnly: true,
                serializedName: "cdcDeleteCounter",
                type: {
                    name: "Number"
                }
            }, cdcUpdateCounter: {
                readOnly: true,
                serializedName: "cdcUpdateCounter",
                type: {
                    name: "Number"
                }
            }, fullLoadCompletedTables: {
                readOnly: true,
                serializedName: "fullLoadCompletedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadLoadingTables: {
                readOnly: true,
                serializedName: "fullLoadLoadingTables",
                type: {
                    name: "Number"
                }
            }, fullLoadQueuedTables: {
                readOnly: true,
                serializedName: "fullLoadQueuedTables",
                type: {
                    name: "Number"
                }
            }, fullLoadErroredTables: {
                readOnly: true,
                serializedName: "fullLoadErroredTables",
                type: {
                    name: "Number"
                }
            }, initializationCompleted: {
                readOnly: true,
                serializedName: "initializationCompleted",
                type: {
                    name: "Boolean"
                }
            }, latency: {
                readOnly: true,
                serializedName: "latency",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
        className: "MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServer: {
                readOnly: true,
                serializedName: "sourceServer",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServer: {
                readOnly: true,
                serializedName: "targetServer",
                type: {
                    name: "String"
                }
            }, databaseCount: {
                readOnly: true,
                serializedName: "databaseCount",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MigrationValidationOptions = {
    serializedName: "MigrationValidationOptions",
    type: {
        name: "Composite",
        className: "MigrationValidationOptions",
        modelProperties: {
            enableSchemaValidation: {
                serializedName: "enableSchemaValidation",
                type: {
                    name: "Boolean"
                }
            },
            enableDataIntegrityValidation: {
                serializedName: "enableDataIntegrityValidation",
                type: {
                    name: "Boolean"
                }
            },
            enableQueryAnalysisValidation: {
                serializedName: "enableQueryAnalysisValidation",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlDbSyncTaskInput = {
    serializedName: "MigrateSqlServerSqlDbSyncTaskInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlDbSyncTaskInput",
        modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlDbSyncDatabaseInput"
                        }
                    }
                }
            }, validationOptions: {
                serializedName: "validationOptions",
                type: {
                    name: "Composite",
                    className: "MigrationValidationOptions"
                }
            } })
    }
};
export var MigrateSqlServerSqlDbSyncTaskProperties = {
    serializedName: "Migrate.SqlServer.AzureSqlDb.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateSqlServerSqlDbSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateSqlServerSqlDbSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlDbSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ValidationError = {
    serializedName: "ValidationError",
    type: {
        name: "Composite",
        className: "ValidationError",
        modelProperties: {
            text: {
                serializedName: "text",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var WaitStatistics = {
    serializedName: "WaitStatistics",
    type: {
        name: "Composite",
        className: "WaitStatistics",
        modelProperties: {
            waitType: {
                serializedName: "waitType",
                type: {
                    name: "String"
                }
            },
            waitTimeMs: {
                serializedName: "waitTimeMs",
                defaultValue: 0,
                type: {
                    name: "Number"
                }
            },
            waitCount: {
                serializedName: "waitCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var ExecutionStatistics = {
    serializedName: "ExecutionStatistics",
    type: {
        name: "Composite",
        className: "ExecutionStatistics",
        modelProperties: {
            executionCount: {
                serializedName: "executionCount",
                type: {
                    name: "Number"
                }
            },
            cpuTimeMs: {
                serializedName: "cpuTimeMs",
                type: {
                    name: "Number"
                }
            },
            elapsedTimeMs: {
                serializedName: "elapsedTimeMs",
                type: {
                    name: "Number"
                }
            },
            waitStats: {
                serializedName: "waitStats",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "WaitStatistics"
                        }
                    }
                }
            },
            hasErrors: {
                serializedName: "hasErrors",
                type: {
                    name: "Boolean"
                }
            },
            sqlErrors: {
                serializedName: "sqlErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var QueryExecutionResult = {
    serializedName: "QueryExecutionResult",
    type: {
        name: "Composite",
        className: "QueryExecutionResult",
        modelProperties: {
            queryText: {
                serializedName: "queryText",
                type: {
                    name: "String"
                }
            },
            statementsInBatch: {
                serializedName: "statementsInBatch",
                type: {
                    name: "Number"
                }
            },
            sourceResult: {
                serializedName: "sourceResult",
                type: {
                    name: "Composite",
                    className: "ExecutionStatistics"
                }
            },
            targetResult: {
                serializedName: "targetResult",
                type: {
                    name: "Composite",
                    className: "ExecutionStatistics"
                }
            }
        }
    }
};
export var QueryAnalysisValidationResult = {
    serializedName: "QueryAnalysisValidationResult",
    type: {
        name: "Composite",
        className: "QueryAnalysisValidationResult",
        modelProperties: {
            queryResults: {
                serializedName: "queryResults",
                type: {
                    name: "Composite",
                    className: "QueryExecutionResult"
                }
            },
            validationErrors: {
                serializedName: "validationErrors",
                type: {
                    name: "Composite",
                    className: "ValidationError"
                }
            }
        }
    }
};
export var SchemaComparisonValidationResultType = {
    serializedName: "SchemaComparisonValidationResultType",
    type: {
        name: "Composite",
        className: "SchemaComparisonValidationResultType",
        modelProperties: {
            objectName: {
                serializedName: "objectName",
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "objectType",
                type: {
                    name: "String"
                }
            },
            updateAction: {
                serializedName: "updateAction",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var SchemaComparisonValidationResult = {
    serializedName: "SchemaComparisonValidationResult",
    type: {
        name: "Composite",
        className: "SchemaComparisonValidationResult",
        modelProperties: {
            schemaDifferences: {
                serializedName: "schemaDifferences",
                type: {
                    name: "Composite",
                    className: "SchemaComparisonValidationResultType"
                }
            },
            validationErrors: {
                serializedName: "validationErrors",
                type: {
                    name: "Composite",
                    className: "ValidationError"
                }
            },
            sourceDatabaseObjectCount: {
                serializedName: "sourceDatabaseObjectCount",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            },
            targetDatabaseObjectCount: {
                serializedName: "targetDatabaseObjectCount",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            }
        }
    }
};
export var DataIntegrityValidationResult = {
    serializedName: "DataIntegrityValidationResult",
    type: {
        name: "Composite",
        className: "DataIntegrityValidationResult",
        modelProperties: {
            failedObjects: {
                serializedName: "failedObjects",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            validationErrors: {
                serializedName: "validationErrors",
                type: {
                    name: "Composite",
                    className: "ValidationError"
                }
            }
        }
    }
};
export var MigrationValidationDatabaseLevelResult = {
    serializedName: "MigrationValidationDatabaseLevelResult",
    type: {
        name: "Composite",
        className: "MigrationValidationDatabaseLevelResult",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            migrationId: {
                readOnly: true,
                serializedName: "migrationId",
                type: {
                    name: "String"
                }
            },
            sourceDatabaseName: {
                readOnly: true,
                serializedName: "sourceDatabaseName",
                type: {
                    name: "String"
                }
            },
            targetDatabaseName: {
                readOnly: true,
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            },
            endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            },
            dataIntegrityValidationResult: {
                readOnly: true,
                serializedName: "dataIntegrityValidationResult",
                type: {
                    name: "Composite",
                    className: "DataIntegrityValidationResult"
                }
            },
            schemaValidationResult: {
                readOnly: true,
                serializedName: "schemaValidationResult",
                type: {
                    name: "Composite",
                    className: "SchemaComparisonValidationResult"
                }
            },
            queryAnalysisValidationResult: {
                readOnly: true,
                serializedName: "queryAnalysisValidationResult",
                type: {
                    name: "Composite",
                    className: "QueryAnalysisValidationResult"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrationValidationDatabaseSummaryResult = {
    serializedName: "MigrationValidationDatabaseSummaryResult",
    type: {
        name: "Composite",
        className: "MigrationValidationDatabaseSummaryResult",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            migrationId: {
                readOnly: true,
                serializedName: "migrationId",
                type: {
                    name: "String"
                }
            },
            sourceDatabaseName: {
                readOnly: true,
                serializedName: "sourceDatabaseName",
                type: {
                    name: "String"
                }
            },
            targetDatabaseName: {
                readOnly: true,
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            },
            endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrationValidationResult = {
    serializedName: "MigrationValidationResult",
    type: {
        name: "Composite",
        className: "MigrationValidationResult",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            migrationId: {
                readOnly: true,
                serializedName: "migrationId",
                type: {
                    name: "String"
                }
            },
            summaryResults: {
                serializedName: "summaryResults",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "MigrationValidationDatabaseSummaryResult"
                        }
                    }
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlDbTaskOutput = {
    serializedName: "MigrateSqlServerSqlDbTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateSqlServerSqlDbTaskOutput",
        className: "MigrateSqlServerSqlDbTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlDbTaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbTaskOutput",
        className: "MigrateSqlServerSqlDbTaskOutputError",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var MigrateSqlServerSqlDbTaskOutputTableLevel = {
    serializedName: "TableLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbTaskOutput",
        className: "MigrateSqlServerSqlDbTaskOutputTableLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { objectName: {
                readOnly: true,
                serializedName: "objectName",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, statusMessage: {
                readOnly: true,
                serializedName: "statusMessage",
                type: {
                    name: "String"
                }
            }, itemsCount: {
                readOnly: true,
                serializedName: "itemsCount",
                type: {
                    name: "Number"
                }
            }, itemsCompletedCount: {
                readOnly: true,
                serializedName: "itemsCompletedCount",
                type: {
                    name: "Number"
                }
            }, errorPrefix: {
                readOnly: true,
                serializedName: "errorPrefix",
                type: {
                    name: "String"
                }
            }, resultPrefix: {
                readOnly: true,
                serializedName: "resultPrefix",
                type: {
                    name: "String"
                }
            } })
    }
};
export var DataItemMigrationSummaryResult = {
    serializedName: "DataItemMigrationSummaryResult",
    type: {
        name: "Composite",
        className: "DataItemMigrationSummaryResult",
        modelProperties: {
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            },
            endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            },
            state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            statusMessage: {
                readOnly: true,
                serializedName: "statusMessage",
                type: {
                    name: "String"
                }
            },
            itemsCount: {
                readOnly: true,
                serializedName: "itemsCount",
                type: {
                    name: "Number"
                }
            },
            itemsCompletedCount: {
                readOnly: true,
                serializedName: "itemsCompletedCount",
                type: {
                    name: "Number"
                }
            },
            errorPrefix: {
                readOnly: true,
                serializedName: "errorPrefix",
                type: {
                    name: "String"
                }
            },
            resultPrefix: {
                readOnly: true,
                serializedName: "resultPrefix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlDbTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbTaskOutput",
        className: "MigrateSqlServerSqlDbTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, stage: {
                readOnly: true,
                serializedName: "stage",
                type: {
                    name: "String"
                }
            }, statusMessage: {
                readOnly: true,
                serializedName: "statusMessage",
                type: {
                    name: "String"
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, numberOfObjects: {
                readOnly: true,
                serializedName: "numberOfObjects",
                type: {
                    name: "Number"
                }
            }, numberOfObjectsCompleted: {
                readOnly: true,
                serializedName: "numberOfObjectsCompleted",
                type: {
                    name: "Number"
                }
            }, errorCount: {
                readOnly: true,
                serializedName: "errorCount",
                type: {
                    name: "Number"
                }
            }, errorPrefix: {
                readOnly: true,
                serializedName: "errorPrefix",
                type: {
                    name: "String"
                }
            }, resultPrefix: {
                readOnly: true,
                serializedName: "resultPrefix",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }, objectSummary: {
                readOnly: true,
                serializedName: "objectSummary",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "DataItemMigrationSummaryResult"
                        }
                    }
                }
            } })
    }
};
export var MigrationReportResult = {
    serializedName: "MigrationReportResult",
    type: {
        name: "Composite",
        className: "MigrationReportResult",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            reportUrl: {
                serializedName: "reportUrl",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DatabaseSummaryResult = {
    serializedName: "DatabaseSummaryResult",
    type: {
        name: "Composite",
        className: "DatabaseSummaryResult",
        modelProperties: __assign(__assign({}, DataItemMigrationSummaryResult.type.modelProperties), { sizeMB: {
                readOnly: true,
                serializedName: "sizeMB",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MigrateSqlServerSqlDbTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlDbTaskOutput",
        className: "MigrateSqlServerSqlDbTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, durationInSeconds: {
                readOnly: true,
                serializedName: "durationInSeconds",
                type: {
                    name: "Number"
                }
            }, status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            }, statusMessage: {
                readOnly: true,
                serializedName: "statusMessage",
                type: {
                    name: "String"
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, databaseSummary: {
                readOnly: true,
                serializedName: "databaseSummary",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "DatabaseSummaryResult"
                        }
                    }
                }
            }, migrationValidationResult: {
                serializedName: "migrationValidationResult",
                type: {
                    name: "Composite",
                    className: "MigrationValidationResult"
                }
            }, migrationReportResult: {
                serializedName: "migrationReportResult",
                type: {
                    name: "Composite",
                    className: "MigrationReportResult"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlDbDatabaseInput = {
    serializedName: "MigrateSqlServerSqlDbDatabaseInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlDbDatabaseInput",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            targetDatabaseName: {
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            makeSourceDbReadOnly: {
                serializedName: "makeSourceDbReadOnly",
                type: {
                    name: "Boolean"
                }
            },
            tableMap: {
                serializedName: "tableMap",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateSqlServerSqlDbTaskInput = {
    serializedName: "MigrateSqlServerSqlDbTaskInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlDbTaskInput",
        modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlDbDatabaseInput"
                        }
                    }
                }
            }, validationOptions: {
                serializedName: "validationOptions",
                type: {
                    name: "Composite",
                    className: "MigrationValidationOptions"
                }
            } })
    }
};
export var MigrateSqlServerSqlDbTaskProperties = {
    serializedName: "Migrate.SqlServer.SqlDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateSqlServerSqlDbTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateSqlServerSqlDbTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlDbTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlMISyncTaskOutput = {
    serializedName: "MigrateSqlServerSqlMISyncTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
        className: "MigrateSqlServerSqlMISyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlMISyncTaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMISyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
        className: "MigrateSqlServerSqlMISyncTaskOutputError",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMISyncTaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var BackupFileInfo = {
    serializedName: "BackupFileInfo",
    type: {
        name: "Composite",
        className: "BackupFileInfo",
        modelProperties: {
            fileLocation: {
                serializedName: "fileLocation",
                type: {
                    name: "String"
                }
            },
            familySequenceNumber: {
                serializedName: "familySequenceNumber",
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var BackupSetInfo = {
    serializedName: "BackupSetInfo",
    type: {
        name: "Composite",
        className: "BackupSetInfo",
        modelProperties: {
            backupSetId: {
                serializedName: "backupSetId",
                type: {
                    name: "String"
                }
            },
            firstLsn: {
                serializedName: "firstLsn",
                type: {
                    name: "String"
                }
            },
            lastLsn: {
                serializedName: "lastLsn",
                type: {
                    name: "String"
                }
            },
            lastModifiedTime: {
                serializedName: "lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            },
            backupType: {
                serializedName: "backupType",
                type: {
                    name: "String"
                }
            },
            listOfBackupFiles: {
                serializedName: "listOfBackupFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BackupFileInfo"
                        }
                    }
                }
            },
            databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            backupStartDate: {
                serializedName: "backupStartDate",
                type: {
                    name: "DateTime"
                }
            },
            backupFinishedDate: {
                serializedName: "backupFinishedDate",
                type: {
                    name: "DateTime"
                }
            },
            isBackupRestored: {
                serializedName: "isBackupRestored",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMISyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
        className: "MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMISyncTaskOutput.type.modelProperties), { sourceDatabaseName: {
                readOnly: true,
                serializedName: "sourceDatabaseName",
                type: {
                    name: "String"
                }
            }, migrationState: {
                readOnly: true,
                serializedName: "migrationState",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, fullBackupSetInfo: {
                readOnly: true,
                serializedName: "fullBackupSetInfo",
                type: {
                    name: "Composite",
                    className: "BackupSetInfo"
                }
            }, lastRestoredBackupSetInfo: {
                readOnly: true,
                serializedName: "lastRestoredBackupSetInfo",
                type: {
                    name: "Composite",
                    className: "BackupSetInfo"
                }
            }, activeBackupSets: {
                readOnly: true,
                serializedName: "activeBackupSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BackupSetInfo"
                        }
                    }
                }
            }, containerName: {
                readOnly: true,
                serializedName: "containerName",
                type: {
                    name: "String"
                }
            }, errorPrefix: {
                readOnly: true,
                serializedName: "errorPrefix",
                type: {
                    name: "String"
                }
            }, isFullBackupRestored: {
                readOnly: true,
                serializedName: "isFullBackupRestored",
                type: {
                    name: "Boolean"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlMISyncTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMISyncTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
        className: "MigrateSqlServerSqlMISyncTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMISyncTaskOutput.type.modelProperties), { databaseCount: {
                readOnly: true,
                serializedName: "databaseCount",
                type: {
                    name: "Number"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, sourceServerName: {
                readOnly: true,
                serializedName: "sourceServerName",
                type: {
                    name: "String"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            }, targetServerName: {
                readOnly: true,
                serializedName: "targetServerName",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            }, databaseErrorCount: {
                readOnly: true,
                serializedName: "databaseErrorCount",
                type: {
                    name: "Number"
                }
            } })
    }
};
export var MigrateSqlServerSqlMISyncTaskInput = {
    serializedName: "MigrateSqlServerSqlMISyncTaskInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlMISyncTaskInput",
        modelProperties: __assign({}, SqlServerSqlMISyncTaskInput.type.modelProperties)
    }
};
export var MigrateSqlServerSqlMISyncTaskProperties = {
    serializedName: "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateSqlServerSqlMISyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateSqlServerSqlMISyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlMISyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlMITaskOutput = {
    serializedName: "MigrateSqlServerSqlMITaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateSqlServerSqlMITaskOutput",
        className: "MigrateSqlServerSqlMITaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlMITaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMITaskOutput",
        className: "MigrateSqlServerSqlMITaskOutputError",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var MigrateSqlServerSqlMITaskOutputLoginLevel = {
    serializedName: "LoginLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMITaskOutput",
        className: "MigrateSqlServerSqlMITaskOutputLoginLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { loginName: {
                readOnly: true,
                serializedName: "loginName",
                type: {
                    name: "String"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, stage: {
                readOnly: true,
                serializedName: "stage",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlMITaskOutputAgentJobLevel = {
    serializedName: "AgentJobLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMITaskOutput",
        className: "MigrateSqlServerSqlMITaskOutputAgentJobLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, isEnabled: {
                readOnly: true,
                serializedName: "isEnabled",
                type: {
                    name: "Boolean"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlMITaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMITaskOutput",
        className: "MigrateSqlServerSqlMITaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, sizeMB: {
                readOnly: true,
                serializedName: "sizeMB",
                type: {
                    name: "Number"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, stage: {
                readOnly: true,
                serializedName: "stage",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var OrphanedUserInfo = {
    serializedName: "OrphanedUserInfo",
    type: {
        name: "Composite",
        className: "OrphanedUserInfo",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var StartMigrationScenarioServerRoleResult = {
    serializedName: "StartMigrationScenarioServerRoleResult",
    type: {
        name: "Composite",
        className: "StartMigrationScenarioServerRoleResult",
        modelProperties: {
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var MigrateSqlServerSqlMITaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSqlServerSqlMITaskOutput",
        className: "MigrateSqlServerSqlMITaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, agentJobs: {
                readOnly: true,
                serializedName: "agentJobs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, logins: {
                readOnly: true,
                serializedName: "logins",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }, serverRoleResults: {
                readOnly: true,
                serializedName: "serverRoleResults",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "StartMigrationScenarioServerRoleResult"
                        }
                    }
                }
            }, orphanedUsersInfo: {
                readOnly: true,
                serializedName: "orphanedUsersInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OrphanedUserInfo"
                        }
                    }
                }
            }, databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            }, exceptionsAndWarnings: {
                readOnly: true,
                serializedName: "exceptionsAndWarnings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var MigrateSqlServerSqlMITaskInput = {
    serializedName: "MigrateSqlServerSqlMITaskInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlMITaskInput",
        modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlMIDatabaseInput"
                        }
                    }
                }
            }, selectedLogins: {
                serializedName: "selectedLogins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, selectedAgentJobs: {
                serializedName: "selectedAgentJobs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, backupFileShare: {
                serializedName: "backupFileShare",
                type: {
                    name: "Composite",
                    className: "FileShare"
                }
            }, backupBlobShare: {
                required: true,
                serializedName: "backupBlobShare",
                type: {
                    name: "Composite",
                    className: "BlobShare"
                }
            }, backupMode: {
                serializedName: "backupMode",
                type: {
                    name: "String"
                }
            }, aadDomainName: {
                serializedName: "aadDomainName",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MigrateSqlServerSqlMITaskProperties = {
    serializedName: "Migrate.SqlServer.AzureSqlDbMI",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateSqlServerSqlMITaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateSqlServerSqlMITaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSqlServerSqlMITaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigrateMongoDbTaskProperties = {
    serializedName: "Migrate.MongoDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateMongoDbTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MongoDbMigrationSettings"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MongoDbProgress"
                        }
                    }
                }
            } })
    }
};
export var ConnectToTargetAzureDbForMySqlTaskOutput = {
    serializedName: "ConnectToTargetAzureDbForMySqlTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToTargetAzureDbForMySqlTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            serverVersion: {
                readOnly: true,
                serializedName: "serverVersion",
                type: {
                    name: "String"
                }
            },
            databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToTargetAzureDbForMySqlTaskInput = {
    serializedName: "ConnectToTargetAzureDbForMySqlTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToTargetAzureDbForMySqlTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "MySqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "MySqlConnectionInfo"
                }
            }
        }
    }
};
export var ConnectToTargetAzureDbForMySqlTaskProperties = {
    serializedName: "ConnectToTarget.AzureDbForMySql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToTargetAzureDbForMySqlTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToTargetAzureDbForMySqlTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetAzureDbForMySqlTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToTargetSqlMISyncTaskOutput = {
    serializedName: "ConnectToTargetSqlMISyncTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToTargetSqlMISyncTaskOutput",
        modelProperties: {
            targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            },
            targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToTargetSqlMISyncTaskInput = {
    serializedName: "ConnectToTargetSqlMISyncTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToTargetSqlMISyncTaskInput",
        modelProperties: {
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "MiSqlConnectionInfo"
                }
            },
            azureApp: {
                required: true,
                serializedName: "azureApp",
                type: {
                    name: "Composite",
                    className: "AzureActiveDirectoryApp"
                }
            }
        }
    }
};
export var ConnectToTargetSqlMISyncTaskProperties = {
    serializedName: "ConnectToTarget.AzureSqlDbMI.Sync.LRS",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToTargetSqlMISyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToTargetSqlMISyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetSqlMISyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToTargetSqlMITaskOutput = {
    serializedName: "ConnectToTargetSqlMITaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToTargetSqlMITaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            },
            targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            logins: {
                readOnly: true,
                serializedName: "logins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            agentJobs: {
                readOnly: true,
                serializedName: "agentJobs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToTargetSqlMITaskInput = {
    serializedName: "ConnectToTargetSqlMITaskInput",
    type: {
        name: "Composite",
        className: "ConnectToTargetSqlMITaskInput",
        modelProperties: {
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            collectLogins: {
                serializedName: "collectLogins",
                defaultValue: true,
                type: {
                    name: "Boolean"
                }
            },
            collectAgentJobs: {
                serializedName: "collectAgentJobs",
                defaultValue: true,
                type: {
                    name: "Boolean"
                }
            },
            validateSsisCatalogOnly: {
                serializedName: "validateSsisCatalogOnly",
                defaultValue: false,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var ConnectToTargetSqlMITaskProperties = {
    serializedName: "ConnectToTarget.AzureSqlDbMI",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToTargetSqlMITaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToTargetSqlMITaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetSqlMITaskOutput"
                        }
                    }
                }
            } })
    }
};
export var DatabaseTable = {
    serializedName: "DatabaseTable",
    type: {
        name: "Composite",
        className: "DatabaseTable",
        modelProperties: {
            hasRows: {
                readOnly: true,
                serializedName: "hasRows",
                type: {
                    name: "Boolean"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var GetUserTablesPostgreSqlTaskOutput = {
    serializedName: "GetUserTablesPostgreSqlTaskOutput",
    type: {
        name: "Composite",
        className: "GetUserTablesPostgreSqlTaskOutput",
        modelProperties: {
            databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            tables: {
                readOnly: true,
                serializedName: "tables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabaseTable"
                        }
                    }
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesPostgreSqlTaskInput = {
    serializedName: "GetUserTablesPostgreSqlTaskInput",
    type: {
        name: "Composite",
        className: "GetUserTablesPostgreSqlTaskInput",
        modelProperties: {
            connectionInfo: {
                required: true,
                serializedName: "connectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            },
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesPostgreSqlTaskProperties = {
    serializedName: "GetUserTablesPostgreSql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "GetUserTablesPostgreSqlTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "GetUserTablesPostgreSqlTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GetUserTablesPostgreSqlTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var GetUserTablesOracleTaskOutput = {
    serializedName: "GetUserTablesOracleTaskOutput",
    type: {
        name: "Composite",
        className: "GetUserTablesOracleTaskOutput",
        modelProperties: {
            schemaName: {
                readOnly: true,
                serializedName: "schemaName",
                type: {
                    name: "String"
                }
            },
            tables: {
                readOnly: true,
                serializedName: "tables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabaseTable"
                        }
                    }
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesOracleTaskInput = {
    serializedName: "GetUserTablesOracleTaskInput",
    type: {
        name: "Composite",
        className: "GetUserTablesOracleTaskInput",
        modelProperties: {
            connectionInfo: {
                required: true,
                serializedName: "connectionInfo",
                type: {
                    name: "Composite",
                    className: "OracleConnectionInfo"
                }
            },
            selectedSchemas: {
                required: true,
                serializedName: "selectedSchemas",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesOracleTaskProperties = {
    serializedName: "GetUserTablesOracle",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "GetUserTablesOracleTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "GetUserTablesOracleTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GetUserTablesOracleTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var GetUserTablesSqlSyncTaskOutput = {
    serializedName: "GetUserTablesSqlSyncTaskOutput",
    type: {
        name: "Composite",
        className: "GetUserTablesSqlSyncTaskOutput",
        modelProperties: {
            databasesToSourceTables: {
                readOnly: true,
                serializedName: "databasesToSourceTables",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "Composite",
                                    className: "DatabaseTable"
                                }
                            }
                        }
                    }
                }
            },
            databasesToTargetTables: {
                readOnly: true,
                serializedName: "databasesToTargetTables",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "Composite",
                                    className: "DatabaseTable"
                                }
                            }
                        }
                    }
                }
            },
            tableValidationErrors: {
                readOnly: true,
                serializedName: "tableValidationErrors",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesSqlSyncTaskInput = {
    serializedName: "GetUserTablesSqlSyncTaskInput",
    type: {
        name: "Composite",
        className: "GetUserTablesSqlSyncTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            selectedSourceDatabases: {
                required: true,
                serializedName: "selectedSourceDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            selectedTargetDatabases: {
                required: true,
                serializedName: "selectedTargetDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesSqlSyncTaskProperties = {
    serializedName: "GetUserTables.AzureSqlDb.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "GetUserTablesSqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "GetUserTablesSqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GetUserTablesSqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var GetUserTablesSqlTaskOutput = {
    serializedName: "GetUserTablesSqlTaskOutput",
    type: {
        name: "Composite",
        className: "GetUserTablesSqlTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            databasesToTables: {
                readOnly: true,
                serializedName: "databasesToTables",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "Composite",
                                    className: "DatabaseTable"
                                }
                            }
                        }
                    }
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesSqlTaskInput = {
    serializedName: "GetUserTablesSqlTaskInput",
    type: {
        name: "Composite",
        className: "GetUserTablesSqlTaskInput",
        modelProperties: {
            connectionInfo: {
                required: true,
                serializedName: "connectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var GetUserTablesSqlTaskProperties = {
    serializedName: "GetUserTables.Sql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "GetUserTablesSqlTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "GetUserTablesSqlTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GetUserTablesSqlTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem = {
    serializedName: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput_databaseSchemaMapItem",
    type: {
        name: "Composite",
        className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem",
        modelProperties: {
            database: {
                serializedName: "database",
                type: {
                    name: "String"
                }
            },
            schemas: {
                serializedName: "schemas",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput = {
    serializedName: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput",
        modelProperties: {
            targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            },
            databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            },
            databaseSchemaMap: {
                serializedName: "databaseSchemaMap",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput = {
    serializedName: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput",
        modelProperties: {
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            }
        }
    }
};
export var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties = {
    serializedName: "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput = {
    serializedName: "ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            },
            databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToTargetAzureDbForPostgreSqlSyncTaskInput = {
    serializedName: "ConnectToTargetAzureDbForPostgreSqlSyncTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            }
        }
    }
};
export var ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties = {
    serializedName: "ConnectToTarget.AzureDbForPostgreSql.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToTargetSqlDbTaskOutput = {
    serializedName: "ConnectToTargetSqlDbTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToTargetSqlDbTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            },
            targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ConnectToTargetSqlSqlDbSyncTaskInput = {
    serializedName: "ConnectToTargetSqlSqlDbSyncTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToTargetSqlSqlDbSyncTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            }
        }
    }
};
export var ConnectToTargetSqlSqlDbSyncTaskProperties = {
    serializedName: "ConnectToTarget.SqlDb.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToTargetSqlSqlDbSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToTargetSqlSqlDbSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetSqlDbTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToTargetSqlDbTaskInput = {
    serializedName: "ConnectToTargetSqlDbTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToTargetSqlDbTaskInput",
        modelProperties: {
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            }
        }
    }
};
export var ConnectToTargetSqlDbTaskProperties = {
    serializedName: "ConnectToTarget.SqlDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToTargetSqlDbTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToTargetSqlDbTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToTargetSqlDbTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToSourceOracleSyncTaskOutput = {
    serializedName: "ConnectToSourceOracleSyncTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToSourceOracleSyncTaskOutput",
        modelProperties: {
            sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            },
            databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToSourceOracleSyncTaskInput = {
    serializedName: "ConnectToSourceOracleSyncTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToSourceOracleSyncTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "OracleConnectionInfo"
                }
            }
        }
    }
};
export var ConnectToSourceOracleSyncTaskProperties = {
    serializedName: "ConnectToSource.Oracle.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToSourceOracleSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToSourceOracleSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToSourceOracleSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToSourcePostgreSqlSyncTaskOutput = {
    serializedName: "ConnectToSourcePostgreSqlSyncTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToSourcePostgreSqlSyncTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            },
            databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToSourcePostgreSqlSyncTaskInput = {
    serializedName: "ConnectToSourcePostgreSqlSyncTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToSourcePostgreSqlSyncTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "PostgreSqlConnectionInfo"
                }
            }
        }
    }
};
export var ConnectToSourcePostgreSqlSyncTaskProperties = {
    serializedName: "ConnectToSource.PostgreSql.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToSourcePostgreSqlSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToSourcePostgreSqlSyncTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToSourcePostgreSqlSyncTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigrationEligibilityInfo = {
    serializedName: "MigrationEligibilityInfo",
    type: {
        name: "Composite",
        className: "MigrationEligibilityInfo",
        modelProperties: {
            isEligibleForMigration: {
                readOnly: true,
                serializedName: "isEligibleForMigration",
                type: {
                    name: "Boolean"
                }
            },
            validationMessages: {
                readOnly: true,
                serializedName: "validationMessages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToSourceSqlServerTaskOutput = {
    serializedName: "ConnectToSourceSqlServerTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "ConnectToSourceSqlServerTaskOutput",
        className: "ConnectToSourceSqlServerTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ConnectToSourceSqlServerTaskOutputAgentJobLevel = {
    serializedName: "AgentJobLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
        uberParent: "ConnectToSourceSqlServerTaskOutput",
        className: "ConnectToSourceSqlServerTaskOutputAgentJobLevel",
        modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, jobCategory: {
                readOnly: true,
                serializedName: "jobCategory",
                type: {
                    name: "String"
                }
            }, isEnabled: {
                readOnly: true,
                serializedName: "isEnabled",
                type: {
                    name: "Boolean"
                }
            }, jobOwner: {
                readOnly: true,
                serializedName: "jobOwner",
                type: {
                    name: "String"
                }
            }, lastExecutedOn: {
                readOnly: true,
                serializedName: "lastExecutedOn",
                type: {
                    name: "DateTime"
                }
            }, validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }, migrationEligibility: {
                readOnly: true,
                serializedName: "migrationEligibility",
                type: {
                    name: "Composite",
                    className: "MigrationEligibilityInfo"
                }
            } })
    }
};
export var ConnectToSourceSqlServerTaskOutputLoginLevel = {
    serializedName: "LoginLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
        uberParent: "ConnectToSourceSqlServerTaskOutput",
        className: "ConnectToSourceSqlServerTaskOutputLoginLevel",
        modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, loginType: {
                readOnly: true,
                serializedName: "loginType",
                type: {
                    name: "String"
                }
            }, defaultDatabase: {
                readOnly: true,
                serializedName: "defaultDatabase",
                type: {
                    name: "String"
                }
            }, isEnabled: {
                readOnly: true,
                serializedName: "isEnabled",
                type: {
                    name: "Boolean"
                }
            }, migrationEligibility: {
                readOnly: true,
                serializedName: "migrationEligibility",
                type: {
                    name: "Composite",
                    className: "MigrationEligibilityInfo"
                }
            } })
    }
};
export var DatabaseFileInfo = {
    serializedName: "DatabaseFileInfo",
    type: {
        name: "Composite",
        className: "DatabaseFileInfo",
        modelProperties: {
            databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            logicalName: {
                serializedName: "logicalName",
                type: {
                    name: "String"
                }
            },
            physicalFullName: {
                serializedName: "physicalFullName",
                type: {
                    name: "String"
                }
            },
            restoreFullName: {
                serializedName: "restoreFullName",
                type: {
                    name: "String"
                }
            },
            fileType: {
                serializedName: "fileType",
                type: {
                    name: "String"
                }
            },
            sizeMB: {
                serializedName: "sizeMB",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var ConnectToSourceSqlServerTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
        uberParent: "ConnectToSourceSqlServerTaskOutput",
        className: "ConnectToSourceSqlServerTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, sizeMB: {
                readOnly: true,
                serializedName: "sizeMB",
                type: {
                    name: "Number"
                }
            }, databaseFiles: {
                readOnly: true,
                serializedName: "databaseFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabaseFileInfo"
                        }
                    }
                }
            }, compatibilityLevel: {
                readOnly: true,
                serializedName: "compatibilityLevel",
                type: {
                    name: "String"
                }
            }, databaseState: {
                readOnly: true,
                serializedName: "databaseState",
                type: {
                    name: "String"
                }
            } })
    }
};
export var ConnectToSourceSqlServerTaskOutputTaskLevel = {
    serializedName: "TaskLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
        uberParent: "ConnectToSourceSqlServerTaskOutput",
        className: "ConnectToSourceSqlServerTaskOutputTaskLevel",
        modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, logins: {
                readOnly: true,
                serializedName: "logins",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, agentJobs: {
                readOnly: true,
                serializedName: "agentJobs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, databaseTdeCertificateMapping: {
                readOnly: true,
                serializedName: "databaseTdeCertificateMapping",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            }, validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            } })
    }
};
export var ConnectToSourceSqlServerTaskInput = {
    serializedName: "ConnectToSourceSqlServerTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToSourceSqlServerTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            checkPermissionsGroup: {
                serializedName: "checkPermissionsGroup",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Default",
                        "MigrationFromSqlServerToAzureDB",
                        "MigrationFromSqlServerToAzureMI",
                        "MigrationFromMySQLToAzureDBForMySQL"
                    ]
                }
            },
            collectDatabases: {
                serializedName: "collectDatabases",
                defaultValue: true,
                type: {
                    name: "Boolean"
                }
            },
            collectLogins: {
                serializedName: "collectLogins",
                defaultValue: false,
                type: {
                    name: "Boolean"
                }
            },
            collectAgentJobs: {
                serializedName: "collectAgentJobs",
                defaultValue: false,
                type: {
                    name: "Boolean"
                }
            },
            collectTdeCertificateInfo: {
                serializedName: "collectTdeCertificateInfo",
                defaultValue: false,
                type: {
                    name: "Boolean"
                }
            },
            validateSsisCatalogOnly: {
                serializedName: "validateSsisCatalogOnly",
                defaultValue: false,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var ConnectToSourceSqlServerSyncTaskProperties = {
    serializedName: "ConnectToSource.SqlServer.Sync",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToSourceSqlServerSyncTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToSourceSqlServerTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToSourceSqlServerTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var ConnectToSourceSqlServerTaskProperties = {
    serializedName: "ConnectToSource.SqlServer",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToSourceSqlServerTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToSourceSqlServerTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToSourceSqlServerTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MongoDbShardKeyInfo = {
    serializedName: "MongoDbShardKeyInfo",
    type: {
        name: "Composite",
        className: "MongoDbShardKeyInfo",
        modelProperties: {
            fields: {
                required: true,
                serializedName: "fields",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MongoDbShardKeyField"
                        }
                    }
                }
            },
            isUnique: {
                required: true,
                serializedName: "isUnique",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var MongoDbObjectInfo = {
    serializedName: "MongoDbObjectInfo",
    type: {
        name: "Composite",
        className: "MongoDbObjectInfo",
        modelProperties: {
            averageDocumentSize: {
                required: true,
                serializedName: "averageDocumentSize",
                type: {
                    name: "Number"
                }
            },
            dataSize: {
                required: true,
                serializedName: "dataSize",
                type: {
                    name: "Number"
                }
            },
            documentCount: {
                required: true,
                serializedName: "documentCount",
                type: {
                    name: "Number"
                }
            },
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            qualifiedName: {
                required: true,
                serializedName: "qualifiedName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MongoDbCollectionInfo = {
    serializedName: "MongoDbCollectionInfo",
    type: {
        name: "Composite",
        className: "MongoDbCollectionInfo",
        modelProperties: __assign(__assign({}, MongoDbObjectInfo.type.modelProperties), { databaseName: {
                required: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, isCapped: {
                required: true,
                serializedName: "isCapped",
                type: {
                    name: "Boolean"
                }
            }, isSystemCollection: {
                required: true,
                serializedName: "isSystemCollection",
                type: {
                    name: "Boolean"
                }
            }, isView: {
                required: true,
                serializedName: "isView",
                type: {
                    name: "Boolean"
                }
            }, shardKey: {
                serializedName: "shardKey",
                type: {
                    name: "Composite",
                    className: "MongoDbShardKeyInfo"
                }
            }, supportsSharding: {
                required: true,
                serializedName: "supportsSharding",
                type: {
                    name: "Boolean"
                }
            }, viewOf: {
                serializedName: "viewOf",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MongoDbDatabaseInfo = {
    serializedName: "MongoDbDatabaseInfo",
    type: {
        name: "Composite",
        className: "MongoDbDatabaseInfo",
        modelProperties: __assign(__assign({}, MongoDbObjectInfo.type.modelProperties), { collections: {
                required: true,
                serializedName: "collections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MongoDbCollectionInfo"
                        }
                    }
                }
            }, supportsSharding: {
                required: true,
                serializedName: "supportsSharding",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export var MongoDbClusterInfo = {
    serializedName: "MongoDbClusterInfo",
    type: {
        name: "Composite",
        className: "MongoDbClusterInfo",
        modelProperties: {
            databases: {
                required: true,
                serializedName: "databases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MongoDbDatabaseInfo"
                        }
                    }
                }
            },
            supportsSharding: {
                required: true,
                serializedName: "supportsSharding",
                type: {
                    name: "Boolean"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            version: {
                required: true,
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ConnectToMongoDbTaskProperties = {
    serializedName: "Connect.MongoDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToMongoDbTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MongoDbConnectionInfo"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MongoDbClusterInfo"
                        }
                    }
                }
            } })
    }
};
export var ProjectTask = {
    serializedName: "ProjectTask",
    type: {
        name: "Composite",
        className: "ProjectTask",
        modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProjectTaskProperties"
                }
            } })
    }
};
export var ServiceSku = {
    serializedName: "ServiceSku",
    type: {
        name: "Composite",
        className: "ServiceSku",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var DataMigrationService = {
    serializedName: "DataMigrationService",
    type: {
        name: "Composite",
        className: "DataMigrationService",
        modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                readOnly: true,
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, publicKey: {
                serializedName: "properties.publicKey",
                type: {
                    name: "String"
                }
            }, virtualSubnetId: {
                required: true,
                serializedName: "properties.virtualSubnetId",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ServiceSku"
                }
            } })
    }
};
export var NameAvailabilityRequest = {
    serializedName: "NameAvailabilityRequest",
    type: {
        name: "Composite",
        className: "NameAvailabilityRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DatabaseInfo = {
    serializedName: "DatabaseInfo",
    type: {
        name: "Composite",
        className: "DatabaseInfo",
        modelProperties: {
            sourceDatabaseName: {
                required: true,
                serializedName: "sourceDatabaseName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var Project = {
    serializedName: "Project",
    type: {
        name: "Composite",
        className: "Project",
        modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sourcePlatform: {
                required: true,
                serializedName: "properties.sourcePlatform",
                type: {
                    name: "String"
                }
            }, targetPlatform: {
                required: true,
                serializedName: "properties.targetPlatform",
                type: {
                    name: "String"
                }
            }, creationTime: {
                readOnly: true,
                serializedName: "properties.creationTime",
                type: {
                    name: "DateTime"
                }
            }, sourceConnectionInfo: {
                serializedName: "properties.sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "ConnectionInfo"
                }
            }, targetConnectionInfo: {
                serializedName: "properties.targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "ConnectionInfo"
                }
            }, databasesInfo: {
                serializedName: "properties.databasesInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabaseInfo"
                        }
                    }
                }
            }, provisioningState: {
                readOnly: true,
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            } })
    }
};
export var ApiError = {
    serializedName: "ApiError",
    type: {
        name: "Composite",
        className: "ApiError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ODataError"
                }
            }
        }
    }
};
export var FileStorageInfo = {
    serializedName: "FileStorageInfo",
    type: {
        name: "Composite",
        className: "FileStorageInfo",
        modelProperties: {
            uri: {
                serializedName: "uri",
                type: {
                    name: "String"
                }
            },
            headers: {
                serializedName: "headers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var ServiceOperationDisplay = {
    serializedName: "ServiceOperation_display",
    type: {
        name: "Composite",
        className: "ServiceOperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ServiceOperation = {
    serializedName: "ServiceOperation",
    type: {
        name: "Composite",
        className: "ServiceOperation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "ServiceOperationDisplay"
                }
            }
        }
    }
};
export var QuotaName = {
    serializedName: "Quota_name",
    type: {
        name: "Composite",
        className: "QuotaName",
        modelProperties: {
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var Quota = {
    serializedName: "Quota",
    type: {
        name: "Composite",
        className: "Quota",
        modelProperties: {
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "QuotaName"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var NameAvailabilityResponse = {
    serializedName: "NameAvailabilityResponse",
    type: {
        name: "Composite",
        className: "NameAvailabilityResponse",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var AvailableServiceSkuSku = {
    serializedName: "AvailableServiceSku_sku",
    type: {
        name: "Composite",
        className: "AvailableServiceSkuSku",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var AvailableServiceSkuCapacity = {
    serializedName: "AvailableServiceSku_capacity",
    type: {
        name: "Composite",
        className: "AvailableServiceSkuCapacity",
        modelProperties: {
            minimum: {
                serializedName: "minimum",
                type: {
                    name: "Number"
                }
            },
            maximum: {
                serializedName: "maximum",
                type: {
                    name: "Number"
                }
            },
            default: {
                serializedName: "default",
                type: {
                    name: "Number"
                }
            },
            scaleType: {
                serializedName: "scaleType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var AvailableServiceSku = {
    serializedName: "AvailableServiceSku",
    type: {
        name: "Composite",
        className: "AvailableServiceSku",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "AvailableServiceSkuSku"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "AvailableServiceSkuCapacity"
                }
            }
        }
    }
};
export var DataMigrationServiceStatusResponse = {
    serializedName: "DataMigrationServiceStatusResponse",
    type: {
        name: "Composite",
        className: "DataMigrationServiceStatusResponse",
        modelProperties: {
            agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            vmSize: {
                serializedName: "vmSize",
                type: {
                    name: "String"
                }
            },
            supportedTaskTypes: {
                serializedName: "supportedTaskTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var ResourceSkuRestrictions = {
    serializedName: "ResourceSkuRestrictions",
    type: {
        name: "Composite",
        className: "ResourceSkuRestrictions",
        modelProperties: {
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            values: {
                readOnly: true,
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            reasonCode: {
                readOnly: true,
                serializedName: "reasonCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ResourceSkuCapabilities = {
    serializedName: "ResourceSkuCapabilities",
    type: {
        name: "Composite",
        className: "ResourceSkuCapabilities",
        modelProperties: {
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                readOnly: true,
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ResourceSkuCosts = {
    serializedName: "ResourceSkuCosts",
    type: {
        name: "Composite",
        className: "ResourceSkuCosts",
        modelProperties: {
            meterID: {
                readOnly: true,
                serializedName: "meterID",
                type: {
                    name: "String"
                }
            },
            quantity: {
                readOnly: true,
                serializedName: "quantity",
                type: {
                    name: "Number"
                }
            },
            extendedUnit: {
                readOnly: true,
                serializedName: "extendedUnit",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ResourceSkuCapacity = {
    serializedName: "ResourceSkuCapacity",
    type: {
        name: "Composite",
        className: "ResourceSkuCapacity",
        modelProperties: {
            minimum: {
                readOnly: true,
                serializedName: "minimum",
                type: {
                    name: "Number"
                }
            },
            maximum: {
                readOnly: true,
                serializedName: "maximum",
                type: {
                    name: "Number"
                }
            },
            default: {
                readOnly: true,
                serializedName: "default",
                type: {
                    name: "Number"
                }
            },
            scaleType: {
                readOnly: true,
                serializedName: "scaleType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ResourceSku = {
    serializedName: "ResourceSku",
    type: {
        name: "Composite",
        className: "ResourceSku",
        modelProperties: {
            resourceType: {
                readOnly: true,
                serializedName: "resourceType",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                readOnly: true,
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            size: {
                readOnly: true,
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            family: {
                readOnly: true,
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            kind: {
                readOnly: true,
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            capacity: {
                readOnly: true,
                serializedName: "capacity",
                type: {
                    name: "Composite",
                    className: "ResourceSkuCapacity"
                }
            },
            locations: {
                readOnly: true,
                serializedName: "locations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            apiVersions: {
                readOnly: true,
                serializedName: "apiVersions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            costs: {
                readOnly: true,
                serializedName: "costs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuCosts"
                        }
                    }
                }
            },
            capabilities: {
                readOnly: true,
                serializedName: "capabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuCapabilities"
                        }
                    }
                }
            },
            restrictions: {
                readOnly: true,
                serializedName: "restrictions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSkuRestrictions"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToSourceMySqlTaskInput = {
    serializedName: "ConnectToSourceMySqlTaskInput",
    type: {
        name: "Composite",
        className: "ConnectToSourceMySqlTaskInput",
        modelProperties: {
            sourceConnectionInfo: {
                required: true,
                serializedName: "sourceConnectionInfo",
                type: {
                    name: "Composite",
                    className: "MySqlConnectionInfo"
                }
            },
            targetPlatform: {
                serializedName: "targetPlatform",
                type: {
                    name: "String"
                }
            },
            checkPermissionsGroup: {
                serializedName: "checkPermissionsGroup",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Default",
                        "MigrationFromSqlServerToAzureDB",
                        "MigrationFromSqlServerToAzureMI",
                        "MigrationFromMySQLToAzureDBForMySQL"
                    ]
                }
            }
        }
    }
};
export var ServerProperties = {
    serializedName: "ServerProperties",
    type: {
        name: "Composite",
        className: "ServerProperties",
        modelProperties: {
            serverPlatform: {
                readOnly: true,
                serializedName: "serverPlatform",
                type: {
                    name: "String"
                }
            },
            serverName: {
                readOnly: true,
                serializedName: "serverName",
                type: {
                    name: "String"
                }
            },
            serverVersion: {
                readOnly: true,
                serializedName: "serverVersion",
                type: {
                    name: "String"
                }
            },
            serverEdition: {
                readOnly: true,
                serializedName: "serverEdition",
                type: {
                    name: "String"
                }
            },
            serverOperatingSystemVersion: {
                readOnly: true,
                serializedName: "serverOperatingSystemVersion",
                type: {
                    name: "String"
                }
            },
            serverDatabaseCount: {
                readOnly: true,
                serializedName: "serverDatabaseCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var ConnectToSourceNonSqlTaskOutput = {
    serializedName: "ConnectToSourceNonSqlTaskOutput",
    type: {
        name: "Composite",
        className: "ConnectToSourceNonSqlTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            },
            serverProperties: {
                readOnly: true,
                serializedName: "serverProperties",
                type: {
                    name: "Composite",
                    className: "ServerProperties"
                }
            },
            databases: {
                readOnly: true,
                serializedName: "databases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var ConnectToSourceMySqlTaskProperties = {
    serializedName: "ConnectToSource.MySql",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "ConnectToSourceMySqlTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "ConnectToSourceMySqlTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConnectToSourceNonSqlTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var SchemaMigrationSetting = {
    serializedName: "SchemaMigrationSetting",
    type: {
        name: "Composite",
        className: "SchemaMigrationSetting",
        modelProperties: {
            schemaOption: {
                serializedName: "schemaOption",
                type: {
                    name: "String"
                }
            },
            fileId: {
                serializedName: "fileId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSchemaSqlServerSqlDbDatabaseInput = {
    serializedName: "MigrateSchemaSqlServerSqlDbDatabaseInput",
    type: {
        name: "Composite",
        className: "MigrateSchemaSqlServerSqlDbDatabaseInput",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            targetDatabaseName: {
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            schemaSetting: {
                serializedName: "schemaSetting",
                type: {
                    name: "Composite",
                    className: "SchemaMigrationSetting"
                }
            }
        }
    }
};
export var MigrateSchemaSqlServerSqlDbTaskInput = {
    serializedName: "MigrateSchemaSqlServerSqlDbTaskInput",
    type: {
        name: "Composite",
        className: "MigrateSchemaSqlServerSqlDbTaskInput",
        modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                required: true,
                serializedName: "selectedDatabases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSchemaSqlServerSqlDbDatabaseInput"
                        }
                    }
                }
            } })
    }
};
export var MigrateSchemaSqlServerSqlDbTaskOutput = {
    serializedName: "MigrateSchemaSqlServerSqlDbTaskOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
        className: "MigrateSchemaSqlServerSqlDbTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSchemaSqlServerSqlDbTaskProperties = {
    serializedName: "MigrateSchemaSqlServerSqlDb",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "MigrateSchemaSqlServerSqlDbTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MigrateSchemaSqlServerSqlDbTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrateSchemaSqlServerSqlDbTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel = {
    serializedName: "MigrationLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
        className: "MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel",
        modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, sourceServerVersion: {
                readOnly: true,
                serializedName: "sourceServerVersion",
                type: {
                    name: "String"
                }
            }, sourceServerBrandVersion: {
                readOnly: true,
                serializedName: "sourceServerBrandVersion",
                type: {
                    name: "String"
                }
            }, targetServerVersion: {
                readOnly: true,
                serializedName: "targetServerVersion",
                type: {
                    name: "String"
                }
            }, targetServerBrandVersion: {
                readOnly: true,
                serializedName: "targetServerBrandVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel = {
    serializedName: "DatabaseLevelOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
        className: "MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel",
        modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            }, state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            }, stage: {
                readOnly: true,
                serializedName: "stage",
                type: {
                    name: "String"
                }
            }, startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            }, endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            }, databaseErrorResultPrefix: {
                readOnly: true,
                serializedName: "databaseErrorResultPrefix",
                type: {
                    name: "String"
                }
            }, schemaErrorResultPrefix: {
                readOnly: true,
                serializedName: "schemaErrorResultPrefix",
                type: {
                    name: "String"
                }
            }, numberOfSuccessfulOperations: {
                readOnly: true,
                serializedName: "numberOfSuccessfulOperations",
                type: {
                    name: "Number"
                }
            }, numberOfFailedOperations: {
                readOnly: true,
                serializedName: "numberOfFailedOperations",
                type: {
                    name: "Number"
                }
            }, fileId: {
                readOnly: true,
                serializedName: "fileId",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MigrateSchemaSqlServerSqlDbTaskOutputError = {
    serializedName: "SchemaErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
        className: "MigrateSchemaSqlServerSqlDbTaskOutputError",
        modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { commandText: {
                readOnly: true,
                serializedName: "commandText",
                type: {
                    name: "String"
                }
            }, errorText: {
                readOnly: true,
                serializedName: "errorText",
                type: {
                    name: "String"
                }
            } })
    }
};
export var MigrateSchemaSqlTaskOutputError = {
    serializedName: "ErrorOutput",
    type: {
        name: "Composite",
        polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
        uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
        className: "MigrateSchemaSqlTaskOutputError",
        modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { error: {
                readOnly: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ReportableException"
                }
            } })
    }
};
export var MongoDbCommandInput = {
    serializedName: "MongoDbCommandInput",
    type: {
        name: "Composite",
        className: "MongoDbCommandInput",
        modelProperties: {
            objectName: {
                serializedName: "objectName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MongoDbCancelCommand = {
    serializedName: "cancel",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
        uberParent: "CommandProperties",
        className: "MongoDbCancelCommand",
        modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MongoDbCommandInput"
                }
            } })
    }
};
export var MongoDbFinishCommandInput = {
    serializedName: "MongoDbFinishCommandInput",
    type: {
        name: "Composite",
        className: "MongoDbFinishCommandInput",
        modelProperties: __assign(__assign({}, MongoDbCommandInput.type.modelProperties), { immediate: {
                required: true,
                serializedName: "immediate",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export var MongoDbFinishCommand = {
    serializedName: "finish",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
        uberParent: "CommandProperties",
        className: "MongoDbFinishCommand",
        modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MongoDbFinishCommandInput"
                }
            } })
    }
};
export var MongoDbRestartCommand = {
    serializedName: "restart",
    type: {
        name: "Composite",
        polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
        uberParent: "CommandProperties",
        className: "MongoDbRestartCommand",
        modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "MongoDbCommandInput"
                }
            } })
    }
};
export var OracleOCIDriverInfo = {
    serializedName: "OracleOCIDriverInfo",
    type: {
        name: "Composite",
        className: "OracleOCIDriverInfo",
        modelProperties: {
            driverName: {
                readOnly: true,
                serializedName: "driverName",
                type: {
                    name: "String"
                }
            },
            driverSize: {
                readOnly: true,
                serializedName: "driverSize",
                type: {
                    name: "String"
                }
            },
            archiveChecksum: {
                readOnly: true,
                serializedName: "archiveChecksum",
                type: {
                    name: "String"
                }
            },
            oracleChecksum: {
                readOnly: true,
                serializedName: "oracleChecksum",
                type: {
                    name: "String"
                }
            },
            assemblyVersion: {
                readOnly: true,
                serializedName: "assemblyVersion",
                type: {
                    name: "String"
                }
            },
            supportedOracleVersions: {
                readOnly: true,
                serializedName: "supportedOracleVersions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var CheckOCIDriverTaskInput = {
    serializedName: "CheckOCIDriverTaskInput",
    type: {
        name: "Composite",
        className: "CheckOCIDriverTaskInput",
        modelProperties: {
            serverVersion: {
                serializedName: "serverVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CheckOCIDriverTaskOutput = {
    serializedName: "CheckOCIDriverTaskOutput",
    type: {
        name: "Composite",
        className: "CheckOCIDriverTaskOutput",
        modelProperties: {
            installedDriver: {
                serializedName: "installedDriver",
                type: {
                    name: "Composite",
                    className: "OracleOCIDriverInfo"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var UploadOCIDriverTaskInput = {
    serializedName: "UploadOCIDriverTaskInput",
    type: {
        name: "Composite",
        className: "UploadOCIDriverTaskInput",
        modelProperties: {
            driverShare: {
                serializedName: "driverShare",
                type: {
                    name: "Composite",
                    className: "FileShare"
                }
            }
        }
    }
};
export var UploadOCIDriverTaskOutput = {
    serializedName: "UploadOCIDriverTaskOutput",
    type: {
        name: "Composite",
        className: "UploadOCIDriverTaskOutput",
        modelProperties: {
            driverPackageName: {
                readOnly: true,
                serializedName: "driverPackageName",
                type: {
                    name: "String"
                }
            },
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var InstallOCIDriverTaskInput = {
    serializedName: "InstallOCIDriverTaskInput",
    type: {
        name: "Composite",
        className: "InstallOCIDriverTaskInput",
        modelProperties: {
            driverPackageName: {
                serializedName: "driverPackageName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var InstallOCIDriverTaskOutput = {
    serializedName: "InstallOCIDriverTaskOutput",
    type: {
        name: "Composite",
        className: "InstallOCIDriverTaskOutput",
        modelProperties: {
            validationErrors: {
                readOnly: true,
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportableException"
                        }
                    }
                }
            }
        }
    }
};
export var CheckOCIDriverTaskProperties = {
    serializedName: "Service.Check.OCI",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "CheckOCIDriverTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "CheckOCIDriverTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CheckOCIDriverTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var UploadOCIDriverTaskProperties = {
    serializedName: "Service.Upload.OCI",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "UploadOCIDriverTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "UploadOCIDriverTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UploadOCIDriverTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var InstallOCIDriverTaskProperties = {
    serializedName: "Service.Install.OCI",
    type: {
        name: "Composite",
        polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
        uberParent: "ProjectTaskProperties",
        className: "InstallOCIDriverTaskProperties",
        modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                serializedName: "input",
                type: {
                    name: "Composite",
                    className: "InstallOCIDriverTaskInput"
                }
            }, output: {
                readOnly: true,
                serializedName: "output",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InstallOCIDriverTaskOutput"
                        }
                    }
                }
            } })
    }
};
export var Database = {
    serializedName: "Database",
    type: {
        name: "Composite",
        className: "Database",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            compatibilityLevel: {
                serializedName: "compatibilityLevel",
                type: {
                    name: "String"
                }
            },
            collation: {
                serializedName: "collation",
                type: {
                    name: "String"
                }
            },
            serverName: {
                serializedName: "serverName",
                type: {
                    name: "String"
                }
            },
            fqdn: {
                serializedName: "fqdn",
                type: {
                    name: "String"
                }
            },
            installId: {
                serializedName: "installId",
                type: {
                    name: "String"
                }
            },
            serverVersion: {
                serializedName: "serverVersion",
                type: {
                    name: "String"
                }
            },
            serverEdition: {
                serializedName: "serverEdition",
                type: {
                    name: "String"
                }
            },
            serverLevel: {
                serializedName: "serverLevel",
                type: {
                    name: "String"
                }
            },
            serverDefaultDataPath: {
                serializedName: "serverDefaultDataPath",
                type: {
                    name: "String"
                }
            },
            serverDefaultLogPath: {
                serializedName: "serverDefaultLogPath",
                type: {
                    name: "String"
                }
            },
            serverDefaultBackupPath: {
                serializedName: "serverDefaultBackupPath",
                type: {
                    name: "String"
                }
            },
            serverCoreCount: {
                serializedName: "serverCoreCount",
                type: {
                    name: "Number"
                }
            },
            serverVisibleOnlineCoreCount: {
                serializedName: "serverVisibleOnlineCoreCount",
                type: {
                    name: "Number"
                }
            },
            databaseState: {
                serializedName: "databaseState",
                type: {
                    name: "String"
                }
            },
            serverId: {
                serializedName: "serverId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DatabaseObjectName = {
    serializedName: "DatabaseObjectName",
    type: {
        name: "Composite",
        className: "DatabaseObjectName",
        modelProperties: {
            databaseName: {
                readOnly: true,
                serializedName: "databaseName",
                type: {
                    name: "String"
                }
            },
            objectName: {
                readOnly: true,
                serializedName: "objectName",
                type: {
                    name: "String"
                }
            },
            schemaName: {
                readOnly: true,
                serializedName: "schemaName",
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "objectType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrationTableMetadata = {
    serializedName: "MigrationTableMetadata",
    type: {
        name: "Composite",
        className: "MigrationTableMetadata",
        modelProperties: {
            sourceTableName: {
                readOnly: true,
                serializedName: "sourceTableName",
                type: {
                    name: "String"
                }
            },
            targetTableName: {
                readOnly: true,
                serializedName: "targetTableName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DataMigrationProjectMetadata = {
    serializedName: "DataMigrationProjectMetadata",
    type: {
        name: "Composite",
        className: "DataMigrationProjectMetadata",
        modelProperties: {
            sourceServerName: {
                readOnly: true,
                serializedName: "sourceServerName",
                type: {
                    name: "String"
                }
            },
            sourceServerPort: {
                readOnly: true,
                serializedName: "sourceServerPort",
                type: {
                    name: "String"
                }
            },
            sourceUsername: {
                readOnly: true,
                serializedName: "sourceUsername",
                type: {
                    name: "String"
                }
            },
            targetServerName: {
                readOnly: true,
                serializedName: "targetServerName",
                type: {
                    name: "String"
                }
            },
            targetUsername: {
                readOnly: true,
                serializedName: "targetUsername",
                type: {
                    name: "String"
                }
            },
            targetDbName: {
                readOnly: true,
                serializedName: "targetDbName",
                type: {
                    name: "String"
                }
            },
            targetUsingWinAuth: {
                readOnly: true,
                serializedName: "targetUsingWinAuth",
                type: {
                    name: "Boolean"
                }
            },
            selectedMigrationTables: {
                readOnly: true,
                serializedName: "selectedMigrationTables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrationTableMetadata"
                        }
                    }
                }
            }
        }
    }
};
export var GetProjectDetailsNonSqlTaskInput = {
    serializedName: "GetProjectDetailsNonSqlTaskInput",
    type: {
        name: "Composite",
        className: "GetProjectDetailsNonSqlTaskInput",
        modelProperties: {
            projectName: {
                required: true,
                serializedName: "projectName",
                type: {
                    name: "String"
                }
            },
            projectLocation: {
                required: true,
                serializedName: "projectLocation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var NonSqlDataMigrationTable = {
    serializedName: "NonSqlDataMigrationTable",
    type: {
        name: "Composite",
        className: "NonSqlDataMigrationTable",
        modelProperties: {
            sourceName: {
                serializedName: "sourceName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var NonSqlMigrationTaskInput = {
    serializedName: "NonSqlMigrationTaskInput",
    type: {
        name: "Composite",
        className: "NonSqlMigrationTaskInput",
        modelProperties: {
            targetConnectionInfo: {
                required: true,
                serializedName: "targetConnectionInfo",
                type: {
                    name: "Composite",
                    className: "SqlConnectionInfo"
                }
            },
            targetDatabaseName: {
                required: true,
                serializedName: "targetDatabaseName",
                type: {
                    name: "String"
                }
            },
            projectName: {
                required: true,
                serializedName: "projectName",
                type: {
                    name: "String"
                }
            },
            projectLocation: {
                required: true,
                serializedName: "projectLocation",
                type: {
                    name: "String"
                }
            },
            selectedTables: {
                required: true,
                serializedName: "selectedTables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NonSqlDataMigrationTable"
                        }
                    }
                }
            }
        }
    }
};
export var DataMigrationError = {
    serializedName: "DataMigrationError",
    type: {
        name: "Composite",
        className: "DataMigrationError",
        modelProperties: {
            message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var NonSqlDataMigrationTableResult = {
    serializedName: "NonSqlDataMigrationTableResult",
    type: {
        name: "Composite",
        className: "NonSqlDataMigrationTableResult",
        modelProperties: {
            resultCode: {
                readOnly: true,
                serializedName: "resultCode",
                type: {
                    name: "String"
                }
            },
            sourceName: {
                readOnly: true,
                serializedName: "sourceName",
                type: {
                    name: "String"
                }
            },
            targetName: {
                readOnly: true,
                serializedName: "targetName",
                type: {
                    name: "String"
                }
            },
            sourceRowCount: {
                readOnly: true,
                serializedName: "sourceRowCount",
                type: {
                    name: "Number"
                }
            },
            targetRowCount: {
                readOnly: true,
                serializedName: "targetRowCount",
                type: {
                    name: "Number"
                }
            },
            elapsedTimeInMiliseconds: {
                readOnly: true,
                serializedName: "elapsedTimeInMiliseconds",
                type: {
                    name: "Number"
                }
            },
            errors: {
                readOnly: true,
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataMigrationError"
                        }
                    }
                }
            }
        }
    }
};
export var NonSqlMigrationTaskOutput = {
    serializedName: "NonSqlMigrationTaskOutput",
    type: {
        name: "Composite",
        className: "NonSqlMigrationTaskOutput",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            startedOn: {
                readOnly: true,
                serializedName: "startedOn",
                type: {
                    name: "DateTime"
                }
            },
            endedOn: {
                readOnly: true,
                serializedName: "endedOn",
                type: {
                    name: "DateTime"
                }
            },
            status: {
                readOnly: true,
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            dataMigrationTableResults: {
                readOnly: true,
                serializedName: "dataMigrationTableResults",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "NonSqlDataMigrationTableResult"
                        }
                    }
                }
            },
            progressMessage: {
                readOnly: true,
                serializedName: "progressMessage",
                type: {
                    name: "String"
                }
            },
            sourceServerName: {
                readOnly: true,
                serializedName: "sourceServerName",
                type: {
                    name: "String"
                }
            },
            targetServerName: {
                readOnly: true,
                serializedName: "targetServerName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DatabaseFileInput = {
    serializedName: "DatabaseFileInput",
    type: {
        name: "Composite",
        className: "DatabaseFileInput",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            logicalName: {
                serializedName: "logicalName",
                type: {
                    name: "String"
                }
            },
            physicalFullName: {
                serializedName: "physicalFullName",
                type: {
                    name: "String"
                }
            },
            restoreFullName: {
                serializedName: "restoreFullName",
                type: {
                    name: "String"
                }
            },
            fileType: {
                serializedName: "fileType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var MigrateSqlServerSqlServerDatabaseInput = {
    serializedName: "MigrateSqlServerSqlServerDatabaseInput",
    type: {
        name: "Composite",
        className: "MigrateSqlServerSqlServerDatabaseInput",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            restoreDatabaseName: {
                serializedName: "restoreDatabaseName",
                type: {
                    name: "String"
                }
            },
            backupAndRestoreFolder: {
                serializedName: "backupAndRestoreFolder",
                type: {
                    name: "String"
                }
            },
            databaseFiles: {
                serializedName: "databaseFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatabaseFileInput"
                        }
                    }
                }
            }
        }
    }
};
export var ResourceSkusResult = {
    serializedName: "ResourceSkusResult",
    type: {
        name: "Composite",
        className: "ResourceSkusResult",
        modelProperties: {
            value: {
                required: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceSku"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ServiceSkuList = {
    serializedName: "ServiceSkuList",
    type: {
        name: "Composite",
        className: "ServiceSkuList",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailableServiceSku"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DataMigrationServiceList = {
    serializedName: "DataMigrationServiceList",
    type: {
        name: "Composite",
        className: "DataMigrationServiceList",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataMigrationService"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var TaskList = {
    serializedName: "TaskList",
    type: {
        name: "Composite",
        className: "TaskList",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProjectTask"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ProjectList = {
    serializedName: "ProjectList",
    type: {
        name: "Composite",
        className: "ProjectList",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Project"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var QuotaList = {
    serializedName: "QuotaList",
    type: {
        name: "Composite",
        className: "QuotaList",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Quota"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ServiceOperationList = {
    serializedName: "ServiceOperationList",
    type: {
        name: "Composite",
        className: "ServiceOperationList",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceOperation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var FileList = {
    serializedName: "FileList",
    type: {
        name: "Composite",
        className: "FileList",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProjectFile"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var discriminators = {
    'CommandProperties.Migrate.SqlServer.AzureDbSqlMi.Complete': MigrateMISyncCompleteCommandProperties,
    'CommandProperties.Migrate.Sync.Complete.Database': MigrateSyncCompleteCommandProperties,
    'CommandProperties': CommandProperties,
    'MigrateSsisTaskOutput.SsisProjectLevelOutput': MigrateSsisTaskOutputProjectLevel,
    'MigrateSsisTaskOutput.MigrationLevelOutput': MigrateSsisTaskOutputMigrationLevel,
    'MigrateSsisTaskOutput': MigrateSsisTaskOutput,
    'ConnectionInfo.MiSqlConnectionInfo': MiSqlConnectionInfo,
    'ConnectionInfo.PostgreSqlConnectionInfo': PostgreSqlConnectionInfo,
    'ConnectionInfo.OracleConnectionInfo': OracleConnectionInfo,
    'ConnectionInfo.MySqlConnectionInfo': MySqlConnectionInfo,
    'ConnectionInfo.MongoDbConnectionInfo': MongoDbConnectionInfo,
    'ConnectionInfo': ConnectionInfo,
    'ConnectionInfo.SqlConnectionInfo': SqlConnectionInfo,
    'ProjectTaskProperties.Migrate.Ssis': MigrateSsisTaskProperties,
    'ProjectTaskProperties.GetTDECertificates.Sql': GetTdeCertificatesSqlTaskProperties,
    'ProjectTaskProperties.Validate.Oracle.AzureDbPostgreSql.Sync': ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
    'ProjectTaskProperties.Validate.MongoDb': ValidateMongoDbTaskProperties,
    'ProjectTaskProperties.ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS': ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
    'ProjectTaskProperties.ValidateMigrationInput.SqlServer.AzureSqlDbMI': ValidateMigrationInputSqlServerSqlMITaskProperties,
    'ProjectTaskProperties.ValidateMigrationInput.SqlServer.SqlDb.Sync': ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.DatabaseLevelErrorOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.ErrorOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.TableLevelOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.DatabaseLevelOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.MigrationLevelOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
    'MigrateOracleAzureDbPostgreSqlSyncTaskOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
    'ProjectTaskProperties.Migrate.Oracle.AzureDbForPostgreSql.Sync': MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.DatabaseLevelErrorOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.ErrorOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.TableLevelOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.DatabaseLevelOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.MigrationLevelOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
    'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
    'ProjectTaskProperties.Migrate.PostgreSql.AzureDbForPostgreSql.Sync': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
    'MigrateMySqlAzureDbForMySqlSyncTaskOutput.DatabaseLevelErrorOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
    'MigrateMySqlAzureDbForMySqlSyncTaskOutput.ErrorOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
    'MigrateMySqlAzureDbForMySqlSyncTaskOutput.TableLevelOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
    'MigrateMySqlAzureDbForMySqlSyncTaskOutput.DatabaseLevelOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
    'MigrateMySqlAzureDbForMySqlSyncTaskOutput.MigrationLevelOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
    'MigrateMySqlAzureDbForMySqlSyncTaskOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutput,
    'ProjectTaskProperties.Migrate.MySql.AzureDbForMySql.Sync': MigrateMySqlAzureDbForMySqlSyncTaskProperties,
    'MigrateSqlServerSqlDbSyncTaskOutput.DatabaseLevelErrorOutput': MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
    'MigrateSqlServerSqlDbSyncTaskOutput.ErrorOutput': MigrateSqlServerSqlDbSyncTaskOutputError,
    'MigrateSqlServerSqlDbSyncTaskOutput.TableLevelOutput': MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
    'MigrateSqlServerSqlDbSyncTaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
    'MigrateSqlServerSqlDbSyncTaskOutput.MigrationLevelOutput': MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
    'MigrateSqlServerSqlDbSyncTaskOutput': MigrateSqlServerSqlDbSyncTaskOutput,
    'ProjectTaskProperties.Migrate.SqlServer.AzureSqlDb.Sync': MigrateSqlServerSqlDbSyncTaskProperties,
    'MigrateSqlServerSqlDbTaskOutput.ErrorOutput': MigrateSqlServerSqlDbTaskOutputError,
    'MigrateSqlServerSqlDbTaskOutput.TableLevelOutput': MigrateSqlServerSqlDbTaskOutputTableLevel,
    'MigrateSqlServerSqlDbTaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
    'MigrateSqlServerSqlDbTaskOutput.MigrationLevelOutput': MigrateSqlServerSqlDbTaskOutputMigrationLevel,
    'MigrateSqlServerSqlDbTaskOutput': MigrateSqlServerSqlDbTaskOutput,
    'ProjectTaskProperties.Migrate.SqlServer.SqlDb': MigrateSqlServerSqlDbTaskProperties,
    'MigrateSqlServerSqlMISyncTaskOutput.ErrorOutput': MigrateSqlServerSqlMISyncTaskOutputError,
    'MigrateSqlServerSqlMISyncTaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
    'MigrateSqlServerSqlMISyncTaskOutput.MigrationLevelOutput': MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
    'MigrateSqlServerSqlMISyncTaskOutput': MigrateSqlServerSqlMISyncTaskOutput,
    'ProjectTaskProperties.Migrate.SqlServer.AzureSqlDbMI.Sync.LRS': MigrateSqlServerSqlMISyncTaskProperties,
    'MigrateSqlServerSqlMITaskOutput.ErrorOutput': MigrateSqlServerSqlMITaskOutputError,
    'MigrateSqlServerSqlMITaskOutput.LoginLevelOutput': MigrateSqlServerSqlMITaskOutputLoginLevel,
    'MigrateSqlServerSqlMITaskOutput.AgentJobLevelOutput': MigrateSqlServerSqlMITaskOutputAgentJobLevel,
    'MigrateSqlServerSqlMITaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlMITaskOutputDatabaseLevel,
    'MigrateSqlServerSqlMITaskOutput.MigrationLevelOutput': MigrateSqlServerSqlMITaskOutputMigrationLevel,
    'MigrateSqlServerSqlMITaskOutput': MigrateSqlServerSqlMITaskOutput,
    'ProjectTaskProperties.Migrate.SqlServer.AzureSqlDbMI': MigrateSqlServerSqlMITaskProperties,
    'ProjectTaskProperties.Migrate.MongoDb': MigrateMongoDbTaskProperties,
    'ProjectTaskProperties.ConnectToTarget.AzureDbForMySql': ConnectToTargetAzureDbForMySqlTaskProperties,
    'ProjectTaskProperties.ConnectToTarget.AzureSqlDbMI.Sync.LRS': ConnectToTargetSqlMISyncTaskProperties,
    'ProjectTaskProperties.ConnectToTarget.AzureSqlDbMI': ConnectToTargetSqlMITaskProperties,
    'ProjectTaskProperties.GetUserTablesPostgreSql': GetUserTablesPostgreSqlTaskProperties,
    'ProjectTaskProperties.GetUserTablesOracle': GetUserTablesOracleTaskProperties,
    'ProjectTaskProperties.GetUserTables.AzureSqlDb.Sync': GetUserTablesSqlSyncTaskProperties,
    'ProjectTaskProperties.GetUserTables.Sql': GetUserTablesSqlTaskProperties,
    'ProjectTaskProperties.ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync': ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
    'ProjectTaskProperties.ConnectToTarget.AzureDbForPostgreSql.Sync': ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
    'ProjectTaskProperties.ConnectToTarget.SqlDb.Sync': ConnectToTargetSqlSqlDbSyncTaskProperties,
    'ProjectTaskProperties.ConnectToTarget.SqlDb': ConnectToTargetSqlDbTaskProperties,
    'ProjectTaskProperties.ConnectToSource.Oracle.Sync': ConnectToSourceOracleSyncTaskProperties,
    'ProjectTaskProperties.ConnectToSource.PostgreSql.Sync': ConnectToSourcePostgreSqlSyncTaskProperties,
    'ConnectToSourceSqlServerTaskOutput.AgentJobLevelOutput': ConnectToSourceSqlServerTaskOutputAgentJobLevel,
    'ConnectToSourceSqlServerTaskOutput.LoginLevelOutput': ConnectToSourceSqlServerTaskOutputLoginLevel,
    'ConnectToSourceSqlServerTaskOutput.DatabaseLevelOutput': ConnectToSourceSqlServerTaskOutputDatabaseLevel,
    'ConnectToSourceSqlServerTaskOutput.TaskLevelOutput': ConnectToSourceSqlServerTaskOutputTaskLevel,
    'ConnectToSourceSqlServerTaskOutput': ConnectToSourceSqlServerTaskOutput,
    'ProjectTaskProperties.ConnectToSource.SqlServer.Sync': ConnectToSourceSqlServerSyncTaskProperties,
    'ProjectTaskProperties.ConnectToSource.SqlServer': ConnectToSourceSqlServerTaskProperties,
    'ProjectTaskProperties.Connect.MongoDb': ConnectToMongoDbTaskProperties,
    'ProjectTaskProperties': ProjectTaskProperties,
    'ProjectTaskProperties.ConnectToSource.MySql': ConnectToSourceMySqlTaskProperties,
    'MigrateSchemaSqlServerSqlDbTaskOutput': MigrateSchemaSqlServerSqlDbTaskOutput,
    'ProjectTaskProperties.MigrateSchemaSqlServerSqlDb': MigrateSchemaSqlServerSqlDbTaskProperties,
    'MigrateSchemaSqlServerSqlDbTaskOutput.MigrationLevelOutput': MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
    'MigrateSchemaSqlServerSqlDbTaskOutput.DatabaseLevelOutput': MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
    'MigrateSchemaSqlServerSqlDbTaskOutput.SchemaErrorOutput': MigrateSchemaSqlServerSqlDbTaskOutputError,
    'MigrateSchemaSqlServerSqlDbTaskOutput.ErrorOutput': MigrateSchemaSqlTaskOutputError,
    'CommandProperties.cancel': MongoDbCancelCommand,
    'CommandProperties.finish': MongoDbFinishCommand,
    'CommandProperties.restart': MongoDbRestartCommand,
    'ProjectTaskProperties.Service.Check.OCI': CheckOCIDriverTaskProperties,
    'ProjectTaskProperties.Service.Upload.OCI': UploadOCIDriverTaskProperties,
    'ProjectTaskProperties.Service.Install.OCI': InstallOCIDriverTaskProperties
};
//# sourceMappingURL=mappers.js.map