/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmDatamigration = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ProjectFileProperties = {
        serializedName: "ProjectFileProperties",
        type: {
            name: "Composite",
            className: "ProjectFileProperties",
            modelProperties: {
                extension: {
                    serializedName: "extension",
                    type: {
                        name: "String"
                    }
                },
                filePath: {
                    serializedName: "filePath",
                    type: {
                        name: "String"
                    }
                },
                lastModified: {
                    readOnly: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                mediaType: {
                    serializedName: "mediaType",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    readOnly: true,
                    serializedName: "size",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ProjectFile = {
        serializedName: "ProjectFile",
        type: {
            name: "Composite",
            className: "ProjectFile",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ProjectFileProperties"
                    }
                } })
        }
    };
    var ODataError = {
        serializedName: "ODataError",
        type: {
            name: "Composite",
            className: "ODataError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ODataError"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReportableException = {
        serializedName: "ReportableException",
        type: {
            name: "Composite",
            className: "ReportableException",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                actionableMessage: {
                    serializedName: "actionableMessage",
                    type: {
                        name: "String"
                    }
                },
                filePath: {
                    serializedName: "filePath",
                    type: {
                        name: "String"
                    }
                },
                lineNumber: {
                    serializedName: "lineNumber",
                    type: {
                        name: "String"
                    }
                },
                hResult: {
                    serializedName: "hResult",
                    type: {
                        name: "Number"
                    }
                },
                stackTrace: {
                    serializedName: "stackTrace",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateMISyncCompleteCommandOutput = {
        serializedName: "MigrateMISyncCompleteCommandOutput",
        type: {
            name: "Composite",
            className: "MigrateMISyncCompleteCommandOutput",
            modelProperties: {
                errors: {
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateMISyncCompleteCommandInput = {
        serializedName: "MigrateMISyncCompleteCommandInput",
        type: {
            name: "Composite",
            className: "MigrateMISyncCompleteCommandInput",
            modelProperties: {
                sourceDatabaseName: {
                    required: true,
                    serializedName: "sourceDatabaseName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CommandProperties = {
        serializedName: "CommandProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "commandType",
                clientName: "commandType"
            },
            uberParent: "CommandProperties",
            className: "CommandProperties",
            modelProperties: {
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ODataError"
                            }
                        }
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                commandType: {
                    required: true,
                    serializedName: "commandType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateMISyncCompleteCommandProperties = {
        serializedName: "Migrate.SqlServer.AzureDbSqlMi.Complete",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
            uberParent: "CommandProperties",
            className: "MigrateMISyncCompleteCommandProperties",
            modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateMISyncCompleteCommandInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Composite",
                        className: "MigrateMISyncCompleteCommandOutput"
                    }
                } })
        }
    };
    var MigrateSyncCompleteCommandOutput = {
        serializedName: "MigrateSyncCompleteCommandOutput",
        type: {
            name: "Composite",
            className: "MigrateSyncCompleteCommandOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateSyncCompleteCommandInput = {
        serializedName: "MigrateSyncCompleteCommandInput",
        type: {
            name: "Composite",
            className: "MigrateSyncCompleteCommandInput",
            modelProperties: {
                databaseName: {
                    required: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                commitTimeStamp: {
                    serializedName: "commitTimeStamp",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var MigrateSyncCompleteCommandProperties = {
        serializedName: "Migrate.Sync.Complete.Database",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
            uberParent: "CommandProperties",
            className: "MigrateSyncCompleteCommandProperties",
            modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateSyncCompleteCommandInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Composite",
                        className: "MigrateSyncCompleteCommandOutput"
                    }
                } })
        }
    };
    var MigrateSsisTaskOutput = {
        serializedName: "MigrateSsisTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateSsisTaskOutput",
            className: "MigrateSsisTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSsisTaskOutputProjectLevel = {
        serializedName: "SsisProjectLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSsisTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSsisTaskOutput",
            className: "MigrateSsisTaskOutputProjectLevel",
            modelProperties: __assign(__assign({}, MigrateSsisTaskOutput.type.modelProperties), { folderName: {
                    readOnly: true,
                    serializedName: "folderName",
                    type: {
                        name: "String"
                    }
                }, projectName: {
                    readOnly: true,
                    serializedName: "projectName",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, stage: {
                    readOnly: true,
                    serializedName: "stage",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSsisTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSsisTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSsisTaskOutput",
            className: "MigrateSsisTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateSsisTaskOutput.type.modelProperties), { startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }, stage: {
                    readOnly: true,
                    serializedName: "stage",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SsisMigrationInfo = {
        serializedName: "SsisMigrationInfo",
        type: {
            name: "Composite",
            className: "SsisMigrationInfo",
            modelProperties: {
                ssisStoreType: {
                    serializedName: "ssisStoreType",
                    type: {
                        name: "String"
                    }
                },
                projectOverwriteOption: {
                    serializedName: "projectOverwriteOption",
                    type: {
                        name: "String"
                    }
                },
                environmentOverwriteOption: {
                    serializedName: "environmentOverwriteOption",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionInfo = {
        serializedName: "ConnectionInfo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "ConnectionInfo",
            className: "ConnectionInfo",
            modelProperties: {
                userName: {
                    serializedName: "userName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MiSqlConnectionInfo = {
        serializedName: "MiSqlConnectionInfo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
            uberParent: "ConnectionInfo",
            className: "MiSqlConnectionInfo",
            modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { managedInstanceResourceId: {
                    required: true,
                    serializedName: "managedInstanceResourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var PostgreSqlConnectionInfo = {
        serializedName: "PostgreSqlConnectionInfo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
            uberParent: "ConnectionInfo",
            className: "PostgreSqlConnectionInfo",
            modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { serverName: {
                    required: true,
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var OracleConnectionInfo = {
        serializedName: "OracleConnectionInfo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
            uberParent: "ConnectionInfo",
            className: "OracleConnectionInfo",
            modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { dataSource: {
                    required: true,
                    serializedName: "dataSource",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MySqlConnectionInfo = {
        serializedName: "MySqlConnectionInfo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
            uberParent: "ConnectionInfo",
            className: "MySqlConnectionInfo",
            modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { serverName: {
                    required: true,
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                }, port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MongoDbConnectionInfo = {
        serializedName: "MongoDbConnectionInfo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
            uberParent: "ConnectionInfo",
            className: "MongoDbConnectionInfo",
            modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { connectionString: {
                    required: true,
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SqlConnectionInfo = {
        serializedName: "SqlConnectionInfo",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectionInfo.type.polymorphicDiscriminator,
            uberParent: "ConnectionInfo",
            className: "SqlConnectionInfo",
            modelProperties: __assign(__assign({}, ConnectionInfo.type.modelProperties), { dataSource: {
                    required: true,
                    serializedName: "dataSource",
                    type: {
                        name: "String"
                    }
                }, authentication: {
                    serializedName: "authentication",
                    type: {
                        name: "String"
                    }
                }, encryptConnection: {
                    serializedName: "encryptConnection",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                }, additionalSettings: {
                    serializedName: "additionalSettings",
                    type: {
                        name: "String"
                    }
                }, trustServerCertificate: {
                    serializedName: "trustServerCertificate",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }, platform: {
                    serializedName: "platform",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SqlMigrationTaskInput = {
        serializedName: "SqlMigrationTaskInput",
        type: {
            name: "Composite",
            className: "SqlMigrationTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                }
            }
        }
    };
    var MigrateSsisTaskInput = {
        serializedName: "MigrateSsisTaskInput",
        type: {
            name: "Composite",
            className: "MigrateSsisTaskInput",
            modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { ssisMigrationInfo: {
                    required: true,
                    serializedName: "ssisMigrationInfo",
                    type: {
                        name: "Composite",
                        className: "SsisMigrationInfo"
                    }
                } })
        }
    };
    var ProjectTaskProperties = {
        serializedName: "ProjectTaskProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "taskType",
                clientName: "taskType"
            },
            uberParent: "ProjectTaskProperties",
            className: "ProjectTaskProperties",
            modelProperties: {
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ODataError"
                            }
                        }
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                commands: {
                    readOnly: true,
                    serializedName: "commands",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CommandProperties"
                            }
                        }
                    }
                },
                clientData: {
                    serializedName: "clientData",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                taskType: {
                    required: true,
                    serializedName: "taskType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSsisTaskProperties = {
        serializedName: "Migrate.Ssis",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateSsisTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateSsisTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSsisTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var GetTdeCertificatesSqlTaskOutput = {
        serializedName: "GetTdeCertificatesSqlTaskOutput",
        type: {
            name: "Composite",
            className: "GetTdeCertificatesSqlTaskOutput",
            modelProperties: {
                base64EncodedCertificates: {
                    readOnly: true,
                    serializedName: "base64EncodedCertificates",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var SelectedCertificateInput = {
        serializedName: "SelectedCertificateInput",
        type: {
            name: "Composite",
            className: "SelectedCertificateInput",
            modelProperties: {
                certificateName: {
                    required: true,
                    serializedName: "certificateName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileShare = {
        serializedName: "FileShare",
        type: {
            name: "Composite",
            className: "FileShare",
            modelProperties: {
                userName: {
                    serializedName: "userName",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                path: {
                    required: true,
                    serializedName: "path",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GetTdeCertificatesSqlTaskInput = {
        serializedName: "GetTdeCertificatesSqlTaskInput",
        type: {
            name: "Composite",
            className: "GetTdeCertificatesSqlTaskInput",
            modelProperties: {
                connectionInfo: {
                    required: true,
                    serializedName: "connectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                backupFileShare: {
                    required: true,
                    serializedName: "backupFileShare",
                    type: {
                        name: "Composite",
                        className: "FileShare"
                    }
                },
                selectedCertificates: {
                    required: true,
                    serializedName: "selectedCertificates",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SelectedCertificateInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetTdeCertificatesSqlTaskProperties = {
        serializedName: "GetTDECertificates.Sql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "GetTdeCertificatesSqlTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "GetTdeCertificatesSqlTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GetTdeCertificatesSqlTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ValidateOracleAzureDbPostgreSqlSyncTaskOutput = {
        serializedName: "ValidateOracleAzureDbPostgreSqlSyncTaskOutput",
        type: {
            name: "Composite",
            className: "ValidateOracleAzureDbPostgreSqlSyncTaskOutput",
            modelProperties: {
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncDatabaseInput = {
        serializedName: "MigrateOracleAzureDbPostgreSqlSyncDatabaseInput",
        type: {
            name: "Composite",
            className: "MigrateOracleAzureDbPostgreSqlSyncDatabaseInput",
            modelProperties: {
                caseManipulation: {
                    serializedName: "caseManipulation",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                schemaName: {
                    serializedName: "schemaName",
                    type: {
                        name: "String"
                    }
                },
                tableMap: {
                    serializedName: "tableMap",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetDatabaseName: {
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                migrationSetting: {
                    serializedName: "migrationSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceSetting: {
                    serializedName: "sourceSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetSetting: {
                    serializedName: "targetSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncTaskInput = {
        serializedName: "MigrateOracleAzureDbPostgreSqlSyncTaskInput",
        type: {
            name: "Composite",
            className: "MigrateOracleAzureDbPostgreSqlSyncTaskInput",
            modelProperties: {
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateOracleAzureDbPostgreSqlSyncDatabaseInput"
                            }
                        }
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                },
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "OracleConnectionInfo"
                    }
                }
            }
        }
    };
    var ValidateOracleAzureDbForPostgreSqlSyncTaskProperties = {
        serializedName: "Validate.Oracle.AzureDbPostgreSql.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ValidateOracleAzureDbForPostgreSqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateOracleAzureDbPostgreSqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ValidateOracleAzureDbPostgreSqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MongoDbError = {
        serializedName: "MongoDbError",
        type: {
            name: "Composite",
            className: "MongoDbError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MongoDbProgress = {
        serializedName: "MongoDbProgress",
        type: {
            name: "Composite",
            className: "MongoDbProgress",
            modelProperties: {
                bytesCopied: {
                    required: true,
                    serializedName: "bytesCopied",
                    type: {
                        name: "Number"
                    }
                },
                documentsCopied: {
                    required: true,
                    serializedName: "documentsCopied",
                    type: {
                        name: "Number"
                    }
                },
                elapsedTime: {
                    required: true,
                    serializedName: "elapsedTime",
                    type: {
                        name: "String"
                    }
                },
                errors: {
                    required: true,
                    serializedName: "errors",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MongoDbError"
                            }
                        }
                    }
                },
                eventsPending: {
                    required: true,
                    serializedName: "eventsPending",
                    type: {
                        name: "Number"
                    }
                },
                eventsReplayed: {
                    required: true,
                    serializedName: "eventsReplayed",
                    type: {
                        name: "Number"
                    }
                },
                lastEventTime: {
                    serializedName: "lastEventTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastReplayTime: {
                    serializedName: "lastReplayTime",
                    type: {
                        name: "DateTime"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                qualifiedName: {
                    serializedName: "qualifiedName",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    required: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                totalBytes: {
                    required: true,
                    serializedName: "totalBytes",
                    type: {
                        name: "Number"
                    }
                },
                totalDocuments: {
                    required: true,
                    serializedName: "totalDocuments",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MongoDbCollectionProgress = {
        serializedName: "Collection",
        type: {
            name: "Composite",
            className: "MongoDbCollectionProgress",
            modelProperties: __assign({}, MongoDbProgress.type.modelProperties)
        }
    };
    var MongoDbDatabaseProgress = {
        serializedName: "Database",
        type: {
            name: "Composite",
            className: "MongoDbDatabaseProgress",
            modelProperties: __assign(__assign({}, MongoDbProgress.type.modelProperties), { collections: {
                    serializedName: "collections",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MongoDbCollectionProgress"
                            }
                        }
                    }
                } })
        }
    };
    var MongoDbMigrationProgress = {
        serializedName: "Migration",
        type: {
            name: "Composite",
            className: "MongoDbMigrationProgress",
            modelProperties: __assign(__assign({}, MongoDbProgress.type.modelProperties), { databases: {
                    serializedName: "databases",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MongoDbDatabaseProgress"
                            }
                        }
                    }
                } })
        }
    };
    var MongoDbThrottlingSettings = {
        serializedName: "MongoDbThrottlingSettings",
        type: {
            name: "Composite",
            className: "MongoDbThrottlingSettings",
            modelProperties: {
                minFreeCpu: {
                    serializedName: "minFreeCpu",
                    type: {
                        name: "Number"
                    }
                },
                minFreeMemoryMb: {
                    serializedName: "minFreeMemoryMb",
                    type: {
                        name: "Number"
                    }
                },
                maxParallelism: {
                    serializedName: "maxParallelism",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MongoDbShardKeyField = {
        serializedName: "MongoDbShardKeyField",
        type: {
            name: "Composite",
            className: "MongoDbShardKeyField",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                order: {
                    required: true,
                    serializedName: "order",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MongoDbShardKeySetting = {
        serializedName: "MongoDbShardKeySetting",
        type: {
            name: "Composite",
            className: "MongoDbShardKeySetting",
            modelProperties: {
                fields: {
                    required: true,
                    serializedName: "fields",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MongoDbShardKeyField"
                            }
                        }
                    }
                },
                isUnique: {
                    required: true,
                    serializedName: "isUnique",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MongoDbCollectionSettings = {
        serializedName: "MongoDbCollectionSettings",
        type: {
            name: "Composite",
            className: "MongoDbCollectionSettings",
            modelProperties: {
                canDelete: {
                    serializedName: "canDelete",
                    type: {
                        name: "Boolean"
                    }
                },
                shardKey: {
                    serializedName: "shardKey",
                    type: {
                        name: "Composite",
                        className: "MongoDbShardKeySetting"
                    }
                },
                targetRUs: {
                    serializedName: "targetRUs",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MongoDbDatabaseSettings = {
        serializedName: "MongoDbDatabaseSettings",
        type: {
            name: "Composite",
            className: "MongoDbDatabaseSettings",
            modelProperties: {
                collections: {
                    required: true,
                    serializedName: "collections",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MongoDbCollectionSettings"
                            }
                        }
                    }
                },
                targetRUs: {
                    serializedName: "targetRUs",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var MongoDbMigrationSettings = {
        serializedName: "MongoDbMigrationSettings",
        type: {
            name: "Composite",
            className: "MongoDbMigrationSettings",
            modelProperties: {
                boostRUs: {
                    serializedName: "boostRUs",
                    type: {
                        name: "Number"
                    }
                },
                databases: {
                    required: true,
                    serializedName: "databases",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MongoDbDatabaseSettings"
                            }
                        }
                    }
                },
                replication: {
                    serializedName: "replication",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    required: true,
                    serializedName: "source",
                    type: {
                        name: "Composite",
                        className: "MongoDbConnectionInfo"
                    }
                },
                target: {
                    required: true,
                    serializedName: "target",
                    type: {
                        name: "Composite",
                        className: "MongoDbConnectionInfo"
                    }
                },
                throttling: {
                    serializedName: "throttling",
                    type: {
                        name: "Composite",
                        className: "MongoDbThrottlingSettings"
                    }
                }
            }
        }
    };
    var ValidateMongoDbTaskProperties = {
        serializedName: "Validate.MongoDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ValidateMongoDbTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MongoDbMigrationSettings"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MongoDbMigrationProgress"
                            }
                        }
                    }
                } })
        }
    };
    var ValidateMigrationInputSqlServerSqlMISyncTaskOutput = {
        serializedName: "ValidateMigrationInputSqlServerSqlMISyncTaskOutput",
        type: {
            name: "Composite",
            className: "ValidateMigrationInputSqlServerSqlMISyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var AzureActiveDirectoryApp = {
        serializedName: "AzureActiveDirectoryApp",
        type: {
            name: "Composite",
            className: "AzureActiveDirectoryApp",
            modelProperties: {
                applicationId: {
                    required: true,
                    serializedName: "applicationId",
                    type: {
                        name: "String"
                    }
                },
                appKey: {
                    required: true,
                    serializedName: "appKey",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    required: true,
                    serializedName: "tenantId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlMIDatabaseInput = {
        serializedName: "MigrateSqlServerSqlMIDatabaseInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlMIDatabaseInput",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                restoreDatabaseName: {
                    required: true,
                    serializedName: "restoreDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                backupFileShare: {
                    serializedName: "backupFileShare",
                    type: {
                        name: "Composite",
                        className: "FileShare"
                    }
                },
                backupFilePaths: {
                    serializedName: "backupFilePaths",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SqlServerSqlMISyncTaskInput = {
        serializedName: "SqlServerSqlMISyncTaskInput",
        type: {
            name: "Composite",
            className: "SqlServerSqlMISyncTaskInput",
            modelProperties: {
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlMIDatabaseInput"
                            }
                        }
                    }
                },
                backupFileShare: {
                    serializedName: "backupFileShare",
                    type: {
                        name: "Composite",
                        className: "FileShare"
                    }
                },
                storageResourceId: {
                    required: true,
                    serializedName: "storageResourceId",
                    type: {
                        name: "String"
                    }
                },
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "MiSqlConnectionInfo"
                    }
                },
                azureApp: {
                    required: true,
                    serializedName: "azureApp",
                    type: {
                        name: "Composite",
                        className: "AzureActiveDirectoryApp"
                    }
                }
            }
        }
    };
    var ValidateMigrationInputSqlServerSqlMISyncTaskInput = {
        serializedName: "ValidateMigrationInputSqlServerSqlMISyncTaskInput",
        type: {
            name: "Composite",
            className: "ValidateMigrationInputSqlServerSqlMISyncTaskInput",
            modelProperties: __assign({}, SqlServerSqlMISyncTaskInput.type.modelProperties)
        }
    };
    var ValidateMigrationInputSqlServerSqlMISyncTaskProperties = {
        serializedName: "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ValidateMigrationInputSqlServerSqlMISyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ValidateMigrationInputSqlServerSqlMISyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ValidateMigrationInputSqlServerSqlMISyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var DatabaseBackupInfo = {
        serializedName: "DatabaseBackupInfo",
        type: {
            name: "Composite",
            className: "DatabaseBackupInfo",
            modelProperties: {
                databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                backupType: {
                    readOnly: true,
                    serializedName: "backupType",
                    type: {
                        name: "String"
                    }
                },
                backupFiles: {
                    readOnly: true,
                    serializedName: "backupFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                position: {
                    readOnly: true,
                    serializedName: "position",
                    type: {
                        name: "Number"
                    }
                },
                isDamaged: {
                    readOnly: true,
                    serializedName: "isDamaged",
                    type: {
                        name: "Boolean"
                    }
                },
                isCompressed: {
                    readOnly: true,
                    serializedName: "isCompressed",
                    type: {
                        name: "Boolean"
                    }
                },
                familyCount: {
                    readOnly: true,
                    serializedName: "familyCount",
                    type: {
                        name: "Number"
                    }
                },
                backupFinishDate: {
                    readOnly: true,
                    serializedName: "backupFinishDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ValidateMigrationInputSqlServerSqlMITaskOutput = {
        serializedName: "ValidateMigrationInputSqlServerSqlMITaskOutput",
        type: {
            name: "Composite",
            className: "ValidateMigrationInputSqlServerSqlMITaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                restoreDatabaseNameErrors: {
                    readOnly: true,
                    serializedName: "restoreDatabaseNameErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                },
                backupFolderErrors: {
                    readOnly: true,
                    serializedName: "backupFolderErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                },
                backupShareCredentialsErrors: {
                    readOnly: true,
                    serializedName: "backupShareCredentialsErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                },
                backupStorageAccountErrors: {
                    readOnly: true,
                    serializedName: "backupStorageAccountErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                },
                existingBackupErrors: {
                    readOnly: true,
                    serializedName: "existingBackupErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                },
                databaseBackupInfo: {
                    serializedName: "databaseBackupInfo",
                    type: {
                        name: "Composite",
                        className: "DatabaseBackupInfo"
                    }
                }
            }
        }
    };
    var BlobShare = {
        serializedName: "BlobShare",
        type: {
            name: "Composite",
            className: "BlobShare",
            modelProperties: {
                sasUri: {
                    required: true,
                    serializedName: "sasUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateMigrationInputSqlServerSqlMITaskInput = {
        serializedName: "ValidateMigrationInputSqlServerSqlMITaskInput",
        type: {
            name: "Composite",
            className: "ValidateMigrationInputSqlServerSqlMITaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlMIDatabaseInput"
                            }
                        }
                    }
                },
                selectedLogins: {
                    serializedName: "selectedLogins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                backupFileShare: {
                    serializedName: "backupFileShare",
                    type: {
                        name: "Composite",
                        className: "FileShare"
                    }
                },
                backupBlobShare: {
                    required: true,
                    serializedName: "backupBlobShare",
                    type: {
                        name: "Composite",
                        className: "BlobShare"
                    }
                },
                backupMode: {
                    serializedName: "backupMode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ValidateMigrationInputSqlServerSqlMITaskProperties = {
        serializedName: "ValidateMigrationInput.SqlServer.AzureSqlDbMI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ValidateMigrationInputSqlServerSqlMITaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ValidateMigrationInputSqlServerSqlMITaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ValidateMigrationInputSqlServerSqlMITaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ValidateSyncMigrationInputSqlServerTaskOutput = {
        serializedName: "ValidateSyncMigrationInputSqlServerTaskOutput",
        type: {
            name: "Composite",
            className: "ValidateSyncMigrationInputSqlServerTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlDbSyncDatabaseInput = {
        serializedName: "MigrateSqlServerSqlDbSyncDatabaseInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlDbSyncDatabaseInput",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                targetDatabaseName: {
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                schemaName: {
                    serializedName: "schemaName",
                    type: {
                        name: "String"
                    }
                },
                tableMap: {
                    serializedName: "tableMap",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                migrationSetting: {
                    serializedName: "migrationSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceSetting: {
                    serializedName: "sourceSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetSetting: {
                    serializedName: "targetSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ValidateSyncMigrationInputSqlServerTaskInput = {
        serializedName: "ValidateSyncMigrationInputSqlServerTaskInput",
        type: {
            name: "Composite",
            className: "ValidateSyncMigrationInputSqlServerTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlDbSyncDatabaseInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var ValidateMigrationInputSqlServerSqlDbSyncTaskProperties = {
        serializedName: "ValidateMigrationInput.SqlServer.SqlDb.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ValidateMigrationInputSqlServerSqlDbSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ValidateSyncMigrationInputSqlServerTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ValidateSyncMigrationInputSqlServerTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var SyncMigrationDatabaseErrorEvent = {
        serializedName: "SyncMigrationDatabaseErrorEvent",
        type: {
            name: "Composite",
            className: "SyncMigrationDatabaseErrorEvent",
            modelProperties: {
                timestampString: {
                    readOnly: true,
                    serializedName: "timestampString",
                    type: {
                        name: "String"
                    }
                },
                eventTypeString: {
                    readOnly: true,
                    serializedName: "eventTypeString",
                    type: {
                        name: "String"
                    }
                },
                eventText: {
                    readOnly: true,
                    serializedName: "eventText",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncTaskOutput = {
        serializedName: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
            className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError = {
        serializedName: "DatabaseLevelErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
            className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError",
            modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                }, events: {
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncMigrationDatabaseErrorEvent"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncTaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
            className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputError",
            modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel = {
        serializedName: "TableLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
            className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel",
            modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { tableName: {
                    readOnly: true,
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "Number"
                    }
                }, fullLoadEstFinishTime: {
                    readOnly: true,
                    serializedName: "fullLoadEstFinishTime",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadStartedOn: {
                    readOnly: true,
                    serializedName: "fullLoadStartedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadEndedOn: {
                    readOnly: true,
                    serializedName: "fullLoadEndedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadTotalRows: {
                    readOnly: true,
                    serializedName: "fullLoadTotalRows",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, totalChangesApplied: {
                    readOnly: true,
                    serializedName: "totalChangesApplied",
                    type: {
                        name: "Number"
                    }
                }, dataErrorsCounter: {
                    readOnly: true,
                    serializedName: "dataErrorsCounter",
                    type: {
                        name: "Number"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
            className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, migrationState: {
                    readOnly: true,
                    serializedName: "migrationState",
                    type: {
                        name: "String"
                    }
                }, incomingChanges: {
                    readOnly: true,
                    serializedName: "incomingChanges",
                    type: {
                        name: "Number"
                    }
                }, appliedChanges: {
                    readOnly: true,
                    serializedName: "appliedChanges",
                    type: {
                        name: "Number"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "Number"
                    }
                }, fullLoadCompletedTables: {
                    readOnly: true,
                    serializedName: "fullLoadCompletedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadLoadingTables: {
                    readOnly: true,
                    serializedName: "fullLoadLoadingTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadQueuedTables: {
                    readOnly: true,
                    serializedName: "fullLoadQueuedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadErroredTables: {
                    readOnly: true,
                    serializedName: "fullLoadErroredTables",
                    type: {
                        name: "Number"
                    }
                }, initializationCompleted: {
                    readOnly: true,
                    serializedName: "initializationCompleted",
                    type: {
                        name: "Boolean"
                    }
                }, latency: {
                    readOnly: true,
                    serializedName: "latency",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput",
            className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateOracleAzureDbPostgreSqlSyncTaskOutput.type.modelProperties), { startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServer: {
                    readOnly: true,
                    serializedName: "sourceServer",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServer: {
                    readOnly: true,
                    serializedName: "targetServer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MigrateOracleAzureDbForPostgreSqlSyncTaskProperties = {
        serializedName: "Migrate.Oracle.AzureDbForPostgreSql.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateOracleAzureDbForPostgreSqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateOracleAzureDbPostgreSqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput = {
        serializedName: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError = {
        serializedName: "DatabaseLevelErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError",
            modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                }, events: {
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncMigrationDatabaseErrorEvent"
                            }
                        }
                    }
                } })
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError",
            modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel = {
        serializedName: "TableLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel",
            modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { tableName: {
                    readOnly: true,
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "Number"
                    }
                }, fullLoadEstFinishTime: {
                    readOnly: true,
                    serializedName: "fullLoadEstFinishTime",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadStartedOn: {
                    readOnly: true,
                    serializedName: "fullLoadStartedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadEndedOn: {
                    readOnly: true,
                    serializedName: "fullLoadEndedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadTotalRows: {
                    readOnly: true,
                    serializedName: "fullLoadTotalRows",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, totalChangesApplied: {
                    readOnly: true,
                    serializedName: "totalChangesApplied",
                    type: {
                        name: "Number"
                    }
                }, dataErrorsCounter: {
                    readOnly: true,
                    serializedName: "dataErrorsCounter",
                    type: {
                        name: "Number"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, migrationState: {
                    readOnly: true,
                    serializedName: "migrationState",
                    type: {
                        name: "String"
                    }
                }, incomingChanges: {
                    readOnly: true,
                    serializedName: "incomingChanges",
                    type: {
                        name: "Number"
                    }
                }, appliedChanges: {
                    readOnly: true,
                    serializedName: "appliedChanges",
                    type: {
                        name: "Number"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "Number"
                    }
                }, fullLoadCompletedTables: {
                    readOnly: true,
                    serializedName: "fullLoadCompletedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadLoadingTables: {
                    readOnly: true,
                    serializedName: "fullLoadLoadingTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadQueuedTables: {
                    readOnly: true,
                    serializedName: "fullLoadQueuedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadErroredTables: {
                    readOnly: true,
                    serializedName: "fullLoadErroredTables",
                    type: {
                        name: "Number"
                    }
                }, initializationCompleted: {
                    readOnly: true,
                    serializedName: "initializationCompleted",
                    type: {
                        name: "Boolean"
                    }
                }, latency: {
                    readOnly: true,
                    serializedName: "latency",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.type.modelProperties), { startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServer: {
                    readOnly: true,
                    serializedName: "sourceServer",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServer: {
                    readOnly: true,
                    serializedName: "targetServer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput = {
        serializedName: "MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput",
        type: {
            name: "Composite",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                targetDatabaseName: {
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                migrationSetting: {
                    serializedName: "migrationSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceSetting: {
                    serializedName: "sourceSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetSetting: {
                    serializedName: "targetSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput = {
        serializedName: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput",
        type: {
            name: "Composite",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput",
            modelProperties: {
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput"
                            }
                        }
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                },
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                }
            }
        }
    };
    var MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties = {
        serializedName: "Migrate.PostgreSql.AzureDbForPostgreSql.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskOutput = {
        serializedName: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError = {
        serializedName: "DatabaseLevelErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError",
            modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                }, events: {
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncMigrationDatabaseErrorEvent"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputError",
            modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel = {
        serializedName: "TableLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel",
            modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { tableName: {
                    readOnly: true,
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "String"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "String"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "String"
                    }
                }, fullLoadEstFinishTime: {
                    readOnly: true,
                    serializedName: "fullLoadEstFinishTime",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadStartedOn: {
                    readOnly: true,
                    serializedName: "fullLoadStartedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadEndedOn: {
                    readOnly: true,
                    serializedName: "fullLoadEndedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadTotalRows: {
                    readOnly: true,
                    serializedName: "fullLoadTotalRows",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, totalChangesApplied: {
                    readOnly: true,
                    serializedName: "totalChangesApplied",
                    type: {
                        name: "Number"
                    }
                }, dataErrorsCounter: {
                    readOnly: true,
                    serializedName: "dataErrorsCounter",
                    type: {
                        name: "Number"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, migrationState: {
                    readOnly: true,
                    serializedName: "migrationState",
                    type: {
                        name: "String"
                    }
                }, incomingChanges: {
                    readOnly: true,
                    serializedName: "incomingChanges",
                    type: {
                        name: "Number"
                    }
                }, appliedChanges: {
                    readOnly: true,
                    serializedName: "appliedChanges",
                    type: {
                        name: "Number"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "Number"
                    }
                }, fullLoadCompletedTables: {
                    readOnly: true,
                    serializedName: "fullLoadCompletedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadLoadingTables: {
                    readOnly: true,
                    serializedName: "fullLoadLoadingTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadQueuedTables: {
                    readOnly: true,
                    serializedName: "fullLoadQueuedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadErroredTables: {
                    readOnly: true,
                    serializedName: "fullLoadErroredTables",
                    type: {
                        name: "Number"
                    }
                }, initializationCompleted: {
                    readOnly: true,
                    serializedName: "initializationCompleted",
                    type: {
                        name: "Boolean"
                    }
                }, latency: {
                    readOnly: true,
                    serializedName: "latency",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateMySqlAzureDbForMySqlSyncTaskOutput",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateMySqlAzureDbForMySqlSyncTaskOutput.type.modelProperties), { startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServer: {
                    readOnly: true,
                    serializedName: "sourceServer",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServer: {
                    readOnly: true,
                    serializedName: "targetServer",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncDatabaseInput = {
        serializedName: "MigrateMySqlAzureDbForMySqlSyncDatabaseInput",
        type: {
            name: "Composite",
            className: "MigrateMySqlAzureDbForMySqlSyncDatabaseInput",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                targetDatabaseName: {
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                migrationSetting: {
                    serializedName: "migrationSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceSetting: {
                    serializedName: "sourceSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetSetting: {
                    serializedName: "targetSetting",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskInput = {
        serializedName: "MigrateMySqlAzureDbForMySqlSyncTaskInput",
        type: {
            name: "Composite",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "MySqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "MySqlConnectionInfo"
                    }
                },
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateMySqlAzureDbForMySqlSyncDatabaseInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateMySqlAzureDbForMySqlSyncTaskProperties = {
        serializedName: "Migrate.MySql.AzureDbForMySql.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateMySqlAzureDbForMySqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateMySqlAzureDbForMySqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateMySqlAzureDbForMySqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbSyncTaskOutput = {
        serializedName: "MigrateSqlServerSqlDbSyncTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
            className: "MigrateSqlServerSqlDbSyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlDbSyncTaskOutputDatabaseError = {
        serializedName: "DatabaseLevelErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
            className: "MigrateSqlServerSqlDbSyncTaskOutputDatabaseError",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { errorMessage: {
                    serializedName: "errorMessage",
                    type: {
                        name: "String"
                    }
                }, events: {
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SyncMigrationDatabaseErrorEvent"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbSyncTaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
            className: "MigrateSqlServerSqlDbSyncTaskOutputError",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbSyncTaskOutputTableLevel = {
        serializedName: "TableLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
            className: "MigrateSqlServerSqlDbSyncTaskOutputTableLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { tableName: {
                    readOnly: true,
                    serializedName: "tableName",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "Number"
                    }
                }, fullLoadEstFinishTime: {
                    readOnly: true,
                    serializedName: "fullLoadEstFinishTime",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadStartedOn: {
                    readOnly: true,
                    serializedName: "fullLoadStartedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadEndedOn: {
                    readOnly: true,
                    serializedName: "fullLoadEndedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullLoadTotalRows: {
                    readOnly: true,
                    serializedName: "fullLoadTotalRows",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, totalChangesApplied: {
                    readOnly: true,
                    serializedName: "totalChangesApplied",
                    type: {
                        name: "Number"
                    }
                }, dataErrorsCounter: {
                    readOnly: true,
                    serializedName: "dataErrorsCounter",
                    type: {
                        name: "Number"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
            className: "MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, migrationState: {
                    readOnly: true,
                    serializedName: "migrationState",
                    type: {
                        name: "String"
                    }
                }, incomingChanges: {
                    readOnly: true,
                    serializedName: "incomingChanges",
                    type: {
                        name: "Number"
                    }
                }, appliedChanges: {
                    readOnly: true,
                    serializedName: "appliedChanges",
                    type: {
                        name: "Number"
                    }
                }, cdcInsertCounter: {
                    readOnly: true,
                    serializedName: "cdcInsertCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcDeleteCounter: {
                    readOnly: true,
                    serializedName: "cdcDeleteCounter",
                    type: {
                        name: "Number"
                    }
                }, cdcUpdateCounter: {
                    readOnly: true,
                    serializedName: "cdcUpdateCounter",
                    type: {
                        name: "Number"
                    }
                }, fullLoadCompletedTables: {
                    readOnly: true,
                    serializedName: "fullLoadCompletedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadLoadingTables: {
                    readOnly: true,
                    serializedName: "fullLoadLoadingTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadQueuedTables: {
                    readOnly: true,
                    serializedName: "fullLoadQueuedTables",
                    type: {
                        name: "Number"
                    }
                }, fullLoadErroredTables: {
                    readOnly: true,
                    serializedName: "fullLoadErroredTables",
                    type: {
                        name: "Number"
                    }
                }, initializationCompleted: {
                    readOnly: true,
                    serializedName: "initializationCompleted",
                    type: {
                        name: "Boolean"
                    }
                }, latency: {
                    readOnly: true,
                    serializedName: "latency",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbSyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbSyncTaskOutput",
            className: "MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbSyncTaskOutput.type.modelProperties), { startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServer: {
                    readOnly: true,
                    serializedName: "sourceServer",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServer: {
                    readOnly: true,
                    serializedName: "targetServer",
                    type: {
                        name: "String"
                    }
                }, databaseCount: {
                    readOnly: true,
                    serializedName: "databaseCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MigrationValidationOptions = {
        serializedName: "MigrationValidationOptions",
        type: {
            name: "Composite",
            className: "MigrationValidationOptions",
            modelProperties: {
                enableSchemaValidation: {
                    serializedName: "enableSchemaValidation",
                    type: {
                        name: "Boolean"
                    }
                },
                enableDataIntegrityValidation: {
                    serializedName: "enableDataIntegrityValidation",
                    type: {
                        name: "Boolean"
                    }
                },
                enableQueryAnalysisValidation: {
                    serializedName: "enableQueryAnalysisValidation",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlDbSyncTaskInput = {
        serializedName: "MigrateSqlServerSqlDbSyncTaskInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlDbSyncTaskInput",
            modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlDbSyncDatabaseInput"
                            }
                        }
                    }
                }, validationOptions: {
                    serializedName: "validationOptions",
                    type: {
                        name: "Composite",
                        className: "MigrationValidationOptions"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbSyncTaskProperties = {
        serializedName: "Migrate.SqlServer.AzureSqlDb.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateSqlServerSqlDbSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateSqlServerSqlDbSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlDbSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ValidationError = {
        serializedName: "ValidationError",
        type: {
            name: "Composite",
            className: "ValidationError",
            modelProperties: {
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WaitStatistics = {
        serializedName: "WaitStatistics",
        type: {
            name: "Composite",
            className: "WaitStatistics",
            modelProperties: {
                waitType: {
                    serializedName: "waitType",
                    type: {
                        name: "String"
                    }
                },
                waitTimeMs: {
                    serializedName: "waitTimeMs",
                    defaultValue: 0,
                    type: {
                        name: "Number"
                    }
                },
                waitCount: {
                    serializedName: "waitCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ExecutionStatistics = {
        serializedName: "ExecutionStatistics",
        type: {
            name: "Composite",
            className: "ExecutionStatistics",
            modelProperties: {
                executionCount: {
                    serializedName: "executionCount",
                    type: {
                        name: "Number"
                    }
                },
                cpuTimeMs: {
                    serializedName: "cpuTimeMs",
                    type: {
                        name: "Number"
                    }
                },
                elapsedTimeMs: {
                    serializedName: "elapsedTimeMs",
                    type: {
                        name: "Number"
                    }
                },
                waitStats: {
                    serializedName: "waitStats",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "WaitStatistics"
                            }
                        }
                    }
                },
                hasErrors: {
                    serializedName: "hasErrors",
                    type: {
                        name: "Boolean"
                    }
                },
                sqlErrors: {
                    serializedName: "sqlErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var QueryExecutionResult = {
        serializedName: "QueryExecutionResult",
        type: {
            name: "Composite",
            className: "QueryExecutionResult",
            modelProperties: {
                queryText: {
                    serializedName: "queryText",
                    type: {
                        name: "String"
                    }
                },
                statementsInBatch: {
                    serializedName: "statementsInBatch",
                    type: {
                        name: "Number"
                    }
                },
                sourceResult: {
                    serializedName: "sourceResult",
                    type: {
                        name: "Composite",
                        className: "ExecutionStatistics"
                    }
                },
                targetResult: {
                    serializedName: "targetResult",
                    type: {
                        name: "Composite",
                        className: "ExecutionStatistics"
                    }
                }
            }
        }
    };
    var QueryAnalysisValidationResult = {
        serializedName: "QueryAnalysisValidationResult",
        type: {
            name: "Composite",
            className: "QueryAnalysisValidationResult",
            modelProperties: {
                queryResults: {
                    serializedName: "queryResults",
                    type: {
                        name: "Composite",
                        className: "QueryExecutionResult"
                    }
                },
                validationErrors: {
                    serializedName: "validationErrors",
                    type: {
                        name: "Composite",
                        className: "ValidationError"
                    }
                }
            }
        }
    };
    var SchemaComparisonValidationResultType = {
        serializedName: "SchemaComparisonValidationResultType",
        type: {
            name: "Composite",
            className: "SchemaComparisonValidationResultType",
            modelProperties: {
                objectName: {
                    serializedName: "objectName",
                    type: {
                        name: "String"
                    }
                },
                objectType: {
                    serializedName: "objectType",
                    type: {
                        name: "String"
                    }
                },
                updateAction: {
                    serializedName: "updateAction",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SchemaComparisonValidationResult = {
        serializedName: "SchemaComparisonValidationResult",
        type: {
            name: "Composite",
            className: "SchemaComparisonValidationResult",
            modelProperties: {
                schemaDifferences: {
                    serializedName: "schemaDifferences",
                    type: {
                        name: "Composite",
                        className: "SchemaComparisonValidationResultType"
                    }
                },
                validationErrors: {
                    serializedName: "validationErrors",
                    type: {
                        name: "Composite",
                        className: "ValidationError"
                    }
                },
                sourceDatabaseObjectCount: {
                    serializedName: "sourceDatabaseObjectCount",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                targetDatabaseObjectCount: {
                    serializedName: "targetDatabaseObjectCount",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }
            }
        }
    };
    var DataIntegrityValidationResult = {
        serializedName: "DataIntegrityValidationResult",
        type: {
            name: "Composite",
            className: "DataIntegrityValidationResult",
            modelProperties: {
                failedObjects: {
                    serializedName: "failedObjects",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                validationErrors: {
                    serializedName: "validationErrors",
                    type: {
                        name: "Composite",
                        className: "ValidationError"
                    }
                }
            }
        }
    };
    var MigrationValidationDatabaseLevelResult = {
        serializedName: "MigrationValidationDatabaseLevelResult",
        type: {
            name: "Composite",
            className: "MigrationValidationDatabaseLevelResult",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                migrationId: {
                    readOnly: true,
                    serializedName: "migrationId",
                    type: {
                        name: "String"
                    }
                },
                sourceDatabaseName: {
                    readOnly: true,
                    serializedName: "sourceDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                targetDatabaseName: {
                    readOnly: true,
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                dataIntegrityValidationResult: {
                    readOnly: true,
                    serializedName: "dataIntegrityValidationResult",
                    type: {
                        name: "Composite",
                        className: "DataIntegrityValidationResult"
                    }
                },
                schemaValidationResult: {
                    readOnly: true,
                    serializedName: "schemaValidationResult",
                    type: {
                        name: "Composite",
                        className: "SchemaComparisonValidationResult"
                    }
                },
                queryAnalysisValidationResult: {
                    readOnly: true,
                    serializedName: "queryAnalysisValidationResult",
                    type: {
                        name: "Composite",
                        className: "QueryAnalysisValidationResult"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrationValidationDatabaseSummaryResult = {
        serializedName: "MigrationValidationDatabaseSummaryResult",
        type: {
            name: "Composite",
            className: "MigrationValidationDatabaseSummaryResult",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                migrationId: {
                    readOnly: true,
                    serializedName: "migrationId",
                    type: {
                        name: "String"
                    }
                },
                sourceDatabaseName: {
                    readOnly: true,
                    serializedName: "sourceDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                targetDatabaseName: {
                    readOnly: true,
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrationValidationResult = {
        serializedName: "MigrationValidationResult",
        type: {
            name: "Composite",
            className: "MigrationValidationResult",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                migrationId: {
                    readOnly: true,
                    serializedName: "migrationId",
                    type: {
                        name: "String"
                    }
                },
                summaryResults: {
                    serializedName: "summaryResults",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MigrationValidationDatabaseSummaryResult"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlDbTaskOutput = {
        serializedName: "MigrateSqlServerSqlDbTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateSqlServerSqlDbTaskOutput",
            className: "MigrateSqlServerSqlDbTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlDbTaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbTaskOutput",
            className: "MigrateSqlServerSqlDbTaskOutputError",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbTaskOutputTableLevel = {
        serializedName: "TableLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbTaskOutput",
            className: "MigrateSqlServerSqlDbTaskOutputTableLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { objectName: {
                    readOnly: true,
                    serializedName: "objectName",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                }, itemsCount: {
                    readOnly: true,
                    serializedName: "itemsCount",
                    type: {
                        name: "Number"
                    }
                }, itemsCompletedCount: {
                    readOnly: true,
                    serializedName: "itemsCompletedCount",
                    type: {
                        name: "Number"
                    }
                }, errorPrefix: {
                    readOnly: true,
                    serializedName: "errorPrefix",
                    type: {
                        name: "String"
                    }
                }, resultPrefix: {
                    readOnly: true,
                    serializedName: "resultPrefix",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataItemMigrationSummaryResult = {
        serializedName: "DataItemMigrationSummaryResult",
        type: {
            name: "Composite",
            className: "DataItemMigrationSummaryResult",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                },
                itemsCount: {
                    readOnly: true,
                    serializedName: "itemsCount",
                    type: {
                        name: "Number"
                    }
                },
                itemsCompletedCount: {
                    readOnly: true,
                    serializedName: "itemsCompletedCount",
                    type: {
                        name: "Number"
                    }
                },
                errorPrefix: {
                    readOnly: true,
                    serializedName: "errorPrefix",
                    type: {
                        name: "String"
                    }
                },
                resultPrefix: {
                    readOnly: true,
                    serializedName: "resultPrefix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlDbTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbTaskOutput",
            className: "MigrateSqlServerSqlDbTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, stage: {
                    readOnly: true,
                    serializedName: "stage",
                    type: {
                        name: "String"
                    }
                }, statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, numberOfObjects: {
                    readOnly: true,
                    serializedName: "numberOfObjects",
                    type: {
                        name: "Number"
                    }
                }, numberOfObjectsCompleted: {
                    readOnly: true,
                    serializedName: "numberOfObjectsCompleted",
                    type: {
                        name: "Number"
                    }
                }, errorCount: {
                    readOnly: true,
                    serializedName: "errorCount",
                    type: {
                        name: "Number"
                    }
                }, errorPrefix: {
                    readOnly: true,
                    serializedName: "errorPrefix",
                    type: {
                        name: "String"
                    }
                }, resultPrefix: {
                    readOnly: true,
                    serializedName: "resultPrefix",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }, objectSummary: {
                    readOnly: true,
                    serializedName: "objectSummary",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "DataItemMigrationSummaryResult"
                            }
                        }
                    }
                } })
        }
    };
    var MigrationReportResult = {
        serializedName: "MigrationReportResult",
        type: {
            name: "Composite",
            className: "MigrationReportResult",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                reportUrl: {
                    serializedName: "reportUrl",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseSummaryResult = {
        serializedName: "DatabaseSummaryResult",
        type: {
            name: "Composite",
            className: "DatabaseSummaryResult",
            modelProperties: __assign(__assign({}, DataItemMigrationSummaryResult.type.modelProperties), { sizeMB: {
                    readOnly: true,
                    serializedName: "sizeMB",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlDbTaskOutput",
            className: "MigrateSqlServerSqlDbTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlDbTaskOutput.type.modelProperties), { startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, durationInSeconds: {
                    readOnly: true,
                    serializedName: "durationInSeconds",
                    type: {
                        name: "Number"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }, statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, databaseSummary: {
                    readOnly: true,
                    serializedName: "databaseSummary",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "DatabaseSummaryResult"
                            }
                        }
                    }
                }, migrationValidationResult: {
                    serializedName: "migrationValidationResult",
                    type: {
                        name: "Composite",
                        className: "MigrationValidationResult"
                    }
                }, migrationReportResult: {
                    serializedName: "migrationReportResult",
                    type: {
                        name: "Composite",
                        className: "MigrationReportResult"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbDatabaseInput = {
        serializedName: "MigrateSqlServerSqlDbDatabaseInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlDbDatabaseInput",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                targetDatabaseName: {
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                makeSourceDbReadOnly: {
                    serializedName: "makeSourceDbReadOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                tableMap: {
                    serializedName: "tableMap",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlDbTaskInput = {
        serializedName: "MigrateSqlServerSqlDbTaskInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlDbTaskInput",
            modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlDbDatabaseInput"
                            }
                        }
                    }
                }, validationOptions: {
                    serializedName: "validationOptions",
                    type: {
                        name: "Composite",
                        className: "MigrationValidationOptions"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlDbTaskProperties = {
        serializedName: "Migrate.SqlServer.SqlDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateSqlServerSqlDbTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateSqlServerSqlDbTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlDbTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMISyncTaskOutput = {
        serializedName: "MigrateSqlServerSqlMISyncTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
            className: "MigrateSqlServerSqlMISyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlMISyncTaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMISyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
            className: "MigrateSqlServerSqlMISyncTaskOutputError",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMISyncTaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var BackupFileInfo = {
        serializedName: "BackupFileInfo",
        type: {
            name: "Composite",
            className: "BackupFileInfo",
            modelProperties: {
                fileLocation: {
                    serializedName: "fileLocation",
                    type: {
                        name: "String"
                    }
                },
                familySequenceNumber: {
                    serializedName: "familySequenceNumber",
                    type: {
                        name: "Number"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BackupSetInfo = {
        serializedName: "BackupSetInfo",
        type: {
            name: "Composite",
            className: "BackupSetInfo",
            modelProperties: {
                backupSetId: {
                    serializedName: "backupSetId",
                    type: {
                        name: "String"
                    }
                },
                firstLsn: {
                    serializedName: "firstLsn",
                    type: {
                        name: "String"
                    }
                },
                lastLsn: {
                    serializedName: "lastLsn",
                    type: {
                        name: "String"
                    }
                },
                lastModifiedTime: {
                    serializedName: "lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                backupType: {
                    serializedName: "backupType",
                    type: {
                        name: "String"
                    }
                },
                listOfBackupFiles: {
                    serializedName: "listOfBackupFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupFileInfo"
                            }
                        }
                    }
                },
                databaseName: {
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                backupStartDate: {
                    serializedName: "backupStartDate",
                    type: {
                        name: "DateTime"
                    }
                },
                backupFinishedDate: {
                    serializedName: "backupFinishedDate",
                    type: {
                        name: "DateTime"
                    }
                },
                isBackupRestored: {
                    serializedName: "isBackupRestored",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMISyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
            className: "MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMISyncTaskOutput.type.modelProperties), { sourceDatabaseName: {
                    readOnly: true,
                    serializedName: "sourceDatabaseName",
                    type: {
                        name: "String"
                    }
                }, migrationState: {
                    readOnly: true,
                    serializedName: "migrationState",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, fullBackupSetInfo: {
                    readOnly: true,
                    serializedName: "fullBackupSetInfo",
                    type: {
                        name: "Composite",
                        className: "BackupSetInfo"
                    }
                }, lastRestoredBackupSetInfo: {
                    readOnly: true,
                    serializedName: "lastRestoredBackupSetInfo",
                    type: {
                        name: "Composite",
                        className: "BackupSetInfo"
                    }
                }, activeBackupSets: {
                    readOnly: true,
                    serializedName: "activeBackupSets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BackupSetInfo"
                            }
                        }
                    }
                }, containerName: {
                    readOnly: true,
                    serializedName: "containerName",
                    type: {
                        name: "String"
                    }
                }, errorPrefix: {
                    readOnly: true,
                    serializedName: "errorPrefix",
                    type: {
                        name: "String"
                    }
                }, isFullBackupRestored: {
                    readOnly: true,
                    serializedName: "isFullBackupRestored",
                    type: {
                        name: "Boolean"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMISyncTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMISyncTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMISyncTaskOutput",
            className: "MigrateSqlServerSqlMISyncTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMISyncTaskOutput.type.modelProperties), { databaseCount: {
                    readOnly: true,
                    serializedName: "databaseCount",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, sourceServerName: {
                    readOnly: true,
                    serializedName: "sourceServerName",
                    type: {
                        name: "String"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerName: {
                    readOnly: true,
                    serializedName: "targetServerName",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, databaseErrorCount: {
                    readOnly: true,
                    serializedName: "databaseErrorCount",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMISyncTaskInput = {
        serializedName: "MigrateSqlServerSqlMISyncTaskInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlMISyncTaskInput",
            modelProperties: __assign({}, SqlServerSqlMISyncTaskInput.type.modelProperties)
        }
    };
    var MigrateSqlServerSqlMISyncTaskProperties = {
        serializedName: "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateSqlServerSqlMISyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateSqlServerSqlMISyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlMISyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMITaskOutput = {
        serializedName: "MigrateSqlServerSqlMITaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateSqlServerSqlMITaskOutput",
            className: "MigrateSqlServerSqlMITaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlMITaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMITaskOutput",
            className: "MigrateSqlServerSqlMITaskOutputError",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMITaskOutputLoginLevel = {
        serializedName: "LoginLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMITaskOutput",
            className: "MigrateSqlServerSqlMITaskOutputLoginLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { loginName: {
                    readOnly: true,
                    serializedName: "loginName",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, stage: {
                    readOnly: true,
                    serializedName: "stage",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMITaskOutputAgentJobLevel = {
        serializedName: "AgentJobLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMITaskOutput",
            className: "MigrateSqlServerSqlMITaskOutputAgentJobLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, isEnabled: {
                    readOnly: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMITaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMITaskOutput",
            className: "MigrateSqlServerSqlMITaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, sizeMB: {
                    readOnly: true,
                    serializedName: "sizeMB",
                    type: {
                        name: "Number"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, stage: {
                    readOnly: true,
                    serializedName: "stage",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var OrphanedUserInfo = {
        serializedName: "OrphanedUserInfo",
        type: {
            name: "Composite",
            className: "OrphanedUserInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                databaseName: {
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StartMigrationScenarioServerRoleResult = {
        serializedName: "StartMigrationScenarioServerRoleResult",
        type: {
            name: "Composite",
            className: "StartMigrationScenarioServerRoleResult",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlMITaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSqlServerSqlMITaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSqlServerSqlMITaskOutput",
            className: "MigrateSqlServerSqlMITaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateSqlServerSqlMITaskOutput.type.modelProperties), { startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, agentJobs: {
                    readOnly: true,
                    serializedName: "agentJobs",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, logins: {
                    readOnly: true,
                    serializedName: "logins",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }, serverRoleResults: {
                    readOnly: true,
                    serializedName: "serverRoleResults",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "StartMigrationScenarioServerRoleResult"
                            }
                        }
                    }
                }, orphanedUsersInfo: {
                    readOnly: true,
                    serializedName: "orphanedUsersInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OrphanedUserInfo"
                            }
                        }
                    }
                }, databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, exceptionsAndWarnings: {
                    readOnly: true,
                    serializedName: "exceptionsAndWarnings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMITaskInput = {
        serializedName: "MigrateSqlServerSqlMITaskInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlMITaskInput",
            modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlMIDatabaseInput"
                            }
                        }
                    }
                }, selectedLogins: {
                    serializedName: "selectedLogins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, selectedAgentJobs: {
                    serializedName: "selectedAgentJobs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, backupFileShare: {
                    serializedName: "backupFileShare",
                    type: {
                        name: "Composite",
                        className: "FileShare"
                    }
                }, backupBlobShare: {
                    required: true,
                    serializedName: "backupBlobShare",
                    type: {
                        name: "Composite",
                        className: "BlobShare"
                    }
                }, backupMode: {
                    serializedName: "backupMode",
                    type: {
                        name: "String"
                    }
                }, aadDomainName: {
                    serializedName: "aadDomainName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MigrateSqlServerSqlMITaskProperties = {
        serializedName: "Migrate.SqlServer.AzureSqlDbMI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateSqlServerSqlMITaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateSqlServerSqlMITaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSqlServerSqlMITaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateMongoDbTaskProperties = {
        serializedName: "Migrate.MongoDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateMongoDbTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MongoDbMigrationSettings"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MongoDbProgress"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToTargetAzureDbForMySqlTaskOutput = {
        serializedName: "ConnectToTargetAzureDbForMySqlTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToTargetAzureDbForMySqlTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                serverVersion: {
                    readOnly: true,
                    serializedName: "serverVersion",
                    type: {
                        name: "String"
                    }
                },
                databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToTargetAzureDbForMySqlTaskInput = {
        serializedName: "ConnectToTargetAzureDbForMySqlTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToTargetAzureDbForMySqlTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "MySqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "MySqlConnectionInfo"
                    }
                }
            }
        }
    };
    var ConnectToTargetAzureDbForMySqlTaskProperties = {
        serializedName: "ConnectToTarget.AzureDbForMySql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToTargetAzureDbForMySqlTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToTargetAzureDbForMySqlTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetAzureDbForMySqlTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToTargetSqlMISyncTaskOutput = {
        serializedName: "ConnectToTargetSqlMISyncTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToTargetSqlMISyncTaskOutput",
            modelProperties: {
                targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                },
                targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToTargetSqlMISyncTaskInput = {
        serializedName: "ConnectToTargetSqlMISyncTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToTargetSqlMISyncTaskInput",
            modelProperties: {
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "MiSqlConnectionInfo"
                    }
                },
                azureApp: {
                    required: true,
                    serializedName: "azureApp",
                    type: {
                        name: "Composite",
                        className: "AzureActiveDirectoryApp"
                    }
                }
            }
        }
    };
    var ConnectToTargetSqlMISyncTaskProperties = {
        serializedName: "ConnectToTarget.AzureSqlDbMI.Sync.LRS",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToTargetSqlMISyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToTargetSqlMISyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetSqlMISyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToTargetSqlMITaskOutput = {
        serializedName: "ConnectToTargetSqlMITaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToTargetSqlMITaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                },
                targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                logins: {
                    readOnly: true,
                    serializedName: "logins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                agentJobs: {
                    readOnly: true,
                    serializedName: "agentJobs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToTargetSqlMITaskInput = {
        serializedName: "ConnectToTargetSqlMITaskInput",
        type: {
            name: "Composite",
            className: "ConnectToTargetSqlMITaskInput",
            modelProperties: {
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                collectLogins: {
                    serializedName: "collectLogins",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                collectAgentJobs: {
                    serializedName: "collectAgentJobs",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                validateSsisCatalogOnly: {
                    serializedName: "validateSsisCatalogOnly",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ConnectToTargetSqlMITaskProperties = {
        serializedName: "ConnectToTarget.AzureSqlDbMI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToTargetSqlMITaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToTargetSqlMITaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetSqlMITaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var DatabaseTable = {
        serializedName: "DatabaseTable",
        type: {
            name: "Composite",
            className: "DatabaseTable",
            modelProperties: {
                hasRows: {
                    readOnly: true,
                    serializedName: "hasRows",
                    type: {
                        name: "Boolean"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GetUserTablesPostgreSqlTaskOutput = {
        serializedName: "GetUserTablesPostgreSqlTaskOutput",
        type: {
            name: "Composite",
            className: "GetUserTablesPostgreSqlTaskOutput",
            modelProperties: {
                databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                tables: {
                    readOnly: true,
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseTable"
                            }
                        }
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesPostgreSqlTaskInput = {
        serializedName: "GetUserTablesPostgreSqlTaskInput",
        type: {
            name: "Composite",
            className: "GetUserTablesPostgreSqlTaskInput",
            modelProperties: {
                connectionInfo: {
                    required: true,
                    serializedName: "connectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                },
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesPostgreSqlTaskProperties = {
        serializedName: "GetUserTablesPostgreSql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "GetUserTablesPostgreSqlTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "GetUserTablesPostgreSqlTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GetUserTablesPostgreSqlTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var GetUserTablesOracleTaskOutput = {
        serializedName: "GetUserTablesOracleTaskOutput",
        type: {
            name: "Composite",
            className: "GetUserTablesOracleTaskOutput",
            modelProperties: {
                schemaName: {
                    readOnly: true,
                    serializedName: "schemaName",
                    type: {
                        name: "String"
                    }
                },
                tables: {
                    readOnly: true,
                    serializedName: "tables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseTable"
                            }
                        }
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesOracleTaskInput = {
        serializedName: "GetUserTablesOracleTaskInput",
        type: {
            name: "Composite",
            className: "GetUserTablesOracleTaskInput",
            modelProperties: {
                connectionInfo: {
                    required: true,
                    serializedName: "connectionInfo",
                    type: {
                        name: "Composite",
                        className: "OracleConnectionInfo"
                    }
                },
                selectedSchemas: {
                    required: true,
                    serializedName: "selectedSchemas",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesOracleTaskProperties = {
        serializedName: "GetUserTablesOracle",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "GetUserTablesOracleTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "GetUserTablesOracleTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GetUserTablesOracleTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var GetUserTablesSqlSyncTaskOutput = {
        serializedName: "GetUserTablesSqlSyncTaskOutput",
        type: {
            name: "Composite",
            className: "GetUserTablesSqlSyncTaskOutput",
            modelProperties: {
                databasesToSourceTables: {
                    readOnly: true,
                    serializedName: "databasesToSourceTables",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "DatabaseTable"
                                    }
                                }
                            }
                        }
                    }
                },
                databasesToTargetTables: {
                    readOnly: true,
                    serializedName: "databasesToTargetTables",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "DatabaseTable"
                                    }
                                }
                            }
                        }
                    }
                },
                tableValidationErrors: {
                    readOnly: true,
                    serializedName: "tableValidationErrors",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "String"
                                    }
                                }
                            }
                        }
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesSqlSyncTaskInput = {
        serializedName: "GetUserTablesSqlSyncTaskInput",
        type: {
            name: "Composite",
            className: "GetUserTablesSqlSyncTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                selectedSourceDatabases: {
                    required: true,
                    serializedName: "selectedSourceDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                selectedTargetDatabases: {
                    required: true,
                    serializedName: "selectedTargetDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesSqlSyncTaskProperties = {
        serializedName: "GetUserTables.AzureSqlDb.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "GetUserTablesSqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "GetUserTablesSqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GetUserTablesSqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var GetUserTablesSqlTaskOutput = {
        serializedName: "GetUserTablesSqlTaskOutput",
        type: {
            name: "Composite",
            className: "GetUserTablesSqlTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                databasesToTables: {
                    readOnly: true,
                    serializedName: "databasesToTables",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Composite",
                                        className: "DatabaseTable"
                                    }
                                }
                            }
                        }
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesSqlTaskInput = {
        serializedName: "GetUserTablesSqlTaskInput",
        type: {
            name: "Composite",
            className: "GetUserTablesSqlTaskInput",
            modelProperties: {
                connectionInfo: {
                    required: true,
                    serializedName: "connectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetUserTablesSqlTaskProperties = {
        serializedName: "GetUserTables.Sql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "GetUserTablesSqlTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "GetUserTablesSqlTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GetUserTablesSqlTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem = {
        serializedName: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput_databaseSchemaMapItem",
        type: {
            name: "Composite",
            className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem",
            modelProperties: {
                database: {
                    serializedName: "database",
                    type: {
                        name: "String"
                    }
                },
                schemas: {
                    serializedName: "schemas",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput = {
        serializedName: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput",
            modelProperties: {
                targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                },
                databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                },
                databaseSchemaMap: {
                    serializedName: "databaseSchemaMap",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput = {
        serializedName: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput",
            modelProperties: {
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                }
            }
        }
    };
    var ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties = {
        serializedName: "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput = {
        serializedName: "ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                },
                databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToTargetAzureDbForPostgreSqlSyncTaskInput = {
        serializedName: "ConnectToTargetAzureDbForPostgreSqlSyncTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                }
            }
        }
    };
    var ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties = {
        serializedName: "ConnectToTarget.AzureDbForPostgreSql.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToTargetSqlDbTaskOutput = {
        serializedName: "ConnectToTargetSqlDbTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToTargetSqlDbTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                },
                targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectToTargetSqlSqlDbSyncTaskInput = {
        serializedName: "ConnectToTargetSqlSqlDbSyncTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToTargetSqlSqlDbSyncTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                }
            }
        }
    };
    var ConnectToTargetSqlSqlDbSyncTaskProperties = {
        serializedName: "ConnectToTarget.SqlDb.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToTargetSqlSqlDbSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToTargetSqlSqlDbSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetSqlDbTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToTargetSqlDbTaskInput = {
        serializedName: "ConnectToTargetSqlDbTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToTargetSqlDbTaskInput",
            modelProperties: {
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                }
            }
        }
    };
    var ConnectToTargetSqlDbTaskProperties = {
        serializedName: "ConnectToTarget.SqlDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToTargetSqlDbTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToTargetSqlDbTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToTargetSqlDbTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToSourceOracleSyncTaskOutput = {
        serializedName: "ConnectToSourceOracleSyncTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToSourceOracleSyncTaskOutput",
            modelProperties: {
                sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                },
                databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToSourceOracleSyncTaskInput = {
        serializedName: "ConnectToSourceOracleSyncTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToSourceOracleSyncTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "OracleConnectionInfo"
                    }
                }
            }
        }
    };
    var ConnectToSourceOracleSyncTaskProperties = {
        serializedName: "ConnectToSource.Oracle.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToSourceOracleSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToSourceOracleSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToSourceOracleSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToSourcePostgreSqlSyncTaskOutput = {
        serializedName: "ConnectToSourcePostgreSqlSyncTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToSourcePostgreSqlSyncTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                },
                databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToSourcePostgreSqlSyncTaskInput = {
        serializedName: "ConnectToSourcePostgreSqlSyncTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToSourcePostgreSqlSyncTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "PostgreSqlConnectionInfo"
                    }
                }
            }
        }
    };
    var ConnectToSourcePostgreSqlSyncTaskProperties = {
        serializedName: "ConnectToSource.PostgreSql.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToSourcePostgreSqlSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToSourcePostgreSqlSyncTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToSourcePostgreSqlSyncTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrationEligibilityInfo = {
        serializedName: "MigrationEligibilityInfo",
        type: {
            name: "Composite",
            className: "MigrationEligibilityInfo",
            modelProperties: {
                isEligibleForMigration: {
                    readOnly: true,
                    serializedName: "isEligibleForMigration",
                    type: {
                        name: "Boolean"
                    }
                },
                validationMessages: {
                    readOnly: true,
                    serializedName: "validationMessages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToSourceSqlServerTaskOutput = {
        serializedName: "ConnectToSourceSqlServerTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "ConnectToSourceSqlServerTaskOutput",
            className: "ConnectToSourceSqlServerTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectToSourceSqlServerTaskOutputAgentJobLevel = {
        serializedName: "AgentJobLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
            uberParent: "ConnectToSourceSqlServerTaskOutput",
            className: "ConnectToSourceSqlServerTaskOutputAgentJobLevel",
            modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, jobCategory: {
                    readOnly: true,
                    serializedName: "jobCategory",
                    type: {
                        name: "String"
                    }
                }, isEnabled: {
                    readOnly: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, jobOwner: {
                    readOnly: true,
                    serializedName: "jobOwner",
                    type: {
                        name: "String"
                    }
                }, lastExecutedOn: {
                    readOnly: true,
                    serializedName: "lastExecutedOn",
                    type: {
                        name: "DateTime"
                    }
                }, validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }, migrationEligibility: {
                    readOnly: true,
                    serializedName: "migrationEligibility",
                    type: {
                        name: "Composite",
                        className: "MigrationEligibilityInfo"
                    }
                } })
        }
    };
    var ConnectToSourceSqlServerTaskOutputLoginLevel = {
        serializedName: "LoginLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
            uberParent: "ConnectToSourceSqlServerTaskOutput",
            className: "ConnectToSourceSqlServerTaskOutputLoginLevel",
            modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, loginType: {
                    readOnly: true,
                    serializedName: "loginType",
                    type: {
                        name: "String"
                    }
                }, defaultDatabase: {
                    readOnly: true,
                    serializedName: "defaultDatabase",
                    type: {
                        name: "String"
                    }
                }, isEnabled: {
                    readOnly: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }, migrationEligibility: {
                    readOnly: true,
                    serializedName: "migrationEligibility",
                    type: {
                        name: "Composite",
                        className: "MigrationEligibilityInfo"
                    }
                } })
        }
    };
    var DatabaseFileInfo = {
        serializedName: "DatabaseFileInfo",
        type: {
            name: "Composite",
            className: "DatabaseFileInfo",
            modelProperties: {
                databaseName: {
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                logicalName: {
                    serializedName: "logicalName",
                    type: {
                        name: "String"
                    }
                },
                physicalFullName: {
                    serializedName: "physicalFullName",
                    type: {
                        name: "String"
                    }
                },
                restoreFullName: {
                    serializedName: "restoreFullName",
                    type: {
                        name: "String"
                    }
                },
                fileType: {
                    serializedName: "fileType",
                    type: {
                        name: "String"
                    }
                },
                sizeMB: {
                    serializedName: "sizeMB",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectToSourceSqlServerTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
            uberParent: "ConnectToSourceSqlServerTaskOutput",
            className: "ConnectToSourceSqlServerTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, sizeMB: {
                    readOnly: true,
                    serializedName: "sizeMB",
                    type: {
                        name: "Number"
                    }
                }, databaseFiles: {
                    readOnly: true,
                    serializedName: "databaseFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseFileInfo"
                            }
                        }
                    }
                }, compatibilityLevel: {
                    readOnly: true,
                    serializedName: "compatibilityLevel",
                    type: {
                        name: "String"
                    }
                }, databaseState: {
                    readOnly: true,
                    serializedName: "databaseState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ConnectToSourceSqlServerTaskOutputTaskLevel = {
        serializedName: "TaskLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ConnectToSourceSqlServerTaskOutput.type.polymorphicDiscriminator,
            uberParent: "ConnectToSourceSqlServerTaskOutput",
            className: "ConnectToSourceSqlServerTaskOutputTaskLevel",
            modelProperties: __assign(__assign({}, ConnectToSourceSqlServerTaskOutput.type.modelProperties), { databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, logins: {
                    readOnly: true,
                    serializedName: "logins",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, agentJobs: {
                    readOnly: true,
                    serializedName: "agentJobs",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, databaseTdeCertificateMapping: {
                    readOnly: true,
                    serializedName: "databaseTdeCertificateMapping",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToSourceSqlServerTaskInput = {
        serializedName: "ConnectToSourceSqlServerTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToSourceSqlServerTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                checkPermissionsGroup: {
                    serializedName: "checkPermissionsGroup",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "MigrationFromSqlServerToAzureDB",
                            "MigrationFromSqlServerToAzureMI",
                            "MigrationFromMySQLToAzureDBForMySQL"
                        ]
                    }
                },
                collectDatabases: {
                    serializedName: "collectDatabases",
                    defaultValue: true,
                    type: {
                        name: "Boolean"
                    }
                },
                collectLogins: {
                    serializedName: "collectLogins",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                collectAgentJobs: {
                    serializedName: "collectAgentJobs",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                collectTdeCertificateInfo: {
                    serializedName: "collectTdeCertificateInfo",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                },
                validateSsisCatalogOnly: {
                    serializedName: "validateSsisCatalogOnly",
                    defaultValue: false,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ConnectToSourceSqlServerSyncTaskProperties = {
        serializedName: "ConnectToSource.SqlServer.Sync",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToSourceSqlServerSyncTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToSourceSqlServerTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToSourceSqlServerTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var ConnectToSourceSqlServerTaskProperties = {
        serializedName: "ConnectToSource.SqlServer",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToSourceSqlServerTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToSourceSqlServerTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToSourceSqlServerTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MongoDbShardKeyInfo = {
        serializedName: "MongoDbShardKeyInfo",
        type: {
            name: "Composite",
            className: "MongoDbShardKeyInfo",
            modelProperties: {
                fields: {
                    required: true,
                    serializedName: "fields",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MongoDbShardKeyField"
                            }
                        }
                    }
                },
                isUnique: {
                    required: true,
                    serializedName: "isUnique",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MongoDbObjectInfo = {
        serializedName: "MongoDbObjectInfo",
        type: {
            name: "Composite",
            className: "MongoDbObjectInfo",
            modelProperties: {
                averageDocumentSize: {
                    required: true,
                    serializedName: "averageDocumentSize",
                    type: {
                        name: "Number"
                    }
                },
                dataSize: {
                    required: true,
                    serializedName: "dataSize",
                    type: {
                        name: "Number"
                    }
                },
                documentCount: {
                    required: true,
                    serializedName: "documentCount",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                qualifiedName: {
                    required: true,
                    serializedName: "qualifiedName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MongoDbCollectionInfo = {
        serializedName: "MongoDbCollectionInfo",
        type: {
            name: "Composite",
            className: "MongoDbCollectionInfo",
            modelProperties: __assign(__assign({}, MongoDbObjectInfo.type.modelProperties), { databaseName: {
                    required: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, isCapped: {
                    required: true,
                    serializedName: "isCapped",
                    type: {
                        name: "Boolean"
                    }
                }, isSystemCollection: {
                    required: true,
                    serializedName: "isSystemCollection",
                    type: {
                        name: "Boolean"
                    }
                }, isView: {
                    required: true,
                    serializedName: "isView",
                    type: {
                        name: "Boolean"
                    }
                }, shardKey: {
                    serializedName: "shardKey",
                    type: {
                        name: "Composite",
                        className: "MongoDbShardKeyInfo"
                    }
                }, supportsSharding: {
                    required: true,
                    serializedName: "supportsSharding",
                    type: {
                        name: "Boolean"
                    }
                }, viewOf: {
                    serializedName: "viewOf",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MongoDbDatabaseInfo = {
        serializedName: "MongoDbDatabaseInfo",
        type: {
            name: "Composite",
            className: "MongoDbDatabaseInfo",
            modelProperties: __assign(__assign({}, MongoDbObjectInfo.type.modelProperties), { collections: {
                    required: true,
                    serializedName: "collections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MongoDbCollectionInfo"
                            }
                        }
                    }
                }, supportsSharding: {
                    required: true,
                    serializedName: "supportsSharding",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var MongoDbClusterInfo = {
        serializedName: "MongoDbClusterInfo",
        type: {
            name: "Composite",
            className: "MongoDbClusterInfo",
            modelProperties: {
                databases: {
                    required: true,
                    serializedName: "databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MongoDbDatabaseInfo"
                            }
                        }
                    }
                },
                supportsSharding: {
                    required: true,
                    serializedName: "supportsSharding",
                    type: {
                        name: "Boolean"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    required: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectToMongoDbTaskProperties = {
        serializedName: "Connect.MongoDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToMongoDbTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MongoDbConnectionInfo"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MongoDbClusterInfo"
                            }
                        }
                    }
                } })
        }
    };
    var ProjectTask = {
        serializedName: "ProjectTask",
        type: {
            name: "Composite",
            className: "ProjectTask",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ProjectTaskProperties"
                    }
                } })
        }
    };
    var ServiceSku = {
        serializedName: "ServiceSku",
        type: {
            name: "Composite",
            className: "ServiceSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var DataMigrationService = {
        serializedName: "DataMigrationService",
        type: {
            name: "Composite",
            className: "DataMigrationService",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, publicKey: {
                    serializedName: "properties.publicKey",
                    type: {
                        name: "String"
                    }
                }, virtualSubnetId: {
                    required: true,
                    serializedName: "properties.virtualSubnetId",
                    type: {
                        name: "String"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ServiceSku"
                    }
                } })
        }
    };
    var NameAvailabilityRequest = {
        serializedName: "NameAvailabilityRequest",
        type: {
            name: "Composite",
            className: "NameAvailabilityRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseInfo = {
        serializedName: "DatabaseInfo",
        type: {
            name: "Composite",
            className: "DatabaseInfo",
            modelProperties: {
                sourceDatabaseName: {
                    required: true,
                    serializedName: "sourceDatabaseName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Project = {
        serializedName: "Project",
        type: {
            name: "Composite",
            className: "Project",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sourcePlatform: {
                    required: true,
                    serializedName: "properties.sourcePlatform",
                    type: {
                        name: "String"
                    }
                }, targetPlatform: {
                    required: true,
                    serializedName: "properties.targetPlatform",
                    type: {
                        name: "String"
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, sourceConnectionInfo: {
                    serializedName: "properties.sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "ConnectionInfo"
                    }
                }, targetConnectionInfo: {
                    serializedName: "properties.targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "ConnectionInfo"
                    }
                }, databasesInfo: {
                    serializedName: "properties.databasesInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseInfo"
                            }
                        }
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApiError = {
        serializedName: "ApiError",
        type: {
            name: "Composite",
            className: "ApiError",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ODataError"
                    }
                }
            }
        }
    };
    var FileStorageInfo = {
        serializedName: "FileStorageInfo",
        type: {
            name: "Composite",
            className: "FileStorageInfo",
            modelProperties: {
                uri: {
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceOperationDisplay = {
        serializedName: "ServiceOperation_display",
        type: {
            name: "Composite",
            className: "ServiceOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceOperation = {
        serializedName: "ServiceOperation",
        type: {
            name: "Composite",
            className: "ServiceOperation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "ServiceOperationDisplay"
                    }
                }
            }
        }
    };
    var QuotaName = {
        serializedName: "Quota_name",
        type: {
            name: "Composite",
            className: "QuotaName",
            modelProperties: {
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Quota = {
        serializedName: "Quota",
        type: {
            name: "Composite",
            className: "Quota",
            modelProperties: {
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "QuotaName"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NameAvailabilityResponse = {
        serializedName: "NameAvailabilityResponse",
        type: {
            name: "Composite",
            className: "NameAvailabilityResponse",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableServiceSkuSku = {
        serializedName: "AvailableServiceSku_sku",
        type: {
            name: "Composite",
            className: "AvailableServiceSkuSku",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableServiceSkuCapacity = {
        serializedName: "AvailableServiceSku_capacity",
        type: {
            name: "Composite",
            className: "AvailableServiceSkuCapacity",
            modelProperties: {
                minimum: {
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    serializedName: "scaleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableServiceSku = {
        serializedName: "AvailableServiceSku",
        type: {
            name: "Composite",
            className: "AvailableServiceSku",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "AvailableServiceSkuSku"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "AvailableServiceSkuCapacity"
                    }
                }
            }
        }
    };
    var DataMigrationServiceStatusResponse = {
        serializedName: "DataMigrationServiceStatusResponse",
        type: {
            name: "Composite",
            className: "DataMigrationServiceStatusResponse",
            modelProperties: {
                agentVersion: {
                    serializedName: "agentVersion",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                vmSize: {
                    serializedName: "vmSize",
                    type: {
                        name: "String"
                    }
                },
                supportedTaskTypes: {
                    serializedName: "supportedTaskTypes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkuRestrictions = {
        serializedName: "ResourceSkuRestrictions",
        type: {
            name: "Composite",
            className: "ResourceSkuRestrictions",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    readOnly: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCapabilities = {
        serializedName: "ResourceSkuCapabilities",
        type: {
            name: "Composite",
            className: "ResourceSkuCapabilities",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCosts = {
        serializedName: "ResourceSkuCosts",
        type: {
            name: "Composite",
            className: "ResourceSkuCosts",
            modelProperties: {
                meterID: {
                    readOnly: true,
                    serializedName: "meterID",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    readOnly: true,
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                extendedUnit: {
                    readOnly: true,
                    serializedName: "extendedUnit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSkuCapacity = {
        serializedName: "ResourceSkuCapacity",
        type: {
            name: "Composite",
            className: "ResourceSkuCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    readOnly: true,
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                size: {
                    readOnly: true,
                    serializedName: "size",
                    type: {
                        name: "String"
                    }
                },
                family: {
                    readOnly: true,
                    serializedName: "family",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    readOnly: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "ResourceSkuCapacity"
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                apiVersions: {
                    readOnly: true,
                    serializedName: "apiVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                costs: {
                    readOnly: true,
                    serializedName: "costs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCosts"
                            }
                        }
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuCapabilities"
                            }
                        }
                    }
                },
                restrictions: {
                    readOnly: true,
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSkuRestrictions"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToSourceMySqlTaskInput = {
        serializedName: "ConnectToSourceMySqlTaskInput",
        type: {
            name: "Composite",
            className: "ConnectToSourceMySqlTaskInput",
            modelProperties: {
                sourceConnectionInfo: {
                    required: true,
                    serializedName: "sourceConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "MySqlConnectionInfo"
                    }
                },
                targetPlatform: {
                    serializedName: "targetPlatform",
                    type: {
                        name: "String"
                    }
                },
                checkPermissionsGroup: {
                    serializedName: "checkPermissionsGroup",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Default",
                            "MigrationFromSqlServerToAzureDB",
                            "MigrationFromSqlServerToAzureMI",
                            "MigrationFromMySQLToAzureDBForMySQL"
                        ]
                    }
                }
            }
        }
    };
    var ServerProperties = {
        serializedName: "ServerProperties",
        type: {
            name: "Composite",
            className: "ServerProperties",
            modelProperties: {
                serverPlatform: {
                    readOnly: true,
                    serializedName: "serverPlatform",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    readOnly: true,
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                serverVersion: {
                    readOnly: true,
                    serializedName: "serverVersion",
                    type: {
                        name: "String"
                    }
                },
                serverEdition: {
                    readOnly: true,
                    serializedName: "serverEdition",
                    type: {
                        name: "String"
                    }
                },
                serverOperatingSystemVersion: {
                    readOnly: true,
                    serializedName: "serverOperatingSystemVersion",
                    type: {
                        name: "String"
                    }
                },
                serverDatabaseCount: {
                    readOnly: true,
                    serializedName: "serverDatabaseCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ConnectToSourceNonSqlTaskOutput = {
        serializedName: "ConnectToSourceNonSqlTaskOutput",
        type: {
            name: "Composite",
            className: "ConnectToSourceNonSqlTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                },
                serverProperties: {
                    readOnly: true,
                    serializedName: "serverProperties",
                    type: {
                        name: "Composite",
                        className: "ServerProperties"
                    }
                },
                databases: {
                    readOnly: true,
                    serializedName: "databases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectToSourceMySqlTaskProperties = {
        serializedName: "ConnectToSource.MySql",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "ConnectToSourceMySqlTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "ConnectToSourceMySqlTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectToSourceNonSqlTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var SchemaMigrationSetting = {
        serializedName: "SchemaMigrationSetting",
        type: {
            name: "Composite",
            className: "SchemaMigrationSetting",
            modelProperties: {
                schemaOption: {
                    serializedName: "schemaOption",
                    type: {
                        name: "String"
                    }
                },
                fileId: {
                    serializedName: "fileId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSchemaSqlServerSqlDbDatabaseInput = {
        serializedName: "MigrateSchemaSqlServerSqlDbDatabaseInput",
        type: {
            name: "Composite",
            className: "MigrateSchemaSqlServerSqlDbDatabaseInput",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                targetDatabaseName: {
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                schemaSetting: {
                    serializedName: "schemaSetting",
                    type: {
                        name: "Composite",
                        className: "SchemaMigrationSetting"
                    }
                }
            }
        }
    };
    var MigrateSchemaSqlServerSqlDbTaskInput = {
        serializedName: "MigrateSchemaSqlServerSqlDbTaskInput",
        type: {
            name: "Composite",
            className: "MigrateSchemaSqlServerSqlDbTaskInput",
            modelProperties: __assign(__assign({}, SqlMigrationTaskInput.type.modelProperties), { selectedDatabases: {
                    required: true,
                    serializedName: "selectedDatabases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSchemaSqlServerSqlDbDatabaseInput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSchemaSqlServerSqlDbTaskOutput = {
        serializedName: "MigrateSchemaSqlServerSqlDbTaskOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
            className: "MigrateSchemaSqlServerSqlDbTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSchemaSqlServerSqlDbTaskProperties = {
        serializedName: "MigrateSchemaSqlServerSqlDb",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "MigrateSchemaSqlServerSqlDbTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MigrateSchemaSqlServerSqlDbTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrateSchemaSqlServerSqlDbTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel = {
        serializedName: "MigrationLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
            className: "MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel",
            modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, sourceServerVersion: {
                    readOnly: true,
                    serializedName: "sourceServerVersion",
                    type: {
                        name: "String"
                    }
                }, sourceServerBrandVersion: {
                    readOnly: true,
                    serializedName: "sourceServerBrandVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerVersion: {
                    readOnly: true,
                    serializedName: "targetServerVersion",
                    type: {
                        name: "String"
                    }
                }, targetServerBrandVersion: {
                    readOnly: true,
                    serializedName: "targetServerBrandVersion",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel = {
        serializedName: "DatabaseLevelOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
            className: "MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel",
            modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                }, stage: {
                    readOnly: true,
                    serializedName: "stage",
                    type: {
                        name: "String"
                    }
                }, startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                }, endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                }, databaseErrorResultPrefix: {
                    readOnly: true,
                    serializedName: "databaseErrorResultPrefix",
                    type: {
                        name: "String"
                    }
                }, schemaErrorResultPrefix: {
                    readOnly: true,
                    serializedName: "schemaErrorResultPrefix",
                    type: {
                        name: "String"
                    }
                }, numberOfSuccessfulOperations: {
                    readOnly: true,
                    serializedName: "numberOfSuccessfulOperations",
                    type: {
                        name: "Number"
                    }
                }, numberOfFailedOperations: {
                    readOnly: true,
                    serializedName: "numberOfFailedOperations",
                    type: {
                        name: "Number"
                    }
                }, fileId: {
                    readOnly: true,
                    serializedName: "fileId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MigrateSchemaSqlServerSqlDbTaskOutputError = {
        serializedName: "SchemaErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
            className: "MigrateSchemaSqlServerSqlDbTaskOutputError",
            modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { commandText: {
                    readOnly: true,
                    serializedName: "commandText",
                    type: {
                        name: "String"
                    }
                }, errorText: {
                    readOnly: true,
                    serializedName: "errorText",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var MigrateSchemaSqlTaskOutputError = {
        serializedName: "ErrorOutput",
        type: {
            name: "Composite",
            polymorphicDiscriminator: MigrateSchemaSqlServerSqlDbTaskOutput.type.polymorphicDiscriminator,
            uberParent: "MigrateSchemaSqlServerSqlDbTaskOutput",
            className: "MigrateSchemaSqlTaskOutputError",
            modelProperties: __assign(__assign({}, MigrateSchemaSqlServerSqlDbTaskOutput.type.modelProperties), { error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ReportableException"
                    }
                } })
        }
    };
    var MongoDbCommandInput = {
        serializedName: "MongoDbCommandInput",
        type: {
            name: "Composite",
            className: "MongoDbCommandInput",
            modelProperties: {
                objectName: {
                    serializedName: "objectName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MongoDbCancelCommand = {
        serializedName: "cancel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
            uberParent: "CommandProperties",
            className: "MongoDbCancelCommand",
            modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MongoDbCommandInput"
                    }
                } })
        }
    };
    var MongoDbFinishCommandInput = {
        serializedName: "MongoDbFinishCommandInput",
        type: {
            name: "Composite",
            className: "MongoDbFinishCommandInput",
            modelProperties: __assign(__assign({}, MongoDbCommandInput.type.modelProperties), { immediate: {
                    required: true,
                    serializedName: "immediate",
                    type: {
                        name: "Boolean"
                    }
                } })
        }
    };
    var MongoDbFinishCommand = {
        serializedName: "finish",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
            uberParent: "CommandProperties",
            className: "MongoDbFinishCommand",
            modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MongoDbFinishCommandInput"
                    }
                } })
        }
    };
    var MongoDbRestartCommand = {
        serializedName: "restart",
        type: {
            name: "Composite",
            polymorphicDiscriminator: CommandProperties.type.polymorphicDiscriminator,
            uberParent: "CommandProperties",
            className: "MongoDbRestartCommand",
            modelProperties: __assign(__assign({}, CommandProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "MongoDbCommandInput"
                    }
                } })
        }
    };
    var OracleOCIDriverInfo = {
        serializedName: "OracleOCIDriverInfo",
        type: {
            name: "Composite",
            className: "OracleOCIDriverInfo",
            modelProperties: {
                driverName: {
                    readOnly: true,
                    serializedName: "driverName",
                    type: {
                        name: "String"
                    }
                },
                driverSize: {
                    readOnly: true,
                    serializedName: "driverSize",
                    type: {
                        name: "String"
                    }
                },
                archiveChecksum: {
                    readOnly: true,
                    serializedName: "archiveChecksum",
                    type: {
                        name: "String"
                    }
                },
                oracleChecksum: {
                    readOnly: true,
                    serializedName: "oracleChecksum",
                    type: {
                        name: "String"
                    }
                },
                assemblyVersion: {
                    readOnly: true,
                    serializedName: "assemblyVersion",
                    type: {
                        name: "String"
                    }
                },
                supportedOracleVersions: {
                    readOnly: true,
                    serializedName: "supportedOracleVersions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CheckOCIDriverTaskInput = {
        serializedName: "CheckOCIDriverTaskInput",
        type: {
            name: "Composite",
            className: "CheckOCIDriverTaskInput",
            modelProperties: {
                serverVersion: {
                    serializedName: "serverVersion",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckOCIDriverTaskOutput = {
        serializedName: "CheckOCIDriverTaskOutput",
        type: {
            name: "Composite",
            className: "CheckOCIDriverTaskOutput",
            modelProperties: {
                installedDriver: {
                    serializedName: "installedDriver",
                    type: {
                        name: "Composite",
                        className: "OracleOCIDriverInfo"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var UploadOCIDriverTaskInput = {
        serializedName: "UploadOCIDriverTaskInput",
        type: {
            name: "Composite",
            className: "UploadOCIDriverTaskInput",
            modelProperties: {
                driverShare: {
                    serializedName: "driverShare",
                    type: {
                        name: "Composite",
                        className: "FileShare"
                    }
                }
            }
        }
    };
    var UploadOCIDriverTaskOutput = {
        serializedName: "UploadOCIDriverTaskOutput",
        type: {
            name: "Composite",
            className: "UploadOCIDriverTaskOutput",
            modelProperties: {
                driverPackageName: {
                    readOnly: true,
                    serializedName: "driverPackageName",
                    type: {
                        name: "String"
                    }
                },
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var InstallOCIDriverTaskInput = {
        serializedName: "InstallOCIDriverTaskInput",
        type: {
            name: "Composite",
            className: "InstallOCIDriverTaskInput",
            modelProperties: {
                driverPackageName: {
                    serializedName: "driverPackageName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var InstallOCIDriverTaskOutput = {
        serializedName: "InstallOCIDriverTaskOutput",
        type: {
            name: "Composite",
            className: "InstallOCIDriverTaskOutput",
            modelProperties: {
                validationErrors: {
                    readOnly: true,
                    serializedName: "validationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReportableException"
                            }
                        }
                    }
                }
            }
        }
    };
    var CheckOCIDriverTaskProperties = {
        serializedName: "Service.Check.OCI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "CheckOCIDriverTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "CheckOCIDriverTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CheckOCIDriverTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var UploadOCIDriverTaskProperties = {
        serializedName: "Service.Upload.OCI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "UploadOCIDriverTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "UploadOCIDriverTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UploadOCIDriverTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var InstallOCIDriverTaskProperties = {
        serializedName: "Service.Install.OCI",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ProjectTaskProperties.type.polymorphicDiscriminator,
            uberParent: "ProjectTaskProperties",
            className: "InstallOCIDriverTaskProperties",
            modelProperties: __assign(__assign({}, ProjectTaskProperties.type.modelProperties), { input: {
                    serializedName: "input",
                    type: {
                        name: "Composite",
                        className: "InstallOCIDriverTaskInput"
                    }
                }, output: {
                    readOnly: true,
                    serializedName: "output",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "InstallOCIDriverTaskOutput"
                            }
                        }
                    }
                } })
        }
    };
    var Database = {
        serializedName: "Database",
        type: {
            name: "Composite",
            className: "Database",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                compatibilityLevel: {
                    serializedName: "compatibilityLevel",
                    type: {
                        name: "String"
                    }
                },
                collation: {
                    serializedName: "collation",
                    type: {
                        name: "String"
                    }
                },
                serverName: {
                    serializedName: "serverName",
                    type: {
                        name: "String"
                    }
                },
                fqdn: {
                    serializedName: "fqdn",
                    type: {
                        name: "String"
                    }
                },
                installId: {
                    serializedName: "installId",
                    type: {
                        name: "String"
                    }
                },
                serverVersion: {
                    serializedName: "serverVersion",
                    type: {
                        name: "String"
                    }
                },
                serverEdition: {
                    serializedName: "serverEdition",
                    type: {
                        name: "String"
                    }
                },
                serverLevel: {
                    serializedName: "serverLevel",
                    type: {
                        name: "String"
                    }
                },
                serverDefaultDataPath: {
                    serializedName: "serverDefaultDataPath",
                    type: {
                        name: "String"
                    }
                },
                serverDefaultLogPath: {
                    serializedName: "serverDefaultLogPath",
                    type: {
                        name: "String"
                    }
                },
                serverDefaultBackupPath: {
                    serializedName: "serverDefaultBackupPath",
                    type: {
                        name: "String"
                    }
                },
                serverCoreCount: {
                    serializedName: "serverCoreCount",
                    type: {
                        name: "Number"
                    }
                },
                serverVisibleOnlineCoreCount: {
                    serializedName: "serverVisibleOnlineCoreCount",
                    type: {
                        name: "Number"
                    }
                },
                databaseState: {
                    serializedName: "databaseState",
                    type: {
                        name: "String"
                    }
                },
                serverId: {
                    serializedName: "serverId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseObjectName = {
        serializedName: "DatabaseObjectName",
        type: {
            name: "Composite",
            className: "DatabaseObjectName",
            modelProperties: {
                databaseName: {
                    readOnly: true,
                    serializedName: "databaseName",
                    type: {
                        name: "String"
                    }
                },
                objectName: {
                    readOnly: true,
                    serializedName: "objectName",
                    type: {
                        name: "String"
                    }
                },
                schemaName: {
                    readOnly: true,
                    serializedName: "schemaName",
                    type: {
                        name: "String"
                    }
                },
                objectType: {
                    serializedName: "objectType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrationTableMetadata = {
        serializedName: "MigrationTableMetadata",
        type: {
            name: "Composite",
            className: "MigrationTableMetadata",
            modelProperties: {
                sourceTableName: {
                    readOnly: true,
                    serializedName: "sourceTableName",
                    type: {
                        name: "String"
                    }
                },
                targetTableName: {
                    readOnly: true,
                    serializedName: "targetTableName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataMigrationProjectMetadata = {
        serializedName: "DataMigrationProjectMetadata",
        type: {
            name: "Composite",
            className: "DataMigrationProjectMetadata",
            modelProperties: {
                sourceServerName: {
                    readOnly: true,
                    serializedName: "sourceServerName",
                    type: {
                        name: "String"
                    }
                },
                sourceServerPort: {
                    readOnly: true,
                    serializedName: "sourceServerPort",
                    type: {
                        name: "String"
                    }
                },
                sourceUsername: {
                    readOnly: true,
                    serializedName: "sourceUsername",
                    type: {
                        name: "String"
                    }
                },
                targetServerName: {
                    readOnly: true,
                    serializedName: "targetServerName",
                    type: {
                        name: "String"
                    }
                },
                targetUsername: {
                    readOnly: true,
                    serializedName: "targetUsername",
                    type: {
                        name: "String"
                    }
                },
                targetDbName: {
                    readOnly: true,
                    serializedName: "targetDbName",
                    type: {
                        name: "String"
                    }
                },
                targetUsingWinAuth: {
                    readOnly: true,
                    serializedName: "targetUsingWinAuth",
                    type: {
                        name: "Boolean"
                    }
                },
                selectedMigrationTables: {
                    readOnly: true,
                    serializedName: "selectedMigrationTables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MigrationTableMetadata"
                            }
                        }
                    }
                }
            }
        }
    };
    var GetProjectDetailsNonSqlTaskInput = {
        serializedName: "GetProjectDetailsNonSqlTaskInput",
        type: {
            name: "Composite",
            className: "GetProjectDetailsNonSqlTaskInput",
            modelProperties: {
                projectName: {
                    required: true,
                    serializedName: "projectName",
                    type: {
                        name: "String"
                    }
                },
                projectLocation: {
                    required: true,
                    serializedName: "projectLocation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NonSqlDataMigrationTable = {
        serializedName: "NonSqlDataMigrationTable",
        type: {
            name: "Composite",
            className: "NonSqlDataMigrationTable",
            modelProperties: {
                sourceName: {
                    serializedName: "sourceName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NonSqlMigrationTaskInput = {
        serializedName: "NonSqlMigrationTaskInput",
        type: {
            name: "Composite",
            className: "NonSqlMigrationTaskInput",
            modelProperties: {
                targetConnectionInfo: {
                    required: true,
                    serializedName: "targetConnectionInfo",
                    type: {
                        name: "Composite",
                        className: "SqlConnectionInfo"
                    }
                },
                targetDatabaseName: {
                    required: true,
                    serializedName: "targetDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                projectName: {
                    required: true,
                    serializedName: "projectName",
                    type: {
                        name: "String"
                    }
                },
                projectLocation: {
                    required: true,
                    serializedName: "projectLocation",
                    type: {
                        name: "String"
                    }
                },
                selectedTables: {
                    required: true,
                    serializedName: "selectedTables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NonSqlDataMigrationTable"
                            }
                        }
                    }
                }
            }
        }
    };
    var DataMigrationError = {
        serializedName: "DataMigrationError",
        type: {
            name: "Composite",
            className: "DataMigrationError",
            modelProperties: {
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NonSqlDataMigrationTableResult = {
        serializedName: "NonSqlDataMigrationTableResult",
        type: {
            name: "Composite",
            className: "NonSqlDataMigrationTableResult",
            modelProperties: {
                resultCode: {
                    readOnly: true,
                    serializedName: "resultCode",
                    type: {
                        name: "String"
                    }
                },
                sourceName: {
                    readOnly: true,
                    serializedName: "sourceName",
                    type: {
                        name: "String"
                    }
                },
                targetName: {
                    readOnly: true,
                    serializedName: "targetName",
                    type: {
                        name: "String"
                    }
                },
                sourceRowCount: {
                    readOnly: true,
                    serializedName: "sourceRowCount",
                    type: {
                        name: "Number"
                    }
                },
                targetRowCount: {
                    readOnly: true,
                    serializedName: "targetRowCount",
                    type: {
                        name: "Number"
                    }
                },
                elapsedTimeInMiliseconds: {
                    readOnly: true,
                    serializedName: "elapsedTimeInMiliseconds",
                    type: {
                        name: "Number"
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataMigrationError"
                            }
                        }
                    }
                }
            }
        }
    };
    var NonSqlMigrationTaskOutput = {
        serializedName: "NonSqlMigrationTaskOutput",
        type: {
            name: "Composite",
            className: "NonSqlMigrationTaskOutput",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                startedOn: {
                    readOnly: true,
                    serializedName: "startedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                endedOn: {
                    readOnly: true,
                    serializedName: "endedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                dataMigrationTableResults: {
                    readOnly: true,
                    serializedName: "dataMigrationTableResults",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "NonSqlDataMigrationTableResult"
                            }
                        }
                    }
                },
                progressMessage: {
                    readOnly: true,
                    serializedName: "progressMessage",
                    type: {
                        name: "String"
                    }
                },
                sourceServerName: {
                    readOnly: true,
                    serializedName: "sourceServerName",
                    type: {
                        name: "String"
                    }
                },
                targetServerName: {
                    readOnly: true,
                    serializedName: "targetServerName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DatabaseFileInput = {
        serializedName: "DatabaseFileInput",
        type: {
            name: "Composite",
            className: "DatabaseFileInput",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                logicalName: {
                    serializedName: "logicalName",
                    type: {
                        name: "String"
                    }
                },
                physicalFullName: {
                    serializedName: "physicalFullName",
                    type: {
                        name: "String"
                    }
                },
                restoreFullName: {
                    serializedName: "restoreFullName",
                    type: {
                        name: "String"
                    }
                },
                fileType: {
                    serializedName: "fileType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MigrateSqlServerSqlServerDatabaseInput = {
        serializedName: "MigrateSqlServerSqlServerDatabaseInput",
        type: {
            name: "Composite",
            className: "MigrateSqlServerSqlServerDatabaseInput",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                restoreDatabaseName: {
                    serializedName: "restoreDatabaseName",
                    type: {
                        name: "String"
                    }
                },
                backupAndRestoreFolder: {
                    serializedName: "backupAndRestoreFolder",
                    type: {
                        name: "String"
                    }
                },
                databaseFiles: {
                    serializedName: "databaseFiles",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DatabaseFileInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceSkusResult = {
        serializedName: "ResourceSkusResult",
        type: {
            name: "Composite",
            className: "ResourceSkusResult",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceSkuList = {
        serializedName: "ServiceSkuList",
        type: {
            name: "Composite",
            className: "ServiceSkuList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailableServiceSku"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataMigrationServiceList = {
        serializedName: "DataMigrationServiceList",
        type: {
            name: "Composite",
            className: "DataMigrationServiceList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataMigrationService"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TaskList = {
        serializedName: "TaskList",
        type: {
            name: "Composite",
            className: "TaskList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProjectTask"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProjectList = {
        serializedName: "ProjectList",
        type: {
            name: "Composite",
            className: "ProjectList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Project"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QuotaList = {
        serializedName: "QuotaList",
        type: {
            name: "Composite",
            className: "QuotaList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Quota"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceOperationList = {
        serializedName: "ServiceOperationList",
        type: {
            name: "Composite",
            className: "ServiceOperationList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceOperation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FileList = {
        serializedName: "FileList",
        type: {
            name: "Composite",
            className: "FileList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ProjectFile"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'CommandProperties.Migrate.SqlServer.AzureDbSqlMi.Complete': MigrateMISyncCompleteCommandProperties,
        'CommandProperties.Migrate.Sync.Complete.Database': MigrateSyncCompleteCommandProperties,
        'CommandProperties': CommandProperties,
        'MigrateSsisTaskOutput.SsisProjectLevelOutput': MigrateSsisTaskOutputProjectLevel,
        'MigrateSsisTaskOutput.MigrationLevelOutput': MigrateSsisTaskOutputMigrationLevel,
        'MigrateSsisTaskOutput': MigrateSsisTaskOutput,
        'ConnectionInfo.MiSqlConnectionInfo': MiSqlConnectionInfo,
        'ConnectionInfo.PostgreSqlConnectionInfo': PostgreSqlConnectionInfo,
        'ConnectionInfo.OracleConnectionInfo': OracleConnectionInfo,
        'ConnectionInfo.MySqlConnectionInfo': MySqlConnectionInfo,
        'ConnectionInfo.MongoDbConnectionInfo': MongoDbConnectionInfo,
        'ConnectionInfo': ConnectionInfo,
        'ConnectionInfo.SqlConnectionInfo': SqlConnectionInfo,
        'ProjectTaskProperties.Migrate.Ssis': MigrateSsisTaskProperties,
        'ProjectTaskProperties.GetTDECertificates.Sql': GetTdeCertificatesSqlTaskProperties,
        'ProjectTaskProperties.Validate.Oracle.AzureDbPostgreSql.Sync': ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
        'ProjectTaskProperties.Validate.MongoDb': ValidateMongoDbTaskProperties,
        'ProjectTaskProperties.ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS': ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
        'ProjectTaskProperties.ValidateMigrationInput.SqlServer.AzureSqlDbMI': ValidateMigrationInputSqlServerSqlMITaskProperties,
        'ProjectTaskProperties.ValidateMigrationInput.SqlServer.SqlDb.Sync': ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
        'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.DatabaseLevelErrorOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
        'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.ErrorOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
        'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.TableLevelOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
        'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.DatabaseLevelOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
        'MigrateOracleAzureDbPostgreSqlSyncTaskOutput.MigrationLevelOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
        'MigrateOracleAzureDbPostgreSqlSyncTaskOutput': MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
        'ProjectTaskProperties.Migrate.Oracle.AzureDbForPostgreSql.Sync': MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
        'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.DatabaseLevelErrorOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
        'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.ErrorOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
        'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.TableLevelOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
        'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.DatabaseLevelOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
        'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.MigrationLevelOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
        'MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
        'ProjectTaskProperties.Migrate.PostgreSql.AzureDbForPostgreSql.Sync': MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
        'MigrateMySqlAzureDbForMySqlSyncTaskOutput.DatabaseLevelErrorOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
        'MigrateMySqlAzureDbForMySqlSyncTaskOutput.ErrorOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
        'MigrateMySqlAzureDbForMySqlSyncTaskOutput.TableLevelOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
        'MigrateMySqlAzureDbForMySqlSyncTaskOutput.DatabaseLevelOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
        'MigrateMySqlAzureDbForMySqlSyncTaskOutput.MigrationLevelOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
        'MigrateMySqlAzureDbForMySqlSyncTaskOutput': MigrateMySqlAzureDbForMySqlSyncTaskOutput,
        'ProjectTaskProperties.Migrate.MySql.AzureDbForMySql.Sync': MigrateMySqlAzureDbForMySqlSyncTaskProperties,
        'MigrateSqlServerSqlDbSyncTaskOutput.DatabaseLevelErrorOutput': MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
        'MigrateSqlServerSqlDbSyncTaskOutput.ErrorOutput': MigrateSqlServerSqlDbSyncTaskOutputError,
        'MigrateSqlServerSqlDbSyncTaskOutput.TableLevelOutput': MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
        'MigrateSqlServerSqlDbSyncTaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
        'MigrateSqlServerSqlDbSyncTaskOutput.MigrationLevelOutput': MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
        'MigrateSqlServerSqlDbSyncTaskOutput': MigrateSqlServerSqlDbSyncTaskOutput,
        'ProjectTaskProperties.Migrate.SqlServer.AzureSqlDb.Sync': MigrateSqlServerSqlDbSyncTaskProperties,
        'MigrateSqlServerSqlDbTaskOutput.ErrorOutput': MigrateSqlServerSqlDbTaskOutputError,
        'MigrateSqlServerSqlDbTaskOutput.TableLevelOutput': MigrateSqlServerSqlDbTaskOutputTableLevel,
        'MigrateSqlServerSqlDbTaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
        'MigrateSqlServerSqlDbTaskOutput.MigrationLevelOutput': MigrateSqlServerSqlDbTaskOutputMigrationLevel,
        'MigrateSqlServerSqlDbTaskOutput': MigrateSqlServerSqlDbTaskOutput,
        'ProjectTaskProperties.Migrate.SqlServer.SqlDb': MigrateSqlServerSqlDbTaskProperties,
        'MigrateSqlServerSqlMISyncTaskOutput.ErrorOutput': MigrateSqlServerSqlMISyncTaskOutputError,
        'MigrateSqlServerSqlMISyncTaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
        'MigrateSqlServerSqlMISyncTaskOutput.MigrationLevelOutput': MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
        'MigrateSqlServerSqlMISyncTaskOutput': MigrateSqlServerSqlMISyncTaskOutput,
        'ProjectTaskProperties.Migrate.SqlServer.AzureSqlDbMI.Sync.LRS': MigrateSqlServerSqlMISyncTaskProperties,
        'MigrateSqlServerSqlMITaskOutput.ErrorOutput': MigrateSqlServerSqlMITaskOutputError,
        'MigrateSqlServerSqlMITaskOutput.LoginLevelOutput': MigrateSqlServerSqlMITaskOutputLoginLevel,
        'MigrateSqlServerSqlMITaskOutput.AgentJobLevelOutput': MigrateSqlServerSqlMITaskOutputAgentJobLevel,
        'MigrateSqlServerSqlMITaskOutput.DatabaseLevelOutput': MigrateSqlServerSqlMITaskOutputDatabaseLevel,
        'MigrateSqlServerSqlMITaskOutput.MigrationLevelOutput': MigrateSqlServerSqlMITaskOutputMigrationLevel,
        'MigrateSqlServerSqlMITaskOutput': MigrateSqlServerSqlMITaskOutput,
        'ProjectTaskProperties.Migrate.SqlServer.AzureSqlDbMI': MigrateSqlServerSqlMITaskProperties,
        'ProjectTaskProperties.Migrate.MongoDb': MigrateMongoDbTaskProperties,
        'ProjectTaskProperties.ConnectToTarget.AzureDbForMySql': ConnectToTargetAzureDbForMySqlTaskProperties,
        'ProjectTaskProperties.ConnectToTarget.AzureSqlDbMI.Sync.LRS': ConnectToTargetSqlMISyncTaskProperties,
        'ProjectTaskProperties.ConnectToTarget.AzureSqlDbMI': ConnectToTargetSqlMITaskProperties,
        'ProjectTaskProperties.GetUserTablesPostgreSql': GetUserTablesPostgreSqlTaskProperties,
        'ProjectTaskProperties.GetUserTablesOracle': GetUserTablesOracleTaskProperties,
        'ProjectTaskProperties.GetUserTables.AzureSqlDb.Sync': GetUserTablesSqlSyncTaskProperties,
        'ProjectTaskProperties.GetUserTables.Sql': GetUserTablesSqlTaskProperties,
        'ProjectTaskProperties.ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync': ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
        'ProjectTaskProperties.ConnectToTarget.AzureDbForPostgreSql.Sync': ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
        'ProjectTaskProperties.ConnectToTarget.SqlDb.Sync': ConnectToTargetSqlSqlDbSyncTaskProperties,
        'ProjectTaskProperties.ConnectToTarget.SqlDb': ConnectToTargetSqlDbTaskProperties,
        'ProjectTaskProperties.ConnectToSource.Oracle.Sync': ConnectToSourceOracleSyncTaskProperties,
        'ProjectTaskProperties.ConnectToSource.PostgreSql.Sync': ConnectToSourcePostgreSqlSyncTaskProperties,
        'ConnectToSourceSqlServerTaskOutput.AgentJobLevelOutput': ConnectToSourceSqlServerTaskOutputAgentJobLevel,
        'ConnectToSourceSqlServerTaskOutput.LoginLevelOutput': ConnectToSourceSqlServerTaskOutputLoginLevel,
        'ConnectToSourceSqlServerTaskOutput.DatabaseLevelOutput': ConnectToSourceSqlServerTaskOutputDatabaseLevel,
        'ConnectToSourceSqlServerTaskOutput.TaskLevelOutput': ConnectToSourceSqlServerTaskOutputTaskLevel,
        'ConnectToSourceSqlServerTaskOutput': ConnectToSourceSqlServerTaskOutput,
        'ProjectTaskProperties.ConnectToSource.SqlServer.Sync': ConnectToSourceSqlServerSyncTaskProperties,
        'ProjectTaskProperties.ConnectToSource.SqlServer': ConnectToSourceSqlServerTaskProperties,
        'ProjectTaskProperties.Connect.MongoDb': ConnectToMongoDbTaskProperties,
        'ProjectTaskProperties': ProjectTaskProperties,
        'ProjectTaskProperties.ConnectToSource.MySql': ConnectToSourceMySqlTaskProperties,
        'MigrateSchemaSqlServerSqlDbTaskOutput': MigrateSchemaSqlServerSqlDbTaskOutput,
        'ProjectTaskProperties.MigrateSchemaSqlServerSqlDb': MigrateSchemaSqlServerSqlDbTaskProperties,
        'MigrateSchemaSqlServerSqlDbTaskOutput.MigrationLevelOutput': MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
        'MigrateSchemaSqlServerSqlDbTaskOutput.DatabaseLevelOutput': MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
        'MigrateSchemaSqlServerSqlDbTaskOutput.SchemaErrorOutput': MigrateSchemaSqlServerSqlDbTaskOutputError,
        'MigrateSchemaSqlServerSqlDbTaskOutput.ErrorOutput': MigrateSchemaSqlTaskOutputError,
        'CommandProperties.cancel': MongoDbCancelCommand,
        'CommandProperties.finish': MongoDbFinishCommand,
        'CommandProperties.restart': MongoDbRestartCommand,
        'ProjectTaskProperties.Service.Check.OCI': CheckOCIDriverTaskProperties,
        'ProjectTaskProperties.Service.Upload.OCI': UploadOCIDriverTaskProperties,
        'ProjectTaskProperties.Service.Install.OCI': InstallOCIDriverTaskProperties
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        TrackedResource: TrackedResource,
        ProjectFileProperties: ProjectFileProperties,
        ProjectFile: ProjectFile,
        ODataError: ODataError,
        ReportableException: ReportableException,
        MigrateMISyncCompleteCommandOutput: MigrateMISyncCompleteCommandOutput,
        MigrateMISyncCompleteCommandInput: MigrateMISyncCompleteCommandInput,
        CommandProperties: CommandProperties,
        MigrateMISyncCompleteCommandProperties: MigrateMISyncCompleteCommandProperties,
        MigrateSyncCompleteCommandOutput: MigrateSyncCompleteCommandOutput,
        MigrateSyncCompleteCommandInput: MigrateSyncCompleteCommandInput,
        MigrateSyncCompleteCommandProperties: MigrateSyncCompleteCommandProperties,
        MigrateSsisTaskOutput: MigrateSsisTaskOutput,
        MigrateSsisTaskOutputProjectLevel: MigrateSsisTaskOutputProjectLevel,
        MigrateSsisTaskOutputMigrationLevel: MigrateSsisTaskOutputMigrationLevel,
        SsisMigrationInfo: SsisMigrationInfo,
        ConnectionInfo: ConnectionInfo,
        MiSqlConnectionInfo: MiSqlConnectionInfo,
        PostgreSqlConnectionInfo: PostgreSqlConnectionInfo,
        OracleConnectionInfo: OracleConnectionInfo,
        MySqlConnectionInfo: MySqlConnectionInfo,
        MongoDbConnectionInfo: MongoDbConnectionInfo,
        SqlConnectionInfo: SqlConnectionInfo,
        SqlMigrationTaskInput: SqlMigrationTaskInput,
        MigrateSsisTaskInput: MigrateSsisTaskInput,
        ProjectTaskProperties: ProjectTaskProperties,
        MigrateSsisTaskProperties: MigrateSsisTaskProperties,
        GetTdeCertificatesSqlTaskOutput: GetTdeCertificatesSqlTaskOutput,
        SelectedCertificateInput: SelectedCertificateInput,
        FileShare: FileShare,
        GetTdeCertificatesSqlTaskInput: GetTdeCertificatesSqlTaskInput,
        GetTdeCertificatesSqlTaskProperties: GetTdeCertificatesSqlTaskProperties,
        ValidateOracleAzureDbPostgreSqlSyncTaskOutput: ValidateOracleAzureDbPostgreSqlSyncTaskOutput,
        MigrateOracleAzureDbPostgreSqlSyncDatabaseInput: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskInput: MigrateOracleAzureDbPostgreSqlSyncTaskInput,
        ValidateOracleAzureDbForPostgreSqlSyncTaskProperties: ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
        MongoDbError: MongoDbError,
        MongoDbProgress: MongoDbProgress,
        MongoDbCollectionProgress: MongoDbCollectionProgress,
        MongoDbDatabaseProgress: MongoDbDatabaseProgress,
        MongoDbMigrationProgress: MongoDbMigrationProgress,
        MongoDbThrottlingSettings: MongoDbThrottlingSettings,
        MongoDbShardKeyField: MongoDbShardKeyField,
        MongoDbShardKeySetting: MongoDbShardKeySetting,
        MongoDbCollectionSettings: MongoDbCollectionSettings,
        MongoDbDatabaseSettings: MongoDbDatabaseSettings,
        MongoDbMigrationSettings: MongoDbMigrationSettings,
        ValidateMongoDbTaskProperties: ValidateMongoDbTaskProperties,
        ValidateMigrationInputSqlServerSqlMISyncTaskOutput: ValidateMigrationInputSqlServerSqlMISyncTaskOutput,
        AzureActiveDirectoryApp: AzureActiveDirectoryApp,
        MigrateSqlServerSqlMIDatabaseInput: MigrateSqlServerSqlMIDatabaseInput,
        SqlServerSqlMISyncTaskInput: SqlServerSqlMISyncTaskInput,
        ValidateMigrationInputSqlServerSqlMISyncTaskInput: ValidateMigrationInputSqlServerSqlMISyncTaskInput,
        ValidateMigrationInputSqlServerSqlMISyncTaskProperties: ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
        DatabaseBackupInfo: DatabaseBackupInfo,
        ValidateMigrationInputSqlServerSqlMITaskOutput: ValidateMigrationInputSqlServerSqlMITaskOutput,
        BlobShare: BlobShare,
        ValidateMigrationInputSqlServerSqlMITaskInput: ValidateMigrationInputSqlServerSqlMITaskInput,
        ValidateMigrationInputSqlServerSqlMITaskProperties: ValidateMigrationInputSqlServerSqlMITaskProperties,
        ValidateSyncMigrationInputSqlServerTaskOutput: ValidateSyncMigrationInputSqlServerTaskOutput,
        MigrateSqlServerSqlDbSyncDatabaseInput: MigrateSqlServerSqlDbSyncDatabaseInput,
        ValidateSyncMigrationInputSqlServerTaskInput: ValidateSyncMigrationInputSqlServerTaskInput,
        ValidateMigrationInputSqlServerSqlDbSyncTaskProperties: ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
        SyncMigrationDatabaseErrorEvent: SyncMigrationDatabaseErrorEvent,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutput: MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
        MigrateOracleAzureDbForPostgreSqlSyncTaskProperties: MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
        MigrateMySqlAzureDbForMySqlSyncTaskOutput: MigrateMySqlAzureDbForMySqlSyncTaskOutput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputError: MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput: MigrateMySqlAzureDbForMySqlSyncDatabaseInput,
        MigrateMySqlAzureDbForMySqlSyncTaskInput: MigrateMySqlAzureDbForMySqlSyncTaskInput,
        MigrateMySqlAzureDbForMySqlSyncTaskProperties: MigrateMySqlAzureDbForMySqlSyncTaskProperties,
        MigrateSqlServerSqlDbSyncTaskOutput: MigrateSqlServerSqlDbSyncTaskOutput,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseError: MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
        MigrateSqlServerSqlDbSyncTaskOutputError: MigrateSqlServerSqlDbSyncTaskOutputError,
        MigrateSqlServerSqlDbSyncTaskOutputTableLevel: MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel: MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel: MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
        MigrationValidationOptions: MigrationValidationOptions,
        MigrateSqlServerSqlDbSyncTaskInput: MigrateSqlServerSqlDbSyncTaskInput,
        MigrateSqlServerSqlDbSyncTaskProperties: MigrateSqlServerSqlDbSyncTaskProperties,
        ValidationError: ValidationError,
        WaitStatistics: WaitStatistics,
        ExecutionStatistics: ExecutionStatistics,
        QueryExecutionResult: QueryExecutionResult,
        QueryAnalysisValidationResult: QueryAnalysisValidationResult,
        SchemaComparisonValidationResultType: SchemaComparisonValidationResultType,
        SchemaComparisonValidationResult: SchemaComparisonValidationResult,
        DataIntegrityValidationResult: DataIntegrityValidationResult,
        MigrationValidationDatabaseLevelResult: MigrationValidationDatabaseLevelResult,
        MigrationValidationDatabaseSummaryResult: MigrationValidationDatabaseSummaryResult,
        MigrationValidationResult: MigrationValidationResult,
        MigrateSqlServerSqlDbTaskOutput: MigrateSqlServerSqlDbTaskOutput,
        MigrateSqlServerSqlDbTaskOutputError: MigrateSqlServerSqlDbTaskOutputError,
        MigrateSqlServerSqlDbTaskOutputTableLevel: MigrateSqlServerSqlDbTaskOutputTableLevel,
        DataItemMigrationSummaryResult: DataItemMigrationSummaryResult,
        MigrateSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrationReportResult: MigrationReportResult,
        DatabaseSummaryResult: DatabaseSummaryResult,
        MigrateSqlServerSqlDbTaskOutputMigrationLevel: MigrateSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbDatabaseInput: MigrateSqlServerSqlDbDatabaseInput,
        MigrateSqlServerSqlDbTaskInput: MigrateSqlServerSqlDbTaskInput,
        MigrateSqlServerSqlDbTaskProperties: MigrateSqlServerSqlDbTaskProperties,
        MigrateSqlServerSqlMISyncTaskOutput: MigrateSqlServerSqlMISyncTaskOutput,
        MigrateSqlServerSqlMISyncTaskOutputError: MigrateSqlServerSqlMISyncTaskOutputError,
        BackupFileInfo: BackupFileInfo,
        BackupSetInfo: BackupSetInfo,
        MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel: MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlMISyncTaskOutputMigrationLevel: MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlMISyncTaskInput: MigrateSqlServerSqlMISyncTaskInput,
        MigrateSqlServerSqlMISyncTaskProperties: MigrateSqlServerSqlMISyncTaskProperties,
        MigrateSqlServerSqlMITaskOutput: MigrateSqlServerSqlMITaskOutput,
        MigrateSqlServerSqlMITaskOutputError: MigrateSqlServerSqlMITaskOutputError,
        MigrateSqlServerSqlMITaskOutputLoginLevel: MigrateSqlServerSqlMITaskOutputLoginLevel,
        MigrateSqlServerSqlMITaskOutputAgentJobLevel: MigrateSqlServerSqlMITaskOutputAgentJobLevel,
        MigrateSqlServerSqlMITaskOutputDatabaseLevel: MigrateSqlServerSqlMITaskOutputDatabaseLevel,
        OrphanedUserInfo: OrphanedUserInfo,
        StartMigrationScenarioServerRoleResult: StartMigrationScenarioServerRoleResult,
        MigrateSqlServerSqlMITaskOutputMigrationLevel: MigrateSqlServerSqlMITaskOutputMigrationLevel,
        MigrateSqlServerSqlMITaskInput: MigrateSqlServerSqlMITaskInput,
        MigrateSqlServerSqlMITaskProperties: MigrateSqlServerSqlMITaskProperties,
        MigrateMongoDbTaskProperties: MigrateMongoDbTaskProperties,
        ConnectToTargetAzureDbForMySqlTaskOutput: ConnectToTargetAzureDbForMySqlTaskOutput,
        ConnectToTargetAzureDbForMySqlTaskInput: ConnectToTargetAzureDbForMySqlTaskInput,
        ConnectToTargetAzureDbForMySqlTaskProperties: ConnectToTargetAzureDbForMySqlTaskProperties,
        ConnectToTargetSqlMISyncTaskOutput: ConnectToTargetSqlMISyncTaskOutput,
        ConnectToTargetSqlMISyncTaskInput: ConnectToTargetSqlMISyncTaskInput,
        ConnectToTargetSqlMISyncTaskProperties: ConnectToTargetSqlMISyncTaskProperties,
        ConnectToTargetSqlMITaskOutput: ConnectToTargetSqlMITaskOutput,
        ConnectToTargetSqlMITaskInput: ConnectToTargetSqlMITaskInput,
        ConnectToTargetSqlMITaskProperties: ConnectToTargetSqlMITaskProperties,
        DatabaseTable: DatabaseTable,
        GetUserTablesPostgreSqlTaskOutput: GetUserTablesPostgreSqlTaskOutput,
        GetUserTablesPostgreSqlTaskInput: GetUserTablesPostgreSqlTaskInput,
        GetUserTablesPostgreSqlTaskProperties: GetUserTablesPostgreSqlTaskProperties,
        GetUserTablesOracleTaskOutput: GetUserTablesOracleTaskOutput,
        GetUserTablesOracleTaskInput: GetUserTablesOracleTaskInput,
        GetUserTablesOracleTaskProperties: GetUserTablesOracleTaskProperties,
        GetUserTablesSqlSyncTaskOutput: GetUserTablesSqlSyncTaskOutput,
        GetUserTablesSqlSyncTaskInput: GetUserTablesSqlSyncTaskInput,
        GetUserTablesSqlSyncTaskProperties: GetUserTablesSqlSyncTaskProperties,
        GetUserTablesSqlTaskOutput: GetUserTablesSqlTaskOutput,
        GetUserTablesSqlTaskInput: GetUserTablesSqlTaskInput,
        GetUserTablesSqlTaskProperties: GetUserTablesSqlTaskProperties,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetSqlDbTaskOutput: ConnectToTargetSqlDbTaskOutput,
        ConnectToTargetSqlSqlDbSyncTaskInput: ConnectToTargetSqlSqlDbSyncTaskInput,
        ConnectToTargetSqlSqlDbSyncTaskProperties: ConnectToTargetSqlSqlDbSyncTaskProperties,
        ConnectToTargetSqlDbTaskInput: ConnectToTargetSqlDbTaskInput,
        ConnectToTargetSqlDbTaskProperties: ConnectToTargetSqlDbTaskProperties,
        ConnectToSourceOracleSyncTaskOutput: ConnectToSourceOracleSyncTaskOutput,
        ConnectToSourceOracleSyncTaskInput: ConnectToSourceOracleSyncTaskInput,
        ConnectToSourceOracleSyncTaskProperties: ConnectToSourceOracleSyncTaskProperties,
        ConnectToSourcePostgreSqlSyncTaskOutput: ConnectToSourcePostgreSqlSyncTaskOutput,
        ConnectToSourcePostgreSqlSyncTaskInput: ConnectToSourcePostgreSqlSyncTaskInput,
        ConnectToSourcePostgreSqlSyncTaskProperties: ConnectToSourcePostgreSqlSyncTaskProperties,
        MigrationEligibilityInfo: MigrationEligibilityInfo,
        ConnectToSourceSqlServerTaskOutput: ConnectToSourceSqlServerTaskOutput,
        ConnectToSourceSqlServerTaskOutputAgentJobLevel: ConnectToSourceSqlServerTaskOutputAgentJobLevel,
        ConnectToSourceSqlServerTaskOutputLoginLevel: ConnectToSourceSqlServerTaskOutputLoginLevel,
        DatabaseFileInfo: DatabaseFileInfo,
        ConnectToSourceSqlServerTaskOutputDatabaseLevel: ConnectToSourceSqlServerTaskOutputDatabaseLevel,
        ConnectToSourceSqlServerTaskOutputTaskLevel: ConnectToSourceSqlServerTaskOutputTaskLevel,
        ConnectToSourceSqlServerTaskInput: ConnectToSourceSqlServerTaskInput,
        ConnectToSourceSqlServerSyncTaskProperties: ConnectToSourceSqlServerSyncTaskProperties,
        ConnectToSourceSqlServerTaskProperties: ConnectToSourceSqlServerTaskProperties,
        MongoDbShardKeyInfo: MongoDbShardKeyInfo,
        MongoDbObjectInfo: MongoDbObjectInfo,
        MongoDbCollectionInfo: MongoDbCollectionInfo,
        MongoDbDatabaseInfo: MongoDbDatabaseInfo,
        MongoDbClusterInfo: MongoDbClusterInfo,
        ConnectToMongoDbTaskProperties: ConnectToMongoDbTaskProperties,
        ProjectTask: ProjectTask,
        ServiceSku: ServiceSku,
        DataMigrationService: DataMigrationService,
        NameAvailabilityRequest: NameAvailabilityRequest,
        DatabaseInfo: DatabaseInfo,
        Project: Project,
        ApiError: ApiError,
        FileStorageInfo: FileStorageInfo,
        ServiceOperationDisplay: ServiceOperationDisplay,
        ServiceOperation: ServiceOperation,
        QuotaName: QuotaName,
        Quota: Quota,
        NameAvailabilityResponse: NameAvailabilityResponse,
        AvailableServiceSkuSku: AvailableServiceSkuSku,
        AvailableServiceSkuCapacity: AvailableServiceSkuCapacity,
        AvailableServiceSku: AvailableServiceSku,
        DataMigrationServiceStatusResponse: DataMigrationServiceStatusResponse,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuCosts: ResourceSkuCosts,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSku: ResourceSku,
        ConnectToSourceMySqlTaskInput: ConnectToSourceMySqlTaskInput,
        ServerProperties: ServerProperties,
        ConnectToSourceNonSqlTaskOutput: ConnectToSourceNonSqlTaskOutput,
        ConnectToSourceMySqlTaskProperties: ConnectToSourceMySqlTaskProperties,
        SchemaMigrationSetting: SchemaMigrationSetting,
        MigrateSchemaSqlServerSqlDbDatabaseInput: MigrateSchemaSqlServerSqlDbDatabaseInput,
        MigrateSchemaSqlServerSqlDbTaskInput: MigrateSchemaSqlServerSqlDbTaskInput,
        MigrateSchemaSqlServerSqlDbTaskOutput: MigrateSchemaSqlServerSqlDbTaskOutput,
        MigrateSchemaSqlServerSqlDbTaskProperties: MigrateSchemaSqlServerSqlDbTaskProperties,
        MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel: MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSchemaSqlServerSqlDbTaskOutputError: MigrateSchemaSqlServerSqlDbTaskOutputError,
        MigrateSchemaSqlTaskOutputError: MigrateSchemaSqlTaskOutputError,
        MongoDbCommandInput: MongoDbCommandInput,
        MongoDbCancelCommand: MongoDbCancelCommand,
        MongoDbFinishCommandInput: MongoDbFinishCommandInput,
        MongoDbFinishCommand: MongoDbFinishCommand,
        MongoDbRestartCommand: MongoDbRestartCommand,
        OracleOCIDriverInfo: OracleOCIDriverInfo,
        CheckOCIDriverTaskInput: CheckOCIDriverTaskInput,
        CheckOCIDriverTaskOutput: CheckOCIDriverTaskOutput,
        UploadOCIDriverTaskInput: UploadOCIDriverTaskInput,
        UploadOCIDriverTaskOutput: UploadOCIDriverTaskOutput,
        InstallOCIDriverTaskInput: InstallOCIDriverTaskInput,
        InstallOCIDriverTaskOutput: InstallOCIDriverTaskOutput,
        CheckOCIDriverTaskProperties: CheckOCIDriverTaskProperties,
        UploadOCIDriverTaskProperties: UploadOCIDriverTaskProperties,
        InstallOCIDriverTaskProperties: InstallOCIDriverTaskProperties,
        Database: Database,
        DatabaseObjectName: DatabaseObjectName,
        MigrationTableMetadata: MigrationTableMetadata,
        DataMigrationProjectMetadata: DataMigrationProjectMetadata,
        GetProjectDetailsNonSqlTaskInput: GetProjectDetailsNonSqlTaskInput,
        NonSqlDataMigrationTable: NonSqlDataMigrationTable,
        NonSqlMigrationTaskInput: NonSqlMigrationTaskInput,
        DataMigrationError: DataMigrationError,
        NonSqlDataMigrationTableResult: NonSqlDataMigrationTableResult,
        NonSqlMigrationTaskOutput: NonSqlMigrationTaskOutput,
        DatabaseFileInput: DatabaseFileInput,
        MigrateSqlServerSqlServerDatabaseInput: MigrateSqlServerSqlServerDatabaseInput,
        ResourceSkusResult: ResourceSkusResult,
        ServiceSkuList: ServiceSkuList,
        DataMigrationServiceList: DataMigrationServiceList,
        TaskList: TaskList,
        ProjectList: ProjectList,
        QuotaList: QuotaList,
        ServiceOperationList: ServiceOperationList,
        FileList: FileList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        ODataError: ODataError,
        ResourceSku: ResourceSku,
        ResourceSkuCapabilities: ResourceSkuCapabilities,
        ResourceSkuCapacity: ResourceSkuCapacity,
        ResourceSkuCosts: ResourceSkuCosts,
        ResourceSkuRestrictions: ResourceSkuRestrictions,
        ResourceSkusResult: ResourceSkusResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var deleteRunningTasks = {
        parameterPath: [
            "options",
            "deleteRunningTasks"
        ],
        mapper: {
            serializedName: "deleteRunningTasks",
            type: {
                name: "Boolean"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var fileName = {
        parameterPath: "fileName",
        mapper: {
            required: true,
            serializedName: "fileName",
            type: {
                name: "String"
            }
        }
    };
    var groupName = {
        parameterPath: "groupName",
        mapper: {
            required: true,
            serializedName: "groupName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var projectName = {
        parameterPath: "projectName",
        mapper: {
            required: true,
            serializedName: "projectName",
            type: {
                name: "String"
            }
        }
    };
    var serviceName = {
        parameterPath: "serviceName",
        mapper: {
            required: true,
            serializedName: "serviceName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var taskName = {
        parameterPath: "taskName",
        mapper: {
            required: true,
            serializedName: "taskName",
            type: {
                name: "String"
            }
        }
    };
    var taskType = {
        parameterPath: [
            "options",
            "taskType"
        ],
        mapper: {
            serializedName: "taskType",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ResourceSkus. */
    var ResourceSkus = /** @class */ (function () {
        /**
         * Create a ResourceSkus.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function ResourceSkus(client) {
            this.client = client;
        }
        ResourceSkus.prototype.listSkus = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listSkusOperationSpec, callback);
        };
        ResourceSkus.prototype.listSkusNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSkusNextOperationSpec, callback);
        };
        return ResourceSkus;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listSkusOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };
    var listSkusNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ResourceSkusResult
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        AvailableServiceSku: AvailableServiceSku,
        AvailableServiceSkuCapacity: AvailableServiceSkuCapacity,
        AvailableServiceSkuSku: AvailableServiceSkuSku,
        AzureActiveDirectoryApp: AzureActiveDirectoryApp,
        BackupFileInfo: BackupFileInfo,
        BackupSetInfo: BackupSetInfo,
        BaseResource: BaseResource,
        BlobShare: BlobShare,
        CheckOCIDriverTaskInput: CheckOCIDriverTaskInput,
        CheckOCIDriverTaskOutput: CheckOCIDriverTaskOutput,
        CheckOCIDriverTaskProperties: CheckOCIDriverTaskProperties,
        CommandProperties: CommandProperties,
        ConnectionInfo: ConnectionInfo,
        ConnectToMongoDbTaskProperties: ConnectToMongoDbTaskProperties,
        ConnectToSourceMySqlTaskInput: ConnectToSourceMySqlTaskInput,
        ConnectToSourceMySqlTaskProperties: ConnectToSourceMySqlTaskProperties,
        ConnectToSourceNonSqlTaskOutput: ConnectToSourceNonSqlTaskOutput,
        ConnectToSourceOracleSyncTaskInput: ConnectToSourceOracleSyncTaskInput,
        ConnectToSourceOracleSyncTaskOutput: ConnectToSourceOracleSyncTaskOutput,
        ConnectToSourceOracleSyncTaskProperties: ConnectToSourceOracleSyncTaskProperties,
        ConnectToSourcePostgreSqlSyncTaskInput: ConnectToSourcePostgreSqlSyncTaskInput,
        ConnectToSourcePostgreSqlSyncTaskOutput: ConnectToSourcePostgreSqlSyncTaskOutput,
        ConnectToSourcePostgreSqlSyncTaskProperties: ConnectToSourcePostgreSqlSyncTaskProperties,
        ConnectToSourceSqlServerSyncTaskProperties: ConnectToSourceSqlServerSyncTaskProperties,
        ConnectToSourceSqlServerTaskInput: ConnectToSourceSqlServerTaskInput,
        ConnectToSourceSqlServerTaskOutput: ConnectToSourceSqlServerTaskOutput,
        ConnectToSourceSqlServerTaskOutputAgentJobLevel: ConnectToSourceSqlServerTaskOutputAgentJobLevel,
        ConnectToSourceSqlServerTaskOutputDatabaseLevel: ConnectToSourceSqlServerTaskOutputDatabaseLevel,
        ConnectToSourceSqlServerTaskOutputLoginLevel: ConnectToSourceSqlServerTaskOutputLoginLevel,
        ConnectToSourceSqlServerTaskOutputTaskLevel: ConnectToSourceSqlServerTaskOutputTaskLevel,
        ConnectToSourceSqlServerTaskProperties: ConnectToSourceSqlServerTaskProperties,
        ConnectToTargetAzureDbForMySqlTaskInput: ConnectToTargetAzureDbForMySqlTaskInput,
        ConnectToTargetAzureDbForMySqlTaskOutput: ConnectToTargetAzureDbForMySqlTaskOutput,
        ConnectToTargetAzureDbForMySqlTaskProperties: ConnectToTargetAzureDbForMySqlTaskProperties,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetSqlDbTaskInput: ConnectToTargetSqlDbTaskInput,
        ConnectToTargetSqlDbTaskOutput: ConnectToTargetSqlDbTaskOutput,
        ConnectToTargetSqlDbTaskProperties: ConnectToTargetSqlDbTaskProperties,
        ConnectToTargetSqlMISyncTaskInput: ConnectToTargetSqlMISyncTaskInput,
        ConnectToTargetSqlMISyncTaskOutput: ConnectToTargetSqlMISyncTaskOutput,
        ConnectToTargetSqlMISyncTaskProperties: ConnectToTargetSqlMISyncTaskProperties,
        ConnectToTargetSqlMITaskInput: ConnectToTargetSqlMITaskInput,
        ConnectToTargetSqlMITaskOutput: ConnectToTargetSqlMITaskOutput,
        ConnectToTargetSqlMITaskProperties: ConnectToTargetSqlMITaskProperties,
        ConnectToTargetSqlSqlDbSyncTaskInput: ConnectToTargetSqlSqlDbSyncTaskInput,
        ConnectToTargetSqlSqlDbSyncTaskProperties: ConnectToTargetSqlSqlDbSyncTaskProperties,
        DatabaseBackupInfo: DatabaseBackupInfo,
        DatabaseFileInfo: DatabaseFileInfo,
        DatabaseInfo: DatabaseInfo,
        DatabaseSummaryResult: DatabaseSummaryResult,
        DatabaseTable: DatabaseTable,
        DataItemMigrationSummaryResult: DataItemMigrationSummaryResult,
        DataMigrationService: DataMigrationService,
        DataMigrationServiceList: DataMigrationServiceList,
        DataMigrationServiceStatusResponse: DataMigrationServiceStatusResponse,
        FileShare: FileShare,
        GetTdeCertificatesSqlTaskInput: GetTdeCertificatesSqlTaskInput,
        GetTdeCertificatesSqlTaskOutput: GetTdeCertificatesSqlTaskOutput,
        GetTdeCertificatesSqlTaskProperties: GetTdeCertificatesSqlTaskProperties,
        GetUserTablesOracleTaskInput: GetUserTablesOracleTaskInput,
        GetUserTablesOracleTaskOutput: GetUserTablesOracleTaskOutput,
        GetUserTablesOracleTaskProperties: GetUserTablesOracleTaskProperties,
        GetUserTablesPostgreSqlTaskInput: GetUserTablesPostgreSqlTaskInput,
        GetUserTablesPostgreSqlTaskOutput: GetUserTablesPostgreSqlTaskOutput,
        GetUserTablesPostgreSqlTaskProperties: GetUserTablesPostgreSqlTaskProperties,
        GetUserTablesSqlSyncTaskInput: GetUserTablesSqlSyncTaskInput,
        GetUserTablesSqlSyncTaskOutput: GetUserTablesSqlSyncTaskOutput,
        GetUserTablesSqlSyncTaskProperties: GetUserTablesSqlSyncTaskProperties,
        GetUserTablesSqlTaskInput: GetUserTablesSqlTaskInput,
        GetUserTablesSqlTaskOutput: GetUserTablesSqlTaskOutput,
        GetUserTablesSqlTaskProperties: GetUserTablesSqlTaskProperties,
        InstallOCIDriverTaskInput: InstallOCIDriverTaskInput,
        InstallOCIDriverTaskOutput: InstallOCIDriverTaskOutput,
        InstallOCIDriverTaskProperties: InstallOCIDriverTaskProperties,
        MigrateMISyncCompleteCommandInput: MigrateMISyncCompleteCommandInput,
        MigrateMISyncCompleteCommandOutput: MigrateMISyncCompleteCommandOutput,
        MigrateMISyncCompleteCommandProperties: MigrateMISyncCompleteCommandProperties,
        MigrateMongoDbTaskProperties: MigrateMongoDbTaskProperties,
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput: MigrateMySqlAzureDbForMySqlSyncDatabaseInput,
        MigrateMySqlAzureDbForMySqlSyncTaskInput: MigrateMySqlAzureDbForMySqlSyncTaskInput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutput: MigrateMySqlAzureDbForMySqlSyncTaskOutput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputError: MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskProperties: MigrateMySqlAzureDbForMySqlSyncTaskProperties,
        MigrateOracleAzureDbForPostgreSqlSyncTaskProperties: MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
        MigrateOracleAzureDbPostgreSqlSyncDatabaseInput: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskInput: MigrateOracleAzureDbPostgreSqlSyncTaskInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutput: MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
        MigrateSchemaSqlServerSqlDbDatabaseInput: MigrateSchemaSqlServerSqlDbDatabaseInput,
        MigrateSchemaSqlServerSqlDbTaskInput: MigrateSchemaSqlServerSqlDbTaskInput,
        MigrateSchemaSqlServerSqlDbTaskOutput: MigrateSchemaSqlServerSqlDbTaskOutput,
        MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSchemaSqlServerSqlDbTaskOutputError: MigrateSchemaSqlServerSqlDbTaskOutputError,
        MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel: MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSchemaSqlServerSqlDbTaskProperties: MigrateSchemaSqlServerSqlDbTaskProperties,
        MigrateSchemaSqlTaskOutputError: MigrateSchemaSqlTaskOutputError,
        MigrateSqlServerSqlDbDatabaseInput: MigrateSqlServerSqlDbDatabaseInput,
        MigrateSqlServerSqlDbSyncDatabaseInput: MigrateSqlServerSqlDbSyncDatabaseInput,
        MigrateSqlServerSqlDbSyncTaskInput: MigrateSqlServerSqlDbSyncTaskInput,
        MigrateSqlServerSqlDbSyncTaskOutput: MigrateSqlServerSqlDbSyncTaskOutput,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseError: MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel: MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbSyncTaskOutputError: MigrateSqlServerSqlDbSyncTaskOutputError,
        MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel: MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbSyncTaskOutputTableLevel: MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
        MigrateSqlServerSqlDbSyncTaskProperties: MigrateSqlServerSqlDbSyncTaskProperties,
        MigrateSqlServerSqlDbTaskInput: MigrateSqlServerSqlDbTaskInput,
        MigrateSqlServerSqlDbTaskOutput: MigrateSqlServerSqlDbTaskOutput,
        MigrateSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbTaskOutputError: MigrateSqlServerSqlDbTaskOutputError,
        MigrateSqlServerSqlDbTaskOutputMigrationLevel: MigrateSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbTaskOutputTableLevel: MigrateSqlServerSqlDbTaskOutputTableLevel,
        MigrateSqlServerSqlDbTaskProperties: MigrateSqlServerSqlDbTaskProperties,
        MigrateSqlServerSqlMIDatabaseInput: MigrateSqlServerSqlMIDatabaseInput,
        MigrateSqlServerSqlMISyncTaskInput: MigrateSqlServerSqlMISyncTaskInput,
        MigrateSqlServerSqlMISyncTaskOutput: MigrateSqlServerSqlMISyncTaskOutput,
        MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel: MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlMISyncTaskOutputError: MigrateSqlServerSqlMISyncTaskOutputError,
        MigrateSqlServerSqlMISyncTaskOutputMigrationLevel: MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlMISyncTaskProperties: MigrateSqlServerSqlMISyncTaskProperties,
        MigrateSqlServerSqlMITaskInput: MigrateSqlServerSqlMITaskInput,
        MigrateSqlServerSqlMITaskOutput: MigrateSqlServerSqlMITaskOutput,
        MigrateSqlServerSqlMITaskOutputAgentJobLevel: MigrateSqlServerSqlMITaskOutputAgentJobLevel,
        MigrateSqlServerSqlMITaskOutputDatabaseLevel: MigrateSqlServerSqlMITaskOutputDatabaseLevel,
        MigrateSqlServerSqlMITaskOutputError: MigrateSqlServerSqlMITaskOutputError,
        MigrateSqlServerSqlMITaskOutputLoginLevel: MigrateSqlServerSqlMITaskOutputLoginLevel,
        MigrateSqlServerSqlMITaskOutputMigrationLevel: MigrateSqlServerSqlMITaskOutputMigrationLevel,
        MigrateSqlServerSqlMITaskProperties: MigrateSqlServerSqlMITaskProperties,
        MigrateSsisTaskInput: MigrateSsisTaskInput,
        MigrateSsisTaskOutput: MigrateSsisTaskOutput,
        MigrateSsisTaskOutputMigrationLevel: MigrateSsisTaskOutputMigrationLevel,
        MigrateSsisTaskOutputProjectLevel: MigrateSsisTaskOutputProjectLevel,
        MigrateSsisTaskProperties: MigrateSsisTaskProperties,
        MigrateSyncCompleteCommandInput: MigrateSyncCompleteCommandInput,
        MigrateSyncCompleteCommandOutput: MigrateSyncCompleteCommandOutput,
        MigrateSyncCompleteCommandProperties: MigrateSyncCompleteCommandProperties,
        MigrationEligibilityInfo: MigrationEligibilityInfo,
        MigrationReportResult: MigrationReportResult,
        MigrationValidationDatabaseSummaryResult: MigrationValidationDatabaseSummaryResult,
        MigrationValidationOptions: MigrationValidationOptions,
        MigrationValidationResult: MigrationValidationResult,
        MiSqlConnectionInfo: MiSqlConnectionInfo,
        MongoDbCancelCommand: MongoDbCancelCommand,
        MongoDbClusterInfo: MongoDbClusterInfo,
        MongoDbCollectionInfo: MongoDbCollectionInfo,
        MongoDbCollectionProgress: MongoDbCollectionProgress,
        MongoDbCollectionSettings: MongoDbCollectionSettings,
        MongoDbCommandInput: MongoDbCommandInput,
        MongoDbConnectionInfo: MongoDbConnectionInfo,
        MongoDbDatabaseInfo: MongoDbDatabaseInfo,
        MongoDbDatabaseProgress: MongoDbDatabaseProgress,
        MongoDbDatabaseSettings: MongoDbDatabaseSettings,
        MongoDbError: MongoDbError,
        MongoDbFinishCommand: MongoDbFinishCommand,
        MongoDbFinishCommandInput: MongoDbFinishCommandInput,
        MongoDbMigrationProgress: MongoDbMigrationProgress,
        MongoDbMigrationSettings: MongoDbMigrationSettings,
        MongoDbObjectInfo: MongoDbObjectInfo,
        MongoDbProgress: MongoDbProgress,
        MongoDbRestartCommand: MongoDbRestartCommand,
        MongoDbShardKeyField: MongoDbShardKeyField,
        MongoDbShardKeyInfo: MongoDbShardKeyInfo,
        MongoDbShardKeySetting: MongoDbShardKeySetting,
        MongoDbThrottlingSettings: MongoDbThrottlingSettings,
        MySqlConnectionInfo: MySqlConnectionInfo,
        NameAvailabilityRequest: NameAvailabilityRequest,
        NameAvailabilityResponse: NameAvailabilityResponse,
        ODataError: ODataError,
        OracleConnectionInfo: OracleConnectionInfo,
        OracleOCIDriverInfo: OracleOCIDriverInfo,
        OrphanedUserInfo: OrphanedUserInfo,
        PostgreSqlConnectionInfo: PostgreSqlConnectionInfo,
        Project: Project,
        ProjectFile: ProjectFile,
        ProjectFileProperties: ProjectFileProperties,
        ProjectTask: ProjectTask,
        ProjectTaskProperties: ProjectTaskProperties,
        ReportableException: ReportableException,
        Resource: Resource,
        SchemaMigrationSetting: SchemaMigrationSetting,
        SelectedCertificateInput: SelectedCertificateInput,
        ServerProperties: ServerProperties,
        ServiceSku: ServiceSku,
        ServiceSkuList: ServiceSkuList,
        SqlConnectionInfo: SqlConnectionInfo,
        SqlMigrationTaskInput: SqlMigrationTaskInput,
        SqlServerSqlMISyncTaskInput: SqlServerSqlMISyncTaskInput,
        SsisMigrationInfo: SsisMigrationInfo,
        StartMigrationScenarioServerRoleResult: StartMigrationScenarioServerRoleResult,
        SyncMigrationDatabaseErrorEvent: SyncMigrationDatabaseErrorEvent,
        TrackedResource: TrackedResource,
        UploadOCIDriverTaskInput: UploadOCIDriverTaskInput,
        UploadOCIDriverTaskOutput: UploadOCIDriverTaskOutput,
        UploadOCIDriverTaskProperties: UploadOCIDriverTaskProperties,
        ValidateMigrationInputSqlServerSqlDbSyncTaskProperties: ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMISyncTaskInput: ValidateMigrationInputSqlServerSqlMISyncTaskInput,
        ValidateMigrationInputSqlServerSqlMISyncTaskOutput: ValidateMigrationInputSqlServerSqlMISyncTaskOutput,
        ValidateMigrationInputSqlServerSqlMISyncTaskProperties: ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMITaskInput: ValidateMigrationInputSqlServerSqlMITaskInput,
        ValidateMigrationInputSqlServerSqlMITaskOutput: ValidateMigrationInputSqlServerSqlMITaskOutput,
        ValidateMigrationInputSqlServerSqlMITaskProperties: ValidateMigrationInputSqlServerSqlMITaskProperties,
        ValidateMongoDbTaskProperties: ValidateMongoDbTaskProperties,
        ValidateOracleAzureDbForPostgreSqlSyncTaskProperties: ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
        ValidateOracleAzureDbPostgreSqlSyncTaskOutput: ValidateOracleAzureDbPostgreSqlSyncTaskOutput,
        ValidateSyncMigrationInputSqlServerTaskInput: ValidateSyncMigrationInputSqlServerTaskInput,
        ValidateSyncMigrationInputSqlServerTaskOutput: ValidateSyncMigrationInputSqlServerTaskOutput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Services. */
    var Services = /** @class */ (function () {
        /**
         * Create a Services.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function Services(client) {
            this.client = client;
        }
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * The PUT method creates a new service or updates an existing one. When a service is updated,
         * existing child resources (i.e. tasks) are unaffected. Services currently support a single kind,
         * "vm", which refers to a VM-based service, although other kinds may be added in the future. This
         * method can change the kind, SKU, and network of the service, but if tasks are currently running
         * (i.e. the service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider
         * will reply when successful with 200 OK or 201 Created. Long-running operations use the
         * provisioningState property.
         * @summary Create or update DMS Instance
         * @param parameters Information about the service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<Models.ServicesCreateOrUpdateResponse>
         */
        Services.prototype.createOrUpdate = function (parameters, groupName, serviceName, options) {
            return this.beginCreateOrUpdate(parameters, groupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Services.prototype.get = function (groupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * The DELETE method deletes a service. Any running tasks will be canceled.
         * @summary Delete DMS Service Instance
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Services.prototype.deleteMethod = function (groupName, serviceName, options) {
            return this.beginDeleteMethod(groupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * The PATCH method updates an existing service. This method can change the kind, SKU, and network
         * of the service, but if tasks are currently running (i.e. the service is busy), this will fail
         * with 400 Bad Request ("ServiceIsBusy").
         * @summary Create or update DMS Service Instance
         * @param parameters Information about the service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<Models.ServicesUpdateResponse>
         */
        Services.prototype.update = function (parameters, groupName, serviceName, options) {
            return this.beginUpdate(parameters, groupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Services.prototype.checkStatus = function (groupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, checkStatusOperationSpec, callback);
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * This action starts the service and the service can be used for data migration.
         * @summary Start service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Services.prototype.start = function (groupName, serviceName, options) {
            return this.beginStart(groupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * This action stops the service and the service cannot be used for data migration. The service
         * owner won't be billed when the service is stopped.
         * @summary Stop service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Services.prototype.stop = function (groupName, serviceName, options) {
            return this.beginStop(groupName, serviceName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Services.prototype.listSkus = function (groupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, listSkusOperationSpec$1, callback);
        };
        Services.prototype.checkChildrenNameAvailability = function (groupName, serviceName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                parameters: parameters,
                options: options
            }, checkChildrenNameAvailabilityOperationSpec, callback);
        };
        Services.prototype.listByResourceGroup = function (groupName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Services.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Services.prototype.checkNameAvailability = function (location, parameters, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * The PUT method creates a new service or updates an existing one. When a service is updated,
         * existing child resources (i.e. tasks) are unaffected. Services currently support a single kind,
         * "vm", which refers to a VM-based service, although other kinds may be added in the future. This
         * method can change the kind, SKU, and network of the service, but if tasks are currently running
         * (i.e. the service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider
         * will reply when successful with 200 OK or 201 Created. Long-running operations use the
         * provisioningState property.
         * @summary Create or update DMS Instance
         * @param parameters Information about the service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginCreateOrUpdate = function (parameters, groupName, serviceName, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * The DELETE method deletes a service. Any running tasks will be canceled.
         * @summary Delete DMS Service Instance
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginDeleteMethod = function (groupName, serviceName, options) {
            return this.client.sendLRORequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * The PATCH method updates an existing service. This method can change the kind, SKU, and network
         * of the service, but if tasks are currently running (i.e. the service is busy), this will fail
         * with 400 Bad Request ("ServiceIsBusy").
         * @summary Create or update DMS Service Instance
         * @param parameters Information about the service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginUpdate = function (parameters, groupName, serviceName, options) {
            return this.client.sendLRORequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * This action starts the service and the service can be used for data migration.
         * @summary Start service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginStart = function (groupName, serviceName, options) {
            return this.client.sendLRORequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, beginStartOperationSpec, options);
        };
        /**
         * The services resource is the top-level resource that represents the Database Migration Service.
         * This action stops the service and the service cannot be used for data migration. The service
         * owner won't be billed when the service is stopped.
         * @summary Stop service
         * @param groupName Name of the resource group
         * @param serviceName Name of the service
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Services.prototype.beginStop = function (groupName, serviceName, options) {
            return this.client.sendLRORequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, beginStopOperationSpec, options);
        };
        Services.prototype.listSkusNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSkusNextOperationSpec$1, callback);
        };
        Services.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Services.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Services;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMigrationService
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var checkStatusOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkStatus",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMigrationServiceStatusResponse
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var listSkusOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/skus",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceSkuList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var checkChildrenNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkNameAvailability",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, NameAvailabilityRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameAvailabilityResponse
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services",
        urlParameters: [
            subscriptionId,
            groupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMigrationServiceList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/services",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMigrationServiceList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/checkNameAvailability",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, NameAvailabilityRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameAvailabilityResponse
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DataMigrationService), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataMigrationService
            },
            201: {
                bodyMapper: DataMigrationService
            },
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            deleteRunningTasks,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, DataMigrationService), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataMigrationService
            },
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var beginStartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/start",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var beginStopOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/stop",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var listSkusNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceSkuList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMigrationServiceList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataMigrationServiceList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        AzureActiveDirectoryApp: AzureActiveDirectoryApp,
        BackupFileInfo: BackupFileInfo,
        BackupSetInfo: BackupSetInfo,
        BaseResource: BaseResource,
        BlobShare: BlobShare,
        CheckOCIDriverTaskInput: CheckOCIDriverTaskInput,
        CheckOCIDriverTaskOutput: CheckOCIDriverTaskOutput,
        CheckOCIDriverTaskProperties: CheckOCIDriverTaskProperties,
        CommandProperties: CommandProperties,
        ConnectionInfo: ConnectionInfo,
        ConnectToMongoDbTaskProperties: ConnectToMongoDbTaskProperties,
        ConnectToSourceMySqlTaskInput: ConnectToSourceMySqlTaskInput,
        ConnectToSourceMySqlTaskProperties: ConnectToSourceMySqlTaskProperties,
        ConnectToSourceNonSqlTaskOutput: ConnectToSourceNonSqlTaskOutput,
        ConnectToSourceOracleSyncTaskInput: ConnectToSourceOracleSyncTaskInput,
        ConnectToSourceOracleSyncTaskOutput: ConnectToSourceOracleSyncTaskOutput,
        ConnectToSourceOracleSyncTaskProperties: ConnectToSourceOracleSyncTaskProperties,
        ConnectToSourcePostgreSqlSyncTaskInput: ConnectToSourcePostgreSqlSyncTaskInput,
        ConnectToSourcePostgreSqlSyncTaskOutput: ConnectToSourcePostgreSqlSyncTaskOutput,
        ConnectToSourcePostgreSqlSyncTaskProperties: ConnectToSourcePostgreSqlSyncTaskProperties,
        ConnectToSourceSqlServerSyncTaskProperties: ConnectToSourceSqlServerSyncTaskProperties,
        ConnectToSourceSqlServerTaskInput: ConnectToSourceSqlServerTaskInput,
        ConnectToSourceSqlServerTaskOutput: ConnectToSourceSqlServerTaskOutput,
        ConnectToSourceSqlServerTaskOutputAgentJobLevel: ConnectToSourceSqlServerTaskOutputAgentJobLevel,
        ConnectToSourceSqlServerTaskOutputDatabaseLevel: ConnectToSourceSqlServerTaskOutputDatabaseLevel,
        ConnectToSourceSqlServerTaskOutputLoginLevel: ConnectToSourceSqlServerTaskOutputLoginLevel,
        ConnectToSourceSqlServerTaskOutputTaskLevel: ConnectToSourceSqlServerTaskOutputTaskLevel,
        ConnectToSourceSqlServerTaskProperties: ConnectToSourceSqlServerTaskProperties,
        ConnectToTargetAzureDbForMySqlTaskInput: ConnectToTargetAzureDbForMySqlTaskInput,
        ConnectToTargetAzureDbForMySqlTaskOutput: ConnectToTargetAzureDbForMySqlTaskOutput,
        ConnectToTargetAzureDbForMySqlTaskProperties: ConnectToTargetAzureDbForMySqlTaskProperties,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetSqlDbTaskInput: ConnectToTargetSqlDbTaskInput,
        ConnectToTargetSqlDbTaskOutput: ConnectToTargetSqlDbTaskOutput,
        ConnectToTargetSqlDbTaskProperties: ConnectToTargetSqlDbTaskProperties,
        ConnectToTargetSqlMISyncTaskInput: ConnectToTargetSqlMISyncTaskInput,
        ConnectToTargetSqlMISyncTaskOutput: ConnectToTargetSqlMISyncTaskOutput,
        ConnectToTargetSqlMISyncTaskProperties: ConnectToTargetSqlMISyncTaskProperties,
        ConnectToTargetSqlMITaskInput: ConnectToTargetSqlMITaskInput,
        ConnectToTargetSqlMITaskOutput: ConnectToTargetSqlMITaskOutput,
        ConnectToTargetSqlMITaskProperties: ConnectToTargetSqlMITaskProperties,
        ConnectToTargetSqlSqlDbSyncTaskInput: ConnectToTargetSqlSqlDbSyncTaskInput,
        ConnectToTargetSqlSqlDbSyncTaskProperties: ConnectToTargetSqlSqlDbSyncTaskProperties,
        DatabaseBackupInfo: DatabaseBackupInfo,
        DatabaseFileInfo: DatabaseFileInfo,
        DatabaseInfo: DatabaseInfo,
        DatabaseSummaryResult: DatabaseSummaryResult,
        DatabaseTable: DatabaseTable,
        DataItemMigrationSummaryResult: DataItemMigrationSummaryResult,
        DataMigrationService: DataMigrationService,
        FileShare: FileShare,
        GetTdeCertificatesSqlTaskInput: GetTdeCertificatesSqlTaskInput,
        GetTdeCertificatesSqlTaskOutput: GetTdeCertificatesSqlTaskOutput,
        GetTdeCertificatesSqlTaskProperties: GetTdeCertificatesSqlTaskProperties,
        GetUserTablesOracleTaskInput: GetUserTablesOracleTaskInput,
        GetUserTablesOracleTaskOutput: GetUserTablesOracleTaskOutput,
        GetUserTablesOracleTaskProperties: GetUserTablesOracleTaskProperties,
        GetUserTablesPostgreSqlTaskInput: GetUserTablesPostgreSqlTaskInput,
        GetUserTablesPostgreSqlTaskOutput: GetUserTablesPostgreSqlTaskOutput,
        GetUserTablesPostgreSqlTaskProperties: GetUserTablesPostgreSqlTaskProperties,
        GetUserTablesSqlSyncTaskInput: GetUserTablesSqlSyncTaskInput,
        GetUserTablesSqlSyncTaskOutput: GetUserTablesSqlSyncTaskOutput,
        GetUserTablesSqlSyncTaskProperties: GetUserTablesSqlSyncTaskProperties,
        GetUserTablesSqlTaskInput: GetUserTablesSqlTaskInput,
        GetUserTablesSqlTaskOutput: GetUserTablesSqlTaskOutput,
        GetUserTablesSqlTaskProperties: GetUserTablesSqlTaskProperties,
        InstallOCIDriverTaskInput: InstallOCIDriverTaskInput,
        InstallOCIDriverTaskOutput: InstallOCIDriverTaskOutput,
        InstallOCIDriverTaskProperties: InstallOCIDriverTaskProperties,
        MigrateMISyncCompleteCommandInput: MigrateMISyncCompleteCommandInput,
        MigrateMISyncCompleteCommandOutput: MigrateMISyncCompleteCommandOutput,
        MigrateMISyncCompleteCommandProperties: MigrateMISyncCompleteCommandProperties,
        MigrateMongoDbTaskProperties: MigrateMongoDbTaskProperties,
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput: MigrateMySqlAzureDbForMySqlSyncDatabaseInput,
        MigrateMySqlAzureDbForMySqlSyncTaskInput: MigrateMySqlAzureDbForMySqlSyncTaskInput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutput: MigrateMySqlAzureDbForMySqlSyncTaskOutput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputError: MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskProperties: MigrateMySqlAzureDbForMySqlSyncTaskProperties,
        MigrateOracleAzureDbForPostgreSqlSyncTaskProperties: MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
        MigrateOracleAzureDbPostgreSqlSyncDatabaseInput: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskInput: MigrateOracleAzureDbPostgreSqlSyncTaskInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutput: MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
        MigrateSchemaSqlServerSqlDbDatabaseInput: MigrateSchemaSqlServerSqlDbDatabaseInput,
        MigrateSchemaSqlServerSqlDbTaskInput: MigrateSchemaSqlServerSqlDbTaskInput,
        MigrateSchemaSqlServerSqlDbTaskOutput: MigrateSchemaSqlServerSqlDbTaskOutput,
        MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSchemaSqlServerSqlDbTaskOutputError: MigrateSchemaSqlServerSqlDbTaskOutputError,
        MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel: MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSchemaSqlServerSqlDbTaskProperties: MigrateSchemaSqlServerSqlDbTaskProperties,
        MigrateSchemaSqlTaskOutputError: MigrateSchemaSqlTaskOutputError,
        MigrateSqlServerSqlDbDatabaseInput: MigrateSqlServerSqlDbDatabaseInput,
        MigrateSqlServerSqlDbSyncDatabaseInput: MigrateSqlServerSqlDbSyncDatabaseInput,
        MigrateSqlServerSqlDbSyncTaskInput: MigrateSqlServerSqlDbSyncTaskInput,
        MigrateSqlServerSqlDbSyncTaskOutput: MigrateSqlServerSqlDbSyncTaskOutput,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseError: MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel: MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbSyncTaskOutputError: MigrateSqlServerSqlDbSyncTaskOutputError,
        MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel: MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbSyncTaskOutputTableLevel: MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
        MigrateSqlServerSqlDbSyncTaskProperties: MigrateSqlServerSqlDbSyncTaskProperties,
        MigrateSqlServerSqlDbTaskInput: MigrateSqlServerSqlDbTaskInput,
        MigrateSqlServerSqlDbTaskOutput: MigrateSqlServerSqlDbTaskOutput,
        MigrateSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbTaskOutputError: MigrateSqlServerSqlDbTaskOutputError,
        MigrateSqlServerSqlDbTaskOutputMigrationLevel: MigrateSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbTaskOutputTableLevel: MigrateSqlServerSqlDbTaskOutputTableLevel,
        MigrateSqlServerSqlDbTaskProperties: MigrateSqlServerSqlDbTaskProperties,
        MigrateSqlServerSqlMIDatabaseInput: MigrateSqlServerSqlMIDatabaseInput,
        MigrateSqlServerSqlMISyncTaskInput: MigrateSqlServerSqlMISyncTaskInput,
        MigrateSqlServerSqlMISyncTaskOutput: MigrateSqlServerSqlMISyncTaskOutput,
        MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel: MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlMISyncTaskOutputError: MigrateSqlServerSqlMISyncTaskOutputError,
        MigrateSqlServerSqlMISyncTaskOutputMigrationLevel: MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlMISyncTaskProperties: MigrateSqlServerSqlMISyncTaskProperties,
        MigrateSqlServerSqlMITaskInput: MigrateSqlServerSqlMITaskInput,
        MigrateSqlServerSqlMITaskOutput: MigrateSqlServerSqlMITaskOutput,
        MigrateSqlServerSqlMITaskOutputAgentJobLevel: MigrateSqlServerSqlMITaskOutputAgentJobLevel,
        MigrateSqlServerSqlMITaskOutputDatabaseLevel: MigrateSqlServerSqlMITaskOutputDatabaseLevel,
        MigrateSqlServerSqlMITaskOutputError: MigrateSqlServerSqlMITaskOutputError,
        MigrateSqlServerSqlMITaskOutputLoginLevel: MigrateSqlServerSqlMITaskOutputLoginLevel,
        MigrateSqlServerSqlMITaskOutputMigrationLevel: MigrateSqlServerSqlMITaskOutputMigrationLevel,
        MigrateSqlServerSqlMITaskProperties: MigrateSqlServerSqlMITaskProperties,
        MigrateSsisTaskInput: MigrateSsisTaskInput,
        MigrateSsisTaskOutput: MigrateSsisTaskOutput,
        MigrateSsisTaskOutputMigrationLevel: MigrateSsisTaskOutputMigrationLevel,
        MigrateSsisTaskOutputProjectLevel: MigrateSsisTaskOutputProjectLevel,
        MigrateSsisTaskProperties: MigrateSsisTaskProperties,
        MigrateSyncCompleteCommandInput: MigrateSyncCompleteCommandInput,
        MigrateSyncCompleteCommandOutput: MigrateSyncCompleteCommandOutput,
        MigrateSyncCompleteCommandProperties: MigrateSyncCompleteCommandProperties,
        MigrationEligibilityInfo: MigrationEligibilityInfo,
        MigrationReportResult: MigrationReportResult,
        MigrationValidationDatabaseSummaryResult: MigrationValidationDatabaseSummaryResult,
        MigrationValidationOptions: MigrationValidationOptions,
        MigrationValidationResult: MigrationValidationResult,
        MiSqlConnectionInfo: MiSqlConnectionInfo,
        MongoDbCancelCommand: MongoDbCancelCommand,
        MongoDbClusterInfo: MongoDbClusterInfo,
        MongoDbCollectionInfo: MongoDbCollectionInfo,
        MongoDbCollectionProgress: MongoDbCollectionProgress,
        MongoDbCollectionSettings: MongoDbCollectionSettings,
        MongoDbCommandInput: MongoDbCommandInput,
        MongoDbConnectionInfo: MongoDbConnectionInfo,
        MongoDbDatabaseInfo: MongoDbDatabaseInfo,
        MongoDbDatabaseProgress: MongoDbDatabaseProgress,
        MongoDbDatabaseSettings: MongoDbDatabaseSettings,
        MongoDbError: MongoDbError,
        MongoDbFinishCommand: MongoDbFinishCommand,
        MongoDbFinishCommandInput: MongoDbFinishCommandInput,
        MongoDbMigrationProgress: MongoDbMigrationProgress,
        MongoDbMigrationSettings: MongoDbMigrationSettings,
        MongoDbObjectInfo: MongoDbObjectInfo,
        MongoDbProgress: MongoDbProgress,
        MongoDbRestartCommand: MongoDbRestartCommand,
        MongoDbShardKeyField: MongoDbShardKeyField,
        MongoDbShardKeyInfo: MongoDbShardKeyInfo,
        MongoDbShardKeySetting: MongoDbShardKeySetting,
        MongoDbThrottlingSettings: MongoDbThrottlingSettings,
        MySqlConnectionInfo: MySqlConnectionInfo,
        ODataError: ODataError,
        OracleConnectionInfo: OracleConnectionInfo,
        OracleOCIDriverInfo: OracleOCIDriverInfo,
        OrphanedUserInfo: OrphanedUserInfo,
        PostgreSqlConnectionInfo: PostgreSqlConnectionInfo,
        Project: Project,
        ProjectFile: ProjectFile,
        ProjectFileProperties: ProjectFileProperties,
        ProjectTask: ProjectTask,
        ProjectTaskProperties: ProjectTaskProperties,
        ReportableException: ReportableException,
        Resource: Resource,
        SchemaMigrationSetting: SchemaMigrationSetting,
        SelectedCertificateInput: SelectedCertificateInput,
        ServerProperties: ServerProperties,
        ServiceSku: ServiceSku,
        SqlConnectionInfo: SqlConnectionInfo,
        SqlMigrationTaskInput: SqlMigrationTaskInput,
        SqlServerSqlMISyncTaskInput: SqlServerSqlMISyncTaskInput,
        SsisMigrationInfo: SsisMigrationInfo,
        StartMigrationScenarioServerRoleResult: StartMigrationScenarioServerRoleResult,
        SyncMigrationDatabaseErrorEvent: SyncMigrationDatabaseErrorEvent,
        TaskList: TaskList,
        TrackedResource: TrackedResource,
        UploadOCIDriverTaskInput: UploadOCIDriverTaskInput,
        UploadOCIDriverTaskOutput: UploadOCIDriverTaskOutput,
        UploadOCIDriverTaskProperties: UploadOCIDriverTaskProperties,
        ValidateMigrationInputSqlServerSqlDbSyncTaskProperties: ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMISyncTaskInput: ValidateMigrationInputSqlServerSqlMISyncTaskInput,
        ValidateMigrationInputSqlServerSqlMISyncTaskOutput: ValidateMigrationInputSqlServerSqlMISyncTaskOutput,
        ValidateMigrationInputSqlServerSqlMISyncTaskProperties: ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMITaskInput: ValidateMigrationInputSqlServerSqlMITaskInput,
        ValidateMigrationInputSqlServerSqlMITaskOutput: ValidateMigrationInputSqlServerSqlMITaskOutput,
        ValidateMigrationInputSqlServerSqlMITaskProperties: ValidateMigrationInputSqlServerSqlMITaskProperties,
        ValidateMongoDbTaskProperties: ValidateMongoDbTaskProperties,
        ValidateOracleAzureDbForPostgreSqlSyncTaskProperties: ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
        ValidateOracleAzureDbPostgreSqlSyncTaskOutput: ValidateOracleAzureDbPostgreSqlSyncTaskOutput,
        ValidateSyncMigrationInputSqlServerTaskInput: ValidateSyncMigrationInputSqlServerTaskInput,
        ValidateSyncMigrationInputSqlServerTaskOutput: ValidateSyncMigrationInputSqlServerTaskOutput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Tasks. */
    var Tasks = /** @class */ (function () {
        /**
         * Create a Tasks.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function Tasks(client) {
            this.client = client;
        }
        Tasks.prototype.list = function (groupName, serviceName, projectName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                options: options
            }, listOperationSpec$1, callback);
        };
        Tasks.prototype.createOrUpdate = function (parameters, groupName, serviceName, projectName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                taskName: taskName,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        Tasks.prototype.get = function (groupName, serviceName, projectName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                taskName: taskName,
                options: options
            }, getOperationSpec$1, callback);
        };
        Tasks.prototype.deleteMethod = function (groupName, serviceName, projectName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                taskName: taskName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Tasks.prototype.update = function (parameters, groupName, serviceName, projectName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                taskName: taskName,
                options: options
            }, updateOperationSpec, callback);
        };
        Tasks.prototype.cancel = function (groupName, serviceName, projectName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                taskName: taskName,
                options: options
            }, cancelOperationSpec, callback);
        };
        Tasks.prototype.command = function (groupName, serviceName, projectName, taskName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                taskName: taskName,
                parameters: parameters,
                options: options
            }, commandOperationSpec, callback);
        };
        Tasks.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Tasks;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName
        ],
        queryParameters: [
            apiVersion,
            taskType
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TaskList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            taskName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProjectTask), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            201: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            taskName
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            taskName
        ],
        queryParameters: [
            deleteRunningTasks,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            taskName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProjectTask), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/cancel",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            taskName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var commandOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/command",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            taskName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CommandProperties), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CommandProperties
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TaskList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        AzureActiveDirectoryApp: AzureActiveDirectoryApp,
        BackupFileInfo: BackupFileInfo,
        BackupSetInfo: BackupSetInfo,
        BaseResource: BaseResource,
        BlobShare: BlobShare,
        CheckOCIDriverTaskInput: CheckOCIDriverTaskInput,
        CheckOCIDriverTaskOutput: CheckOCIDriverTaskOutput,
        CheckOCIDriverTaskProperties: CheckOCIDriverTaskProperties,
        CommandProperties: CommandProperties,
        ConnectionInfo: ConnectionInfo,
        ConnectToMongoDbTaskProperties: ConnectToMongoDbTaskProperties,
        ConnectToSourceMySqlTaskInput: ConnectToSourceMySqlTaskInput,
        ConnectToSourceMySqlTaskProperties: ConnectToSourceMySqlTaskProperties,
        ConnectToSourceNonSqlTaskOutput: ConnectToSourceNonSqlTaskOutput,
        ConnectToSourceOracleSyncTaskInput: ConnectToSourceOracleSyncTaskInput,
        ConnectToSourceOracleSyncTaskOutput: ConnectToSourceOracleSyncTaskOutput,
        ConnectToSourceOracleSyncTaskProperties: ConnectToSourceOracleSyncTaskProperties,
        ConnectToSourcePostgreSqlSyncTaskInput: ConnectToSourcePostgreSqlSyncTaskInput,
        ConnectToSourcePostgreSqlSyncTaskOutput: ConnectToSourcePostgreSqlSyncTaskOutput,
        ConnectToSourcePostgreSqlSyncTaskProperties: ConnectToSourcePostgreSqlSyncTaskProperties,
        ConnectToSourceSqlServerSyncTaskProperties: ConnectToSourceSqlServerSyncTaskProperties,
        ConnectToSourceSqlServerTaskInput: ConnectToSourceSqlServerTaskInput,
        ConnectToSourceSqlServerTaskOutput: ConnectToSourceSqlServerTaskOutput,
        ConnectToSourceSqlServerTaskOutputAgentJobLevel: ConnectToSourceSqlServerTaskOutputAgentJobLevel,
        ConnectToSourceSqlServerTaskOutputDatabaseLevel: ConnectToSourceSqlServerTaskOutputDatabaseLevel,
        ConnectToSourceSqlServerTaskOutputLoginLevel: ConnectToSourceSqlServerTaskOutputLoginLevel,
        ConnectToSourceSqlServerTaskOutputTaskLevel: ConnectToSourceSqlServerTaskOutputTaskLevel,
        ConnectToSourceSqlServerTaskProperties: ConnectToSourceSqlServerTaskProperties,
        ConnectToTargetAzureDbForMySqlTaskInput: ConnectToTargetAzureDbForMySqlTaskInput,
        ConnectToTargetAzureDbForMySqlTaskOutput: ConnectToTargetAzureDbForMySqlTaskOutput,
        ConnectToTargetAzureDbForMySqlTaskProperties: ConnectToTargetAzureDbForMySqlTaskProperties,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetSqlDbTaskInput: ConnectToTargetSqlDbTaskInput,
        ConnectToTargetSqlDbTaskOutput: ConnectToTargetSqlDbTaskOutput,
        ConnectToTargetSqlDbTaskProperties: ConnectToTargetSqlDbTaskProperties,
        ConnectToTargetSqlMISyncTaskInput: ConnectToTargetSqlMISyncTaskInput,
        ConnectToTargetSqlMISyncTaskOutput: ConnectToTargetSqlMISyncTaskOutput,
        ConnectToTargetSqlMISyncTaskProperties: ConnectToTargetSqlMISyncTaskProperties,
        ConnectToTargetSqlMITaskInput: ConnectToTargetSqlMITaskInput,
        ConnectToTargetSqlMITaskOutput: ConnectToTargetSqlMITaskOutput,
        ConnectToTargetSqlMITaskProperties: ConnectToTargetSqlMITaskProperties,
        ConnectToTargetSqlSqlDbSyncTaskInput: ConnectToTargetSqlSqlDbSyncTaskInput,
        ConnectToTargetSqlSqlDbSyncTaskProperties: ConnectToTargetSqlSqlDbSyncTaskProperties,
        DatabaseBackupInfo: DatabaseBackupInfo,
        DatabaseFileInfo: DatabaseFileInfo,
        DatabaseInfo: DatabaseInfo,
        DatabaseSummaryResult: DatabaseSummaryResult,
        DatabaseTable: DatabaseTable,
        DataItemMigrationSummaryResult: DataItemMigrationSummaryResult,
        DataMigrationService: DataMigrationService,
        FileShare: FileShare,
        GetTdeCertificatesSqlTaskInput: GetTdeCertificatesSqlTaskInput,
        GetTdeCertificatesSqlTaskOutput: GetTdeCertificatesSqlTaskOutput,
        GetTdeCertificatesSqlTaskProperties: GetTdeCertificatesSqlTaskProperties,
        GetUserTablesOracleTaskInput: GetUserTablesOracleTaskInput,
        GetUserTablesOracleTaskOutput: GetUserTablesOracleTaskOutput,
        GetUserTablesOracleTaskProperties: GetUserTablesOracleTaskProperties,
        GetUserTablesPostgreSqlTaskInput: GetUserTablesPostgreSqlTaskInput,
        GetUserTablesPostgreSqlTaskOutput: GetUserTablesPostgreSqlTaskOutput,
        GetUserTablesPostgreSqlTaskProperties: GetUserTablesPostgreSqlTaskProperties,
        GetUserTablesSqlSyncTaskInput: GetUserTablesSqlSyncTaskInput,
        GetUserTablesSqlSyncTaskOutput: GetUserTablesSqlSyncTaskOutput,
        GetUserTablesSqlSyncTaskProperties: GetUserTablesSqlSyncTaskProperties,
        GetUserTablesSqlTaskInput: GetUserTablesSqlTaskInput,
        GetUserTablesSqlTaskOutput: GetUserTablesSqlTaskOutput,
        GetUserTablesSqlTaskProperties: GetUserTablesSqlTaskProperties,
        InstallOCIDriverTaskInput: InstallOCIDriverTaskInput,
        InstallOCIDriverTaskOutput: InstallOCIDriverTaskOutput,
        InstallOCIDriverTaskProperties: InstallOCIDriverTaskProperties,
        MigrateMISyncCompleteCommandInput: MigrateMISyncCompleteCommandInput,
        MigrateMISyncCompleteCommandOutput: MigrateMISyncCompleteCommandOutput,
        MigrateMISyncCompleteCommandProperties: MigrateMISyncCompleteCommandProperties,
        MigrateMongoDbTaskProperties: MigrateMongoDbTaskProperties,
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput: MigrateMySqlAzureDbForMySqlSyncDatabaseInput,
        MigrateMySqlAzureDbForMySqlSyncTaskInput: MigrateMySqlAzureDbForMySqlSyncTaskInput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutput: MigrateMySqlAzureDbForMySqlSyncTaskOutput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputError: MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskProperties: MigrateMySqlAzureDbForMySqlSyncTaskProperties,
        MigrateOracleAzureDbForPostgreSqlSyncTaskProperties: MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
        MigrateOracleAzureDbPostgreSqlSyncDatabaseInput: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskInput: MigrateOracleAzureDbPostgreSqlSyncTaskInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutput: MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
        MigrateSchemaSqlServerSqlDbDatabaseInput: MigrateSchemaSqlServerSqlDbDatabaseInput,
        MigrateSchemaSqlServerSqlDbTaskInput: MigrateSchemaSqlServerSqlDbTaskInput,
        MigrateSchemaSqlServerSqlDbTaskOutput: MigrateSchemaSqlServerSqlDbTaskOutput,
        MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSchemaSqlServerSqlDbTaskOutputError: MigrateSchemaSqlServerSqlDbTaskOutputError,
        MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel: MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSchemaSqlServerSqlDbTaskProperties: MigrateSchemaSqlServerSqlDbTaskProperties,
        MigrateSchemaSqlTaskOutputError: MigrateSchemaSqlTaskOutputError,
        MigrateSqlServerSqlDbDatabaseInput: MigrateSqlServerSqlDbDatabaseInput,
        MigrateSqlServerSqlDbSyncDatabaseInput: MigrateSqlServerSqlDbSyncDatabaseInput,
        MigrateSqlServerSqlDbSyncTaskInput: MigrateSqlServerSqlDbSyncTaskInput,
        MigrateSqlServerSqlDbSyncTaskOutput: MigrateSqlServerSqlDbSyncTaskOutput,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseError: MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel: MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbSyncTaskOutputError: MigrateSqlServerSqlDbSyncTaskOutputError,
        MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel: MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbSyncTaskOutputTableLevel: MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
        MigrateSqlServerSqlDbSyncTaskProperties: MigrateSqlServerSqlDbSyncTaskProperties,
        MigrateSqlServerSqlDbTaskInput: MigrateSqlServerSqlDbTaskInput,
        MigrateSqlServerSqlDbTaskOutput: MigrateSqlServerSqlDbTaskOutput,
        MigrateSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbTaskOutputError: MigrateSqlServerSqlDbTaskOutputError,
        MigrateSqlServerSqlDbTaskOutputMigrationLevel: MigrateSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbTaskOutputTableLevel: MigrateSqlServerSqlDbTaskOutputTableLevel,
        MigrateSqlServerSqlDbTaskProperties: MigrateSqlServerSqlDbTaskProperties,
        MigrateSqlServerSqlMIDatabaseInput: MigrateSqlServerSqlMIDatabaseInput,
        MigrateSqlServerSqlMISyncTaskInput: MigrateSqlServerSqlMISyncTaskInput,
        MigrateSqlServerSqlMISyncTaskOutput: MigrateSqlServerSqlMISyncTaskOutput,
        MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel: MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlMISyncTaskOutputError: MigrateSqlServerSqlMISyncTaskOutputError,
        MigrateSqlServerSqlMISyncTaskOutputMigrationLevel: MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlMISyncTaskProperties: MigrateSqlServerSqlMISyncTaskProperties,
        MigrateSqlServerSqlMITaskInput: MigrateSqlServerSqlMITaskInput,
        MigrateSqlServerSqlMITaskOutput: MigrateSqlServerSqlMITaskOutput,
        MigrateSqlServerSqlMITaskOutputAgentJobLevel: MigrateSqlServerSqlMITaskOutputAgentJobLevel,
        MigrateSqlServerSqlMITaskOutputDatabaseLevel: MigrateSqlServerSqlMITaskOutputDatabaseLevel,
        MigrateSqlServerSqlMITaskOutputError: MigrateSqlServerSqlMITaskOutputError,
        MigrateSqlServerSqlMITaskOutputLoginLevel: MigrateSqlServerSqlMITaskOutputLoginLevel,
        MigrateSqlServerSqlMITaskOutputMigrationLevel: MigrateSqlServerSqlMITaskOutputMigrationLevel,
        MigrateSqlServerSqlMITaskProperties: MigrateSqlServerSqlMITaskProperties,
        MigrateSsisTaskInput: MigrateSsisTaskInput,
        MigrateSsisTaskOutput: MigrateSsisTaskOutput,
        MigrateSsisTaskOutputMigrationLevel: MigrateSsisTaskOutputMigrationLevel,
        MigrateSsisTaskOutputProjectLevel: MigrateSsisTaskOutputProjectLevel,
        MigrateSsisTaskProperties: MigrateSsisTaskProperties,
        MigrateSyncCompleteCommandInput: MigrateSyncCompleteCommandInput,
        MigrateSyncCompleteCommandOutput: MigrateSyncCompleteCommandOutput,
        MigrateSyncCompleteCommandProperties: MigrateSyncCompleteCommandProperties,
        MigrationEligibilityInfo: MigrationEligibilityInfo,
        MigrationReportResult: MigrationReportResult,
        MigrationValidationDatabaseSummaryResult: MigrationValidationDatabaseSummaryResult,
        MigrationValidationOptions: MigrationValidationOptions,
        MigrationValidationResult: MigrationValidationResult,
        MiSqlConnectionInfo: MiSqlConnectionInfo,
        MongoDbCancelCommand: MongoDbCancelCommand,
        MongoDbClusterInfo: MongoDbClusterInfo,
        MongoDbCollectionInfo: MongoDbCollectionInfo,
        MongoDbCollectionProgress: MongoDbCollectionProgress,
        MongoDbCollectionSettings: MongoDbCollectionSettings,
        MongoDbCommandInput: MongoDbCommandInput,
        MongoDbConnectionInfo: MongoDbConnectionInfo,
        MongoDbDatabaseInfo: MongoDbDatabaseInfo,
        MongoDbDatabaseProgress: MongoDbDatabaseProgress,
        MongoDbDatabaseSettings: MongoDbDatabaseSettings,
        MongoDbError: MongoDbError,
        MongoDbFinishCommand: MongoDbFinishCommand,
        MongoDbFinishCommandInput: MongoDbFinishCommandInput,
        MongoDbMigrationProgress: MongoDbMigrationProgress,
        MongoDbMigrationSettings: MongoDbMigrationSettings,
        MongoDbObjectInfo: MongoDbObjectInfo,
        MongoDbProgress: MongoDbProgress,
        MongoDbRestartCommand: MongoDbRestartCommand,
        MongoDbShardKeyField: MongoDbShardKeyField,
        MongoDbShardKeyInfo: MongoDbShardKeyInfo,
        MongoDbShardKeySetting: MongoDbShardKeySetting,
        MongoDbThrottlingSettings: MongoDbThrottlingSettings,
        MySqlConnectionInfo: MySqlConnectionInfo,
        ODataError: ODataError,
        OracleConnectionInfo: OracleConnectionInfo,
        OracleOCIDriverInfo: OracleOCIDriverInfo,
        OrphanedUserInfo: OrphanedUserInfo,
        PostgreSqlConnectionInfo: PostgreSqlConnectionInfo,
        Project: Project,
        ProjectFile: ProjectFile,
        ProjectFileProperties: ProjectFileProperties,
        ProjectTask: ProjectTask,
        ProjectTaskProperties: ProjectTaskProperties,
        ReportableException: ReportableException,
        Resource: Resource,
        SchemaMigrationSetting: SchemaMigrationSetting,
        SelectedCertificateInput: SelectedCertificateInput,
        ServerProperties: ServerProperties,
        ServiceSku: ServiceSku,
        SqlConnectionInfo: SqlConnectionInfo,
        SqlMigrationTaskInput: SqlMigrationTaskInput,
        SqlServerSqlMISyncTaskInput: SqlServerSqlMISyncTaskInput,
        SsisMigrationInfo: SsisMigrationInfo,
        StartMigrationScenarioServerRoleResult: StartMigrationScenarioServerRoleResult,
        SyncMigrationDatabaseErrorEvent: SyncMigrationDatabaseErrorEvent,
        TaskList: TaskList,
        TrackedResource: TrackedResource,
        UploadOCIDriverTaskInput: UploadOCIDriverTaskInput,
        UploadOCIDriverTaskOutput: UploadOCIDriverTaskOutput,
        UploadOCIDriverTaskProperties: UploadOCIDriverTaskProperties,
        ValidateMigrationInputSqlServerSqlDbSyncTaskProperties: ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMISyncTaskInput: ValidateMigrationInputSqlServerSqlMISyncTaskInput,
        ValidateMigrationInputSqlServerSqlMISyncTaskOutput: ValidateMigrationInputSqlServerSqlMISyncTaskOutput,
        ValidateMigrationInputSqlServerSqlMISyncTaskProperties: ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMITaskInput: ValidateMigrationInputSqlServerSqlMITaskInput,
        ValidateMigrationInputSqlServerSqlMITaskOutput: ValidateMigrationInputSqlServerSqlMITaskOutput,
        ValidateMigrationInputSqlServerSqlMITaskProperties: ValidateMigrationInputSqlServerSqlMITaskProperties,
        ValidateMongoDbTaskProperties: ValidateMongoDbTaskProperties,
        ValidateOracleAzureDbForPostgreSqlSyncTaskProperties: ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
        ValidateOracleAzureDbPostgreSqlSyncTaskOutput: ValidateOracleAzureDbPostgreSqlSyncTaskOutput,
        ValidateSyncMigrationInputSqlServerTaskInput: ValidateSyncMigrationInputSqlServerTaskInput,
        ValidateSyncMigrationInputSqlServerTaskOutput: ValidateSyncMigrationInputSqlServerTaskOutput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceTasks. */
    var ServiceTasks = /** @class */ (function () {
        /**
         * Create a ServiceTasks.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function ServiceTasks(client) {
            this.client = client;
        }
        ServiceTasks.prototype.list = function (groupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, listOperationSpec$2, callback);
        };
        ServiceTasks.prototype.createOrUpdate = function (parameters, groupName, serviceName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                taskName: taskName,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        ServiceTasks.prototype.get = function (groupName, serviceName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                taskName: taskName,
                options: options
            }, getOperationSpec$2, callback);
        };
        ServiceTasks.prototype.deleteMethod = function (groupName, serviceName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                taskName: taskName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        ServiceTasks.prototype.update = function (parameters, groupName, serviceName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                taskName: taskName,
                options: options
            }, updateOperationSpec$1, callback);
        };
        ServiceTasks.prototype.cancel = function (groupName, serviceName, taskName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                taskName: taskName,
                options: options
            }, cancelOperationSpec$1, callback);
        };
        ServiceTasks.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return ServiceTasks;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion,
            taskType
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TaskList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            taskName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProjectTask), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            201: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            taskName
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            taskName
        ],
        queryParameters: [
            deleteRunningTasks,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            taskName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProjectTask), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };
    var cancelOperationSpec$1 = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}/cancel",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            taskName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectTask
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: TaskList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        AzureActiveDirectoryApp: AzureActiveDirectoryApp,
        BackupFileInfo: BackupFileInfo,
        BackupSetInfo: BackupSetInfo,
        BaseResource: BaseResource,
        BlobShare: BlobShare,
        CheckOCIDriverTaskInput: CheckOCIDriverTaskInput,
        CheckOCIDriverTaskOutput: CheckOCIDriverTaskOutput,
        CheckOCIDriverTaskProperties: CheckOCIDriverTaskProperties,
        CommandProperties: CommandProperties,
        ConnectionInfo: ConnectionInfo,
        ConnectToMongoDbTaskProperties: ConnectToMongoDbTaskProperties,
        ConnectToSourceMySqlTaskInput: ConnectToSourceMySqlTaskInput,
        ConnectToSourceMySqlTaskProperties: ConnectToSourceMySqlTaskProperties,
        ConnectToSourceNonSqlTaskOutput: ConnectToSourceNonSqlTaskOutput,
        ConnectToSourceOracleSyncTaskInput: ConnectToSourceOracleSyncTaskInput,
        ConnectToSourceOracleSyncTaskOutput: ConnectToSourceOracleSyncTaskOutput,
        ConnectToSourceOracleSyncTaskProperties: ConnectToSourceOracleSyncTaskProperties,
        ConnectToSourcePostgreSqlSyncTaskInput: ConnectToSourcePostgreSqlSyncTaskInput,
        ConnectToSourcePostgreSqlSyncTaskOutput: ConnectToSourcePostgreSqlSyncTaskOutput,
        ConnectToSourcePostgreSqlSyncTaskProperties: ConnectToSourcePostgreSqlSyncTaskProperties,
        ConnectToSourceSqlServerSyncTaskProperties: ConnectToSourceSqlServerSyncTaskProperties,
        ConnectToSourceSqlServerTaskInput: ConnectToSourceSqlServerTaskInput,
        ConnectToSourceSqlServerTaskOutput: ConnectToSourceSqlServerTaskOutput,
        ConnectToSourceSqlServerTaskOutputAgentJobLevel: ConnectToSourceSqlServerTaskOutputAgentJobLevel,
        ConnectToSourceSqlServerTaskOutputDatabaseLevel: ConnectToSourceSqlServerTaskOutputDatabaseLevel,
        ConnectToSourceSqlServerTaskOutputLoginLevel: ConnectToSourceSqlServerTaskOutputLoginLevel,
        ConnectToSourceSqlServerTaskOutputTaskLevel: ConnectToSourceSqlServerTaskOutputTaskLevel,
        ConnectToSourceSqlServerTaskProperties: ConnectToSourceSqlServerTaskProperties,
        ConnectToTargetAzureDbForMySqlTaskInput: ConnectToTargetAzureDbForMySqlTaskInput,
        ConnectToTargetAzureDbForMySqlTaskOutput: ConnectToTargetAzureDbForMySqlTaskOutput,
        ConnectToTargetAzureDbForMySqlTaskProperties: ConnectToTargetAzureDbForMySqlTaskProperties,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetSqlDbTaskInput: ConnectToTargetSqlDbTaskInput,
        ConnectToTargetSqlDbTaskOutput: ConnectToTargetSqlDbTaskOutput,
        ConnectToTargetSqlDbTaskProperties: ConnectToTargetSqlDbTaskProperties,
        ConnectToTargetSqlMISyncTaskInput: ConnectToTargetSqlMISyncTaskInput,
        ConnectToTargetSqlMISyncTaskOutput: ConnectToTargetSqlMISyncTaskOutput,
        ConnectToTargetSqlMISyncTaskProperties: ConnectToTargetSqlMISyncTaskProperties,
        ConnectToTargetSqlMITaskInput: ConnectToTargetSqlMITaskInput,
        ConnectToTargetSqlMITaskOutput: ConnectToTargetSqlMITaskOutput,
        ConnectToTargetSqlMITaskProperties: ConnectToTargetSqlMITaskProperties,
        ConnectToTargetSqlSqlDbSyncTaskInput: ConnectToTargetSqlSqlDbSyncTaskInput,
        ConnectToTargetSqlSqlDbSyncTaskProperties: ConnectToTargetSqlSqlDbSyncTaskProperties,
        DatabaseBackupInfo: DatabaseBackupInfo,
        DatabaseFileInfo: DatabaseFileInfo,
        DatabaseInfo: DatabaseInfo,
        DatabaseSummaryResult: DatabaseSummaryResult,
        DatabaseTable: DatabaseTable,
        DataItemMigrationSummaryResult: DataItemMigrationSummaryResult,
        DataMigrationService: DataMigrationService,
        FileShare: FileShare,
        GetTdeCertificatesSqlTaskInput: GetTdeCertificatesSqlTaskInput,
        GetTdeCertificatesSqlTaskOutput: GetTdeCertificatesSqlTaskOutput,
        GetTdeCertificatesSqlTaskProperties: GetTdeCertificatesSqlTaskProperties,
        GetUserTablesOracleTaskInput: GetUserTablesOracleTaskInput,
        GetUserTablesOracleTaskOutput: GetUserTablesOracleTaskOutput,
        GetUserTablesOracleTaskProperties: GetUserTablesOracleTaskProperties,
        GetUserTablesPostgreSqlTaskInput: GetUserTablesPostgreSqlTaskInput,
        GetUserTablesPostgreSqlTaskOutput: GetUserTablesPostgreSqlTaskOutput,
        GetUserTablesPostgreSqlTaskProperties: GetUserTablesPostgreSqlTaskProperties,
        GetUserTablesSqlSyncTaskInput: GetUserTablesSqlSyncTaskInput,
        GetUserTablesSqlSyncTaskOutput: GetUserTablesSqlSyncTaskOutput,
        GetUserTablesSqlSyncTaskProperties: GetUserTablesSqlSyncTaskProperties,
        GetUserTablesSqlTaskInput: GetUserTablesSqlTaskInput,
        GetUserTablesSqlTaskOutput: GetUserTablesSqlTaskOutput,
        GetUserTablesSqlTaskProperties: GetUserTablesSqlTaskProperties,
        InstallOCIDriverTaskInput: InstallOCIDriverTaskInput,
        InstallOCIDriverTaskOutput: InstallOCIDriverTaskOutput,
        InstallOCIDriverTaskProperties: InstallOCIDriverTaskProperties,
        MigrateMISyncCompleteCommandInput: MigrateMISyncCompleteCommandInput,
        MigrateMISyncCompleteCommandOutput: MigrateMISyncCompleteCommandOutput,
        MigrateMISyncCompleteCommandProperties: MigrateMISyncCompleteCommandProperties,
        MigrateMongoDbTaskProperties: MigrateMongoDbTaskProperties,
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput: MigrateMySqlAzureDbForMySqlSyncDatabaseInput,
        MigrateMySqlAzureDbForMySqlSyncTaskInput: MigrateMySqlAzureDbForMySqlSyncTaskInput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutput: MigrateMySqlAzureDbForMySqlSyncTaskOutput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputError: MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskProperties: MigrateMySqlAzureDbForMySqlSyncTaskProperties,
        MigrateOracleAzureDbForPostgreSqlSyncTaskProperties: MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
        MigrateOracleAzureDbPostgreSqlSyncDatabaseInput: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskInput: MigrateOracleAzureDbPostgreSqlSyncTaskInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutput: MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
        MigrateSchemaSqlServerSqlDbDatabaseInput: MigrateSchemaSqlServerSqlDbDatabaseInput,
        MigrateSchemaSqlServerSqlDbTaskInput: MigrateSchemaSqlServerSqlDbTaskInput,
        MigrateSchemaSqlServerSqlDbTaskOutput: MigrateSchemaSqlServerSqlDbTaskOutput,
        MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSchemaSqlServerSqlDbTaskOutputError: MigrateSchemaSqlServerSqlDbTaskOutputError,
        MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel: MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSchemaSqlServerSqlDbTaskProperties: MigrateSchemaSqlServerSqlDbTaskProperties,
        MigrateSchemaSqlTaskOutputError: MigrateSchemaSqlTaskOutputError,
        MigrateSqlServerSqlDbDatabaseInput: MigrateSqlServerSqlDbDatabaseInput,
        MigrateSqlServerSqlDbSyncDatabaseInput: MigrateSqlServerSqlDbSyncDatabaseInput,
        MigrateSqlServerSqlDbSyncTaskInput: MigrateSqlServerSqlDbSyncTaskInput,
        MigrateSqlServerSqlDbSyncTaskOutput: MigrateSqlServerSqlDbSyncTaskOutput,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseError: MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel: MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbSyncTaskOutputError: MigrateSqlServerSqlDbSyncTaskOutputError,
        MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel: MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbSyncTaskOutputTableLevel: MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
        MigrateSqlServerSqlDbSyncTaskProperties: MigrateSqlServerSqlDbSyncTaskProperties,
        MigrateSqlServerSqlDbTaskInput: MigrateSqlServerSqlDbTaskInput,
        MigrateSqlServerSqlDbTaskOutput: MigrateSqlServerSqlDbTaskOutput,
        MigrateSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbTaskOutputError: MigrateSqlServerSqlDbTaskOutputError,
        MigrateSqlServerSqlDbTaskOutputMigrationLevel: MigrateSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbTaskOutputTableLevel: MigrateSqlServerSqlDbTaskOutputTableLevel,
        MigrateSqlServerSqlDbTaskProperties: MigrateSqlServerSqlDbTaskProperties,
        MigrateSqlServerSqlMIDatabaseInput: MigrateSqlServerSqlMIDatabaseInput,
        MigrateSqlServerSqlMISyncTaskInput: MigrateSqlServerSqlMISyncTaskInput,
        MigrateSqlServerSqlMISyncTaskOutput: MigrateSqlServerSqlMISyncTaskOutput,
        MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel: MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlMISyncTaskOutputError: MigrateSqlServerSqlMISyncTaskOutputError,
        MigrateSqlServerSqlMISyncTaskOutputMigrationLevel: MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlMISyncTaskProperties: MigrateSqlServerSqlMISyncTaskProperties,
        MigrateSqlServerSqlMITaskInput: MigrateSqlServerSqlMITaskInput,
        MigrateSqlServerSqlMITaskOutput: MigrateSqlServerSqlMITaskOutput,
        MigrateSqlServerSqlMITaskOutputAgentJobLevel: MigrateSqlServerSqlMITaskOutputAgentJobLevel,
        MigrateSqlServerSqlMITaskOutputDatabaseLevel: MigrateSqlServerSqlMITaskOutputDatabaseLevel,
        MigrateSqlServerSqlMITaskOutputError: MigrateSqlServerSqlMITaskOutputError,
        MigrateSqlServerSqlMITaskOutputLoginLevel: MigrateSqlServerSqlMITaskOutputLoginLevel,
        MigrateSqlServerSqlMITaskOutputMigrationLevel: MigrateSqlServerSqlMITaskOutputMigrationLevel,
        MigrateSqlServerSqlMITaskProperties: MigrateSqlServerSqlMITaskProperties,
        MigrateSsisTaskInput: MigrateSsisTaskInput,
        MigrateSsisTaskOutput: MigrateSsisTaskOutput,
        MigrateSsisTaskOutputMigrationLevel: MigrateSsisTaskOutputMigrationLevel,
        MigrateSsisTaskOutputProjectLevel: MigrateSsisTaskOutputProjectLevel,
        MigrateSsisTaskProperties: MigrateSsisTaskProperties,
        MigrateSyncCompleteCommandInput: MigrateSyncCompleteCommandInput,
        MigrateSyncCompleteCommandOutput: MigrateSyncCompleteCommandOutput,
        MigrateSyncCompleteCommandProperties: MigrateSyncCompleteCommandProperties,
        MigrationEligibilityInfo: MigrationEligibilityInfo,
        MigrationReportResult: MigrationReportResult,
        MigrationValidationDatabaseSummaryResult: MigrationValidationDatabaseSummaryResult,
        MigrationValidationOptions: MigrationValidationOptions,
        MigrationValidationResult: MigrationValidationResult,
        MiSqlConnectionInfo: MiSqlConnectionInfo,
        MongoDbCancelCommand: MongoDbCancelCommand,
        MongoDbClusterInfo: MongoDbClusterInfo,
        MongoDbCollectionInfo: MongoDbCollectionInfo,
        MongoDbCollectionProgress: MongoDbCollectionProgress,
        MongoDbCollectionSettings: MongoDbCollectionSettings,
        MongoDbCommandInput: MongoDbCommandInput,
        MongoDbConnectionInfo: MongoDbConnectionInfo,
        MongoDbDatabaseInfo: MongoDbDatabaseInfo,
        MongoDbDatabaseProgress: MongoDbDatabaseProgress,
        MongoDbDatabaseSettings: MongoDbDatabaseSettings,
        MongoDbError: MongoDbError,
        MongoDbFinishCommand: MongoDbFinishCommand,
        MongoDbFinishCommandInput: MongoDbFinishCommandInput,
        MongoDbMigrationProgress: MongoDbMigrationProgress,
        MongoDbMigrationSettings: MongoDbMigrationSettings,
        MongoDbObjectInfo: MongoDbObjectInfo,
        MongoDbProgress: MongoDbProgress,
        MongoDbRestartCommand: MongoDbRestartCommand,
        MongoDbShardKeyField: MongoDbShardKeyField,
        MongoDbShardKeyInfo: MongoDbShardKeyInfo,
        MongoDbShardKeySetting: MongoDbShardKeySetting,
        MongoDbThrottlingSettings: MongoDbThrottlingSettings,
        MySqlConnectionInfo: MySqlConnectionInfo,
        ODataError: ODataError,
        OracleConnectionInfo: OracleConnectionInfo,
        OracleOCIDriverInfo: OracleOCIDriverInfo,
        OrphanedUserInfo: OrphanedUserInfo,
        PostgreSqlConnectionInfo: PostgreSqlConnectionInfo,
        Project: Project,
        ProjectFile: ProjectFile,
        ProjectFileProperties: ProjectFileProperties,
        ProjectList: ProjectList,
        ProjectTask: ProjectTask,
        ProjectTaskProperties: ProjectTaskProperties,
        ReportableException: ReportableException,
        Resource: Resource,
        SchemaMigrationSetting: SchemaMigrationSetting,
        SelectedCertificateInput: SelectedCertificateInput,
        ServerProperties: ServerProperties,
        ServiceSku: ServiceSku,
        SqlConnectionInfo: SqlConnectionInfo,
        SqlMigrationTaskInput: SqlMigrationTaskInput,
        SqlServerSqlMISyncTaskInput: SqlServerSqlMISyncTaskInput,
        SsisMigrationInfo: SsisMigrationInfo,
        StartMigrationScenarioServerRoleResult: StartMigrationScenarioServerRoleResult,
        SyncMigrationDatabaseErrorEvent: SyncMigrationDatabaseErrorEvent,
        TrackedResource: TrackedResource,
        UploadOCIDriverTaskInput: UploadOCIDriverTaskInput,
        UploadOCIDriverTaskOutput: UploadOCIDriverTaskOutput,
        UploadOCIDriverTaskProperties: UploadOCIDriverTaskProperties,
        ValidateMigrationInputSqlServerSqlDbSyncTaskProperties: ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMISyncTaskInput: ValidateMigrationInputSqlServerSqlMISyncTaskInput,
        ValidateMigrationInputSqlServerSqlMISyncTaskOutput: ValidateMigrationInputSqlServerSqlMISyncTaskOutput,
        ValidateMigrationInputSqlServerSqlMISyncTaskProperties: ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMITaskInput: ValidateMigrationInputSqlServerSqlMITaskInput,
        ValidateMigrationInputSqlServerSqlMITaskOutput: ValidateMigrationInputSqlServerSqlMITaskOutput,
        ValidateMigrationInputSqlServerSqlMITaskProperties: ValidateMigrationInputSqlServerSqlMITaskProperties,
        ValidateMongoDbTaskProperties: ValidateMongoDbTaskProperties,
        ValidateOracleAzureDbForPostgreSqlSyncTaskProperties: ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
        ValidateOracleAzureDbPostgreSqlSyncTaskOutput: ValidateOracleAzureDbPostgreSqlSyncTaskOutput,
        ValidateSyncMigrationInputSqlServerTaskInput: ValidateSyncMigrationInputSqlServerTaskInput,
        ValidateSyncMigrationInputSqlServerTaskOutput: ValidateSyncMigrationInputSqlServerTaskOutput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Projects. */
    var Projects = /** @class */ (function () {
        /**
         * Create a Projects.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function Projects(client) {
            this.client = client;
        }
        Projects.prototype.list = function (groupName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                options: options
            }, listOperationSpec$3, callback);
        };
        Projects.prototype.createOrUpdate = function (parameters, groupName, serviceName, projectName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        Projects.prototype.get = function (groupName, serviceName, projectName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                options: options
            }, getOperationSpec$3, callback);
        };
        Projects.prototype.deleteMethod = function (groupName, serviceName, projectName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Projects.prototype.update = function (parameters, groupName, serviceName, projectName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                options: options
            }, updateOperationSpec$2, callback);
        };
        Projects.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return Projects;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Project), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Project
            },
            201: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName
        ],
        queryParameters: [
            deleteRunningTasks,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, Project), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        ODataError: ODataError,
        Quota: Quota,
        QuotaList: QuotaList,
        QuotaName: QuotaName
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Usages. */
    var Usages = /** @class */ (function () {
        /**
         * Create a Usages.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function Usages(client) {
            this.client = client;
        }
        Usages.prototype.list = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, listOperationSpec$4, callback);
        };
        Usages.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$4, callback);
        };
        return Usages;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/usages",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: QuotaList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };
    var listNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: QuotaList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        ODataError: ODataError,
        ServiceOperation: ServiceOperation,
        ServiceOperationDisplay: ServiceOperationDisplay,
        ServiceOperationList: ServiceOperationList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$5, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$5, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DataMigration/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceOperationList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };
    var listNextOperationSpec$5 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceOperationList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiError: ApiError,
        AzureActiveDirectoryApp: AzureActiveDirectoryApp,
        BackupFileInfo: BackupFileInfo,
        BackupSetInfo: BackupSetInfo,
        BaseResource: BaseResource,
        BlobShare: BlobShare,
        CheckOCIDriverTaskInput: CheckOCIDriverTaskInput,
        CheckOCIDriverTaskOutput: CheckOCIDriverTaskOutput,
        CheckOCIDriverTaskProperties: CheckOCIDriverTaskProperties,
        CommandProperties: CommandProperties,
        ConnectionInfo: ConnectionInfo,
        ConnectToMongoDbTaskProperties: ConnectToMongoDbTaskProperties,
        ConnectToSourceMySqlTaskInput: ConnectToSourceMySqlTaskInput,
        ConnectToSourceMySqlTaskProperties: ConnectToSourceMySqlTaskProperties,
        ConnectToSourceNonSqlTaskOutput: ConnectToSourceNonSqlTaskOutput,
        ConnectToSourceOracleSyncTaskInput: ConnectToSourceOracleSyncTaskInput,
        ConnectToSourceOracleSyncTaskOutput: ConnectToSourceOracleSyncTaskOutput,
        ConnectToSourceOracleSyncTaskProperties: ConnectToSourceOracleSyncTaskProperties,
        ConnectToSourcePostgreSqlSyncTaskInput: ConnectToSourcePostgreSqlSyncTaskInput,
        ConnectToSourcePostgreSqlSyncTaskOutput: ConnectToSourcePostgreSqlSyncTaskOutput,
        ConnectToSourcePostgreSqlSyncTaskProperties: ConnectToSourcePostgreSqlSyncTaskProperties,
        ConnectToSourceSqlServerSyncTaskProperties: ConnectToSourceSqlServerSyncTaskProperties,
        ConnectToSourceSqlServerTaskInput: ConnectToSourceSqlServerTaskInput,
        ConnectToSourceSqlServerTaskOutput: ConnectToSourceSqlServerTaskOutput,
        ConnectToSourceSqlServerTaskOutputAgentJobLevel: ConnectToSourceSqlServerTaskOutputAgentJobLevel,
        ConnectToSourceSqlServerTaskOutputDatabaseLevel: ConnectToSourceSqlServerTaskOutputDatabaseLevel,
        ConnectToSourceSqlServerTaskOutputLoginLevel: ConnectToSourceSqlServerTaskOutputLoginLevel,
        ConnectToSourceSqlServerTaskOutputTaskLevel: ConnectToSourceSqlServerTaskOutputTaskLevel,
        ConnectToSourceSqlServerTaskProperties: ConnectToSourceSqlServerTaskProperties,
        ConnectToTargetAzureDbForMySqlTaskInput: ConnectToTargetAzureDbForMySqlTaskInput,
        ConnectToTargetAzureDbForMySqlTaskOutput: ConnectToTargetAzureDbForMySqlTaskOutput,
        ConnectToTargetAzureDbForMySqlTaskProperties: ConnectToTargetAzureDbForMySqlTaskProperties,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem,
        ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties,
        ConnectToTargetSqlDbTaskInput: ConnectToTargetSqlDbTaskInput,
        ConnectToTargetSqlDbTaskOutput: ConnectToTargetSqlDbTaskOutput,
        ConnectToTargetSqlDbTaskProperties: ConnectToTargetSqlDbTaskProperties,
        ConnectToTargetSqlMISyncTaskInput: ConnectToTargetSqlMISyncTaskInput,
        ConnectToTargetSqlMISyncTaskOutput: ConnectToTargetSqlMISyncTaskOutput,
        ConnectToTargetSqlMISyncTaskProperties: ConnectToTargetSqlMISyncTaskProperties,
        ConnectToTargetSqlMITaskInput: ConnectToTargetSqlMITaskInput,
        ConnectToTargetSqlMITaskOutput: ConnectToTargetSqlMITaskOutput,
        ConnectToTargetSqlMITaskProperties: ConnectToTargetSqlMITaskProperties,
        ConnectToTargetSqlSqlDbSyncTaskInput: ConnectToTargetSqlSqlDbSyncTaskInput,
        ConnectToTargetSqlSqlDbSyncTaskProperties: ConnectToTargetSqlSqlDbSyncTaskProperties,
        DatabaseBackupInfo: DatabaseBackupInfo,
        DatabaseFileInfo: DatabaseFileInfo,
        DatabaseInfo: DatabaseInfo,
        DatabaseSummaryResult: DatabaseSummaryResult,
        DatabaseTable: DatabaseTable,
        DataItemMigrationSummaryResult: DataItemMigrationSummaryResult,
        DataMigrationService: DataMigrationService,
        FileList: FileList,
        FileShare: FileShare,
        FileStorageInfo: FileStorageInfo,
        GetTdeCertificatesSqlTaskInput: GetTdeCertificatesSqlTaskInput,
        GetTdeCertificatesSqlTaskOutput: GetTdeCertificatesSqlTaskOutput,
        GetTdeCertificatesSqlTaskProperties: GetTdeCertificatesSqlTaskProperties,
        GetUserTablesOracleTaskInput: GetUserTablesOracleTaskInput,
        GetUserTablesOracleTaskOutput: GetUserTablesOracleTaskOutput,
        GetUserTablesOracleTaskProperties: GetUserTablesOracleTaskProperties,
        GetUserTablesPostgreSqlTaskInput: GetUserTablesPostgreSqlTaskInput,
        GetUserTablesPostgreSqlTaskOutput: GetUserTablesPostgreSqlTaskOutput,
        GetUserTablesPostgreSqlTaskProperties: GetUserTablesPostgreSqlTaskProperties,
        GetUserTablesSqlSyncTaskInput: GetUserTablesSqlSyncTaskInput,
        GetUserTablesSqlSyncTaskOutput: GetUserTablesSqlSyncTaskOutput,
        GetUserTablesSqlSyncTaskProperties: GetUserTablesSqlSyncTaskProperties,
        GetUserTablesSqlTaskInput: GetUserTablesSqlTaskInput,
        GetUserTablesSqlTaskOutput: GetUserTablesSqlTaskOutput,
        GetUserTablesSqlTaskProperties: GetUserTablesSqlTaskProperties,
        InstallOCIDriverTaskInput: InstallOCIDriverTaskInput,
        InstallOCIDriverTaskOutput: InstallOCIDriverTaskOutput,
        InstallOCIDriverTaskProperties: InstallOCIDriverTaskProperties,
        MigrateMISyncCompleteCommandInput: MigrateMISyncCompleteCommandInput,
        MigrateMISyncCompleteCommandOutput: MigrateMISyncCompleteCommandOutput,
        MigrateMISyncCompleteCommandProperties: MigrateMISyncCompleteCommandProperties,
        MigrateMongoDbTaskProperties: MigrateMongoDbTaskProperties,
        MigrateMySqlAzureDbForMySqlSyncDatabaseInput: MigrateMySqlAzureDbForMySqlSyncDatabaseInput,
        MigrateMySqlAzureDbForMySqlSyncTaskInput: MigrateMySqlAzureDbForMySqlSyncTaskInput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutput: MigrateMySqlAzureDbForMySqlSyncTaskOutput,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputError: MigrateMySqlAzureDbForMySqlSyncTaskOutputError,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel: MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel,
        MigrateMySqlAzureDbForMySqlSyncTaskProperties: MigrateMySqlAzureDbForMySqlSyncTaskProperties,
        MigrateOracleAzureDbForPostgreSqlSyncTaskProperties: MigrateOracleAzureDbForPostgreSqlSyncTaskProperties,
        MigrateOracleAzureDbPostgreSqlSyncDatabaseInput: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskInput: MigrateOracleAzureDbPostgreSqlSyncTaskInput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutput: MigrateOracleAzureDbPostgreSqlSyncTaskOutput,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputError: MigrateOracleAzureDbPostgreSqlSyncTaskOutputError,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel,
        MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel: MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel,
        MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties,
        MigrateSchemaSqlServerSqlDbDatabaseInput: MigrateSchemaSqlServerSqlDbDatabaseInput,
        MigrateSchemaSqlServerSqlDbTaskInput: MigrateSchemaSqlServerSqlDbTaskInput,
        MigrateSchemaSqlServerSqlDbTaskOutput: MigrateSchemaSqlServerSqlDbTaskOutput,
        MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSchemaSqlServerSqlDbTaskOutputError: MigrateSchemaSqlServerSqlDbTaskOutputError,
        MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel: MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSchemaSqlServerSqlDbTaskProperties: MigrateSchemaSqlServerSqlDbTaskProperties,
        MigrateSchemaSqlTaskOutputError: MigrateSchemaSqlTaskOutputError,
        MigrateSqlServerSqlDbDatabaseInput: MigrateSqlServerSqlDbDatabaseInput,
        MigrateSqlServerSqlDbSyncDatabaseInput: MigrateSqlServerSqlDbSyncDatabaseInput,
        MigrateSqlServerSqlDbSyncTaskInput: MigrateSqlServerSqlDbSyncTaskInput,
        MigrateSqlServerSqlDbSyncTaskOutput: MigrateSqlServerSqlDbSyncTaskOutput,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseError: MigrateSqlServerSqlDbSyncTaskOutputDatabaseError,
        MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel: MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbSyncTaskOutputError: MigrateSqlServerSqlDbSyncTaskOutputError,
        MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel: MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbSyncTaskOutputTableLevel: MigrateSqlServerSqlDbSyncTaskOutputTableLevel,
        MigrateSqlServerSqlDbSyncTaskProperties: MigrateSqlServerSqlDbSyncTaskProperties,
        MigrateSqlServerSqlDbTaskInput: MigrateSqlServerSqlDbTaskInput,
        MigrateSqlServerSqlDbTaskOutput: MigrateSqlServerSqlDbTaskOutput,
        MigrateSqlServerSqlDbTaskOutputDatabaseLevel: MigrateSqlServerSqlDbTaskOutputDatabaseLevel,
        MigrateSqlServerSqlDbTaskOutputError: MigrateSqlServerSqlDbTaskOutputError,
        MigrateSqlServerSqlDbTaskOutputMigrationLevel: MigrateSqlServerSqlDbTaskOutputMigrationLevel,
        MigrateSqlServerSqlDbTaskOutputTableLevel: MigrateSqlServerSqlDbTaskOutputTableLevel,
        MigrateSqlServerSqlDbTaskProperties: MigrateSqlServerSqlDbTaskProperties,
        MigrateSqlServerSqlMIDatabaseInput: MigrateSqlServerSqlMIDatabaseInput,
        MigrateSqlServerSqlMISyncTaskInput: MigrateSqlServerSqlMISyncTaskInput,
        MigrateSqlServerSqlMISyncTaskOutput: MigrateSqlServerSqlMISyncTaskOutput,
        MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel: MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel,
        MigrateSqlServerSqlMISyncTaskOutputError: MigrateSqlServerSqlMISyncTaskOutputError,
        MigrateSqlServerSqlMISyncTaskOutputMigrationLevel: MigrateSqlServerSqlMISyncTaskOutputMigrationLevel,
        MigrateSqlServerSqlMISyncTaskProperties: MigrateSqlServerSqlMISyncTaskProperties,
        MigrateSqlServerSqlMITaskInput: MigrateSqlServerSqlMITaskInput,
        MigrateSqlServerSqlMITaskOutput: MigrateSqlServerSqlMITaskOutput,
        MigrateSqlServerSqlMITaskOutputAgentJobLevel: MigrateSqlServerSqlMITaskOutputAgentJobLevel,
        MigrateSqlServerSqlMITaskOutputDatabaseLevel: MigrateSqlServerSqlMITaskOutputDatabaseLevel,
        MigrateSqlServerSqlMITaskOutputError: MigrateSqlServerSqlMITaskOutputError,
        MigrateSqlServerSqlMITaskOutputLoginLevel: MigrateSqlServerSqlMITaskOutputLoginLevel,
        MigrateSqlServerSqlMITaskOutputMigrationLevel: MigrateSqlServerSqlMITaskOutputMigrationLevel,
        MigrateSqlServerSqlMITaskProperties: MigrateSqlServerSqlMITaskProperties,
        MigrateSsisTaskInput: MigrateSsisTaskInput,
        MigrateSsisTaskOutput: MigrateSsisTaskOutput,
        MigrateSsisTaskOutputMigrationLevel: MigrateSsisTaskOutputMigrationLevel,
        MigrateSsisTaskOutputProjectLevel: MigrateSsisTaskOutputProjectLevel,
        MigrateSsisTaskProperties: MigrateSsisTaskProperties,
        MigrateSyncCompleteCommandInput: MigrateSyncCompleteCommandInput,
        MigrateSyncCompleteCommandOutput: MigrateSyncCompleteCommandOutput,
        MigrateSyncCompleteCommandProperties: MigrateSyncCompleteCommandProperties,
        MigrationEligibilityInfo: MigrationEligibilityInfo,
        MigrationReportResult: MigrationReportResult,
        MigrationValidationDatabaseSummaryResult: MigrationValidationDatabaseSummaryResult,
        MigrationValidationOptions: MigrationValidationOptions,
        MigrationValidationResult: MigrationValidationResult,
        MiSqlConnectionInfo: MiSqlConnectionInfo,
        MongoDbCancelCommand: MongoDbCancelCommand,
        MongoDbClusterInfo: MongoDbClusterInfo,
        MongoDbCollectionInfo: MongoDbCollectionInfo,
        MongoDbCollectionProgress: MongoDbCollectionProgress,
        MongoDbCollectionSettings: MongoDbCollectionSettings,
        MongoDbCommandInput: MongoDbCommandInput,
        MongoDbConnectionInfo: MongoDbConnectionInfo,
        MongoDbDatabaseInfo: MongoDbDatabaseInfo,
        MongoDbDatabaseProgress: MongoDbDatabaseProgress,
        MongoDbDatabaseSettings: MongoDbDatabaseSettings,
        MongoDbError: MongoDbError,
        MongoDbFinishCommand: MongoDbFinishCommand,
        MongoDbFinishCommandInput: MongoDbFinishCommandInput,
        MongoDbMigrationProgress: MongoDbMigrationProgress,
        MongoDbMigrationSettings: MongoDbMigrationSettings,
        MongoDbObjectInfo: MongoDbObjectInfo,
        MongoDbProgress: MongoDbProgress,
        MongoDbRestartCommand: MongoDbRestartCommand,
        MongoDbShardKeyField: MongoDbShardKeyField,
        MongoDbShardKeyInfo: MongoDbShardKeyInfo,
        MongoDbShardKeySetting: MongoDbShardKeySetting,
        MongoDbThrottlingSettings: MongoDbThrottlingSettings,
        MySqlConnectionInfo: MySqlConnectionInfo,
        ODataError: ODataError,
        OracleConnectionInfo: OracleConnectionInfo,
        OracleOCIDriverInfo: OracleOCIDriverInfo,
        OrphanedUserInfo: OrphanedUserInfo,
        PostgreSqlConnectionInfo: PostgreSqlConnectionInfo,
        Project: Project,
        ProjectFile: ProjectFile,
        ProjectFileProperties: ProjectFileProperties,
        ProjectTask: ProjectTask,
        ProjectTaskProperties: ProjectTaskProperties,
        ReportableException: ReportableException,
        Resource: Resource,
        SchemaMigrationSetting: SchemaMigrationSetting,
        SelectedCertificateInput: SelectedCertificateInput,
        ServerProperties: ServerProperties,
        ServiceSku: ServiceSku,
        SqlConnectionInfo: SqlConnectionInfo,
        SqlMigrationTaskInput: SqlMigrationTaskInput,
        SqlServerSqlMISyncTaskInput: SqlServerSqlMISyncTaskInput,
        SsisMigrationInfo: SsisMigrationInfo,
        StartMigrationScenarioServerRoleResult: StartMigrationScenarioServerRoleResult,
        SyncMigrationDatabaseErrorEvent: SyncMigrationDatabaseErrorEvent,
        TrackedResource: TrackedResource,
        UploadOCIDriverTaskInput: UploadOCIDriverTaskInput,
        UploadOCIDriverTaskOutput: UploadOCIDriverTaskOutput,
        UploadOCIDriverTaskProperties: UploadOCIDriverTaskProperties,
        ValidateMigrationInputSqlServerSqlDbSyncTaskProperties: ValidateMigrationInputSqlServerSqlDbSyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMISyncTaskInput: ValidateMigrationInputSqlServerSqlMISyncTaskInput,
        ValidateMigrationInputSqlServerSqlMISyncTaskOutput: ValidateMigrationInputSqlServerSqlMISyncTaskOutput,
        ValidateMigrationInputSqlServerSqlMISyncTaskProperties: ValidateMigrationInputSqlServerSqlMISyncTaskProperties,
        ValidateMigrationInputSqlServerSqlMITaskInput: ValidateMigrationInputSqlServerSqlMITaskInput,
        ValidateMigrationInputSqlServerSqlMITaskOutput: ValidateMigrationInputSqlServerSqlMITaskOutput,
        ValidateMigrationInputSqlServerSqlMITaskProperties: ValidateMigrationInputSqlServerSqlMITaskProperties,
        ValidateMongoDbTaskProperties: ValidateMongoDbTaskProperties,
        ValidateOracleAzureDbForPostgreSqlSyncTaskProperties: ValidateOracleAzureDbForPostgreSqlSyncTaskProperties,
        ValidateOracleAzureDbPostgreSqlSyncTaskOutput: ValidateOracleAzureDbPostgreSqlSyncTaskOutput,
        ValidateSyncMigrationInputSqlServerTaskInput: ValidateSyncMigrationInputSqlServerTaskInput,
        ValidateSyncMigrationInputSqlServerTaskOutput: ValidateSyncMigrationInputSqlServerTaskOutput
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Files. */
    var Files = /** @class */ (function () {
        /**
         * Create a Files.
         * @param {DataMigrationServiceClientContext} client Reference to the service client.
         */
        function Files(client) {
            this.client = client;
        }
        Files.prototype.list = function (groupName, serviceName, projectName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                options: options
            }, listOperationSpec$6, callback);
        };
        Files.prototype.get = function (groupName, serviceName, projectName, fileName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                fileName: fileName,
                options: options
            }, getOperationSpec$4, callback);
        };
        Files.prototype.createOrUpdate = function (parameters, groupName, serviceName, projectName, fileName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                fileName: fileName,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        Files.prototype.deleteMethod = function (groupName, serviceName, projectName, fileName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                fileName: fileName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        Files.prototype.update = function (parameters, groupName, serviceName, projectName, fileName, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                fileName: fileName,
                options: options
            }, updateOperationSpec$3, callback);
        };
        Files.prototype.read = function (groupName, serviceName, projectName, fileName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                fileName: fileName,
                options: options
            }, readOperationSpec, callback);
        };
        Files.prototype.readWrite = function (groupName, serviceName, projectName, fileName, options, callback) {
            return this.client.sendOperationRequest({
                groupName: groupName,
                serviceName: serviceName,
                projectName: projectName,
                fileName: fileName,
                options: options
            }, readWriteOperationSpec, callback);
        };
        Files.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$6, callback);
        };
        return Files;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            fileName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ProjectFile
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            fileName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProjectFile), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectFile
            },
            201: {
                bodyMapper: ProjectFile
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            fileName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var updateOperationSpec$3 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            fileName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, ProjectFile), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ProjectFile
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var readOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}/read",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            fileName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileStorageInfo
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var readWriteOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/files/{fileName}/readwrite",
        urlParameters: [
            subscriptionId,
            groupName,
            serviceName,
            projectName,
            fileName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileStorageInfo
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$6 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FileList
            },
            default: {
                bodyMapper: ApiError
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-datamigration";
    var packageVersion = "2.1.1";
    var DataMigrationServiceClientContext = /** @class */ (function (_super) {
        __extends(DataMigrationServiceClientContext, _super);
        /**
         * Initializes a new instance of the DataMigrationServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Identifier of the subscription
         * @param [options] The parameter options
         */
        function DataMigrationServiceClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-07-15-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DataMigrationServiceClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DataMigrationServiceClient = /** @class */ (function (_super) {
        __extends(DataMigrationServiceClient, _super);
        /**
         * Initializes a new instance of the DataMigrationServiceClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Identifier of the subscription
         * @param [options] The parameter options
         */
        function DataMigrationServiceClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.resourceSkus = new ResourceSkus(_this);
            _this.services = new Services(_this);
            _this.tasks = new Tasks(_this);
            _this.serviceTasks = new ServiceTasks(_this);
            _this.projects = new Projects(_this);
            _this.usages = new Usages(_this);
            _this.operations = new Operations(_this);
            _this.files = new Files(_this);
            return _this;
        }
        return DataMigrationServiceClient;
    }(DataMigrationServiceClientContext));

    exports.DataMigrationServiceClient = DataMigrationServiceClient;
    exports.DataMigrationServiceClientContext = DataMigrationServiceClientContext;
    exports.DataMigrationServiceMappers = mappers;
    exports.DataMigrationServiceModels = index;
    exports.Files = Files;
    exports.Operations = Operations;
    exports.Projects = Projects;
    exports.ResourceSkus = ResourceSkus;
    exports.ServiceTasks = ServiceTasks;
    exports.Services = Services;
    exports.Tasks = Tasks;
    exports.Usages = Usages;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-datamigration.js.map
