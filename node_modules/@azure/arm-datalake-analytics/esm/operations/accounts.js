/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/accountsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Accounts. */
var Accounts = /** @class */ (function () {
    /**
     * Create a Accounts.
     * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
     */
    function Accounts(client) {
        this.client = client;
    }
    Accounts.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Accounts.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    /**
     * Creates the specified Data Lake Analytics account. This supplies the user with computation
     * services for Data Lake Analytics workloads.
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Analytics account.
     * @param parameters Parameters supplied to create a new Data Lake Analytics account.
     * @param [options] The optional parameters
     * @returns Promise<Models.AccountsCreateResponse>
     */
    Accounts.prototype.create = function (resourceGroupName, accountName, parameters, options) {
        return this.beginCreate(resourceGroupName, accountName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Accounts.prototype.get = function (resourceGroupName, accountName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Updates the Data Lake Analytics account object specified by the accountName with the contents of
     * the account object.
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Analytics account.
     * @param [options] The optional parameters
     * @returns Promise<Models.AccountsUpdateResponse>
     */
    Accounts.prototype.update = function (resourceGroupName, accountName, options) {
        return this.beginUpdate(resourceGroupName, accountName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Begins the delete process for the Data Lake Analytics account object specified by the account
     * name.
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Analytics account.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Accounts.prototype.deleteMethod = function (resourceGroupName, accountName, options) {
        return this.beginDeleteMethod(resourceGroupName, accountName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Accounts.prototype.checkNameAvailability = function (location, parameters, options, callback) {
        return this.client.sendOperationRequest({
            location: location,
            parameters: parameters,
            options: options
        }, checkNameAvailabilityOperationSpec, callback);
    };
    /**
     * Creates the specified Data Lake Analytics account. This supplies the user with computation
     * services for Data Lake Analytics workloads.
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Analytics account.
     * @param parameters Parameters supplied to create a new Data Lake Analytics account.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Accounts.prototype.beginCreate = function (resourceGroupName, accountName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Updates the Data Lake Analytics account object specified by the accountName with the contents of
     * the account object.
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Analytics account.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Accounts.prototype.beginUpdate = function (resourceGroupName, accountName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    /**
     * Begins the delete process for the Data Lake Analytics account object specified by the account
     * name.
     * @param resourceGroupName The name of the Azure resource group.
     * @param accountName The name of the Data Lake Analytics account.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Accounts.prototype.beginDeleteMethod = function (resourceGroupName, accountName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            accountName: accountName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    Accounts.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    Accounts.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return Accounts;
}());
export { Accounts };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/accounts",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.skip,
        Parameters.select,
        Parameters.orderby,
        Parameters.count,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataLakeAnalyticsAccountListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.skip,
        Parameters.select,
        Parameters.orderby,
        Parameters.count,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataLakeAnalyticsAccountListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataLakeAnalyticsAccount
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var checkNameAvailabilityOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/locations/{location}/checkNameAvailability",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.location
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.CheckNameAvailabilityParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.NameAvailabilityInformation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.CreateDataLakeAnalyticsAccountParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DataLakeAnalyticsAccount
        },
        201: {
            bodyMapper: Mappers.DataLakeAnalyticsAccount
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "parameters"
        ],
        mapper: Mappers.UpdateDataLakeAnalyticsAccountParameters
    },
    responses: {
        200: {
            bodyMapper: Mappers.DataLakeAnalyticsAccount
        },
        201: {
            bodyMapper: Mappers.DataLakeAnalyticsAccount
        },
        202: {
            bodyMapper: Mappers.DataLakeAnalyticsAccount
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.skip,
        Parameters.select,
        Parameters.orderby,
        Parameters.count,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataLakeAnalyticsAccountListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.skip,
        Parameters.select,
        Parameters.orderby,
        Parameters.count,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DataLakeAnalyticsAccountListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=accounts.js.map