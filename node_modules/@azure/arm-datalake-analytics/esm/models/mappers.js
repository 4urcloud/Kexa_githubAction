/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __assign } from "tslib";
import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
export var CloudError = CloudErrorMapper;
export var BaseResource = BaseResourceMapper;
export var Resource = {
    serializedName: "Resource",
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            location: {
                readOnly: true,
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                readOnly: true,
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export var SubResource = {
    serializedName: "SubResource",
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: {
            id: {
                readOnly: true,
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DataLakeStoreAccountInformation = {
    serializedName: "DataLakeStoreAccountInformation",
    type: {
        name: "Composite",
        className: "DataLakeStoreAccountInformation",
        modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { suffix: {
                readOnly: true,
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            } })
    }
};
export var StorageAccountInformation = {
    serializedName: "StorageAccountInformation",
    type: {
        name: "Composite",
        className: "StorageAccountInformation",
        modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { suffix: {
                readOnly: true,
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            } })
    }
};
export var ComputePolicy = {
    serializedName: "ComputePolicy",
    type: {
        name: "Composite",
        className: "ComputePolicy",
        modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { objectId: {
                readOnly: true,
                serializedName: "properties.objectId",
                type: {
                    name: "Uuid"
                }
            }, objectType: {
                readOnly: true,
                serializedName: "properties.objectType",
                type: {
                    name: "String"
                }
            }, maxDegreeOfParallelismPerJob: {
                readOnly: true,
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, minPriorityPerJob: {
                readOnly: true,
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            } })
    }
};
export var HiveMetastore = {
    serializedName: "HiveMetastore",
    type: {
        name: "Composite",
        className: "HiveMetastore",
        modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { serverUri: {
                readOnly: true,
                serializedName: "properties.serverUri",
                type: {
                    name: "String"
                }
            }, databaseName: {
                readOnly: true,
                serializedName: "properties.databaseName",
                type: {
                    name: "String"
                }
            }, runtimeVersion: {
                readOnly: true,
                serializedName: "properties.runtimeVersion",
                type: {
                    name: "String"
                }
            }, userName: {
                readOnly: true,
                serializedName: "properties.userName",
                type: {
                    name: "String"
                }
            }, password: {
                readOnly: true,
                serializedName: "properties.password",
                type: {
                    name: "String"
                }
            }, nestedResourceProvisioningState: {
                readOnly: true,
                serializedName: "properties.nestedResourceProvisioningState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Succeeded",
                        "Canceled",
                        "Failed"
                    ]
                }
            } })
    }
};
export var VirtualNetworkRule = {
    serializedName: "VirtualNetworkRule",
    type: {
        name: "Composite",
        className: "VirtualNetworkRule",
        modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { subnetId: {
                readOnly: true,
                serializedName: "properties.subnetId",
                type: {
                    name: "String"
                }
            }, virtualNetworkRuleState: {
                readOnly: true,
                serializedName: "properties.virtualNetworkRuleState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Active",
                        "NetworkSourceDeleted",
                        "Failed"
                    ]
                }
            } })
    }
};
export var FirewallRule = {
    serializedName: "FirewallRule",
    type: {
        name: "Composite",
        className: "FirewallRule",
        modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { startIpAddress: {
                readOnly: true,
                serializedName: "properties.startIpAddress",
                type: {
                    name: "String"
                }
            }, endIpAddress: {
                readOnly: true,
                serializedName: "properties.endIpAddress",
                type: {
                    name: "String"
                }
            } })
    }
};
export var DataLakeAnalyticsAccount = {
    serializedName: "DataLakeAnalyticsAccount",
    type: {
        name: "Composite",
        className: "DataLakeAnalyticsAccount",
        modelProperties: __assign(__assign({}, Resource.type.modelProperties), { accountId: {
                readOnly: true,
                serializedName: "properties.accountId",
                type: {
                    name: "Uuid"
                }
            }, provisioningState: {
                readOnly: true,
                serializedName: "properties.provisioningState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Failed",
                        "Creating",
                        "Running",
                        "Succeeded",
                        "Patching",
                        "Suspending",
                        "Resuming",
                        "Deleting",
                        "Deleted",
                        "Undeleting",
                        "Canceled"
                    ]
                }
            }, state: {
                readOnly: true,
                serializedName: "properties.state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Active",
                        "Suspended"
                    ]
                }
            }, creationTime: {
                readOnly: true,
                serializedName: "properties.creationTime",
                type: {
                    name: "DateTime"
                }
            }, lastModifiedTime: {
                readOnly: true,
                serializedName: "properties.lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            }, endpoint: {
                readOnly: true,
                serializedName: "properties.endpoint",
                type: {
                    name: "String"
                }
            }, defaultDataLakeStoreAccount: {
                readOnly: true,
                serializedName: "properties.defaultDataLakeStoreAccount",
                type: {
                    name: "String"
                }
            }, dataLakeStoreAccounts: {
                readOnly: true,
                serializedName: "properties.dataLakeStoreAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataLakeStoreAccountInformation"
                        }
                    }
                }
            }, storageAccounts: {
                readOnly: true,
                serializedName: "properties.storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageAccountInformation"
                        }
                    }
                }
            }, computePolicies: {
                readOnly: true,
                serializedName: "properties.computePolicies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComputePolicy"
                        }
                    }
                }
            }, hiveMetastores: {
                readOnly: true,
                serializedName: "properties.hiveMetastores",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HiveMetastore"
                        }
                    }
                }
            }, virtualNetworkRules: {
                readOnly: true,
                serializedName: "properties.virtualNetworkRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VirtualNetworkRule"
                        }
                    }
                }
            }, firewallRules: {
                readOnly: true,
                serializedName: "properties.firewallRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FirewallRule"
                        }
                    }
                }
            }, firewallState: {
                readOnly: true,
                serializedName: "properties.firewallState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Enabled",
                        "Disabled"
                    ]
                }
            }, firewallAllowAzureIps: {
                readOnly: true,
                serializedName: "properties.firewallAllowAzureIps",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Enabled",
                        "Disabled"
                    ]
                }
            }, newTier: {
                readOnly: true,
                serializedName: "properties.newTier",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Consumption",
                        "Commitment_100AUHours",
                        "Commitment_500AUHours",
                        "Commitment_1000AUHours",
                        "Commitment_5000AUHours",
                        "Commitment_10000AUHours",
                        "Commitment_50000AUHours",
                        "Commitment_100000AUHours",
                        "Commitment_500000AUHours"
                    ]
                }
            }, currentTier: {
                readOnly: true,
                serializedName: "properties.currentTier",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Consumption",
                        "Commitment_100AUHours",
                        "Commitment_500AUHours",
                        "Commitment_1000AUHours",
                        "Commitment_5000AUHours",
                        "Commitment_10000AUHours",
                        "Commitment_50000AUHours",
                        "Commitment_100000AUHours",
                        "Commitment_500000AUHours"
                    ]
                }
            }, maxJobCount: {
                serializedName: "properties.maxJobCount",
                defaultValue: 3,
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, systemMaxJobCount: {
                readOnly: true,
                serializedName: "properties.systemMaxJobCount",
                type: {
                    name: "Number"
                }
            }, maxDegreeOfParallelism: {
                serializedName: "properties.maxDegreeOfParallelism",
                defaultValue: 30,
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, systemMaxDegreeOfParallelism: {
                readOnly: true,
                serializedName: "properties.systemMaxDegreeOfParallelism",
                type: {
                    name: "Number"
                }
            }, maxDegreeOfParallelismPerJob: {
                readOnly: true,
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, minPriorityPerJob: {
                readOnly: true,
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, queryStoreRetention: {
                serializedName: "properties.queryStoreRetention",
                defaultValue: 30,
                constraints: {
                    InclusiveMaximum: 180,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }, debugDataAccessLevel: {
                readOnly: true,
                serializedName: "properties.debugDataAccessLevel",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "All",
                        "Customer",
                        "None"
                    ]
                }
            } })
    }
};
export var DataLakeAnalyticsAccountBasic = {
    serializedName: "DataLakeAnalyticsAccountBasic",
    type: {
        name: "Composite",
        className: "DataLakeAnalyticsAccountBasic",
        modelProperties: __assign(__assign({}, Resource.type.modelProperties), { accountId: {
                readOnly: true,
                serializedName: "properties.accountId",
                type: {
                    name: "Uuid"
                }
            }, provisioningState: {
                readOnly: true,
                serializedName: "properties.provisioningState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Failed",
                        "Creating",
                        "Running",
                        "Succeeded",
                        "Patching",
                        "Suspending",
                        "Resuming",
                        "Deleting",
                        "Deleted",
                        "Undeleting",
                        "Canceled"
                    ]
                }
            }, state: {
                readOnly: true,
                serializedName: "properties.state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Active",
                        "Suspended"
                    ]
                }
            }, creationTime: {
                readOnly: true,
                serializedName: "properties.creationTime",
                type: {
                    name: "DateTime"
                }
            }, lastModifiedTime: {
                readOnly: true,
                serializedName: "properties.lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            }, endpoint: {
                readOnly: true,
                serializedName: "properties.endpoint",
                type: {
                    name: "String"
                }
            } })
    }
};
export var StorageContainer = {
    serializedName: "StorageContainer",
    type: {
        name: "Composite",
        className: "StorageContainer",
        modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { lastModifiedTime: {
                readOnly: true,
                serializedName: "properties.lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
export var SasTokenInformation = {
    serializedName: "SasTokenInformation",
    type: {
        name: "Composite",
        className: "SasTokenInformation",
        modelProperties: {
            accessToken: {
                readOnly: true,
                serializedName: "accessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var VirtualNetworkRuleListResult = {
    serializedName: "VirtualNetworkRuleListResult",
    type: {
        name: "Composite",
        className: "VirtualNetworkRuleListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VirtualNetworkRule"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var HiveMetastoreListResult = {
    serializedName: "HiveMetastoreListResult",
    type: {
        name: "Composite",
        className: "HiveMetastoreListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HiveMetastore"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationDisplay = {
    serializedName: "OperationDisplay",
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                readOnly: true,
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                readOnly: true,
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                readOnly: true,
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                readOnly: true,
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationMetaMetricAvailabilitiesSpecification = {
    serializedName: "OperationMetaMetricAvailabilitiesSpecification",
    type: {
        name: "Composite",
        className: "OperationMetaMetricAvailabilitiesSpecification",
        modelProperties: {
            timeGrain: {
                serializedName: "timeGrain",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationMetaMetricSpecification = {
    serializedName: "OperationMetaMetricSpecification",
    type: {
        name: "Composite",
        className: "OperationMetaMetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            availabilities: {
                serializedName: "availabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetaMetricAvailabilitiesSpecification"
                        }
                    }
                }
            }
        }
    }
};
export var OperationMetaLogSpecification = {
    serializedName: "OperationMetaLogSpecification",
    type: {
        name: "Composite",
        className: "OperationMetaLogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationMetaServiceSpecification = {
    serializedName: "OperationMetaServiceSpecification",
    type: {
        name: "Composite",
        className: "OperationMetaServiceSpecification",
        modelProperties: {
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetaMetricSpecification"
                        }
                    }
                }
            },
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetaLogSpecification"
                        }
                    }
                }
            }
        }
    }
};
export var OperationMetaPropertyInfo = {
    serializedName: "OperationMetaPropertyInfo",
    type: {
        name: "Composite",
        className: "OperationMetaPropertyInfo",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationMetaServiceSpecification"
                }
            }
        }
    }
};
export var Operation = {
    serializedName: "Operation",
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                readOnly: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                readOnly: true,
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            properties: {
                readOnly: true,
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "OperationMetaPropertyInfo"
                }
            },
            origin: {
                readOnly: true,
                serializedName: "origin",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationListResult = {
    serializedName: "OperationListResult",
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CapabilityInformation = {
    serializedName: "CapabilityInformation",
    type: {
        name: "Composite",
        className: "CapabilityInformation",
        modelProperties: {
            subscriptionId: {
                readOnly: true,
                serializedName: "subscriptionId",
                type: {
                    name: "Uuid"
                }
            },
            state: {
                readOnly: true,
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            maxAccountCount: {
                readOnly: true,
                serializedName: "maxAccountCount",
                type: {
                    name: "Number"
                }
            },
            accountCount: {
                readOnly: true,
                serializedName: "accountCount",
                type: {
                    name: "Number"
                }
            },
            migrationState: {
                readOnly: true,
                serializedName: "migrationState",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export var NameAvailabilityInformation = {
    serializedName: "NameAvailabilityInformation",
    type: {
        name: "Composite",
        className: "NameAvailabilityInformation",
        modelProperties: {
            nameAvailable: {
                readOnly: true,
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                readOnly: true,
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var AddDataLakeStoreWithAccountParameters = {
    serializedName: "AddDataLakeStoreWithAccountParameters",
    type: {
        name: "Composite",
        className: "AddDataLakeStoreWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            suffix: {
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var AddStorageAccountWithAccountParameters = {
    serializedName: "AddStorageAccountWithAccountParameters",
    type: {
        name: "Composite",
        className: "AddStorageAccountWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            accessKey: {
                required: true,
                serializedName: "properties.accessKey",
                type: {
                    name: "String"
                }
            },
            suffix: {
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CreateComputePolicyWithAccountParameters = {
    serializedName: "CreateComputePolicyWithAccountParameters",
    type: {
        name: "Composite",
        className: "CreateComputePolicyWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            objectId: {
                required: true,
                serializedName: "properties.objectId",
                type: {
                    name: "Uuid"
                }
            },
            objectType: {
                required: true,
                serializedName: "properties.objectType",
                type: {
                    name: "String"
                }
            },
            maxDegreeOfParallelismPerJob: {
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            minPriorityPerJob: {
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var CreateFirewallRuleWithAccountParameters = {
    serializedName: "CreateFirewallRuleWithAccountParameters",
    type: {
        name: "Composite",
        className: "CreateFirewallRuleWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            startIpAddress: {
                required: true,
                serializedName: "properties.startIpAddress",
                type: {
                    name: "String"
                }
            },
            endIpAddress: {
                required: true,
                serializedName: "properties.endIpAddress",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CreateDataLakeAnalyticsAccountParameters = {
    serializedName: "CreateDataLakeAnalyticsAccountParameters",
    type: {
        name: "Composite",
        className: "CreateDataLakeAnalyticsAccountParameters",
        modelProperties: {
            location: {
                required: true,
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            defaultDataLakeStoreAccount: {
                required: true,
                serializedName: "properties.defaultDataLakeStoreAccount",
                type: {
                    name: "String"
                }
            },
            dataLakeStoreAccounts: {
                required: true,
                serializedName: "properties.dataLakeStoreAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AddDataLakeStoreWithAccountParameters"
                        }
                    }
                }
            },
            storageAccounts: {
                serializedName: "properties.storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AddStorageAccountWithAccountParameters"
                        }
                    }
                }
            },
            computePolicies: {
                serializedName: "properties.computePolicies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CreateComputePolicyWithAccountParameters"
                        }
                    }
                }
            },
            firewallRules: {
                serializedName: "properties.firewallRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CreateFirewallRuleWithAccountParameters"
                        }
                    }
                }
            },
            firewallState: {
                serializedName: "properties.firewallState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Enabled",
                        "Disabled"
                    ]
                }
            },
            firewallAllowAzureIps: {
                serializedName: "properties.firewallAllowAzureIps",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Enabled",
                        "Disabled"
                    ]
                }
            },
            newTier: {
                serializedName: "properties.newTier",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Consumption",
                        "Commitment_100AUHours",
                        "Commitment_500AUHours",
                        "Commitment_1000AUHours",
                        "Commitment_5000AUHours",
                        "Commitment_10000AUHours",
                        "Commitment_50000AUHours",
                        "Commitment_100000AUHours",
                        "Commitment_500000AUHours"
                    ]
                }
            },
            maxJobCount: {
                serializedName: "properties.maxJobCount",
                defaultValue: 3,
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            maxDegreeOfParallelism: {
                serializedName: "properties.maxDegreeOfParallelism",
                defaultValue: 30,
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            maxDegreeOfParallelismPerJob: {
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            minPriorityPerJob: {
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            queryStoreRetention: {
                serializedName: "properties.queryStoreRetention",
                defaultValue: 30,
                constraints: {
                    InclusiveMaximum: 180,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var UpdateDataLakeStoreWithAccountParameters = {
    serializedName: "UpdateDataLakeStoreWithAccountParameters",
    type: {
        name: "Composite",
        className: "UpdateDataLakeStoreWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            suffix: {
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var UpdateStorageAccountWithAccountParameters = {
    serializedName: "UpdateStorageAccountWithAccountParameters",
    type: {
        name: "Composite",
        className: "UpdateStorageAccountWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            accessKey: {
                serializedName: "properties.accessKey",
                type: {
                    name: "String"
                }
            },
            suffix: {
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var UpdateComputePolicyWithAccountParameters = {
    serializedName: "UpdateComputePolicyWithAccountParameters",
    type: {
        name: "Composite",
        className: "UpdateComputePolicyWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            objectId: {
                serializedName: "properties.objectId",
                type: {
                    name: "Uuid"
                }
            },
            objectType: {
                serializedName: "properties.objectType",
                type: {
                    name: "String"
                }
            },
            maxDegreeOfParallelismPerJob: {
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            minPriorityPerJob: {
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var UpdateFirewallRuleWithAccountParameters = {
    serializedName: "UpdateFirewallRuleWithAccountParameters",
    type: {
        name: "Composite",
        className: "UpdateFirewallRuleWithAccountParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            startIpAddress: {
                serializedName: "properties.startIpAddress",
                type: {
                    name: "String"
                }
            },
            endIpAddress: {
                serializedName: "properties.endIpAddress",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var UpdateDataLakeAnalyticsAccountParameters = {
    serializedName: "UpdateDataLakeAnalyticsAccountParameters",
    type: {
        name: "Composite",
        className: "UpdateDataLakeAnalyticsAccountParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            dataLakeStoreAccounts: {
                serializedName: "properties.dataLakeStoreAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UpdateDataLakeStoreWithAccountParameters"
                        }
                    }
                }
            },
            storageAccounts: {
                serializedName: "properties.storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UpdateStorageAccountWithAccountParameters"
                        }
                    }
                }
            },
            computePolicies: {
                serializedName: "properties.computePolicies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UpdateComputePolicyWithAccountParameters"
                        }
                    }
                }
            },
            firewallRules: {
                serializedName: "properties.firewallRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UpdateFirewallRuleWithAccountParameters"
                        }
                    }
                }
            },
            firewallState: {
                serializedName: "properties.firewallState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Enabled",
                        "Disabled"
                    ]
                }
            },
            firewallAllowAzureIps: {
                serializedName: "properties.firewallAllowAzureIps",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Enabled",
                        "Disabled"
                    ]
                }
            },
            newTier: {
                serializedName: "properties.newTier",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Consumption",
                        "Commitment_100AUHours",
                        "Commitment_500AUHours",
                        "Commitment_1000AUHours",
                        "Commitment_5000AUHours",
                        "Commitment_10000AUHours",
                        "Commitment_50000AUHours",
                        "Commitment_100000AUHours",
                        "Commitment_500000AUHours"
                    ]
                }
            },
            maxJobCount: {
                serializedName: "properties.maxJobCount",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            maxDegreeOfParallelism: {
                serializedName: "properties.maxDegreeOfParallelism",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            maxDegreeOfParallelismPerJob: {
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            minPriorityPerJob: {
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            queryStoreRetention: {
                serializedName: "properties.queryStoreRetention",
                constraints: {
                    InclusiveMaximum: 180,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var AddDataLakeStoreParameters = {
    serializedName: "AddDataLakeStoreParameters",
    type: {
        name: "Composite",
        className: "AddDataLakeStoreParameters",
        modelProperties: {
            suffix: {
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var AddStorageAccountParameters = {
    serializedName: "AddStorageAccountParameters",
    type: {
        name: "Composite",
        className: "AddStorageAccountParameters",
        modelProperties: {
            accessKey: {
                required: true,
                serializedName: "properties.accessKey",
                type: {
                    name: "String"
                }
            },
            suffix: {
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var UpdateStorageAccountParameters = {
    serializedName: "UpdateStorageAccountParameters",
    type: {
        name: "Composite",
        className: "UpdateStorageAccountParameters",
        modelProperties: {
            accessKey: {
                serializedName: "properties.accessKey",
                type: {
                    name: "String"
                }
            },
            suffix: {
                serializedName: "properties.suffix",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CreateOrUpdateComputePolicyParameters = {
    serializedName: "CreateOrUpdateComputePolicyParameters",
    type: {
        name: "Composite",
        className: "CreateOrUpdateComputePolicyParameters",
        modelProperties: {
            objectId: {
                required: true,
                serializedName: "properties.objectId",
                type: {
                    name: "Uuid"
                }
            },
            objectType: {
                required: true,
                serializedName: "properties.objectType",
                type: {
                    name: "String"
                }
            },
            maxDegreeOfParallelismPerJob: {
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            minPriorityPerJob: {
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var UpdateComputePolicyParameters = {
    serializedName: "UpdateComputePolicyParameters",
    type: {
        name: "Composite",
        className: "UpdateComputePolicyParameters",
        modelProperties: {
            objectId: {
                serializedName: "properties.objectId",
                type: {
                    name: "Uuid"
                }
            },
            objectType: {
                serializedName: "properties.objectType",
                type: {
                    name: "String"
                }
            },
            maxDegreeOfParallelismPerJob: {
                serializedName: "properties.maxDegreeOfParallelismPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            minPriorityPerJob: {
                serializedName: "properties.minPriorityPerJob",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var CreateOrUpdateFirewallRuleParameters = {
    serializedName: "CreateOrUpdateFirewallRuleParameters",
    type: {
        name: "Composite",
        className: "CreateOrUpdateFirewallRuleParameters",
        modelProperties: {
            startIpAddress: {
                required: true,
                serializedName: "properties.startIpAddress",
                type: {
                    name: "String"
                }
            },
            endIpAddress: {
                required: true,
                serializedName: "properties.endIpAddress",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var UpdateFirewallRuleParameters = {
    serializedName: "UpdateFirewallRuleParameters",
    type: {
        name: "Composite",
        className: "UpdateFirewallRuleParameters",
        modelProperties: {
            startIpAddress: {
                serializedName: "properties.startIpAddress",
                type: {
                    name: "String"
                }
            },
            endIpAddress: {
                serializedName: "properties.endIpAddress",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var CheckNameAvailabilityParameters = {
    serializedName: "CheckNameAvailabilityParameters",
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityParameters",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                required: true,
                isConstant: true,
                serializedName: "type",
                defaultValue: 'Microsoft.DataLakeAnalytics/accounts',
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ErrorAdditionalInfo = {
    serializedName: "ErrorAdditionalInfo",
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                readOnly: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            info: {
                readOnly: true,
                serializedName: "info",
                type: {
                    name: "Object"
                }
            }
        }
    }
};
export var ErrorDetail = {
    serializedName: "ErrorDetail",
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                readOnly: true,
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                readOnly: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                readOnly: true,
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                readOnly: true,
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                readOnly: true,
                serializedName: "additionalInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
export var ErrorResponse = {
    serializedName: "ErrorResponse",
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
export var DataLakeAnalyticsAccountListResult = {
    serializedName: "DataLakeAnalyticsAccountListResult",
    type: {
        name: "Composite",
        className: "DataLakeAnalyticsAccountListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataLakeAnalyticsAccountBasic"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var DataLakeStoreAccountInformationListResult = {
    serializedName: "DataLakeStoreAccountInformationListResult",
    type: {
        name: "Composite",
        className: "DataLakeStoreAccountInformationListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataLakeStoreAccountInformation"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var StorageAccountInformationListResult = {
    serializedName: "StorageAccountInformationListResult",
    type: {
        name: "Composite",
        className: "StorageAccountInformationListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageAccountInformation"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var StorageContainerListResult = {
    serializedName: "StorageContainerListResult",
    type: {
        name: "Composite",
        className: "StorageContainerListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageContainer"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var SasTokenInformationListResult = {
    serializedName: "SasTokenInformationListResult",
    type: {
        name: "Composite",
        className: "SasTokenInformationListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SasTokenInformation"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var ComputePolicyListResult = {
    serializedName: "ComputePolicyListResult",
    type: {
        name: "Composite",
        className: "ComputePolicyListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComputePolicy"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var FirewallRuleListResult = {
    serializedName: "FirewallRuleListResult",
    type: {
        name: "Composite",
        className: "FirewallRuleListResult",
        modelProperties: {
            value: {
                readOnly: true,
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FirewallRule"
                        }
                    }
                }
            },
            nextLink: {
                readOnly: true,
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
//# sourceMappingURL=mappers.js.map