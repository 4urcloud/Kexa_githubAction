/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmDatalakeAnalytics = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    readOnly: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var SubResource = {
        serializedName: "SubResource",
        type: {
            name: "Composite",
            className: "SubResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataLakeStoreAccountInformation = {
        serializedName: "DataLakeStoreAccountInformation",
        type: {
            name: "Composite",
            className: "DataLakeStoreAccountInformation",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { suffix: {
                    readOnly: true,
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StorageAccountInformation = {
        serializedName: "StorageAccountInformation",
        type: {
            name: "Composite",
            className: "StorageAccountInformation",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { suffix: {
                    readOnly: true,
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ComputePolicy = {
        serializedName: "ComputePolicy",
        type: {
            name: "Composite",
            className: "ComputePolicy",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { objectId: {
                    readOnly: true,
                    serializedName: "properties.objectId",
                    type: {
                        name: "Uuid"
                    }
                }, objectType: {
                    readOnly: true,
                    serializedName: "properties.objectType",
                    type: {
                        name: "String"
                    }
                }, maxDegreeOfParallelismPerJob: {
                    readOnly: true,
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, minPriorityPerJob: {
                    readOnly: true,
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var HiveMetastore = {
        serializedName: "HiveMetastore",
        type: {
            name: "Composite",
            className: "HiveMetastore",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { serverUri: {
                    readOnly: true,
                    serializedName: "properties.serverUri",
                    type: {
                        name: "String"
                    }
                }, databaseName: {
                    readOnly: true,
                    serializedName: "properties.databaseName",
                    type: {
                        name: "String"
                    }
                }, runtimeVersion: {
                    readOnly: true,
                    serializedName: "properties.runtimeVersion",
                    type: {
                        name: "String"
                    }
                }, userName: {
                    readOnly: true,
                    serializedName: "properties.userName",
                    type: {
                        name: "String"
                    }
                }, password: {
                    readOnly: true,
                    serializedName: "properties.password",
                    type: {
                        name: "String"
                    }
                }, nestedResourceProvisioningState: {
                    readOnly: true,
                    serializedName: "properties.nestedResourceProvisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Succeeded",
                            "Canceled",
                            "Failed"
                        ]
                    }
                } })
        }
    };
    var VirtualNetworkRule = {
        serializedName: "VirtualNetworkRule",
        type: {
            name: "Composite",
            className: "VirtualNetworkRule",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { subnetId: {
                    readOnly: true,
                    serializedName: "properties.subnetId",
                    type: {
                        name: "String"
                    }
                }, virtualNetworkRuleState: {
                    readOnly: true,
                    serializedName: "properties.virtualNetworkRuleState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "NetworkSourceDeleted",
                            "Failed"
                        ]
                    }
                } })
        }
    };
    var FirewallRule = {
        serializedName: "FirewallRule",
        type: {
            name: "Composite",
            className: "FirewallRule",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { startIpAddress: {
                    readOnly: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                }, endIpAddress: {
                    readOnly: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DataLakeAnalyticsAccount = {
        serializedName: "DataLakeAnalyticsAccount",
        type: {
            name: "Composite",
            className: "DataLakeAnalyticsAccount",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { accountId: {
                    readOnly: true,
                    serializedName: "properties.accountId",
                    type: {
                        name: "Uuid"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Failed",
                            "Creating",
                            "Running",
                            "Succeeded",
                            "Patching",
                            "Suspending",
                            "Resuming",
                            "Deleting",
                            "Deleted",
                            "Undeleting",
                            "Canceled"
                        ]
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Suspended"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, endpoint: {
                    readOnly: true,
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                }, defaultDataLakeStoreAccount: {
                    readOnly: true,
                    serializedName: "properties.defaultDataLakeStoreAccount",
                    type: {
                        name: "String"
                    }
                }, dataLakeStoreAccounts: {
                    readOnly: true,
                    serializedName: "properties.dataLakeStoreAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataLakeStoreAccountInformation"
                            }
                        }
                    }
                }, storageAccounts: {
                    readOnly: true,
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccountInformation"
                            }
                        }
                    }
                }, computePolicies: {
                    readOnly: true,
                    serializedName: "properties.computePolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputePolicy"
                            }
                        }
                    }
                }, hiveMetastores: {
                    readOnly: true,
                    serializedName: "properties.hiveMetastores",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HiveMetastore"
                            }
                        }
                    }
                }, virtualNetworkRules: {
                    readOnly: true,
                    serializedName: "properties.virtualNetworkRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                }, firewallRules: {
                    readOnly: true,
                    serializedName: "properties.firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                }, firewallState: {
                    readOnly: true,
                    serializedName: "properties.firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, firewallAllowAzureIps: {
                    readOnly: true,
                    serializedName: "properties.firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                }, newTier: {
                    readOnly: true,
                    serializedName: "properties.newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_100AUHours",
                            "Commitment_500AUHours",
                            "Commitment_1000AUHours",
                            "Commitment_5000AUHours",
                            "Commitment_10000AUHours",
                            "Commitment_50000AUHours",
                            "Commitment_100000AUHours",
                            "Commitment_500000AUHours"
                        ]
                    }
                }, currentTier: {
                    readOnly: true,
                    serializedName: "properties.currentTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_100AUHours",
                            "Commitment_500AUHours",
                            "Commitment_1000AUHours",
                            "Commitment_5000AUHours",
                            "Commitment_10000AUHours",
                            "Commitment_50000AUHours",
                            "Commitment_100000AUHours",
                            "Commitment_500000AUHours"
                        ]
                    }
                }, maxJobCount: {
                    serializedName: "properties.maxJobCount",
                    defaultValue: 3,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, systemMaxJobCount: {
                    readOnly: true,
                    serializedName: "properties.systemMaxJobCount",
                    type: {
                        name: "Number"
                    }
                }, maxDegreeOfParallelism: {
                    serializedName: "properties.maxDegreeOfParallelism",
                    defaultValue: 30,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, systemMaxDegreeOfParallelism: {
                    readOnly: true,
                    serializedName: "properties.systemMaxDegreeOfParallelism",
                    type: {
                        name: "Number"
                    }
                }, maxDegreeOfParallelismPerJob: {
                    readOnly: true,
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, minPriorityPerJob: {
                    readOnly: true,
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, queryStoreRetention: {
                    serializedName: "properties.queryStoreRetention",
                    defaultValue: 30,
                    constraints: {
                        InclusiveMaximum: 180,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }, debugDataAccessLevel: {
                    readOnly: true,
                    serializedName: "properties.debugDataAccessLevel",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "All",
                            "Customer",
                            "None"
                        ]
                    }
                } })
        }
    };
    var DataLakeAnalyticsAccountBasic = {
        serializedName: "DataLakeAnalyticsAccountBasic",
        type: {
            name: "Composite",
            className: "DataLakeAnalyticsAccountBasic",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { accountId: {
                    readOnly: true,
                    serializedName: "properties.accountId",
                    type: {
                        name: "Uuid"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Failed",
                            "Creating",
                            "Running",
                            "Succeeded",
                            "Patching",
                            "Suspending",
                            "Resuming",
                            "Deleting",
                            "Deleted",
                            "Undeleting",
                            "Canceled"
                        ]
                    }
                }, state: {
                    readOnly: true,
                    serializedName: "properties.state",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Active",
                            "Suspended"
                        ]
                    }
                }, creationTime: {
                    readOnly: true,
                    serializedName: "properties.creationTime",
                    type: {
                        name: "DateTime"
                    }
                }, lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                }, endpoint: {
                    readOnly: true,
                    serializedName: "properties.endpoint",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var StorageContainer = {
        serializedName: "StorageContainer",
        type: {
            name: "Composite",
            className: "StorageContainer",
            modelProperties: __assign(__assign({}, SubResource.type.modelProperties), { lastModifiedTime: {
                    readOnly: true,
                    serializedName: "properties.lastModifiedTime",
                    type: {
                        name: "DateTime"
                    }
                } })
        }
    };
    var SasTokenInformation = {
        serializedName: "SasTokenInformation",
        type: {
            name: "Composite",
            className: "SasTokenInformation",
            modelProperties: {
                accessToken: {
                    readOnly: true,
                    serializedName: "accessToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VirtualNetworkRuleListResult = {
        serializedName: "VirtualNetworkRuleListResult",
        type: {
            name: "Composite",
            className: "VirtualNetworkRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VirtualNetworkRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HiveMetastoreListResult = {
        serializedName: "HiveMetastoreListResult",
        type: {
            name: "Composite",
            className: "HiveMetastoreListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HiveMetastore"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetaMetricAvailabilitiesSpecification = {
        serializedName: "OperationMetaMetricAvailabilitiesSpecification",
        type: {
            name: "Composite",
            className: "OperationMetaMetricAvailabilitiesSpecification",
            modelProperties: {
                timeGrain: {
                    serializedName: "timeGrain",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetaMetricSpecification = {
        serializedName: "OperationMetaMetricSpecification",
        type: {
            name: "Composite",
            className: "OperationMetaMetricSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                aggregationType: {
                    serializedName: "aggregationType",
                    type: {
                        name: "String"
                    }
                },
                availabilities: {
                    serializedName: "availabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetaMetricAvailabilitiesSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationMetaLogSpecification = {
        serializedName: "OperationMetaLogSpecification",
        type: {
            name: "Composite",
            className: "OperationMetaLogSpecification",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                blobDuration: {
                    serializedName: "blobDuration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationMetaServiceSpecification = {
        serializedName: "OperationMetaServiceSpecification",
        type: {
            name: "Composite",
            className: "OperationMetaServiceSpecification",
            modelProperties: {
                metricSpecifications: {
                    serializedName: "metricSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetaMetricSpecification"
                            }
                        }
                    }
                },
                logSpecifications: {
                    serializedName: "logSpecifications",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationMetaLogSpecification"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationMetaPropertyInfo = {
        serializedName: "OperationMetaPropertyInfo",
        type: {
            name: "Composite",
            className: "OperationMetaPropertyInfo",
            modelProperties: {
                serviceSpecification: {
                    serializedName: "serviceSpecification",
                    type: {
                        name: "Composite",
                        className: "OperationMetaServiceSpecification"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "OperationMetaPropertyInfo"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CapabilityInformation = {
        serializedName: "CapabilityInformation",
        type: {
            name: "Composite",
            className: "CapabilityInformation",
            modelProperties: {
                subscriptionId: {
                    readOnly: true,
                    serializedName: "subscriptionId",
                    type: {
                        name: "Uuid"
                    }
                },
                state: {
                    readOnly: true,
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                maxAccountCount: {
                    readOnly: true,
                    serializedName: "maxAccountCount",
                    type: {
                        name: "Number"
                    }
                },
                accountCount: {
                    readOnly: true,
                    serializedName: "accountCount",
                    type: {
                        name: "Number"
                    }
                },
                migrationState: {
                    readOnly: true,
                    serializedName: "migrationState",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var NameAvailabilityInformation = {
        serializedName: "NameAvailabilityInformation",
        type: {
            name: "Composite",
            className: "NameAvailabilityInformation",
            modelProperties: {
                nameAvailable: {
                    readOnly: true,
                    serializedName: "nameAvailable",
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    readOnly: true,
                    serializedName: "reason",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AddDataLakeStoreWithAccountParameters = {
        serializedName: "AddDataLakeStoreWithAccountParameters",
        type: {
            name: "Composite",
            className: "AddDataLakeStoreWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                suffix: {
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AddStorageAccountWithAccountParameters = {
        serializedName: "AddStorageAccountWithAccountParameters",
        type: {
            name: "Composite",
            className: "AddStorageAccountWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                accessKey: {
                    required: true,
                    serializedName: "properties.accessKey",
                    type: {
                        name: "String"
                    }
                },
                suffix: {
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateComputePolicyWithAccountParameters = {
        serializedName: "CreateComputePolicyWithAccountParameters",
        type: {
            name: "Composite",
            className: "CreateComputePolicyWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                objectId: {
                    required: true,
                    serializedName: "properties.objectId",
                    type: {
                        name: "Uuid"
                    }
                },
                objectType: {
                    required: true,
                    serializedName: "properties.objectType",
                    type: {
                        name: "String"
                    }
                },
                maxDegreeOfParallelismPerJob: {
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                minPriorityPerJob: {
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CreateFirewallRuleWithAccountParameters = {
        serializedName: "CreateFirewallRuleWithAccountParameters",
        type: {
            name: "Composite",
            className: "CreateFirewallRuleWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startIpAddress: {
                    required: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    required: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateDataLakeAnalyticsAccountParameters = {
        serializedName: "CreateDataLakeAnalyticsAccountParameters",
        type: {
            name: "Composite",
            className: "CreateDataLakeAnalyticsAccountParameters",
            modelProperties: {
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                defaultDataLakeStoreAccount: {
                    required: true,
                    serializedName: "properties.defaultDataLakeStoreAccount",
                    type: {
                        name: "String"
                    }
                },
                dataLakeStoreAccounts: {
                    required: true,
                    serializedName: "properties.dataLakeStoreAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AddDataLakeStoreWithAccountParameters"
                            }
                        }
                    }
                },
                storageAccounts: {
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AddStorageAccountWithAccountParameters"
                            }
                        }
                    }
                },
                computePolicies: {
                    serializedName: "properties.computePolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateComputePolicyWithAccountParameters"
                            }
                        }
                    }
                },
                firewallRules: {
                    serializedName: "properties.firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CreateFirewallRuleWithAccountParameters"
                            }
                        }
                    }
                },
                firewallState: {
                    serializedName: "properties.firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallAllowAzureIps: {
                    serializedName: "properties.firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                newTier: {
                    serializedName: "properties.newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_100AUHours",
                            "Commitment_500AUHours",
                            "Commitment_1000AUHours",
                            "Commitment_5000AUHours",
                            "Commitment_10000AUHours",
                            "Commitment_50000AUHours",
                            "Commitment_100000AUHours",
                            "Commitment_500000AUHours"
                        ]
                    }
                },
                maxJobCount: {
                    serializedName: "properties.maxJobCount",
                    defaultValue: 3,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxDegreeOfParallelism: {
                    serializedName: "properties.maxDegreeOfParallelism",
                    defaultValue: 30,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxDegreeOfParallelismPerJob: {
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                minPriorityPerJob: {
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                queryStoreRetention: {
                    serializedName: "properties.queryStoreRetention",
                    defaultValue: 30,
                    constraints: {
                        InclusiveMaximum: 180,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpdateDataLakeStoreWithAccountParameters = {
        serializedName: "UpdateDataLakeStoreWithAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateDataLakeStoreWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                suffix: {
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateStorageAccountWithAccountParameters = {
        serializedName: "UpdateStorageAccountWithAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateStorageAccountWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                accessKey: {
                    serializedName: "properties.accessKey",
                    type: {
                        name: "String"
                    }
                },
                suffix: {
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateComputePolicyWithAccountParameters = {
        serializedName: "UpdateComputePolicyWithAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateComputePolicyWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                objectId: {
                    serializedName: "properties.objectId",
                    type: {
                        name: "Uuid"
                    }
                },
                objectType: {
                    serializedName: "properties.objectType",
                    type: {
                        name: "String"
                    }
                },
                maxDegreeOfParallelismPerJob: {
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                minPriorityPerJob: {
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpdateFirewallRuleWithAccountParameters = {
        serializedName: "UpdateFirewallRuleWithAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateFirewallRuleWithAccountParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                startIpAddress: {
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateDataLakeAnalyticsAccountParameters = {
        serializedName: "UpdateDataLakeAnalyticsAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateDataLakeAnalyticsAccountParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                dataLakeStoreAccounts: {
                    serializedName: "properties.dataLakeStoreAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateDataLakeStoreWithAccountParameters"
                            }
                        }
                    }
                },
                storageAccounts: {
                    serializedName: "properties.storageAccounts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateStorageAccountWithAccountParameters"
                            }
                        }
                    }
                },
                computePolicies: {
                    serializedName: "properties.computePolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateComputePolicyWithAccountParameters"
                            }
                        }
                    }
                },
                firewallRules: {
                    serializedName: "properties.firewallRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UpdateFirewallRuleWithAccountParameters"
                            }
                        }
                    }
                },
                firewallState: {
                    serializedName: "properties.firewallState",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                firewallAllowAzureIps: {
                    serializedName: "properties.firewallAllowAzureIps",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Enabled",
                            "Disabled"
                        ]
                    }
                },
                newTier: {
                    serializedName: "properties.newTier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Consumption",
                            "Commitment_100AUHours",
                            "Commitment_500AUHours",
                            "Commitment_1000AUHours",
                            "Commitment_5000AUHours",
                            "Commitment_10000AUHours",
                            "Commitment_50000AUHours",
                            "Commitment_100000AUHours",
                            "Commitment_500000AUHours"
                        ]
                    }
                },
                maxJobCount: {
                    serializedName: "properties.maxJobCount",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxDegreeOfParallelism: {
                    serializedName: "properties.maxDegreeOfParallelism",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxDegreeOfParallelismPerJob: {
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                minPriorityPerJob: {
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                queryStoreRetention: {
                    serializedName: "properties.queryStoreRetention",
                    constraints: {
                        InclusiveMaximum: 180,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AddDataLakeStoreParameters = {
        serializedName: "AddDataLakeStoreParameters",
        type: {
            name: "Composite",
            className: "AddDataLakeStoreParameters",
            modelProperties: {
                suffix: {
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AddStorageAccountParameters = {
        serializedName: "AddStorageAccountParameters",
        type: {
            name: "Composite",
            className: "AddStorageAccountParameters",
            modelProperties: {
                accessKey: {
                    required: true,
                    serializedName: "properties.accessKey",
                    type: {
                        name: "String"
                    }
                },
                suffix: {
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateStorageAccountParameters = {
        serializedName: "UpdateStorageAccountParameters",
        type: {
            name: "Composite",
            className: "UpdateStorageAccountParameters",
            modelProperties: {
                accessKey: {
                    serializedName: "properties.accessKey",
                    type: {
                        name: "String"
                    }
                },
                suffix: {
                    serializedName: "properties.suffix",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CreateOrUpdateComputePolicyParameters = {
        serializedName: "CreateOrUpdateComputePolicyParameters",
        type: {
            name: "Composite",
            className: "CreateOrUpdateComputePolicyParameters",
            modelProperties: {
                objectId: {
                    required: true,
                    serializedName: "properties.objectId",
                    type: {
                        name: "Uuid"
                    }
                },
                objectType: {
                    required: true,
                    serializedName: "properties.objectType",
                    type: {
                        name: "String"
                    }
                },
                maxDegreeOfParallelismPerJob: {
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                minPriorityPerJob: {
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var UpdateComputePolicyParameters = {
        serializedName: "UpdateComputePolicyParameters",
        type: {
            name: "Composite",
            className: "UpdateComputePolicyParameters",
            modelProperties: {
                objectId: {
                    serializedName: "properties.objectId",
                    type: {
                        name: "Uuid"
                    }
                },
                objectType: {
                    serializedName: "properties.objectType",
                    type: {
                        name: "String"
                    }
                },
                maxDegreeOfParallelismPerJob: {
                    serializedName: "properties.maxDegreeOfParallelismPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                minPriorityPerJob: {
                    serializedName: "properties.minPriorityPerJob",
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CreateOrUpdateFirewallRuleParameters = {
        serializedName: "CreateOrUpdateFirewallRuleParameters",
        type: {
            name: "Composite",
            className: "CreateOrUpdateFirewallRuleParameters",
            modelProperties: {
                startIpAddress: {
                    required: true,
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    required: true,
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateFirewallRuleParameters = {
        serializedName: "UpdateFirewallRuleParameters",
        type: {
            name: "Composite",
            className: "UpdateFirewallRuleParameters",
            modelProperties: {
                startIpAddress: {
                    serializedName: "properties.startIpAddress",
                    type: {
                        name: "String"
                    }
                },
                endIpAddress: {
                    serializedName: "properties.endIpAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityParameters = {
        serializedName: "CheckNameAvailabilityParameters",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityParameters",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'Microsoft.DataLakeAnalytics/accounts',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorAdditionalInfo = {
        serializedName: "ErrorAdditionalInfo",
        type: {
            name: "Composite",
            className: "ErrorAdditionalInfo",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                info: {
                    readOnly: true,
                    serializedName: "info",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var ErrorDetail = {
        serializedName: "ErrorDetail",
        type: {
            name: "Composite",
            className: "ErrorDetail",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    readOnly: true,
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    readOnly: true,
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetail"
                            }
                        }
                    }
                },
                additionalInfo: {
                    readOnly: true,
                    serializedName: "additionalInfo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorAdditionalInfo"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorDetail"
                    }
                }
            }
        }
    };
    var DataLakeAnalyticsAccountListResult = {
        serializedName: "DataLakeAnalyticsAccountListResult",
        type: {
            name: "Composite",
            className: "DataLakeAnalyticsAccountListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataLakeAnalyticsAccountBasic"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DataLakeStoreAccountInformationListResult = {
        serializedName: "DataLakeStoreAccountInformationListResult",
        type: {
            name: "Composite",
            className: "DataLakeStoreAccountInformationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DataLakeStoreAccountInformation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageAccountInformationListResult = {
        serializedName: "StorageAccountInformationListResult",
        type: {
            name: "Composite",
            className: "StorageAccountInformationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageAccountInformation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageContainerListResult = {
        serializedName: "StorageContainerListResult",
        type: {
            name: "Composite",
            className: "StorageContainerListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StorageContainer"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SasTokenInformationListResult = {
        serializedName: "SasTokenInformationListResult",
        type: {
            name: "Composite",
            className: "SasTokenInformationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SasTokenInformation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ComputePolicyListResult = {
        serializedName: "ComputePolicyListResult",
        type: {
            name: "Composite",
            className: "ComputePolicyListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ComputePolicy"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FirewallRuleListResult = {
        serializedName: "FirewallRuleListResult",
        type: {
            name: "Composite",
            className: "FirewallRuleListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FirewallRule"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        SubResource: SubResource,
        DataLakeStoreAccountInformation: DataLakeStoreAccountInformation,
        StorageAccountInformation: StorageAccountInformation,
        ComputePolicy: ComputePolicy,
        HiveMetastore: HiveMetastore,
        VirtualNetworkRule: VirtualNetworkRule,
        FirewallRule: FirewallRule,
        DataLakeAnalyticsAccount: DataLakeAnalyticsAccount,
        DataLakeAnalyticsAccountBasic: DataLakeAnalyticsAccountBasic,
        StorageContainer: StorageContainer,
        SasTokenInformation: SasTokenInformation,
        VirtualNetworkRuleListResult: VirtualNetworkRuleListResult,
        HiveMetastoreListResult: HiveMetastoreListResult,
        OperationDisplay: OperationDisplay,
        OperationMetaMetricAvailabilitiesSpecification: OperationMetaMetricAvailabilitiesSpecification,
        OperationMetaMetricSpecification: OperationMetaMetricSpecification,
        OperationMetaLogSpecification: OperationMetaLogSpecification,
        OperationMetaServiceSpecification: OperationMetaServiceSpecification,
        OperationMetaPropertyInfo: OperationMetaPropertyInfo,
        Operation: Operation,
        OperationListResult: OperationListResult,
        CapabilityInformation: CapabilityInformation,
        NameAvailabilityInformation: NameAvailabilityInformation,
        AddDataLakeStoreWithAccountParameters: AddDataLakeStoreWithAccountParameters,
        AddStorageAccountWithAccountParameters: AddStorageAccountWithAccountParameters,
        CreateComputePolicyWithAccountParameters: CreateComputePolicyWithAccountParameters,
        CreateFirewallRuleWithAccountParameters: CreateFirewallRuleWithAccountParameters,
        CreateDataLakeAnalyticsAccountParameters: CreateDataLakeAnalyticsAccountParameters,
        UpdateDataLakeStoreWithAccountParameters: UpdateDataLakeStoreWithAccountParameters,
        UpdateStorageAccountWithAccountParameters: UpdateStorageAccountWithAccountParameters,
        UpdateComputePolicyWithAccountParameters: UpdateComputePolicyWithAccountParameters,
        UpdateFirewallRuleWithAccountParameters: UpdateFirewallRuleWithAccountParameters,
        UpdateDataLakeAnalyticsAccountParameters: UpdateDataLakeAnalyticsAccountParameters,
        AddDataLakeStoreParameters: AddDataLakeStoreParameters,
        AddStorageAccountParameters: AddStorageAccountParameters,
        UpdateStorageAccountParameters: UpdateStorageAccountParameters,
        CreateOrUpdateComputePolicyParameters: CreateOrUpdateComputePolicyParameters,
        UpdateComputePolicyParameters: UpdateComputePolicyParameters,
        CreateOrUpdateFirewallRuleParameters: CreateOrUpdateFirewallRuleParameters,
        UpdateFirewallRuleParameters: UpdateFirewallRuleParameters,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        DataLakeAnalyticsAccountListResult: DataLakeAnalyticsAccountListResult,
        DataLakeStoreAccountInformationListResult: DataLakeStoreAccountInformationListResult,
        StorageAccountInformationListResult: StorageAccountInformationListResult,
        StorageContainerListResult: StorageContainerListResult,
        SasTokenInformationListResult: SasTokenInformationListResult,
        ComputePolicyListResult: ComputePolicyListResult,
        FirewallRuleListResult: FirewallRuleListResult
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddDataLakeStoreWithAccountParameters: AddDataLakeStoreWithAccountParameters,
        AddStorageAccountWithAccountParameters: AddStorageAccountWithAccountParameters,
        BaseResource: BaseResource,
        CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
        ComputePolicy: ComputePolicy,
        CreateComputePolicyWithAccountParameters: CreateComputePolicyWithAccountParameters,
        CreateDataLakeAnalyticsAccountParameters: CreateDataLakeAnalyticsAccountParameters,
        CreateFirewallRuleWithAccountParameters: CreateFirewallRuleWithAccountParameters,
        DataLakeAnalyticsAccount: DataLakeAnalyticsAccount,
        DataLakeAnalyticsAccountBasic: DataLakeAnalyticsAccountBasic,
        DataLakeAnalyticsAccountListResult: DataLakeAnalyticsAccountListResult,
        DataLakeStoreAccountInformation: DataLakeStoreAccountInformation,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        FirewallRule: FirewallRule,
        HiveMetastore: HiveMetastore,
        NameAvailabilityInformation: NameAvailabilityInformation,
        Resource: Resource,
        StorageAccountInformation: StorageAccountInformation,
        StorageContainer: StorageContainer,
        SubResource: SubResource,
        UpdateComputePolicyWithAccountParameters: UpdateComputePolicyWithAccountParameters,
        UpdateDataLakeAnalyticsAccountParameters: UpdateDataLakeAnalyticsAccountParameters,
        UpdateDataLakeStoreWithAccountParameters: UpdateDataLakeStoreWithAccountParameters,
        UpdateFirewallRuleWithAccountParameters: UpdateFirewallRuleWithAccountParameters,
        UpdateStorageAccountWithAccountParameters: UpdateStorageAccountWithAccountParameters,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var accountName = {
        parameterPath: "accountName",
        mapper: {
            required: true,
            serializedName: "accountName",
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var computePolicyName = {
        parameterPath: "computePolicyName",
        mapper: {
            required: true,
            serializedName: "computePolicyName",
            type: {
                name: "String"
            }
        }
    };
    var containerName = {
        parameterPath: "containerName",
        mapper: {
            required: true,
            serializedName: "containerName",
            type: {
                name: "String"
            }
        }
    };
    var count = {
        parameterPath: [
            "options",
            "count"
        ],
        mapper: {
            serializedName: "$count",
            type: {
                name: "Boolean"
            }
        }
    };
    var dataLakeStoreAccountName = {
        parameterPath: "dataLakeStoreAccountName",
        mapper: {
            required: true,
            serializedName: "dataLakeStoreAccountName",
            type: {
                name: "String"
            }
        }
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var firewallRuleName = {
        parameterPath: "firewallRuleName",
        mapper: {
            required: true,
            serializedName: "firewallRuleName",
            type: {
                name: "String"
            }
        }
    };
    var location = {
        parameterPath: "location",
        mapper: {
            required: true,
            serializedName: "location",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var orderby = {
        parameterPath: [
            "options",
            "orderby"
        ],
        mapper: {
            serializedName: "$orderby",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var select = {
        parameterPath: [
            "options",
            "select"
        ],
        mapper: {
            serializedName: "$select",
            type: {
                name: "String"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "$skip",
            constraints: {
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };
    var storageAccountName = {
        parameterPath: "storageAccountName",
        mapper: {
            required: true,
            serializedName: "storageAccountName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var top = {
        parameterPath: [
            "options",
            "top"
        ],
        mapper: {
            serializedName: "$top",
            constraints: {
                InclusiveMinimum: 1
            },
            type: {
                name: "Number"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Accounts. */
    var Accounts = /** @class */ (function () {
        /**
         * Create a Accounts.
         * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
         */
        function Accounts(client) {
            this.client = client;
        }
        Accounts.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        /**
         * Creates the specified Data Lake Analytics account. This supplies the user with computation
         * services for Data Lake Analytics workloads.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Analytics account.
         * @param parameters Parameters supplied to create a new Data Lake Analytics account.
         * @param [options] The optional parameters
         * @returns Promise<Models.AccountsCreateResponse>
         */
        Accounts.prototype.create = function (resourceGroupName, accountName, parameters, options) {
            return this.beginCreate(resourceGroupName, accountName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Accounts.prototype.get = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Updates the Data Lake Analytics account object specified by the accountName with the contents of
         * the account object.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Analytics account.
         * @param [options] The optional parameters
         * @returns Promise<Models.AccountsUpdateResponse>
         */
        Accounts.prototype.update = function (resourceGroupName, accountName, options) {
            return this.beginUpdate(resourceGroupName, accountName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Begins the delete process for the Data Lake Analytics account object specified by the account
         * name.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Analytics account.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        Accounts.prototype.deleteMethod = function (resourceGroupName, accountName, options) {
            return this.beginDeleteMethod(resourceGroupName, accountName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Accounts.prototype.checkNameAvailability = function (location, parameters, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        /**
         * Creates the specified Data Lake Analytics account. This supplies the user with computation
         * services for Data Lake Analytics workloads.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Analytics account.
         * @param parameters Parameters supplied to create a new Data Lake Analytics account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Accounts.prototype.beginCreate = function (resourceGroupName, accountName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Updates the Data Lake Analytics account object specified by the accountName with the contents of
         * the account object.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Analytics account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Accounts.prototype.beginUpdate = function (resourceGroupName, accountName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Begins the delete process for the Data Lake Analytics account object specified by the account
         * name.
         * @param resourceGroupName The name of the Azure resource group.
         * @param accountName The name of the Data Lake Analytics account.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Accounts.prototype.beginDeleteMethod = function (resourceGroupName, accountName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        Accounts.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        Accounts.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        return Accounts;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/accounts",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeAnalyticsAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeAnalyticsAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeAnalyticsAccount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/locations/{location}/checkNameAvailability",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CheckNameAvailabilityParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NameAvailabilityInformation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CreateDataLakeAnalyticsAccountParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: DataLakeAnalyticsAccount
            },
            201: {
                bodyMapper: DataLakeAnalyticsAccount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateDataLakeAnalyticsAccountParameters
        },
        responses: {
            200: {
                bodyMapper: DataLakeAnalyticsAccount
            },
            201: {
                bodyMapper: DataLakeAnalyticsAccount
            },
            202: {
                bodyMapper: DataLakeAnalyticsAccount
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeAnalyticsAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeAnalyticsAccountListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddDataLakeStoreParameters: AddDataLakeStoreParameters,
        BaseResource: BaseResource,
        ComputePolicy: ComputePolicy,
        DataLakeAnalyticsAccount: DataLakeAnalyticsAccount,
        DataLakeAnalyticsAccountBasic: DataLakeAnalyticsAccountBasic,
        DataLakeStoreAccountInformation: DataLakeStoreAccountInformation,
        DataLakeStoreAccountInformationListResult: DataLakeStoreAccountInformationListResult,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        FirewallRule: FirewallRule,
        HiveMetastore: HiveMetastore,
        Resource: Resource,
        StorageAccountInformation: StorageAccountInformation,
        StorageContainer: StorageContainer,
        SubResource: SubResource,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a DataLakeStoreAccounts. */
    var DataLakeStoreAccounts = /** @class */ (function () {
        /**
         * Create a DataLakeStoreAccounts.
         * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
         */
        function DataLakeStoreAccounts(client) {
            this.client = client;
        }
        DataLakeStoreAccounts.prototype.listByAccount = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listByAccountOperationSpec, callback);
        };
        DataLakeStoreAccounts.prototype.add = function (resourceGroupName, accountName, dataLakeStoreAccountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                dataLakeStoreAccountName: dataLakeStoreAccountName,
                options: options
            }, addOperationSpec, callback);
        };
        DataLakeStoreAccounts.prototype.get = function (resourceGroupName, accountName, dataLakeStoreAccountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                dataLakeStoreAccountName: dataLakeStoreAccountName,
                options: options
            }, getOperationSpec$1, callback);
        };
        DataLakeStoreAccounts.prototype.deleteMethod = function (resourceGroupName, accountName, dataLakeStoreAccountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                dataLakeStoreAccountName: dataLakeStoreAccountName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        DataLakeStoreAccounts.prototype.listByAccountNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAccountNextOperationSpec, callback);
        };
        return DataLakeStoreAccounts;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listByAccountOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccountInformationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var addOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            dataLakeStoreAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: AddDataLakeStoreParameters
        },
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            dataLakeStoreAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccountInformation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            dataLakeStoreAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };
    var listByAccountNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: DataLakeStoreAccountInformationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddStorageAccountParameters: AddStorageAccountParameters,
        BaseResource: BaseResource,
        ComputePolicy: ComputePolicy,
        DataLakeAnalyticsAccount: DataLakeAnalyticsAccount,
        DataLakeAnalyticsAccountBasic: DataLakeAnalyticsAccountBasic,
        DataLakeStoreAccountInformation: DataLakeStoreAccountInformation,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        FirewallRule: FirewallRule,
        HiveMetastore: HiveMetastore,
        Resource: Resource,
        SasTokenInformation: SasTokenInformation,
        SasTokenInformationListResult: SasTokenInformationListResult,
        StorageAccountInformation: StorageAccountInformation,
        StorageAccountInformationListResult: StorageAccountInformationListResult,
        StorageContainer: StorageContainer,
        StorageContainerListResult: StorageContainerListResult,
        SubResource: SubResource,
        UpdateStorageAccountParameters: UpdateStorageAccountParameters,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a StorageAccounts. */
    var StorageAccounts = /** @class */ (function () {
        /**
         * Create a StorageAccounts.
         * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
         */
        function StorageAccounts(client) {
            this.client = client;
        }
        StorageAccounts.prototype.listByAccount = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listByAccountOperationSpec$1, callback);
        };
        StorageAccounts.prototype.add = function (resourceGroupName, accountName, storageAccountName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                storageAccountName: storageAccountName,
                parameters: parameters,
                options: options
            }, addOperationSpec$1, callback);
        };
        StorageAccounts.prototype.get = function (resourceGroupName, accountName, storageAccountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                storageAccountName: storageAccountName,
                options: options
            }, getOperationSpec$2, callback);
        };
        StorageAccounts.prototype.update = function (resourceGroupName, accountName, storageAccountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                storageAccountName: storageAccountName,
                options: options
            }, updateOperationSpec, callback);
        };
        StorageAccounts.prototype.deleteMethod = function (resourceGroupName, accountName, storageAccountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                storageAccountName: storageAccountName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        StorageAccounts.prototype.listStorageContainers = function (resourceGroupName, accountName, storageAccountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                storageAccountName: storageAccountName,
                options: options
            }, listStorageContainersOperationSpec, callback);
        };
        StorageAccounts.prototype.getStorageContainer = function (resourceGroupName, accountName, storageAccountName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                storageAccountName: storageAccountName,
                containerName: containerName,
                options: options
            }, getStorageContainerOperationSpec, callback);
        };
        StorageAccounts.prototype.listSasTokens = function (resourceGroupName, accountName, storageAccountName, containerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                storageAccountName: storageAccountName,
                containerName: containerName,
                options: options
            }, listSasTokensOperationSpec, callback);
        };
        StorageAccounts.prototype.listByAccountNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAccountNextOperationSpec$1, callback);
        };
        StorageAccounts.prototype.listStorageContainersNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listStorageContainersNextOperationSpec, callback);
        };
        StorageAccounts.prototype.listSasTokensNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listSasTokensNextOperationSpec, callback);
        };
        return StorageAccounts;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listByAccountOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountInformationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var addOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            storageAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AddStorageAccountParameters), { required: true })
        },
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            storageAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountInformation
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            storageAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateStorageAccountParameters
        },
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            storageAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listStorageContainersOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            storageAccountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageContainerListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var getStorageContainerOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            storageAccountName,
            containerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageContainer
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listSasTokensOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}/listSasTokens",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            storageAccountName,
            containerName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SasTokenInformationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listByAccountNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            filter,
            top,
            skip,
            select,
            orderby,
            count,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageAccountInformationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listStorageContainersNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StorageContainerListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };
    var listSasTokensNextOperationSpec = {
        httpMethod: "POST",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SasTokenInformationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        ComputePolicy: ComputePolicy,
        ComputePolicyListResult: ComputePolicyListResult,
        CreateOrUpdateComputePolicyParameters: CreateOrUpdateComputePolicyParameters,
        DataLakeAnalyticsAccount: DataLakeAnalyticsAccount,
        DataLakeAnalyticsAccountBasic: DataLakeAnalyticsAccountBasic,
        DataLakeStoreAccountInformation: DataLakeStoreAccountInformation,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        FirewallRule: FirewallRule,
        HiveMetastore: HiveMetastore,
        Resource: Resource,
        StorageAccountInformation: StorageAccountInformation,
        StorageContainer: StorageContainer,
        SubResource: SubResource,
        UpdateComputePolicyParameters: UpdateComputePolicyParameters,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ComputePolicies. */
    var ComputePolicies = /** @class */ (function () {
        /**
         * Create a ComputePolicies.
         * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
         */
        function ComputePolicies(client) {
            this.client = client;
        }
        ComputePolicies.prototype.listByAccount = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listByAccountOperationSpec$2, callback);
        };
        ComputePolicies.prototype.createOrUpdate = function (resourceGroupName, accountName, computePolicyName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                computePolicyName: computePolicyName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ComputePolicies.prototype.get = function (resourceGroupName, accountName, computePolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                computePolicyName: computePolicyName,
                options: options
            }, getOperationSpec$3, callback);
        };
        ComputePolicies.prototype.update = function (resourceGroupName, accountName, computePolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                computePolicyName: computePolicyName,
                options: options
            }, updateOperationSpec$1, callback);
        };
        ComputePolicies.prototype.deleteMethod = function (resourceGroupName, accountName, computePolicyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                computePolicyName: computePolicyName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ComputePolicies.prototype.listByAccountNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAccountNextOperationSpec$2, callback);
        };
        return ComputePolicies;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listByAccountOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComputePolicyListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            computePolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CreateOrUpdateComputePolicyParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ComputePolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            computePolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComputePolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            computePolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateComputePolicyParameters
        },
        responses: {
            200: {
                bodyMapper: ComputePolicy
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/computePolicies/{computePolicyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            computePolicyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };
    var listByAccountNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ComputePolicyListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BaseResource: BaseResource,
        ComputePolicy: ComputePolicy,
        CreateOrUpdateFirewallRuleParameters: CreateOrUpdateFirewallRuleParameters,
        DataLakeAnalyticsAccount: DataLakeAnalyticsAccount,
        DataLakeAnalyticsAccountBasic: DataLakeAnalyticsAccountBasic,
        DataLakeStoreAccountInformation: DataLakeStoreAccountInformation,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        FirewallRule: FirewallRule,
        FirewallRuleListResult: FirewallRuleListResult,
        HiveMetastore: HiveMetastore,
        Resource: Resource,
        StorageAccountInformation: StorageAccountInformation,
        StorageContainer: StorageContainer,
        SubResource: SubResource,
        UpdateFirewallRuleParameters: UpdateFirewallRuleParameters,
        VirtualNetworkRule: VirtualNetworkRule
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a FirewallRules. */
    var FirewallRules = /** @class */ (function () {
        /**
         * Create a FirewallRules.
         * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
         */
        function FirewallRules(client) {
            this.client = client;
        }
        FirewallRules.prototype.listByAccount = function (resourceGroupName, accountName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                options: options
            }, listByAccountOperationSpec$3, callback);
        };
        FirewallRules.prototype.createOrUpdate = function (resourceGroupName, accountName, firewallRuleName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                firewallRuleName: firewallRuleName,
                parameters: parameters,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        FirewallRules.prototype.get = function (resourceGroupName, accountName, firewallRuleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                firewallRuleName: firewallRuleName,
                options: options
            }, getOperationSpec$4, callback);
        };
        FirewallRules.prototype.update = function (resourceGroupName, accountName, firewallRuleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                firewallRuleName: firewallRuleName,
                options: options
            }, updateOperationSpec$2, callback);
        };
        FirewallRules.prototype.deleteMethod = function (resourceGroupName, accountName, firewallRuleName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                accountName: accountName,
                firewallRuleName: firewallRuleName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        FirewallRules.prototype.listByAccountNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByAccountNextOperationSpec$3, callback);
        };
        return FirewallRules;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var listByAccountOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, CreateOrUpdateFirewallRuleParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "parameters"
            ],
            mapper: UpdateFirewallRuleParameters
        },
        responses: {
            200: {
                bodyMapper: FirewallRule
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/firewallRules/{firewallRuleName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            accountName,
            firewallRuleName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };
    var listByAccountNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: FirewallRuleListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult,
        OperationMetaLogSpecification: OperationMetaLogSpecification,
        OperationMetaMetricAvailabilitiesSpecification: OperationMetaMetricAvailabilitiesSpecification,
        OperationMetaMetricSpecification: OperationMetaMetricSpecification,
        OperationMetaPropertyInfo: OperationMetaPropertyInfo,
        OperationMetaServiceSpecification: OperationMetaServiceSpecification
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DataLakeAnalytics/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CapabilityInformation: CapabilityInformation,
        ErrorAdditionalInfo: ErrorAdditionalInfo,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Locations. */
    var Locations = /** @class */ (function () {
        /**
         * Create a Locations.
         * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
         */
        function Locations(client) {
            this.client = client;
        }
        Locations.prototype.getCapability = function (location, options, callback) {
            return this.client.sendOperationRequest({
                location: location,
                options: options
            }, getCapabilityOperationSpec, callback);
        };
        return Locations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var getCapabilityOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/locations/{location}/capability",
        urlParameters: [
            subscriptionId,
            location
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CapabilityInformation
            },
            404: {},
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-datalake-analytics";
    var packageVersion = "1.1.1";
    var DataLakeAnalyticsAccountManagementClientContext = /** @class */ (function (_super) {
        __extends(DataLakeAnalyticsAccountManagementClientContext, _super);
        /**
         * Initializes a new instance of the DataLakeAnalyticsAccountManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Get subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function DataLakeAnalyticsAccountManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-11-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return DataLakeAnalyticsAccountManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var DataLakeAnalyticsAccountManagementClient = /** @class */ (function (_super) {
        __extends(DataLakeAnalyticsAccountManagementClient, _super);
        /**
         * Initializes a new instance of the DataLakeAnalyticsAccountManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Get subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function DataLakeAnalyticsAccountManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.accounts = new Accounts(_this);
            _this.dataLakeStoreAccounts = new DataLakeStoreAccounts(_this);
            _this.storageAccounts = new StorageAccounts(_this);
            _this.computePolicies = new ComputePolicies(_this);
            _this.firewallRules = new FirewallRules(_this);
            _this.operations = new Operations(_this);
            _this.locations = new Locations(_this);
            return _this;
        }
        return DataLakeAnalyticsAccountManagementClient;
    }(DataLakeAnalyticsAccountManagementClientContext));

    exports.Accounts = Accounts;
    exports.ComputePolicies = ComputePolicies;
    exports.DataLakeAnalyticsAccountManagementClient = DataLakeAnalyticsAccountManagementClient;
    exports.DataLakeAnalyticsAccountManagementClientContext = DataLakeAnalyticsAccountManagementClientContext;
    exports.DataLakeAnalyticsAccountManagementMappers = mappers;
    exports.DataLakeAnalyticsAccountManagementModels = index;
    exports.DataLakeStoreAccounts = DataLakeStoreAccounts;
    exports.FirewallRules = FirewallRules;
    exports.Locations = Locations;
    exports.Operations = Operations;
    exports.StorageAccounts = StorageAccounts;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-datalake-analytics.js.map
