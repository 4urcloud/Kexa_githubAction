'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link SelectorType} that the service accepts. */
exports.KnownSelectorType = void 0;
(function (KnownSelectorType) {
    /** List */
    KnownSelectorType["List"] = "List";
    /** Query */
    KnownSelectorType["Query"] = "Query";
})(exports.KnownSelectorType || (exports.KnownSelectorType = {}));
/** Known values of {@link FilterType} that the service accepts. */
exports.KnownFilterType = void 0;
(function (KnownFilterType) {
    /** Simple */
    KnownFilterType["Simple"] = "Simple";
})(exports.KnownFilterType || (exports.KnownFilterType = {}));
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link TargetReferenceType} that the service accepts. */
exports.KnownTargetReferenceType = void 0;
(function (KnownTargetReferenceType) {
    /** ChaosTarget */
    KnownTargetReferenceType["ChaosTarget"] = "ChaosTarget";
})(exports.KnownTargetReferenceType || (exports.KnownTargetReferenceType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const CapabilityListResult = {
    type: {
        name: "Composite",
        className: "CapabilityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Capability"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const CapabilityTypeListResult = {
    type: {
        name: "Composite",
        className: "CapabilityTypeListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CapabilityType"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CapabilityTypePropertiesRuntimeProperties = {
    type: {
        name: "Composite",
        className: "CapabilityTypePropertiesRuntimeProperties",
        modelProperties: {
            kind: {
                serializedName: "kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExperimentListResult = {
    type: {
        name: "Composite",
        className: "ExperimentListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Experiment"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceIdentity = {
    type: {
        name: "Composite",
        className: "ResourceIdentity",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "SystemAssigned", "UserAssigned"]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            },
            principalId: {
                constraints: {
                    Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
                },
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                constraints: {
                    Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
                },
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
const ChaosExperimentStep = {
    type: {
        name: "Composite",
        className: "ChaosExperimentStep",
        modelProperties: {
            name: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            branches: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 9
                },
                serializedName: "branches",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosExperimentBranch"
                        }
                    }
                }
            }
        }
    }
};
const ChaosExperimentBranch = {
    type: {
        name: "Composite",
        className: "ChaosExperimentBranch",
        modelProperties: {
            name: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            actions: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 9
                },
                serializedName: "actions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosExperimentAction"
                        }
                    }
                }
            }
        }
    }
};
const ChaosExperimentAction = {
    type: {
        name: "Composite",
        className: "ChaosExperimentAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ChaosTargetSelector = {
    serializedName: "ChaosTargetSelector",
    type: {
        name: "Composite",
        className: "ChaosTargetSelector",
        uberParent: "ChaosTargetSelector",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            filter: {
                serializedName: "filter",
                type: {
                    name: "Composite",
                    className: "ChaosTargetFilter"
                }
            }
        }
    }
};
const ChaosTargetFilter = {
    type: {
        name: "Composite",
        className: "ChaosTargetFilter",
        uberParent: "ChaosTargetFilter",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExperimentUpdate = {
    type: {
        name: "Composite",
        className: "ExperimentUpdate",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            }
        }
    }
};
const ExperimentExecutionListResult = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExperimentExecution"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExperimentExecution = {
    type: {
        name: "Composite",
        className: "ExperimentExecution",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startedAt: {
                serializedName: "properties.startedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            stoppedAt: {
                serializedName: "properties.stoppedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ExperimentExecutionProperties = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionProperties",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startedAt: {
                serializedName: "startedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            stoppedAt: {
                serializedName: "stoppedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ExperimentExecutionDetails = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionDetails",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startedAt: {
                serializedName: "properties.startedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            stoppedAt: {
                serializedName: "properties.stoppedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            failureReason: {
                serializedName: "properties.failureReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastActionAt: {
                serializedName: "properties.lastActionAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            runInformation: {
                serializedName: "properties.runInformation",
                type: {
                    name: "Composite",
                    className: "ExperimentExecutionDetailsPropertiesRunInformation"
                }
            }
        }
    }
};
const ExperimentExecutionDetailsPropertiesRunInformation = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionDetailsPropertiesRunInformation",
        modelProperties: {
            steps: {
                serializedName: "steps",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StepStatus"
                        }
                    }
                }
            }
        }
    }
};
const StepStatus = {
    type: {
        name: "Composite",
        className: "StepStatus",
        modelProperties: {
            stepName: {
                serializedName: "stepName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            stepId: {
                serializedName: "stepId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            branches: {
                serializedName: "branches",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BranchStatus"
                        }
                    }
                }
            }
        }
    }
};
const BranchStatus = {
    type: {
        name: "Composite",
        className: "BranchStatus",
        modelProperties: {
            branchName: {
                serializedName: "branchName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            branchId: {
                serializedName: "branchId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "actions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActionStatus"
                        }
                    }
                }
            }
        }
    }
};
const ActionStatus = {
    type: {
        name: "Composite",
        className: "ActionStatus",
        modelProperties: {
            actionName: {
                serializedName: "actionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionId: {
                serializedName: "actionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            targets: {
                serializedName: "targets",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExperimentExecutionActionTargetDetailsProperties"
                        }
                    }
                }
            }
        }
    }
};
const ExperimentExecutionActionTargetDetailsProperties = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionActionTargetDetailsProperties",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            targetFailedTime: {
                serializedName: "targetFailedTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            targetCompletedTime: {
                serializedName: "targetCompletedTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ExperimentExecutionActionTargetDetailsError"
                }
            }
        }
    }
};
const ExperimentExecutionActionTargetDetailsError = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionActionTargetDetailsError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetTypeListResult = {
    type: {
        name: "Composite",
        className: "TargetTypeListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetType"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetListResult = {
    type: {
        name: "Composite",
        className: "TargetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Target"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyValuePair = {
    type: {
        name: "Composite",
        className: "KeyValuePair",
        modelProperties: {
            key: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TargetReference = {
    type: {
        name: "Composite",
        className: "TargetReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                constraints: {
                    Pattern: new RegExp("^\\/[Ss][Uu][Bb][Ss][Cc][Rr][Ii][Pp][Tt][Ii][Oo][Nn][Ss]\\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\/[Rr][Ee][Ss][Oo][Uu][Rr][Cc][Ee][Gg][Rr][Oo][Uu][Pp][Ss]\\/[a-zA-Z0-9_\\-\\.\\(\\)]*[a-zA-Z0-9_\\-\\(\\)]\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\/[a-zA-Z0-9_\\-\\.]+\\/[a-zA-Z0-9_\\-\\.]+\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[Mm][Ii][Cc][Rr][Oo][Ss][Oo][Ff][Tt]\\.[Cc][Hh][Aa][Oo][Ss]\\/[Tt][Aa][Rr][Gg][Ee][Tt][Ss]\\/[a-zA-Z0-9_\\-\\.]+$")
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ChaosTargetSimpleFilterParameters = {
    type: {
        name: "Composite",
        className: "ChaosTargetSimpleFilterParameters",
        modelProperties: {
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Capability = {
    type: {
        name: "Composite",
        className: "Capability",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, publisher: {
                serializedName: "properties.publisher",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, targetType: {
                serializedName: "properties.targetType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parametersSchema: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.parametersSchema",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, urn: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.urn",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const CapabilityType = {
    type: {
        name: "Composite",
        className: "CapabilityType",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, publisher: {
                serializedName: "properties.publisher",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, targetType: {
                serializedName: "properties.targetType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parametersSchema: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.parametersSchema",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, urn: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.urn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "properties.kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azureRbacActions: {
                serializedName: "properties.azureRbacActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, azureRbacDataActions: {
                serializedName: "properties.azureRbacDataActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, runtimeProperties: {
                serializedName: "properties.runtimeProperties",
                type: {
                    name: "Composite",
                    className: "CapabilityTypePropertiesRuntimeProperties"
                }
            } })
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const TargetType = {
    type: {
        name: "Composite",
        className: "TargetType",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, propertiesSchema: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.propertiesSchema",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceTypes: {
                serializedName: "properties.resourceTypes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Target = {
    type: {
        name: "Composite",
        className: "Target",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const OperationStatus = {
    type: {
        name: "Composite",
        className: "OperationStatus",
        modelProperties: Object.assign(Object.assign({}, ErrorResponse.type.modelProperties), { id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }, name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            }, endTime: {
                serializedName: "endTime",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            } })
    }
};
const DelayAction = {
    serializedName: "delay",
    type: {
        name: "Composite",
        className: "DelayAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: ChaosExperimentAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosExperimentAction.type.modelProperties), { duration: {
                serializedName: "duration",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            } })
    }
};
const DiscreteAction = {
    serializedName: "discrete",
    type: {
        name: "Composite",
        className: "DiscreteAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: ChaosExperimentAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosExperimentAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyValuePair"
                        }
                    }
                }
            }, selectorId: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "selectorId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ContinuousAction = {
    serializedName: "continuous",
    type: {
        name: "Composite",
        className: "ContinuousAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: ChaosExperimentAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosExperimentAction.type.modelProperties), { duration: {
                serializedName: "duration",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }, parameters: {
                serializedName: "parameters",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyValuePair"
                        }
                    }
                }
            }, selectorId: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "selectorId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ChaosTargetListSelector = {
    serializedName: "List",
    type: {
        name: "Composite",
        className: "ChaosTargetListSelector",
        uberParent: "ChaosTargetSelector",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ChaosTargetSelector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosTargetSelector.type.modelProperties), { targets: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 50
                },
                serializedName: "targets",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetReference"
                        }
                    }
                }
            } })
    }
};
const ChaosTargetQuerySelector = {
    serializedName: "Query",
    type: {
        name: "Composite",
        className: "ChaosTargetQuerySelector",
        uberParent: "ChaosTargetSelector",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ChaosTargetSelector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosTargetSelector.type.modelProperties), { queryString: {
                serializedName: "queryString",
                required: true,
                type: {
                    name: "String"
                }
            }, subscriptionIds: {
                constraints: {
                    MinItems: 1
                },
                serializedName: "subscriptionIds",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ChaosTargetSimpleFilter = {
    serializedName: "Simple",
    type: {
        name: "Composite",
        className: "ChaosTargetSimpleFilter",
        uberParent: "ChaosTargetFilter",
        polymorphicDiscriminator: ChaosTargetFilter.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosTargetFilter.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ChaosTargetSimpleFilterParameters"
                }
            } })
    }
};
const ExperimentExecutionDetailsProperties = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionDetailsProperties",
        modelProperties: Object.assign(Object.assign({}, ExperimentExecutionProperties.type.modelProperties), { failureReason: {
                serializedName: "failureReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastActionAt: {
                serializedName: "lastActionAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, runInformation: {
                serializedName: "runInformation",
                type: {
                    name: "Composite",
                    className: "ExperimentExecutionDetailsPropertiesRunInformation"
                }
            } })
    }
};
const Experiment = {
    type: {
        name: "Composite",
        className: "Experiment",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, steps: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 4
                },
                serializedName: "properties.steps",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosExperimentStep"
                        }
                    }
                }
            }, selectors: {
                constraints: {
                    MinItems: 1
                },
                serializedName: "properties.selectors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosTargetSelector"
                        }
                    }
                }
            } })
    }
};
let discriminators = {
    ChaosExperimentAction: ChaosExperimentAction,
    ChaosTargetSelector: ChaosTargetSelector,
    ChaosTargetFilter: ChaosTargetFilter,
    "ChaosExperimentAction.delay": DelayAction,
    "ChaosExperimentAction.discrete": DiscreteAction,
    "ChaosExperimentAction.continuous": ContinuousAction,
    "ChaosTargetSelector.List": ChaosTargetListSelector,
    "ChaosTargetSelector.Query": ChaosTargetQuerySelector,
    "ChaosTargetFilter.Simple": ChaosTargetSimpleFilter
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ActionStatus: ActionStatus,
    BranchStatus: BranchStatus,
    Capability: Capability,
    CapabilityListResult: CapabilityListResult,
    CapabilityType: CapabilityType,
    CapabilityTypeListResult: CapabilityTypeListResult,
    CapabilityTypePropertiesRuntimeProperties: CapabilityTypePropertiesRuntimeProperties,
    ChaosExperimentAction: ChaosExperimentAction,
    ChaosExperimentBranch: ChaosExperimentBranch,
    ChaosExperimentStep: ChaosExperimentStep,
    ChaosTargetFilter: ChaosTargetFilter,
    ChaosTargetListSelector: ChaosTargetListSelector,
    ChaosTargetQuerySelector: ChaosTargetQuerySelector,
    ChaosTargetSelector: ChaosTargetSelector,
    ChaosTargetSimpleFilter: ChaosTargetSimpleFilter,
    ChaosTargetSimpleFilterParameters: ChaosTargetSimpleFilterParameters,
    ContinuousAction: ContinuousAction,
    DelayAction: DelayAction,
    DiscreteAction: DiscreteAction,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ErrorDetail: ErrorDetail,
    ErrorResponse: ErrorResponse,
    Experiment: Experiment,
    ExperimentExecution: ExperimentExecution,
    ExperimentExecutionActionTargetDetailsError: ExperimentExecutionActionTargetDetailsError,
    ExperimentExecutionActionTargetDetailsProperties: ExperimentExecutionActionTargetDetailsProperties,
    ExperimentExecutionDetails: ExperimentExecutionDetails,
    ExperimentExecutionDetailsProperties: ExperimentExecutionDetailsProperties,
    ExperimentExecutionDetailsPropertiesRunInformation: ExperimentExecutionDetailsPropertiesRunInformation,
    ExperimentExecutionListResult: ExperimentExecutionListResult,
    ExperimentExecutionProperties: ExperimentExecutionProperties,
    ExperimentListResult: ExperimentListResult,
    ExperimentUpdate: ExperimentUpdate,
    KeyValuePair: KeyValuePair,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    OperationListResult: OperationListResult,
    OperationStatus: OperationStatus,
    Resource: Resource,
    ResourceIdentity: ResourceIdentity,
    StepStatus: StepStatus,
    SystemData: SystemData,
    Target: Target,
    TargetListResult: TargetListResult,
    TargetReference: TargetReference,
    TargetType: TargetType,
    TargetTypeListResult: TargetTypeListResult,
    TrackedResource: TrackedResource,
    UserAssignedIdentity: UserAssignedIdentity,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.\\(\\)]*[a-zA-Z0-9_\\-\\(\\)]$")
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parentProviderNamespace = {
    parameterPath: "parentProviderNamespace",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$")
        },
        serializedName: "parentProviderNamespace",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parentResourceType = {
    parameterPath: "parentResourceType",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "parentResourceType",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parentResourceName = {
    parameterPath: "parentResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "parentResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const targetName = {
    parameterPath: "targetName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "targetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const continuationToken = {
    parameterPath: ["options", "continuationToken"],
    mapper: {
        serializedName: "continuationToken",
        type: {
            name: "String"
        }
    }
};
const capabilityName = {
    parameterPath: "capabilityName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$")
        },
        serializedName: "capabilityName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const capability = {
    parameterPath: "capability",
    mapper: Capability
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const locationName = {
    parameterPath: "locationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const targetTypeName = {
    parameterPath: "targetTypeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "targetTypeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const capabilityTypeName = {
    parameterPath: "capabilityTypeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$")
        },
        serializedName: "capabilityTypeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const running = {
    parameterPath: ["options", "running"],
    mapper: {
        serializedName: "running",
        type: {
            name: "Boolean"
        }
    }
};
const experimentName = {
    parameterPath: "experimentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^<>%&:?#/\\\\]+$"),
            MinLength: 1
        },
        serializedName: "experimentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const experiment = {
    parameterPath: "experiment",
    mapper: Experiment
};
const experiment1 = {
    parameterPath: "experiment",
    mapper: ExperimentUpdate
};
const executionId = {
    parameterPath: "executionId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
        },
        serializedName: "executionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const asyncOperationId = {
    parameterPath: "asyncOperationId",
    mapper: {
        serializedName: "asyncOperationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const target = {
    parameterPath: "target",
    mapper: Target
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Capabilities operations. */
class CapabilitiesImpl {
    /**
     * Initialize a new instance of the class Capabilities class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Capability resources that extend a Target resource..
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param options The options parameters.
     */
    list(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options) {
        const iter = this.listPagingAll(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Capability resources that extend a Target resource..
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            options
        }, listOperationSpec$4);
    }
    /**
     * Get a Capability resource that extends a Target resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param options The options parameters.
     */
    get(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, capabilityName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            capabilityName,
            options
        }, getOperationSpec$5);
    }
    /**
     * Delete a Capability that extends a Target resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, capabilityName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            capabilityName,
            options
        }, deleteOperationSpec$2);
    }
    /**
     * Create or update a Capability resource that extends a Target resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param capability Capability resource to be created or updated.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, capabilityName, capability, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            capabilityName,
            capability,
            options
        }, createOrUpdateOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            nextLink,
            options
        }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}/capabilities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CapabilityListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, continuationToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}/capabilities/{capabilityName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Capability
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName,
        capabilityName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}/capabilities/{capabilityName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName,
        capabilityName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}/capabilities/{capabilityName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Capability
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: capability,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName,
        capabilityName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CapabilityListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CapabilityTypes operations. */
class CapabilityTypesImpl {
    /**
     * Initialize a new instance of the class CapabilityTypes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Capability Type resources for given Target Type and location.
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param options The options parameters.
     */
    list(locationName, targetTypeName, options) {
        const iter = this.listPagingAll(locationName, targetTypeName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(locationName, targetTypeName, options, settings);
            }
        };
    }
    listPagingPage(locationName, targetTypeName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(locationName, targetTypeName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(locationName, targetTypeName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(locationName, targetTypeName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(locationName, targetTypeName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Capability Type resources for given Target Type and location.
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param options The options parameters.
     */
    _list(locationName, targetTypeName, options) {
        return this.client.sendOperationRequest({ locationName, targetTypeName, options }, listOperationSpec$3);
    }
    /**
     * Get a Capability Type resource for given Target Type and location.
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param capabilityTypeName String that represents a Capability Type resource name.
     * @param options The options parameters.
     */
    get(locationName, targetTypeName, capabilityTypeName, options) {
        return this.client.sendOperationRequest({ locationName, targetTypeName, capabilityTypeName, options }, getOperationSpec$4);
    }
    /**
     * ListNext
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(locationName, targetTypeName, nextLink, options) {
        return this.client.sendOperationRequest({ locationName, targetTypeName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{locationName}/targetTypes/{targetTypeName}/capabilityTypes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CapabilityTypeListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, continuationToken],
    urlParameters: [
        $host,
        subscriptionId,
        locationName,
        targetTypeName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{locationName}/targetTypes/{targetTypeName}/capabilityTypes/{capabilityTypeName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CapabilityType
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        locationName,
        targetTypeName,
        capabilityTypeName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CapabilityTypeListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        locationName,
        targetTypeName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Experiments operations. */
class ExperimentsImpl {
    /**
     * Initialize a new instance of the class Experiments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Experiment resources in a subscription.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listAllPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Experiment resources in a resource group.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a list of executions of an Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    listAllExecutions(resourceGroupName, experimentName, options) {
        const iter = this.listAllExecutionsPagingAll(resourceGroupName, experimentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllExecutionsPagingPage(resourceGroupName, experimentName, options, settings);
            }
        };
    }
    listAllExecutionsPagingPage(resourceGroupName, experimentName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllExecutionsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAllExecutions(resourceGroupName, experimentName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllExecutionsNext(resourceGroupName, experimentName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllExecutionsPagingAll(resourceGroupName, experimentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllExecutionsPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listAllExecutionsPagingPage(resourceGroupName, experimentName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get a list of Experiment resources in a subscription.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec$1);
    }
    /**
     * Get a list of Experiment resources in a resource group.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$2);
    }
    /**
     * Delete a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, experimentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, experimentName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, experimentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, experimentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    get(resourceGroupName, experimentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, experimentName, options }, getOperationSpec$3);
    }
    /**
     * Create or update a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Experiment resource to be created or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, experimentName, experiment, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, experimentName, experiment, options },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Experiment resource to be created or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, experimentName, experiment, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, experimentName, experiment, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update an experiment.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Parameters supplied to the Update experiment operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, experimentName, experiment, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, experimentName, experiment, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update an experiment.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Parameters supplied to the Update experiment operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, experimentName, experiment, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, experimentName, experiment, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Cancel a running Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName, experimentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, experimentName, options },
                spec: cancelOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Cancel a running Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName, experimentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCancel(resourceGroupName, experimentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Start a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, experimentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, experimentName, options },
                spec: startOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Start a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, experimentName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, experimentName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a list of executions of an Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    _listAllExecutions(resourceGroupName, experimentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, experimentName, options }, listAllExecutionsOperationSpec);
    }
    /**
     * Get an execution of an Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param executionId GUID that represents a Experiment execution detail.
     * @param options The options parameters.
     */
    getExecution(resourceGroupName, experimentName, executionId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, experimentName, executionId, options }, getExecutionOperationSpec);
    }
    /**
     * Execution details of an experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param executionId GUID that represents a Experiment execution detail.
     * @param options The options parameters.
     */
    executionDetails(resourceGroupName, experimentName, executionId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, experimentName, executionId, options }, executionDetailsOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName String that represents an Azure resource group.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec$2);
    }
    /**
     * ListAllExecutionsNext
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param nextLink The nextLink from the previous successful call to the ListAllExecutions method.
     * @param options The options parameters.
     */
    _listAllExecutionsNext(resourceGroupName, experimentName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, experimentName, nextLink, options }, listAllExecutionsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAllOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/experiments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExperimentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        continuationToken,
        running
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExperimentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        continuationToken,
        running
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Experiment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Experiment
        },
        201: {
            bodyMapper: Experiment
        },
        202: {
            bodyMapper: Experiment
        },
        204: {
            bodyMapper: Experiment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: experiment,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Experiment
        },
        201: {
            bodyMapper: Experiment
        },
        202: {
            bodyMapper: Experiment
        },
        204: {
            bodyMapper: Experiment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: experiment1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listAllExecutionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExperimentExecutionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getExecutionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExperimentExecution
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName,
        executionId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const executionDetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Chaos/experiments/{experimentName}/executions/{executionId}/getExecutionDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ExperimentExecutionDetails
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        experimentName,
        executionId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listAllNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExperimentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExperimentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listAllExecutionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExperimentExecutionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        experimentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationStatuses operations. */
class OperationStatusesImpl {
    /**
     * Initialize a new instance of the class OperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the status of a long running azure asynchronous operation.
     * @param location The region name of operation.
     * @param asyncOperationId The operation Id.
     * @param options The options parameters.
     */
    get(location, asyncOperationId, options) {
        return this.client.sendOperationRequest({ location, asyncOperationId, options }, getOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{location}/operationsStatuses/{asyncOperationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location,
        asyncOperationId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list all available Operations.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listAllPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list all available Operations.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAllOperationSpec = {
    path: "/providers/Microsoft.Chaos/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing TargetTypes operations. */
class TargetTypesImpl {
    /**
     * Initialize a new instance of the class TargetTypes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Target Type resources for given location.
     * @param locationName String that represents a Location resource name.
     * @param options The options parameters.
     */
    list(locationName, options) {
        const iter = this.listPagingAll(locationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(locationName, options, settings);
            }
        };
    }
    listPagingPage(locationName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(locationName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(locationName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(locationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(locationName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Target Type resources for given location.
     * @param locationName String that represents a Location resource name.
     * @param options The options parameters.
     */
    _list(locationName, options) {
        return this.client.sendOperationRequest({ locationName, options }, listOperationSpec$1);
    }
    /**
     * Get a Target Type resources for given location.
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param options The options parameters.
     */
    get(locationName, targetTypeName, options) {
        return this.client.sendOperationRequest({ locationName, targetTypeName, options }, getOperationSpec$1);
    }
    /**
     * ListNext
     * @param locationName String that represents a Location resource name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(locationName, nextLink, options) {
        return this.client.sendOperationRequest({ locationName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{locationName}/targetTypes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TargetTypeListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, continuationToken],
    urlParameters: [
        $host,
        subscriptionId,
        locationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Chaos/locations/{locationName}/targetTypes/{targetTypeName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TargetType
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        locationName,
        targetTypeName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TargetTypeListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        locationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Targets operations. */
class TargetsImpl {
    /**
     * Initialize a new instance of the class Targets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Target resources that extend a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param options The options parameters.
     */
    list(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options) {
        const iter = this.listPagingAll(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Target resources that extend a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param options The options parameters.
     */
    _list(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            options
        }, listOperationSpec);
    }
    /**
     * Get a Target resource that extends a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param options The options parameters.
     */
    get(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            options
        }, getOperationSpec);
    }
    /**
     * Delete a Target resource that extends a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            options
        }, deleteOperationSpec);
    }
    /**
     * Create or update a Target resource that extends a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param target Target resource to be created or updated.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, targetName, target, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            targetName,
            target,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, parentProviderNamespace, parentResourceType, parentResourceName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            parentProviderNamespace,
            parentResourceType,
            parentResourceName,
            nextLink,
            options
        }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TargetListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, continuationToken],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Target
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName
    ],
    headerParameters: [accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{parentProviderNamespace}/{parentResourceType}/{parentResourceName}/providers/Microsoft.Chaos/targets/{targetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Target
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: target,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        targetName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TargetListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        parentProviderNamespace,
        parentResourceType,
        parentResourceName,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ChaosManagementClient extends coreClient__namespace.ServiceClient {
    constructor(credentials, subscriptionIdOrOptions, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        let subscriptionId;
        if (typeof subscriptionIdOrOptions === "string") {
            subscriptionId = subscriptionIdOrOptions;
        }
        else if (typeof subscriptionIdOrOptions === "object") {
            options = subscriptionIdOrOptions;
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-chaos/1.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-11-01";
        this.capabilities = new CapabilitiesImpl(this);
        this.capabilityTypes = new CapabilityTypesImpl(this);
        this.experiments = new ExperimentsImpl(this);
        this.operationStatuses = new OperationStatusesImpl(this);
        this.operations = new OperationsImpl(this);
        this.targetTypes = new TargetTypesImpl(this);
        this.targets = new TargetsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.ChaosManagementClient = ChaosManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
