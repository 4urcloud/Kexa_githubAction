/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const CapabilityListResult = {
    type: {
        name: "Composite",
        className: "CapabilityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Capability"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
export const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
export const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const CapabilityTypeListResult = {
    type: {
        name: "Composite",
        className: "CapabilityTypeListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CapabilityType"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CapabilityTypePropertiesRuntimeProperties = {
    type: {
        name: "Composite",
        className: "CapabilityTypePropertiesRuntimeProperties",
        modelProperties: {
            kind: {
                serializedName: "kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ExperimentListResult = {
    type: {
        name: "Composite",
        className: "ExperimentListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Experiment"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ResourceIdentity = {
    type: {
        name: "Composite",
        className: "ResourceIdentity",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["None", "SystemAssigned", "UserAssigned"]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            },
            principalId: {
                constraints: {
                    Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
                },
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                constraints: {
                    Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
                },
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }
        }
    }
};
export const ChaosExperimentStep = {
    type: {
        name: "Composite",
        className: "ChaosExperimentStep",
        modelProperties: {
            name: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            branches: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 9
                },
                serializedName: "branches",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosExperimentBranch"
                        }
                    }
                }
            }
        }
    }
};
export const ChaosExperimentBranch = {
    type: {
        name: "Composite",
        className: "ChaosExperimentBranch",
        modelProperties: {
            name: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            actions: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 9
                },
                serializedName: "actions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosExperimentAction"
                        }
                    }
                }
            }
        }
    }
};
export const ChaosExperimentAction = {
    type: {
        name: "Composite",
        className: "ChaosExperimentAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ChaosTargetSelector = {
    serializedName: "ChaosTargetSelector",
    type: {
        name: "Composite",
        className: "ChaosTargetSelector",
        uberParent: "ChaosTargetSelector",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            filter: {
                serializedName: "filter",
                type: {
                    name: "Composite",
                    className: "ChaosTargetFilter"
                }
            }
        }
    }
};
export const ChaosTargetFilter = {
    type: {
        name: "Composite",
        className: "ChaosTargetFilter",
        uberParent: "ChaosTargetFilter",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ExperimentUpdate = {
    type: {
        name: "Composite",
        className: "ExperimentUpdate",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            }
        }
    }
};
export const ExperimentExecutionListResult = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExperimentExecution"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ExperimentExecution = {
    type: {
        name: "Composite",
        className: "ExperimentExecution",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startedAt: {
                serializedName: "properties.startedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            stoppedAt: {
                serializedName: "properties.stoppedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const ExperimentExecutionProperties = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionProperties",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startedAt: {
                serializedName: "startedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            stoppedAt: {
                serializedName: "stoppedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const ExperimentExecutionDetails = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionDetails",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startedAt: {
                serializedName: "properties.startedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            stoppedAt: {
                serializedName: "properties.stoppedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            failureReason: {
                serializedName: "properties.failureReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastActionAt: {
                serializedName: "properties.lastActionAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            runInformation: {
                serializedName: "properties.runInformation",
                type: {
                    name: "Composite",
                    className: "ExperimentExecutionDetailsPropertiesRunInformation"
                }
            }
        }
    }
};
export const ExperimentExecutionDetailsPropertiesRunInformation = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionDetailsPropertiesRunInformation",
        modelProperties: {
            steps: {
                serializedName: "steps",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StepStatus"
                        }
                    }
                }
            }
        }
    }
};
export const StepStatus = {
    type: {
        name: "Composite",
        className: "StepStatus",
        modelProperties: {
            stepName: {
                serializedName: "stepName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            stepId: {
                serializedName: "stepId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            branches: {
                serializedName: "branches",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BranchStatus"
                        }
                    }
                }
            }
        }
    }
};
export const BranchStatus = {
    type: {
        name: "Composite",
        className: "BranchStatus",
        modelProperties: {
            branchName: {
                serializedName: "branchName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            branchId: {
                serializedName: "branchId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "actions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActionStatus"
                        }
                    }
                }
            }
        }
    }
};
export const ActionStatus = {
    type: {
        name: "Composite",
        className: "ActionStatus",
        modelProperties: {
            actionName: {
                serializedName: "actionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionId: {
                serializedName: "actionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            targets: {
                serializedName: "targets",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExperimentExecutionActionTargetDetailsProperties"
                        }
                    }
                }
            }
        }
    }
};
export const ExperimentExecutionActionTargetDetailsProperties = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionActionTargetDetailsProperties",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            targetFailedTime: {
                serializedName: "targetFailedTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            targetCompletedTime: {
                serializedName: "targetCompletedTime",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ExperimentExecutionActionTargetDetailsError"
                }
            }
        }
    }
};
export const ExperimentExecutionActionTargetDetailsError = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionActionTargetDetailsError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TargetTypeListResult = {
    type: {
        name: "Composite",
        className: "TargetTypeListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetType"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TargetListResult = {
    type: {
        name: "Composite",
        className: "TargetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Target"
                        }
                    }
                }
            },
            nextLink: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "nextLink",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const KeyValuePair = {
    type: {
        name: "Composite",
        className: "KeyValuePair",
        modelProperties: {
            key: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TargetReference = {
    type: {
        name: "Composite",
        className: "TargetReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            id: {
                constraints: {
                    Pattern: new RegExp("^\\/[Ss][Uu][Bb][Ss][Cc][Rr][Ii][Pp][Tt][Ii][Oo][Nn][Ss]\\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\/[Rr][Ee][Ss][Oo][Uu][Rr][Cc][Ee][Gg][Rr][Oo][Uu][Pp][Ss]\\/[a-zA-Z0-9_\\-\\.\\(\\)]*[a-zA-Z0-9_\\-\\(\\)]\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\/[a-zA-Z0-9_\\-\\.]+\\/[a-zA-Z0-9_\\-\\.]+\\/[Pp][Rr][Oo][Vv][Ii][Dd][Ee][Rr][Ss]\\/[Mm][Ii][Cc][Rr][Oo][Ss][Oo][Ff][Tt]\\.[Cc][Hh][Aa][Oo][Ss]\\/[Tt][Aa][Rr][Gg][Ee][Tt][Ss]\\/[a-zA-Z0-9_\\-\\.]+$")
                },
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ChaosTargetSimpleFilterParameters = {
    type: {
        name: "Composite",
        className: "ChaosTargetSimpleFilterParameters",
        modelProperties: {
            zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const Capability = {
    type: {
        name: "Composite",
        className: "Capability",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, publisher: {
                serializedName: "properties.publisher",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, targetType: {
                serializedName: "properties.targetType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parametersSchema: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.parametersSchema",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, urn: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.urn",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const CapabilityType = {
    type: {
        name: "Composite",
        className: "CapabilityType",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, publisher: {
                serializedName: "properties.publisher",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, targetType: {
                serializedName: "properties.targetType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parametersSchema: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.parametersSchema",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, urn: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.urn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "properties.kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azureRbacActions: {
                serializedName: "properties.azureRbacActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, azureRbacDataActions: {
                serializedName: "properties.azureRbacDataActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, runtimeProperties: {
                serializedName: "properties.runtimeProperties",
                type: {
                    name: "Composite",
                    className: "CapabilityTypePropertiesRuntimeProperties"
                }
            } })
    }
};
export const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const TargetType = {
    type: {
        name: "Composite",
        className: "TargetType",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, propertiesSchema: {
                constraints: {
                    MaxLength: 2048
                },
                serializedName: "properties.propertiesSchema",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceTypes: {
                serializedName: "properties.resourceTypes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const Target = {
    type: {
        name: "Composite",
        className: "Target",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
export const OperationStatus = {
    type: {
        name: "Composite",
        className: "OperationStatus",
        modelProperties: Object.assign(Object.assign({}, ErrorResponse.type.modelProperties), { id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }, name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            }, endTime: {
                serializedName: "endTime",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            } })
    }
};
export const DelayAction = {
    serializedName: "delay",
    type: {
        name: "Composite",
        className: "DelayAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: ChaosExperimentAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosExperimentAction.type.modelProperties), { duration: {
                serializedName: "duration",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            } })
    }
};
export const DiscreteAction = {
    serializedName: "discrete",
    type: {
        name: "Composite",
        className: "DiscreteAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: ChaosExperimentAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosExperimentAction.type.modelProperties), { parameters: {
                serializedName: "parameters",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyValuePair"
                        }
                    }
                }
            }, selectorId: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "selectorId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const ContinuousAction = {
    serializedName: "continuous",
    type: {
        name: "Composite",
        className: "ContinuousAction",
        uberParent: "ChaosExperimentAction",
        polymorphicDiscriminator: ChaosExperimentAction.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosExperimentAction.type.modelProperties), { duration: {
                serializedName: "duration",
                required: true,
                type: {
                    name: "TimeSpan"
                }
            }, parameters: {
                serializedName: "parameters",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyValuePair"
                        }
                    }
                }
            }, selectorId: {
                constraints: {
                    MinLength: 1
                },
                serializedName: "selectorId",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const ChaosTargetListSelector = {
    serializedName: "List",
    type: {
        name: "Composite",
        className: "ChaosTargetListSelector",
        uberParent: "ChaosTargetSelector",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ChaosTargetSelector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosTargetSelector.type.modelProperties), { targets: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 50
                },
                serializedName: "targets",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetReference"
                        }
                    }
                }
            } })
    }
};
export const ChaosTargetQuerySelector = {
    serializedName: "Query",
    type: {
        name: "Composite",
        className: "ChaosTargetQuerySelector",
        uberParent: "ChaosTargetSelector",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: ChaosTargetSelector.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosTargetSelector.type.modelProperties), { queryString: {
                serializedName: "queryString",
                required: true,
                type: {
                    name: "String"
                }
            }, subscriptionIds: {
                constraints: {
                    MinItems: 1
                },
                serializedName: "subscriptionIds",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
export const ChaosTargetSimpleFilter = {
    serializedName: "Simple",
    type: {
        name: "Composite",
        className: "ChaosTargetSimpleFilter",
        uberParent: "ChaosTargetFilter",
        polymorphicDiscriminator: ChaosTargetFilter.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ChaosTargetFilter.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ChaosTargetSimpleFilterParameters"
                }
            } })
    }
};
export const ExperimentExecutionDetailsProperties = {
    type: {
        name: "Composite",
        className: "ExperimentExecutionDetailsProperties",
        modelProperties: Object.assign(Object.assign({}, ExperimentExecutionProperties.type.modelProperties), { failureReason: {
                serializedName: "failureReason",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastActionAt: {
                serializedName: "lastActionAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, runInformation: {
                serializedName: "runInformation",
                type: {
                    name: "Composite",
                    className: "ExperimentExecutionDetailsPropertiesRunInformation"
                }
            } })
    }
};
export const Experiment = {
    type: {
        name: "Composite",
        className: "Experiment",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceIdentity"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, steps: {
                constraints: {
                    MinItems: 1,
                    MaxItems: 4
                },
                serializedName: "properties.steps",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosExperimentStep"
                        }
                    }
                }
            }, selectors: {
                constraints: {
                    MinItems: 1
                },
                serializedName: "properties.selectors",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ChaosTargetSelector"
                        }
                    }
                }
            } })
    }
};
export let discriminators = {
    ChaosExperimentAction: ChaosExperimentAction,
    ChaosTargetSelector: ChaosTargetSelector,
    ChaosTargetFilter: ChaosTargetFilter,
    "ChaosExperimentAction.delay": DelayAction,
    "ChaosExperimentAction.discrete": DiscreteAction,
    "ChaosExperimentAction.continuous": ContinuousAction,
    "ChaosTargetSelector.List": ChaosTargetListSelector,
    "ChaosTargetSelector.Query": ChaosTargetQuerySelector,
    "ChaosTargetFilter.Simple": ChaosTargetSimpleFilter
};
//# sourceMappingURL=mappers.js.map