/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Capability as CapabilityMapper, Experiment as ExperimentMapper, ExperimentUpdate as ExperimentUpdateMapper, Target as TargetMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.\\(\\)]*[a-zA-Z0-9_\\-\\(\\)]$")
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parentProviderNamespace = {
    parameterPath: "parentProviderNamespace",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$")
        },
        serializedName: "parentProviderNamespace",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parentResourceType = {
    parameterPath: "parentResourceType",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "parentResourceType",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parentResourceName = {
    parameterPath: "parentResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "parentResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const targetName = {
    parameterPath: "targetName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "targetName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const continuationToken = {
    parameterPath: ["options", "continuationToken"],
    mapper: {
        serializedName: "continuationToken",
        type: {
            name: "String"
        }
    }
};
export const capabilityName = {
    parameterPath: "capabilityName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$")
        },
        serializedName: "capabilityName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const capability = {
    parameterPath: "capability",
    mapper: CapabilityMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const locationName = {
    parameterPath: "locationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const targetTypeName = {
    parameterPath: "targetTypeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "targetTypeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const capabilityTypeName = {
    parameterPath: "capabilityTypeName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9\\-\\.]+-\\d\\.\\d$")
        },
        serializedName: "capabilityTypeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const running = {
    parameterPath: ["options", "running"],
    mapper: {
        serializedName: "running",
        type: {
            name: "Boolean"
        }
    }
};
export const experimentName = {
    parameterPath: "experimentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^<>%&:?#/\\\\]+$"),
            MinLength: 1
        },
        serializedName: "experimentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const experiment = {
    parameterPath: "experiment",
    mapper: ExperimentMapper
};
export const experiment1 = {
    parameterPath: "experiment",
    mapper: ExperimentUpdateMapper
};
export const executionId = {
    parameterPath: "executionId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$")
        },
        serializedName: "executionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const asyncOperationId = {
    parameterPath: "asyncOperationId",
    mapper: {
        serializedName: "asyncOperationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const target = {
    parameterPath: "target",
    mapper: TargetMapper
};
//# sourceMappingURL=parameters.js.map