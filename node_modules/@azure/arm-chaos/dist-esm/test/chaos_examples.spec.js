/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { ChaosManagementClient } from "../src/chaosManagementClient";
import { CosmosDBManagementClient } from "@azure/arm-cosmosdb";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Chaos test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let experimentName;
    let cos_client;
    let cosmosdbName;
    let targetid;
    let parentProviderNamespace;
    let parentResourceType;
    let targetName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new ChaosManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            cos_client = new CosmosDBManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            experimentName = "exampleExperiment1";
            cosmosdbName = "test-123aaa";
            parentProviderNamespace = "Microsoft.DocumentDB";
            parentResourceType = "databaseAccounts";
            targetName = "Microsoft-CosmosDB";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("chaos dependence create", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const cosmosdb_res = yield cos_client.databaseAccounts.beginCreateOrUpdateAndWait(resourceGroup, cosmosdbName, {
                databaseAccountOfferType: "Standard",
                locations: [
                    {
                        failoverPriority: 2,
                        locationName: "southcentralus",
                        isZoneRedundant: false
                    },
                    {
                        locationName: "eastus",
                        failoverPriority: 1
                    },
                    {
                        locationName: "westus",
                        failoverPriority: 0
                    }
                ],
                location: location,
                createMode: "Default"
            }, testPollingOptions);
            assert.equal(cosmosdb_res.name, cosmosdbName);
            targetid = String(cosmosdb_res.id);
        });
    });
    it("target create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.targets.createOrUpdate(resourceGroup, parentProviderNamespace, parentResourceType, cosmosdbName, targetName, {
                location,
                properties: {
                    identities: [
                        { type: "CertificateSubjectIssuer", subject: "CN=example.subject" }
                    ]
                }
            });
        });
    });
    it("experiment create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.experiments.beginCreateOrUpdateAndWait(resourceGroup, experimentName, {
                identity: { type: "SystemAssigned" },
                location: "eastus",
                selectors: [
                    {
                        type: "List",
                        id: "f15dd483-3281-4e95-bcbe-cbf535d0de98",
                        targets: [
                            {
                                type: "ChaosTarget",
                                id: targetid
                            }
                        ]
                    }
                ],
                steps: [
                    {
                        name: "step1",
                        branches: [
                            {
                                name: "branch1",
                                actions: [
                                    {
                                        type: "continuous",
                                        selectorId: "f15dd483-3281-4e95-bcbe-cbf535d0de98",
                                        duration: "PT10M",
                                        parameters: [
                                            {
                                                key: "readRegion",
                                                value: "East US"
                                            }
                                        ],
                                        "name": "urn:csci:microsoft:cosmosDB:failover/1.0"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }, testPollingOptions);
            assert.equal(res.name, experimentName);
        });
    });
    it("experiment get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.experiments.get(resourceGroup, experimentName);
            assert.equal(res.name, experimentName);
        });
    });
    it("targets get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.targets.get(resourceGroup, parentProviderNamespace, parentResourceType, cosmosdbName, targetName);
            assert.equal(res.name, targetName);
        });
    });
    it("experiment list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.experiments.list(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("targets list test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.targets.list(resourceGroup, parentProviderNamespace, parentResourceType, cosmosdbName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("experiment delete test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.experiments.beginDeleteAndWait(resourceGroup, experimentName, testPollingOptions);
            try {
                for (var _d = true, _e = __asyncValues(client.experiments.list(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("target delete test", function () {
        var _a, e_4, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.targets.delete(resourceGroup, parentProviderNamespace, parentResourceType, cosmosdbName, targetName);
            try {
                for (var _d = true, _e = __asyncValues(client.targets.list(resourceGroup, parentProviderNamespace, parentResourceType, cosmosdbName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("chaos dependence delete test", function () {
        var _a, e_5, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield cos_client.databaseAccounts.beginDeleteAndWait(resourceGroup, cosmosdbName, testPollingOptions);
            try {
                for (var _d = true, _e = __asyncValues(cos_client.databaseAccounts.listByResourceGroup(resourceGroup)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
            assert.equal(resArray.length, 0);
        });
    }).timeout(3600000);
});
//# sourceMappingURL=chaos_examples.spec.js.map