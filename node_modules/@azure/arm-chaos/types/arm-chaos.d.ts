import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Model that represents the an action and its status. */
export declare interface ActionStatus {
    /**
     * The name of the action status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionName?: string;
    /**
     * The id of the action status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionId?: string;
    /**
     * The status of the action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * String that represents the start time of the action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * String that represents the end time of the action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * The array of targets.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targets?: ExperimentExecutionActionTargetDetailsProperties[];
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** Model that represents the a list of actions and action statuses. */
export declare interface BranchStatus {
    /**
     * The name of the branch status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly branchName?: string;
    /**
     * The id of the branch status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly branchId?: string;
    /**
     * The status of the branch.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The array of actions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actions?: ActionStatus[];
}

/** Interface representing a Capabilities. */
export declare interface Capabilities {
    /**
     * Get a list of Capability resources that extend a Target resource..
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, targetName: string, options?: CapabilitiesListOptionalParams): PagedAsyncIterableIterator<Capability>;
    /**
     * Get a Capability resource that extends a Target resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, targetName: string, capabilityName: string, options?: CapabilitiesGetOptionalParams): Promise<CapabilitiesGetResponse>;
    /**
     * Delete a Capability that extends a Target resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, targetName: string, capabilityName: string, options?: CapabilitiesDeleteOptionalParams): Promise<void>;
    /**
     * Create or update a Capability resource that extends a Target resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param capabilityName String that represents a Capability resource name.
     * @param capability Capability resource to be created or updated.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, targetName: string, capabilityName: string, capability: Capability, options?: CapabilitiesCreateOrUpdateOptionalParams): Promise<CapabilitiesCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface CapabilitiesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type CapabilitiesCreateOrUpdateResponse = Capability;

/** Optional parameters. */
export declare interface CapabilitiesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface CapabilitiesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CapabilitiesGetResponse = Capability;

/** Optional parameters. */
export declare interface CapabilitiesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CapabilitiesListNextResponse = CapabilityListResult;

/** Optional parameters. */
export declare interface CapabilitiesListOptionalParams extends coreClient.OperationOptions {
    /** String that sets the continuation token. */
    continuationToken?: string;
}

/** Contains response data for the list operation. */
export declare type CapabilitiesListResponse = CapabilityListResult;

/** Model that represents a Capability resource. */
export declare interface Capability extends Resource {
    /**
     * The standard system metadata of a resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * String of the Publisher that this Capability extends.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisher?: string;
    /**
     * String of the Target Type that this Capability extends.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetType?: string;
    /**
     * Localized string of the description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * URL to retrieve JSON schema of the Capability parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parametersSchema?: string;
    /**
     * String of the URN for this Capability Type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly urn?: string;
}

/** Model that represents a list of Capability resources and a link for pagination. */
export declare interface CapabilityListResult {
    /**
     * List of Capability resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Capability[];
    /**
     * URL to retrieve the next page of Capability resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Model that represents a Capability Type resource. */
export declare interface CapabilityType extends Resource {
    /**
     * The system metadata properties of the capability type resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Location of the Capability Type resource. */
    location?: string;
    /**
     * String of the Publisher that this Capability Type extends.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publisher?: string;
    /**
     * String of the Target Type that this Capability Type extends.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetType?: string;
    /**
     * Localized string of the display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Localized string of the description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * URL to retrieve JSON schema of the Capability Type parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parametersSchema?: string;
    /**
     * String of the URN for this Capability Type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly urn?: string;
    /**
     * String of the kind of this Capability Type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /** Control plane actions necessary to execute capability type. */
    azureRbacActions?: string[];
    /** Data plane actions necessary to execute capability type. */
    azureRbacDataActions?: string[];
    /** Runtime properties of this Capability Type. */
    runtimeProperties?: CapabilityTypePropertiesRuntimeProperties;
}

/** Model that represents a list of Capability Type resources and a link for pagination. */
export declare interface CapabilityTypeListResult {
    /**
     * List of Capability Type resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: CapabilityType[];
    /**
     * URL to retrieve the next page of Capability Type resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Runtime properties of this Capability Type. */
export declare interface CapabilityTypePropertiesRuntimeProperties {
    /**
     * String of the kind of the resource's action type (continuous or discrete).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
}

/** Interface representing a CapabilityTypes. */
export declare interface CapabilityTypes {
    /**
     * Get a list of Capability Type resources for given Target Type and location.
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param options The options parameters.
     */
    list(locationName: string, targetTypeName: string, options?: CapabilityTypesListOptionalParams): PagedAsyncIterableIterator<CapabilityType>;
    /**
     * Get a Capability Type resource for given Target Type and location.
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param capabilityTypeName String that represents a Capability Type resource name.
     * @param options The options parameters.
     */
    get(locationName: string, targetTypeName: string, capabilityTypeName: string, options?: CapabilityTypesGetOptionalParams): Promise<CapabilityTypesGetResponse>;
}

/** Optional parameters. */
export declare interface CapabilityTypesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CapabilityTypesGetResponse = CapabilityType;

/** Optional parameters. */
export declare interface CapabilityTypesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CapabilityTypesListNextResponse = CapabilityTypeListResult;

/** Optional parameters. */
export declare interface CapabilityTypesListOptionalParams extends coreClient.OperationOptions {
    /** String that sets the continuation token. */
    continuationToken?: string;
}

/** Contains response data for the list operation. */
export declare type CapabilityTypesListResponse = CapabilityTypeListResult;

/** Model that represents the base action model. 9 total per experiment. */
export declare interface ChaosExperimentAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "delay" | "discrete" | "continuous";
    /** String that represents a Capability URN. */
    name: string;
}

export declare type ChaosExperimentActionUnion = ChaosExperimentAction | DelayAction | DiscreteAction | ContinuousAction;

/** Model that represents a branch in the step. 9 total per experiment. */
export declare interface ChaosExperimentBranch {
    /** String of the branch name. */
    name: string;
    /** List of actions. */
    actions: ChaosExperimentActionUnion[];
}

/** Model that represents a step in the Experiment resource. */
export declare interface ChaosExperimentStep {
    /** String of the step name. */
    name: string;
    /** List of branches. */
    branches: ChaosExperimentBranch[];
}

export declare class ChaosManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the ChaosManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId GUID that represents an Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ChaosManagementClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: ChaosManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    capabilities: Capabilities;
    capabilityTypes: CapabilityTypes;
    experiments: Experiments;
    operationStatuses: OperationStatuses;
    operations: Operations;
    targetTypes: TargetTypes;
    targets: Targets;
}

/** Optional parameters. */
export declare interface ChaosManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Model that represents available filter types that can be applied to a targets list. */
export declare interface ChaosTargetFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Simple";
}

export declare type ChaosTargetFilterUnion = ChaosTargetFilter | ChaosTargetSimpleFilter;

/** Model that represents a list selector. */
export declare interface ChaosTargetListSelector extends ChaosTargetSelector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "List";
    /** List of Target references. */
    targets: TargetReference[];
}

/** Model that represents a query selector. */
export declare interface ChaosTargetQuerySelector extends ChaosTargetSelector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Query";
    /** Azure Resource Graph (ARG) Query Language query for target resources. */
    queryString: string;
    /** Subscription id list to scope resource query. */
    subscriptionIds: string[];
}

/** Model that represents a selector in the Experiment resource. */
export declare interface ChaosTargetSelector {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "List" | "Query";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** String of the selector ID. */
    id: string;
    /** Model that represents available filter types that can be applied to a targets list. */
    filter?: ChaosTargetFilterUnion;
}

export declare type ChaosTargetSelectorUnion = ChaosTargetSelector | ChaosTargetListSelector | ChaosTargetQuerySelector;

/** Model that represents a simple target filter. */
export declare interface ChaosTargetSimpleFilter extends ChaosTargetFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Simple";
    /** Model that represents the Simple filter parameters. */
    parameters?: ChaosTargetSimpleFilterParameters;
}

/** Model that represents the Simple filter parameters. */
export declare interface ChaosTargetSimpleFilterParameters {
    /** List of Azure availability zones to filter targets by. */
    zones?: string[];
}

/** Model that represents a continuous action. */
export declare interface ContinuousAction extends ChaosExperimentAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "continuous";
    /** ISO8601 formatted string that represents a duration. */
    duration: string;
    /** List of key value pairs. */
    parameters: KeyValuePair[];
    /** String that represents a selector. */
    selectorId: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Model that represents a delay action. */
export declare interface DelayAction extends ChaosExperimentAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "delay";
    /** ISO8601 formatted string that represents a duration. */
    duration: string;
}

/** Model that represents a discrete action. */
export declare interface DiscreteAction extends ChaosExperimentAction {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "discrete";
    /** List of key value pairs. */
    parameters: KeyValuePair[];
    /** String that represents a selector. */
    selectorId: string;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Model that represents a Experiment resource. */
export declare interface Experiment extends TrackedResource {
    /**
     * The system metadata of the experiment resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The identity of the experiment resource. */
    identity?: ResourceIdentity;
    /**
     * Most recent provisioning state for the given experiment resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** List of steps. */
    steps: ChaosExperimentStep[];
    /** List of selectors. */
    selectors: ChaosTargetSelectorUnion[];
}

/** Model that represents the execution of a Experiment. */
export declare interface ExperimentExecution {
    /**
     * String of the resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * String of the fully qualified resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * String of the resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The status of the execution.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * String that represents the start date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedAt?: Date;
    /**
     * String that represents the stop date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stoppedAt?: Date;
}

/** Model that represents the Experiment action target details error model. */
export declare interface ExperimentExecutionActionTargetDetailsError {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Model that represents the Experiment action target details properties model. */
export declare interface ExperimentExecutionActionTargetDetailsProperties {
    /**
     * The status of the execution.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The target for the action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * String that represents the failed date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetFailedTime?: Date;
    /**
     * String that represents the completed date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetCompletedTime?: Date;
    /**
     * The error of the action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ExperimentExecutionActionTargetDetailsError;
}

/** Model that represents the execution details of an Experiment. */
export declare interface ExperimentExecutionDetails {
    /**
     * String of the resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * String of the fully qualified resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * String of the resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The status of the execution.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * String that represents the start date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedAt?: Date;
    /**
     * String that represents the stop date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stoppedAt?: Date;
    /**
     * The reason why the execution failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failureReason?: string;
    /**
     * String that represents the last action date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastActionAt?: Date;
    /**
     * The information of the experiment run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runInformation?: ExperimentExecutionDetailsPropertiesRunInformation;
}

/** Model that represents the extended properties of an experiment execution. */
export declare interface ExperimentExecutionDetailsProperties extends ExperimentExecutionProperties {
    /**
     * The reason why the execution failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failureReason?: string;
    /**
     * String that represents the last action date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastActionAt?: Date;
    /**
     * The information of the experiment run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runInformation?: ExperimentExecutionDetailsPropertiesRunInformation;
}

/** The information of the experiment run. */
export declare interface ExperimentExecutionDetailsPropertiesRunInformation {
    /**
     * The steps of the experiment run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly steps?: StepStatus[];
}

/** Model that represents a list of Experiment executions and a link for pagination. */
export declare interface ExperimentExecutionListResult {
    /**
     * List of Experiment executions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ExperimentExecution[];
    /**
     * URL to retrieve the next page of Experiment executions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Model that represents the execution properties of an Experiment. */
export declare interface ExperimentExecutionProperties {
    /**
     * The status of the execution.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * String that represents the start date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedAt?: Date;
    /**
     * String that represents the stop date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stoppedAt?: Date;
}

/** Model that represents a list of Experiment resources and a link for pagination. */
export declare interface ExperimentListResult {
    /**
     * List of Experiment resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Experiment[];
    /**
     * URL to retrieve the next page of Experiment resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Experiments. */
export declare interface Experiments {
    /**
     * Get a list of Experiment resources in a subscription.
     * @param options The options parameters.
     */
    listAll(options?: ExperimentsListAllOptionalParams): PagedAsyncIterableIterator<Experiment>;
    /**
     * Get a list of Experiment resources in a resource group.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: ExperimentsListOptionalParams): PagedAsyncIterableIterator<Experiment>;
    /**
     * Get a list of executions of an Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    listAllExecutions(resourceGroupName: string, experimentName: string, options?: ExperimentsListAllExecutionsOptionalParams): PagedAsyncIterableIterator<ExperimentExecution>;
    /**
     * Delete a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, experimentName: string, options?: ExperimentsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, experimentName: string, options?: ExperimentsDeleteOptionalParams): Promise<void>;
    /**
     * Get a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, experimentName: string, options?: ExperimentsGetOptionalParams): Promise<ExperimentsGetResponse>;
    /**
     * Create or update a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Experiment resource to be created or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, experimentName: string, experiment: Experiment, options?: ExperimentsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ExperimentsCreateOrUpdateResponse>, ExperimentsCreateOrUpdateResponse>>;
    /**
     * Create or update a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Experiment resource to be created or updated.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, experimentName: string, experiment: Experiment, options?: ExperimentsCreateOrUpdateOptionalParams): Promise<ExperimentsCreateOrUpdateResponse>;
    /**
     * The operation to update an experiment.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Parameters supplied to the Update experiment operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, experimentName: string, experiment: ExperimentUpdate, options?: ExperimentsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ExperimentsUpdateResponse>, ExperimentsUpdateResponse>>;
    /**
     * The operation to update an experiment.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param experiment Parameters supplied to the Update experiment operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, experimentName: string, experiment: ExperimentUpdate, options?: ExperimentsUpdateOptionalParams): Promise<ExperimentsUpdateResponse>;
    /**
     * Cancel a running Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName: string, experimentName: string, options?: ExperimentsCancelOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Cancel a running Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName: string, experimentName: string, options?: ExperimentsCancelOptionalParams): Promise<void>;
    /**
     * Start a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, experimentName: string, options?: ExperimentsStartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Start a Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, experimentName: string, options?: ExperimentsStartOptionalParams): Promise<void>;
    /**
     * Get an execution of an Experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param executionId GUID that represents a Experiment execution detail.
     * @param options The options parameters.
     */
    getExecution(resourceGroupName: string, experimentName: string, executionId: string, options?: ExperimentsGetExecutionOptionalParams): Promise<ExperimentsGetExecutionResponse>;
    /**
     * Execution details of an experiment resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param experimentName String that represents a Experiment resource name.
     * @param executionId GUID that represents a Experiment execution detail.
     * @param options The options parameters.
     */
    executionDetails(resourceGroupName: string, experimentName: string, executionId: string, options?: ExperimentsExecutionDetailsOptionalParams): Promise<ExperimentsExecutionDetailsResponse>;
}

/** Optional parameters. */
export declare interface ExperimentsCancelOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ExperimentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ExperimentsCreateOrUpdateResponse = Experiment;

/** Optional parameters. */
export declare interface ExperimentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ExperimentsExecutionDetailsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the executionDetails operation. */
export declare type ExperimentsExecutionDetailsResponse = ExperimentExecutionDetails;

/** Optional parameters. */
export declare interface ExperimentsGetExecutionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getExecution operation. */
export declare type ExperimentsGetExecutionResponse = ExperimentExecution;

/** Optional parameters. */
export declare interface ExperimentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ExperimentsGetResponse = Experiment;

/** Optional parameters. */
export declare interface ExperimentsListAllExecutionsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllExecutionsNext operation. */
export declare type ExperimentsListAllExecutionsNextResponse = ExperimentExecutionListResult;

/** Optional parameters. */
export declare interface ExperimentsListAllExecutionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllExecutions operation. */
export declare type ExperimentsListAllExecutionsResponse = ExperimentExecutionListResult;

/** Optional parameters. */
export declare interface ExperimentsListAllNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllNext operation. */
export declare type ExperimentsListAllNextResponse = ExperimentListResult;

/** Optional parameters. */
export declare interface ExperimentsListAllOptionalParams extends coreClient.OperationOptions {
    /** String that sets the continuation token. */
    continuationToken?: string;
    /** Optional value that indicates whether to filter results based on if the Experiment is currently running. If null, then the results will not be filtered. */
    running?: boolean;
}

/** Contains response data for the listAll operation. */
export declare type ExperimentsListAllResponse = ExperimentListResult;

/** Optional parameters. */
export declare interface ExperimentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ExperimentsListNextResponse = ExperimentListResult;

/** Optional parameters. */
export declare interface ExperimentsListOptionalParams extends coreClient.OperationOptions {
    /** String that sets the continuation token. */
    continuationToken?: string;
    /** Optional value that indicates whether to filter results based on if the Experiment is currently running. If null, then the results will not be filtered. */
    running?: boolean;
}

/** Contains response data for the list operation. */
export declare type ExperimentsListResponse = ExperimentListResult;

/** Optional parameters. */
export declare interface ExperimentsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ExperimentsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ExperimentsUpdateResponse = Experiment;

/** Describes an experiment update. */
export declare interface ExperimentUpdate {
    /** The identity of the experiment resource. */
    identity?: ResourceIdentity;
}

/**
 * Defines values for FilterType. \
 * {@link KnownFilterType} can be used interchangeably with FilterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Simple**
 */
export declare type FilterType = string;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** A map to describe the settings of an action. */
export declare interface KeyValuePair {
    /** The name of the setting for the action. */
    key: string;
    /** The value of the setting for the action. */
    value: string;
}

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link FilterType} that the service accepts. */
export declare enum KnownFilterType {
    /** Simple */
    Simple = "Simple"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link SelectorType} that the service accepts. */
export declare enum KnownSelectorType {
    /** List */
    List = "List",
    /** Query */
    Query = "Query"
}

/** Known values of {@link TargetReferenceType} that the service accepts. */
export declare enum KnownTargetReferenceType {
    /** ChaosTarget */
    ChaosTarget = "ChaosTarget"
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Get a list all available Operations.
     * @param options The options parameters.
     */
    listAll(options?: OperationsListAllOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListAllNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAllNext operation. */
export declare type OperationsListAllNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListAllOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAll operation. */
export declare type OperationsListAllResponse = OperationListResult;

/** The status of operation. */
export declare interface OperationStatus extends ErrorResponse {
    /** The operation Id. */
    id?: string;
    /** The operation name. */
    name?: string;
    /** The start time of the operation. */
    startTime?: string;
    /** The end time of the operation. */
    endTime?: string;
    /** The status of the operation. */
    status?: string;
}

/** Interface representing a OperationStatuses. */
export declare interface OperationStatuses {
    /**
     * Get the status of a long running azure asynchronous operation.
     * @param location The region name of operation.
     * @param asyncOperationId The operation Id.
     * @param options The options parameters.
     */
    get(location: string, asyncOperationId: string, options?: OperationStatusesGetOptionalParams): Promise<OperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface OperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationStatusesGetResponse = OperationStatus;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export declare type ProvisioningState = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The identity of a resource. */
export declare interface ResourceIdentity {
    /** String of the resource identity type. */
    type: ResourceIdentityType;
    /** The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
    /**
     * GUID that represents the principal ID of this resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * GUID that represents the tenant ID of this resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "None" | "SystemAssigned" | "UserAssigned";

/**
 * Defines values for SelectorType. \
 * {@link KnownSelectorType} can be used interchangeably with SelectorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **List** \
 * **Query**
 */
export declare type SelectorType = string;

/** Model that represents the a list of branches and branch statuses. */
export declare interface StepStatus {
    /**
     * The name of the step.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stepName?: string;
    /**
     * The id of the step.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stepId?: string;
    /**
     * The value of the status of the step.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The array of branches.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly branches?: BranchStatus[];
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Model that represents a Target resource. */
export declare interface Target extends Resource {
    /**
     * The system metadata of the target resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Location of the target resource. */
    location?: string;
    /** The properties of the target resource. */
    properties: {
        [propertyName: string]: any;
    };
}

/** Model that represents a list of Target resources and a link for pagination. */
export declare interface TargetListResult {
    /**
     * List of Target resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Target[];
    /**
     * URL to retrieve the next page of Target resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Model that represents a reference to a Target in the selector. */
export declare interface TargetReference {
    /** Enum of the Target reference type. */
    type: TargetReferenceType;
    /** String of the resource ID of a Target resource. */
    id: string;
}

/**
 * Defines values for TargetReferenceType. \
 * {@link KnownTargetReferenceType} can be used interchangeably with TargetReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ChaosTarget**
 */
export declare type TargetReferenceType = string;

/** Interface representing a Targets. */
export declare interface Targets {
    /**
     * Get a list of Target resources that extend a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, options?: TargetsListOptionalParams): PagedAsyncIterableIterator<Target>;
    /**
     * Get a Target resource that extends a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, targetName: string, options?: TargetsGetOptionalParams): Promise<TargetsGetResponse>;
    /**
     * Delete a Target resource that extends a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, targetName: string, options?: TargetsDeleteOptionalParams): Promise<void>;
    /**
     * Create or update a Target resource that extends a tracked regional resource.
     * @param resourceGroupName String that represents an Azure resource group.
     * @param parentProviderNamespace String that represents a resource provider namespace.
     * @param parentResourceType String that represents a resource type.
     * @param parentResourceName String that represents a resource name.
     * @param targetName String that represents a Target resource name.
     * @param target Target resource to be created or updated.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, parentProviderNamespace: string, parentResourceType: string, parentResourceName: string, targetName: string, target: Target, options?: TargetsCreateOrUpdateOptionalParams): Promise<TargetsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface TargetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type TargetsCreateOrUpdateResponse = Target;

/** Optional parameters. */
export declare interface TargetsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TargetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TargetsGetResponse = Target;

/** Optional parameters. */
export declare interface TargetsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TargetsListNextResponse = TargetListResult;

/** Optional parameters. */
export declare interface TargetsListOptionalParams extends coreClient.OperationOptions {
    /** String that sets the continuation token. */
    continuationToken?: string;
}

/** Contains response data for the list operation. */
export declare type TargetsListResponse = TargetListResult;

/** Model that represents a Target Type resource. */
export declare interface TargetType extends Resource {
    /**
     * The system metadata properties of the target type resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Location of the Target Type resource. */
    location?: string;
    /**
     * Localized string of the display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * Localized string of the description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * URL to retrieve JSON schema of the Target Type properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly propertiesSchema?: string;
    /**
     * List of resource types this Target Type can extend.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceTypes?: string[];
}

/** Model that represents a list of Target Type resources and a link for pagination. */
export declare interface TargetTypeListResult {
    /**
     * List of Target Type resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: TargetType[];
    /**
     * URL to retrieve the next page of Target Type resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a TargetTypes. */
export declare interface TargetTypes {
    /**
     * Get a list of Target Type resources for given location.
     * @param locationName String that represents a Location resource name.
     * @param options The options parameters.
     */
    list(locationName: string, options?: TargetTypesListOptionalParams): PagedAsyncIterableIterator<TargetType>;
    /**
     * Get a Target Type resources for given location.
     * @param locationName String that represents a Location resource name.
     * @param targetTypeName String that represents a Target Type resource name.
     * @param options The options parameters.
     */
    get(locationName: string, targetTypeName: string, options?: TargetTypesGetOptionalParams): Promise<TargetTypesGetResponse>;
}

/** Optional parameters. */
export declare interface TargetTypesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TargetTypesGetResponse = TargetType;

/** Optional parameters. */
export declare interface TargetTypesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TargetTypesListNextResponse = TargetTypeListResult;

/** Optional parameters. */
export declare interface TargetTypesListOptionalParams extends coreClient.OperationOptions {
    /** String that sets the continuation token. */
    continuationToken?: string;
}

/** Contains response data for the list operation. */
export declare type TargetTypesListResponse = TargetTypeListResult;

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** User assigned identity properties */
export declare interface UserAssignedIdentity {
    /**
     * The principal ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

export { }
