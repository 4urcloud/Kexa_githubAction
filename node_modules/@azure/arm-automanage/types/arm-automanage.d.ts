import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

export declare class AutomanageClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AutomanageClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AutomanageClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    bestPractices: BestPractices;
    bestPracticesVersions: BestPracticesVersions;
    configurationProfiles: ConfigurationProfiles;
    configurationProfilesVersions: ConfigurationProfilesVersions;
    configurationProfileAssignments: ConfigurationProfileAssignments;
    operations: Operations;
    reports: Reports;
    servicePrincipals: ServicePrincipals;
    configurationProfileHcrpAssignments: ConfigurationProfileHcrpAssignments;
    hcrpReports: HcrpReports;
    configurationProfileHCIAssignments: ConfigurationProfileHCIAssignments;
    hCIReports: HCIReports;
}

/** Optional parameters. */
export declare interface AutomanageClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Definition of the Automanage best practice. */
export declare interface BestPractice {
    /**
     * The fully qualified ID for the best practice.  For example, /providers/Microsoft.Automanage/bestPractices/azureBestPracticesProduction
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The type of the resource.  For example, Microsoft.Automanage/bestPractices
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The name of the best practice. For example, azureBestPracticesProduction
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** configuration dictionary of the configuration profile. */
    configuration?: Record<string, unknown>;
}

/** The response of the list best practice operation. */
export declare interface BestPracticeList {
    /** Result of the list best practice operation. */
    value?: BestPractice[];
}

/** Interface representing a BestPractices. */
export declare interface BestPractices {
    /**
     * Retrieve a list of Automanage best practices
     * @param options The options parameters.
     */
    listByTenant(options?: BestPracticesListByTenantOptionalParams): PagedAsyncIterableIterator<BestPractice>;
    /**
     * Get information about a Automanage best practice
     * @param bestPracticeName The Automanage best practice name.
     * @param options The options parameters.
     */
    get(bestPracticeName: string, options?: BestPracticesGetOptionalParams): Promise<BestPracticesGetResponse>;
}

/** Optional parameters. */
export declare interface BestPracticesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BestPracticesGetResponse = BestPractice;

/** Optional parameters. */
export declare interface BestPracticesListByTenantOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByTenant operation. */
export declare type BestPracticesListByTenantResponse = BestPracticeList;

/** Interface representing a BestPracticesVersions. */
export declare interface BestPracticesVersions {
    /**
     * Retrieve a list of Automanage best practices versions
     * @param bestPracticeName The Automanage best practice name.
     * @param options The options parameters.
     */
    listByTenant(bestPracticeName: string, options?: BestPracticesVersionsListByTenantOptionalParams): PagedAsyncIterableIterator<BestPractice>;
    /**
     * Get information about a Automanage best practice version
     * @param bestPracticeName The Automanage best practice name.
     * @param versionName The Automanage best practice version name.
     * @param options The options parameters.
     */
    get(bestPracticeName: string, versionName: string, options?: BestPracticesVersionsGetOptionalParams): Promise<BestPracticesVersionsGetResponse>;
}

/** Optional parameters. */
export declare interface BestPracticesVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BestPracticesVersionsGetResponse = BestPractice;

/** Optional parameters. */
export declare interface BestPracticesVersionsListByTenantOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByTenant operation. */
export declare type BestPracticesVersionsListByTenantResponse = BestPracticeList;

/** Definition of the configuration profile. */
export declare interface ConfigurationProfile extends TrackedResource {
    /** Properties of the configuration profile. */
    properties?: ConfigurationProfileProperties;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Configuration profile assignment is an association between a VM and automanage profile configuration. */
export declare interface ConfigurationProfileAssignment extends ProxyResource {
    /** Properties of the configuration profile assignment. */
    properties?: ConfigurationProfileAssignmentProperties;
    /**
     * Azure resource id. Indicates if this resource is managed by another Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedBy?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** The response of the list configuration profile assignment operation. */
export declare interface ConfigurationProfileAssignmentList {
    /** Result of the list configuration profile assignment operation. */
    value?: ConfigurationProfileAssignment[];
}

/** Automanage configuration profile assignment properties. */
export declare interface ConfigurationProfileAssignmentProperties {
    /** The Automanage configurationProfile ARM Resource URI. */
    configurationProfile?: string;
    /**
     * The target VM resource URI
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetId?: string;
    /**
     * The status of onboarding, which only appears in the response.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Interface representing a ConfigurationProfileAssignments. */
export declare interface ConfigurationProfileAssignments {
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    listByVirtualMachines(resourceGroupName: string, vmName: string, options?: ConfigurationProfileAssignmentsListByVirtualMachinesOptionalParams): PagedAsyncIterableIterator<ConfigurationProfileAssignment>;
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: ConfigurationProfileAssignmentsListOptionalParams): PagedAsyncIterableIterator<ConfigurationProfileAssignment>;
    /**
     * Get list of configuration profile assignments under a given subscription
     * @param options The options parameters.
     */
    listBySubscription(options?: ConfigurationProfileAssignmentsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConfigurationProfileAssignment>;
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param options The options parameters.
     */
    listByMachineName(resourceGroupName: string, machineName: string, options?: ConfigurationProfileAssignmentsListByMachineNameOptionalParams): PagedAsyncIterableIterator<ConfigurationProfileAssignment>;
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param options The options parameters.
     */
    listByClusterName(resourceGroupName: string, clusterName: string, options?: ConfigurationProfileAssignmentsListByClusterNameOptionalParams): PagedAsyncIterableIterator<ConfigurationProfileAssignment>;
    /**
     * Creates an association between a VM and Automanage configuration profile
     * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
     *                                           is supported.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the create or update configuration profile assignment.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileAssignmentName: string, resourceGroupName: string, vmName: string, parameters: ConfigurationProfileAssignment, options?: ConfigurationProfileAssignmentsCreateOrUpdateOptionalParams): Promise<ConfigurationProfileAssignmentsCreateOrUpdateResponse>;
    /**
     * Get information about a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configurationProfileAssignmentName: string, vmName: string, options?: ConfigurationProfileAssignmentsGetOptionalParams): Promise<ConfigurationProfileAssignmentsGetResponse>;
    /**
     * Delete a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, configurationProfileAssignmentName: string, vmName: string, options?: ConfigurationProfileAssignmentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConfigurationProfileAssignmentsCreateOrUpdateResponse = ConfigurationProfileAssignment;

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationProfileAssignmentsGetResponse = ConfigurationProfileAssignment;

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsListByClusterNameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByClusterName operation. */
export declare type ConfigurationProfileAssignmentsListByClusterNameResponse = ConfigurationProfileAssignmentList;

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsListByMachineNameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByMachineName operation. */
export declare type ConfigurationProfileAssignmentsListByMachineNameResponse = ConfigurationProfileAssignmentList;

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ConfigurationProfileAssignmentsListBySubscriptionResponse = ConfigurationProfileAssignmentList;

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsListByVirtualMachinesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByVirtualMachines operation. */
export declare type ConfigurationProfileAssignmentsListByVirtualMachinesResponse = ConfigurationProfileAssignmentList;

/** Optional parameters. */
export declare interface ConfigurationProfileAssignmentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ConfigurationProfileAssignmentsListResponse = ConfigurationProfileAssignmentList;

/** Interface representing a ConfigurationProfileHCIAssignments. */
export declare interface ConfigurationProfileHCIAssignments {
    /**
     * Creates an association between a AzureStackHCI cluster and Automanage configuration profile
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
     *                                           is supported.
     * @param parameters Parameters supplied to the create or update configuration profile assignment.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, clusterName: string, configurationProfileAssignmentName: string, parameters: ConfigurationProfileAssignment, options?: ConfigurationProfileHCIAssignmentsCreateOrUpdateOptionalParams): Promise<ConfigurationProfileHCIAssignmentsCreateOrUpdateResponse>;
    /**
     * Get information about a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, configurationProfileAssignmentName: string, options?: ConfigurationProfileHCIAssignmentsGetOptionalParams): Promise<ConfigurationProfileHCIAssignmentsGetResponse>;
    /**
     * Delete a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, clusterName: string, configurationProfileAssignmentName: string, options?: ConfigurationProfileHCIAssignmentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConfigurationProfileHCIAssignmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConfigurationProfileHCIAssignmentsCreateOrUpdateResponse = ConfigurationProfileAssignment;

/** Optional parameters. */
export declare interface ConfigurationProfileHCIAssignmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConfigurationProfileHCIAssignmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationProfileHCIAssignmentsGetResponse = ConfigurationProfileAssignment;

/** Interface representing a ConfigurationProfileHcrpAssignments. */
export declare interface ConfigurationProfileHcrpAssignments {
    /**
     * Creates an association between a ARC machine and Automanage configuration profile
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
     *                                           is supported.
     * @param parameters Parameters supplied to the create or update configuration profile assignment.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, machineName: string, configurationProfileAssignmentName: string, parameters: ConfigurationProfileAssignment, options?: ConfigurationProfileHcrpAssignmentsCreateOrUpdateOptionalParams): Promise<ConfigurationProfileHcrpAssignmentsCreateOrUpdateResponse>;
    /**
     * Get information about a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, machineName: string, configurationProfileAssignmentName: string, options?: ConfigurationProfileHcrpAssignmentsGetOptionalParams): Promise<ConfigurationProfileHcrpAssignmentsGetResponse>;
    /**
     * Delete a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, machineName: string, configurationProfileAssignmentName: string, options?: ConfigurationProfileHcrpAssignmentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConfigurationProfileHcrpAssignmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConfigurationProfileHcrpAssignmentsCreateOrUpdateResponse = ConfigurationProfileAssignment;

/** Optional parameters. */
export declare interface ConfigurationProfileHcrpAssignmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConfigurationProfileHcrpAssignmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationProfileHcrpAssignmentsGetResponse = ConfigurationProfileAssignment;

/** The response of the list configuration profile operation. */
export declare interface ConfigurationProfileList {
    /** Result of the list ConfigurationProfile operation. */
    value?: ConfigurationProfile[];
}

/** Automanage configuration profile properties. */
export declare interface ConfigurationProfileProperties {
    /** configuration dictionary of the configuration profile. */
    configuration?: Record<string, unknown>;
}

/** Interface representing a ConfigurationProfiles. */
export declare interface ConfigurationProfiles {
    /**
     * Retrieve a list of configuration profile within a given resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ConfigurationProfilesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConfigurationProfile>;
    /**
     * Retrieve a list of configuration profile within a subscription
     * @param options The options parameters.
     */
    listBySubscription(options?: ConfigurationProfilesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConfigurationProfile>;
    /**
     * Creates a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to create or update configuration profile.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileName: string, resourceGroupName: string, parameters: ConfigurationProfile, options?: ConfigurationProfilesCreateOrUpdateOptionalParams): Promise<ConfigurationProfilesCreateOrUpdateResponse>;
    /**
     * Get information about a configuration profile
     * @param configurationProfileName The configuration profile name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(configurationProfileName: string, resourceGroupName: string, options?: ConfigurationProfilesGetOptionalParams): Promise<ConfigurationProfilesGetResponse>;
    /**
     * Delete a configuration profile
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileName Name of the configuration profile
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, configurationProfileName: string, options?: ConfigurationProfilesDeleteOptionalParams): Promise<void>;
    /**
     * Updates a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to update configuration profile.
     * @param options The options parameters.
     */
    update(configurationProfileName: string, resourceGroupName: string, parameters: ConfigurationProfileUpdate, options?: ConfigurationProfilesUpdateOptionalParams): Promise<ConfigurationProfilesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ConfigurationProfilesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConfigurationProfilesCreateOrUpdateResponse = ConfigurationProfile;

/** Optional parameters. */
export declare interface ConfigurationProfilesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConfigurationProfilesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationProfilesGetResponse = ConfigurationProfile;

/** Optional parameters. */
export declare interface ConfigurationProfilesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ConfigurationProfilesListByResourceGroupResponse = ConfigurationProfileList;

/** Optional parameters. */
export declare interface ConfigurationProfilesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ConfigurationProfilesListBySubscriptionResponse = ConfigurationProfileList;

/** Optional parameters. */
export declare interface ConfigurationProfilesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ConfigurationProfilesUpdateResponse = ConfigurationProfile;

/** Interface representing a ConfigurationProfilesVersions. */
export declare interface ConfigurationProfilesVersions {
    /**
     * Retrieve a list of configuration profile version for a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listChildResources(configurationProfileName: string, resourceGroupName: string, options?: ConfigurationProfilesVersionsListChildResourcesOptionalParams): PagedAsyncIterableIterator<ConfigurationProfile>;
    /**
     * Creates a configuration profile version
     * @param configurationProfileName Name of the configuration profile.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to create or update configuration profile.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileName: string, versionName: string, resourceGroupName: string, parameters: ConfigurationProfile, options?: ConfigurationProfilesVersionsCreateOrUpdateOptionalParams): Promise<ConfigurationProfilesVersionsCreateOrUpdateResponse>;
    /**
     * Get information about a configuration profile version
     * @param configurationProfileName The configuration profile name.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(configurationProfileName: string, versionName: string, resourceGroupName: string, options?: ConfigurationProfilesVersionsGetOptionalParams): Promise<ConfigurationProfilesVersionsGetResponse>;
    /**
     * Delete a configuration profile version
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileName Name of the configuration profile
     * @param versionName The configuration profile version name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, configurationProfileName: string, versionName: string, options?: ConfigurationProfilesVersionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConfigurationProfilesVersionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConfigurationProfilesVersionsCreateOrUpdateResponse = ConfigurationProfile;

/** Optional parameters. */
export declare interface ConfigurationProfilesVersionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ConfigurationProfilesVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationProfilesVersionsGetResponse = ConfigurationProfile;

/** Optional parameters. */
export declare interface ConfigurationProfilesVersionsListChildResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listChildResources operation. */
export declare type ConfigurationProfilesVersionsListChildResourcesResponse = ConfigurationProfileList;

/** Definition of the configuration profile. */
export declare interface ConfigurationProfileUpdate extends UpdateResource {
    /** Properties of the configuration profile. */
    properties?: ConfigurationProfileProperties;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Interface representing a HCIReports. */
export declare interface HCIReports {
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    listByConfigurationProfileAssignments(resourceGroupName: string, clusterName: string, configurationProfileAssignmentName: string, options?: HCIReportsListByConfigurationProfileAssignmentsOptionalParams): PagedAsyncIterableIterator<Report>;
    /**
     * Get information about a report associated with a configuration profile assignment run
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param reportName The report name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, configurationProfileAssignmentName: string, reportName: string, options?: HCIReportsGetOptionalParams): Promise<HCIReportsGetResponse>;
}

/** Optional parameters. */
export declare interface HCIReportsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HCIReportsGetResponse = Report;

/** Optional parameters. */
export declare interface HCIReportsListByConfigurationProfileAssignmentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationProfileAssignments operation. */
export declare type HCIReportsListByConfigurationProfileAssignmentsResponse = ReportList;

/** Interface representing a HcrpReports. */
export declare interface HcrpReports {
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    listByConfigurationProfileAssignments(resourceGroupName: string, machineName: string, configurationProfileAssignmentName: string, options?: HcrpReportsListByConfigurationProfileAssignmentsOptionalParams): PagedAsyncIterableIterator<Report>;
    /**
     * Get information about a report associated with a configuration profile assignment run
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param reportName The report name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, machineName: string, configurationProfileAssignmentName: string, reportName: string, options?: HcrpReportsGetOptionalParams): Promise<HcrpReportsGetResponse>;
}

/** Optional parameters. */
export declare interface HcrpReportsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HcrpReportsGetResponse = Report;

/** Optional parameters. */
export declare interface HcrpReportsListByConfigurationProfileAssignmentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationProfileAssignments operation. */
export declare type HcrpReportsListByConfigurationProfileAssignmentsResponse = ReportList;

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Automanage REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Definition of the report. */
export declare interface Report extends ProxyResource {
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Start time of the configuration profile assignment processing. */
    startTime?: string;
    /** End time of the configuration profile assignment processing. */
    endTime?: string;
    /**
     * Last modified time of the configuration profile assignment processing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTime?: string;
    /**
     * Duration of the configuration profile assignment processing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly duration?: string;
    /**
     * Type of the configuration profile assignment processing (Initial/Consistency).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly typePropertiesType?: string;
    /**
     * The status of the configuration profile assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The configurationProfile linked to the assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly configurationProfile?: string;
    /**
     * List of resources processed by the configuration profile assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resources?: ReportResource[];
    /**
     * Error message, if any, returned by the configuration profile assignment processing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ErrorDetail;
    /**
     * Version of the report format
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reportFormatVersion?: string;
}

/** The response of the list report operation. */
export declare interface ReportList {
    /** Result of the list report operation. */
    value?: Report[];
}

/** Details about the resource processed by the configuration profile assignment */
export declare interface ReportResource {
    /**
     * Name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * ARM id of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Status of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * Error message, if any, returned when deploying the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ErrorDetail;
}

/** Interface representing a Reports. */
export declare interface Reports {
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    listByConfigurationProfileAssignments(resourceGroupName: string, configurationProfileAssignmentName: string, vmName: string, options?: ReportsListByConfigurationProfileAssignmentsOptionalParams): PagedAsyncIterableIterator<Report>;
    /**
     * Get information about a report associated with a configuration profile assignment run
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param reportName The report name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configurationProfileAssignmentName: string, reportName: string, vmName: string, options?: ReportsGetOptionalParams): Promise<ReportsGetResponse>;
}

/** Optional parameters. */
export declare interface ReportsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ReportsGetResponse = Report;

/** Optional parameters. */
export declare interface ReportsListByConfigurationProfileAssignmentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationProfileAssignments operation. */
export declare type ReportsListByConfigurationProfileAssignmentsResponse = ReportList;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The Service Principal Id for the subscription. */
export declare interface ServicePrincipal extends ProxyResource {
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The Service Principal Id for the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly servicePrincipalId?: string;
    /**
     * Returns the contributor RBAC Role exist or not for the Service Principal Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly authorizationSet?: boolean;
}

/** The list of ServicePrincipals. */
export declare interface ServicePrincipalListResult {
    /** The list of servicePrincipals. */
    value?: ServicePrincipal[];
}

/** Interface representing a ServicePrincipals. */
export declare interface ServicePrincipals {
    /**
     * Get the Automanage AAD first party Application Service Principal details for the subscription id.
     * @param options The options parameters.
     */
    listBySubscription(options?: ServicePrincipalsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ServicePrincipal>;
    /**
     * Get the Automanage AAD first party Application Service Principal details for the subscription id.
     * @param options The options parameters.
     */
    get(options?: ServicePrincipalsGetOptionalParams): Promise<ServicePrincipalsGetResponse>;
}

/** Optional parameters. */
export declare interface ServicePrincipalsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServicePrincipalsGetResponse = ServicePrincipal;

/** Optional parameters. */
export declare interface ServicePrincipalsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ServicePrincipalsListBySubscriptionResponse = ServicePrincipalListResult;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** Represents an update resource */
export declare interface UpdateResource {
    /** The tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

export { }
