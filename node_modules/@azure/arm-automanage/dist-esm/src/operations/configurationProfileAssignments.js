/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfileAssignments operations. */
export class ConfigurationProfileAssignmentsImpl {
    /**
     * Initialize a new instance of the class ConfigurationProfileAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    listByVirtualMachines(resourceGroupName, vmName, options) {
        const iter = this.listByVirtualMachinesPagingAll(resourceGroupName, vmName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByVirtualMachinesPagingPage(resourceGroupName, vmName, options);
            }
        };
    }
    listByVirtualMachinesPagingPage(resourceGroupName, vmName, options) {
        return __asyncGenerator(this, arguments, function* listByVirtualMachinesPagingPage_1() {
            let result = yield __await(this._listByVirtualMachines(resourceGroupName, vmName, options));
            yield yield __await(result.value || []);
        });
    }
    listByVirtualMachinesPagingAll(resourceGroupName, vmName, options) {
        return __asyncGenerator(this, arguments, function* listByVirtualMachinesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByVirtualMachinesPagingPage(resourceGroupName, vmName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield __await(this._list(resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments under a given subscription
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySubscriptionPagingPage(options);
            }
        };
    }
    listBySubscriptionPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result = yield __await(this._listBySubscription(options));
            yield yield __await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param options The options parameters.
     */
    listByMachineName(resourceGroupName, machineName, options) {
        const iter = this.listByMachineNamePagingAll(resourceGroupName, machineName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByMachineNamePagingPage(resourceGroupName, machineName, options);
            }
        };
    }
    listByMachineNamePagingPage(resourceGroupName, machineName, options) {
        return __asyncGenerator(this, arguments, function* listByMachineNamePagingPage_1() {
            let result = yield __await(this._listByMachineName(resourceGroupName, machineName, options));
            yield yield __await(result.value || []);
        });
    }
    listByMachineNamePagingAll(resourceGroupName, machineName, options) {
        return __asyncGenerator(this, arguments, function* listByMachineNamePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listByMachineNamePagingPage(resourceGroupName, machineName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param options The options parameters.
     */
    listByClusterName(resourceGroupName, clusterName, options) {
        const iter = this.listByClusterNamePagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByClusterNamePagingPage(resourceGroupName, clusterName, options);
            }
        };
    }
    listByClusterNamePagingPage(resourceGroupName, clusterName, options) {
        return __asyncGenerator(this, arguments, function* listByClusterNamePagingPage_1() {
            let result = yield __await(this._listByClusterName(resourceGroupName, clusterName, options));
            yield yield __await(result.value || []);
        });
    }
    listByClusterNamePagingAll(resourceGroupName, clusterName, options) {
        return __asyncGenerator(this, arguments, function* listByClusterNamePagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = __asyncValues(this.listByClusterNamePagingPage(resourceGroupName, clusterName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Creates an association between a VM and Automanage configuration profile
     * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
     *                                           is supported.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the create or update configuration profile assignment.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileAssignmentName, resourceGroupName, vmName, parameters, options) {
        return this.client.sendOperationRequest({
            configurationProfileAssignmentName,
            resourceGroupName,
            vmName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Get information about a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            configurationProfileAssignmentName,
            vmName,
            options
        }, getOperationSpec);
    }
    /**
     * Delete a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    delete(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            configurationProfileAssignmentName,
            vmName,
            options
        }, deleteOperationSpec);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    _listByVirtualMachines(resourceGroupName, vmName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vmName, options }, listByVirtualMachinesOperationSpec);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec);
    }
    /**
     * Get list of configuration profile assignments under a given subscription
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param options The options parameters.
     */
    _listByMachineName(resourceGroupName, machineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, machineName, options }, listByMachineNameOperationSpec);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param options The options parameters.
     */
    _listByClusterName(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listByClusterNameOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileAssignment
        },
        201: {
            bodyMapper: Mappers.ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.configurationProfileAssignmentName,
        Parameters.vmName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.configurationProfileAssignmentName,
        Parameters.vmName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.configurationProfileAssignmentName,
        Parameters.vmName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByVirtualMachinesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.vmName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByMachineNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.machineName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByClusterNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHci/clusters/{clusterName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=configurationProfileAssignments.js.map