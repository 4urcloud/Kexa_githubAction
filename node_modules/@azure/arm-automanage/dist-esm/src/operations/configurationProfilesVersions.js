/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfilesVersions operations. */
export class ConfigurationProfilesVersionsImpl {
    /**
     * Initialize a new instance of the class ConfigurationProfilesVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of configuration profile version for a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listChildResources(configurationProfileName, resourceGroupName, options) {
        const iter = this.listChildResourcesPagingAll(configurationProfileName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listChildResourcesPagingPage(configurationProfileName, resourceGroupName, options);
            }
        };
    }
    listChildResourcesPagingPage(configurationProfileName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listChildResourcesPagingPage_1() {
            let result = yield __await(this._listChildResources(configurationProfileName, resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listChildResourcesPagingAll(configurationProfileName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listChildResourcesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listChildResourcesPagingPage(configurationProfileName, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a configuration profile version
     * @param configurationProfileName Name of the configuration profile.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to create or update configuration profile.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileName, versionName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({
            configurationProfileName,
            versionName,
            resourceGroupName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Get information about a configuration profile version
     * @param configurationProfileName The configuration profile name.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(configurationProfileName, versionName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ configurationProfileName, versionName, resourceGroupName, options }, getOperationSpec);
    }
    /**
     * Delete a configuration profile version
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileName Name of the configuration profile
     * @param versionName The configuration profile version name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, configurationProfileName, versionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, configurationProfileName, versionName, options }, deleteOperationSpec);
    }
    /**
     * Retrieve a list of configuration profile version for a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listChildResources(configurationProfileName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ configurationProfileName, resourceGroupName, options }, listChildResourcesOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfile
        },
        201: {
            bodyMapper: Mappers.ConfigurationProfile
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.versionName,
        Parameters.configurationProfileName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfile
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.versionName,
        Parameters.configurationProfileName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.versionName,
        Parameters.configurationProfileName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listChildResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConfigurationProfileList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.configurationProfileName,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=configurationProfilesVersions.js.map