import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConfigurationProfiles } from "../operationsInterfaces";
import { AutomanageClient } from "../automanageClient";
import { ConfigurationProfile, ConfigurationProfilesListByResourceGroupOptionalParams, ConfigurationProfilesListBySubscriptionOptionalParams, ConfigurationProfilesCreateOrUpdateOptionalParams, ConfigurationProfilesCreateOrUpdateResponse, ConfigurationProfilesGetOptionalParams, ConfigurationProfilesGetResponse, ConfigurationProfilesDeleteOptionalParams, ConfigurationProfileUpdate, ConfigurationProfilesUpdateOptionalParams, ConfigurationProfilesUpdateResponse } from "../models";
/** Class containing ConfigurationProfiles operations. */
export declare class ConfigurationProfilesImpl implements ConfigurationProfiles {
    private readonly client;
    /**
     * Initialize a new instance of the class ConfigurationProfiles class.
     * @param client Reference to the service client
     */
    constructor(client: AutomanageClient);
    /**
     * Retrieve a list of configuration profile within a given resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ConfigurationProfilesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConfigurationProfile>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Retrieve a list of configuration profile within a subscription
     * @param options The options parameters.
     */
    listBySubscription(options?: ConfigurationProfilesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ConfigurationProfile>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Creates a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to create or update configuration profile.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileName: string, resourceGroupName: string, parameters: ConfigurationProfile, options?: ConfigurationProfilesCreateOrUpdateOptionalParams): Promise<ConfigurationProfilesCreateOrUpdateResponse>;
    /**
     * Get information about a configuration profile
     * @param configurationProfileName The configuration profile name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(configurationProfileName: string, resourceGroupName: string, options?: ConfigurationProfilesGetOptionalParams): Promise<ConfigurationProfilesGetResponse>;
    /**
     * Delete a configuration profile
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileName Name of the configuration profile
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, configurationProfileName: string, options?: ConfigurationProfilesDeleteOptionalParams): Promise<void>;
    /**
     * Updates a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to update configuration profile.
     * @param options The options parameters.
     */
    update(configurationProfileName: string, resourceGroupName: string, parameters: ConfigurationProfileUpdate, options?: ConfigurationProfilesUpdateOptionalParams): Promise<ConfigurationProfilesUpdateResponse>;
    /**
     * Retrieve a list of configuration profile within a given resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Retrieve a list of configuration profile within a subscription
     * @param options The options parameters.
     */
    private _listBySubscription;
}
//# sourceMappingURL=configurationProfiles.d.ts.map