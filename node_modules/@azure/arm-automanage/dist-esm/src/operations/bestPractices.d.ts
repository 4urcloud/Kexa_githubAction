import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BestPractices } from "../operationsInterfaces";
import { AutomanageClient } from "../automanageClient";
import { BestPractice, BestPracticesListByTenantOptionalParams, BestPracticesGetOptionalParams, BestPracticesGetResponse } from "../models";
/** Class containing BestPractices operations. */
export declare class BestPracticesImpl implements BestPractices {
    private readonly client;
    /**
     * Initialize a new instance of the class BestPractices class.
     * @param client Reference to the service client
     */
    constructor(client: AutomanageClient);
    /**
     * Retrieve a list of Automanage best practices
     * @param options The options parameters.
     */
    listByTenant(options?: BestPracticesListByTenantOptionalParams): PagedAsyncIterableIterator<BestPractice>;
    private listByTenantPagingPage;
    private listByTenantPagingAll;
    /**
     * Get information about a Automanage best practice
     * @param bestPracticeName The Automanage best practice name.
     * @param options The options parameters.
     */
    get(bestPracticeName: string, options?: BestPracticesGetOptionalParams): Promise<BestPracticesGetResponse>;
    /**
     * Retrieve a list of Automanage best practices
     * @param options The options parameters.
     */
    private _listByTenant;
}
//# sourceMappingURL=bestPractices.d.ts.map