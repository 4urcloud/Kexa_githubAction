import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ConfigurationProfilesVersions } from "../operationsInterfaces";
import { AutomanageClient } from "../automanageClient";
import { ConfigurationProfile, ConfigurationProfilesVersionsListChildResourcesOptionalParams, ConfigurationProfilesVersionsCreateOrUpdateOptionalParams, ConfigurationProfilesVersionsCreateOrUpdateResponse, ConfigurationProfilesVersionsGetOptionalParams, ConfigurationProfilesVersionsGetResponse, ConfigurationProfilesVersionsDeleteOptionalParams } from "../models";
/** Class containing ConfigurationProfilesVersions operations. */
export declare class ConfigurationProfilesVersionsImpl implements ConfigurationProfilesVersions {
    private readonly client;
    /**
     * Initialize a new instance of the class ConfigurationProfilesVersions class.
     * @param client Reference to the service client
     */
    constructor(client: AutomanageClient);
    /**
     * Retrieve a list of configuration profile version for a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listChildResources(configurationProfileName: string, resourceGroupName: string, options?: ConfigurationProfilesVersionsListChildResourcesOptionalParams): PagedAsyncIterableIterator<ConfigurationProfile>;
    private listChildResourcesPagingPage;
    private listChildResourcesPagingAll;
    /**
     * Creates a configuration profile version
     * @param configurationProfileName Name of the configuration profile.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to create or update configuration profile.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileName: string, versionName: string, resourceGroupName: string, parameters: ConfigurationProfile, options?: ConfigurationProfilesVersionsCreateOrUpdateOptionalParams): Promise<ConfigurationProfilesVersionsCreateOrUpdateResponse>;
    /**
     * Get information about a configuration profile version
     * @param configurationProfileName The configuration profile name.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(configurationProfileName: string, versionName: string, resourceGroupName: string, options?: ConfigurationProfilesVersionsGetOptionalParams): Promise<ConfigurationProfilesVersionsGetResponse>;
    /**
     * Delete a configuration profile version
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileName Name of the configuration profile
     * @param versionName The configuration profile version name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, configurationProfileName: string, versionName: string, options?: ConfigurationProfilesVersionsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieve a list of configuration profile version for a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listChildResources;
}
//# sourceMappingURL=configurationProfilesVersions.d.ts.map