'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const BestPractice = {
    type: {
        name: "Composite",
        className: "BestPractice",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            },
            configuration: {
                serializedName: "properties.configuration",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ConfigurationProfileProperties = {
    type: {
        name: "Composite",
        className: "ConfigurationProfileProperties",
        modelProperties: {
            configuration: {
                serializedName: "configuration",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const BestPracticeList = {
    type: {
        name: "Composite",
        className: "BestPracticeList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BestPractice"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UpdateResource = {
    type: {
        name: "Composite",
        className: "UpdateResource",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ConfigurationProfileList = {
    type: {
        name: "Composite",
        className: "ConfigurationProfileList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationProfile"
                        }
                    }
                }
            }
        }
    }
};
const ConfigurationProfileAssignmentProperties = {
    type: {
        name: "Composite",
        className: "ConfigurationProfileAssignmentProperties",
        modelProperties: {
            configurationProfile: {
                serializedName: "configurationProfile",
                type: {
                    name: "String"
                }
            },
            targetId: {
                serializedName: "targetId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationProfileAssignmentList = {
    type: {
        name: "Composite",
        className: "ConfigurationProfileAssignmentList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigurationProfileAssignment"
                        }
                    }
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReportResource = {
    type: {
        name: "Composite",
        className: "ReportResource",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ReportList = {
    type: {
        name: "Composite",
        className: "ReportList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Report"
                        }
                    }
                }
            }
        }
    }
};
const ServicePrincipalListResult = {
    type: {
        name: "Composite",
        className: "ServicePrincipalListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServicePrincipal"
                        }
                    }
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const ConfigurationProfileUpdate = {
    type: {
        name: "Composite",
        className: "ConfigurationProfileUpdate",
        modelProperties: Object.assign(Object.assign({}, UpdateResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigurationProfileProperties"
                }
            } })
    }
};
const ConfigurationProfile = {
    type: {
        name: "Composite",
        className: "ConfigurationProfile",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigurationProfileProperties"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            } })
    }
};
const ConfigurationProfileAssignment = {
    type: {
        name: "Composite",
        className: "ConfigurationProfileAssignment",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigurationProfileAssignmentProperties"
                }
            }, managedBy: {
                serializedName: "managedBy",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            } })
    }
};
const Report = {
    type: {
        name: "Composite",
        className: "Report",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, startTime: {
                serializedName: "properties.startTime",
                type: {
                    name: "String"
                }
            }, endTime: {
                serializedName: "properties.endTime",
                type: {
                    name: "String"
                }
            }, lastModifiedTime: {
                serializedName: "properties.lastModifiedTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, duration: {
                serializedName: "properties.duration",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, typePropertiesType: {
                serializedName: "properties.type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, configurationProfile: {
                serializedName: "properties.configurationProfile",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resources: {
                serializedName: "properties.resources",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReportResource"
                        }
                    }
                }
            }, error: {
                serializedName: "properties.error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }, reportFormatVersion: {
                serializedName: "properties.reportFormatVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ServicePrincipal = {
    type: {
        name: "Composite",
        className: "ServicePrincipal",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, servicePrincipalId: {
                serializedName: "properties.servicePrincipalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, authorizationSet: {
                serializedName: "properties.authorizationSet",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BestPractice: BestPractice,
    ConfigurationProfileProperties: ConfigurationProfileProperties,
    SystemData: SystemData,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    BestPracticeList: BestPracticeList,
    Resource: Resource,
    UpdateResource: UpdateResource,
    ConfigurationProfileList: ConfigurationProfileList,
    ConfigurationProfileAssignmentProperties: ConfigurationProfileAssignmentProperties,
    ConfigurationProfileAssignmentList: ConfigurationProfileAssignmentList,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ReportResource: ReportResource,
    ReportList: ReportList,
    ServicePrincipalListResult: ServicePrincipalListResult,
    TrackedResource: TrackedResource,
    ProxyResource: ProxyResource,
    ConfigurationProfileUpdate: ConfigurationProfileUpdate,
    ConfigurationProfile: ConfigurationProfile,
    ConfigurationProfileAssignment: ConfigurationProfileAssignment,
    Report: Report,
    ServicePrincipal: ServicePrincipal
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const bestPracticeName = {
    parameterPath: "bestPracticeName",
    mapper: {
        serializedName: "bestPracticeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-05-04",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const versionName = {
    parameterPath: "versionName",
    mapper: {
        serializedName: "versionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: ConfigurationProfile
};
const configurationProfileName = {
    parameterPath: "configurationProfileName",
    mapper: {
        serializedName: "configurationProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: ConfigurationProfileUpdate
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: ConfigurationProfileAssignment
};
const configurationProfileAssignmentName = {
    parameterPath: "configurationProfileAssignmentName",
    mapper: {
        serializedName: "configurationProfileAssignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const vmName = {
    parameterPath: "vmName",
    mapper: {
        serializedName: "vmName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const machineName = {
    parameterPath: "machineName",
    mapper: {
        serializedName: "machineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const reportName = {
    parameterPath: "reportName",
    mapper: {
        serializedName: "reportName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BestPractices operations. */
class BestPracticesImpl {
    /**
     * Initialize a new instance of the class BestPractices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of Automanage best practices
     * @param options The options parameters.
     */
    listByTenant(options) {
        const iter = this.listByTenantPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByTenantPagingPage(options);
            }
        };
    }
    listByTenantPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantPagingPage_1() {
            let result = yield tslib.__await(this._listByTenant(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByTenantPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByTenantPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get information about a Automanage best practice
     * @param bestPracticeName The Automanage best practice name.
     * @param options The options parameters.
     */
    get(bestPracticeName, options) {
        return this.client.sendOperationRequest({ bestPracticeName, options }, getOperationSpec$a);
    }
    /**
     * Retrieve a list of Automanage best practices
     * @param options The options parameters.
     */
    _listByTenant(options) {
        return this.client.sendOperationRequest({ options }, listByTenantOperationSpec$1);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$a = {
    path: "/providers/Microsoft.Automanage/bestPractices/{bestPracticeName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BestPractice
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, bestPracticeName],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByTenantOperationSpec$1 = {
    path: "/providers/Microsoft.Automanage/bestPractices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BestPracticeList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BestPracticesVersions operations. */
class BestPracticesVersionsImpl {
    /**
     * Initialize a new instance of the class BestPracticesVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of Automanage best practices versions
     * @param bestPracticeName The Automanage best practice name.
     * @param options The options parameters.
     */
    listByTenant(bestPracticeName, options) {
        const iter = this.listByTenantPagingAll(bestPracticeName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByTenantPagingPage(bestPracticeName, options);
            }
        };
    }
    listByTenantPagingPage(bestPracticeName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantPagingPage_1() {
            let result = yield tslib.__await(this._listByTenant(bestPracticeName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByTenantPagingAll(bestPracticeName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByTenantPagingPage(bestPracticeName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get information about a Automanage best practice version
     * @param bestPracticeName The Automanage best practice name.
     * @param versionName The Automanage best practice version name.
     * @param options The options parameters.
     */
    get(bestPracticeName, versionName, options) {
        return this.client.sendOperationRequest({ bestPracticeName, versionName, options }, getOperationSpec$9);
    }
    /**
     * Retrieve a list of Automanage best practices versions
     * @param bestPracticeName The Automanage best practice name.
     * @param options The options parameters.
     */
    _listByTenant(bestPracticeName, options) {
        return this.client.sendOperationRequest({ bestPracticeName, options }, listByTenantOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$9 = {
    path: "/providers/Microsoft.Automanage/bestPractices/{bestPracticeName}/versions/{versionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BestPractice
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        bestPracticeName,
        versionName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByTenantOperationSpec = {
    path: "/providers/Microsoft.Automanage/bestPractices/{bestPracticeName}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BestPracticeList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, bestPracticeName],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfiles operations. */
class ConfigurationProfilesImpl {
    /**
     * Initialize a new instance of the class ConfigurationProfiles class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of configuration profile within a given resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Retrieve a list of configuration profile within a subscription
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySubscriptionPagingPage(options);
            }
        };
    }
    listBySubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Creates a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to create or update configuration profile.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ configurationProfileName, resourceGroupName, parameters, options }, createOrUpdateOperationSpec$4);
    }
    /**
     * Get information about a configuration profile
     * @param configurationProfileName The configuration profile name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(configurationProfileName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ configurationProfileName, resourceGroupName, options }, getOperationSpec$8);
    }
    /**
     * Delete a configuration profile
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileName Name of the configuration profile
     * @param options The options parameters.
     */
    delete(resourceGroupName, configurationProfileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, configurationProfileName, options }, deleteOperationSpec$4);
    }
    /**
     * Updates a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to update configuration profile.
     * @param options The options parameters.
     */
    update(configurationProfileName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({ configurationProfileName, resourceGroupName, parameters, options }, updateOperationSpec);
    }
    /**
     * Retrieve a list of configuration profile within a given resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Retrieve a list of configuration profile within a subscription
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$2);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigurationProfile
        },
        201: {
            bodyMapper: ConfigurationProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ConfigurationProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listBySubscriptionOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/configurationProfiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfilesVersions operations. */
class ConfigurationProfilesVersionsImpl {
    /**
     * Initialize a new instance of the class ConfigurationProfilesVersions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of configuration profile version for a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listChildResources(configurationProfileName, resourceGroupName, options) {
        const iter = this.listChildResourcesPagingAll(configurationProfileName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listChildResourcesPagingPage(configurationProfileName, resourceGroupName, options);
            }
        };
    }
    listChildResourcesPagingPage(configurationProfileName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listChildResourcesPagingPage_1() {
            let result = yield tslib.__await(this._listChildResources(configurationProfileName, resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listChildResourcesPagingAll(configurationProfileName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listChildResourcesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listChildResourcesPagingPage(configurationProfileName, resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a configuration profile version
     * @param configurationProfileName Name of the configuration profile.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters Parameters supplied to create or update configuration profile.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileName, versionName, resourceGroupName, parameters, options) {
        return this.client.sendOperationRequest({
            configurationProfileName,
            versionName,
            resourceGroupName,
            parameters,
            options
        }, createOrUpdateOperationSpec$3);
    }
    /**
     * Get information about a configuration profile version
     * @param configurationProfileName The configuration profile name.
     * @param versionName The configuration profile version name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(configurationProfileName, versionName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ configurationProfileName, versionName, resourceGroupName, options }, getOperationSpec$7);
    }
    /**
     * Delete a configuration profile version
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileName Name of the configuration profile
     * @param versionName The configuration profile version name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, configurationProfileName, versionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, configurationProfileName, versionName, options }, deleteOperationSpec$3);
    }
    /**
     * Retrieve a list of configuration profile version for a configuration profile
     * @param configurationProfileName Name of the configuration profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listChildResources(configurationProfileName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ configurationProfileName, resourceGroupName, options }, listChildResourcesOperationSpec);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigurationProfile
        },
        201: {
            bodyMapper: ConfigurationProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        versionName,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        versionName,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions/{versionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        versionName,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const listChildResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfiles/{configurationProfileName}/versions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        configurationProfileName,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationProfileAssignments operations. */
class ConfigurationProfileAssignmentsImpl {
    /**
     * Initialize a new instance of the class ConfigurationProfileAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    listByVirtualMachines(resourceGroupName, vmName, options) {
        const iter = this.listByVirtualMachinesPagingAll(resourceGroupName, vmName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByVirtualMachinesPagingPage(resourceGroupName, vmName, options);
            }
        };
    }
    listByVirtualMachinesPagingPage(resourceGroupName, vmName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByVirtualMachinesPagingPage_1() {
            let result = yield tslib.__await(this._listByVirtualMachines(resourceGroupName, vmName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByVirtualMachinesPagingAll(resourceGroupName, vmName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByVirtualMachinesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByVirtualMachinesPagingPage(resourceGroupName, vmName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(resourceGroupName, options);
            }
        };
    }
    listPagingPage(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments under a given subscription
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySubscriptionPagingPage(options);
            }
        };
    }
    listBySubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param options The options parameters.
     */
    listByMachineName(resourceGroupName, machineName, options) {
        const iter = this.listByMachineNamePagingAll(resourceGroupName, machineName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByMachineNamePagingPage(resourceGroupName, machineName, options);
            }
        };
    }
    listByMachineNamePagingPage(resourceGroupName, machineName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByMachineNamePagingPage_1() {
            let result = yield tslib.__await(this._listByMachineName(resourceGroupName, machineName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByMachineNamePagingAll(resourceGroupName, machineName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByMachineNamePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByMachineNamePagingPage(resourceGroupName, machineName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param options The options parameters.
     */
    listByClusterName(resourceGroupName, clusterName, options) {
        const iter = this.listByClusterNamePagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByClusterNamePagingPage(resourceGroupName, clusterName, options);
            }
        };
    }
    listByClusterNamePagingPage(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterNamePagingPage_1() {
            let result = yield tslib.__await(this._listByClusterName(resourceGroupName, clusterName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByClusterNamePagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterNamePagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByClusterNamePagingPage(resourceGroupName, clusterName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Creates an association between a VM and Automanage configuration profile
     * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
     *                                           is supported.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param parameters Parameters supplied to the create or update configuration profile assignment.
     * @param options The options parameters.
     */
    createOrUpdate(configurationProfileAssignmentName, resourceGroupName, vmName, parameters, options) {
        return this.client.sendOperationRequest({
            configurationProfileAssignmentName,
            resourceGroupName,
            vmName,
            parameters,
            options
        }, createOrUpdateOperationSpec$2);
    }
    /**
     * Get information about a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            configurationProfileAssignmentName,
            vmName,
            options
        }, getOperationSpec$6);
    }
    /**
     * Delete a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    delete(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            configurationProfileAssignmentName,
            vmName,
            options
        }, deleteOperationSpec$2);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    _listByVirtualMachines(resourceGroupName, vmName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vmName, options }, listByVirtualMachinesOperationSpec);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$1);
    }
    /**
     * Get list of configuration profile assignments under a given subscription
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$1);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param options The options parameters.
     */
    _listByMachineName(resourceGroupName, machineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, machineName, options }, listByMachineNameOperationSpec);
    }
    /**
     * Get list of configuration profile assignments
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param options The options parameters.
     */
    _listByClusterName(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listByClusterNameOperationSpec);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignment
        },
        201: {
            bodyMapper: ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listByVirtualMachinesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vmName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listBySubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$7
};
const listByMachineNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        machineName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listByClusterNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHci/clusters/{clusterName}/providers/Microsoft.Automanage/configurationProfileAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignmentList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Automanage REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Automanage REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Automanage/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Reports operations. */
class ReportsImpl {
    /**
     * Initialize a new instance of the class Reports class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    listByConfigurationProfileAssignments(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        const iter = this.listByConfigurationProfileAssignmentsPagingAll(resourceGroupName, configurationProfileAssignmentName, vmName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, configurationProfileAssignmentName, vmName, options);
            }
        };
    }
    listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByConfigurationProfileAssignmentsPagingPage_1() {
            let result = yield tslib.__await(this._listByConfigurationProfileAssignments(resourceGroupName, configurationProfileAssignmentName, vmName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByConfigurationProfileAssignmentsPagingAll(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByConfigurationProfileAssignmentsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, configurationProfileAssignmentName, vmName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get information about a report associated with a configuration profile assignment run
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param reportName The report name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    get(resourceGroupName, configurationProfileAssignmentName, reportName, vmName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            configurationProfileAssignmentName,
            reportName,
            vmName,
            options
        }, getOperationSpec$5);
    }
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param vmName The name of the virtual machine.
     * @param options The options parameters.
     */
    _listByConfigurationProfileAssignments(resourceGroupName, configurationProfileAssignmentName, vmName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            configurationProfileAssignmentName,
            vmName,
            options
        }, listByConfigurationProfileAssignmentsOperationSpec$2);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports/{reportName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Report
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName,
        reportName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByConfigurationProfileAssignmentsOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReportList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        vmName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ServicePrincipals operations. */
class ServicePrincipalsImpl {
    /**
     * Initialize a new instance of the class ServicePrincipals class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the Automanage AAD first party Application Service Principal details for the subscription id.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySubscriptionPagingPage(options);
            }
        };
    }
    listBySubscriptionPagingPage(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get the Automanage AAD first party Application Service Principal details for the subscription id.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get the Automanage AAD first party Application Service Principal details for the subscription id.
     * @param options The options parameters.
     */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec$4);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/servicePrincipals",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServicePrincipalListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Automanage/servicePrincipals/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServicePrincipal
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ConfigurationProfileHcrpAssignments operations. */
class ConfigurationProfileHcrpAssignmentsImpl {
    /**
     * Initialize a new instance of the class ConfigurationProfileHcrpAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates an association between a ARC machine and Automanage configuration profile
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
     *                                           is supported.
     * @param parameters Parameters supplied to the create or update configuration profile assignment.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, machineName, configurationProfileAssignmentName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            machineName,
            configurationProfileAssignmentName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Get information about a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    get(resourceGroupName, machineName, configurationProfileAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            machineName,
            configurationProfileAssignmentName,
            options
        }, getOperationSpec$3);
    }
    /**
     * Delete a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment
     * @param options The options parameters.
     */
    delete(resourceGroupName, machineName, configurationProfileAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            machineName,
            configurationProfileAssignmentName,
            options
        }, deleteOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignment
        },
        201: {
            bodyMapper: ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        machineName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        machineName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        machineName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing HcrpReports operations. */
class HcrpReportsImpl {
    /**
     * Initialize a new instance of the class HcrpReports class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    listByConfigurationProfileAssignments(resourceGroupName, machineName, configurationProfileAssignmentName, options) {
        const iter = this.listByConfigurationProfileAssignmentsPagingAll(resourceGroupName, machineName, configurationProfileAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, machineName, configurationProfileAssignmentName, options);
            }
        };
    }
    listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, machineName, configurationProfileAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByConfigurationProfileAssignmentsPagingPage_1() {
            let result = yield tslib.__await(this._listByConfigurationProfileAssignments(resourceGroupName, machineName, configurationProfileAssignmentName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByConfigurationProfileAssignmentsPagingAll(resourceGroupName, machineName, configurationProfileAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByConfigurationProfileAssignmentsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, machineName, configurationProfileAssignmentName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get information about a report associated with a configuration profile assignment run
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param reportName The report name.
     * @param options The options parameters.
     */
    get(resourceGroupName, machineName, configurationProfileAssignmentName, reportName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            machineName,
            configurationProfileAssignmentName,
            reportName,
            options
        }, getOperationSpec$2);
    }
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param machineName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    _listByConfigurationProfileAssignments(resourceGroupName, machineName, configurationProfileAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            machineName,
            configurationProfileAssignmentName,
            options
        }, listByConfigurationProfileAssignmentsOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports/{reportName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Report
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        machineName,
        reportName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByConfigurationProfileAssignmentsOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReportList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        machineName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ConfigurationProfileHCIAssignments operations. */
class ConfigurationProfileHCIAssignmentsImpl {
    /**
     * Initialize a new instance of the class ConfigurationProfileHCIAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates an association between a AzureStackHCI cluster and Automanage configuration profile
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment. Only default
     *                                           is supported.
     * @param parameters Parameters supplied to the create or update configuration profile assignment.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, clusterName, configurationProfileAssignmentName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            configurationProfileAssignmentName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Get information about a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, configurationProfileAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            configurationProfileAssignmentName,
            options
        }, getOperationSpec$1);
    }
    /**
     * Delete a configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName Name of the configuration profile assignment
     * @param options The options parameters.
     */
    delete(resourceGroupName, clusterName, configurationProfileAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            configurationProfileAssignmentName,
            options
        }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHci/clusters/{clusterName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignment
        },
        201: {
            bodyMapper: ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHci/clusters/{clusterName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationProfileAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHci/clusters/{clusterName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing HCIReports operations. */
class HCIReportsImpl {
    /**
     * Initialize a new instance of the class HCIReports class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    listByConfigurationProfileAssignments(resourceGroupName, clusterName, configurationProfileAssignmentName, options) {
        const iter = this.listByConfigurationProfileAssignmentsPagingAll(resourceGroupName, clusterName, configurationProfileAssignmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, clusterName, configurationProfileAssignmentName, options);
            }
        };
    }
    listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, clusterName, configurationProfileAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByConfigurationProfileAssignmentsPagingPage_1() {
            let result = yield tslib.__await(this._listByConfigurationProfileAssignments(resourceGroupName, clusterName, configurationProfileAssignmentName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByConfigurationProfileAssignmentsPagingAll(resourceGroupName, clusterName, configurationProfileAssignmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByConfigurationProfileAssignmentsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByConfigurationProfileAssignmentsPagingPage(resourceGroupName, clusterName, configurationProfileAssignmentName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get information about a report associated with a configuration profile assignment run
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param reportName The report name.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, configurationProfileAssignmentName, reportName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            configurationProfileAssignmentName,
            reportName,
            options
        }, getOperationSpec);
    }
    /**
     * Retrieve a list of reports within a given configuration profile assignment
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Arc machine.
     * @param configurationProfileAssignmentName The configuration profile assignment name.
     * @param options The options parameters.
     */
    _listByConfigurationProfileAssignments(resourceGroupName, clusterName, configurationProfileAssignmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            configurationProfileAssignmentName,
            options
        }, listByConfigurationProfileAssignmentsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHci/clusters/{clusterName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports/{reportName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Report
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        clusterName,
        reportName
    ],
    headerParameters: [accept],
    serializer
};
const listByConfigurationProfileAssignmentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHci/clusters/{clusterName}/providers/Microsoft.Automanage/configurationProfileAssignments/{configurationProfileAssignmentName}/reports",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReportList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        configurationProfileAssignmentName,
        clusterName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AutomanageClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AutomanageClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-automanage/1.0.2`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://management.azure.com/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: `${optionsWithDefaults.credentialScopes}`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-05-04";
        this.bestPractices = new BestPracticesImpl(this);
        this.bestPracticesVersions = new BestPracticesVersionsImpl(this);
        this.configurationProfiles = new ConfigurationProfilesImpl(this);
        this.configurationProfilesVersions = new ConfigurationProfilesVersionsImpl(this);
        this.configurationProfileAssignments = new ConfigurationProfileAssignmentsImpl(this);
        this.operations = new OperationsImpl(this);
        this.reports = new ReportsImpl(this);
        this.servicePrincipals = new ServicePrincipalsImpl(this);
        this.configurationProfileHcrpAssignments = new ConfigurationProfileHcrpAssignmentsImpl(this);
        this.hcrpReports = new HcrpReportsImpl(this);
        this.configurationProfileHCIAssignments = new ConfigurationProfileHCIAssignmentsImpl(this);
        this.hCIReports = new HCIReportsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AutomanageClient = AutomanageClient;
//# sourceMappingURL=index.js.map
