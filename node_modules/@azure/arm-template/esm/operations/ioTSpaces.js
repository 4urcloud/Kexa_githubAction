import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import "@azure/core-paging";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LROPoller } from "../lro";
/// <reference lib="esnext.asynciterable" />
/** Class representing a IoTSpaces. */
export class IoTSpacesImpl {
    /**
     * Initialize a new instance of the class IoTSpaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all the IoTSpaces instances in a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield __await(this._list(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all the IoTSpaces instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByResourceGroupPagingPage(resourceGroupName, options);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result = yield __await(this._listByResourceGroup(resourceGroupName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get the metadata of a IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getOperationSpec);
    }
    /**
     * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property is to
     * retrieve the IoTSpaces instance metadata and security metadata, and then combine them with the
     * modified values in a new body to update the IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, resourceName, iotSpaceDescription, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return { flatResponse, rawResponse: currentRawResponse };
            });
            return new LROPoller({ intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs }, { resourceGroupName, resourceName, iotSpaceDescription, options }, createOrUpdateOperationSpec, sendOperation);
        });
    }
    /**
     * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property is to
     * retrieve the IoTSpaces instance metadata and security metadata, and then combine them with the
     * modified values in a new body to update the IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, resourceName, iotSpaceDescription, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, resourceName, iotSpaceDescription, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update the metadata of a IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, resourceName, iotSpacePatchDescription, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return { flatResponse, rawResponse: currentRawResponse };
            });
            return new LROPoller({ intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs }, { resourceGroupName, resourceName, iotSpacePatchDescription, options }, updateOperationSpec, sendOperation);
        });
    }
    /**
     * Update the metadata of a IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, resourceName, iotSpacePatchDescription, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, resourceName, iotSpacePatchDescription, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete an IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, resourceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return { flatResponse, rawResponse: currentRawResponse };
            });
            return new LROPoller({ intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs }, { resourceGroupName, resourceName, options }, deleteOperationSpec, sendOperation);
        });
    }
    /**
     * Delete an IoTSpaces instance.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param resourceName The name of the IoTSpaces instance.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, resourceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, resourceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get all the IoTSpaces instances in a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Get all the IoTSpaces instances in a resource group.
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Check if an IoTSpaces instance name is available.
     * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the
     *                        IoTSpaces instance to check.
     * @param options The options parameters.
     */
    checkNameAvailability(operationInputs, options) {
        return this.client.sendOperationRequest({ operationInputs, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        201: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        202: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        204: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    requestBody: Parameters.iotSpaceDescription,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        201: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        202: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        204: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    requestBody: Parameters.iotSpacePatchDescription,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        201: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        202: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        204: {
            bodyMapper: Mappers.IoTSpacesDescription
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/Graph",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesNameAvailabilityInfo
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    requestBody: Parameters.operationInputs,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.IoTSpacesDescriptionListResult
        },
        default: {
            bodyMapper: Mappers.ErrorDetails
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=ioTSpaces.js.map