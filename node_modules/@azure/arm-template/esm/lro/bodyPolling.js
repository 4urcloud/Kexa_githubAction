// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { failureStates, successStates } from "./stateMachine";
function getProvisioningState(rawResponse) {
    var _a, _b, _c;
    const { properties, provisioningState } = (_a = rawResponse.parsedBody) !== null && _a !== void 0 ? _a : (rawResponse.bodyAsText ? JSON.parse(rawResponse.bodyAsText) : {});
    const state = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;
    return (_c = state === null || state === void 0 ? void 0 : state.toLowerCase()) !== null && _c !== void 0 ? _c : "succeeded";
}
export function isBodyPollingDone(rawResponse) {
    const state = getProvisioningState(rawResponse);
    if (failureStates.includes(state)) {
        throw new Error(`Provisioning state: ${state}`);
    }
    return successStates.includes(state);
}
/**
 * Creates a polling strategy based on BodyPolling which uses the provisioning state
 * from the result to determine the current operation state
 */
export function processBodyPollingOperationResult(rawResponse, flatResponse) {
    return {
        rawResponse,
        flatResponse,
        done: isBodyPollingDone(rawResponse)
    };
}
//# sourceMappingURL=bodyPolling.js.map