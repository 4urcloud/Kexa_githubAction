// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __awaiter } from "tslib";
import { failureStates, successStates } from "./stateMachine";
function getResponseStatus(rawResponse) {
    var _a, _b;
    const { status } = (_a = rawResponse.parsedBody) !== null && _a !== void 0 ? _a : (rawResponse.bodyAsText ? JSON.parse(rawResponse.bodyAsText) : {});
    return (_b = status === null || status === void 0 ? void 0 : status.toLowerCase()) !== null && _b !== void 0 ? _b : "succeeded";
}
function isAzureAsyncPollingDone(rawResponse) {
    const state = getResponseStatus(rawResponse);
    if (failureStates.includes(state)) {
        throw new Error(`Operation status: ${state}`);
    }
    return successStates.includes(state);
}
export function processAzureAsyncOperationResult(restrieveResource, resourceLocation, finalStateVia) {
    return (rawResponse, flatResponse) => {
        if (isAzureAsyncPollingDone(rawResponse)) {
            if (resourceLocation === undefined) {
                return { rawResponse, flatResponse, done: true };
            }
            else {
                return {
                    rawResponse,
                    flatResponse,
                    done: false,
                    next: () => __awaiter(this, void 0, void 0, function* () {
                        function sendFinalRequest() {
                            return __awaiter(this, void 0, void 0, function* () {
                                switch (finalStateVia) {
                                    case "original-uri":
                                        return restrieveResource();
                                    case "azure-async-operation":
                                        return Promise.resolve(undefined);
                                    case "location":
                                    default:
                                        return restrieveResource(resourceLocation);
                                }
                            });
                        }
                        const finalResponse = yield sendFinalRequest();
                        return Object.assign(Object.assign({}, (finalResponse !== null && finalResponse !== void 0 ? finalResponse : {
                            rawResponse,
                            flatResponse
                        })), { done: true });
                    })
                };
            }
        }
        return {
            rawResponse,
            flatResponse,
            done: false
        };
    };
}
//# sourceMappingURL=azureAsyncPolling.js.map