import { Poller, PollOperationState } from "@azure/core-lro";
import { OperationArguments, OperationSpec } from "@azure/core-client";
import { FinalStateVia, SendOperationFn } from "./models";
export interface LROPollerOptions {
    /**
     * Defines how much time the poller is going to wait before making a new request to the service.
     */
    intervalInMs?: number;
    /**
     * A serialized poller which can be used to resume an existing paused Long-Running-Operation.
     */
    resumeFrom?: string;
}
export declare class LROPoller<TResult> extends Poller<PollOperationState<TResult>, TResult> {
    private intervalInMs;
    constructor({ intervalInMs, resumeFrom }: LROPollerOptions, initialOperationArguments: OperationArguments, initialOperationSpec: OperationSpec, sendOperation: SendOperationFn<TResult>, finalStateVia?: FinalStateVia);
    /**
     * The method used by the poller to wait before attempting to update its operation.
     */
    delay(): Promise<void>;
}
//# sourceMappingURL=lroPoller.d.ts.map