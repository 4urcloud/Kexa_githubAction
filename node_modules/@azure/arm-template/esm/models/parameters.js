import { IoTSpacesDescription as IoTSpacesDescriptionMapper, IoTSpacesPatchDescription as IoTSpacesPatchDescriptionMapper, OperationInputs as OperationInputsMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2017-10-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const iotSpaceDescription = {
    parameterPath: "iotSpaceDescription",
    mapper: IoTSpacesDescriptionMapper
};
export const iotSpacePatchDescription = {
    parameterPath: "iotSpacePatchDescription",
    mapper: IoTSpacesPatchDescriptionMapper
};
export const operationInputs = {
    parameterPath: "operationInputs",
    mapper: OperationInputsMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
//# sourceMappingURL=parameters.js.map