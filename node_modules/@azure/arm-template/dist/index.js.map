{"version":3,"file":"index.js","sources":["../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/lro/azureAsyncPolling.ts","../src/lro/bodyPolling.ts","../src/lro/locationPolling.ts","../src/lro/passthrough.ts","../src/lro/pollingMethod.ts","../src/lro/stateMachine.ts","../src/lro/requestUtils.ts","../src/lro/operation.ts","../src/lro/lroPoller.ts","../src/operations/ioTSpaces.ts","../src/operations/operations.ts","../src/ioTSpacesClientContext.ts","../src/ioTSpacesClient.ts"],"sourcesContent":["import * as coreClient from \"@azure/core-client\";\n\n/** The properties of an IoTSpaces instance. */\nexport interface IoTSpacesProperties {\n  /**\n   * The provisioning state.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n  /**\n   * The management Api endpoint.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly managementApiUrl?: string;\n  /**\n   * The management UI endpoint.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly webPortalUrl?: string;\n  /** The properties of the designated storage container. */\n  storageContainer?: StorageContainerProperties;\n}\n\n/** The properties of the Azure Storage Container for file archive. */\nexport interface StorageContainerProperties {\n  /** The connection string of the storage account. */\n  connectionString?: string;\n  /** The subscription identifier of the storage account. */\n  subscriptionId?: string;\n  /** The name of the resource group of the storage account. */\n  resourceGroup?: string;\n  /** The name of storage container in the storage account. */\n  containerName?: string;\n}\n\n/** Information about the SKU of the IoTSpaces instance. */\nexport interface IoTSpacesSkuInfo {\n  /** The name of the SKU. */\n  name: IoTSpacesSku;\n}\n\n/** The common properties of an IoTSpaces service. */\nexport interface Resource {\n  /**\n   * The resource identifier.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The resource name.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The resource type.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource location. */\n  location: string;\n  /** The resource tags. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Error details. */\nexport interface ErrorDetails {\n  /**\n   * The error code.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message?: string;\n  /**\n   * The target of the particular error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly target?: string;\n}\n\n/** The description of the IoTSpaces service. */\nexport interface IoTSpacesPatchDescription {\n  /** Instance tags */\n  tags?: { [propertyName: string]: string };\n  /** The common properties of an IoTSpaces service. */\n  properties?: IoTSpacesProperties;\n}\n\n/** A list of IoTSpaces description objects with a next link. */\nexport interface IoTSpacesDescriptionListResult {\n  /** The link used to get the next page of IoTSpaces description objects. */\n  nextLink?: string;\n  /** A list of IoTSpaces description objects. */\n  value?: IoTSpacesDescription[];\n}\n\n/** A list of IoTSpaces service operations. It contains a list of operations and a URL link to get the next set of results. */\nexport interface OperationListResult {\n  /** The link used to get the next page of IoTSpaces description objects. */\n  nextLink?: string;\n  /**\n   * A list of IoT spaces operations supported by the Microsoft.IoTSpaces resource provider.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: Operation[];\n}\n\n/** IoTSpaces service REST API operation */\nexport interface Operation {\n  /**\n   * Operation name: {provider}/{resource}/{read | write | action | delete}\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /** The object that represents the operation. */\n  display?: OperationDisplay;\n}\n\n/** The object that represents the operation. */\nexport interface OperationDisplay {\n  /**\n   * Service provider: Microsoft IoTSpaces\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provider?: string;\n  /**\n   * Resource Type: IoTSpaces\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly resource?: string;\n  /**\n   * Name of the operation\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly operation?: string;\n  /**\n   * Friendly description for the operation,\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly description?: string;\n}\n\n/** Input values. */\nexport interface OperationInputs {\n  /** The name of the IoTSpaces service instance to check. */\n  name: string;\n}\n\n/** The properties indicating whether a given IoTSpaces service name is available. */\nexport interface IoTSpacesNameAvailabilityInfo {\n  /**\n   * The value which indicates whether the provided name is available.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nameAvailable?: boolean;\n  /**\n   * The reason for unavailability.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly reason?: IoTSpacesNameUnavailabilityReason;\n  /** The detailed reason message. */\n  message?: string;\n}\n\n/** The description of the IoTSpaces service. */\nexport type IoTSpacesDescription = Resource & {\n  /** The common properties of a IoTSpaces service. */\n  properties?: IoTSpacesProperties;\n  /** A valid instance SKU. */\n  sku: IoTSpacesSkuInfo;\n};\n\n/** Known values of {@link ProvisioningState} that the service accepts. */\nexport const enum KnownProvisioningState {\n  Provisioning = \"Provisioning\",\n  Deleting = \"Deleting\",\n  Succeeded = \"Succeeded\",\n  Failed = \"Failed\",\n  Canceled = \"Canceled\"\n}\n\n/**\n * Defines values for ProvisioningState. \\\n * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Provisioning** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Failed** \\\n * **Canceled**\n */\nexport type ProvisioningState = string;\n\n/** Known values of {@link IoTSpacesSku} that the service accepts. */\nexport const enum KnownIoTSpacesSku {\n  F1 = \"F1\",\n  S1 = \"S1\",\n  S2 = \"S2\",\n  S3 = \"S3\"\n}\n\n/**\n * Defines values for IoTSpacesSku. \\\n * {@link KnownIoTSpacesSku} can be used interchangeably with IoTSpacesSku,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **F1** \\\n * **S1** \\\n * **S2** \\\n * **S3**\n */\nexport type IoTSpacesSku = string;\n/** Defines values for IoTSpacesNameUnavailabilityReason. */\nexport type IoTSpacesNameUnavailabilityReason = \"Invalid\" | \"AlreadyExists\";\n\n/** Optional parameters. */\nexport interface IoTSpacesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type IoTSpacesGetResponse = IoTSpacesDescription;\n\n/** Optional parameters. */\nexport interface IoTSpacesCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type IoTSpacesCreateOrUpdateResponse = IoTSpacesDescription;\n\n/** Optional parameters. */\nexport interface IoTSpacesUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type IoTSpacesUpdateResponse = IoTSpacesDescription;\n\n/** Optional parameters. */\nexport interface IoTSpacesDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the delete operation. */\nexport type IoTSpacesDeleteResponse = IoTSpacesDescription;\n\n/** Optional parameters. */\nexport interface IoTSpacesListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type IoTSpacesListResponse = IoTSpacesDescriptionListResult;\n\n/** Optional parameters. */\nexport interface IoTSpacesListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type IoTSpacesListByResourceGroupResponse = IoTSpacesDescriptionListResult;\n\n/** Optional parameters. */\nexport interface IoTSpacesCheckNameAvailabilityOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the checkNameAvailability operation. */\nexport type IoTSpacesCheckNameAvailabilityResponse = IoTSpacesNameAvailabilityInfo;\n\n/** Optional parameters. */\nexport interface IoTSpacesListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type IoTSpacesListNextResponse = IoTSpacesDescriptionListResult;\n\n/** Optional parameters. */\nexport interface IoTSpacesListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type IoTSpacesListByResourceGroupNextResponse = IoTSpacesDescriptionListResult;\n\n/** Optional parameters. */\nexport interface OperationsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type OperationsListResponse = OperationListResult;\n\n/** Optional parameters. */\nexport interface OperationsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type OperationsListNextResponse = OperationListResult;\n\n/** Optional parameters. */\nexport interface IoTSpacesClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","import * as coreClient from \"@azure/core-client\";\n\nexport const IoTSpacesProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IoTSpacesProperties\",\n    modelProperties: {\n      provisioningState: {\n        serializedName: \"provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      managementApiUrl: {\n        serializedName: \"managementApiUrl\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      webPortalUrl: {\n        serializedName: \"webPortalUrl\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      storageContainer: {\n        serializedName: \"storageContainer\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageContainerProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageContainerProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"StorageContainerProperties\",\n    modelProperties: {\n      connectionString: {\n        serializedName: \"connectionString\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subscriptionId: {\n        serializedName: \"subscriptionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceGroup: {\n        serializedName: \"resourceGroup\",\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        serializedName: \"containerName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IoTSpacesSkuInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IoTSpacesSkuInfo\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Resource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Resource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        constraints: {\n          Pattern: new RegExp(\"^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$\")\n        },\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorDetails\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IoTSpacesPatchDescription: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IoTSpacesPatchDescription\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"IoTSpacesProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const IoTSpacesDescriptionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IoTSpacesDescriptionListResult\",\n    modelProperties: {\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IoTSpacesDescription\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OperationListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationListResult\",\n    modelProperties: {\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Operation\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Operation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Operation\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      display: {\n        serializedName: \"display\",\n        type: {\n          name: \"Composite\",\n          className: \"OperationDisplay\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationDisplay: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationDisplay\",\n    modelProperties: {\n      provider: {\n        serializedName: \"provider\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"resource\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      operation: {\n        serializedName: \"operation\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationInputs: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationInputs\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IoTSpacesNameAvailabilityInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IoTSpacesNameAvailabilityInfo\",\n    modelProperties: {\n      nameAvailable: {\n        serializedName: \"nameAvailable\",\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        readOnly: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"Invalid\", \"AlreadyExists\"]\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IoTSpacesDescription: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IoTSpacesDescription\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Composite\",\n          className: \"IoTSpacesProperties\"\n        }\n      },\n      sku: {\n        serializedName: \"sku\",\n        type: {\n          name: \"Composite\",\n          className: \"IoTSpacesSkuInfo\"\n        }\n      }\n    }\n  }\n};\n","import {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  IoTSpacesDescription as IoTSpacesDescriptionMapper,\n  IoTSpacesPatchDescription as IoTSpacesPatchDescriptionMapper,\n  OperationInputs as OperationInputsMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2017-10-01-preview\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const subscriptionId: OperationURLParameter = {\n  parameterPath: \"subscriptionId\",\n  mapper: {\n    serializedName: \"subscriptionId\",\n    required: true,\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const resourceGroupName: OperationURLParameter = {\n  parameterPath: \"resourceGroupName\",\n  mapper: {\n    constraints: {\n      MaxLength: 64,\n      MinLength: 1\n    },\n    serializedName: \"resourceGroupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resourceName: OperationURLParameter = {\n  parameterPath: \"resourceName\",\n  mapper: {\n    constraints: {\n      MaxLength: 64,\n      MinLength: 1\n    },\n    serializedName: \"resourceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const iotSpaceDescription: OperationParameter = {\n  parameterPath: \"iotSpaceDescription\",\n  mapper: IoTSpacesDescriptionMapper\n};\n\nexport const iotSpacePatchDescription: OperationParameter = {\n  parameterPath: \"iotSpacePatchDescription\",\n  mapper: IoTSpacesPatchDescriptionMapper\n};\n\nexport const operationInputs: OperationParameter = {\n  parameterPath: \"operationInputs\",\n  mapper: OperationInputsMapper\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { FullOperationResponse } from \"@azure/core-client\";\nimport { FinalStateVia, LROResult } from \"./models\";\nimport { failureStates, LROState, successStates } from \"./stateMachine\";\n\nfunction getResponseStatus(rawResponse: FullOperationResponse): string {\n  const { status } =\n    rawResponse.parsedBody ??\n    (rawResponse.bodyAsText ? JSON.parse(rawResponse.bodyAsText) : {});\n  return status?.toLowerCase() ?? \"succeeded\";\n}\n\nfunction isAzureAsyncPollingDone(rawResponse: FullOperationResponse) {\n  const state = getResponseStatus(rawResponse);\n  if (failureStates.includes(state)) {\n    throw new Error(`Operation status: ${state}`);\n  }\n  return successStates.includes(state);\n}\n\nexport function processAzureAsyncOperationResult<TResult>(\n  restrieveResource: (path?: string) => Promise<LROResult<TResult>>,\n  resourceLocation?: string,\n  finalStateVia?: FinalStateVia\n): (\n  rawResponse: FullOperationResponse,\n  flatResponse: TResult\n) => LROState<TResult> {\n  return (\n    rawResponse: FullOperationResponse,\n    flatResponse: TResult\n  ): LROState<TResult> => {\n    if (isAzureAsyncPollingDone(rawResponse)) {\n      if (resourceLocation === undefined) {\n        return { rawResponse, flatResponse, done: true };\n      } else {\n        return {\n          rawResponse,\n          flatResponse,\n          done: false,\n          next: async () => {\n            async function sendFinalRequest(): Promise<\n              LROResult<TResult> | undefined\n            > {\n              switch (finalStateVia) {\n                case \"original-uri\":\n                  return restrieveResource();\n                case \"azure-async-operation\":\n                  return Promise.resolve(undefined);\n                case \"location\":\n                default:\n                  return restrieveResource(resourceLocation);\n              }\n            }\n            const finalResponse = await sendFinalRequest();\n            return {\n              ...(finalResponse ?? {\n                rawResponse,\n                flatResponse\n              }),\n              done: true\n            };\n          }\n        };\n      }\n    }\n    return {\n      rawResponse,\n      flatResponse,\n      done: false\n    };\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { FullOperationResponse } from \"@azure/core-client\";\nimport { failureStates, LROState, successStates } from \"./stateMachine\";\n\nfunction getProvisioningState(rawResponse: FullOperationResponse): string {\n  const { properties, provisioningState } =\n    rawResponse.parsedBody ??\n    (rawResponse.bodyAsText ? JSON.parse(rawResponse.bodyAsText) : {});\n  const state: string | undefined =\n    properties?.provisioningState ?? provisioningState;\n  return state?.toLowerCase() ?? \"succeeded\";\n}\n\nexport function isBodyPollingDone(rawResponse: FullOperationResponse) {\n  const state = getProvisioningState(rawResponse);\n  if (failureStates.includes(state)) {\n    throw new Error(`Provisioning state: ${state}`);\n  }\n  return successStates.includes(state);\n}\n\n/**\n * Creates a polling strategy based on BodyPolling which uses the provisioning state\n * from the result to determine the current operation state\n */\nexport function processBodyPollingOperationResult<TResult>(\n  rawResponse: FullOperationResponse,\n  flatResponse: TResult\n): LROState<TResult> {\n  return {\n    rawResponse,\n    flatResponse,\n    done: isBodyPollingDone(rawResponse)\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { FullOperationResponse } from \"@azure/core-client\";\nimport { LROState } from \"./stateMachine\";\n\nfunction isLocationPollingDone(rawResponse: FullOperationResponse) {\n  const code = rawResponse.status;\n  if (![202, 200].includes(code)) {\n    throw new Error(`Operation failed`);\n  }\n  return code !== 202;\n}\n\nexport function processLocationPollingOperationResult<TResult>(\n  rawResponse: FullOperationResponse,\n  flatResponse: TResult\n): LROState<TResult> {\n  return {\n    rawResponse,\n    flatResponse,\n    done: isLocationPollingDone(rawResponse)\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { FullOperationResponse } from \"@azure/core-client\";\nimport { LROState } from \"./stateMachine\";\n\nexport function processPassthroughOperationResult<TResult>(\n  rawResponse: FullOperationResponse,\n  flatResponse: TResult\n): LROState<TResult> {\n  return {\n    rawResponse,\n    flatResponse,\n    done: true\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  OperationArguments,\n  OperationSpec,\n  OperationResponseMap\n} from \"@azure/core-client\";\nimport { LROMode, LROResult, SendOperationFn } from \"./models\";\n\nexport function createPollingMethod<TResult>(\n  sendOperationFn: SendOperationFn<TResult>,\n  args: OperationArguments,\n  spec: OperationSpec,\n  mode?: LROMode\n): (path?: string) => Promise<LROResult<TResult>> {\n  /**\n   * Polling calls will always return a status object i.e. {\"status\": \"success\"}\n   * these intermediate responses are not described in the swagger so we need to\n   * pass custom mappers at runtime.\n   * This function replaces all the existing mappers to be able to deserialize a status object\n   * @param responses Original set of responses defined in the operation\n   */\n  function getCompositeMappers(responses: {\n    [responseCode: string]: OperationResponseMap;\n  }): {\n    [responseCode: string]: OperationResponseMap;\n  } {\n    return Object.keys(responses).reduce((acc, statusCode) => {\n      return {\n        ...acc,\n        [statusCode]: {\n          ...responses[statusCode],\n          bodyMapper: {\n            type: {\n              name: \"Composite\",\n              modelProperties: {\n                status: {\n                  serializedName: \"status\",\n                  type: {\n                    name: \"String\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n    }, {} as { [responseCode: string]: OperationResponseMap });\n  }\n  // Make sure we don't send any body to the get request\n  const { requestBody, responses, ...restSpec } = spec;\n  if (mode === \"AzureAsync\") {\n    return async (path?: string) => {\n      return sendOperationFn(args, {\n        ...restSpec,\n        responses: getCompositeMappers(responses),\n        httpMethod: \"GET\",\n        ...(path && { path })\n      });\n    };\n  }\n  return async (path?: string) => {\n    return sendOperationFn(args, {\n      ...restSpec,\n      responses: responses,\n      httpMethod: \"GET\",\n      ...(path && { path })\n    });\n  };\n}\n\nexport function createRetrieveAzureAsyncResource<TResult>(\n  sendOperationFn: SendOperationFn<TResult>,\n  args: OperationArguments,\n  spec: OperationSpec\n): (path?: string) => Promise<LROResult<TResult>> {\n  const updatedArgs = { ...args };\n  if (updatedArgs.options) {\n    (updatedArgs.options as any).shouldDeserialize = true;\n  }\n  return createPollingMethod(sendOperationFn, updatedArgs, spec);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  FullOperationResponse,\n  OperationArguments,\n  OperationSpec,\n  RawResponseCallback\n} from \"@azure/core-client\";\nimport { processAzureAsyncOperationResult } from \"./azureAsyncPolling\";\nimport {\n  isBodyPollingDone,\n  processBodyPollingOperationResult\n} from \"./bodyPolling\";\nimport { processLocationPollingOperationResult } from \"./locationPolling\";\nimport {\n  FinalStateVia,\n  LROConfig,\n  LROResult,\n  PollerConfig,\n  ResumablePollOperationState,\n  SendOperationFn\n} from \"./models\";\nimport { processPassthroughOperationResult } from \"./passthrough\";\nimport {\n  createPollingMethod,\n  createRetrieveAzureAsyncResource\n} from \"./pollingMethod\";\nimport { getPollingURL, getSpecPath, inferLROMode } from \"./requestUtils\";\n\nexport const successStates = [\"succeeded\"];\nexport const failureStates = [\"failed\", \"canceled\", \"cancelled\"];\nexport const terminalStates = successStates.concat(failureStates);\n\n/**\n * The type of a terminal state of an LRO.\n */\ninterface LROTerminalState<T> extends LROResult<T> {\n  /**\n   * Whether the operation has finished.\n   */\n  done: true;\n}\n\n/**\n * The type of an in-progress state of an LRO.\n */\ninterface LROInProgressState<T> extends LROResult<T> {\n  /**\n   * Whether the operation has finished.\n   */\n  done: false;\n  /**\n   * The request to be sent next if it is different from the standard polling one.\n   * Notice that it will disregard any polling URLs provided to it.\n   */\n  next?: () => Promise<LROState<T>>;\n}\n\n/**\n * The type of an LRO state which is a tagged union of terminal and in-progress states.\n */\nexport type LROState<T> = LROTerminalState<T> | LROInProgressState<T>;\n\n/**\n * creates a stepping function that maps an LRO state to another.\n */\nfunction createTransition<TResult>(\n  sendOperationFn: SendOperationFn<TResult>,\n  args: OperationArguments,\n  spec: OperationSpec,\n  config: LROConfig,\n  finalStateVia?: FinalStateVia\n): (\n  rawResponse: FullOperationResponse,\n  flatResponse: TResult\n) => LROState<TResult> {\n  switch (config.mode) {\n    case \"AzureAsync\": {\n      return processAzureAsyncOperationResult(\n        createRetrieveAzureAsyncResource(sendOperationFn, args, spec),\n        config.resourceLocation,\n        finalStateVia\n      );\n    }\n    case \"Location\": {\n      return processLocationPollingOperationResult;\n    }\n    case \"Body\": {\n      return processBodyPollingOperationResult;\n    }\n    default: {\n      return processPassthroughOperationResult;\n    }\n  }\n}\n\n/**\n * Creates a polling operation that returns a LRO state.\n */\nexport function createGetLROState<TResult>(\n  sendOperationFn: SendOperationFn<TResult>,\n  args: OperationArguments,\n  spec: OperationSpec,\n  config: LROConfig,\n  finalStateVia?: FinalStateVia\n): (\n  pollingURL: string,\n  pollerConfig: PollerConfig\n) => Promise<LROState<TResult>> {\n  const step = createTransition(\n    sendOperationFn,\n    args,\n    spec,\n    config,\n    finalStateVia\n  );\n  const customerCallback = args?.options?.onResponse;\n  let response: LROState<TResult> | undefined = undefined;\n  let retryAfter: string | undefined = undefined;\n  const poll = createPollingMethod(\n    sendOperationFn,\n    {\n      ...args,\n      options: {\n        ...args.options,\n        onResponse: (\n          rawResponse: FullOperationResponse,\n          flatResponse: unknown\n        ): void => {\n          response = step(rawResponse, flatResponse as TResult);\n          retryAfter = rawResponse.headers.get(\"Retry-After\");\n          if (response.done) {\n            customerCallback?.(rawResponse, flatResponse);\n          }\n        }\n      }\n    },\n    spec,\n    config.mode\n  );\n  return async (\n    path: string,\n    pollerConfig: PollerConfig\n  ): Promise<LROState<TResult>> => {\n    await poll(path);\n    if (retryAfter !== undefined) {\n      const retryAfterInMs = parseInt(retryAfter);\n      pollerConfig.intervalInMs = isNaN(retryAfterInMs)\n        ? calculatePollingIntervalFromDate(\n            new Date(retryAfter),\n            pollerConfig.intervalInMs\n          )\n        : retryAfterInMs;\n    }\n    return response!;\n  };\n}\n\nfunction calculatePollingIntervalFromDate(\n  retryAfterDate: Date,\n  defaultIntervalInMs: number\n): number {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n  return defaultIntervalInMs;\n}\n\n/**\n * Creates a callback to be used to initialize the polling operation state.\n * @param state of the polling operation\n * @param operationSpec of the LRO\n * @param callback callback to be called when the operation is done\n * @returns callback that initializes the state of the polling operation\n */\nexport function initializeState<TResult>(\n  state: ResumablePollOperationState<TResult>,\n  operationSpec: OperationSpec,\n  callback?: RawResponseCallback\n): (rawResponse: FullOperationResponse, flatResponse: unknown) => void {\n  return (rawResponse: FullOperationResponse, flatResponse: unknown) => {\n    state.initialRawResponse = rawResponse;\n    state.isStarted = true;\n    state.pollingURL = getPollingURL(\n      state.initialRawResponse,\n      getSpecPath(operationSpec)\n    );\n    state.config = inferLROMode(operationSpec, state.initialRawResponse);\n    /** short circuit polling if body polling is done in the initial request */\n    if (\n      state.config.mode === undefined ||\n      (state.config.mode === \"Body\" &&\n        isBodyPollingDone(state.initialRawResponse))\n    ) {\n      state.result = flatResponse as TResult;\n      state.isCompleted = true;\n      /**\n       * We need to check if the LRO operation is finished inside the\n       * call back so that we can call the customer-provided callback\n       * on that result.\n       */\n      callback?.(rawResponse, flatResponse);\n    }\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { FullOperationResponse, OperationSpec } from \"@azure/core-client\";\nimport { LROConfig } from \"./models\";\nimport { terminalStates } from \"./stateMachine\";\n\n/**\n * We need to selectively deserialize our responses, only deserializing if we\n * are in a final LRO response, not deserializing any polling non-terminal responses\n */\nexport function shouldDeserializeLRO(finalStateVia?: string) {\n  let initialOperationInfo: LROResponseInfo | undefined;\n  let isInitialRequest = true;\n\n  return (response: FullOperationResponse) => {\n    if (response.status < 200 || response.status >= 300) {\n      return true;\n    }\n\n    if (!initialOperationInfo) {\n      initialOperationInfo = getLROData(response);\n    } else {\n      isInitialRequest = false;\n    }\n\n    if (\n      initialOperationInfo.azureAsyncOperation ||\n      initialOperationInfo.operationLocation\n    ) {\n      return (\n        !isInitialRequest &&\n        isAsyncOperationFinalResponse(\n          response,\n          initialOperationInfo,\n          finalStateVia\n        )\n      );\n    }\n\n    if (initialOperationInfo.location) {\n      return isLocationFinalResponse(response);\n    }\n\n    if (initialOperationInfo.requestMethod === \"PUT\") {\n      return isBodyPollingFinalResponse(response);\n    }\n\n    return true;\n  };\n}\n\nfunction isAsyncOperationFinalResponse(\n  response: FullOperationResponse,\n  initialOperationInfo: LROResponseInfo,\n  finalStateVia?: string\n): boolean {\n  const status: string = response.parsedBody?.status || \"Succeeded\";\n  if (!terminalStates.includes(status.toLowerCase())) {\n    return false;\n  }\n\n  if (initialOperationInfo.requestMethod === \"DELETE\") {\n    return true;\n  }\n\n  if (\n    initialOperationInfo.requestMethod === \"PUT\" &&\n    finalStateVia &&\n    finalStateVia.toLowerCase() === \"azure-asyncoperation\"\n  ) {\n    return true;\n  }\n\n  if (\n    initialOperationInfo.requestMethod !== \"PUT\" &&\n    !initialOperationInfo.location\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isLocationFinalResponse(response: FullOperationResponse): boolean {\n  return response.status !== 202;\n}\n\nfunction isBodyPollingFinalResponse(response: FullOperationResponse): boolean {\n  const provisioningState: string =\n    response.parsedBody?.properties?.provisioningState || \"Succeeded\";\n\n  if (terminalStates.includes(provisioningState.toLowerCase())) {\n    return true;\n  }\n\n  return false;\n}\n\ninterface LROResponseInfo {\n  requestMethod: string;\n  azureAsyncOperation?: string;\n  operationLocation?: string;\n  location?: string;\n}\n\nfunction getLROData(result: FullOperationResponse): LROResponseInfo {\n  return {\n    azureAsyncOperation: result.headers.get(\"azure-asyncoperation\"),\n    operationLocation: result.headers.get(\"operation-location\"),\n    location: result.headers.get(\"location\"),\n    requestMethod: result.request.method\n  };\n}\n\n/**\n * Detects where the continuation token is and returns it. Notice that azure-asyncoperation\n * must be checked first before the other location headers because there are scenarios\n * where both azure-asyncoperation and location could be present in the same response but\n * azure-asyncoperation should be the one to use for polling.\n */\nexport function getPollingURL(\n  rawResponse: FullOperationResponse,\n  defaultPath: string\n): string {\n  return (\n    getAzureAsyncoperation(rawResponse) ??\n    getLocation(rawResponse) ??\n    getOperationLocation(rawResponse) ??\n    defaultPath\n  );\n}\n\nfunction getLocation(rawResponse: FullOperationResponse): string | undefined {\n  return rawResponse.headers?.get(\"location\");\n}\n\nfunction getOperationLocation(\n  rawResponse: FullOperationResponse\n): string | undefined {\n  return rawResponse.headers?.get(\"operation-location\");\n}\n\nfunction getAzureAsyncoperation(\n  rawResponse: FullOperationResponse\n): string | undefined {\n  return rawResponse.headers?.get(\"azure-asyncoperation\");\n}\n\nexport function inferLROMode(\n  spec: OperationSpec,\n  rawResponse: FullOperationResponse\n): LROConfig {\n  const requestMethod = spec.httpMethod;\n  if (getAzureAsyncoperation(rawResponse) !== undefined) {\n    return {\n      mode: \"AzureAsync\",\n      resourceLocation:\n        requestMethod === \"PUT\"\n          ? spec.path\n          : requestMethod === \"POST\"\n          ? getLocation(rawResponse)\n          : undefined\n    };\n  } else if (\n    getLocation(rawResponse) !== undefined ||\n    getOperationLocation(rawResponse) !== undefined\n  ) {\n    return {\n      mode: \"Location\"\n    };\n  } else if ([\"PUT\", \"PATCH\"].includes(requestMethod)) {\n    return {\n      mode: \"Body\"\n    };\n  }\n  return {};\n}\n\nexport function getSpecPath(spec: OperationSpec): string {\n  if (spec.path) {\n    return spec.path;\n  } else {\n    throw Error(\"Bad spec: request path is not found!\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationArguments, OperationSpec } from \"@azure/core-client\";\nimport { PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport {\n  FinalStateVia,\n  PollerConfig,\n  ResumablePollOperationState,\n  SendOperationFn\n} from \"./models\";\nimport { getPollingURL } from \"./requestUtils\";\nimport { createGetLROState, initializeState, LROState } from \"./stateMachine\";\n\nexport class GenericPollOperation<TResult>\n  implements PollOperation<PollOperationState<TResult>, TResult> {\n  private getLROState?: (\n    pollingURL: string,\n    pollerConfig: PollerConfig\n  ) => Promise<LROState<TResult>>;\n  private pollerConfig?: PollerConfig;\n  constructor(\n    public state: PollOperationState<TResult>,\n    private initialOperationArguments: OperationArguments,\n    private initialOperationSpec: OperationSpec,\n    private sendOperation: SendOperationFn<TResult>,\n    private finalStateVia?: FinalStateVia\n  ) {}\n\n  public setPollerConfig(pollerConfig: PollerConfig) {\n    this.pollerConfig = pollerConfig;\n  }\n\n  /**\n   * General update function for LROPoller, the general process is as follows\n   * 1. Check initial operation result to determine the strategy to use\n   *  - Strategies: Location, Azure-AsyncOperation, Original Uri\n   * 2. Check if the operation result has a terminal state\n   *  - Terminal state will be determined by each strategy\n   *  2.1 If it is terminal state Check if a final GET request is required, if so\n   *      send final GET request and return result from operation. If no final GET\n   *      is required, just return the result from operation.\n   *      - Determining what to call for final request is responsibility of each strategy\n   *  2.2 If it is not terminal state, call the polling operation and go to step 1\n   *      - Determining what to call for polling is responsibility of each strategy\n   *      - Strategies will always use the latest URI for polling if provided otherwise\n   *        the last known one\n   */\n  async update(options?: {\n    abortSignal?: AbortSignalLike | undefined;\n    fireProgress?: ((state: PollOperationState<TResult>) => void) | undefined;\n  }): Promise<PollOperation<PollOperationState<TResult>, TResult>> {\n    const state = this.state as ResumablePollOperationState<TResult>;\n    const { onResponse, ...restOptions } =\n      this.initialOperationArguments.options || {};\n    if (!state.isStarted) {\n      await this.sendOperation(\n        {\n          ...this.initialOperationArguments,\n          options: {\n            ...restOptions,\n            onResponse: initializeState(\n              state,\n              this.initialOperationSpec,\n              onResponse\n            )\n          }\n        },\n        this.initialOperationSpec\n      );\n    }\n\n    if (!state.isCompleted) {\n      if (this.getLROState === undefined) {\n        if (state.config === undefined) {\n          throw new Error(\"Bad state: LRO mode is undefined\");\n        }\n        this.getLROState = createGetLROState(\n          this.sendOperation,\n          this.initialOperationArguments,\n          this.initialOperationSpec,\n          state.config,\n          this.finalStateVia\n        );\n      }\n      if (state.pollingURL === undefined) {\n        throw new Error(\"Bad state: polling URL is undefined\");\n      }\n      const currentState = await this.getLROState(\n        state.pollingURL,\n        this.pollerConfig!\n      );\n      if (currentState.done) {\n        state.result = currentState.flatResponse;\n        state.isCompleted = true;\n      } else {\n        this.getLROState = currentState.next ?? this.getLROState;\n        state.pollingURL = getPollingURL(\n          currentState.rawResponse,\n          state.pollingURL\n        );\n      }\n    }\n    if (options?.fireProgress !== undefined) {\n      options.fireProgress(state);\n    }\n    return this;\n  }\n\n  async cancel(): Promise<PollOperation<PollOperationState<TResult>, TResult>> {\n    this.state.isCancelled = true;\n    return this;\n  }\n\n  /**\n   * Serializes the Poller operation.\n   */\n  public toString(): string {\n    return JSON.stringify({\n      state: this.state\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Poller, PollOperationState } from \"@azure/core-lro\";\nimport { OperationArguments, OperationSpec } from \"@azure/core-client\";\nimport { FinalStateVia, SendOperationFn } from \"./models\";\nimport { GenericPollOperation } from \"./operation\";\n\nexport interface LROPollerOptions {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  intervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  resumeFrom?: string;\n}\n\nexport class LROPoller<TResult> extends Poller<\n  PollOperationState<TResult>,\n  TResult\n> {\n  private intervalInMs: number;\n\n  constructor(\n    { intervalInMs = 2000, resumeFrom }: LROPollerOptions,\n    initialOperationArguments: OperationArguments,\n    initialOperationSpec: OperationSpec,\n    sendOperation: SendOperationFn<TResult>,\n    finalStateVia?: FinalStateVia\n  ) {\n    const state: PollOperationState<TResult> = resumeFrom\n      ? JSON.parse(resumeFrom).state\n      : {};\n\n    const operation = new GenericPollOperation(\n      state,\n      initialOperationArguments,\n      initialOperationSpec,\n      sendOperation,\n      finalStateVia\n    );\n    super(operation);\n\n    this.intervalInMs = intervalInMs;\n    operation.setPollerConfig(this as any);\n  }\n\n  /**\n   * The method used by the poller to wait before attempting to update its operation.\n   */\n  delay(): Promise<void> {\n    return new Promise((resolve) =>\n      setTimeout(() => resolve(), this.intervalInMs)\n    );\n  }\n}\n","import \"@azure/core-paging\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { IoTSpaces } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { IoTSpacesClientContext } from \"../ioTSpacesClientContext\";\nimport { LROPoller, shouldDeserializeLRO } from \"../lro\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport {\n  IoTSpacesDescription,\n  IoTSpacesListNextOptionalParams,\n  IoTSpacesListOptionalParams,\n  IoTSpacesListByResourceGroupNextOptionalParams,\n  IoTSpacesListByResourceGroupOptionalParams,\n  IoTSpacesGetOptionalParams,\n  IoTSpacesGetResponse,\n  IoTSpacesCreateOrUpdateOptionalParams,\n  IoTSpacesCreateOrUpdateResponse,\n  IoTSpacesPatchDescription,\n  IoTSpacesUpdateOptionalParams,\n  IoTSpacesUpdateResponse,\n  IoTSpacesDeleteOptionalParams,\n  IoTSpacesDeleteResponse,\n  IoTSpacesListResponse,\n  IoTSpacesListByResourceGroupResponse,\n  OperationInputs,\n  IoTSpacesCheckNameAvailabilityOptionalParams,\n  IoTSpacesCheckNameAvailabilityResponse,\n  IoTSpacesListNextResponse,\n  IoTSpacesListByResourceGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class representing a IoTSpaces. */\nexport class IoTSpacesImpl implements IoTSpaces {\n  private readonly client: IoTSpacesClientContext;\n\n  /**\n   * Initialize a new instance of the class IoTSpaces class.\n   * @param client Reference to the service client\n   */\n  constructor(client: IoTSpacesClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Get all the IoTSpaces instances in a subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: IoTSpacesListOptionalParams\n  ): PagedAsyncIterableIterator<IoTSpacesDescription> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listPagingPage(options);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: IoTSpacesListOptionalParams\n  ): AsyncIterableIterator<IoTSpacesDescription[]> {\n    let result = await this._list(options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *listPagingAll(\n    options?: IoTSpacesListOptionalParams\n  ): AsyncIterableIterator<IoTSpacesDescription> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get all the IoTSpaces instances in a resource group.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: IoTSpacesListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<IoTSpacesDescription> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listByResourceGroupPagingPage(resourceGroupName, options);\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: IoTSpacesListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<IoTSpacesDescription[]> {\n    let result = await this._listByResourceGroup(resourceGroupName, options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: IoTSpacesListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<IoTSpacesDescription> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get the metadata of a IoTSpaces instance.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param resourceName The name of the IoTSpaces instance.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: IoTSpacesGetOptionalParams\n  ): Promise<IoTSpacesGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, resourceName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property is to\n   * retrieve the IoTSpaces instance metadata and security metadata, and then combine them with the\n   * modified values in a new body to update the IoTSpaces instance.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param resourceName The name of the IoTSpaces instance.\n   * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    resourceName: string,\n    iotSpaceDescription: IoTSpacesDescription,\n    options?: IoTSpacesCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<IoTSpacesCreateOrUpdateResponse>,\n      IoTSpacesCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<IoTSpacesCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return { flatResponse, rawResponse: currentRawResponse! };\n    };\n\n    return new LROPoller(\n      { intervalInMs: options?.updateIntervalInMs },\n      { resourceGroupName, resourceName, iotSpaceDescription, options },\n      createOrUpdateOperationSpec,\n      sendOperation\n    );\n  }\n\n  /**\n   * Create or update the metadata of an IoTSpaces instance. The usual pattern to modify a property is to\n   * retrieve the IoTSpaces instance metadata and security metadata, and then combine them with the\n   * modified values in a new body to update the IoTSpaces instance.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param resourceName The name of the IoTSpaces instance.\n   * @param iotSpaceDescription The IoTSpaces instance metadata and security metadata.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    iotSpaceDescription: IoTSpacesDescription,\n    options?: IoTSpacesCreateOrUpdateOptionalParams\n  ): Promise<IoTSpacesCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      resourceName,\n      iotSpaceDescription,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Update the metadata of a IoTSpaces instance.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param resourceName The name of the IoTSpaces instance.\n   * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    resourceName: string,\n    iotSpacePatchDescription: IoTSpacesPatchDescription,\n    options?: IoTSpacesUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<IoTSpacesUpdateResponse>,\n      IoTSpacesUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<IoTSpacesUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return { flatResponse, rawResponse: currentRawResponse! };\n    };\n\n    return new LROPoller(\n      { intervalInMs: options?.updateIntervalInMs },\n      { resourceGroupName, resourceName, iotSpacePatchDescription, options },\n      updateOperationSpec,\n      sendOperation\n    );\n  }\n\n  /**\n   * Update the metadata of a IoTSpaces instance.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param resourceName The name of the IoTSpaces instance.\n   * @param iotSpacePatchDescription The IoTSpaces instance metadata and security metadata.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    iotSpacePatchDescription: IoTSpacesPatchDescription,\n    options?: IoTSpacesUpdateOptionalParams\n  ): Promise<IoTSpacesUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      resourceName,\n      iotSpacePatchDescription,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete an IoTSpaces instance.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param resourceName The name of the IoTSpaces instance.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: IoTSpacesDeleteOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<IoTSpacesDeleteResponse>,\n      IoTSpacesDeleteResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<IoTSpacesDeleteResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return { flatResponse, rawResponse: currentRawResponse! };\n    };\n\n    return new LROPoller(\n      { intervalInMs: options?.updateIntervalInMs },\n      { resourceGroupName, resourceName, options },\n      deleteOperationSpec,\n      sendOperation\n    );\n  }\n\n  /**\n   * Delete an IoTSpaces instance.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param resourceName The name of the IoTSpaces instance.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    resourceName: string,\n    options?: IoTSpacesDeleteOptionalParams\n  ): Promise<IoTSpacesDeleteResponse> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      resourceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get all the IoTSpaces instances in a subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: IoTSpacesListOptionalParams\n  ): Promise<IoTSpacesListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Get all the IoTSpaces instances in a resource group.\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: IoTSpacesListByResourceGroupOptionalParams\n  ): Promise<IoTSpacesListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * Check if an IoTSpaces instance name is available.\n   * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the\n   *                        IoTSpaces instance to check.\n   * @param options The options parameters.\n   */\n  checkNameAvailability(\n    operationInputs: OperationInputs,\n    options?: IoTSpacesCheckNameAvailabilityOptionalParams\n  ): Promise<IoTSpacesCheckNameAvailabilityResponse> {\n    return this.client.sendOperationRequest(\n      { operationInputs, options },\n      checkNameAvailabilityOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: IoTSpacesListNextOptionalParams\n  ): Promise<IoTSpacesListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group that contains the IoTSpaces instance.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: IoTSpacesListByResourceGroupNextOptionalParams\n  ): Promise<IoTSpacesListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    201: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    202: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    204: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  requestBody: Parameters.iotSpaceDescription,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    201: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    202: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    204: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  requestBody: Parameters.iotSpacePatchDescription,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph/{resourceName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    201: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    202: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    204: {\n      bodyMapper: Mappers.IoTSpacesDescription\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/Graph\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescriptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTSpaces/Graph\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescriptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.IoTSpaces/checkNameAvailability\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesNameAvailabilityInfo\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  requestBody: Parameters.operationInputs,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescriptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IoTSpacesDescriptionListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","import \"@azure/core-paging\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { Operations } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { IoTSpacesClientContext } from \"../ioTSpacesClientContext\";\nimport {\n  Operation,\n  OperationsListNextOptionalParams,\n  OperationsListOptionalParams,\n  OperationsListResponse,\n  OperationsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class representing a Operations. */\nexport class OperationsImpl implements Operations {\n  private readonly client: IoTSpacesClientContext;\n\n  /**\n   * Initialize a new instance of the class Operations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: IoTSpacesClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all of the available IoTSpaces service REST API operations.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: OperationsListOptionalParams\n  ): PagedAsyncIterableIterator<Operation> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listPagingPage(options);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: OperationsListOptionalParams\n  ): AsyncIterableIterator<Operation[]> {\n    let result = await this._list(options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *listPagingAll(\n    options?: OperationsListOptionalParams\n  ): AsyncIterableIterator<Operation> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all of the available IoTSpaces service REST API operations.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: OperationsListOptionalParams\n  ): Promise<OperationsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: OperationsListNextOptionalParams\n  ): Promise<OperationsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.IoTSpaces/operations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorDetails\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","import * as coreClient from \"@azure/core-client\";\nimport * as coreAuth from \"@azure/core-auth\";\nimport { IoTSpacesClientOptionalParams } from \"./models\";\n\nexport class IoTSpacesClientContext extends coreClient.ServiceClient {\n  $host: string;\n  apiVersion: string;\n  subscriptionId: string;\n\n  /**\n   * Initializes a new instance of the IoTSpacesClientContext class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param subscriptionId The subscription identifier.\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionId: string,\n    options?: IoTSpacesClientOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    if (subscriptionId === undefined) {\n      throw new Error(\"'subscriptionId' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: IoTSpacesClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n      credential: credentials\n    };\n\n    const packageDetails = `azsdk-js-arm-iotspaces/1.0.0-beta.1`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    if (!options.credentialScopes) {\n      options.credentialScopes = [\"https://management.azure.com/.default\"];\n    }\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      baseUri: options.endpoint || \"https://management.azure.com\"\n    };\n    super(optionsWithDefaults);\n    // Parameter assignments\n    this.subscriptionId = subscriptionId;\n\n    // Assigning values to Constant parameters\n    this.$host = options.$host || \"https://management.azure.com\";\n    this.apiVersion = options.apiVersion || \"2017-10-01-preview\";\n  }\n}\n","import * as coreAuth from \"@azure/core-auth\";\nimport { IoTSpacesImpl, OperationsImpl } from \"./operations\";\nimport { IoTSpaces, Operations } from \"./operationsInterfaces\";\nimport { IoTSpacesClientContext } from \"./ioTSpacesClientContext\";\nimport { IoTSpacesClientOptionalParams } from \"./models\";\n\nexport class IoTSpacesClient extends IoTSpacesClientContext {\n  /**\n   * Initializes a new instance of the IoTSpacesClient class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param subscriptionId The subscription identifier.\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionId: string,\n    options?: IoTSpacesClientOptionalParams\n  ) {\n    super(credentials, subscriptionId, options);\n    this.ioTSpaces = new IoTSpacesImpl(this);\n    this.operations = new OperationsImpl(this);\n  }\n\n  ioTSpaces: IoTSpaces;\n  operations: Operations;\n}\n"],"names":["KnownProvisioningState","KnownIoTSpacesSku","IoTSpacesDescriptionMapper","IoTSpacesPatchDescriptionMapper","OperationInputsMapper","Poller","__asyncValues","__asyncDelegator","coreClient.createSerializer","Mappers.IoTSpacesDescription","Mappers.ErrorDetails","Parameters.apiVersion","Parameters.$host","Parameters.subscriptionId","Parameters.resourceGroupName","Parameters.resourceName","Parameters.accept","Parameters.iotSpaceDescription","Parameters.contentType","Parameters.iotSpacePatchDescription","Mappers.IoTSpacesDescriptionListResult","Mappers.IoTSpacesNameAvailabilityInfo","Parameters.operationInputs","Parameters.nextLink","listOperationSpec","listNextOperationSpec","serializer","Mappers.OperationListResult","coreClient.ServiceClient"],"mappings":"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"}