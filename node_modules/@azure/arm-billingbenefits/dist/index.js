'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** PendingBilling */
    KnownProvisioningState["PendingBilling"] = "PendingBilling";
    /** ConfirmedBilling */
    KnownProvisioningState["ConfirmedBilling"] = "ConfirmedBilling";
    /** Created */
    KnownProvisioningState["Created"] = "Created";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Cancelled */
    KnownProvisioningState["Cancelled"] = "Cancelled";
    /** Expired */
    KnownProvisioningState["Expired"] = "Expired";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link Term} that the service accepts. */
exports.KnownTerm = void 0;
(function (KnownTerm) {
    /** P1Y */
    KnownTerm["P1Y"] = "P1Y";
    /** P3Y */
    KnownTerm["P3Y"] = "P3Y";
    /** P5Y */
    KnownTerm["P5Y"] = "P5Y";
})(exports.KnownTerm || (exports.KnownTerm = {}));
/** Known values of {@link BillingPlan} that the service accepts. */
exports.KnownBillingPlan = void 0;
(function (KnownBillingPlan) {
    /** P1M */
    KnownBillingPlan["P1M"] = "P1M";
})(exports.KnownBillingPlan || (exports.KnownBillingPlan = {}));
/** Known values of {@link AppliedScopeType} that the service accepts. */
exports.KnownAppliedScopeType = void 0;
(function (KnownAppliedScopeType) {
    /** Single */
    KnownAppliedScopeType["Single"] = "Single";
    /** Shared */
    KnownAppliedScopeType["Shared"] = "Shared";
    /** ManagementGroup */
    KnownAppliedScopeType["ManagementGroup"] = "ManagementGroup";
})(exports.KnownAppliedScopeType || (exports.KnownAppliedScopeType = {}));
/** Known values of {@link CommitmentGrain} that the service accepts. */
exports.KnownCommitmentGrain = void 0;
(function (KnownCommitmentGrain) {
    /** Hourly */
    KnownCommitmentGrain["Hourly"] = "Hourly";
})(exports.KnownCommitmentGrain || (exports.KnownCommitmentGrain = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link PaymentStatus} that the service accepts. */
exports.KnownPaymentStatus = void 0;
(function (KnownPaymentStatus) {
    /** Succeeded */
    KnownPaymentStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownPaymentStatus["Failed"] = "Failed";
    /** Scheduled */
    KnownPaymentStatus["Scheduled"] = "Scheduled";
    /** Cancelled */
    KnownPaymentStatus["Cancelled"] = "Cancelled";
})(exports.KnownPaymentStatus || (exports.KnownPaymentStatus = {}));
/** Known values of {@link ReservedResourceType} that the service accepts. */
exports.KnownReservedResourceType = void 0;
(function (KnownReservedResourceType) {
    /** VirtualMachines */
    KnownReservedResourceType["VirtualMachines"] = "VirtualMachines";
    /** SqlDatabases */
    KnownReservedResourceType["SqlDatabases"] = "SqlDatabases";
    /** SuseLinux */
    KnownReservedResourceType["SuseLinux"] = "SuseLinux";
    /** CosmosDb */
    KnownReservedResourceType["CosmosDb"] = "CosmosDb";
    /** RedHat */
    KnownReservedResourceType["RedHat"] = "RedHat";
    /** SqlDataWarehouse */
    KnownReservedResourceType["SqlDataWarehouse"] = "SqlDataWarehouse";
    /** VMwareCloudSimple */
    KnownReservedResourceType["VMwareCloudSimple"] = "VMwareCloudSimple";
    /** RedHatOsa */
    KnownReservedResourceType["RedHatOsa"] = "RedHatOsa";
    /** Databricks */
    KnownReservedResourceType["Databricks"] = "Databricks";
    /** AppService */
    KnownReservedResourceType["AppService"] = "AppService";
    /** ManagedDisk */
    KnownReservedResourceType["ManagedDisk"] = "ManagedDisk";
    /** BlockBlob */
    KnownReservedResourceType["BlockBlob"] = "BlockBlob";
    /** RedisCache */
    KnownReservedResourceType["RedisCache"] = "RedisCache";
    /** AzureDataExplorer */
    KnownReservedResourceType["AzureDataExplorer"] = "AzureDataExplorer";
    /** MySql */
    KnownReservedResourceType["MySql"] = "MySql";
    /** MariaDb */
    KnownReservedResourceType["MariaDb"] = "MariaDb";
    /** PostgreSql */
    KnownReservedResourceType["PostgreSql"] = "PostgreSql";
    /** DedicatedHost */
    KnownReservedResourceType["DedicatedHost"] = "DedicatedHost";
    /** SapHana */
    KnownReservedResourceType["SapHana"] = "SapHana";
    /** SqlAzureHybridBenefit */
    KnownReservedResourceType["SqlAzureHybridBenefit"] = "SqlAzureHybridBenefit";
    /** AVS */
    KnownReservedResourceType["AVS"] = "AVS";
    /** DataFactory */
    KnownReservedResourceType["DataFactory"] = "DataFactory";
    /** NetAppStorage */
    KnownReservedResourceType["NetAppStorage"] = "NetAppStorage";
    /** AzureFiles */
    KnownReservedResourceType["AzureFiles"] = "AzureFiles";
    /** SqlEdge */
    KnownReservedResourceType["SqlEdge"] = "SqlEdge";
    /** VirtualMachineSoftware */
    KnownReservedResourceType["VirtualMachineSoftware"] = "VirtualMachineSoftware";
})(exports.KnownReservedResourceType || (exports.KnownReservedResourceType = {}));
/** Known values of {@link InstanceFlexibility} that the service accepts. */
exports.KnownInstanceFlexibility = void 0;
(function (KnownInstanceFlexibility) {
    /** On */
    KnownInstanceFlexibility["On"] = "On";
    /** Off */
    KnownInstanceFlexibility["Off"] = "Off";
})(exports.KnownInstanceFlexibility || (exports.KnownInstanceFlexibility = {}));
/** Known values of {@link PricingCurrencyDuration} that the service accepts. */
exports.KnownPricingCurrencyDuration = void 0;
(function (KnownPricingCurrencyDuration) {
    /** P1M */
    KnownPricingCurrencyDuration["P1M"] = "P1M";
    /** P1Y */
    KnownPricingCurrencyDuration["P1Y"] = "P1Y";
    /** P3Y */
    KnownPricingCurrencyDuration["P3Y"] = "P3Y";
})(exports.KnownPricingCurrencyDuration || (exports.KnownPricingCurrencyDuration = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppliedScopeProperties = {
    type: {
        name: "Composite",
        className: "AppliedScopeProperties",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            managementGroupId: {
                serializedName: "managementGroupId",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String"
                }
            },
            resourceGroupId: {
                serializedName: "resourceGroupId",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Price = {
    type: {
        name: "Composite",
        className: "Price",
        modelProperties: {
            currencyCode: {
                serializedName: "currencyCode",
                type: {
                    name: "String"
                }
            },
            amount: {
                serializedName: "amount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const BillingPlanInformation = {
    type: {
        name: "Composite",
        className: "BillingPlanInformation",
        modelProperties: {
            pricingCurrencyTotal: {
                serializedName: "pricingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "Date"
                }
            },
            nextPaymentDueDate: {
                serializedName: "nextPaymentDueDate",
                type: {
                    name: "Date"
                }
            },
            transactions: {
                serializedName: "transactions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PaymentDetail"
                        }
                    }
                }
            }
        }
    }
};
const PaymentDetail = {
    type: {
        name: "Composite",
        className: "PaymentDetail",
        modelProperties: {
            dueDate: {
                serializedName: "dueDate",
                type: {
                    name: "Date"
                }
            },
            paymentDate: {
                serializedName: "paymentDate",
                type: {
                    name: "Date"
                }
            },
            pricingCurrencyTotal: {
                serializedName: "pricingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyTotal: {
                serializedName: "billingCurrencyTotal",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            extendedStatusInfo: {
                serializedName: "extendedStatusInfo",
                type: {
                    name: "Composite",
                    className: "ExtendedStatusInfo"
                }
            },
            billingAccount: {
                serializedName: "billingAccount",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExtendedStatusInfo = {
    type: {
        name: "Composite",
        className: "ExtendedStatusInfo",
        modelProperties: {
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoleAssignmentEntity = {
    type: {
        name: "Composite",
        className: "RoleAssignmentEntity",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            principalId: {
                serializedName: "properties.principalId",
                type: {
                    name: "String"
                }
            },
            roleDefinitionId: {
                serializedName: "properties.roleDefinitionId",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SavingsPlanOrderModelList = {
    type: {
        name: "Composite",
        className: "SavingsPlanOrderModelList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanOrderModel"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SavingsPlanModelList = {
    type: {
        name: "Composite",
        className: "SavingsPlanModelList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanModel"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Utilization = {
    type: {
        name: "Composite",
        className: "Utilization",
        modelProperties: {
            trend: {
                serializedName: "trend",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aggregates: {
                serializedName: "aggregates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UtilizationAggregates"
                        }
                    }
                }
            }
        }
    }
};
const UtilizationAggregates = {
    type: {
        name: "Composite",
        className: "UtilizationAggregates",
        modelProperties: {
            grain: {
                serializedName: "grain",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            grainUnit: {
                serializedName: "grainUnit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            valueUnit: {
                serializedName: "valueUnit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RenewProperties = {
    type: {
        name: "Composite",
        className: "RenewProperties",
        modelProperties: {
            purchaseProperties: {
                serializedName: "purchaseProperties",
                type: {
                    name: "Composite",
                    className: "PurchaseRequest"
                }
            }
        }
    }
};
const PurchaseRequest = {
    type: {
        name: "Composite",
        className: "PurchaseRequest",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            },
            term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            },
            billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            },
            appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            },
            commitment: {
                serializedName: "properties.commitment",
                type: {
                    name: "Composite",
                    className: "Commitment"
                }
            },
            effectiveDateTime: {
                serializedName: "properties.effectiveDateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            renew: {
                defaultValue: false,
                serializedName: "properties.renew",
                type: {
                    name: "Boolean"
                }
            },
            appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            }
        }
    }
};
const SavingsPlanModelListResult = {
    type: {
        name: "Composite",
        className: "SavingsPlanModelListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanModel"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            additionalProperties: {
                serializedName: "additionalProperties",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanSummary"
                        }
                    }
                }
            }
        }
    }
};
const SavingsPlanSummary = {
    type: {
        name: "Composite",
        className: "SavingsPlanSummary",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Composite",
                    className: "SavingsPlanSummaryCount"
                }
            }
        }
    }
};
const SavingsPlanSummaryCount = {
    type: {
        name: "Composite",
        className: "SavingsPlanSummaryCount",
        modelProperties: {
            succeededCount: {
                serializedName: "succeededCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            failedCount: {
                serializedName: "failedCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            expiringCount: {
                serializedName: "expiringCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            expiredCount: {
                serializedName: "expiredCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            pendingCount: {
                serializedName: "pendingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cancelledCount: {
                serializedName: "cancelledCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            processingCount: {
                serializedName: "processingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            noBenefitCount: {
                serializedName: "noBenefitCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            warningCount: {
                serializedName: "warningCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SavingsPlanUpdateRequest = {
    type: {
        name: "Composite",
        className: "SavingsPlanUpdateRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SavingsPlanUpdateRequestProperties"
                }
            }
        }
    }
};
const SavingsPlanUpdateRequestProperties = {
    type: {
        name: "Composite",
        className: "SavingsPlanUpdateRequestProperties",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            appliedScopeType: {
                serializedName: "appliedScopeType",
                type: {
                    name: "String"
                }
            },
            appliedScopeProperties: {
                serializedName: "appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            },
            renew: {
                defaultValue: false,
                serializedName: "renew",
                type: {
                    name: "Boolean"
                }
            },
            renewProperties: {
                serializedName: "renewProperties",
                type: {
                    name: "Composite",
                    className: "RenewProperties"
                }
            }
        }
    }
};
const SavingsPlanUpdateValidateRequest = {
    type: {
        name: "Composite",
        className: "SavingsPlanUpdateValidateRequest",
        modelProperties: {
            benefits: {
                serializedName: "benefits",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanUpdateRequestProperties"
                        }
                    }
                }
            }
        }
    }
};
const SavingsPlanValidateResponse = {
    type: {
        name: "Composite",
        className: "SavingsPlanValidateResponse",
        modelProperties: {
            benefits: {
                serializedName: "benefits",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanValidResponseProperty"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SavingsPlanValidResponseProperty = {
    type: {
        name: "Composite",
        className: "SavingsPlanValidResponseProperty",
        modelProperties: {
            valid: {
                serializedName: "valid",
                type: {
                    name: "Boolean"
                }
            },
            reasonCode: {
                serializedName: "reasonCode",
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SavingsPlanPurchaseValidateRequest = {
    type: {
        name: "Composite",
        className: "SavingsPlanPurchaseValidateRequest",
        modelProperties: {
            benefits: {
                serializedName: "benefits",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavingsPlanOrderAliasModel"
                        }
                    }
                }
            }
        }
    }
};
const ReservationOrderAliasRequestPropertiesReservedResourceProperties = {
    type: {
        name: "Composite",
        className: "ReservationOrderAliasRequestPropertiesReservedResourceProperties",
        modelProperties: {
            instanceFlexibility: {
                serializedName: "instanceFlexibility",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationOrderAliasResponsePropertiesReservedResourceProperties = {
    type: {
        name: "Composite",
        className: "ReservationOrderAliasResponsePropertiesReservedResourceProperties",
        modelProperties: {
            instanceFlexibility: {
                serializedName: "instanceFlexibility",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResultError = {
    type: {
        name: "Composite",
        className: "OperationResultError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingInformation = {
    type: {
        name: "Composite",
        className: "BillingInformation",
        modelProperties: {
            billingCurrencyTotalPaidAmount: {
                serializedName: "billingCurrencyTotalPaidAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyProratedAmount: {
                serializedName: "billingCurrencyProratedAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            },
            billingCurrencyRemainingCommitmentAmount: {
                serializedName: "billingCurrencyRemainingCommitmentAmount",
                type: {
                    name: "Composite",
                    className: "Price"
                }
            }
        }
    }
};
const Commitment = {
    type: {
        name: "Composite",
        className: "Commitment",
        modelProperties: Object.assign(Object.assign({}, Price.type.modelProperties), { grain: {
                serializedName: "grain",
                type: {
                    name: "String"
                }
            } })
    }
};
const PricingCurrencyTotal = {
    type: {
        name: "Composite",
        className: "PricingCurrencyTotal",
        modelProperties: Object.assign(Object.assign({}, Price.type.modelProperties), { duration: {
                serializedName: "duration",
                type: {
                    name: "String"
                }
            } })
    }
};
const SavingsPlanOrderAliasModel = {
    type: {
        name: "Composite",
        className: "SavingsPlanOrderAliasModel",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, savingsPlanOrderId: {
                serializedName: "properties.savingsPlanOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            }, billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            }, appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            }, appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            }, commitment: {
                serializedName: "properties.commitment",
                type: {
                    name: "Composite",
                    className: "Commitment"
                }
            } })
    }
};
const SavingsPlanOrderModel = {
    type: {
        name: "Composite",
        className: "SavingsPlanOrderModel",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingAccountId: {
                serializedName: "properties.billingAccountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            }, billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            }, expiryDateTime: {
                serializedName: "properties.expiryDateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, benefitStartTime: {
                serializedName: "properties.benefitStartTime",
                type: {
                    name: "DateTime"
                }
            }, planInformation: {
                serializedName: "properties.planInformation",
                type: {
                    name: "Composite",
                    className: "BillingPlanInformation"
                }
            }, savingsPlans: {
                serializedName: "properties.savingsPlans",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, extendedStatusInfo: {
                serializedName: "properties.extendedStatusInfo",
                type: {
                    name: "Composite",
                    className: "ExtendedStatusInfo"
                }
            } })
    }
};
const SavingsPlanModel = {
    type: {
        name: "Composite",
        className: "SavingsPlanModel",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayProvisioningState: {
                serializedName: "properties.displayProvisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingAccountId: {
                serializedName: "properties.billingAccountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            }, billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            }, appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            }, userFriendlyAppliedScopeType: {
                serializedName: "properties.userFriendlyAppliedScopeType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            }, commitment: {
                serializedName: "properties.commitment",
                type: {
                    name: "Composite",
                    className: "Commitment"
                }
            }, effectiveDateTime: {
                serializedName: "properties.effectiveDateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, expiryDateTime: {
                serializedName: "properties.expiryDateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, purchaseDateTime: {
                serializedName: "properties.purchaseDateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, benefitStartTime: {
                serializedName: "properties.benefitStartTime",
                type: {
                    name: "DateTime"
                }
            }, extendedStatusInfo: {
                serializedName: "properties.extendedStatusInfo",
                type: {
                    name: "Composite",
                    className: "ExtendedStatusInfo"
                }
            }, renew: {
                defaultValue: false,
                serializedName: "properties.renew",
                type: {
                    name: "Boolean"
                }
            }, utilization: {
                serializedName: "properties.utilization",
                type: {
                    name: "Composite",
                    className: "Utilization"
                }
            }, renewSource: {
                serializedName: "properties.renewSource",
                type: {
                    name: "String"
                }
            }, renewDestination: {
                serializedName: "properties.renewDestination",
                type: {
                    name: "String"
                }
            }, renewProperties: {
                serializedName: "properties.renewProperties",
                type: {
                    name: "Composite",
                    className: "RenewProperties"
                }
            } })
    }
};
const ReservationOrderAliasRequest = {
    type: {
        name: "Composite",
        className: "ReservationOrderAliasRequest",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            }, billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            }, appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            }, appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            }, quantity: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "properties.quantity",
                type: {
                    name: "Number"
                }
            }, renew: {
                defaultValue: false,
                serializedName: "properties.renew",
                type: {
                    name: "Boolean"
                }
            }, reservedResourceType: {
                serializedName: "properties.reservedResourceType",
                type: {
                    name: "String"
                }
            }, reviewDateTime: {
                serializedName: "properties.reviewDateTime",
                type: {
                    name: "DateTime"
                }
            }, reservedResourceProperties: {
                serializedName: "properties.reservedResourceProperties",
                type: {
                    name: "Composite",
                    className: "ReservationOrderAliasRequestPropertiesReservedResourceProperties"
                }
            } })
    }
};
const ReservationOrderAliasResponse = {
    type: {
        name: "Composite",
        className: "ReservationOrderAliasResponse",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, reservationOrderId: {
                serializedName: "properties.reservationOrderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingScopeId: {
                serializedName: "properties.billingScopeId",
                type: {
                    name: "String"
                }
            }, term: {
                serializedName: "properties.term",
                type: {
                    name: "String"
                }
            }, billingPlan: {
                serializedName: "properties.billingPlan",
                type: {
                    name: "String"
                }
            }, appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                type: {
                    name: "String"
                }
            }, appliedScopeProperties: {
                serializedName: "properties.appliedScopeProperties",
                type: {
                    name: "Composite",
                    className: "AppliedScopeProperties"
                }
            }, quantity: {
                serializedName: "properties.quantity",
                type: {
                    name: "Number"
                }
            }, renew: {
                defaultValue: false,
                serializedName: "properties.renew",
                type: {
                    name: "Boolean"
                }
            }, reservedResourceType: {
                serializedName: "properties.reservedResourceType",
                type: {
                    name: "String"
                }
            }, reviewDateTime: {
                serializedName: "properties.reviewDateTime",
                type: {
                    name: "DateTime"
                }
            }, reservedResourceProperties: {
                serializedName: "properties.reservedResourceProperties",
                type: {
                    name: "Composite",
                    className: "ReservationOrderAliasResponsePropertiesReservedResourceProperties"
                }
            } })
    }
};
const SavingsPlanOrderAliasCreateHeaders = {
    type: {
        name: "Composite",
        className: "SavingsPlanOrderAliasCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SavingsPlanUpdateHeaders = {
    type: {
        name: "Composite",
        className: "SavingsPlanUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationOrderAliasCreateHeaders = {
    type: {
        name: "Composite",
        className: "ReservationOrderAliasCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    Sku: Sku,
    AppliedScopeProperties: AppliedScopeProperties,
    Price: Price,
    Resource: Resource,
    SystemData: SystemData,
    BillingPlanInformation: BillingPlanInformation,
    PaymentDetail: PaymentDetail,
    ExtendedStatusInfo: ExtendedStatusInfo,
    RoleAssignmentEntity: RoleAssignmentEntity,
    SavingsPlanOrderModelList: SavingsPlanOrderModelList,
    SavingsPlanModelList: SavingsPlanModelList,
    Utilization: Utilization,
    UtilizationAggregates: UtilizationAggregates,
    RenewProperties: RenewProperties,
    PurchaseRequest: PurchaseRequest,
    SavingsPlanModelListResult: SavingsPlanModelListResult,
    SavingsPlanSummary: SavingsPlanSummary,
    SavingsPlanSummaryCount: SavingsPlanSummaryCount,
    SavingsPlanUpdateRequest: SavingsPlanUpdateRequest,
    SavingsPlanUpdateRequestProperties: SavingsPlanUpdateRequestProperties,
    SavingsPlanUpdateValidateRequest: SavingsPlanUpdateValidateRequest,
    SavingsPlanValidateResponse: SavingsPlanValidateResponse,
    SavingsPlanValidResponseProperty: SavingsPlanValidResponseProperty,
    SavingsPlanPurchaseValidateRequest: SavingsPlanPurchaseValidateRequest,
    ReservationOrderAliasRequestPropertiesReservedResourceProperties: ReservationOrderAliasRequestPropertiesReservedResourceProperties,
    ReservationOrderAliasResponsePropertiesReservedResourceProperties: ReservationOrderAliasResponsePropertiesReservedResourceProperties,
    OperationResultError: OperationResultError,
    BillingInformation: BillingInformation,
    Commitment: Commitment,
    PricingCurrencyTotal: PricingCurrencyTotal,
    SavingsPlanOrderAliasModel: SavingsPlanOrderAliasModel,
    SavingsPlanOrderModel: SavingsPlanOrderModel,
    SavingsPlanModel: SavingsPlanModel,
    ReservationOrderAliasRequest: ReservationOrderAliasRequest,
    ReservationOrderAliasResponse: ReservationOrderAliasResponse,
    SavingsPlanOrderAliasCreateHeaders: SavingsPlanOrderAliasCreateHeaders,
    SavingsPlanUpdateHeaders: SavingsPlanUpdateHeaders,
    ReservationOrderAliasCreateHeaders: ReservationOrderAliasCreateHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: "body",
    mapper: SavingsPlanOrderAliasModel
};
const savingsPlanOrderAliasName = {
    parameterPath: "savingsPlanOrderAliasName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "savingsPlanOrderAliasName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const savingsPlanOrderId = {
    parameterPath: "savingsPlanOrderId",
    mapper: {
        serializedName: "savingsPlanOrderId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
const refreshSummary = {
    parameterPath: ["options", "refreshSummary"],
    mapper: {
        serializedName: "refreshSummary",
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "Number"
        }
    }
};
const selectedState = {
    parameterPath: ["options", "selectedState"],
    mapper: {
        serializedName: "selectedState",
        type: {
            name: "String"
        }
    }
};
const take = {
    parameterPath: ["options", "take"],
    mapper: {
        serializedName: "take",
        type: {
            name: "Number"
        }
    }
};
const savingsPlanId = {
    parameterPath: "savingsPlanId",
    mapper: {
        serializedName: "savingsPlanId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body1 = {
    parameterPath: "body",
    mapper: SavingsPlanUpdateRequest
};
const body2 = {
    parameterPath: "body",
    mapper: SavingsPlanUpdateValidateRequest
};
const body3 = {
    parameterPath: "body",
    mapper: SavingsPlanPurchaseValidateRequest
};
const body4 = {
    parameterPath: "body",
    mapper: ReservationOrderAliasRequest
};
const reservationOrderAliasName = {
    parameterPath: "reservationOrderAliasName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_\\-\\.]+$")
        },
        serializedName: "reservationOrderAliasName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.BillingBenefits/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SavingsPlanOrderAlias operations. */
class SavingsPlanOrderAliasImpl {
    /**
     * Initialize a new instance of the class SavingsPlanOrderAlias class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a savings plan. Learn more about permissions needed at
     * https://go.microsoft.com/fwlink/?linkid=2215851
     * @param savingsPlanOrderAliasName Name of the savings plan order alias
     * @param body Request body for creating a savings plan order alias
     * @param options The options parameters.
     */
    beginCreate(savingsPlanOrderAliasName, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { savingsPlanOrderAliasName, body, options }, createOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a savings plan. Learn more about permissions needed at
     * https://go.microsoft.com/fwlink/?linkid=2215851
     * @param savingsPlanOrderAliasName Name of the savings plan order alias
     * @param body Request body for creating a savings plan order alias
     * @param options The options parameters.
     */
    beginCreateAndWait(savingsPlanOrderAliasName, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(savingsPlanOrderAliasName, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a savings plan.
     * @param savingsPlanOrderAliasName Name of the savings plan order alias
     * @param options The options parameters.
     */
    get(savingsPlanOrderAliasName, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderAliasName, options }, getOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$1 = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrderAliases/{savingsPlanOrderAliasName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SavingsPlanOrderAliasModel
        },
        201: {
            bodyMapper: SavingsPlanOrderAliasModel
        },
        202: {
            bodyMapper: SavingsPlanOrderAliasModel
        },
        204: {
            bodyMapper: SavingsPlanOrderAliasModel
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body,
    queryParameters: [apiVersion],
    urlParameters: [$host, savingsPlanOrderAliasName],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrderAliases/{savingsPlanOrderAliasName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanOrderAliasModel
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, savingsPlanOrderAliasName],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SavingsPlanOrder operations. */
class SavingsPlanOrderImpl {
    /**
     * Initialize a new instance of the class SavingsPlanOrder class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all Savings plan orders.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a savings plan order.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param options The options parameters.
     */
    get(savingsPlanOrderId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, options }, getOperationSpec$2);
    }
    /**
     * Elevate as owner on savings plan order based on billing permissions.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param options The options parameters.
     */
    elevate(savingsPlanOrderId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, options }, elevateOperationSpec);
    }
    /**
     * List all Savings plan orders.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanOrderModel
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host, savingsPlanOrderId],
    headerParameters: [accept],
    serializer: serializer$3
};
const elevateOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/elevate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RoleAssignmentEntity
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, savingsPlanOrderId],
    headerParameters: [accept],
    serializer: serializer$3
};
const listOperationSpec$1 = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanOrderModelList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanOrderModelList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SavingsPlan operations. */
class SavingsPlanImpl {
    /**
     * Initialize a new instance of the class SavingsPlan class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List savings plans in an order.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param options The options parameters.
     */
    list(savingsPlanOrderId, options) {
        const iter = this.listPagingAll(savingsPlanOrderId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(savingsPlanOrderId, options, settings);
            }
        };
    }
    listPagingPage(savingsPlanOrderId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(savingsPlanOrderId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(savingsPlanOrderId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(savingsPlanOrderId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(savingsPlanOrderId, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List savings plans.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAllPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List savings plans in an order.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param options The options parameters.
     */
    _list(savingsPlanOrderId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, options }, listOperationSpec);
    }
    /**
     * List savings plans.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * Get savings plan.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param savingsPlanId ID of the savings plan
     * @param options The options parameters.
     */
    get(savingsPlanOrderId, savingsPlanId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, options }, getOperationSpec$1);
    }
    /**
     * Update savings plan.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param savingsPlanId ID of the savings plan
     * @param body Request body for patching a savings plan order alias
     * @param options The options parameters.
     */
    update(savingsPlanOrderId, savingsPlanId, body, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, body, options }, updateOperationSpec);
    }
    /**
     * Validate savings plan patch.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param savingsPlanId ID of the savings plan
     * @param body Request body for validating a savings plan patch request
     * @param options The options parameters.
     */
    validateUpdate(savingsPlanOrderId, savingsPlanId, body, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, body, options }, validateUpdateOperationSpec);
    }
    /**
     * ListNext
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(savingsPlanOrderId, nextLink, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanModelList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, savingsPlanOrderId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAllOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanModelListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        refreshSummary,
        skiptoken,
        selectedState,
        take
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanModel
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        savingsPlanOrderId,
        savingsPlanId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: SavingsPlanModel
        },
        202: {
            headersMapper: SavingsPlanUpdateHeaders
        },
        404: {
            isError: true
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        savingsPlanOrderId,
        savingsPlanId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const validateUpdateOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SavingsPlanValidateResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        savingsPlanOrderId,
        savingsPlanId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanModelList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        savingsPlanOrderId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavingsPlanModelListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ReservationOrderAlias operations. */
class ReservationOrderAliasImpl {
    /**
     * Initialize a new instance of the class ReservationOrderAlias class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a reservation order alias.
     * @param reservationOrderAliasName Name of the reservation order alias
     * @param body Request body for creating a reservation order alias
     * @param options The options parameters.
     */
    beginCreate(reservationOrderAliasName, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { reservationOrderAliasName, body, options }, createOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a reservation order alias.
     * @param reservationOrderAliasName Name of the reservation order alias
     * @param body Request body for creating a reservation order alias
     * @param options The options parameters.
     */
    beginCreateAndWait(reservationOrderAliasName, body, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(reservationOrderAliasName, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a reservation order alias.
     * @param reservationOrderAliasName Name of the reservation order alias
     * @param options The options parameters.
     */
    get(reservationOrderAliasName, options) {
        return this.client.sendOperationRequest({ reservationOrderAliasName, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/reservationOrderAliases/{reservationOrderAliasName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ReservationOrderAliasResponse
        },
        201: {
            bodyMapper: ReservationOrderAliasResponse
        },
        202: {
            bodyMapper: ReservationOrderAliasResponse
        },
        204: {
            bodyMapper: ReservationOrderAliasResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body4,
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderAliasName],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/reservationOrderAliases/{reservationOrderAliasName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationOrderAliasResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, reservationOrderAliasName],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class BillingBenefitsRP extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the BillingBenefitsRP class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-billingbenefits/1.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-11-01";
        this.operations = new OperationsImpl(this);
        this.savingsPlanOrderAlias = new SavingsPlanOrderAliasImpl(this);
        this.savingsPlanOrder = new SavingsPlanOrderImpl(this);
        this.savingsPlan = new SavingsPlanImpl(this);
        this.reservationOrderAlias = new ReservationOrderAliasImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Validate savings plan purchase.
     * @param body Request body for validating the purchase of a savings plan
     * @param options The options parameters.
     */
    validatePurchase(body, options) {
        return this.sendOperationRequest({ body, options }, validatePurchaseOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const validatePurchaseOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SavingsPlanValidateResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: body3,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};

exports.BillingBenefitsRP = BillingBenefitsRP;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
