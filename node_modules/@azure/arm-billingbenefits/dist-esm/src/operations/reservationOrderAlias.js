/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/** Class containing ReservationOrderAlias operations. */
export class ReservationOrderAliasImpl {
    /**
     * Initialize a new instance of the class ReservationOrderAlias class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a reservation order alias.
     * @param reservationOrderAliasName Name of the reservation order alias
     * @param body Request body for creating a reservation order alias
     * @param options The options parameters.
     */
    beginCreate(reservationOrderAliasName, body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { reservationOrderAliasName, body, options }, createOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a reservation order alias.
     * @param reservationOrderAliasName Name of the reservation order alias
     * @param body Request body for creating a reservation order alias
     * @param options The options parameters.
     */
    beginCreateAndWait(reservationOrderAliasName, body, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(reservationOrderAliasName, body, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a reservation order alias.
     * @param reservationOrderAliasName Name of the reservation order alias
     * @param options The options parameters.
     */
    get(reservationOrderAliasName, options) {
        return this.client.sendOperationRequest({ reservationOrderAliasName, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/reservationOrderAliases/{reservationOrderAliasName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ReservationOrderAliasResponse
        },
        201: {
            bodyMapper: Mappers.ReservationOrderAliasResponse
        },
        202: {
            bodyMapper: Mappers.ReservationOrderAliasResponse
        },
        204: {
            bodyMapper: Mappers.ReservationOrderAliasResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.reservationOrderAliasName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/reservationOrderAliases/{reservationOrderAliasName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ReservationOrderAliasResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.reservationOrderAliasName],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=reservationOrderAlias.js.map