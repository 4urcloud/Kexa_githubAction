/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing SavingsPlan operations. */
export class SavingsPlanImpl {
    /**
     * Initialize a new instance of the class SavingsPlan class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List savings plans in an order.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param options The options parameters.
     */
    list(savingsPlanOrderId, options) {
        const iter = this.listPagingAll(savingsPlanOrderId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(savingsPlanOrderId, options, settings);
            }
        };
    }
    listPagingPage(savingsPlanOrderId, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(savingsPlanOrderId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(savingsPlanOrderId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(savingsPlanOrderId, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(savingsPlanOrderId, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List savings plans.
     * @param options The options parameters.
     */
    listAll(options) {
        const iter = this.listAllPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllPagingPage(options, settings);
            }
        };
    }
    listAllPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listAllPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listAll(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listAllNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listAllPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listAllPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listAllPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List savings plans in an order.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param options The options parameters.
     */
    _list(savingsPlanOrderId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, options }, listOperationSpec);
    }
    /**
     * List savings plans.
     * @param options The options parameters.
     */
    _listAll(options) {
        return this.client.sendOperationRequest({ options }, listAllOperationSpec);
    }
    /**
     * Get savings plan.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param savingsPlanId ID of the savings plan
     * @param options The options parameters.
     */
    get(savingsPlanOrderId, savingsPlanId, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, options }, getOperationSpec);
    }
    /**
     * Update savings plan.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param savingsPlanId ID of the savings plan
     * @param body Request body for patching a savings plan order alias
     * @param options The options parameters.
     */
    update(savingsPlanOrderId, savingsPlanId, body, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, body, options }, updateOperationSpec);
    }
    /**
     * Validate savings plan patch.
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param savingsPlanId ID of the savings plan
     * @param body Request body for validating a savings plan patch request
     * @param options The options parameters.
     */
    validateUpdate(savingsPlanOrderId, savingsPlanId, body, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, savingsPlanId, body, options }, validateUpdateOperationSpec);
    }
    /**
     * ListNext
     * @param savingsPlanOrderId Order ID of the savings plan
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(savingsPlanOrderId, nextLink, options) {
        return this.client.sendOperationRequest({ savingsPlanOrderId, nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListAllNext
     * @param nextLink The nextLink from the previous successful call to the ListAll method.
     * @param options The options parameters.
     */
    _listAllNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listAllNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SavingsPlanModelList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.savingsPlanOrderId],
    headerParameters: [Parameters.accept],
    serializer
};
const listAllOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SavingsPlanModelListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.orderby,
        Parameters.refreshSummary,
        Parameters.skiptoken,
        Parameters.selectedState,
        Parameters.take
    ],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SavingsPlanModel
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.expand],
    urlParameters: [
        Parameters.$host,
        Parameters.savingsPlanOrderId,
        Parameters.savingsPlanId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.SavingsPlanModel
        },
        202: {
            headersMapper: Mappers.SavingsPlanUpdateHeaders
        },
        404: {
            isError: true
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.savingsPlanOrderId,
        Parameters.savingsPlanId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const validateUpdateOperationSpec = {
    path: "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/validate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.SavingsPlanValidateResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.savingsPlanOrderId,
        Parameters.savingsPlanId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SavingsPlanModelList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.savingsPlanOrderId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listAllNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SavingsPlanModelListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    urlParameters: [Parameters.$host, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=savingsPlan.js.map