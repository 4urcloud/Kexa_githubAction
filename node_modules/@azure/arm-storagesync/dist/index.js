'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link IncomingTrafficPolicy} that the service accepts. */
exports.KnownIncomingTrafficPolicy = void 0;
(function (KnownIncomingTrafficPolicy) {
    /** AllowAllTraffic */
    KnownIncomingTrafficPolicy["AllowAllTraffic"] = "AllowAllTraffic";
    /** AllowVirtualNetworksOnly */
    KnownIncomingTrafficPolicy["AllowVirtualNetworksOnly"] = "AllowVirtualNetworksOnly";
})(exports.KnownIncomingTrafficPolicy || (exports.KnownIncomingTrafficPolicy = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
exports.KnownPrivateEndpointServiceConnectionStatus = void 0;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(exports.KnownPrivateEndpointServiceConnectionStatus || (exports.KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
exports.KnownPrivateEndpointConnectionProvisioningState = void 0;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(exports.KnownPrivateEndpointConnectionProvisioningState || (exports.KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link CloudEndpointChangeEnumerationActivityState} that the service accepts. */
exports.KnownCloudEndpointChangeEnumerationActivityState = void 0;
(function (KnownCloudEndpointChangeEnumerationActivityState) {
    /** InitialEnumerationInProgress */
    KnownCloudEndpointChangeEnumerationActivityState["InitialEnumerationInProgress"] = "InitialEnumerationInProgress";
    /** EnumerationInProgress */
    KnownCloudEndpointChangeEnumerationActivityState["EnumerationInProgress"] = "EnumerationInProgress";
})(exports.KnownCloudEndpointChangeEnumerationActivityState || (exports.KnownCloudEndpointChangeEnumerationActivityState = {}));
/** Known values of {@link CloudEndpointChangeEnumerationTotalCountsState} that the service accepts. */
exports.KnownCloudEndpointChangeEnumerationTotalCountsState = void 0;
(function (KnownCloudEndpointChangeEnumerationTotalCountsState) {
    /** Calculating */
    KnownCloudEndpointChangeEnumerationTotalCountsState["Calculating"] = "Calculating";
    /** Final */
    KnownCloudEndpointChangeEnumerationTotalCountsState["Final"] = "Final";
})(exports.KnownCloudEndpointChangeEnumerationTotalCountsState || (exports.KnownCloudEndpointChangeEnumerationTotalCountsState = {}));
/** Known values of {@link ChangeDetectionMode} that the service accepts. */
exports.KnownChangeDetectionMode = void 0;
(function (KnownChangeDetectionMode) {
    /** Default */
    KnownChangeDetectionMode["Default"] = "Default";
    /** Recursive */
    KnownChangeDetectionMode["Recursive"] = "Recursive";
})(exports.KnownChangeDetectionMode || (exports.KnownChangeDetectionMode = {}));
/** Known values of {@link FeatureStatus} that the service accepts. */
exports.KnownFeatureStatus = void 0;
(function (KnownFeatureStatus) {
    /** On */
    KnownFeatureStatus["On"] = "on";
    /** Off */
    KnownFeatureStatus["Off"] = "off";
})(exports.KnownFeatureStatus || (exports.KnownFeatureStatus = {}));
/** Known values of {@link InitialDownloadPolicy} that the service accepts. */
exports.KnownInitialDownloadPolicy = void 0;
(function (KnownInitialDownloadPolicy) {
    /** NamespaceOnly */
    KnownInitialDownloadPolicy["NamespaceOnly"] = "NamespaceOnly";
    /** NamespaceThenModifiedFiles */
    KnownInitialDownloadPolicy["NamespaceThenModifiedFiles"] = "NamespaceThenModifiedFiles";
    /** AvoidTieredFiles */
    KnownInitialDownloadPolicy["AvoidTieredFiles"] = "AvoidTieredFiles";
})(exports.KnownInitialDownloadPolicy || (exports.KnownInitialDownloadPolicy = {}));
/** Known values of {@link LocalCacheMode} that the service accepts. */
exports.KnownLocalCacheMode = void 0;
(function (KnownLocalCacheMode) {
    /** DownloadNewAndModifiedFiles */
    KnownLocalCacheMode["DownloadNewAndModifiedFiles"] = "DownloadNewAndModifiedFiles";
    /** UpdateLocallyCachedFiles */
    KnownLocalCacheMode["UpdateLocallyCachedFiles"] = "UpdateLocallyCachedFiles";
})(exports.KnownLocalCacheMode || (exports.KnownLocalCacheMode = {}));
/** Known values of {@link InitialUploadPolicy} that the service accepts. */
exports.KnownInitialUploadPolicy = void 0;
(function (KnownInitialUploadPolicy) {
    /** ServerAuthoritative */
    KnownInitialUploadPolicy["ServerAuthoritative"] = "ServerAuthoritative";
    /** Merge */
    KnownInitialUploadPolicy["Merge"] = "Merge";
})(exports.KnownInitialUploadPolicy || (exports.KnownInitialUploadPolicy = {}));
/** Known values of {@link ServerEndpointHealthState} that the service accepts. */
exports.KnownServerEndpointHealthState = void 0;
(function (KnownServerEndpointHealthState) {
    /** Unavailable */
    KnownServerEndpointHealthState["Unavailable"] = "Unavailable";
    /** Healthy */
    KnownServerEndpointHealthState["Healthy"] = "Healthy";
    /** Error */
    KnownServerEndpointHealthState["Error"] = "Error";
})(exports.KnownServerEndpointHealthState || (exports.KnownServerEndpointHealthState = {}));
/** Known values of {@link ServerEndpointSyncActivityState} that the service accepts. */
exports.KnownServerEndpointSyncActivityState = void 0;
(function (KnownServerEndpointSyncActivityState) {
    /** Upload */
    KnownServerEndpointSyncActivityState["Upload"] = "Upload";
    /** Download */
    KnownServerEndpointSyncActivityState["Download"] = "Download";
    /** UploadAndDownload */
    KnownServerEndpointSyncActivityState["UploadAndDownload"] = "UploadAndDownload";
})(exports.KnownServerEndpointSyncActivityState || (exports.KnownServerEndpointSyncActivityState = {}));
/** Known values of {@link ServerEndpointSyncMode} that the service accepts. */
exports.KnownServerEndpointSyncMode = void 0;
(function (KnownServerEndpointSyncMode) {
    /** Regular */
    KnownServerEndpointSyncMode["Regular"] = "Regular";
    /** NamespaceDownload */
    KnownServerEndpointSyncMode["NamespaceDownload"] = "NamespaceDownload";
    /** InitialUpload */
    KnownServerEndpointSyncMode["InitialUpload"] = "InitialUpload";
    /** SnapshotUpload */
    KnownServerEndpointSyncMode["SnapshotUpload"] = "SnapshotUpload";
    /** InitialFullDownload */
    KnownServerEndpointSyncMode["InitialFullDownload"] = "InitialFullDownload";
})(exports.KnownServerEndpointSyncMode || (exports.KnownServerEndpointSyncMode = {}));
/** Known values of {@link ServerEndpointOfflineDataTransferState} that the service accepts. */
exports.KnownServerEndpointOfflineDataTransferState = void 0;
(function (KnownServerEndpointOfflineDataTransferState) {
    /** InProgress */
    KnownServerEndpointOfflineDataTransferState["InProgress"] = "InProgress";
    /** Stopping */
    KnownServerEndpointOfflineDataTransferState["Stopping"] = "Stopping";
    /** NotRunning */
    KnownServerEndpointOfflineDataTransferState["NotRunning"] = "NotRunning";
    /** Complete */
    KnownServerEndpointOfflineDataTransferState["Complete"] = "Complete";
})(exports.KnownServerEndpointOfflineDataTransferState || (exports.KnownServerEndpointOfflineDataTransferState = {}));
/** Known values of {@link RegisteredServerAgentVersionStatus} that the service accepts. */
exports.KnownRegisteredServerAgentVersionStatus = void 0;
(function (KnownRegisteredServerAgentVersionStatus) {
    /** Ok */
    KnownRegisteredServerAgentVersionStatus["Ok"] = "Ok";
    /** NearExpiry */
    KnownRegisteredServerAgentVersionStatus["NearExpiry"] = "NearExpiry";
    /** Expired */
    KnownRegisteredServerAgentVersionStatus["Expired"] = "Expired";
    /** Blocked */
    KnownRegisteredServerAgentVersionStatus["Blocked"] = "Blocked";
})(exports.KnownRegisteredServerAgentVersionStatus || (exports.KnownRegisteredServerAgentVersionStatus = {}));
/** Known values of {@link WorkflowStatus} that the service accepts. */
exports.KnownWorkflowStatus = void 0;
(function (KnownWorkflowStatus) {
    /** Active */
    KnownWorkflowStatus["Active"] = "active";
    /** Expired */
    KnownWorkflowStatus["Expired"] = "expired";
    /** Succeeded */
    KnownWorkflowStatus["Succeeded"] = "succeeded";
    /** Aborted */
    KnownWorkflowStatus["Aborted"] = "aborted";
    /** Failed */
    KnownWorkflowStatus["Failed"] = "failed";
})(exports.KnownWorkflowStatus || (exports.KnownWorkflowStatus = {}));
/** Known values of {@link OperationDirection} that the service accepts. */
exports.KnownOperationDirection = void 0;
(function (KnownOperationDirection) {
    /** Do */
    KnownOperationDirection["Do"] = "do";
    /** Undo */
    KnownOperationDirection["Undo"] = "undo";
    /** Cancel */
    KnownOperationDirection["Cancel"] = "cancel";
})(exports.KnownOperationDirection || (exports.KnownOperationDirection = {}));
/** Known values of {@link Reason} that the service accepts. */
exports.KnownReason = void 0;
(function (KnownReason) {
    /** Registered */
    KnownReason["Registered"] = "Registered";
    /** Unregistered */
    KnownReason["Unregistered"] = "Unregistered";
    /** Warned */
    KnownReason["Warned"] = "Warned";
    /** Suspended */
    KnownReason["Suspended"] = "Suspended";
    /** Deleted */
    KnownReason["Deleted"] = "Deleted";
})(exports.KnownReason || (exports.KnownReason = {}));
/** Known values of {@link ProgressType} that the service accepts. */
exports.KnownProgressType = void 0;
(function (KnownProgressType) {
    /** None */
    KnownProgressType["None"] = "none";
    /** Initialize */
    KnownProgressType["Initialize"] = "initialize";
    /** Download */
    KnownProgressType["Download"] = "download";
    /** Upload */
    KnownProgressType["Upload"] = "upload";
    /** Recall */
    KnownProgressType["Recall"] = "recall";
})(exports.KnownProgressType || (exports.KnownProgressType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationEntityListResult = {
    type: {
        name: "Composite",
        className: "OperationEntityListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationEntity"
                        }
                    }
                }
            }
        }
    }
};
const OperationEntity = {
    type: {
        name: "Composite",
        className: "OperationEntity",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayInfo"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "OperationProperties"
                }
            }
        }
    }
};
const OperationDisplayInfo = {
    type: {
        name: "Composite",
        className: "OperationDisplayInfo",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationProperties = {
    type: {
        name: "Composite",
        className: "OperationProperties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationResourceServiceSpecification"
                }
            }
        }
    }
};
const OperationResourceServiceSpecification = {
    type: {
        name: "Composite",
        className: "OperationResourceServiceSpecification",
        modelProperties: {
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationResourceMetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
const OperationResourceMetricSpecification = {
    type: {
        name: "Composite",
        className: "OperationResourceMetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            fillGapWithZero: {
                serializedName: "fillGapWithZero",
                type: {
                    name: "Boolean"
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationResourceMetricSpecificationDimension"
                        }
                    }
                }
            }
        }
    }
};
const OperationResourceMetricSpecificationDimension = {
    type: {
        name: "Composite",
        className: "OperationResourceMetricSpecificationDimension",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            toBeExportedForShoebox: {
                serializedName: "toBeExportedForShoebox",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const StorageSyncError = {
    type: {
        name: "Composite",
        className: "StorageSyncError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "StorageSyncApiError"
                }
            },
            innererror: {
                serializedName: "innererror",
                type: {
                    name: "Composite",
                    className: "StorageSyncApiError"
                }
            }
        }
    }
};
const StorageSyncApiError = {
    type: {
        name: "Composite",
        className: "StorageSyncApiError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Composite",
                    className: "StorageSyncErrorDetails"
                }
            },
            innerError: {
                serializedName: "innerError",
                type: {
                    name: "Composite",
                    className: "StorageSyncInnerErrorDetails"
                }
            }
        }
    }
};
const StorageSyncErrorDetails = {
    type: {
        name: "Composite",
        className: "StorageSyncErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            requestUri: {
                serializedName: "requestUri",
                type: {
                    name: "String"
                }
            },
            exceptionType: {
                serializedName: "exceptionType",
                type: {
                    name: "String"
                }
            },
            httpMethod: {
                serializedName: "httpMethod",
                type: {
                    name: "String"
                }
            },
            hashedMessage: {
                serializedName: "hashedMessage",
                type: {
                    name: "String"
                }
            },
            httpErrorCode: {
                serializedName: "httpErrorCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncInnerErrorDetails = {
    type: {
        name: "Composite",
        className: "StorageSyncInnerErrorDetails",
        modelProperties: {
            callStack: {
                serializedName: "callStack",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            innerException: {
                serializedName: "innerException",
                type: {
                    name: "String"
                }
            },
            innerExceptionCallStack: {
                serializedName: "innerExceptionCallStack",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityParameters",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.StorageSync/storageSyncServices",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResult",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Invalid", "AlreadyExists"]
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServiceCreateParameters = {
    type: {
        name: "Composite",
        className: "StorageSyncServiceCreateParameters",
        modelProperties: {
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            incomingTrafficPolicy: {
                serializedName: "properties.incomingTrafficPolicy",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServiceUpdateParameters = {
    type: {
        name: "Composite",
        className: "StorageSyncServiceUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            incomingTrafficPolicy: {
                serializedName: "properties.incomingTrafficPolicy",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServiceArray = {
    type: {
        name: "Composite",
        className: "StorageSyncServiceArray",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageSyncService"
                        }
                    }
                }
            }
        }
    }
};
const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }
        }
    }
};
const SyncGroupArray = {
    type: {
        name: "Composite",
        className: "SyncGroupArray",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SyncGroup"
                        }
                    }
                }
            }
        }
    }
};
const CloudEndpointChangeEnumerationStatus = {
    type: {
        name: "Composite",
        className: "CloudEndpointChangeEnumerationStatus",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastEnumerationStatus: {
                serializedName: "lastEnumerationStatus",
                type: {
                    name: "Composite",
                    className: "CloudEndpointLastChangeEnumerationStatus"
                }
            },
            activity: {
                serializedName: "activity",
                type: {
                    name: "Composite",
                    className: "CloudEndpointChangeEnumerationActivity"
                }
            }
        }
    }
};
const CloudEndpointLastChangeEnumerationStatus = {
    type: {
        name: "Composite",
        className: "CloudEndpointLastChangeEnumerationStatus",
        modelProperties: {
            startedTimestamp: {
                serializedName: "startedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            completedTimestamp: {
                serializedName: "completedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            namespaceFilesCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "namespaceFilesCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            namespaceDirectoriesCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "namespaceDirectoriesCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            namespaceSizeBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "namespaceSizeBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nextRunTimestamp: {
                serializedName: "nextRunTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const CloudEndpointChangeEnumerationActivity = {
    type: {
        name: "Composite",
        className: "CloudEndpointChangeEnumerationActivity",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            operationState: {
                serializedName: "operationState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            statusCode: {
                serializedName: "statusCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            startedTimestamp: {
                serializedName: "startedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            processedFilesCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "processedFilesCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            processedDirectoriesCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "processedDirectoriesCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalFilesCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalFilesCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalDirectoriesCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalDirectoriesCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalSizeBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalSizeBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            progressPercent: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "progressPercent",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            minutesRemaining: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "minutesRemaining",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalCountsState: {
                serializedName: "totalCountsState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            deletesProgressPercent: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "deletesProgressPercent",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CloudEndpointArray = {
    type: {
        name: "Composite",
        className: "CloudEndpointArray",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudEndpoint"
                        }
                    }
                }
            }
        }
    }
};
const BackupRequest = {
    type: {
        name: "Composite",
        className: "BackupRequest",
        modelProperties: {
            azureFileShare: {
                serializedName: "azureFileShare",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PostBackupResponse = {
    type: {
        name: "Composite",
        className: "PostBackupResponse",
        modelProperties: {
            cloudEndpointName: {
                serializedName: "backupMetadata.cloudEndpointName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PreRestoreRequest = {
    type: {
        name: "Composite",
        className: "PreRestoreRequest",
        modelProperties: {
            partition: {
                serializedName: "partition",
                type: {
                    name: "String"
                }
            },
            replicaGroup: {
                serializedName: "replicaGroup",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                type: {
                    name: "String"
                }
            },
            azureFileShareUri: {
                serializedName: "azureFileShareUri",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            sourceAzureFileShareUri: {
                serializedName: "sourceAzureFileShareUri",
                type: {
                    name: "String"
                }
            },
            backupMetadataPropertyBag: {
                serializedName: "backupMetadataPropertyBag",
                type: {
                    name: "String"
                }
            },
            restoreFileSpec: {
                serializedName: "restoreFileSpec",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RestoreFileSpec"
                        }
                    }
                }
            },
            pauseWaitForSyncDrainTimePeriodInSeconds: {
                serializedName: "pauseWaitForSyncDrainTimePeriodInSeconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RestoreFileSpec = {
    type: {
        name: "Composite",
        className: "RestoreFileSpec",
        modelProperties: {
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            },
            isdir: {
                serializedName: "isdir",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const PostRestoreRequest = {
    type: {
        name: "Composite",
        className: "PostRestoreRequest",
        modelProperties: {
            partition: {
                serializedName: "partition",
                type: {
                    name: "String"
                }
            },
            replicaGroup: {
                serializedName: "replicaGroup",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                type: {
                    name: "String"
                }
            },
            azureFileShareUri: {
                serializedName: "azureFileShareUri",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            sourceAzureFileShareUri: {
                serializedName: "sourceAzureFileShareUri",
                type: {
                    name: "String"
                }
            },
            failedFileList: {
                serializedName: "failedFileList",
                type: {
                    name: "String"
                }
            },
            restoreFileSpec: {
                serializedName: "restoreFileSpec",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RestoreFileSpec"
                        }
                    }
                }
            }
        }
    }
};
const TriggerChangeDetectionParameters = {
    type: {
        name: "Composite",
        className: "TriggerChangeDetectionParameters",
        modelProperties: {
            directoryPath: {
                serializedName: "directoryPath",
                type: {
                    name: "String"
                }
            },
            changeDetectionMode: {
                serializedName: "changeDetectionMode",
                type: {
                    name: "String"
                }
            },
            paths: {
                serializedName: "paths",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ServerEndpointSyncStatus = {
    type: {
        name: "Composite",
        className: "ServerEndpointSyncStatus",
        modelProperties: {
            downloadHealth: {
                serializedName: "downloadHealth",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            uploadHealth: {
                serializedName: "uploadHealth",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            combinedHealth: {
                serializedName: "combinedHealth",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            syncActivity: {
                serializedName: "syncActivity",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            totalPersistentFilesNotSyncingCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalPersistentFilesNotSyncingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            uploadStatus: {
                serializedName: "uploadStatus",
                type: {
                    name: "Composite",
                    className: "ServerEndpointSyncSessionStatus"
                }
            },
            downloadStatus: {
                serializedName: "downloadStatus",
                type: {
                    name: "Composite",
                    className: "ServerEndpointSyncSessionStatus"
                }
            },
            uploadActivity: {
                serializedName: "uploadActivity",
                type: {
                    name: "Composite",
                    className: "ServerEndpointSyncActivityStatus"
                }
            },
            downloadActivity: {
                serializedName: "downloadActivity",
                type: {
                    name: "Composite",
                    className: "ServerEndpointSyncActivityStatus"
                }
            },
            offlineDataTransferStatus: {
                serializedName: "offlineDataTransferStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            backgroundDataDownloadActivity: {
                serializedName: "backgroundDataDownloadActivity",
                type: {
                    name: "Composite",
                    className: "ServerEndpointBackgroundDataDownloadActivity"
                }
            }
        }
    }
};
const ServerEndpointSyncSessionStatus = {
    type: {
        name: "Composite",
        className: "ServerEndpointSyncSessionStatus",
        modelProperties: {
            lastSyncResult: {
                serializedName: "lastSyncResult",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            lastSyncTimestamp: {
                serializedName: "lastSyncTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastSyncSuccessTimestamp: {
                serializedName: "lastSyncSuccessTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastSyncPerItemErrorCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "lastSyncPerItemErrorCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            persistentFilesNotSyncingCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "persistentFilesNotSyncingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            transientFilesNotSyncingCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "transientFilesNotSyncingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            filesNotSyncingErrors: {
                serializedName: "filesNotSyncingErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServerEndpointFilesNotSyncingError"
                        }
                    }
                }
            },
            lastSyncMode: {
                serializedName: "lastSyncMode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointFilesNotSyncingError = {
    type: {
        name: "Composite",
        className: "ServerEndpointFilesNotSyncingError",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            persistentCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "persistentCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            transientCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "transientCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServerEndpointSyncActivityStatus = {
    type: {
        name: "Composite",
        className: "ServerEndpointSyncActivityStatus",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            perItemErrorCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "perItemErrorCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            appliedItemCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "appliedItemCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalItemCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalItemCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            appliedBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "appliedBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            syncMode: {
                serializedName: "syncMode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sessionMinutesRemaining: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "sessionMinutesRemaining",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServerEndpointBackgroundDataDownloadActivity = {
    type: {
        name: "Composite",
        className: "ServerEndpointBackgroundDataDownloadActivity",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            startedTimestamp: {
                serializedName: "startedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            percentProgress: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "percentProgress",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            downloadedBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "downloadedBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServerEndpointCloudTieringStatus = {
    type: {
        name: "Composite",
        className: "ServerEndpointCloudTieringStatus",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            healthLastUpdatedTimestamp: {
                serializedName: "healthLastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastCloudTieringResult: {
                serializedName: "lastCloudTieringResult",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            lastSuccessTimestamp: {
                serializedName: "lastSuccessTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            spaceSavings: {
                serializedName: "spaceSavings",
                type: {
                    name: "Composite",
                    className: "CloudTieringSpaceSavings"
                }
            },
            cachePerformance: {
                serializedName: "cachePerformance",
                type: {
                    name: "Composite",
                    className: "CloudTieringCachePerformance"
                }
            },
            filesNotTiering: {
                serializedName: "filesNotTiering",
                type: {
                    name: "Composite",
                    className: "CloudTieringFilesNotTiering"
                }
            },
            volumeFreeSpacePolicyStatus: {
                serializedName: "volumeFreeSpacePolicyStatus",
                type: {
                    name: "Composite",
                    className: "CloudTieringVolumeFreeSpacePolicyStatus"
                }
            },
            datePolicyStatus: {
                serializedName: "datePolicyStatus",
                type: {
                    name: "Composite",
                    className: "CloudTieringDatePolicyStatus"
                }
            }
        }
    }
};
const CloudTieringSpaceSavings = {
    type: {
        name: "Composite",
        className: "CloudTieringSpaceSavings",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            volumeSizeBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "volumeSizeBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            totalSizeCloudBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalSizeCloudBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cachedSizeBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "cachedSizeBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            spaceSavingsPercent: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "spaceSavingsPercent",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            spaceSavingsBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "spaceSavingsBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CloudTieringCachePerformance = {
    type: {
        name: "Composite",
        className: "CloudTieringCachePerformance",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            cacheHitBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "cacheHitBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cacheMissBytes: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "cacheMissBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cacheHitBytesPercent: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "cacheHitBytesPercent",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CloudTieringFilesNotTiering = {
    type: {
        name: "Composite",
        className: "CloudTieringFilesNotTiering",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            totalFileCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalFileCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            errors: {
                serializedName: "errors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilesNotTieringError"
                        }
                    }
                }
            }
        }
    }
};
const FilesNotTieringError = {
    type: {
        name: "Composite",
        className: "FilesNotTieringError",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            fileCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "fileCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CloudTieringVolumeFreeSpacePolicyStatus = {
    type: {
        name: "Composite",
        className: "CloudTieringVolumeFreeSpacePolicyStatus",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            effectiveVolumeFreeSpacePolicy: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "effectiveVolumeFreeSpacePolicy",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            currentVolumeFreeSpacePercent: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "currentVolumeFreeSpacePercent",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CloudTieringDatePolicyStatus = {
    type: {
        name: "Composite",
        className: "CloudTieringDatePolicyStatus",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            tieredFilesMostRecentAccessTimestamp: {
                serializedName: "tieredFilesMostRecentAccessTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ServerEndpointRecallStatus = {
    type: {
        name: "Composite",
        className: "ServerEndpointRecallStatus",
        modelProperties: {
            lastUpdatedTimestamp: {
                serializedName: "lastUpdatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            totalRecallErrorsCount: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "totalRecallErrorsCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            recallErrors: {
                serializedName: "recallErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServerEndpointRecallError"
                        }
                    }
                }
            }
        }
    }
};
const ServerEndpointRecallError = {
    type: {
        name: "Composite",
        className: "ServerEndpointRecallError",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            count: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "count",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServerEndpointUpdateParameters = {
    type: {
        name: "Composite",
        className: "ServerEndpointUpdateParameters",
        modelProperties: {
            cloudTiering: {
                serializedName: "properties.cloudTiering",
                type: {
                    name: "String"
                }
            },
            volumeFreeSpacePercent: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.volumeFreeSpacePercent",
                type: {
                    name: "Number"
                }
            },
            tierFilesOlderThanDays: {
                constraints: {
                    InclusiveMaximum: 2147483647,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.tierFilesOlderThanDays",
                type: {
                    name: "Number"
                }
            },
            offlineDataTransfer: {
                serializedName: "properties.offlineDataTransfer",
                type: {
                    name: "String"
                }
            },
            offlineDataTransferShareName: {
                serializedName: "properties.offlineDataTransferShareName",
                type: {
                    name: "String"
                }
            },
            localCacheMode: {
                serializedName: "properties.localCacheMode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointArray = {
    type: {
        name: "Composite",
        className: "ServerEndpointArray",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServerEndpoint"
                        }
                    }
                }
            }
        }
    }
};
const RecallActionParameters = {
    type: {
        name: "Composite",
        className: "RecallActionParameters",
        modelProperties: {
            pattern: {
                serializedName: "pattern",
                type: {
                    name: "String"
                }
            },
            recallPath: {
                serializedName: "recallPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegisteredServerArray = {
    type: {
        name: "Composite",
        className: "RegisteredServerArray",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegisteredServer"
                        }
                    }
                }
            }
        }
    }
};
const TriggerRolloverRequest = {
    type: {
        name: "Composite",
        className: "TriggerRolloverRequest",
        modelProperties: {
            serverCertificate: {
                serializedName: "serverCertificate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkflowArray = {
    type: {
        name: "Composite",
        className: "WorkflowArray",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Workflow"
                        }
                    }
                }
            }
        }
    }
};
const OperationStatus = {
    type: {
        name: "Composite",
        className: "OperationStatus",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "StorageSyncApiError"
                }
            }
        }
    }
};
const LocationOperationStatus = {
    type: {
        name: "Composite",
        className: "LocationOperationStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTime: {
                serializedName: "endTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "StorageSyncApiError"
                }
            },
            percentComplete: {
                serializedName: "percentComplete",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SubscriptionState = {
    type: {
        name: "Composite",
        className: "SubscriptionState",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            },
            istransitioning: {
                serializedName: "istransitioning",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ResourcesMoveInfo = {
    type: {
        name: "Composite",
        className: "ResourcesMoveInfo",
        modelProperties: {
            targetResourceGroup: {
                serializedName: "targetResourceGroup",
                type: {
                    name: "String"
                }
            },
            resources: {
                serializedName: "resources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const OperationDisplayResource = {
    type: {
        name: "Composite",
        className: "OperationDisplayResource",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, requiredMembers: {
                serializedName: "properties.requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const StorageSyncService = {
    type: {
        name: "Composite",
        className: "StorageSyncService",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { incomingTrafficPolicy: {
                serializedName: "properties.incomingTrafficPolicy",
                type: {
                    name: "String"
                }
            }, storageSyncServiceStatus: {
                serializedName: "properties.storageSyncServiceStatus",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, storageSyncServiceUid: {
                serializedName: "properties.storageSyncServiceUid",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastWorkflowId: {
                serializedName: "properties.lastWorkflowId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastOperationName: {
                serializedName: "properties.lastOperationName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            } })
    }
};
const SyncGroup = {
    type: {
        name: "Composite",
        className: "SyncGroup",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { uniqueId: {
                serializedName: "properties.uniqueId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, syncGroupStatus: {
                serializedName: "properties.syncGroupStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SyncGroupCreateParameters = {
    type: {
        name: "Composite",
        className: "SyncGroupCreateParameters",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const CloudEndpointCreateParameters = {
    type: {
        name: "Composite",
        className: "CloudEndpointCreateParameters",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { storageAccountResourceId: {
                serializedName: "properties.storageAccountResourceId",
                type: {
                    name: "String"
                }
            }, azureFileShareName: {
                serializedName: "properties.azureFileShareName",
                type: {
                    name: "String"
                }
            }, storageAccountTenantId: {
                serializedName: "properties.storageAccountTenantId",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            } })
    }
};
const CloudEndpoint = {
    type: {
        name: "Composite",
        className: "CloudEndpoint",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { storageAccountResourceId: {
                serializedName: "properties.storageAccountResourceId",
                type: {
                    name: "String"
                }
            }, azureFileShareName: {
                serializedName: "properties.azureFileShareName",
                type: {
                    name: "String"
                }
            }, storageAccountTenantId: {
                serializedName: "properties.storageAccountTenantId",
                type: {
                    name: "String"
                }
            }, partnershipId: {
                serializedName: "properties.partnershipId",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, backupEnabled: {
                serializedName: "properties.backupEnabled",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, lastWorkflowId: {
                serializedName: "properties.lastWorkflowId",
                type: {
                    name: "String"
                }
            }, lastOperationName: {
                serializedName: "properties.lastOperationName",
                type: {
                    name: "String"
                }
            }, changeEnumerationStatus: {
                serializedName: "properties.changeEnumerationStatus",
                type: {
                    name: "Composite",
                    className: "CloudEndpointChangeEnumerationStatus"
                }
            } })
    }
};
const ServerEndpointCreateParameters = {
    type: {
        name: "Composite",
        className: "ServerEndpointCreateParameters",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { serverLocalPath: {
                serializedName: "properties.serverLocalPath",
                type: {
                    name: "String"
                }
            }, cloudTiering: {
                serializedName: "properties.cloudTiering",
                type: {
                    name: "String"
                }
            }, volumeFreeSpacePercent: {
                defaultValue: 20,
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.volumeFreeSpacePercent",
                type: {
                    name: "Number"
                }
            }, tierFilesOlderThanDays: {
                constraints: {
                    InclusiveMaximum: 2147483647,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.tierFilesOlderThanDays",
                type: {
                    name: "Number"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, serverResourceId: {
                serializedName: "properties.serverResourceId",
                type: {
                    name: "String"
                }
            }, offlineDataTransfer: {
                serializedName: "properties.offlineDataTransfer",
                type: {
                    name: "String"
                }
            }, offlineDataTransferShareName: {
                serializedName: "properties.offlineDataTransferShareName",
                type: {
                    name: "String"
                }
            }, initialDownloadPolicy: {
                serializedName: "properties.initialDownloadPolicy",
                type: {
                    name: "String"
                }
            }, localCacheMode: {
                serializedName: "properties.localCacheMode",
                type: {
                    name: "String"
                }
            }, initialUploadPolicy: {
                serializedName: "properties.initialUploadPolicy",
                type: {
                    name: "String"
                }
            } })
    }
};
const ServerEndpoint = {
    type: {
        name: "Composite",
        className: "ServerEndpoint",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { serverLocalPath: {
                serializedName: "properties.serverLocalPath",
                type: {
                    name: "String"
                }
            }, cloudTiering: {
                serializedName: "properties.cloudTiering",
                type: {
                    name: "String"
                }
            }, volumeFreeSpacePercent: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.volumeFreeSpacePercent",
                type: {
                    name: "Number"
                }
            }, tierFilesOlderThanDays: {
                constraints: {
                    InclusiveMaximum: 2147483647,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.tierFilesOlderThanDays",
                type: {
                    name: "Number"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, serverResourceId: {
                serializedName: "properties.serverResourceId",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastWorkflowId: {
                serializedName: "properties.lastWorkflowId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastOperationName: {
                serializedName: "properties.lastOperationName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, syncStatus: {
                serializedName: "properties.syncStatus",
                type: {
                    name: "Composite",
                    className: "ServerEndpointSyncStatus"
                }
            }, offlineDataTransfer: {
                serializedName: "properties.offlineDataTransfer",
                type: {
                    name: "String"
                }
            }, offlineDataTransferStorageAccountResourceId: {
                serializedName: "properties.offlineDataTransferStorageAccountResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, offlineDataTransferStorageAccountTenantId: {
                serializedName: "properties.offlineDataTransferStorageAccountTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, offlineDataTransferShareName: {
                serializedName: "properties.offlineDataTransferShareName",
                type: {
                    name: "String"
                }
            }, cloudTieringStatus: {
                serializedName: "properties.cloudTieringStatus",
                type: {
                    name: "Composite",
                    className: "ServerEndpointCloudTieringStatus"
                }
            }, recallStatus: {
                serializedName: "properties.recallStatus",
                type: {
                    name: "Composite",
                    className: "ServerEndpointRecallStatus"
                }
            }, initialDownloadPolicy: {
                serializedName: "properties.initialDownloadPolicy",
                type: {
                    name: "String"
                }
            }, localCacheMode: {
                serializedName: "properties.localCacheMode",
                type: {
                    name: "String"
                }
            }, initialUploadPolicy: {
                serializedName: "properties.initialUploadPolicy",
                type: {
                    name: "String"
                }
            }, serverName: {
                serializedName: "properties.serverName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const RegisteredServer = {
    type: {
        name: "Composite",
        className: "RegisteredServer",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { serverCertificate: {
                serializedName: "properties.serverCertificate",
                type: {
                    name: "String"
                }
            }, agentVersion: {
                serializedName: "properties.agentVersion",
                type: {
                    name: "String"
                }
            }, agentVersionStatus: {
                serializedName: "properties.agentVersionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, agentVersionExpirationDate: {
                serializedName: "properties.agentVersionExpirationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, serverOSVersion: {
                serializedName: "properties.serverOSVersion",
                type: {
                    name: "String"
                }
            }, serverManagementErrorCode: {
                serializedName: "properties.serverManagementErrorCode",
                type: {
                    name: "Number"
                }
            }, lastHeartBeat: {
                serializedName: "properties.lastHeartBeat",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, serverRole: {
                serializedName: "properties.serverRole",
                type: {
                    name: "String"
                }
            }, clusterId: {
                serializedName: "properties.clusterId",
                type: {
                    name: "String"
                }
            }, clusterName: {
                serializedName: "properties.clusterName",
                type: {
                    name: "String"
                }
            }, serverId: {
                serializedName: "properties.serverId",
                type: {
                    name: "String"
                }
            }, storageSyncServiceUid: {
                serializedName: "properties.storageSyncServiceUid",
                type: {
                    name: "String"
                }
            }, lastWorkflowId: {
                serializedName: "properties.lastWorkflowId",
                type: {
                    name: "String"
                }
            }, lastOperationName: {
                serializedName: "properties.lastOperationName",
                type: {
                    name: "String"
                }
            }, discoveryEndpointUri: {
                serializedName: "properties.discoveryEndpointUri",
                type: {
                    name: "String"
                }
            }, resourceLocation: {
                serializedName: "properties.resourceLocation",
                type: {
                    name: "String"
                }
            }, serviceLocation: {
                serializedName: "properties.serviceLocation",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, managementEndpointUri: {
                serializedName: "properties.managementEndpointUri",
                type: {
                    name: "String"
                }
            }, monitoringEndpointUri: {
                serializedName: "properties.monitoringEndpointUri",
                type: {
                    name: "String"
                }
            }, monitoringConfiguration: {
                serializedName: "properties.monitoringConfiguration",
                type: {
                    name: "String"
                }
            }, serverName: {
                serializedName: "properties.serverName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const RegisteredServerCreateParameters = {
    type: {
        name: "Composite",
        className: "RegisteredServerCreateParameters",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { serverCertificate: {
                serializedName: "properties.serverCertificate",
                type: {
                    name: "String"
                }
            }, agentVersion: {
                serializedName: "properties.agentVersion",
                type: {
                    name: "String"
                }
            }, serverOSVersion: {
                serializedName: "properties.serverOSVersion",
                type: {
                    name: "String"
                }
            }, lastHeartBeat: {
                serializedName: "properties.lastHeartBeat",
                type: {
                    name: "String"
                }
            }, serverRole: {
                serializedName: "properties.serverRole",
                type: {
                    name: "String"
                }
            }, clusterId: {
                serializedName: "properties.clusterId",
                type: {
                    name: "String"
                }
            }, clusterName: {
                serializedName: "properties.clusterName",
                type: {
                    name: "String"
                }
            }, serverId: {
                serializedName: "properties.serverId",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            } })
    }
};
const Workflow = {
    type: {
        name: "Composite",
        className: "Workflow",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { lastStepName: {
                serializedName: "properties.lastStepName",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, operation: {
                serializedName: "properties.operation",
                type: {
                    name: "String"
                }
            }, steps: {
                serializedName: "properties.steps",
                type: {
                    name: "String"
                }
            }, lastOperationId: {
                serializedName: "properties.lastOperationId",
                type: {
                    name: "String"
                }
            }, commandName: {
                serializedName: "properties.commandName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdTimestamp: {
                serializedName: "properties.createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastStatusTimestamp: {
                serializedName: "properties.lastStatusTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const OperationsListHeaders = {
    type: {
        name: "Composite",
        className: "OperationsListHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationsListNextHeaders = {
    type: {
        name: "Composite",
        className: "OperationsListNextHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServicesCreateHeaders = {
    type: {
        name: "Composite",
        className: "StorageSyncServicesCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServicesGetHeaders = {
    type: {
        name: "Composite",
        className: "StorageSyncServicesGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServicesUpdateHeaders = {
    type: {
        name: "Composite",
        className: "StorageSyncServicesUpdateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServicesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "StorageSyncServicesDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServicesListByResourceGroupHeaders = {
    type: {
        name: "Composite",
        className: "StorageSyncServicesListByResourceGroupHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageSyncServicesListBySubscriptionHeaders = {
    type: {
        name: "Composite",
        className: "StorageSyncServicesListBySubscriptionHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionsCreateHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionsCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionsDeleteHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionsListByStorageSyncServiceHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionsListByStorageSyncServiceHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SyncGroupsListByStorageSyncServiceHeaders = {
    type: {
        name: "Composite",
        className: "SyncGroupsListByStorageSyncServiceHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SyncGroupsCreateHeaders = {
    type: {
        name: "Composite",
        className: "SyncGroupsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SyncGroupsGetHeaders = {
    type: {
        name: "Composite",
        className: "SyncGroupsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SyncGroupsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "SyncGroupsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsCreateHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsGetHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsListBySyncGroupHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsListBySyncGroupHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsPreBackupHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsPreBackupHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsPostBackupHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsPostBackupHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsPreRestoreHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsPreRestoreHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsRestoreheartbeatHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsRestoreheartbeatHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsPostRestoreHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsPostRestoreHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEndpointsTriggerChangeDetectionHeaders = {
    type: {
        name: "Composite",
        className: "CloudEndpointsTriggerChangeDetectionHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointsCreateHeaders = {
    type: {
        name: "Composite",
        className: "ServerEndpointsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ServerEndpointsUpdateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointsGetHeaders = {
    type: {
        name: "Composite",
        className: "ServerEndpointsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ServerEndpointsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointsListBySyncGroupHeaders = {
    type: {
        name: "Composite",
        className: "ServerEndpointsListBySyncGroupHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerEndpointsRecallActionHeaders = {
    type: {
        name: "Composite",
        className: "ServerEndpointsRecallActionHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegisteredServersListByStorageSyncServiceHeaders = {
    type: {
        name: "Composite",
        className: "RegisteredServersListByStorageSyncServiceHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegisteredServersGetHeaders = {
    type: {
        name: "Composite",
        className: "RegisteredServersGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegisteredServersCreateHeaders = {
    type: {
        name: "Composite",
        className: "RegisteredServersCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegisteredServersDeleteHeaders = {
    type: {
        name: "Composite",
        className: "RegisteredServersDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegisteredServersTriggerRolloverHeaders = {
    type: {
        name: "Composite",
        className: "RegisteredServersTriggerRolloverHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkflowsListByStorageSyncServiceHeaders = {
    type: {
        name: "Composite",
        className: "WorkflowsListByStorageSyncServiceHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkflowsGetHeaders = {
    type: {
        name: "Composite",
        className: "WorkflowsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkflowsAbortHeaders = {
    type: {
        name: "Composite",
        className: "WorkflowsAbortHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationStatusGetHeaders = {
    type: {
        name: "Composite",
        className: "OperationStatusGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MicrosoftStorageSyncLocationOperationStatusHeaders = {
    type: {
        name: "Composite",
        className: "MicrosoftStorageSyncLocationOperationStatusHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            xMsCorrelationRequestId: {
                serializedName: "x-ms-correlation-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationEntityListResult: OperationEntityListResult,
    OperationEntity: OperationEntity,
    OperationDisplayInfo: OperationDisplayInfo,
    OperationProperties: OperationProperties,
    OperationResourceServiceSpecification: OperationResourceServiceSpecification,
    OperationResourceMetricSpecification: OperationResourceMetricSpecification,
    OperationResourceMetricSpecificationDimension: OperationResourceMetricSpecificationDimension,
    StorageSyncError: StorageSyncError,
    StorageSyncApiError: StorageSyncApiError,
    StorageSyncErrorDetails: StorageSyncErrorDetails,
    StorageSyncInnerErrorDetails: StorageSyncInnerErrorDetails,
    CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
    CheckNameAvailabilityResult: CheckNameAvailabilityResult,
    StorageSyncServiceCreateParameters: StorageSyncServiceCreateParameters,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    Resource: Resource,
    StorageSyncServiceUpdateParameters: StorageSyncServiceUpdateParameters,
    StorageSyncServiceArray: StorageSyncServiceArray,
    PrivateLinkResourceListResult: PrivateLinkResourceListResult,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    SyncGroupArray: SyncGroupArray,
    CloudEndpointChangeEnumerationStatus: CloudEndpointChangeEnumerationStatus,
    CloudEndpointLastChangeEnumerationStatus: CloudEndpointLastChangeEnumerationStatus,
    CloudEndpointChangeEnumerationActivity: CloudEndpointChangeEnumerationActivity,
    CloudEndpointArray: CloudEndpointArray,
    BackupRequest: BackupRequest,
    PostBackupResponse: PostBackupResponse,
    PreRestoreRequest: PreRestoreRequest,
    RestoreFileSpec: RestoreFileSpec,
    PostRestoreRequest: PostRestoreRequest,
    TriggerChangeDetectionParameters: TriggerChangeDetectionParameters,
    ServerEndpointSyncStatus: ServerEndpointSyncStatus,
    ServerEndpointSyncSessionStatus: ServerEndpointSyncSessionStatus,
    ServerEndpointFilesNotSyncingError: ServerEndpointFilesNotSyncingError,
    ServerEndpointSyncActivityStatus: ServerEndpointSyncActivityStatus,
    ServerEndpointBackgroundDataDownloadActivity: ServerEndpointBackgroundDataDownloadActivity,
    ServerEndpointCloudTieringStatus: ServerEndpointCloudTieringStatus,
    CloudTieringSpaceSavings: CloudTieringSpaceSavings,
    CloudTieringCachePerformance: CloudTieringCachePerformance,
    CloudTieringFilesNotTiering: CloudTieringFilesNotTiering,
    FilesNotTieringError: FilesNotTieringError,
    CloudTieringVolumeFreeSpacePolicyStatus: CloudTieringVolumeFreeSpacePolicyStatus,
    CloudTieringDatePolicyStatus: CloudTieringDatePolicyStatus,
    ServerEndpointRecallStatus: ServerEndpointRecallStatus,
    ServerEndpointRecallError: ServerEndpointRecallError,
    ServerEndpointUpdateParameters: ServerEndpointUpdateParameters,
    ServerEndpointArray: ServerEndpointArray,
    RecallActionParameters: RecallActionParameters,
    RegisteredServerArray: RegisteredServerArray,
    TriggerRolloverRequest: TriggerRolloverRequest,
    WorkflowArray: WorkflowArray,
    OperationStatus: OperationStatus,
    LocationOperationStatus: LocationOperationStatus,
    SubscriptionState: SubscriptionState,
    ResourcesMoveInfo: ResourcesMoveInfo,
    OperationDisplayResource: OperationDisplayResource,
    PrivateEndpointConnection: PrivateEndpointConnection,
    TrackedResource: TrackedResource,
    PrivateLinkResource: PrivateLinkResource,
    ProxyResource: ProxyResource,
    StorageSyncService: StorageSyncService,
    SyncGroup: SyncGroup,
    SyncGroupCreateParameters: SyncGroupCreateParameters,
    CloudEndpointCreateParameters: CloudEndpointCreateParameters,
    CloudEndpoint: CloudEndpoint,
    ServerEndpointCreateParameters: ServerEndpointCreateParameters,
    ServerEndpoint: ServerEndpoint,
    RegisteredServer: RegisteredServer,
    RegisteredServerCreateParameters: RegisteredServerCreateParameters,
    Workflow: Workflow,
    OperationsListHeaders: OperationsListHeaders,
    OperationsListNextHeaders: OperationsListNextHeaders,
    StorageSyncServicesCreateHeaders: StorageSyncServicesCreateHeaders,
    StorageSyncServicesGetHeaders: StorageSyncServicesGetHeaders,
    StorageSyncServicesUpdateHeaders: StorageSyncServicesUpdateHeaders,
    StorageSyncServicesDeleteHeaders: StorageSyncServicesDeleteHeaders,
    StorageSyncServicesListByResourceGroupHeaders: StorageSyncServicesListByResourceGroupHeaders,
    StorageSyncServicesListBySubscriptionHeaders: StorageSyncServicesListBySubscriptionHeaders,
    PrivateEndpointConnectionsCreateHeaders: PrivateEndpointConnectionsCreateHeaders,
    PrivateEndpointConnectionsDeleteHeaders: PrivateEndpointConnectionsDeleteHeaders,
    PrivateEndpointConnectionsListByStorageSyncServiceHeaders: PrivateEndpointConnectionsListByStorageSyncServiceHeaders,
    SyncGroupsListByStorageSyncServiceHeaders: SyncGroupsListByStorageSyncServiceHeaders,
    SyncGroupsCreateHeaders: SyncGroupsCreateHeaders,
    SyncGroupsGetHeaders: SyncGroupsGetHeaders,
    SyncGroupsDeleteHeaders: SyncGroupsDeleteHeaders,
    CloudEndpointsCreateHeaders: CloudEndpointsCreateHeaders,
    CloudEndpointsGetHeaders: CloudEndpointsGetHeaders,
    CloudEndpointsDeleteHeaders: CloudEndpointsDeleteHeaders,
    CloudEndpointsListBySyncGroupHeaders: CloudEndpointsListBySyncGroupHeaders,
    CloudEndpointsPreBackupHeaders: CloudEndpointsPreBackupHeaders,
    CloudEndpointsPostBackupHeaders: CloudEndpointsPostBackupHeaders,
    CloudEndpointsPreRestoreHeaders: CloudEndpointsPreRestoreHeaders,
    CloudEndpointsRestoreheartbeatHeaders: CloudEndpointsRestoreheartbeatHeaders,
    CloudEndpointsPostRestoreHeaders: CloudEndpointsPostRestoreHeaders,
    CloudEndpointsTriggerChangeDetectionHeaders: CloudEndpointsTriggerChangeDetectionHeaders,
    ServerEndpointsCreateHeaders: ServerEndpointsCreateHeaders,
    ServerEndpointsUpdateHeaders: ServerEndpointsUpdateHeaders,
    ServerEndpointsGetHeaders: ServerEndpointsGetHeaders,
    ServerEndpointsDeleteHeaders: ServerEndpointsDeleteHeaders,
    ServerEndpointsListBySyncGroupHeaders: ServerEndpointsListBySyncGroupHeaders,
    ServerEndpointsRecallActionHeaders: ServerEndpointsRecallActionHeaders,
    RegisteredServersListByStorageSyncServiceHeaders: RegisteredServersListByStorageSyncServiceHeaders,
    RegisteredServersGetHeaders: RegisteredServersGetHeaders,
    RegisteredServersCreateHeaders: RegisteredServersCreateHeaders,
    RegisteredServersDeleteHeaders: RegisteredServersDeleteHeaders,
    RegisteredServersTriggerRolloverHeaders: RegisteredServersTriggerRolloverHeaders,
    WorkflowsListByStorageSyncServiceHeaders: WorkflowsListByStorageSyncServiceHeaders,
    WorkflowsGetHeaders: WorkflowsGetHeaders,
    WorkflowsAbortHeaders: WorkflowsAbortHeaders,
    OperationStatusGetHeaders: OperationStatusGetHeaders,
    MicrosoftStorageSyncLocationOperationStatusHeaders: MicrosoftStorageSyncLocationOperationStatusHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-09-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityParameters
};
const locationName = {
    parameterPath: "locationName",
    mapper: {
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: StorageSyncServiceCreateParameters
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const storageSyncServiceName = {
    parameterPath: "storageSyncServiceName",
    mapper: {
        serializedName: "storageSyncServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: ["options", "parameters"],
    mapper: StorageSyncServiceUpdateParameters
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnection
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: SyncGroupCreateParameters
};
const syncGroupName = {
    parameterPath: "syncGroupName",
    mapper: {
        serializedName: "syncGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: CloudEndpointCreateParameters
};
const cloudEndpointName = {
    parameterPath: "cloudEndpointName",
    mapper: {
        serializedName: "cloudEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: BackupRequest
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: PreRestoreRequest
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: PostRestoreRequest
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: TriggerChangeDetectionParameters
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: ServerEndpointCreateParameters
};
const serverEndpointName = {
    parameterPath: "serverEndpointName",
    mapper: {
        serializedName: "serverEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters10 = {
    parameterPath: ["options", "parameters"],
    mapper: ServerEndpointUpdateParameters
};
const parameters11 = {
    parameterPath: "parameters",
    mapper: RecallActionParameters
};
const serverId = {
    parameterPath: "serverId",
    mapper: {
        serializedName: "serverId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters12 = {
    parameterPath: "parameters",
    mapper: RegisteredServerCreateParameters
};
const parameters13 = {
    parameterPath: "parameters",
    mapper: TriggerRolloverRequest
};
const workflowId = {
    parameterPath: "workflowId",
    mapper: {
        serializedName: "workflowId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Storage Sync Rest API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Storage Sync Rest API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.StorageSync/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult,
            headersMapper: OperationsListHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult,
            headersMapper: OperationsListNextHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing StorageSyncServices operations. */
class StorageSyncServicesImpl {
    /**
     * Initialize a new instance of the class StorageSyncServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a StorageSyncService list by Resource group name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a StorageSyncService list by subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Check the give namespace name availability.
     * @param locationName The desired region for the name check.
     * @param parameters Parameters to check availability of the given namespace name
     * @param options The options parameters.
     */
    checkNameAvailability(locationName, parameters, options) {
        return this.client.sendOperationRequest({ locationName, parameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Create a new StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, storageSyncServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, storageSyncServiceName, parameters, options }, createOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, storageSyncServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, storageSyncServiceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, options }, getOperationSpec$7);
    }
    /**
     * Patch a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, storageSyncServiceName, options }, updateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Patch a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, storageSyncServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, storageSyncServiceName, options }, deleteOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, storageSyncServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a StorageSyncService list by Resource group name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get a StorageSyncService list by subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        locationName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const createOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: StorageSyncService
        },
        201: {
            bodyMapper: StorageSyncService
        },
        202: {
            bodyMapper: StorageSyncService
        },
        204: {
            bodyMapper: StorageSyncService
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageSyncService,
            headersMapper: StorageSyncServicesGetHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: StorageSyncService,
            headersMapper: StorageSyncServicesUpdateHeaders
        },
        201: {
            bodyMapper: StorageSyncService,
            headersMapper: StorageSyncServicesUpdateHeaders
        },
        202: {
            bodyMapper: StorageSyncService,
            headersMapper: StorageSyncServicesUpdateHeaders
        },
        204: {
            bodyMapper: StorageSyncService,
            headersMapper: StorageSyncServicesUpdateHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: StorageSyncServicesDeleteHeaders
        },
        201: {
            headersMapper: StorageSyncServicesDeleteHeaders
        },
        202: {
            headersMapper: StorageSyncServicesDeleteHeaders
        },
        204: {
            headersMapper: StorageSyncServicesDeleteHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageSyncServiceArray,
            headersMapper: StorageSyncServicesListByResourceGroupHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/storageSyncServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageSyncServiceArray,
            headersMapper: StorageSyncServicesListBySubscriptionHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the private link resources that need to be created for a storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, options }, listByStorageSyncServiceOperationSpec$4);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByStorageSyncServiceOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a PrivateEndpointConnection List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        const iter = this.listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, settings);
            }
        };
    }
    listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByStorageSyncService(resourceGroupName, storageSyncServiceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            storageSyncServiceName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$6);
    }
    /**
     * Update the state of specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, storageSyncServiceName, privateEndpointConnectionName, properties, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                privateEndpointConnectionName,
                properties,
                options
            }, createOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the state of specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, storageSyncServiceName, privateEndpointConnectionName, properties, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, storageSyncServiceName, privateEndpointConnectionName, properties, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, storageSyncServiceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                privateEndpointConnectionName,
                options
            }, deleteOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, storageSyncServiceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, storageSyncServiceName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a PrivateEndpointConnection List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    _listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, options }, listByStorageSyncServiceOperationSpec$3);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: properties,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listByStorageSyncServiceOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult,
            headersMapper: PrivateEndpointConnectionsListByStorageSyncServiceHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SyncGroups operations. */
class SyncGroupsImpl {
    /**
     * Initialize a new instance of the class SyncGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a SyncGroup List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        const iter = this.listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, settings);
            }
        };
    }
    listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByStorageSyncService(resourceGroupName, storageSyncServiceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a SyncGroup List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    _listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, options }, listByStorageSyncServiceOperationSpec$2);
    }
    /**
     * Create a new SyncGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param parameters Sync Group Body
     * @param options The options parameters.
     */
    create(resourceGroupName, storageSyncServiceName, syncGroupName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            parameters,
            options
        }, createOperationSpec$3);
    }
    /**
     * Get a given SyncGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, syncGroupName, options }, getOperationSpec$5);
    }
    /**
     * Delete a given SyncGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, syncGroupName, options }, deleteOperationSpec$3);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByStorageSyncServiceOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SyncGroupArray,
            headersMapper: SyncGroupsListByStorageSyncServiceHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SyncGroup,
            headersMapper: SyncGroupsCreateHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SyncGroup,
            headersMapper: SyncGroupsGetHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: SyncGroupsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing CloudEndpoints operations. */
class CloudEndpointsImpl {
    /**
     * Initialize a new instance of the class CloudEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a CloudEndpoint List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        const iter = this.listBySyncGroupPagingAll(resourceGroupName, storageSyncServiceName, syncGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options, settings);
            }
        };
    }
    listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySyncGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySyncGroupPagingAll(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySyncGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create a new CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, createOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName,
            options
        }, getOperationSpec$4);
    }
    /**
     * Delete a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                options
            }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a CloudEndpoint List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    _listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, syncGroupName, options }, listBySyncGroupOperationSpec$1);
    }
    /**
     * Pre Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, preBackupOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Pre Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPreBackupAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Post Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, postBackupOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Post Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPostBackupAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Pre Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, preRestoreOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Pre Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPreRestoreAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Restore Heartbeat a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName,
            options
        }, restoreheartbeatOperationSpec);
    }
    /**
     * Post Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, postRestoreOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Post Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPostRestoreAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File
     * Sync Cloud Endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param options The options parameters.
     */
    beginTriggerChangeDetection(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, triggerChangeDetectionOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File
     * Sync Cloud Endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param options The options parameters.
     */
    beginTriggerChangeDetectionAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTriggerChangeDetection(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CloudEndpoint,
            headersMapper: CloudEndpointsCreateHeaders
        },
        201: {
            bodyMapper: CloudEndpoint,
            headersMapper: CloudEndpointsCreateHeaders
        },
        202: {
            bodyMapper: CloudEndpoint,
            headersMapper: CloudEndpointsCreateHeaders
        },
        204: {
            bodyMapper: CloudEndpoint,
            headersMapper: CloudEndpointsCreateHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CloudEndpoint,
            headersMapper: CloudEndpointsGetHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: CloudEndpointsDeleteHeaders
        },
        201: {
            headersMapper: CloudEndpointsDeleteHeaders
        },
        202: {
            headersMapper: CloudEndpointsDeleteHeaders
        },
        204: {
            headersMapper: CloudEndpointsDeleteHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listBySyncGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CloudEndpointArray,
            headersMapper: CloudEndpointsListBySyncGroupHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const preBackupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: CloudEndpointsPreBackupHeaders
        },
        201: {
            headersMapper: CloudEndpointsPreBackupHeaders
        },
        202: {
            headersMapper: CloudEndpointsPreBackupHeaders
        },
        204: {
            headersMapper: CloudEndpointsPreBackupHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const postBackupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postbackup",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PostBackupResponse,
            headersMapper: CloudEndpointsPostBackupHeaders
        },
        201: {
            bodyMapper: PostBackupResponse,
            headersMapper: CloudEndpointsPostBackupHeaders
        },
        202: {
            bodyMapper: PostBackupResponse,
            headersMapper: CloudEndpointsPostBackupHeaders
        },
        204: {
            bodyMapper: PostBackupResponse,
            headersMapper: CloudEndpointsPostBackupHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const preRestoreOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prerestore",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const restoreheartbeatOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/restoreheartbeat",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: CloudEndpointsRestoreheartbeatHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const postRestoreOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postrestore",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const triggerChangeDetectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/triggerChangeDetection",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        cloudEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ServerEndpoints operations. */
class ServerEndpointsImpl {
    /**
     * Initialize a new instance of the class ServerEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a ServerEndpoint list.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        const iter = this.listBySyncGroupPagingAll(resourceGroupName, storageSyncServiceName, syncGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options, settings);
            }
        };
    }
    listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySyncGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySyncGroupPagingAll(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySyncGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create a new ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                parameters,
                options
            }, createOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Patch a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Patch a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            serverEndpointName,
            options
        }, getOperationSpec$3);
    }
    /**
     * Delete a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                options
            }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a ServerEndpoint list.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    _listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, syncGroupName, options }, listBySyncGroupOperationSpec);
    }
    /**
     * Recall a server endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param options The options parameters.
     */
    beginRecallAction(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                parameters,
                options
            }, recallActionOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Recall a server endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param options The options parameters.
     */
    beginRecallActionAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRecallAction(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsCreateHeaders
        },
        201: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsCreateHeaders
        },
        202: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsCreateHeaders
        },
        204: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsCreateHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsUpdateHeaders
        },
        201: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsUpdateHeaders
        },
        202: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsUpdateHeaders
        },
        204: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsUpdateHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerEndpoint,
            headersMapper: ServerEndpointsGetHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: ServerEndpointsDeleteHeaders
        },
        201: {
            headersMapper: ServerEndpointsDeleteHeaders
        },
        202: {
            headersMapper: ServerEndpointsDeleteHeaders
        },
        204: {
            headersMapper: ServerEndpointsDeleteHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listBySyncGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerEndpointArray,
            headersMapper: ServerEndpointsListBySyncGroupHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const recallActionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints/{serverEndpointName}/recallAction",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: ServerEndpointsRecallActionHeaders
        },
        201: {
            headersMapper: ServerEndpointsRecallActionHeaders
        },
        202: {
            headersMapper: ServerEndpointsRecallActionHeaders
        },
        204: {
            headersMapper: ServerEndpointsRecallActionHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        syncGroupName,
        serverEndpointName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing RegisteredServers operations. */
class RegisteredServersImpl {
    /**
     * Initialize a new instance of the class RegisteredServers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a given registered server list.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        const iter = this.listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, settings);
            }
        };
    }
    listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByStorageSyncService(resourceGroupName, storageSyncServiceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a given registered server list.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    _listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, options }, listByStorageSyncServiceOperationSpec$1);
    }
    /**
     * Get a given registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, serverId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, serverId, options }, getOperationSpec$2);
    }
    /**
     * Add a new registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, storageSyncServiceName, serverId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                serverId,
                parameters,
                options
            }, createOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Add a new registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, storageSyncServiceName, serverId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, storageSyncServiceName, serverId, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete the given registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, storageSyncServiceName, serverId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, storageSyncServiceName, serverId, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete the given registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, storageSyncServiceName, serverId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, storageSyncServiceName, serverId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers Server certificate rollover.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param parameters Body of Trigger Rollover request.
     * @param options The options parameters.
     */
    beginTriggerRollover(resourceGroupName, storageSyncServiceName, serverId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                serverId,
                parameters,
                options
            }, triggerRolloverOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Triggers Server certificate rollover.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param parameters Body of Trigger Rollover request.
     * @param options The options parameters.
     */
    beginTriggerRolloverAndWait(resourceGroupName, storageSyncServiceName, serverId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTriggerRollover(resourceGroupName, storageSyncServiceName, serverId, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByStorageSyncServiceOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegisteredServerArray,
            headersMapper: RegisteredServersListByStorageSyncServiceHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegisteredServer,
            headersMapper: RegisteredServersGetHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        serverId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: RegisteredServer,
            headersMapper: RegisteredServersCreateHeaders
        },
        201: {
            bodyMapper: RegisteredServer,
            headersMapper: RegisteredServersCreateHeaders
        },
        202: {
            bodyMapper: RegisteredServer,
            headersMapper: RegisteredServersCreateHeaders
        },
        204: {
            bodyMapper: RegisteredServer,
            headersMapper: RegisteredServersCreateHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters12,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        serverId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: RegisteredServersDeleteHeaders
        },
        201: {
            headersMapper: RegisteredServersDeleteHeaders
        },
        202: {
            headersMapper: RegisteredServersDeleteHeaders
        },
        204: {
            headersMapper: RegisteredServersDeleteHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        serverId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const triggerRolloverOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}/triggerRollover",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: RegisteredServersTriggerRolloverHeaders
        },
        201: {
            headersMapper: RegisteredServersTriggerRolloverHeaders
        },
        202: {
            headersMapper: RegisteredServersTriggerRolloverHeaders
        },
        204: {
            headersMapper: RegisteredServersTriggerRolloverHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    requestBody: parameters13,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        serverId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Workflows operations. */
class WorkflowsImpl {
    /**
     * Initialize a new instance of the class Workflows class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a Workflow List
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        const iter = this.listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, settings);
            }
        };
    }
    listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByStorageSyncService(resourceGroupName, storageSyncServiceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByStorageSyncServicePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a Workflow List
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    _listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, options }, listByStorageSyncServiceOperationSpec);
    }
    /**
     * Get Workflows resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param workflowId workflow Id
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, workflowId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, workflowId, options }, getOperationSpec$1);
    }
    /**
     * Abort the given workflow.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param workflowId workflow Id
     * @param options The options parameters.
     */
    abort(resourceGroupName, storageSyncServiceName, workflowId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, workflowId, options }, abortOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByStorageSyncServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkflowArray,
            headersMapper: WorkflowsListByStorageSyncServiceHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Workflow,
            headersMapper: WorkflowsGetHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        workflowId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const abortOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}/abort",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: WorkflowsAbortHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        storageSyncServiceName,
        workflowId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationStatusOperations operations. */
class OperationStatusOperationsImpl {
    /**
     * Initialize a new instance of the class OperationStatusOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get Operation status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param locationName The desired region to obtain information from.
     * @param workflowId workflow Id
     * @param operationId operation Id
     * @param options The options parameters.
     */
    get(resourceGroupName, locationName, workflowId, operationId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, locationName, workflowId, operationId, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/locations/{locationName}/workflows/{workflowId}/operations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus,
            headersMapper: OperationStatusGetHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        locationName,
        subscriptionId,
        resourceGroupName,
        workflowId,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class MicrosoftStorageSync extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the MicrosoftStorageSync class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-storagesync/9.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2020-09-01";
        this.operations = new OperationsImpl(this);
        this.storageSyncServices = new StorageSyncServicesImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.syncGroups = new SyncGroupsImpl(this);
        this.cloudEndpoints = new CloudEndpointsImpl(this);
        this.serverEndpoints = new ServerEndpointsImpl(this);
        this.registeredServers = new RegisteredServersImpl(this);
        this.workflows = new WorkflowsImpl(this);
        this.operationStatusOperations = new OperationStatusOperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Get Operation status
     * @param locationName The desired region to obtain information from.
     * @param operationId operation Id
     * @param options The options parameters.
     */
    locationOperationStatus(locationName, operationId, options) {
        return this.sendOperationRequest({ locationName, operationId, options }, locationOperationStatusOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const locationOperationStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/operations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LocationOperationStatus,
            headersMapper: MicrosoftStorageSyncLocationOperationStatusHeaders
        },
        default: {
            bodyMapper: StorageSyncError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        locationName,
        subscriptionId,
        operationId
    ],
    headerParameters: [accept],
    serializer
};

exports.MicrosoftStorageSync = MicrosoftStorageSync;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
