/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing CloudEndpoints operations. */
export class CloudEndpointsImpl {
    /**
     * Initialize a new instance of the class CloudEndpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a CloudEndpoint List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        const iter = this.listBySyncGroupPagingAll(resourceGroupName, storageSyncServiceName, syncGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options, settings);
            }
        };
    }
    listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listBySyncGroupPagingPage_1() {
            let result;
            result = yield __await(this._listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listBySyncGroupPagingAll(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return __asyncGenerator(this, arguments, function* listBySyncGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listBySyncGroupPagingPage(resourceGroupName, storageSyncServiceName, syncGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create a new CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, createOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName,
            options
        }, getOperationSpec);
    }
    /**
     * Delete a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                options
            }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get a CloudEndpoint List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    _listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, syncGroupName, options }, listBySyncGroupOperationSpec);
    }
    /**
     * Pre Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, preBackupOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Pre Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPreBackupAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPreBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Post Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, postBackupOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Post Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPostBackupAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPostBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Pre Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, preRestoreOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Pre Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPreRestoreAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPreRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Restore Heartbeat a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            storageSyncServiceName,
            syncGroupName,
            cloudEndpointName,
            options
        }, restoreheartbeatOperationSpec);
    }
    /**
     * Post Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, postRestoreOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Post Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPostRestoreAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPostRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File
     * Sync Cloud Endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param options The options parameters.
     */
    beginTriggerChangeDetection(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                options
            }, triggerChangeDetectionOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File
     * Sync Cloud Endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param options The options parameters.
     */
    beginTriggerChangeDetectionAndWait(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTriggerChangeDetection(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.CloudEndpoint,
            headersMapper: Mappers.CloudEndpointsCreateHeaders
        },
        201: {
            bodyMapper: Mappers.CloudEndpoint,
            headersMapper: Mappers.CloudEndpointsCreateHeaders
        },
        202: {
            bodyMapper: Mappers.CloudEndpoint,
            headersMapper: Mappers.CloudEndpointsCreateHeaders
        },
        204: {
            bodyMapper: Mappers.CloudEndpoint,
            headersMapper: Mappers.CloudEndpointsCreateHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    requestBody: Parameters.parameters4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CloudEndpoint,
            headersMapper: Mappers.CloudEndpointsGetHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: Mappers.CloudEndpointsDeleteHeaders
        },
        201: {
            headersMapper: Mappers.CloudEndpointsDeleteHeaders
        },
        202: {
            headersMapper: Mappers.CloudEndpointsDeleteHeaders
        },
        204: {
            headersMapper: Mappers.CloudEndpointsDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySyncGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CloudEndpointArray,
            headersMapper: Mappers.CloudEndpointsListBySyncGroupHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const preBackupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prebackup",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: Mappers.CloudEndpointsPreBackupHeaders
        },
        201: {
            headersMapper: Mappers.CloudEndpointsPreBackupHeaders
        },
        202: {
            headersMapper: Mappers.CloudEndpointsPreBackupHeaders
        },
        204: {
            headersMapper: Mappers.CloudEndpointsPreBackupHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    requestBody: Parameters.parameters5,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const postBackupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postbackup",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PostBackupResponse,
            headersMapper: Mappers.CloudEndpointsPostBackupHeaders
        },
        201: {
            bodyMapper: Mappers.PostBackupResponse,
            headersMapper: Mappers.CloudEndpointsPostBackupHeaders
        },
        202: {
            bodyMapper: Mappers.PostBackupResponse,
            headersMapper: Mappers.CloudEndpointsPostBackupHeaders
        },
        204: {
            bodyMapper: Mappers.PostBackupResponse,
            headersMapper: Mappers.CloudEndpointsPostBackupHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    requestBody: Parameters.parameters5,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const preRestoreOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/prerestore",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    requestBody: Parameters.parameters6,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const restoreheartbeatOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/restoreheartbeat",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: Mappers.CloudEndpointsRestoreheartbeatHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const postRestoreOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/postrestore",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    requestBody: Parameters.parameters7,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const triggerChangeDetectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints/{cloudEndpointName}/triggerChangeDetection",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    requestBody: Parameters.parameters8,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.syncGroupName,
        Parameters.cloudEndpointName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=cloudEndpoints.js.map