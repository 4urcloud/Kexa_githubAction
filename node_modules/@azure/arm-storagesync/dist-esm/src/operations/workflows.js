/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Workflows operations. */
export class WorkflowsImpl {
    /**
     * Initialize a new instance of the class Workflows class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a Workflow List
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        const iter = this.listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, settings);
            }
        };
    }
    listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listByStorageSyncServicePagingPage_1() {
            let result;
            result = yield __await(this._listByStorageSyncService(resourceGroupName, storageSyncServiceName, options));
            yield yield __await(result.value || []);
        });
    }
    listByStorageSyncServicePagingAll(resourceGroupName, storageSyncServiceName, options) {
        return __asyncGenerator(this, arguments, function* listByStorageSyncServicePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByStorageSyncServicePagingPage(resourceGroupName, storageSyncServiceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a Workflow List
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    _listByStorageSyncService(resourceGroupName, storageSyncServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, options }, listByStorageSyncServiceOperationSpec);
    }
    /**
     * Get Workflows resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param workflowId workflow Id
     * @param options The options parameters.
     */
    get(resourceGroupName, storageSyncServiceName, workflowId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, workflowId, options }, getOperationSpec);
    }
    /**
     * Abort the given workflow.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param workflowId workflow Id
     * @param options The options parameters.
     */
    abort(resourceGroupName, storageSyncServiceName, workflowId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, storageSyncServiceName, workflowId, options }, abortOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByStorageSyncServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkflowArray,
            headersMapper: Mappers.WorkflowsListByStorageSyncServiceHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Workflow,
            headersMapper: Mappers.WorkflowsGetHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.workflowId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const abortOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/workflows/{workflowId}/abort",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: Mappers.WorkflowsAbortHeaders
        },
        default: {
            bodyMapper: Mappers.StorageSyncError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.storageSyncServiceName,
        Parameters.workflowId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=workflows.js.map