/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CheckNameAvailabilityParameters as CheckNameAvailabilityParametersMapper, StorageSyncServiceCreateParameters as StorageSyncServiceCreateParametersMapper, StorageSyncServiceUpdateParameters as StorageSyncServiceUpdateParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, SyncGroupCreateParameters as SyncGroupCreateParametersMapper, CloudEndpointCreateParameters as CloudEndpointCreateParametersMapper, BackupRequest as BackupRequestMapper, PreRestoreRequest as PreRestoreRequestMapper, PostRestoreRequest as PostRestoreRequestMapper, TriggerChangeDetectionParameters as TriggerChangeDetectionParametersMapper, ServerEndpointCreateParameters as ServerEndpointCreateParametersMapper, ServerEndpointUpdateParameters as ServerEndpointUpdateParametersMapper, RecallActionParameters as RecallActionParametersMapper, RegisteredServerCreateParameters as RegisteredServerCreateParametersMapper, TriggerRolloverRequest as TriggerRolloverRequestMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-09-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityParametersMapper
};
export const locationName = {
    parameterPath: "locationName",
    mapper: {
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: StorageSyncServiceCreateParametersMapper
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const storageSyncServiceName = {
    parameterPath: "storageSyncServiceName",
    mapper: {
        serializedName: "storageSyncServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: ["options", "parameters"],
    mapper: StorageSyncServiceUpdateParametersMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: "properties",
    mapper: PrivateEndpointConnectionMapper
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: SyncGroupCreateParametersMapper
};
export const syncGroupName = {
    parameterPath: "syncGroupName",
    mapper: {
        serializedName: "syncGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: CloudEndpointCreateParametersMapper
};
export const cloudEndpointName = {
    parameterPath: "cloudEndpointName",
    mapper: {
        serializedName: "cloudEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: BackupRequestMapper
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: PreRestoreRequestMapper
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: PostRestoreRequestMapper
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: TriggerChangeDetectionParametersMapper
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: ServerEndpointCreateParametersMapper
};
export const serverEndpointName = {
    parameterPath: "serverEndpointName",
    mapper: {
        serializedName: "serverEndpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters10 = {
    parameterPath: ["options", "parameters"],
    mapper: ServerEndpointUpdateParametersMapper
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: RecallActionParametersMapper
};
export const serverId = {
    parameterPath: "serverId",
    mapper: {
        serializedName: "serverId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters12 = {
    parameterPath: "parameters",
    mapper: RegisteredServerCreateParametersMapper
};
export const parameters13 = {
    parameterPath: "parameters",
    mapper: TriggerRolloverRequestMapper
};
export const workflowId = {
    parameterPath: "workflowId",
    mapper: {
        serializedName: "workflowId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map