import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Operations, StorageSyncServices, PrivateLinkResources, PrivateEndpointConnections, SyncGroups, CloudEndpoints, ServerEndpoints, RegisteredServers, Workflows, OperationStatusOperations } from "./operationsInterfaces";
import { MicrosoftStorageSyncOptionalParams, LocationOperationStatusOptionalParams, LocationOperationStatusResponse } from "./models";
export declare class MicrosoftStorageSync extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MicrosoftStorageSync class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MicrosoftStorageSyncOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Get Operation status
     * @param locationName The desired region to obtain information from.
     * @param operationId operation Id
     * @param options The options parameters.
     */
    locationOperationStatus(locationName: string, operationId: string, options?: LocationOperationStatusOptionalParams): Promise<LocationOperationStatusResponse>;
    operations: Operations;
    storageSyncServices: StorageSyncServices;
    privateLinkResources: PrivateLinkResources;
    privateEndpointConnections: PrivateEndpointConnections;
    syncGroups: SyncGroups;
    cloudEndpoints: CloudEndpoints;
    serverEndpoints: ServerEndpoints;
    registeredServers: RegisteredServers;
    workflows: Workflows;
    operationStatusOperations: OperationStatusOperations;
}
//# sourceMappingURL=microsoftStorageSync.d.ts.map