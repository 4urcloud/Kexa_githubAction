import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Backup request */
export declare interface BackupRequest {
    /** Azure File Share. */
    azureFileShare?: string;
}

/**
 * Defines values for ChangeDetectionMode. \
 * {@link KnownChangeDetectionMode} can be used interchangeably with ChangeDetectionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Recursive**
 */
export declare type ChangeDetectionMode = string;

/** Parameters for a check name availability request. */
export declare interface CheckNameAvailabilityParameters {
    /** The name to check for availability */
    name: string;
    /** The resource type. Must be set to Microsoft.StorageSync/storageSyncServices */
    type: "Microsoft.StorageSync/storageSyncServices";
}

/** The CheckNameAvailability operation response. */
export declare interface CheckNameAvailabilityResult {
    /**
     * Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nameAvailable?: boolean;
    /**
     * Gets the reason that a Storage Sync Service name could not be used. The Reason element is only returned if NameAvailable is false.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: NameAvailabilityReason;
    /**
     * Gets an error message explaining the Reason value in more detail.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Cloud Endpoint object. */
export declare interface CloudEndpoint extends ProxyResource {
    /** Storage Account Resource Id */
    storageAccountResourceId?: string;
    /** Azure file share name */
    azureFileShareName?: string;
    /** Storage Account Tenant Id */
    storageAccountTenantId?: string;
    /** Partnership Id */
    partnershipId?: string;
    /** Friendly Name */
    friendlyName?: string;
    /**
     * Backup Enabled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backupEnabled?: string;
    /** CloudEndpoint Provisioning State */
    provisioningState?: string;
    /** CloudEndpoint lastWorkflowId */
    lastWorkflowId?: string;
    /** Resource Last Operation Name */
    lastOperationName?: string;
    /**
     * Cloud endpoint change enumeration status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changeEnumerationStatus?: CloudEndpointChangeEnumerationStatus;
}

/** Array of CloudEndpoint */
export declare interface CloudEndpointArray {
    /** Collection of CloudEndpoint. */
    value?: CloudEndpoint[];
}

/** Cloud endpoint change enumeration activity object */
export declare interface CloudEndpointChangeEnumerationActivity {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Change enumeration operation state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationState?: CloudEndpointChangeEnumerationActivityState;
    /**
     * When non-zero, indicates an issue that is delaying change enumeration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusCode?: number;
    /**
     * Timestamp when change enumeration started
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedTimestamp?: Date;
    /**
     * Count of files processed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processedFilesCount?: number;
    /**
     * Count of directories processed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly processedDirectoriesCount?: number;
    /**
     * Total count of files enumerated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalFilesCount?: number;
    /**
     * Total count of directories enumerated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalDirectoriesCount?: number;
    /**
     * Total enumerated size in bytes
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalSizeBytes?: number;
    /**
     * Progress percentage for change enumeration run, excluding processing of deletes
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly progressPercent?: number;
    /**
     * Estimate of time remaining for the enumeration run
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minutesRemaining?: number;
    /**
     * Change enumeration total counts state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCountsState?: CloudEndpointChangeEnumerationTotalCountsState;
    /**
     * Progress percentage for processing deletes. This is done separately from the rest of the enumeration run
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deletesProgressPercent?: number;
}

/**
 * Defines values for CloudEndpointChangeEnumerationActivityState. \
 * {@link KnownCloudEndpointChangeEnumerationActivityState} can be used interchangeably with CloudEndpointChangeEnumerationActivityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InitialEnumerationInProgress** \
 * **EnumerationInProgress**
 */
export declare type CloudEndpointChangeEnumerationActivityState = string;

/** Cloud endpoint change enumeration status object */
export declare interface CloudEndpointChangeEnumerationStatus {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Status of last completed change enumeration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastEnumerationStatus?: CloudEndpointLastChangeEnumerationStatus;
    /**
     * Change enumeration activity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activity?: CloudEndpointChangeEnumerationActivity;
}

/**
 * Defines values for CloudEndpointChangeEnumerationTotalCountsState. \
 * {@link KnownCloudEndpointChangeEnumerationTotalCountsState} can be used interchangeably with CloudEndpointChangeEnumerationTotalCountsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Calculating** \
 * **Final**
 */
export declare type CloudEndpointChangeEnumerationTotalCountsState = string;

/** The parameters used when creating a cloud endpoint. */
export declare interface CloudEndpointCreateParameters extends ProxyResource {
    /** Storage Account Resource Id */
    storageAccountResourceId?: string;
    /** Azure file share name */
    azureFileShareName?: string;
    /** Storage Account Tenant Id */
    storageAccountTenantId?: string;
    /** Friendly Name */
    friendlyName?: string;
}

/** Cloud endpoint change enumeration status object */
export declare interface CloudEndpointLastChangeEnumerationStatus {
    /**
     * Timestamp when change enumeration started
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedTimestamp?: Date;
    /**
     * Timestamp when change enumeration completed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly completedTimestamp?: Date;
    /**
     * Count of files in the namespace
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly namespaceFilesCount?: number;
    /**
     * Count of directories in the namespace
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly namespaceDirectoriesCount?: number;
    /**
     * Namespace size in bytes
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly namespaceSizeBytes?: number;
    /**
     * Timestamp of when change enumeration is expected to run again
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextRunTimestamp?: Date;
}

/** Interface representing a CloudEndpoints. */
export declare interface CloudEndpoints {
    /**
     * Get a CloudEndpoint List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: CloudEndpointsListBySyncGroupOptionalParams): PagedAsyncIterableIterator<CloudEndpoint>;
    /**
     * Create a new CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: CloudEndpointCreateParameters, options?: CloudEndpointsCreateOptionalParams): Promise<PollerLike<PollOperationState<CloudEndpointsCreateResponse>, CloudEndpointsCreateResponse>>;
    /**
     * Create a new CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: CloudEndpointCreateParameters, options?: CloudEndpointsCreateOptionalParams): Promise<CloudEndpointsCreateResponse>;
    /**
     * Get a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: CloudEndpointsGetOptionalParams): Promise<CloudEndpointsGetResponse>;
    /**
     * Delete a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: CloudEndpointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<CloudEndpointsDeleteResponse>, CloudEndpointsDeleteResponse>>;
    /**
     * Delete a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: CloudEndpointsDeleteOptionalParams): Promise<CloudEndpointsDeleteResponse>;
    /**
     * Pre Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPreBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: BackupRequest, options?: CloudEndpointsPreBackupOptionalParams): Promise<PollerLike<PollOperationState<CloudEndpointsPreBackupResponse>, CloudEndpointsPreBackupResponse>>;
    /**
     * Pre Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPreBackupAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: BackupRequest, options?: CloudEndpointsPreBackupOptionalParams): Promise<CloudEndpointsPreBackupResponse>;
    /**
     * Post Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPostBackup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: BackupRequest, options?: CloudEndpointsPostBackupOptionalParams): Promise<PollerLike<PollOperationState<CloudEndpointsPostBackupResponse>, CloudEndpointsPostBackupResponse>>;
    /**
     * Post Backup a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param options The options parameters.
     */
    beginPostBackupAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: BackupRequest, options?: CloudEndpointsPostBackupOptionalParams): Promise<CloudEndpointsPostBackupResponse>;
    /**
     * Pre Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPreRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: PreRestoreRequest, options?: CloudEndpointsPreRestoreOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Pre Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPreRestoreAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: PreRestoreRequest, options?: CloudEndpointsPreRestoreOptionalParams): Promise<void>;
    /**
     * Restore Heartbeat a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param options The options parameters.
     */
    restoreheartbeat(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, options?: CloudEndpointsRestoreheartbeatOptionalParams): Promise<CloudEndpointsRestoreheartbeatResponse>;
    /**
     * Post Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPostRestore(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: PostRestoreRequest, options?: CloudEndpointsPostRestoreOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Post Restore a given CloudEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param options The options parameters.
     */
    beginPostRestoreAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: PostRestoreRequest, options?: CloudEndpointsPostRestoreOptionalParams): Promise<void>;
    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File
     * Sync Cloud Endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param options The options parameters.
     */
    beginTriggerChangeDetection(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: TriggerChangeDetectionParameters, options?: CloudEndpointsTriggerChangeDetectionOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File
     * Sync Cloud Endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param options The options parameters.
     */
    beginTriggerChangeDetectionAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, cloudEndpointName: string, parameters: TriggerChangeDetectionParameters, options?: CloudEndpointsTriggerChangeDetectionOptionalParams): Promise<void>;
}

/** Defines headers for CloudEndpoints_create operation. */
export declare interface CloudEndpointsCreateHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type CloudEndpointsCreateResponse = CloudEndpointsCreateHeaders & CloudEndpoint;

/** Defines headers for CloudEndpoints_delete operation. */
export declare interface CloudEndpointsDeleteHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type CloudEndpointsDeleteResponse = CloudEndpointsDeleteHeaders;

/** Defines headers for CloudEndpoints_get operation. */
export declare interface CloudEndpointsGetHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CloudEndpointsGetResponse = CloudEndpointsGetHeaders & CloudEndpoint;

/** Defines headers for CloudEndpoints_listBySyncGroup operation. */
export declare interface CloudEndpointsListBySyncGroupHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsListBySyncGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySyncGroup operation. */
export declare type CloudEndpointsListBySyncGroupResponse = CloudEndpointsListBySyncGroupHeaders & CloudEndpointArray;

/** Defines headers for CloudEndpoints_postBackup operation. */
export declare interface CloudEndpointsPostBackupHeaders {
    /** Operation Status Location URI */
    location?: string;
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsPostBackupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the postBackup operation. */
export declare type CloudEndpointsPostBackupResponse = CloudEndpointsPostBackupHeaders & PostBackupResponse;

/** Defines headers for CloudEndpoints_postRestore operation. */
export declare interface CloudEndpointsPostRestoreHeaders {
    /** Operation Status Location URI */
    location?: string;
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsPostRestoreOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for CloudEndpoints_preBackup operation. */
export declare interface CloudEndpointsPreBackupHeaders {
    /** Operation Status Location URI */
    location?: string;
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsPreBackupOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the preBackup operation. */
export declare type CloudEndpointsPreBackupResponse = CloudEndpointsPreBackupHeaders;

/** Defines headers for CloudEndpoints_preRestore operation. */
export declare interface CloudEndpointsPreRestoreHeaders {
    /** Operation Status Location URI */
    location?: string;
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsPreRestoreOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for CloudEndpoints_restoreheartbeat operation. */
export declare interface CloudEndpointsRestoreheartbeatHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsRestoreheartbeatOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the restoreheartbeat operation. */
export declare type CloudEndpointsRestoreheartbeatResponse = CloudEndpointsRestoreheartbeatHeaders;

/** Defines headers for CloudEndpoints_triggerChangeDetection operation. */
export declare interface CloudEndpointsTriggerChangeDetectionHeaders {
    /** Operation Status Location URI */
    location?: string;
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface CloudEndpointsTriggerChangeDetectionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Server endpoint cloud tiering status object. */
export declare interface CloudTieringCachePerformance {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Count of bytes that were served from the local server
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cacheHitBytes?: number;
    /**
     * Count of bytes that were served from the cloud
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cacheMissBytes?: number;
    /**
     * Percentage of total bytes (hit + miss) that were served from the local server
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cacheHitBytesPercent?: number;
}

/** Status of the date policy */
export declare interface CloudTieringDatePolicyStatus {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Most recent access time of tiered files
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tieredFilesMostRecentAccessTimestamp?: Date;
}

/** Server endpoint cloud tiering status object. */
export declare interface CloudTieringFilesNotTiering {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Last cloud tiering result (HResult)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalFileCount?: number;
    /**
     * Array of tiering errors
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errors?: FilesNotTieringError[];
}

/** Server endpoint cloud tiering status object. */
export declare interface CloudTieringSpaceSavings {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Volume size
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly volumeSizeBytes?: number;
    /**
     * Total size of content in the azure file share
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalSizeCloudBytes?: number;
    /**
     * Cached content size on the server
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cachedSizeBytes?: number;
    /**
     * Percentage of cached size over total size
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly spaceSavingsPercent?: number;
    /**
     * Count of bytes saved on the server
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly spaceSavingsBytes?: number;
}

/** Status of the volume free space policy */
export declare interface CloudTieringVolumeFreeSpacePolicyStatus {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * In the case where multiple server endpoints are present in a volume, an effective free space policy is applied.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly effectiveVolumeFreeSpacePolicy?: number;
    /**
     * Current volume free space percentage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentVolumeFreeSpacePercent?: number;
}

/**
 * Defines values for FeatureStatus. \
 * {@link KnownFeatureStatus} can be used interchangeably with FeatureStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **on** \
 * **off**
 */
export declare type FeatureStatus = string;

/** Files not tiering error object */
export declare interface FilesNotTieringError {
    /**
     * Error code (HResult)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: number;
    /**
     * Count of files with this error
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fileCount?: number;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for IncomingTrafficPolicy. \
 * {@link KnownIncomingTrafficPolicy} can be used interchangeably with IncomingTrafficPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllowAllTraffic** \
 * **AllowVirtualNetworksOnly**
 */
export declare type IncomingTrafficPolicy = string;

/**
 * Defines values for InitialDownloadPolicy. \
 * {@link KnownInitialDownloadPolicy} can be used interchangeably with InitialDownloadPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NamespaceOnly** \
 * **NamespaceThenModifiedFiles** \
 * **AvoidTieredFiles**
 */
export declare type InitialDownloadPolicy = string;

/**
 * Defines values for InitialUploadPolicy. \
 * {@link KnownInitialUploadPolicy} can be used interchangeably with InitialUploadPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServerAuthoritative** \
 * **Merge**
 */
export declare type InitialUploadPolicy = string;

/** Known values of {@link ChangeDetectionMode} that the service accepts. */
export declare enum KnownChangeDetectionMode {
    /** Default */
    Default = "Default",
    /** Recursive */
    Recursive = "Recursive"
}

/** Known values of {@link CloudEndpointChangeEnumerationActivityState} that the service accepts. */
export declare enum KnownCloudEndpointChangeEnumerationActivityState {
    /** InitialEnumerationInProgress */
    InitialEnumerationInProgress = "InitialEnumerationInProgress",
    /** EnumerationInProgress */
    EnumerationInProgress = "EnumerationInProgress"
}

/** Known values of {@link CloudEndpointChangeEnumerationTotalCountsState} that the service accepts. */
export declare enum KnownCloudEndpointChangeEnumerationTotalCountsState {
    /** Calculating */
    Calculating = "Calculating",
    /** Final */
    Final = "Final"
}

/** Known values of {@link FeatureStatus} that the service accepts. */
export declare enum KnownFeatureStatus {
    /** On */
    On = "on",
    /** Off */
    Off = "off"
}

/** Known values of {@link IncomingTrafficPolicy} that the service accepts. */
export declare enum KnownIncomingTrafficPolicy {
    /** AllowAllTraffic */
    AllowAllTraffic = "AllowAllTraffic",
    /** AllowVirtualNetworksOnly */
    AllowVirtualNetworksOnly = "AllowVirtualNetworksOnly"
}

/** Known values of {@link InitialDownloadPolicy} that the service accepts. */
export declare enum KnownInitialDownloadPolicy {
    /** NamespaceOnly */
    NamespaceOnly = "NamespaceOnly",
    /** NamespaceThenModifiedFiles */
    NamespaceThenModifiedFiles = "NamespaceThenModifiedFiles",
    /** AvoidTieredFiles */
    AvoidTieredFiles = "AvoidTieredFiles"
}

/** Known values of {@link InitialUploadPolicy} that the service accepts. */
export declare enum KnownInitialUploadPolicy {
    /** ServerAuthoritative */
    ServerAuthoritative = "ServerAuthoritative",
    /** Merge */
    Merge = "Merge"
}

/** Known values of {@link LocalCacheMode} that the service accepts. */
export declare enum KnownLocalCacheMode {
    /** DownloadNewAndModifiedFiles */
    DownloadNewAndModifiedFiles = "DownloadNewAndModifiedFiles",
    /** UpdateLocallyCachedFiles */
    UpdateLocallyCachedFiles = "UpdateLocallyCachedFiles"
}

/** Known values of {@link OperationDirection} that the service accepts. */
export declare enum KnownOperationDirection {
    /** Do */
    Do = "do",
    /** Undo */
    Undo = "undo",
    /** Cancel */
    Cancel = "cancel"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link ProgressType} that the service accepts. */
export declare enum KnownProgressType {
    /** None */
    None = "none",
    /** Initialize */
    Initialize = "initialize",
    /** Download */
    Download = "download",
    /** Upload */
    Upload = "upload",
    /** Recall */
    Recall = "recall"
}

/** Known values of {@link Reason} that the service accepts. */
export declare enum KnownReason {
    /** Registered */
    Registered = "Registered",
    /** Unregistered */
    Unregistered = "Unregistered",
    /** Warned */
    Warned = "Warned",
    /** Suspended */
    Suspended = "Suspended",
    /** Deleted */
    Deleted = "Deleted"
}

/** Known values of {@link RegisteredServerAgentVersionStatus} that the service accepts. */
export declare enum KnownRegisteredServerAgentVersionStatus {
    /** Ok */
    Ok = "Ok",
    /** NearExpiry */
    NearExpiry = "NearExpiry",
    /** Expired */
    Expired = "Expired",
    /** Blocked */
    Blocked = "Blocked"
}

/** Known values of {@link ServerEndpointHealthState} that the service accepts. */
export declare enum KnownServerEndpointHealthState {
    /** Unavailable */
    Unavailable = "Unavailable",
    /** Healthy */
    Healthy = "Healthy",
    /** Error */
    Error = "Error"
}

/** Known values of {@link ServerEndpointOfflineDataTransferState} that the service accepts. */
export declare enum KnownServerEndpointOfflineDataTransferState {
    /** InProgress */
    InProgress = "InProgress",
    /** Stopping */
    Stopping = "Stopping",
    /** NotRunning */
    NotRunning = "NotRunning",
    /** Complete */
    Complete = "Complete"
}

/** Known values of {@link ServerEndpointSyncActivityState} that the service accepts. */
export declare enum KnownServerEndpointSyncActivityState {
    /** Upload */
    Upload = "Upload",
    /** Download */
    Download = "Download",
    /** UploadAndDownload */
    UploadAndDownload = "UploadAndDownload"
}

/** Known values of {@link ServerEndpointSyncMode} that the service accepts. */
export declare enum KnownServerEndpointSyncMode {
    /** Regular */
    Regular = "Regular",
    /** NamespaceDownload */
    NamespaceDownload = "NamespaceDownload",
    /** InitialUpload */
    InitialUpload = "InitialUpload",
    /** SnapshotUpload */
    SnapshotUpload = "SnapshotUpload",
    /** InitialFullDownload */
    InitialFullDownload = "InitialFullDownload"
}

/** Known values of {@link WorkflowStatus} that the service accepts. */
export declare enum KnownWorkflowStatus {
    /** Active */
    Active = "active",
    /** Expired */
    Expired = "expired",
    /** Succeeded */
    Succeeded = "succeeded",
    /** Aborted */
    Aborted = "aborted",
    /** Failed */
    Failed = "failed"
}

/**
 * Defines values for LocalCacheMode. \
 * {@link KnownLocalCacheMode} can be used interchangeably with LocalCacheMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DownloadNewAndModifiedFiles** \
 * **UpdateLocallyCachedFiles**
 */
export declare type LocalCacheMode = string;

/** Operation status object */
export declare interface LocationOperationStatus {
    /**
     * Operation resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Operation Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Operation status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * Start time of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * End time of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * Error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: StorageSyncApiError;
    /**
     * Percent complete.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
}

/** Optional parameters. */
export declare interface LocationOperationStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the locationOperationStatus operation. */
export declare type LocationOperationStatusResponse = MicrosoftStorageSyncLocationOperationStatusHeaders & LocationOperationStatus;

export declare class MicrosoftStorageSync extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MicrosoftStorageSync class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MicrosoftStorageSyncOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Get Operation status
     * @param locationName The desired region to obtain information from.
     * @param operationId operation Id
     * @param options The options parameters.
     */
    locationOperationStatus(locationName: string, operationId: string, options?: LocationOperationStatusOptionalParams): Promise<LocationOperationStatusResponse>;
    operations: Operations;
    storageSyncServices: StorageSyncServices;
    privateLinkResources: PrivateLinkResources;
    privateEndpointConnections: PrivateEndpointConnections;
    syncGroups: SyncGroups;
    cloudEndpoints: CloudEndpoints;
    serverEndpoints: ServerEndpoints;
    registeredServers: RegisteredServers;
    workflows: Workflows;
    operationStatusOperations: OperationStatusOperations;
}

/** Defines headers for MicrosoftStorageSync_locationOperationStatus operation. */
export declare interface MicrosoftStorageSyncLocationOperationStatusHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface MicrosoftStorageSyncOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Defines values for NameAvailabilityReason. */
export declare type NameAvailabilityReason = "Invalid" | "AlreadyExists";

/**
 * Defines values for OperationDirection. \
 * {@link KnownOperationDirection} can be used interchangeably with OperationDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **do** \
 * **undo** \
 * **cancel**
 */
export declare type OperationDirection = string;

/** The operation supported by storage sync. */
export declare interface OperationDisplayInfo {
    /** The description of the operation. */
    description?: string;
    /** The action that users can perform, based on their permission level. */
    operation?: string;
    /** Service provider: Microsoft StorageSync. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
}

/** Operation Display Resource object. */
export declare interface OperationDisplayResource {
    /** Operation Display Resource Provider. */
    provider?: string;
    /** Operation Display Resource. */
    resource?: string;
    /** Operation Display Resource Operation. */
    operation?: string;
    /** Operation Display Resource Description. */
    description?: string;
}

/** The operation supported by storage sync. */
export declare interface OperationEntity {
    /** Operation name: {provider}/{resource}/{operation}. */
    name?: string;
    /** The operation supported by storage sync. */
    display?: OperationDisplayInfo;
    /** The origin. */
    origin?: string;
    /** Properties of the operations resource. */
    properties?: OperationProperties;
}

/** The list of storage sync operations. */
export declare interface OperationEntityListResult {
    /** The link used to get the next page of operations. */
    nextLink?: string;
    /** The list of operations. */
    value?: OperationEntity[];
}

/** Properties of the operations resource. */
export declare interface OperationProperties {
    /** Service specification for the operations resource. */
    serviceSpecification?: OperationResourceServiceSpecification;
}

/** Operation Display Resource object. */
export declare interface OperationResourceMetricSpecification {
    /** Name of the metric. */
    name?: string;
    /** Display name for the metric. */
    displayName?: string;
    /** Display description for the metric. */
    displayDescription?: string;
    /** Unit for the metric. */
    unit?: string;
    /** Aggregation type for the metric. */
    aggregationType?: string;
    /** Fill gaps in the metric with zero. */
    fillGapWithZero?: boolean;
    /** Dimensions for the metric specification. */
    dimensions?: OperationResourceMetricSpecificationDimension[];
}

/** OperationResourceMetricSpecificationDimension object. */
export declare interface OperationResourceMetricSpecificationDimension {
    /** Name of the dimension. */
    name?: string;
    /** Display name of the dimensions. */
    displayName?: string;
    /** Indicates metric should be exported for Shoebox. */
    toBeExportedForShoebox?: boolean;
}

/** Service specification. */
export declare interface OperationResourceServiceSpecification {
    /** List of metric specifications. */
    metricSpecifications?: OperationResourceMetricSpecification[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Storage Sync Rest API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationEntity>;
}

/** Defines headers for Operations_list operation. */
export declare interface OperationsListHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Defines headers for Operations_listNext operation. */
export declare interface OperationsListNextHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationsListNextHeaders & OperationEntityListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationsListHeaders & OperationEntityListResult;

/** Operation status object */
export declare interface OperationStatus {
    /**
     * Operation Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Operation status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * Start time of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * End time of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * Error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: StorageSyncApiError;
}

/** Defines headers for OperationStatus_get operation. */
export declare interface OperationStatusGetHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface OperationStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationStatusGetResponse = OperationStatusGetHeaders & OperationStatus;

/** Interface representing a OperationStatusOperations. */
export declare interface OperationStatusOperations {
    /**
     * Get Operation status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param locationName The desired region to obtain information from.
     * @param workflowId workflow Id
     * @param operationId operation Id
     * @param options The options parameters.
     */
    get(resourceGroupName: string, locationName: string, workflowId: string, operationId: string, options?: OperationStatusGetOptionalParams): Promise<OperationStatusGetResponse>;
}

/** Post Backup Response */
export declare interface PostBackupResponse {
    /**
     * cloud endpoint Name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudEndpointName?: string;
}

/** Post Restore Request */
export declare interface PostRestoreRequest {
    /** Post Restore partition. */
    partition?: string;
    /** Post Restore replica group. */
    replicaGroup?: string;
    /** Post Restore request id. */
    requestId?: string;
    /** Post Restore Azure file share uri. */
    azureFileShareUri?: string;
    /** Post Restore Azure status. */
    status?: string;
    /** Post Restore Azure source azure file share uri. */
    sourceAzureFileShareUri?: string;
    /** Post Restore Azure failed file list. */
    failedFileList?: string;
    /** Post Restore restore file spec array. */
    restoreFileSpec?: RestoreFileSpec[];
}

/** Pre Restore request object. */
export declare interface PreRestoreRequest {
    /** Pre Restore partition. */
    partition?: string;
    /** Pre Restore replica group. */
    replicaGroup?: string;
    /** Pre Restore request id. */
    requestId?: string;
    /** Pre Restore Azure file share uri. */
    azureFileShareUri?: string;
    /** Pre Restore Azure status. */
    status?: string;
    /** Pre Restore Azure source azure file share uri. */
    sourceAzureFileShareUri?: string;
    /** Pre Restore backup metadata property bag. */
    backupMetadataPropertyBag?: string;
    /** Pre Restore restore file spec array. */
    restoreFileSpec?: RestoreFileSpec[];
    /** Pre Restore pause wait for sync drain time period in seconds. */
    pauseWaitForSyncDrainTimePeriodInSeconds?: number;
}

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Get a PrivateEndpointConnection List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: PrivateEndpointConnectionsListByStorageSyncServiceOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets the specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsCreateResponse>, PrivateEndpointConnectionsCreateResponse>>;
    /**
     * Update the state of specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param properties The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, storageSyncServiceName: string, privateEndpointConnectionName: string, properties: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<PrivateEndpointConnectionsCreateResponse>;
    /**
     * Deletes the specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, storageSyncServiceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified private endpoint connection associated with the storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, storageSyncServiceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Defines headers for PrivateEndpointConnections_create operation. */
export declare interface PrivateEndpointConnectionsCreateHeaders {
    /** Operation Status Location URI */
    azureAsyncOperation?: string;
    /** Operation Status Location URI */
    location?: string;
    /** Retry After */
    retryAfter?: string;
    /** Request id */
    xMsRequestId?: string;
    /** correlation request id */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type PrivateEndpointConnectionsCreateResponse = PrivateEndpointConnection;

/** Defines headers for PrivateEndpointConnections_delete operation. */
export declare interface PrivateEndpointConnectionsDeleteHeaders {
    /** Operation Status Location URI */
    azureAsyncOperation?: string;
    /** Operation Status Location URI */
    location?: string;
    /** Retry After */
    retryAfter?: string;
    /** Request id */
    xMsRequestId?: string;
    /** correlation request id */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Defines headers for PrivateEndpointConnections_listByStorageSyncService operation. */
export declare interface PrivateEndpointConnectionsListByStorageSyncServiceHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByStorageSyncServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByStorageSyncService operation. */
export declare type PrivateEndpointConnectionsListByStorageSyncServiceResponse = PrivateEndpointConnectionsListByStorageSyncServiceHeaders & PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends Resource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a storage sync service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName The name of the storage sync service name within the specified
     *                               resource group.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: PrivateLinkResourcesListByStorageSyncServiceOptionalParams): Promise<PrivateLinkResourcesListByStorageSyncServiceResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByStorageSyncServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByStorageSyncService operation. */
export declare type PrivateLinkResourcesListByStorageSyncServiceResponse = PrivateLinkResourceListResult;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/**
 * Defines values for ProgressType. \
 * {@link KnownProgressType} can be used interchangeably with ProgressType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **initialize** \
 * **download** \
 * **upload** \
 * **recall**
 */
export declare type ProgressType = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Registered** \
 * **Unregistered** \
 * **Warned** \
 * **Suspended** \
 * **Deleted**
 */
export declare type Reason = string;

/** The parameters used when calling recall action on server endpoint. */
export declare interface RecallActionParameters {
    /** Pattern of the files. */
    pattern?: string;
    /** Recall path. */
    recallPath?: string;
}

/** Registered Server resource. */
export declare interface RegisteredServer extends ProxyResource {
    /** Registered Server Certificate */
    serverCertificate?: string;
    /** Registered Server Agent Version */
    agentVersion?: string;
    /**
     * Registered Server Agent Version Status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly agentVersionStatus?: RegisteredServerAgentVersionStatus;
    /**
     * Registered Server Agent Version Expiration Date
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly agentVersionExpirationDate?: Date;
    /** Registered Server OS Version */
    serverOSVersion?: string;
    /** Registered Server Management Error Code */
    serverManagementErrorCode?: number;
    /** Registered Server last heart beat */
    lastHeartBeat?: string;
    /** Registered Server Provisioning State */
    provisioningState?: string;
    /** Registered Server serverRole */
    serverRole?: string;
    /** Registered Server clusterId */
    clusterId?: string;
    /** Registered Server clusterName */
    clusterName?: string;
    /** Registered Server serverId */
    serverId?: string;
    /** Registered Server storageSyncServiceUid */
    storageSyncServiceUid?: string;
    /** Registered Server lastWorkflowId */
    lastWorkflowId?: string;
    /** Resource Last Operation Name */
    lastOperationName?: string;
    /** Resource discoveryEndpointUri */
    discoveryEndpointUri?: string;
    /** Resource Location */
    resourceLocation?: string;
    /** Service Location */
    serviceLocation?: string;
    /** Friendly Name */
    friendlyName?: string;
    /** Management Endpoint Uri */
    managementEndpointUri?: string;
    /** Telemetry Endpoint Uri */
    monitoringEndpointUri?: string;
    /** Monitoring Configuration */
    monitoringConfiguration?: string;
    /**
     * Server name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serverName?: string;
}

/**
 * Defines values for RegisteredServerAgentVersionStatus. \
 * {@link KnownRegisteredServerAgentVersionStatus} can be used interchangeably with RegisteredServerAgentVersionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ok** \
 * **NearExpiry** \
 * **Expired** \
 * **Blocked**
 */
export declare type RegisteredServerAgentVersionStatus = string;

/** Array of RegisteredServer */
export declare interface RegisteredServerArray {
    /** Collection of Registered Server. */
    value?: RegisteredServer[];
}

/** The parameters used when creating a registered server. */
export declare interface RegisteredServerCreateParameters extends ProxyResource {
    /** Registered Server Certificate */
    serverCertificate?: string;
    /** Registered Server Agent Version */
    agentVersion?: string;
    /** Registered Server OS Version */
    serverOSVersion?: string;
    /** Registered Server last heart beat */
    lastHeartBeat?: string;
    /** Registered Server serverRole */
    serverRole?: string;
    /** Registered Server clusterId */
    clusterId?: string;
    /** Registered Server clusterName */
    clusterName?: string;
    /** Registered Server serverId */
    serverId?: string;
    /** Friendly Name */
    friendlyName?: string;
}

/** Interface representing a RegisteredServers. */
export declare interface RegisteredServers {
    /**
     * Get a given registered server list.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: RegisteredServersListByStorageSyncServiceOptionalParams): PagedAsyncIterableIterator<RegisteredServer>;
    /**
     * Get a given registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: RegisteredServersGetOptionalParams): Promise<RegisteredServersGetResponse>;
    /**
     * Add a new registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: RegisteredServerCreateParameters, options?: RegisteredServersCreateOptionalParams): Promise<PollerLike<PollOperationState<RegisteredServersCreateResponse>, RegisteredServersCreateResponse>>;
    /**
     * Add a new registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: RegisteredServerCreateParameters, options?: RegisteredServersCreateOptionalParams): Promise<RegisteredServersCreateResponse>;
    /**
     * Delete the given registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: RegisteredServersDeleteOptionalParams): Promise<PollerLike<PollOperationState<RegisteredServersDeleteResponse>, RegisteredServersDeleteResponse>>;
    /**
     * Delete the given registered server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, storageSyncServiceName: string, serverId: string, options?: RegisteredServersDeleteOptionalParams): Promise<RegisteredServersDeleteResponse>;
    /**
     * Triggers Server certificate rollover.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param parameters Body of Trigger Rollover request.
     * @param options The options parameters.
     */
    beginTriggerRollover(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: TriggerRolloverRequest, options?: RegisteredServersTriggerRolloverOptionalParams): Promise<PollerLike<PollOperationState<RegisteredServersTriggerRolloverResponse>, RegisteredServersTriggerRolloverResponse>>;
    /**
     * Triggers Server certificate rollover.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param parameters Body of Trigger Rollover request.
     * @param options The options parameters.
     */
    beginTriggerRolloverAndWait(resourceGroupName: string, storageSyncServiceName: string, serverId: string, parameters: TriggerRolloverRequest, options?: RegisteredServersTriggerRolloverOptionalParams): Promise<RegisteredServersTriggerRolloverResponse>;
}

/** Defines headers for RegisteredServers_create operation. */
export declare interface RegisteredServersCreateHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface RegisteredServersCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type RegisteredServersCreateResponse = RegisteredServersCreateHeaders & RegisteredServer;

/** Defines headers for RegisteredServers_delete operation. */
export declare interface RegisteredServersDeleteHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface RegisteredServersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type RegisteredServersDeleteResponse = RegisteredServersDeleteHeaders;

/** Defines headers for RegisteredServers_get operation. */
export declare interface RegisteredServersGetHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface RegisteredServersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RegisteredServersGetResponse = RegisteredServersGetHeaders & RegisteredServer;

/** Defines headers for RegisteredServers_listByStorageSyncService operation. */
export declare interface RegisteredServersListByStorageSyncServiceHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface RegisteredServersListByStorageSyncServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByStorageSyncService operation. */
export declare type RegisteredServersListByStorageSyncServiceResponse = RegisteredServersListByStorageSyncServiceHeaders & RegisteredServerArray;

/** Defines headers for RegisteredServers_triggerRollover operation. */
export declare interface RegisteredServersTriggerRolloverHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface RegisteredServersTriggerRolloverOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the triggerRollover operation. */
export declare type RegisteredServersTriggerRolloverResponse = RegisteredServersTriggerRolloverHeaders;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Resource Move Info. */
export declare interface ResourcesMoveInfo {
    /** Target resource group. */
    targetResourceGroup?: string;
    /** Collection of Resources. */
    resources?: string[];
}

/** Restore file spec. */
export declare interface RestoreFileSpec {
    /** Restore file spec path */
    path?: string;
    /** Restore file spec isdir */
    isdir?: boolean;
}

/** Server Endpoint object. */
export declare interface ServerEndpoint extends ProxyResource {
    /** Server Local path. */
    serverLocalPath?: string;
    /** Cloud Tiering. */
    cloudTiering?: FeatureStatus;
    /** Level of free space to be maintained by Cloud Tiering if it is enabled. */
    volumeFreeSpacePercent?: number;
    /** Tier files older than days. */
    tierFilesOlderThanDays?: number;
    /** Friendly Name */
    friendlyName?: string;
    /** Server Resource Id. */
    serverResourceId?: string;
    /**
     * ServerEndpoint Provisioning State
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * ServerEndpoint lastWorkflowId
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastWorkflowId?: string;
    /**
     * Resource Last Operation Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastOperationName?: string;
    /**
     * Server Endpoint sync status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly syncStatus?: ServerEndpointSyncStatus;
    /** Offline data transfer */
    offlineDataTransfer?: FeatureStatus;
    /**
     * Offline data transfer storage account resource ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly offlineDataTransferStorageAccountResourceId?: string;
    /**
     * Offline data transfer storage account tenant ID
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly offlineDataTransferStorageAccountTenantId?: string;
    /** Offline data transfer share name */
    offlineDataTransferShareName?: string;
    /**
     * Cloud tiering status. Only populated if cloud tiering is enabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudTieringStatus?: ServerEndpointCloudTieringStatus;
    /**
     * Recall status. Only populated if cloud tiering is enabled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recallStatus?: ServerEndpointRecallStatus;
    /** Policy for how namespace and files are recalled during FastDr. */
    initialDownloadPolicy?: InitialDownloadPolicy;
    /** Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access. */
    localCacheMode?: LocalCacheMode;
    /** Policy for how the initial upload sync session is performed. */
    initialUploadPolicy?: InitialUploadPolicy;
    /**
     * Server name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serverName?: string;
}

/** Array of ServerEndpoint */
export declare interface ServerEndpointArray {
    /** Collection of ServerEndpoint. */
    value?: ServerEndpoint[];
}

/** Background data download activity object */
export declare interface ServerEndpointBackgroundDataDownloadActivity {
    /**
     * Timestamp when properties were updated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
    /**
     * Timestamp when the operation started
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startedTimestamp?: Date;
    /**
     * Progress percentage
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentProgress?: number;
    /**
     * Running count of bytes downloaded
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly downloadedBytes?: number;
}

/** Server endpoint cloud tiering status object. */
export declare interface ServerEndpointCloudTieringStatus {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Cloud tiering health state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly health?: ServerEndpointHealthState;
    /**
     * The last updated timestamp of health state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly healthLastUpdatedTimestamp?: Date;
    /**
     * Last cloud tiering result (HResult)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastCloudTieringResult?: number;
    /**
     * Last cloud tiering success timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSuccessTimestamp?: Date;
    /**
     * Information regarding how much local space cloud tiering is saving.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly spaceSavings?: CloudTieringSpaceSavings;
    /**
     * Information regarding how well the local cache on the server is performing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cachePerformance?: CloudTieringCachePerformance;
    /**
     * Information regarding files that failed to be tiered
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesNotTiering?: CloudTieringFilesNotTiering;
    /**
     * Status of the volume free space policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly volumeFreeSpacePolicyStatus?: CloudTieringVolumeFreeSpacePolicyStatus;
    /**
     * Status of the date policy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly datePolicyStatus?: CloudTieringDatePolicyStatus;
}

/** The parameters used when creating a server endpoint. */
export declare interface ServerEndpointCreateParameters extends ProxyResource {
    /** Server Local path. */
    serverLocalPath?: string;
    /** Cloud Tiering. */
    cloudTiering?: FeatureStatus;
    /** Level of free space to be maintained by Cloud Tiering if it is enabled. */
    volumeFreeSpacePercent?: number;
    /** Tier files older than days. */
    tierFilesOlderThanDays?: number;
    /** Friendly Name */
    friendlyName?: string;
    /** Server Resource Id. */
    serverResourceId?: string;
    /** Offline data transfer */
    offlineDataTransfer?: FeatureStatus;
    /** Offline data transfer share name */
    offlineDataTransferShareName?: string;
    /** Policy for how namespace and files are recalled during FastDr. */
    initialDownloadPolicy?: InitialDownloadPolicy;
    /** Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access. */
    localCacheMode?: LocalCacheMode;
    /** Policy for how the initial upload sync session is performed. */
    initialUploadPolicy?: InitialUploadPolicy;
}

/** Files not syncing error object */
export declare interface ServerEndpointFilesNotSyncingError {
    /**
     * Error code (HResult)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: number;
    /**
     * Count of persistent files not syncing with the specified error code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly persistentCount?: number;
    /**
     * Count of transient files not syncing with the specified error code
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transientCount?: number;
}

/**
 * Defines values for ServerEndpointHealthState. \
 * {@link KnownServerEndpointHealthState} can be used interchangeably with ServerEndpointHealthState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unavailable** \
 * **Healthy** \
 * **Error**
 */
export declare type ServerEndpointHealthState = string;

/**
 * Defines values for ServerEndpointOfflineDataTransferState. \
 * {@link KnownServerEndpointOfflineDataTransferState} can be used interchangeably with ServerEndpointOfflineDataTransferState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Stopping** \
 * **NotRunning** \
 * **Complete**
 */
export declare type ServerEndpointOfflineDataTransferState = string;

/** Server endpoint recall error object */
export declare interface ServerEndpointRecallError {
    /**
     * Error code (HResult)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: number;
    /**
     * Count of occurences of the error
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly count?: number;
}

/** Server endpoint recall status object. */
export declare interface ServerEndpointRecallStatus {
    /**
     * Last updated timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Total count of recall errors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalRecallErrorsCount?: number;
    /**
     * Array of recall errors
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recallErrors?: ServerEndpointRecallError[];
}

/** Interface representing a ServerEndpoints. */
export declare interface ServerEndpoints {
    /**
     * Get a ServerEndpoint list.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    listBySyncGroup(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: ServerEndpointsListBySyncGroupOptionalParams): PagedAsyncIterableIterator<ServerEndpoint>;
    /**
     * Create a new ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: ServerEndpointCreateParameters, options?: ServerEndpointsCreateOptionalParams): Promise<PollerLike<PollOperationState<ServerEndpointsCreateResponse>, ServerEndpointsCreateResponse>>;
    /**
     * Create a new ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: ServerEndpointCreateParameters, options?: ServerEndpointsCreateOptionalParams): Promise<ServerEndpointsCreateResponse>;
    /**
     * Patch a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: ServerEndpointsUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServerEndpointsUpdateResponse>, ServerEndpointsUpdateResponse>>;
    /**
     * Patch a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: ServerEndpointsUpdateOptionalParams): Promise<ServerEndpointsUpdateResponse>;
    /**
     * Get a ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: ServerEndpointsGetOptionalParams): Promise<ServerEndpointsGetResponse>;
    /**
     * Delete a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: ServerEndpointsDeleteOptionalParams): Promise<PollerLike<PollOperationState<ServerEndpointsDeleteResponse>, ServerEndpointsDeleteResponse>>;
    /**
     * Delete a given ServerEndpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, options?: ServerEndpointsDeleteOptionalParams): Promise<ServerEndpointsDeleteResponse>;
    /**
     * Recall a server endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param options The options parameters.
     */
    beginRecallAction(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: RecallActionParameters, options?: ServerEndpointsRecallActionOptionalParams): Promise<PollerLike<PollOperationState<ServerEndpointsRecallActionResponse>, ServerEndpointsRecallActionResponse>>;
    /**
     * Recall a server endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param options The options parameters.
     */
    beginRecallActionAndWait(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, serverEndpointName: string, parameters: RecallActionParameters, options?: ServerEndpointsRecallActionOptionalParams): Promise<ServerEndpointsRecallActionResponse>;
}

/** Defines headers for ServerEndpoints_create operation. */
export declare interface ServerEndpointsCreateHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface ServerEndpointsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ServerEndpointsCreateResponse = ServerEndpointsCreateHeaders & ServerEndpoint;

/** Defines headers for ServerEndpoints_delete operation. */
export declare interface ServerEndpointsDeleteHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface ServerEndpointsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type ServerEndpointsDeleteResponse = ServerEndpointsDeleteHeaders;

/** Defines headers for ServerEndpoints_get operation. */
export declare interface ServerEndpointsGetHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface ServerEndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServerEndpointsGetResponse = ServerEndpointsGetHeaders & ServerEndpoint;

/** Defines headers for ServerEndpoints_listBySyncGroup operation. */
export declare interface ServerEndpointsListBySyncGroupHeaders {
    /** Operation Status Location URI */
    location?: string;
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface ServerEndpointsListBySyncGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySyncGroup operation. */
export declare type ServerEndpointsListBySyncGroupResponse = ServerEndpointsListBySyncGroupHeaders & ServerEndpointArray;

/** Defines headers for ServerEndpoints_recallAction operation. */
export declare interface ServerEndpointsRecallActionHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface ServerEndpointsRecallActionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the recallAction operation. */
export declare type ServerEndpointsRecallActionResponse = ServerEndpointsRecallActionHeaders;

/** Defines headers for ServerEndpoints_update operation. */
export declare interface ServerEndpointsUpdateHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface ServerEndpointsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Any of the properties applicable in PUT request. */
    parameters?: ServerEndpointUpdateParameters;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ServerEndpointsUpdateResponse = ServerEndpointsUpdateHeaders & ServerEndpoint;

/**
 * Defines values for ServerEndpointSyncActivityState. \
 * {@link KnownServerEndpointSyncActivityState} can be used interchangeably with ServerEndpointSyncActivityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Upload** \
 * **Download** \
 * **UploadAndDownload**
 */
export declare type ServerEndpointSyncActivityState = string;

/** Sync Session status object. */
export declare interface ServerEndpointSyncActivityStatus {
    /**
     * Timestamp when properties were updated
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
    /**
     * Per item error count
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly perItemErrorCount?: number;
    /**
     * Applied item count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appliedItemCount?: number;
    /**
     * Total item count (if available)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalItemCount?: number;
    /**
     * Applied bytes
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appliedBytes?: number;
    /**
     * Total bytes (if available)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalBytes?: number;
    /**
     * Sync mode
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly syncMode?: ServerEndpointSyncMode;
    /**
     * Session minutes remaining (if available)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sessionMinutesRemaining?: number;
}

/**
 * Defines values for ServerEndpointSyncMode. \
 * {@link KnownServerEndpointSyncMode} can be used interchangeably with ServerEndpointSyncMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Regular** \
 * **NamespaceDownload** \
 * **InitialUpload** \
 * **SnapshotUpload** \
 * **InitialFullDownload**
 */
export declare type ServerEndpointSyncMode = string;

/** Sync Session status object. */
export declare interface ServerEndpointSyncSessionStatus {
    /**
     * Last sync result (HResult)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSyncResult?: number;
    /**
     * Last sync timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSyncTimestamp?: Date;
    /**
     * Last sync success timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSyncSuccessTimestamp?: Date;
    /**
     * Last sync per item error count.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSyncPerItemErrorCount?: number;
    /**
     * Count of persistent files not syncing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly persistentFilesNotSyncingCount?: number;
    /**
     * Count of transient files not syncing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transientFilesNotSyncingCount?: number;
    /**
     * Array of per-item errors coming from the last sync session.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly filesNotSyncingErrors?: ServerEndpointFilesNotSyncingError[];
    /**
     * Sync mode
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSyncMode?: ServerEndpointSyncMode;
}

/** Server Endpoint sync status */
export declare interface ServerEndpointSyncStatus {
    /**
     * Download Health Status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly downloadHealth?: ServerEndpointHealthState;
    /**
     * Upload Health Status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uploadHealth?: ServerEndpointHealthState;
    /**
     * Combined Health Status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly combinedHealth?: ServerEndpointHealthState;
    /**
     * Sync activity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly syncActivity?: ServerEndpointSyncActivityState;
    /**
     * Total count of persistent files not syncing (combined upload + download).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalPersistentFilesNotSyncingCount?: number;
    /**
     * Last Updated Timestamp
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimestamp?: Date;
    /**
     * Upload Status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uploadStatus?: ServerEndpointSyncSessionStatus;
    /**
     * Download Status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly downloadStatus?: ServerEndpointSyncSessionStatus;
    /**
     * Upload sync activity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uploadActivity?: ServerEndpointSyncActivityStatus;
    /**
     * Download sync activity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly downloadActivity?: ServerEndpointSyncActivityStatus;
    /**
     * Offline Data Transfer State
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly offlineDataTransferStatus?: ServerEndpointOfflineDataTransferState;
    /**
     * Background data download activity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backgroundDataDownloadActivity?: ServerEndpointBackgroundDataDownloadActivity;
}

/** Parameters for updating an Server Endpoint. */
export declare interface ServerEndpointUpdateParameters {
    /** Cloud Tiering. */
    cloudTiering?: FeatureStatus;
    /** Level of free space to be maintained by Cloud Tiering if it is enabled. */
    volumeFreeSpacePercent?: number;
    /** Tier files older than days. */
    tierFilesOlderThanDays?: number;
    /** Offline data transfer */
    offlineDataTransfer?: FeatureStatus;
    /** Offline data transfer share name */
    offlineDataTransferShareName?: string;
    /** Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access. */
    localCacheMode?: LocalCacheMode;
}

/** Error type */
export declare interface StorageSyncApiError {
    /** Error code of the given entry. */
    code?: string;
    /** Error message of the given entry. */
    message?: string;
    /** Target of the given error entry. */
    target?: string;
    /** Error details of the given entry. */
    details?: StorageSyncErrorDetails;
    /** Inner error details of the given entry. */
    innerError?: StorageSyncInnerErrorDetails;
}

/** Error type */
export declare interface StorageSyncError {
    /** Error details of the given entry. */
    error?: StorageSyncApiError;
    /** Error details of the given entry. */
    innererror?: StorageSyncApiError;
}

/** Error Details object. */
export declare interface StorageSyncErrorDetails {
    /** Error code of the given entry. */
    code?: string;
    /** Error message of the given entry. */
    message?: string;
    /** Target of the given entry. */
    target?: string;
    /** Request URI of the given entry. */
    requestUri?: string;
    /** Exception type of the given entry. */
    exceptionType?: string;
    /** HTTP method of the given entry. */
    httpMethod?: string;
    /** Hashed message of the given entry. */
    hashedMessage?: string;
    /** HTTP error code of the given entry. */
    httpErrorCode?: string;
}

/** Error Details object. */
export declare interface StorageSyncInnerErrorDetails {
    /** Call stack of the error. */
    callStack?: string;
    /** Error message of the error. */
    message?: string;
    /** Exception of the inner error. */
    innerException?: string;
    /** Call stack of the inner error. */
    innerExceptionCallStack?: string;
}

/** Storage Sync Service object. */
export declare interface StorageSyncService extends TrackedResource {
    /** Incoming Traffic Policy */
    incomingTrafficPolicy?: IncomingTrafficPolicy;
    /**
     * Storage Sync service status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageSyncServiceStatus?: number;
    /**
     * Storage Sync service Uid
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageSyncServiceUid?: string;
    /**
     * StorageSyncService Provisioning State
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * StorageSyncService lastWorkflowId
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastWorkflowId?: string;
    /**
     * Resource Last Operation Name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastOperationName?: string;
    /**
     * List of private endpoint connection associated with the specified storage sync service
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** Array of StorageSyncServices */
export declare interface StorageSyncServiceArray {
    /** Collection of StorageSyncServices. */
    value?: StorageSyncService[];
}

/** The parameters used when creating a storage sync service. */
export declare interface StorageSyncServiceCreateParameters {
    /** Required. Gets or sets the location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo region is specified on update, the request will succeed. */
    location: string;
    /** Gets or sets a list of key value pairs that describe the resource. These tags can be used for viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no greater than 128 characters and a value with a length no greater than 256 characters. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Incoming Traffic Policy */
    incomingTrafficPolicy?: IncomingTrafficPolicy;
}

/** Interface representing a StorageSyncServices. */
export declare interface StorageSyncServices {
    /**
     * Get a StorageSyncService list by Resource group name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: StorageSyncServicesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<StorageSyncService>;
    /**
     * Get a StorageSyncService list by subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: StorageSyncServicesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<StorageSyncService>;
    /**
     * Check the give namespace name availability.
     * @param locationName The desired region for the name check.
     * @param parameters Parameters to check availability of the given namespace name
     * @param options The options parameters.
     */
    checkNameAvailability(locationName: string, parameters: CheckNameAvailabilityParameters, options?: StorageSyncServicesCheckNameAvailabilityOptionalParams): Promise<StorageSyncServicesCheckNameAvailabilityResponse>;
    /**
     * Create a new StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, storageSyncServiceName: string, parameters: StorageSyncServiceCreateParameters, options?: StorageSyncServicesCreateOptionalParams): Promise<PollerLike<PollOperationState<StorageSyncServicesCreateResponse>, StorageSyncServicesCreateResponse>>;
    /**
     * Create a new StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, storageSyncServiceName: string, parameters: StorageSyncServiceCreateParameters, options?: StorageSyncServicesCreateOptionalParams): Promise<StorageSyncServicesCreateResponse>;
    /**
     * Get a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, options?: StorageSyncServicesGetOptionalParams): Promise<StorageSyncServicesGetResponse>;
    /**
     * Patch a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, storageSyncServiceName: string, options?: StorageSyncServicesUpdateOptionalParams): Promise<PollerLike<PollOperationState<StorageSyncServicesUpdateResponse>, StorageSyncServicesUpdateResponse>>;
    /**
     * Patch a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, storageSyncServiceName: string, options?: StorageSyncServicesUpdateOptionalParams): Promise<StorageSyncServicesUpdateResponse>;
    /**
     * Delete a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, storageSyncServiceName: string, options?: StorageSyncServicesDeleteOptionalParams): Promise<PollerLike<PollOperationState<StorageSyncServicesDeleteResponse>, StorageSyncServicesDeleteResponse>>;
    /**
     * Delete a given StorageSyncService.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, storageSyncServiceName: string, options?: StorageSyncServicesDeleteOptionalParams): Promise<StorageSyncServicesDeleteResponse>;
}

/** Optional parameters. */
export declare interface StorageSyncServicesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type StorageSyncServicesCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Defines headers for StorageSyncServices_create operation. */
export declare interface StorageSyncServicesCreateHeaders {
    /** Operation Status Location URI */
    azureAsyncOperation?: string;
    /** Operation Status Location URI */
    location?: string;
    /** Retry After */
    retryAfter?: string;
    /** Request id */
    xMsRequestId?: string;
    /** correlation request id */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface StorageSyncServicesCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type StorageSyncServicesCreateResponse = StorageSyncService;

/** Defines headers for StorageSyncServices_delete operation. */
export declare interface StorageSyncServicesDeleteHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface StorageSyncServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type StorageSyncServicesDeleteResponse = StorageSyncServicesDeleteHeaders;

/** Defines headers for StorageSyncServices_get operation. */
export declare interface StorageSyncServicesGetHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface StorageSyncServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StorageSyncServicesGetResponse = StorageSyncServicesGetHeaders & StorageSyncService;

/** Defines headers for StorageSyncServices_listByResourceGroup operation. */
export declare interface StorageSyncServicesListByResourceGroupHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface StorageSyncServicesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type StorageSyncServicesListByResourceGroupResponse = StorageSyncServicesListByResourceGroupHeaders & StorageSyncServiceArray;

/** Defines headers for StorageSyncServices_listBySubscription operation. */
export declare interface StorageSyncServicesListBySubscriptionHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface StorageSyncServicesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type StorageSyncServicesListBySubscriptionResponse = StorageSyncServicesListBySubscriptionHeaders & StorageSyncServiceArray;

/** Defines headers for StorageSyncServices_update operation. */
export declare interface StorageSyncServicesUpdateHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface StorageSyncServicesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Storage Sync Service resource. */
    parameters?: StorageSyncServiceUpdateParameters;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type StorageSyncServicesUpdateResponse = StorageSyncServicesUpdateHeaders & StorageSyncService;

/** Parameters for updating an Storage sync service. */
export declare interface StorageSyncServiceUpdateParameters {
    /** The user-specified tags associated with the storage sync service. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Incoming Traffic Policy */
    incomingTrafficPolicy?: IncomingTrafficPolicy;
}

/** Subscription State object. */
export declare interface SubscriptionState {
    /** State of Azure Subscription */
    state?: Reason;
    /**
     * Is Transitioning
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly istransitioning?: boolean;
    /** Subscription state properties. */
    properties?: Record<string, unknown>;
}

/** Sync Group object. */
export declare interface SyncGroup extends ProxyResource {
    /**
     * Unique Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uniqueId?: string;
    /**
     * Sync group status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly syncGroupStatus?: string;
}

/** Array of SyncGroup */
export declare interface SyncGroupArray {
    /** Collection of SyncGroup. */
    value?: SyncGroup[];
}

/** The parameters used when creating a sync group. */
export declare interface SyncGroupCreateParameters extends ProxyResource {
    /** The parameters used to create the sync group */
    properties?: Record<string, unknown>;
}

/** Interface representing a SyncGroups. */
export declare interface SyncGroups {
    /**
     * Get a SyncGroup List.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: SyncGroupsListByStorageSyncServiceOptionalParams): PagedAsyncIterableIterator<SyncGroup>;
    /**
     * Create a new SyncGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param parameters Sync Group Body
     * @param options The options parameters.
     */
    create(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, parameters: SyncGroupCreateParameters, options?: SyncGroupsCreateOptionalParams): Promise<SyncGroupsCreateResponse>;
    /**
     * Get a given SyncGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: SyncGroupsGetOptionalParams): Promise<SyncGroupsGetResponse>;
    /**
     * Delete a given SyncGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, storageSyncServiceName: string, syncGroupName: string, options?: SyncGroupsDeleteOptionalParams): Promise<SyncGroupsDeleteResponse>;
}

/** Defines headers for SyncGroups_create operation. */
export declare interface SyncGroupsCreateHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface SyncGroupsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type SyncGroupsCreateResponse = SyncGroupsCreateHeaders & SyncGroup;

/** Defines headers for SyncGroups_delete operation. */
export declare interface SyncGroupsDeleteHeaders {
    /** Request id */
    xMsRequestId?: string;
    /** correlation request id */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface SyncGroupsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type SyncGroupsDeleteResponse = SyncGroupsDeleteHeaders;

/** Defines headers for SyncGroups_get operation. */
export declare interface SyncGroupsGetHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface SyncGroupsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SyncGroupsGetResponse = SyncGroupsGetHeaders & SyncGroup;

/** Defines headers for SyncGroups_listByStorageSyncService operation. */
export declare interface SyncGroupsListByStorageSyncServiceHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface SyncGroupsListByStorageSyncServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByStorageSyncService operation. */
export declare type SyncGroupsListByStorageSyncServiceResponse = SyncGroupsListByStorageSyncServiceHeaders & SyncGroupArray;

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** The parameters used when calling trigger change detection action on cloud endpoint. */
export declare interface TriggerChangeDetectionParameters {
    /** Relative path to a directory Azure File share for which change detection is to be performed. */
    directoryPath?: string;
    /** Change Detection Mode. Applies to a directory specified in directoryPath parameter. */
    changeDetectionMode?: ChangeDetectionMode;
    /** Array of relative paths on the Azure File share to be included in the change detection. Can be files and directories. */
    paths?: string[];
}

/** Trigger Rollover Request. */
export declare interface TriggerRolloverRequest {
    /** Certificate Data */
    serverCertificate?: string;
}

/** Workflow resource. */
export declare interface Workflow extends ProxyResource {
    /** last step name */
    lastStepName?: string;
    /** workflow status. */
    status?: WorkflowStatus;
    /** operation direction. */
    operation?: OperationDirection;
    /** workflow steps */
    steps?: string;
    /** workflow last operation identifier. */
    lastOperationId?: string;
    /**
     * workflow command name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly commandName?: string;
    /**
     * workflow created timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTimestamp?: Date;
    /**
     * workflow last status timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStatusTimestamp?: Date;
}

/** Array of Workflow */
export declare interface WorkflowArray {
    /** Collection of workflow items. */
    value?: Workflow[];
}

/** Interface representing a Workflows. */
export declare interface Workflows {
    /**
     * Get a Workflow List
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param options The options parameters.
     */
    listByStorageSyncService(resourceGroupName: string, storageSyncServiceName: string, options?: WorkflowsListByStorageSyncServiceOptionalParams): PagedAsyncIterableIterator<Workflow>;
    /**
     * Get Workflows resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param workflowId workflow Id
     * @param options The options parameters.
     */
    get(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options?: WorkflowsGetOptionalParams): Promise<WorkflowsGetResponse>;
    /**
     * Abort the given workflow.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param workflowId workflow Id
     * @param options The options parameters.
     */
    abort(resourceGroupName: string, storageSyncServiceName: string, workflowId: string, options?: WorkflowsAbortOptionalParams): Promise<WorkflowsAbortResponse>;
}

/** Defines headers for Workflows_abort operation. */
export declare interface WorkflowsAbortHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface WorkflowsAbortOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the abort operation. */
export declare type WorkflowsAbortResponse = WorkflowsAbortHeaders;

/** Defines headers for Workflows_get operation. */
export declare interface WorkflowsGetHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface WorkflowsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowsGetResponse = WorkflowsGetHeaders & Workflow;

/** Defines headers for Workflows_listByStorageSyncService operation. */
export declare interface WorkflowsListByStorageSyncServiceHeaders {
    /** request id. */
    xMsRequestId?: string;
    /** correlation request id. */
    xMsCorrelationRequestId?: string;
}

/** Optional parameters. */
export declare interface WorkflowsListByStorageSyncServiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByStorageSyncService operation. */
export declare type WorkflowsListByStorageSyncServiceResponse = WorkflowsListByStorageSyncServiceHeaders & WorkflowArray;

/**
 * Defines values for WorkflowStatus. \
 * {@link KnownWorkflowStatus} can be used interchangeably with WorkflowStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **active** \
 * **expired** \
 * **succeeded** \
 * **aborted** \
 * **failed**
 */
export declare type WorkflowStatus = string;

export { }
