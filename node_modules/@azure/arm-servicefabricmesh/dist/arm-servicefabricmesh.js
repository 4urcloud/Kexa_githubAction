/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmServicefabricmesh = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var AvailableOperationDisplay = {
        serializedName: "AvailableOperationDisplay",
        type: {
            name: "Composite",
            className: "AvailableOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorDetailsModel = {
        serializedName: "ErrorDetailsModel",
        type: {
            name: "Composite",
            className: "ErrorDetailsModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorErrorModel = {
        serializedName: "ErrorErrorModel",
        type: {
            name: "Composite",
            className: "ErrorErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetailsModel"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "ErrorModel",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                error: {
                    required: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorErrorModel"
                    }
                }
            }
        }
    };
    var OperationResult = {
        serializedName: "OperationResult",
        type: {
            name: "Composite",
            className: "OperationResult",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "AvailableOperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProvisionedResourceProperties = {
        serializedName: "ProvisionedResourceProperties",
        type: {
            name: "Composite",
            className: "ProvisionedResourceProperties",
            modelProperties: {
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var ManagedProxyResource = {
        serializedName: "ManagedProxyResource",
        type: {
            name: "Composite",
            className: "ManagedProxyResource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SecretResourcePropertiesBase = {
        serializedName: "SecretResourcePropertiesBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "SecretResourcePropertiesBase",
            className: "SecretResourcePropertiesBase",
            modelProperties: __assign(__assign({}, ProvisionedResourceProperties.type.modelProperties), { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var SecretResourceProperties = {
        serializedName: "SecretResourceProperties",
        type: {
            name: "Composite",
            className: "SecretResourceProperties",
            modelProperties: __assign(__assign({}, SecretResourcePropertiesBase.type.modelProperties), { description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                }, contentType: {
                    serializedName: "contentType",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var InlinedValueSecretResourceProperties = {
        serializedName: "inlinedValue",
        type: {
            name: "Composite",
            className: "InlinedValueSecretResourceProperties",
            modelProperties: __assign({}, SecretResourceProperties.type.modelProperties)
        }
    };
    var SecretResourceDescription = {
        serializedName: "SecretResourceDescription",
        type: {
            name: "Composite",
            className: "SecretResourceDescription",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SecretResourceProperties"
                    }
                } })
        }
    };
    var SecretValue = {
        serializedName: "SecretValue",
        type: {
            name: "Composite",
            className: "SecretValue",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecretValueProperties = {
        serializedName: "SecretValueProperties",
        type: {
            name: "Composite",
            className: "SecretValueProperties",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecretValueResourceDescription = {
        serializedName: "SecretValueResourceDescription",
        type: {
            name: "Composite",
            className: "SecretValueResourceDescription",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, value: {
                    serializedName: "properties.value",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VolumeProviderParametersAzureFile = {
        serializedName: "VolumeProviderParametersAzureFile",
        type: {
            name: "Composite",
            className: "VolumeProviderParametersAzureFile",
            modelProperties: {
                accountName: {
                    required: true,
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                },
                accountKey: {
                    serializedName: "accountKey",
                    type: {
                        name: "String"
                    }
                },
                shareName: {
                    required: true,
                    serializedName: "shareName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VolumeProperties = {
        serializedName: "VolumeProperties",
        type: {
            name: "Composite",
            className: "VolumeProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    required: true,
                    isConstant: true,
                    serializedName: "provider",
                    defaultValue: 'SFAzureFile',
                    type: {
                        name: "String"
                    }
                },
                azureFileParameters: {
                    serializedName: "azureFileParameters",
                    type: {
                        name: "Composite",
                        className: "VolumeProviderParametersAzureFile"
                    }
                }
            }
        }
    };
    var VolumeReference = {
        serializedName: "VolumeReference",
        type: {
            name: "Composite",
            className: "VolumeReference",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                readOnly: {
                    serializedName: "readOnly",
                    type: {
                        name: "Boolean"
                    }
                },
                destinationPath: {
                    required: true,
                    serializedName: "destinationPath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationScopedVolumeCreationParameters = {
        serializedName: "ApplicationScopedVolumeCreationParameters",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "ApplicationScopedVolumeCreationParameters",
            className: "ApplicationScopedVolumeCreationParameters",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationScopedVolume = {
        serializedName: "ApplicationScopedVolume",
        type: {
            name: "Composite",
            className: "ApplicationScopedVolume",
            modelProperties: __assign(__assign({}, VolumeReference.type.modelProperties), { creationParameters: {
                    required: true,
                    serializedName: "creationParameters",
                    type: {
                        name: "Composite",
                        className: "ApplicationScopedVolumeCreationParameters"
                    }
                } })
        }
    };
    var ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk = {
        serializedName: "ServiceFabricVolumeDisk",
        type: {
            name: "Composite",
            polymorphicDiscriminator: ApplicationScopedVolumeCreationParameters.type.polymorphicDiscriminator,
            uberParent: "ApplicationScopedVolumeCreationParameters",
            className: "ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk",
            modelProperties: __assign(__assign({}, ApplicationScopedVolumeCreationParameters.type.modelProperties), { sizeDisk: {
                    required: true,
                    serializedName: "sizeDisk",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var VolumeResourceDescription = {
        serializedName: "VolumeResourceDescription",
        type: {
            name: "Composite",
            className: "VolumeResourceDescription",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, provider: {
                    required: true,
                    isConstant: true,
                    serializedName: "properties.provider",
                    defaultValue: 'SFAzureFile',
                    type: {
                        name: "String"
                    }
                }, azureFileParameters: {
                    serializedName: "properties.azureFileParameters",
                    type: {
                        name: "Composite",
                        className: "VolumeProviderParametersAzureFile"
                    }
                } })
        }
    };
    var NetworkResourcePropertiesBase = {
        serializedName: "NetworkResourcePropertiesBase",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "NetworkResourcePropertiesBase",
            className: "NetworkResourcePropertiesBase",
            modelProperties: __assign(__assign({}, ProvisionedResourceProperties.type.modelProperties), { kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var NetworkResourceProperties = {
        serializedName: "NetworkResourceProperties",
        type: {
            name: "Composite",
            className: "NetworkResourceProperties",
            modelProperties: __assign(__assign({}, NetworkResourcePropertiesBase.type.modelProperties), { description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var LocalNetworkResourceProperties = {
        serializedName: "Local",
        type: {
            name: "Composite",
            className: "LocalNetworkResourceProperties",
            modelProperties: __assign(__assign({}, NetworkResourceProperties.type.modelProperties), { networkAddressPrefix: {
                    serializedName: "networkAddressPrefix",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var EndpointRef = {
        serializedName: "EndpointRef",
        type: {
            name: "Composite",
            className: "EndpointRef",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkRef = {
        serializedName: "NetworkRef",
        type: {
            name: "Composite",
            className: "NetworkRef",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                endpointRefs: {
                    serializedName: "endpointRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointRef"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkResourceDescription = {
        serializedName: "NetworkResourceDescription",
        type: {
            name: "Composite",
            className: "NetworkResourceDescription",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "NetworkResourceProperties"
                    }
                } })
        }
    };
    var GatewayDestination = {
        serializedName: "GatewayDestination",
        type: {
            name: "Composite",
            className: "GatewayDestination",
            modelProperties: {
                applicationName: {
                    required: true,
                    serializedName: "applicationName",
                    type: {
                        name: "String"
                    }
                },
                serviceName: {
                    required: true,
                    serializedName: "serviceName",
                    type: {
                        name: "String"
                    }
                },
                endpointName: {
                    required: true,
                    serializedName: "endpointName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TcpConfig = {
        serializedName: "TcpConfig",
        type: {
            name: "Composite",
            className: "TcpConfig",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        className: "GatewayDestination"
                    }
                }
            }
        }
    };
    var HttpRouteMatchPath = {
        serializedName: "HttpRouteMatchPath",
        type: {
            name: "Composite",
            className: "HttpRouteMatchPath",
            modelProperties: {
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                rewrite: {
                    serializedName: "rewrite",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    isConstant: true,
                    serializedName: "type",
                    defaultValue: 'prefix',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HttpRouteMatchHeader = {
        serializedName: "HttpRouteMatchHeader",
        type: {
            name: "Composite",
            className: "HttpRouteMatchHeader",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HttpRouteMatchRule = {
        serializedName: "HttpRouteMatchRule",
        type: {
            name: "Composite",
            className: "HttpRouteMatchRule",
            modelProperties: {
                path: {
                    required: true,
                    serializedName: "path",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "HttpRouteMatchPath"
                    }
                },
                headers: {
                    serializedName: "headers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HttpRouteMatchHeader"
                            }
                        }
                    }
                }
            }
        }
    };
    var HttpRouteConfig = {
        serializedName: "HttpRouteConfig",
        type: {
            name: "Composite",
            className: "HttpRouteConfig",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                match: {
                    required: true,
                    serializedName: "match",
                    defaultValue: {},
                    type: {
                        name: "Composite",
                        className: "HttpRouteMatchRule"
                    }
                },
                destination: {
                    required: true,
                    serializedName: "destination",
                    type: {
                        name: "Composite",
                        className: "GatewayDestination"
                    }
                }
            }
        }
    };
    var HttpHostConfig = {
        serializedName: "HttpHostConfig",
        type: {
            name: "Composite",
            className: "HttpHostConfig",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                routes: {
                    required: true,
                    serializedName: "routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HttpRouteConfig"
                            }
                        }
                    }
                }
            }
        }
    };
    var HttpConfig = {
        serializedName: "HttpConfig",
        type: {
            name: "Composite",
            className: "HttpConfig",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    required: true,
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                hosts: {
                    required: true,
                    serializedName: "hosts",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HttpHostConfig"
                            }
                        }
                    }
                }
            }
        }
    };
    var GatewayProperties = {
        serializedName: "GatewayProperties",
        type: {
            name: "Composite",
            className: "GatewayProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                sourceNetwork: {
                    required: true,
                    serializedName: "sourceNetwork",
                    type: {
                        name: "Composite",
                        className: "NetworkRef"
                    }
                },
                destinationNetwork: {
                    required: true,
                    serializedName: "destinationNetwork",
                    type: {
                        name: "Composite",
                        className: "NetworkRef"
                    }
                },
                tcp: {
                    serializedName: "tcp",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TcpConfig"
                            }
                        }
                    }
                },
                http: {
                    serializedName: "http",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HttpConfig"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                },
                ipAddress: {
                    readOnly: true,
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayResourceDescription = {
        serializedName: "GatewayResourceDescription",
        type: {
            name: "Composite",
            className: "GatewayResourceDescription",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, sourceNetwork: {
                    required: true,
                    serializedName: "properties.sourceNetwork",
                    type: {
                        name: "Composite",
                        className: "NetworkRef"
                    }
                }, destinationNetwork: {
                    required: true,
                    serializedName: "properties.destinationNetwork",
                    type: {
                        name: "Composite",
                        className: "NetworkRef"
                    }
                }, tcp: {
                    serializedName: "properties.tcp",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TcpConfig"
                            }
                        }
                    }
                }, http: {
                    serializedName: "properties.http",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "HttpConfig"
                            }
                        }
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, ipAddress: {
                    readOnly: true,
                    serializedName: "properties.ipAddress",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ImageRegistryCredential = {
        serializedName: "ImageRegistryCredential",
        type: {
            name: "Composite",
            className: "ImageRegistryCredential",
            modelProperties: {
                server: {
                    required: true,
                    serializedName: "server",
                    type: {
                        name: "String"
                    }
                },
                username: {
                    required: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnvironmentVariable = {
        serializedName: "EnvironmentVariable",
        type: {
            name: "Composite",
            className: "EnvironmentVariable",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Setting = {
        serializedName: "Setting",
        type: {
            name: "Composite",
            className: "Setting",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerLabel = {
        serializedName: "ContainerLabel",
        type: {
            name: "Composite",
            className: "ContainerLabel",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointProperties = {
        serializedName: "EndpointProperties",
        type: {
            name: "Composite",
            className: "EndpointProperties",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ResourceRequests = {
        serializedName: "ResourceRequests",
        type: {
            name: "Composite",
            className: "ResourceRequests",
            modelProperties: {
                memoryInGB: {
                    required: true,
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    required: true,
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ResourceLimits = {
        serializedName: "ResourceLimits",
        type: {
            name: "Composite",
            className: "ResourceLimits",
            modelProperties: {
                memoryInGB: {
                    serializedName: "memoryInGB",
                    type: {
                        name: "Number"
                    }
                },
                cpu: {
                    serializedName: "cpu",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ResourceRequirements = {
        serializedName: "ResourceRequirements",
        type: {
            name: "Composite",
            className: "ResourceRequirements",
            modelProperties: {
                requests: {
                    required: true,
                    serializedName: "requests",
                    type: {
                        name: "Composite",
                        className: "ResourceRequests"
                    }
                },
                limits: {
                    serializedName: "limits",
                    type: {
                        name: "Composite",
                        className: "ResourceLimits"
                    }
                }
            }
        }
    };
    var DiagnosticsRef = {
        serializedName: "DiagnosticsRef",
        type: {
            name: "Composite",
            className: "DiagnosticsRef",
            modelProperties: {
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                sinkRefs: {
                    serializedName: "sinkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ReliableCollectionsRef = {
        serializedName: "ReliableCollectionsRef",
        type: {
            name: "Composite",
            className: "ReliableCollectionsRef",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                doNotPersistState: {
                    serializedName: "doNotPersistState",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ContainerState = {
        serializedName: "ContainerState",
        type: {
            name: "Composite",
            className: "ContainerState",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                exitCode: {
                    serializedName: "exitCode",
                    type: {
                        name: "String"
                    }
                },
                finishTime: {
                    serializedName: "finishTime",
                    type: {
                        name: "DateTime"
                    }
                },
                detailStatus: {
                    serializedName: "detailStatus",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerEvent = {
        serializedName: "ContainerEvent",
        type: {
            name: "Composite",
            className: "ContainerEvent",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                count: {
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                firstTimestamp: {
                    serializedName: "firstTimestamp",
                    type: {
                        name: "String"
                    }
                },
                lastTimestamp: {
                    serializedName: "lastTimestamp",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerInstanceView = {
        serializedName: "ContainerInstanceView",
        type: {
            name: "Composite",
            className: "ContainerInstanceView",
            modelProperties: {
                restartCount: {
                    serializedName: "restartCount",
                    type: {
                        name: "Number"
                    }
                },
                currentState: {
                    serializedName: "currentState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                previousState: {
                    serializedName: "previousState",
                    type: {
                        name: "Composite",
                        className: "ContainerState"
                    }
                },
                events: {
                    serializedName: "events",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerEvent"
                            }
                        }
                    }
                }
            }
        }
    };
    var ContainerCodePackageProperties = {
        serializedName: "ContainerCodePackageProperties",
        type: {
            name: "Composite",
            className: "ContainerCodePackageProperties",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    required: true,
                    serializedName: "image",
                    type: {
                        name: "String"
                    }
                },
                imageRegistryCredential: {
                    serializedName: "imageRegistryCredential",
                    type: {
                        name: "Composite",
                        className: "ImageRegistryCredential"
                    }
                },
                entrypoint: {
                    serializedName: "entrypoint",
                    type: {
                        name: "String"
                    }
                },
                commands: {
                    serializedName: "commands",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                environmentVariables: {
                    serializedName: "environmentVariables",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnvironmentVariable"
                            }
                        }
                    }
                },
                settings: {
                    serializedName: "settings",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Setting"
                            }
                        }
                    }
                },
                labels: {
                    serializedName: "labels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerLabel"
                            }
                        }
                    }
                },
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointProperties"
                            }
                        }
                    }
                },
                resources: {
                    required: true,
                    serializedName: "resources",
                    type: {
                        name: "Composite",
                        className: "ResourceRequirements"
                    }
                },
                volumeRefs: {
                    serializedName: "volumeRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeReference"
                            }
                        }
                    }
                },
                volumes: {
                    serializedName: "volumes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationScopedVolume"
                            }
                        }
                    }
                },
                diagnostics: {
                    serializedName: "diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsRef"
                    }
                },
                reliableCollectionsRefs: {
                    serializedName: "reliableCollectionsRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ReliableCollectionsRef"
                            }
                        }
                    }
                },
                instanceView: {
                    readOnly: true,
                    serializedName: "instanceView",
                    type: {
                        name: "Composite",
                        className: "ContainerInstanceView"
                    }
                }
            }
        }
    };
    var AutoScalingTrigger = {
        serializedName: "AutoScalingTrigger",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "AutoScalingTrigger",
            className: "AutoScalingTrigger",
            modelProperties: {
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoScalingMechanism = {
        serializedName: "AutoScalingMechanism",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "AutoScalingMechanism",
            className: "AutoScalingMechanism",
            modelProperties: {
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoScalingPolicy = {
        serializedName: "AutoScalingPolicy",
        type: {
            name: "Composite",
            className: "AutoScalingPolicy",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                trigger: {
                    required: true,
                    serializedName: "trigger",
                    type: {
                        name: "Composite",
                        className: "AutoScalingTrigger"
                    }
                },
                mechanism: {
                    required: true,
                    serializedName: "mechanism",
                    type: {
                        name: "Composite",
                        className: "AutoScalingMechanism"
                    }
                }
            }
        }
    };
    var ServiceResourceDescription = {
        serializedName: "ServiceResourceDescription",
        type: {
            name: "Composite",
            className: "ServiceResourceDescription",
            modelProperties: __assign(__assign({}, ManagedProxyResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, osType: {
                    required: true,
                    serializedName: "properties.osType",
                    type: {
                        name: "String"
                    }
                }, codePackages: {
                    required: true,
                    serializedName: "properties.codePackages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerCodePackageProperties"
                            }
                        }
                    }
                }, networkRefs: {
                    serializedName: "properties.networkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkRef"
                            }
                        }
                    }
                }, diagnostics: {
                    serializedName: "properties.diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsRef"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, replicaCount: {
                    serializedName: "properties.replicaCount",
                    type: {
                        name: "Number"
                    }
                }, autoScalingPolicies: {
                    serializedName: "properties.autoScalingPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoScalingPolicy"
                            }
                        }
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, healthState: {
                    readOnly: true,
                    serializedName: "properties.healthState",
                    type: {
                        name: "String"
                    }
                }, unhealthyEvaluation: {
                    readOnly: true,
                    serializedName: "properties.unhealthyEvaluation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var DiagnosticsSinkProperties = {
        serializedName: "DiagnosticsSinkProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "DiagnosticsSinkProperties",
            className: "DiagnosticsSinkProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DiagnosticsDescription = {
        serializedName: "DiagnosticsDescription",
        type: {
            name: "Composite",
            className: "DiagnosticsDescription",
            modelProperties: {
                sinks: {
                    serializedName: "sinks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DiagnosticsSinkProperties"
                            }
                        }
                    }
                },
                enabled: {
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                defaultSinkRefs: {
                    serializedName: "defaultSinkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ApplicationProperties = {
        serializedName: "ApplicationProperties",
        type: {
            name: "Composite",
            className: "ApplicationProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                services: {
                    serializedName: "services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResourceDescription"
                            }
                        }
                    }
                },
                diagnostics: {
                    serializedName: "diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsDescription"
                    }
                },
                debugParams: {
                    serializedName: "debugParams",
                    type: {
                        name: "String"
                    }
                },
                serviceNames: {
                    readOnly: true,
                    serializedName: "serviceNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                },
                healthState: {
                    readOnly: true,
                    serializedName: "healthState",
                    type: {
                        name: "String"
                    }
                },
                unhealthyEvaluation: {
                    readOnly: true,
                    serializedName: "unhealthyEvaluation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AzureInternalMonitoringPipelineSinkDescription = {
        serializedName: "AzureInternalMonitoringPipeline",
        type: {
            name: "Composite",
            polymorphicDiscriminator: DiagnosticsSinkProperties.type.polymorphicDiscriminator,
            uberParent: "DiagnosticsSinkProperties",
            className: "AzureInternalMonitoringPipelineSinkDescription",
            modelProperties: __assign(__assign({}, DiagnosticsSinkProperties.type.modelProperties), { accountName: {
                    serializedName: "accountName",
                    type: {
                        name: "String"
                    }
                }, namespace: {
                    serializedName: "namespace",
                    type: {
                        name: "String"
                    }
                }, maConfigUrl: {
                    serializedName: "maConfigUrl",
                    type: {
                        name: "String"
                    }
                }, fluentdConfigUrl: {
                    serializedName: "fluentdConfigUrl",
                    type: {
                        name: "Object"
                    }
                }, autoKeyConfigUrl: {
                    serializedName: "autoKeyConfigUrl",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ApplicationResourceDescription = {
        serializedName: "ApplicationResourceDescription",
        type: {
            name: "Composite",
            className: "ApplicationResourceDescription",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, services: {
                    serializedName: "properties.services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResourceDescription"
                            }
                        }
                    }
                }, diagnostics: {
                    serializedName: "properties.diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsDescription"
                    }
                }, debugParams: {
                    serializedName: "properties.debugParams",
                    type: {
                        name: "String"
                    }
                }, serviceNames: {
                    readOnly: true,
                    serializedName: "properties.serviceNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, statusDetails: {
                    readOnly: true,
                    serializedName: "properties.statusDetails",
                    type: {
                        name: "String"
                    }
                }, healthState: {
                    readOnly: true,
                    serializedName: "properties.healthState",
                    type: {
                        name: "String"
                    }
                }, unhealthyEvaluation: {
                    readOnly: true,
                    serializedName: "properties.unhealthyEvaluation",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AddRemoveReplicaScalingMechanism = {
        serializedName: "AddRemoveReplica",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AutoScalingMechanism.type.polymorphicDiscriminator,
            uberParent: "AutoScalingMechanism",
            className: "AddRemoveReplicaScalingMechanism",
            modelProperties: __assign(__assign({}, AutoScalingMechanism.type.modelProperties), { minCount: {
                    required: true,
                    serializedName: "minCount",
                    type: {
                        name: "Number"
                    }
                }, maxCount: {
                    required: true,
                    serializedName: "maxCount",
                    type: {
                        name: "Number"
                    }
                }, scaleIncrement: {
                    required: true,
                    serializedName: "scaleIncrement",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var AutoScalingMetric = {
        serializedName: "AutoScalingMetric",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "kind",
                clientName: "kind"
            },
            uberParent: "AutoScalingMetric",
            className: "AutoScalingMetric",
            modelProperties: {
                kind: {
                    required: true,
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoScalingResourceMetric = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AutoScalingMetric.type.polymorphicDiscriminator,
            uberParent: "AutoScalingMetric",
            className: "AutoScalingResourceMetric",
            modelProperties: __assign(__assign({}, AutoScalingMetric.type.modelProperties), { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceProperties = {
        serializedName: "ServiceProperties",
        type: {
            name: "Composite",
            className: "ServiceProperties",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                replicaCount: {
                    serializedName: "replicaCount",
                    type: {
                        name: "Number"
                    }
                },
                autoScalingPolicies: {
                    serializedName: "autoScalingPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AutoScalingPolicy"
                            }
                        }
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                statusDetails: {
                    readOnly: true,
                    serializedName: "statusDetails",
                    type: {
                        name: "String"
                    }
                },
                healthState: {
                    readOnly: true,
                    serializedName: "healthState",
                    type: {
                        name: "String"
                    }
                },
                unhealthyEvaluation: {
                    readOnly: true,
                    serializedName: "unhealthyEvaluation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceReplicaProperties = {
        serializedName: "ServiceReplicaProperties",
        type: {
            name: "Composite",
            className: "ServiceReplicaProperties",
            modelProperties: {
                osType: {
                    required: true,
                    serializedName: "osType",
                    type: {
                        name: "String"
                    }
                },
                codePackages: {
                    required: true,
                    serializedName: "codePackages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ContainerCodePackageProperties"
                            }
                        }
                    }
                },
                networkRefs: {
                    serializedName: "networkRefs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkRef"
                            }
                        }
                    }
                },
                diagnostics: {
                    serializedName: "diagnostics",
                    type: {
                        name: "Composite",
                        className: "DiagnosticsRef"
                    }
                }
            }
        }
    };
    var ServiceReplicaDescription = {
        serializedName: "ServiceReplicaDescription",
        type: {
            name: "Composite",
            className: "ServiceReplicaDescription",
            modelProperties: __assign(__assign({}, ServiceReplicaProperties.type.modelProperties), { replicaName: {
                    required: true,
                    serializedName: "replicaName",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var AverageLoadScalingTrigger = {
        serializedName: "AverageLoad",
        type: {
            name: "Composite",
            polymorphicDiscriminator: AutoScalingTrigger.type.polymorphicDiscriminator,
            uberParent: "AutoScalingTrigger",
            className: "AverageLoadScalingTrigger",
            modelProperties: __assign(__assign({}, AutoScalingTrigger.type.modelProperties), { metric: {
                    required: true,
                    serializedName: "metric",
                    type: {
                        name: "Composite",
                        className: "AutoScalingMetric"
                    }
                }, lowerLoadThreshold: {
                    required: true,
                    serializedName: "lowerLoadThreshold",
                    type: {
                        name: "Number"
                    }
                }, upperLoadThreshold: {
                    required: true,
                    serializedName: "upperLoadThreshold",
                    type: {
                        name: "Number"
                    }
                }, scaleIntervalInSeconds: {
                    required: true,
                    serializedName: "scaleIntervalInSeconds",
                    constraints: {
                        InclusiveMinimum: 60
                    },
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var ContainerLogs = {
        serializedName: "ContainerLogs",
        type: {
            name: "Composite",
            className: "ContainerLogs",
            modelProperties: {
                content: {
                    serializedName: "content",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationResult"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecretResourceDescriptionList = {
        serializedName: "SecretResourceDescriptionList",
        type: {
            name: "Composite",
            className: "SecretResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecretResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SecretValueResourceDescriptionList = {
        serializedName: "SecretValueResourceDescriptionList",
        type: {
            name: "Composite",
            className: "SecretValueResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SecretValueResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var VolumeResourceDescriptionList = {
        serializedName: "VolumeResourceDescriptionList",
        type: {
            name: "Composite",
            className: "VolumeResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "VolumeResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkResourceDescriptionList = {
        serializedName: "NetworkResourceDescriptionList",
        type: {
            name: "Composite",
            className: "NetworkResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var GatewayResourceDescriptionList = {
        serializedName: "GatewayResourceDescriptionList",
        type: {
            name: "Composite",
            className: "GatewayResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GatewayResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ApplicationResourceDescriptionList = {
        serializedName: "ApplicationResourceDescriptionList",
        type: {
            name: "Composite",
            className: "ApplicationResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ApplicationResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceResourceDescriptionList = {
        serializedName: "ServiceResourceDescriptionList",
        type: {
            name: "Composite",
            className: "ServiceResourceDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResourceDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceReplicaDescriptionList = {
        serializedName: "ServiceReplicaDescriptionList",
        type: {
            name: "Composite",
            className: "ServiceReplicaDescriptionList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceReplicaDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'ProvisionedResourceProperties.SecretResourceProperties': SecretResourceProperties,
        'ProvisionedResourceProperties.inlinedValue': InlinedValueSecretResourceProperties,
        'ProvisionedResourceProperties.SecretResourcePropertiesBase': SecretResourcePropertiesBase,
        'ApplicationScopedVolumeCreationParameters': ApplicationScopedVolumeCreationParameters,
        'ApplicationScopedVolumeCreationParameters.ServiceFabricVolumeDisk': ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        'ProvisionedResourceProperties.NetworkResourceProperties': NetworkResourceProperties,
        'ProvisionedResourceProperties.Local': LocalNetworkResourceProperties,
        'ProvisionedResourceProperties.NetworkResourcePropertiesBase': NetworkResourcePropertiesBase,
        'AutoScalingTrigger': AutoScalingTrigger,
        'AutoScalingMechanism': AutoScalingMechanism,
        'DiagnosticsSinkProperties': DiagnosticsSinkProperties,
        'DiagnosticsSinkProperties.AzureInternalMonitoringPipeline': AzureInternalMonitoringPipelineSinkDescription,
        'AutoScalingMechanism.AddRemoveReplica': AddRemoveReplicaScalingMechanism,
        'AutoScalingMetric': AutoScalingMetric,
        'AutoScalingMetric.Resource': AutoScalingResourceMetric,
        'AutoScalingTrigger.AverageLoad': AverageLoadScalingTrigger
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        AvailableOperationDisplay: AvailableOperationDisplay,
        ErrorDetailsModel: ErrorDetailsModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorModel: ErrorModel,
        OperationResult: OperationResult,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        Resource: Resource,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        TrackedResource: TrackedResource,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        SecretResourceProperties: SecretResourceProperties,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        SecretResourceDescription: SecretResourceDescription,
        SecretValue: SecretValue,
        SecretValueProperties: SecretValueProperties,
        SecretValueResourceDescription: SecretValueResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        VolumeProperties: VolumeProperties,
        VolumeReference: VolumeReference,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        VolumeResourceDescription: VolumeResourceDescription,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        NetworkResourceProperties: NetworkResourceProperties,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        EndpointRef: EndpointRef,
        NetworkRef: NetworkRef,
        NetworkResourceDescription: NetworkResourceDescription,
        GatewayDestination: GatewayDestination,
        TcpConfig: TcpConfig,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteConfig: HttpRouteConfig,
        HttpHostConfig: HttpHostConfig,
        HttpConfig: HttpConfig,
        GatewayProperties: GatewayProperties,
        GatewayResourceDescription: GatewayResourceDescription,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        ResourceRequirements: ResourceRequirements,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        ContainerInstanceView: ContainerInstanceView,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        AutoScalingPolicy: AutoScalingPolicy,
        ServiceResourceDescription: ServiceResourceDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        DiagnosticsDescription: DiagnosticsDescription,
        ApplicationProperties: ApplicationProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        ApplicationResourceDescription: ApplicationResourceDescription,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AutoScalingMetric: AutoScalingMetric,
        AutoScalingResourceMetric: AutoScalingResourceMetric,
        ServiceProperties: ServiceProperties,
        ServiceReplicaProperties: ServiceReplicaProperties,
        ServiceReplicaDescription: ServiceReplicaDescription,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        ContainerLogs: ContainerLogs,
        OperationListResult: OperationListResult,
        SecretResourceDescriptionList: SecretResourceDescriptionList,
        SecretValueResourceDescriptionList: SecretValueResourceDescriptionList,
        VolumeResourceDescriptionList: VolumeResourceDescriptionList,
        NetworkResourceDescriptionList: NetworkResourceDescriptionList,
        GatewayResourceDescriptionList: GatewayResourceDescriptionList,
        ApplicationResourceDescriptionList: ApplicationResourceDescriptionList,
        ServiceResourceDescriptionList: ServiceResourceDescriptionList,
        ServiceReplicaDescriptionList: ServiceReplicaDescriptionList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        OperationListResult: OperationListResult,
        OperationResult: OperationResult,
        AvailableOperationDisplay: AvailableOperationDisplay,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            isConstant: true,
            serializedName: "api-version",
            defaultValue: '2018-09-01-preview',
            type: {
                name: "String"
            }
        }
    };
    var applicationResourceName = {
        parameterPath: "applicationResourceName",
        mapper: {
            required: true,
            serializedName: "applicationResourceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var codePackageName = {
        parameterPath: "codePackageName",
        mapper: {
            required: true,
            serializedName: "codePackageName",
            type: {
                name: "String"
            }
        }
    };
    var gatewayResourceName = {
        parameterPath: "gatewayResourceName",
        mapper: {
            required: true,
            serializedName: "gatewayResourceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var networkResourceName = {
        parameterPath: "networkResourceName",
        mapper: {
            required: true,
            serializedName: "networkResourceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var replicaName = {
        parameterPath: "replicaName",
        mapper: {
            required: true,
            serializedName: "replicaName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var secretResourceName = {
        parameterPath: "secretResourceName",
        mapper: {
            required: true,
            serializedName: "secretResourceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var secretValueResourceName = {
        parameterPath: "secretValueResourceName",
        mapper: {
            required: true,
            serializedName: "secretValueResourceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var serviceResourceName = {
        parameterPath: "serviceResourceName",
        mapper: {
            required: true,
            serializedName: "serviceResourceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };
    var tail = {
        parameterPath: [
            "options",
            "tail"
        ],
        mapper: {
            serializedName: "tail",
            type: {
                name: "Number"
            }
        }
    };
    var volumeResourceName = {
        parameterPath: "volumeResourceName",
        mapper: {
            required: true,
            serializedName: "volumeResourceName",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.ServiceFabricMesh/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        SecretResourceDescription: SecretResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        SecretResourceProperties: SecretResourceProperties,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        SecretResourceDescriptionList: SecretResourceDescriptionList,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        SecretValueResourceDescription: SecretValueResourceDescription,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        NetworkResourceDescription: NetworkResourceDescription,
        NetworkResourceProperties: NetworkResourceProperties,
        GatewayResourceDescription: GatewayResourceDescription,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        TcpConfig: TcpConfig,
        GatewayDestination: GatewayDestination,
        HttpConfig: HttpConfig,
        HttpHostConfig: HttpHostConfig,
        HttpRouteConfig: HttpRouteConfig,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        ServiceResourceDescription: ServiceResourceDescription,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        AutoScalingPolicy: AutoScalingPolicy,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        AutoScalingMetric: AutoScalingMetric,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        AutoScalingResourceMetric: AutoScalingResourceMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Secret. */
    var Secret = /** @class */ (function () {
        /**
         * Create a Secret.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Secret(client) {
            this.client = client;
        }
        Secret.prototype.create = function (resourceGroupName$$1, secretResourceName$$1, secretResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                secretResourceDescription: secretResourceDescription,
                options: options
            }, createOperationSpec, callback);
        };
        Secret.prototype.get = function (resourceGroupName$$1, secretResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Secret.prototype.deleteMethod = function (resourceGroupName$$1, secretResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Secret.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Secret.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec, callback);
        };
        Secret.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Secret.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec, callback);
        };
        return Secret;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "secretResourceDescription",
            mapper: __assign(__assign({}, SecretResourceDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SecretResourceDescription
            },
            201: {
                bodyMapper: SecretResourceDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/secrets",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        SecretValueResourceDescription: SecretValueResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        SecretValueResourceDescriptionList: SecretValueResourceDescriptionList,
        SecretValue: SecretValue,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        SecretResourceDescription: SecretResourceDescription,
        SecretResourceProperties: SecretResourceProperties,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        NetworkResourceDescription: NetworkResourceDescription,
        NetworkResourceProperties: NetworkResourceProperties,
        GatewayResourceDescription: GatewayResourceDescription,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        TcpConfig: TcpConfig,
        GatewayDestination: GatewayDestination,
        HttpConfig: HttpConfig,
        HttpHostConfig: HttpHostConfig,
        HttpRouteConfig: HttpRouteConfig,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        ServiceResourceDescription: ServiceResourceDescription,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        AutoScalingPolicy: AutoScalingPolicy,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        AutoScalingMetric: AutoScalingMetric,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        AutoScalingResourceMetric: AutoScalingResourceMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SecretValueOperations. */
    var SecretValueOperations = /** @class */ (function () {
        /**
         * Create a SecretValueOperations.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function SecretValueOperations(client) {
            this.client = client;
        }
        SecretValueOperations.prototype.create = function (resourceGroupName$$1, secretResourceName$$1, secretValueResourceName$$1, secretValueResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                secretValueResourceName: secretValueResourceName$$1,
                secretValueResourceDescription: secretValueResourceDescription,
                options: options
            }, createOperationSpec$1, callback);
        };
        SecretValueOperations.prototype.get = function (resourceGroupName$$1, secretResourceName$$1, secretValueResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                secretValueResourceName: secretValueResourceName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        SecretValueOperations.prototype.deleteMethod = function (resourceGroupName$$1, secretResourceName$$1, secretValueResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                secretValueResourceName: secretValueResourceName$$1,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        SecretValueOperations.prototype.list = function (resourceGroupName$$1, secretResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        SecretValueOperations.prototype.listValue = function (resourceGroupName$$1, secretResourceName$$1, secretValueResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                secretResourceName: secretResourceName$$1,
                secretValueResourceName: secretValueResourceName$$1,
                options: options
            }, listValueOperationSpec, callback);
        };
        SecretValueOperations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return SecretValueOperations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName,
            secretValueResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "secretValueResourceDescription",
            mapper: __assign(__assign({}, SecretValueResourceDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SecretValueResourceDescription
            },
            201: {
                bodyMapper: SecretValueResourceDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName,
            secretValueResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretValueResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName,
            secretValueResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretValueResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var listValueOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/secrets/{secretResourceName}/values/{secretValueResourceName}/list_value",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            secretResourceName,
            secretValueResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretValue
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SecretValueResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        VolumeResourceDescription: VolumeResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        VolumeResourceDescriptionList: VolumeResourceDescriptionList,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        SecretResourceDescription: SecretResourceDescription,
        SecretResourceProperties: SecretResourceProperties,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        SecretValueResourceDescription: SecretValueResourceDescription,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        NetworkResourceDescription: NetworkResourceDescription,
        NetworkResourceProperties: NetworkResourceProperties,
        GatewayResourceDescription: GatewayResourceDescription,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        TcpConfig: TcpConfig,
        GatewayDestination: GatewayDestination,
        HttpConfig: HttpConfig,
        HttpHostConfig: HttpHostConfig,
        HttpRouteConfig: HttpRouteConfig,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        ServiceResourceDescription: ServiceResourceDescription,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        AutoScalingPolicy: AutoScalingPolicy,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        AutoScalingMetric: AutoScalingMetric,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        AutoScalingResourceMetric: AutoScalingResourceMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Volume. */
    var Volume = /** @class */ (function () {
        /**
         * Create a Volume.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Volume(client) {
            this.client = client;
        }
        Volume.prototype.create = function (resourceGroupName$$1, volumeResourceName$$1, volumeResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                volumeResourceName: volumeResourceName$$1,
                volumeResourceDescription: volumeResourceDescription,
                options: options
            }, createOperationSpec$2, callback);
        };
        Volume.prototype.get = function (resourceGroupName$$1, volumeResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                volumeResourceName: volumeResourceName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        Volume.prototype.deleteMethod = function (resourceGroupName$$1, volumeResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                volumeResourceName: volumeResourceName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        Volume.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        Volume.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$1, callback);
        };
        Volume.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        Volume.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$1, callback);
        };
        return Volume;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            volumeResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "volumeResourceDescription",
            mapper: __assign(__assign({}, VolumeResourceDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: VolumeResourceDescription
            },
            201: {
                bodyMapper: VolumeResourceDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            volumeResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            volumeResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listBySubscriptionOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/volumes",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listBySubscriptionNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: VolumeResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        NetworkResourceDescription: NetworkResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        NetworkResourceProperties: NetworkResourceProperties,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        NetworkResourceDescriptionList: NetworkResourceDescriptionList,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        SecretResourceDescription: SecretResourceDescription,
        SecretResourceProperties: SecretResourceProperties,
        SecretValueResourceDescription: SecretValueResourceDescription,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        GatewayResourceDescription: GatewayResourceDescription,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        TcpConfig: TcpConfig,
        GatewayDestination: GatewayDestination,
        HttpConfig: HttpConfig,
        HttpHostConfig: HttpHostConfig,
        HttpRouteConfig: HttpRouteConfig,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        ServiceResourceDescription: ServiceResourceDescription,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        AutoScalingPolicy: AutoScalingPolicy,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        AutoScalingMetric: AutoScalingMetric,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        AutoScalingResourceMetric: AutoScalingResourceMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Network. */
    var Network = /** @class */ (function () {
        /**
         * Create a Network.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Network(client) {
            this.client = client;
        }
        Network.prototype.create = function (resourceGroupName$$1, networkResourceName$$1, networkResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkResourceName: networkResourceName$$1,
                networkResourceDescription: networkResourceDescription,
                options: options
            }, createOperationSpec$3, callback);
        };
        Network.prototype.get = function (resourceGroupName$$1, networkResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkResourceName: networkResourceName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        Network.prototype.deleteMethod = function (resourceGroupName$$1, networkResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                networkResourceName: networkResourceName$$1,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        Network.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        Network.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$2, callback);
        };
        Network.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        Network.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$2, callback);
        };
        return Network;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var createOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            networkResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "networkResourceDescription",
            mapper: __assign(__assign({}, NetworkResourceDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: NetworkResourceDescription
            },
            201: {
                bodyMapper: NetworkResourceDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            networkResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks/{networkResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            networkResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/networks",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listBySubscriptionOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/networks",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listBySubscriptionNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: NetworkResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        GatewayResourceDescription: GatewayResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        TcpConfig: TcpConfig,
        GatewayDestination: GatewayDestination,
        HttpConfig: HttpConfig,
        HttpHostConfig: HttpHostConfig,
        HttpRouteConfig: HttpRouteConfig,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        GatewayResourceDescriptionList: GatewayResourceDescriptionList,
        ProxyResource: ProxyResource,
        ManagedProxyResource: ManagedProxyResource,
        SecretResourceDescription: SecretResourceDescription,
        SecretResourceProperties: SecretResourceProperties,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        SecretValueResourceDescription: SecretValueResourceDescription,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        NetworkResourceDescription: NetworkResourceDescription,
        NetworkResourceProperties: NetworkResourceProperties,
        ServiceResourceDescription: ServiceResourceDescription,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        AutoScalingPolicy: AutoScalingPolicy,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        AutoScalingMetric: AutoScalingMetric,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        AutoScalingResourceMetric: AutoScalingResourceMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Gateway. */
    var Gateway = /** @class */ (function () {
        /**
         * Create a Gateway.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Gateway(client) {
            this.client = client;
        }
        Gateway.prototype.create = function (resourceGroupName$$1, gatewayResourceName$$1, gatewayResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayResourceName: gatewayResourceName$$1,
                gatewayResourceDescription: gatewayResourceDescription,
                options: options
            }, createOperationSpec$4, callback);
        };
        Gateway.prototype.get = function (resourceGroupName$$1, gatewayResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayResourceName: gatewayResourceName$$1,
                options: options
            }, getOperationSpec$4, callback);
        };
        Gateway.prototype.deleteMethod = function (resourceGroupName$$1, gatewayResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                gatewayResourceName: gatewayResourceName$$1,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Gateway.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$3, callback);
        };
        Gateway.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$3, callback);
        };
        Gateway.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$3, callback);
        };
        Gateway.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$3, callback);
        };
        return Gateway;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOperationSpec$4 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways/{gatewayResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "gatewayResourceDescription",
            mapper: __assign(__assign({}, GatewayResourceDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: GatewayResourceDescription
            },
            201: {
                bodyMapper: GatewayResourceDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways/{gatewayResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways/{gatewayResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            gatewayResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/gateways",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listBySubscriptionOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/gateways",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listByResourceGroupNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };
    var listBySubscriptionNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: GatewayResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ApplicationResourceDescription: ApplicationResourceDescription,
        TrackedResource: TrackedResource,
        Resource: Resource,
        BaseResource: BaseResource,
        ServiceResourceDescription: ServiceResourceDescription,
        ManagedProxyResource: ManagedProxyResource,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        AutoScalingPolicy: AutoScalingPolicy,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        ApplicationResourceDescriptionList: ApplicationResourceDescriptionList,
        ProxyResource: ProxyResource,
        SecretResourceDescription: SecretResourceDescription,
        SecretResourceProperties: SecretResourceProperties,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        SecretValueResourceDescription: SecretValueResourceDescription,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        NetworkResourceDescription: NetworkResourceDescription,
        NetworkResourceProperties: NetworkResourceProperties,
        GatewayResourceDescription: GatewayResourceDescription,
        TcpConfig: TcpConfig,
        GatewayDestination: GatewayDestination,
        HttpConfig: HttpConfig,
        HttpHostConfig: HttpHostConfig,
        HttpRouteConfig: HttpRouteConfig,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        AutoScalingMetric: AutoScalingMetric,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        AutoScalingResourceMetric: AutoScalingResourceMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Application. */
    var Application = /** @class */ (function () {
        /**
         * Create a Application.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Application(client) {
            this.client = client;
        }
        Application.prototype.create = function (resourceGroupName$$1, applicationResourceName$$1, applicationResourceDescription, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                applicationResourceDescription: applicationResourceDescription,
                options: options
            }, createOperationSpec$5, callback);
        };
        Application.prototype.get = function (resourceGroupName$$1, applicationResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                options: options
            }, getOperationSpec$5, callback);
        };
        Application.prototype.deleteMethod = function (resourceGroupName$$1, applicationResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        Application.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$4, callback);
        };
        Application.prototype.listBySubscription = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionOperationSpec$4, callback);
        };
        Application.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$4, callback);
        };
        Application.prototype.listBySubscriptionNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listBySubscriptionNextOperationSpec$4, callback);
        };
        return Application;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var createOperationSpec$5 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "applicationResourceDescription",
            mapper: __assign(__assign({}, ApplicationResourceDescription), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescription
            },
            201: {
                bodyMapper: ApplicationResourceDescription
            },
            202: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listBySubscriptionOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/applications",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listByResourceGroupNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };
    var listBySubscriptionNextOperationSpec$4 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ApplicationResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$7 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServiceResourceDescription: ServiceResourceDescription,
        ManagedProxyResource: ManagedProxyResource,
        BaseResource: BaseResource,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        AutoScalingPolicy: AutoScalingPolicy,
        AutoScalingTrigger: AutoScalingTrigger,
        AutoScalingMechanism: AutoScalingMechanism,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        ServiceResourceDescriptionList: ServiceResourceDescriptionList,
        Resource: Resource,
        TrackedResource: TrackedResource,
        SecretResourceDescription: SecretResourceDescription,
        SecretResourceProperties: SecretResourceProperties,
        SecretResourcePropertiesBase: SecretResourcePropertiesBase,
        ProvisionedResourceProperties: ProvisionedResourceProperties,
        SecretValueResourceDescription: SecretValueResourceDescription,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
        VolumeResourceDescription: VolumeResourceDescription,
        VolumeProviderParametersAzureFile: VolumeProviderParametersAzureFile,
        NetworkResourcePropertiesBase: NetworkResourcePropertiesBase,
        NetworkResourceDescription: NetworkResourceDescription,
        NetworkResourceProperties: NetworkResourceProperties,
        GatewayResourceDescription: GatewayResourceDescription,
        TcpConfig: TcpConfig,
        GatewayDestination: GatewayDestination,
        HttpConfig: HttpConfig,
        HttpHostConfig: HttpHostConfig,
        HttpRouteConfig: HttpRouteConfig,
        HttpRouteMatchRule: HttpRouteMatchRule,
        HttpRouteMatchPath: HttpRouteMatchPath,
        HttpRouteMatchHeader: HttpRouteMatchHeader,
        ApplicationResourceDescription: ApplicationResourceDescription,
        DiagnosticsDescription: DiagnosticsDescription,
        DiagnosticsSinkProperties: DiagnosticsSinkProperties,
        AddRemoveReplicaScalingMechanism: AddRemoveReplicaScalingMechanism,
        AverageLoadScalingTrigger: AverageLoadScalingTrigger,
        AutoScalingMetric: AutoScalingMetric,
        ProxyResource: ProxyResource,
        InlinedValueSecretResourceProperties: InlinedValueSecretResourceProperties,
        LocalNetworkResourceProperties: LocalNetworkResourceProperties,
        AzureInternalMonitoringPipelineSinkDescription: AzureInternalMonitoringPipelineSinkDescription,
        AutoScalingResourceMetric: AutoScalingResourceMetric
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Service. */
    var Service = /** @class */ (function () {
        /**
         * Create a Service.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function Service(client) {
            this.client = client;
        }
        Service.prototype.get = function (resourceGroupName$$1, applicationResourceName$$1, serviceResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                serviceResourceName: serviceResourceName$$1,
                options: options
            }, getOperationSpec$6, callback);
        };
        Service.prototype.list = function (resourceGroupName$$1, applicationResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                options: options
            }, listOperationSpec$2, callback);
        };
        Service.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return Service;
    }());
    // Operation Specifications
    var serializer$7 = new msRest.Serializer(Mappers$7);
    var getOperationSpec$6 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services/{serviceResourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName,
            serviceResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$7
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$7
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResourceDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$7
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$8 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ServiceReplicaDescription: ServiceReplicaDescription,
        ServiceReplicaProperties: ServiceReplicaProperties,
        ContainerCodePackageProperties: ContainerCodePackageProperties,
        ImageRegistryCredential: ImageRegistryCredential,
        EnvironmentVariable: EnvironmentVariable,
        Setting: Setting,
        ContainerLabel: ContainerLabel,
        EndpointProperties: EndpointProperties,
        ResourceRequirements: ResourceRequirements,
        ResourceRequests: ResourceRequests,
        ResourceLimits: ResourceLimits,
        VolumeReference: VolumeReference,
        ApplicationScopedVolume: ApplicationScopedVolume,
        ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
        DiagnosticsRef: DiagnosticsRef,
        ReliableCollectionsRef: ReliableCollectionsRef,
        ContainerInstanceView: ContainerInstanceView,
        ContainerState: ContainerState,
        ContainerEvent: ContainerEvent,
        NetworkRef: NetworkRef,
        EndpointRef: EndpointRef,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel,
        ServiceReplicaDescriptionList: ServiceReplicaDescriptionList,
        ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceReplica. */
    var ServiceReplica = /** @class */ (function () {
        /**
         * Create a ServiceReplica.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function ServiceReplica(client) {
            this.client = client;
        }
        ServiceReplica.prototype.get = function (resourceGroupName$$1, applicationResourceName$$1, serviceResourceName$$1, replicaName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                serviceResourceName: serviceResourceName$$1,
                replicaName: replicaName$$1,
                options: options
            }, getOperationSpec$7, callback);
        };
        ServiceReplica.prototype.list = function (resourceGroupName$$1, applicationResourceName$$1, serviceResourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                serviceResourceName: serviceResourceName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        ServiceReplica.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$3, callback);
        };
        return ServiceReplica;
    }());
    // Operation Specifications
    var serializer$8 = new msRest.Serializer(Mappers$8);
    var getOperationSpec$7 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services/{serviceResourceName}/replicas/{replicaName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName,
            serviceResourceName,
            replicaName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceReplicaDescription
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services/{serviceResourceName}/replicas",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName,
            serviceResourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceReplicaDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };
    var listNextOperationSpec$3 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceReplicaDescriptionList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$8
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$9 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        ContainerLogs: ContainerLogs,
        ErrorModel: ErrorModel,
        ErrorErrorModel: ErrorErrorModel,
        ErrorDetailsModel: ErrorDetailsModel
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CodePackage. */
    var CodePackage = /** @class */ (function () {
        /**
         * Create a CodePackage.
         * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
         */
        function CodePackage(client) {
            this.client = client;
        }
        CodePackage.prototype.getContainerLogs = function (resourceGroupName$$1, applicationResourceName$$1, serviceResourceName$$1, replicaName$$1, codePackageName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                applicationResourceName: applicationResourceName$$1,
                serviceResourceName: serviceResourceName$$1,
                replicaName: replicaName$$1,
                codePackageName: codePackageName$$1,
                options: options
            }, getContainerLogsOperationSpec, callback);
        };
        return CodePackage;
    }());
    // Operation Specifications
    var serializer$9 = new msRest.Serializer(Mappers$9);
    var getContainerLogsOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services/{serviceResourceName}/replicas/{replicaName}/codePackages/{codePackageName}/logs",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            applicationResourceName,
            serviceResourceName,
            replicaName,
            codePackageName
        ],
        queryParameters: [
            apiVersion,
            tail
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ContainerLogs
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$9
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-servicefabricmesh";
    var packageVersion = "2.2.1";
    var ServiceFabricMeshManagementClientContext = /** @class */ (function (_super) {
        __extends(ServiceFabricMeshManagementClientContext, _super);
        /**
         * Initializes a new instance of the ServiceFabricMeshManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The customer subscription identifier
         * @param [options] The parameter options
         */
        function ServiceFabricMeshManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-09-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ServiceFabricMeshManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ServiceFabricMeshManagementClient = /** @class */ (function (_super) {
        __extends(ServiceFabricMeshManagementClient, _super);
        /**
         * Initializes a new instance of the ServiceFabricMeshManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The customer subscription identifier
         * @param [options] The parameter options
         */
        function ServiceFabricMeshManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new Operations(_this);
            _this.secret = new Secret(_this);
            _this.secretValue = new SecretValueOperations(_this);
            _this.volume = new Volume(_this);
            _this.network = new Network(_this);
            _this.gateway = new Gateway(_this);
            _this.application = new Application(_this);
            _this.service = new Service(_this);
            _this.serviceReplica = new ServiceReplica(_this);
            _this.codePackage = new CodePackage(_this);
            return _this;
        }
        return ServiceFabricMeshManagementClient;
    }(ServiceFabricMeshManagementClientContext));

    exports.ServiceFabricMeshManagementClient = ServiceFabricMeshManagementClient;
    exports.ServiceFabricMeshManagementClientContext = ServiceFabricMeshManagementClientContext;
    exports.ServiceFabricMeshManagementModels = index;
    exports.ServiceFabricMeshManagementMappers = mappers;
    exports.Operations = Operations;
    exports.Secret = Secret;
    exports.SecretValueOperations = SecretValueOperations;
    exports.Volume = Volume;
    exports.Network = Network;
    exports.Gateway = Gateway;
    exports.Application = Application;
    exports.Service = Service;
    exports.ServiceReplica = ServiceReplica;
    exports.CodePackage = CodePackage;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-servicefabricmesh.js.map
