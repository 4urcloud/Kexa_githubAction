import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ServiceFabricMeshManagementClientContext } from "../serviceFabricMeshManagementClientContext";
/** Class representing a Volume. */
export declare class Volume {
    private readonly client;
    /**
     * Create a Volume.
     * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
     */
    constructor(client: ServiceFabricMeshManagementClientContext);
    /**
     * Creates a volume resource with the specified name, description and properties. If a volume
     * resource with the same name exists, then it is updated with the specified description and
     * properties.
     * @summary Creates or updates a volume resource.
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param volumeResourceDescription Description for creating a Volume resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.VolumeCreateResponse>
     */
    create(resourceGroupName: string, volumeResourceName: string, volumeResourceDescription: Models.VolumeResourceDescription, options?: msRest.RequestOptionsBase): Promise<Models.VolumeCreateResponse>;
    /**
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param volumeResourceDescription Description for creating a Volume resource.
     * @param callback The callback
     */
    create(resourceGroupName: string, volumeResourceName: string, volumeResourceDescription: Models.VolumeResourceDescription, callback: msRest.ServiceCallback<Models.VolumeResourceDescription>): void;
    /**
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param volumeResourceDescription Description for creating a Volume resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(resourceGroupName: string, volumeResourceName: string, volumeResourceDescription: Models.VolumeResourceDescription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeResourceDescription>): void;
    /**
     * Gets the information about the volume resource with the given name. The information include the
     * description and other properties of the volume.
     * @summary Gets the volume resource with the given name.
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param [options] The optional parameters
     * @returns Promise<Models.VolumeGetResponse>
     */
    get(resourceGroupName: string, volumeResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.VolumeGetResponse>;
    /**
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param callback The callback
     */
    get(resourceGroupName: string, volumeResourceName: string, callback: msRest.ServiceCallback<Models.VolumeResourceDescription>): void;
    /**
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, volumeResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeResourceDescription>): void;
    /**
     * Deletes the volume resource identified by the name.
     * @summary Deletes the volume resource.
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, volumeResourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, volumeResourceName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName Azure resource group name
     * @param volumeResourceName The identity of the volume.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, volumeResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets the information about all volume resources in a given resource group. The information
     * include the description and other properties of the Volume.
     * @summary Gets all the volume resources in a given resource group.
     * @param resourceGroupName Azure resource group name
     * @param [options] The optional parameters
     * @returns Promise<Models.VolumeListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.VolumeListByResourceGroupResponse>;
    /**
     * @param resourceGroupName Azure resource group name
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
    /**
     * @param resourceGroupName Azure resource group name
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
    /**
     * Gets the information about all volume resources in a given resource group. The information
     * include the description and other properties of the volume.
     * @summary Gets all the volume resources in a given subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.VolumeListBySubscriptionResponse>
     */
    listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.VolumeListBySubscriptionResponse>;
    /**
     * @param callback The callback
     */
    listBySubscription(callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
    /**
     * Gets the information about all volume resources in a given resource group. The information
     * include the description and other properties of the Volume.
     * @summary Gets all the volume resources in a given resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VolumeListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VolumeListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
    /**
     * Gets the information about all volume resources in a given resource group. The information
     * include the description and other properties of the volume.
     * @summary Gets all the volume resources in a given subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.VolumeListBySubscriptionNextResponse>
     */
    listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VolumeListBySubscriptionNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VolumeResourceDescriptionList>): void;
}
//# sourceMappingURL=volume.d.ts.map