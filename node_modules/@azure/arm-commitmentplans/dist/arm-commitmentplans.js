/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmCommitmentplans = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var SkuCapacity = {
        serializedName: "SkuCapacity",
        type: {
            name: "Composite",
            className: "SkuCapacity",
            modelProperties: {
                minimum: {
                    readOnly: true,
                    serializedName: "minimum",
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    readOnly: true,
                    serializedName: "maximum",
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    readOnly: true,
                    serializedName: "default",
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    readOnly: true,
                    serializedName: "scaleType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuCapability = {
        serializedName: "SkuCapability",
        type: {
            name: "Composite",
            className: "SkuCapability",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuCost = {
        serializedName: "SkuCost",
        type: {
            name: "Composite",
            className: "SkuCost",
            modelProperties: {
                meterID: {
                    readOnly: true,
                    serializedName: "meterID",
                    type: {
                        name: "String"
                    }
                },
                quantity: {
                    readOnly: true,
                    serializedName: "quantity",
                    type: {
                        name: "Number"
                    }
                },
                extendedUnit: {
                    readOnly: true,
                    serializedName: "extendedUnit",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SkuRestrictions = {
        serializedName: "SkuRestrictions",
        type: {
            name: "Composite",
            className: "SkuRestrictions",
            modelProperties: {
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                values: {
                    readOnly: true,
                    serializedName: "values",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                reasonCode: {
                    readOnly: true,
                    serializedName: "reasonCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CatalogSku = {
        serializedName: "CatalogSku",
        type: {
            name: "Composite",
            className: "CatalogSku",
            modelProperties: {
                resourceType: {
                    readOnly: true,
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                },
                locations: {
                    readOnly: true,
                    serializedName: "locations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                capacity: {
                    readOnly: true,
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "SkuCapacity"
                    }
                },
                capabilities: {
                    readOnly: true,
                    serializedName: "capabilities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuCapability"
                            }
                        }
                    }
                },
                costs: {
                    readOnly: true,
                    serializedName: "costs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuCost"
                            }
                        }
                    }
                },
                restrictions: {
                    readOnly: true,
                    serializedName: "restrictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SkuRestrictions"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CommitmentAssociationProperties = {
        serializedName: "CommitmentAssociationProperties",
        type: {
            name: "Composite",
            className: "CommitmentAssociationProperties",
            modelProperties: {
                associatedResourceId: {
                    readOnly: true,
                    serializedName: "associatedResourceId",
                    type: {
                        name: "String"
                    }
                },
                commitmentPlanId: {
                    readOnly: true,
                    serializedName: "commitmentPlanId",
                    type: {
                        name: "String"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "creationDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var CommitmentAssociation = {
        serializedName: "CommitmentAssociation",
        type: {
            name: "Composite",
            className: "CommitmentAssociation",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CommitmentAssociationProperties"
                    }
                } })
        }
    };
    var ResourceSku = {
        serializedName: "ResourceSku",
        type: {
            name: "Composite",
            className: "ResourceSku",
            modelProperties: {
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MoveCommitmentAssociationRequest = {
        serializedName: "MoveCommitmentAssociationRequest",
        type: {
            name: "Composite",
            className: "MoveCommitmentAssociationRequest",
            modelProperties: {
                destinationPlanId: {
                    serializedName: "destinationPlanId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CommitmentPlanPatchPayload = {
        serializedName: "CommitmentPlanPatchPayload",
        type: {
            name: "Composite",
            className: "CommitmentPlanPatchPayload",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                }
            }
        }
    };
    var PlanQuantity = {
        serializedName: "PlanQuantity",
        type: {
            name: "Composite",
            className: "PlanQuantity",
            modelProperties: {
                allowance: {
                    readOnly: true,
                    serializedName: "allowance",
                    type: {
                        name: "Number"
                    }
                },
                amount: {
                    readOnly: true,
                    serializedName: "amount",
                    type: {
                        name: "Number"
                    }
                },
                includedQuantityMeter: {
                    readOnly: true,
                    serializedName: "includedQuantityMeter",
                    type: {
                        name: "String"
                    }
                },
                overageMeter: {
                    readOnly: true,
                    serializedName: "overageMeter",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CommitmentPlanProperties = {
        serializedName: "CommitmentPlanProperties",
        type: {
            name: "Composite",
            className: "CommitmentPlanProperties",
            modelProperties: {
                chargeForOverage: {
                    readOnly: true,
                    serializedName: "chargeForOverage",
                    type: {
                        name: "Boolean"
                    }
                },
                chargeForPlan: {
                    readOnly: true,
                    serializedName: "chargeForPlan",
                    type: {
                        name: "Boolean"
                    }
                },
                creationDate: {
                    readOnly: true,
                    serializedName: "creationDate",
                    type: {
                        name: "DateTime"
                    }
                },
                includedQuantities: {
                    readOnly: true,
                    serializedName: "includedQuantities",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "PlanQuantity"
                            }
                        }
                    }
                },
                maxAssociationLimit: {
                    readOnly: true,
                    serializedName: "maxAssociationLimit",
                    type: {
                        name: "Number"
                    }
                },
                maxCapacityLimit: {
                    readOnly: true,
                    serializedName: "maxCapacityLimit",
                    type: {
                        name: "Number"
                    }
                },
                minCapacityLimit: {
                    readOnly: true,
                    serializedName: "minCapacityLimit",
                    type: {
                        name: "Number"
                    }
                },
                planMeter: {
                    readOnly: true,
                    serializedName: "planMeter",
                    type: {
                        name: "String"
                    }
                },
                refillFrequencyInDays: {
                    readOnly: true,
                    serializedName: "refillFrequencyInDays",
                    type: {
                        name: "Number"
                    }
                },
                suspendPlanOnOverage: {
                    readOnly: true,
                    serializedName: "suspendPlanOnOverage",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var CommitmentPlan = {
        serializedName: "CommitmentPlan",
        type: {
            name: "Composite",
            className: "CommitmentPlan",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CommitmentPlanProperties"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "ResourceSku"
                    }
                } })
        }
    };
    var PlanUsageHistory = {
        serializedName: "PlanUsageHistory",
        type: {
            name: "Composite",
            className: "PlanUsageHistory",
            modelProperties: {
                planDeletionOverage: {
                    serializedName: "planDeletionOverage",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                planMigrationOverage: {
                    serializedName: "planMigrationOverage",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                planQuantitiesAfterUsage: {
                    serializedName: "planQuantitiesAfterUsage",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                planQuantitiesBeforeUsage: {
                    serializedName: "planQuantitiesBeforeUsage",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                planUsageOverage: {
                    serializedName: "planUsageOverage",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                usage: {
                    serializedName: "usage",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                usageDate: {
                    serializedName: "usageDate",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var SkuListResult = {
        serializedName: "SkuListResult",
        type: {
            name: "Composite",
            className: "SkuListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CatalogSku"
                            }
                        }
                    }
                }
            }
        }
    };
    var CommitmentAssociationListResult = {
        serializedName: "CommitmentAssociationListResult",
        type: {
            name: "Composite",
            className: "CommitmentAssociationListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CommitmentAssociation"
                            }
                        }
                    }
                }
            }
        }
    };
    var CommitmentPlanListResult = {
        serializedName: "CommitmentPlanListResult",
        type: {
            name: "Composite",
            className: "CommitmentPlanListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CommitmentPlan"
                            }
                        }
                    }
                }
            }
        }
    };
    var PlanUsageHistoryListResult = {
        serializedName: "PlanUsageHistoryListResult",
        type: {
            name: "Composite",
            className: "PlanUsageHistoryListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PlanUsageHistory"
                            }
                        }
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        SkuCapacity: SkuCapacity,
        SkuCapability: SkuCapability,
        SkuCost: SkuCost,
        SkuRestrictions: SkuRestrictions,
        CatalogSku: CatalogSku,
        Resource: Resource,
        CommitmentAssociationProperties: CommitmentAssociationProperties,
        CommitmentAssociation: CommitmentAssociation,
        ResourceSku: ResourceSku,
        MoveCommitmentAssociationRequest: MoveCommitmentAssociationRequest,
        CommitmentPlanPatchPayload: CommitmentPlanPatchPayload,
        PlanQuantity: PlanQuantity,
        CommitmentPlanProperties: CommitmentPlanProperties,
        CommitmentPlan: CommitmentPlan,
        PlanUsageHistory: PlanUsageHistory,
        SkuListResult: SkuListResult,
        CommitmentAssociationListResult: CommitmentAssociationListResult,
        CommitmentPlanListResult: CommitmentPlanListResult,
        PlanUsageHistoryListResult: PlanUsageHistoryListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        SkuListResult: SkuListResult,
        CatalogSku: CatalogSku,
        SkuCapacity: SkuCapacity,
        SkuCapability: SkuCapability,
        SkuCost: SkuCost,
        SkuRestrictions: SkuRestrictions,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var commitmentAssociationName = {
        parameterPath: "commitmentAssociationName",
        mapper: {
            required: true,
            serializedName: "commitmentAssociationName",
            type: {
                name: "String"
            }
        }
    };
    var commitmentPlanName = {
        parameterPath: "commitmentPlanName",
        mapper: {
            required: true,
            serializedName: "commitmentPlanName",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var skipToken = {
        parameterPath: [
            "options",
            "skipToken"
        ],
        mapper: {
            serializedName: "$skipToken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Skus. */
    var Skus = /** @class */ (function () {
        /**
         * Create a Skus.
         * @param {AzureMLCommitmentPlansManagementClientContext} client Reference to the service client.
         */
        function Skus(client) {
            this.client = client;
        }
        Skus.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Skus;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/skus",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SkuListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        CommitmentAssociation: CommitmentAssociation,
        Resource: Resource,
        BaseResource: BaseResource,
        CommitmentAssociationProperties: CommitmentAssociationProperties,
        CloudError: CloudError,
        CommitmentAssociationListResult: CommitmentAssociationListResult,
        MoveCommitmentAssociationRequest: MoveCommitmentAssociationRequest,
        CommitmentPlan: CommitmentPlan,
        CommitmentPlanProperties: CommitmentPlanProperties,
        PlanQuantity: PlanQuantity,
        ResourceSku: ResourceSku
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CommitmentAssociations. */
    var CommitmentAssociations = /** @class */ (function () {
        /**
         * Create a CommitmentAssociations.
         * @param {AzureMLCommitmentPlansManagementClientContext} client Reference to the service client.
         */
        function CommitmentAssociations(client) {
            this.client = client;
        }
        CommitmentAssociations.prototype.get = function (resourceGroupName$$1, commitmentPlanName$$1, commitmentAssociationName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                commitmentAssociationName: commitmentAssociationName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        CommitmentAssociations.prototype.list = function (resourceGroupName$$1, commitmentPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                options: options
            }, listOperationSpec$1, callback);
        };
        CommitmentAssociations.prototype.move = function (resourceGroupName$$1, commitmentPlanName$$1, commitmentAssociationName$$1, movePayload, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                commitmentAssociationName: commitmentAssociationName$$1,
                movePayload: movePayload,
                options: options
            }, moveOperationSpec, callback);
        };
        CommitmentAssociations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return CommitmentAssociations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName,
            commitmentAssociationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentAssociation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName
        ],
        queryParameters: [
            skipToken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentAssociationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var moveOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/commitmentAssociations/{commitmentAssociationName}/move",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName,
            commitmentAssociationName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "movePayload",
            mapper: __assign(__assign({}, MoveCommitmentAssociationRequest), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CommitmentAssociation
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentAssociationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        CommitmentPlan: CommitmentPlan,
        Resource: Resource,
        BaseResource: BaseResource,
        CommitmentPlanProperties: CommitmentPlanProperties,
        PlanQuantity: PlanQuantity,
        ResourceSku: ResourceSku,
        CloudError: CloudError,
        CommitmentPlanPatchPayload: CommitmentPlanPatchPayload,
        CommitmentPlanListResult: CommitmentPlanListResult,
        CommitmentAssociation: CommitmentAssociation,
        CommitmentAssociationProperties: CommitmentAssociationProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a CommitmentPlans. */
    var CommitmentPlans = /** @class */ (function () {
        /**
         * Create a CommitmentPlans.
         * @param {AzureMLCommitmentPlansManagementClientContext} client Reference to the service client.
         */
        function CommitmentPlans(client) {
            this.client = client;
        }
        CommitmentPlans.prototype.get = function (resourceGroupName$$1, commitmentPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                options: options
            }, getOperationSpec$1, callback);
        };
        CommitmentPlans.prototype.createOrUpdate = function (createOrUpdatePayload, resourceGroupName$$1, commitmentPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                createOrUpdatePayload: createOrUpdatePayload,
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        CommitmentPlans.prototype.remove = function (resourceGroupName$$1, commitmentPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                options: options
            }, removeOperationSpec, callback);
        };
        CommitmentPlans.prototype.patch = function (patchPayload, resourceGroupName$$1, commitmentPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                patchPayload: patchPayload,
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                options: options
            }, patchOperationSpec, callback);
        };
        CommitmentPlans.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        CommitmentPlans.prototype.listInResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listInResourceGroupOperationSpec, callback);
        };
        CommitmentPlans.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        CommitmentPlans.prototype.listInResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listInResourceGroupNextOperationSpec, callback);
        };
        return CommitmentPlans;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentPlan
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "createOrUpdatePayload",
            mapper: __assign(__assign({}, CommitmentPlan), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CommitmentPlan
            },
            201: {
                bodyMapper: CommitmentPlan
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var removeOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var patchOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "patchPayload",
            mapper: __assign(__assign({}, CommitmentPlanPatchPayload), { required: true })
        },
        responses: {
            200: {
                bodyMapper: CommitmentPlan
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/commitmentPlans",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            skipToken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listInResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            skipToken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listInResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CommitmentPlanListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        PlanUsageHistoryListResult: PlanUsageHistoryListResult,
        PlanUsageHistory: PlanUsageHistory,
        CloudError: CloudError
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a UsageHistory. */
    var UsageHistory = /** @class */ (function () {
        /**
         * Create a UsageHistory.
         * @param {AzureMLCommitmentPlansManagementClientContext} client Reference to the service client.
         */
        function UsageHistory(client) {
            this.client = client;
        }
        UsageHistory.prototype.list = function (resourceGroupName$$1, commitmentPlanName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                commitmentPlanName: commitmentPlanName$$1,
                options: options
            }, listOperationSpec$3, callback);
        };
        UsageHistory.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        return UsageHistory;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/commitmentPlans/{commitmentPlanName}/usageHistory",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            commitmentPlanName
        ],
        queryParameters: [
            skipToken,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PlanUsageHistoryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PlanUsageHistoryListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-commitmentplans";
    var packageVersion = "1.3.1";
    var AzureMLCommitmentPlansManagementClientContext = /** @class */ (function (_super) {
        __extends(AzureMLCommitmentPlansManagementClientContext, _super);
        /**
         * Initializes a new instance of the AzureMLCommitmentPlansManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function AzureMLCommitmentPlansManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2016-05-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureMLCommitmentPlansManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureMLCommitmentPlansManagementClient = /** @class */ (function (_super) {
        __extends(AzureMLCommitmentPlansManagementClient, _super);
        /**
         * Initializes a new instance of the AzureMLCommitmentPlansManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function AzureMLCommitmentPlansManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.skus = new Skus(_this);
            _this.commitmentAssociations = new CommitmentAssociations(_this);
            _this.commitmentPlans = new CommitmentPlans(_this);
            _this.usageHistory = new UsageHistory(_this);
            return _this;
        }
        return AzureMLCommitmentPlansManagementClient;
    }(AzureMLCommitmentPlansManagementClientContext));

    exports.AzureMLCommitmentPlansManagementClient = AzureMLCommitmentPlansManagementClient;
    exports.AzureMLCommitmentPlansManagementClientContext = AzureMLCommitmentPlansManagementClientContext;
    exports.AzureMLCommitmentPlansManagementModels = index;
    exports.AzureMLCommitmentPlansManagementMappers = mappers;
    exports.Skus = Skus;
    exports.CommitmentAssociations = CommitmentAssociations;
    exports.CommitmentPlans = CommitmentPlans;
    exports.UsageHistory = UsageHistory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-commitmentplans.js.map
