/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Products operations. */
export class ProductsImpl {
    /**
     * Initialize a new instance of the class Products class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the products for a customer. These don't include products billed based on usage.The operation
     * is supported only for billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    listByCustomer(billingAccountName, customerName, options) {
        const iter = this.listByCustomerPagingAll(billingAccountName, customerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByCustomerPagingPage(billingAccountName, customerName, options, settings);
            }
        };
    }
    listByCustomerPagingPage(billingAccountName, customerName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByCustomerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByCustomer(billingAccountName, customerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByCustomerNext(billingAccountName, customerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByCustomerPagingAll(billingAccountName, customerName, options) {
        return __asyncGenerator(this, arguments, function* listByCustomerPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByCustomerPagingPage(billingAccountName, customerName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the products for a billing account. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the products for a billing profile. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return __asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the products for an invoice section. These don't include products billed based on usage. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByInvoiceSectionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return __asyncGenerator(this, arguments, function* listByInvoiceSectionPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Lists the products for a customer. These don't include products billed based on usage.The operation
     * is supported only for billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    _listByCustomer(billingAccountName, customerName, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, options }, listByCustomerOperationSpec);
    }
    /**
     * Lists the products for a billing account. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec);
    }
    /**
     * Lists the products for a billing profile. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec);
    }
    /**
     * Lists the products for an invoice section. These don't include products billed based on usage. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    _listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listByInvoiceSectionOperationSpec);
    }
    /**
     * Gets a product by ID. The operation is supported only for billing accounts with agreement type
     * Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param options The options parameters.
     */
    get(billingAccountName, productName, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, options }, getOperationSpec);
    }
    /**
     * Updates the properties of a Product. Currently, auto renew can be updated. The operation is
     * supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the update product operation.
     * @param options The options parameters.
     */
    update(billingAccountName, productName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, parameters, options }, updateOperationSpec);
    }
    /**
     * Moves a product's charges to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported only for products that
     * are purchased with a recurring charge and for billing accounts with agreement type Microsoft
     * Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the move product operation.
     * @param options The options parameters.
     */
    move(billingAccountName, productName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, parameters, options }, moveOperationSpec);
    }
    /**
     * Validates if a product's charges can be moved to a new invoice section. This operation is supported
     * only for products that are purchased with a recurring charge and for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the validate move eligibility operation.
     * @param options The options parameters.
     */
    validateMove(billingAccountName, productName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, parameters, options }, validateMoveOperationSpec);
    }
    /**
     * ListByCustomerNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
     * @param options The options parameters.
     */
    _listByCustomerNext(billingAccountName, customerName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, nextLink, options }, listByCustomerNextOperationSpec);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec);
    }
    /**
     * ListByInvoiceSectionNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSection method.
     * @param options The options parameters.
     */
    _listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listByInvoiceSectionNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByCustomerOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.customerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.billingAccountName],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByInvoiceSectionOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Product
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.productName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Product
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters6,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.productName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const moveOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}/move",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Product
        },
        202: {
            headersMapper: Mappers.ProductsMoveHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters7,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.productName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const validateMoveOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}/validateMoveEligibility",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ValidateProductTransferEligibilityResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters7,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.productName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByCustomerNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink,
        Parameters.customerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingAccountNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByInvoiceSectionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProductsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink,
        Parameters.billingProfileName,
        Parameters.invoiceSectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=products.js.map