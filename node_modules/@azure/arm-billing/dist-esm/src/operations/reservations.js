/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Reservations operations. */
export class ReservationsImpl {
    /**
     * Initialize a new instance of the class Reservations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the reservations for a billing account and the roll up counts of reservations group by
     * provisioning states.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the reservations for a billing profile and the roll up counts of reservations group by
     * provisioning state.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return __asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the reservations for a billing account and the roll up counts of reservations group by
     * provisioning states.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec);
    }
    /**
     * Lists the reservations for a billing profile and the roll up counts of reservations group by
     * provisioning state.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/reservations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ReservationsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.orderby,
        Parameters.refreshSummary,
        Parameters.selectedState
    ],
    urlParameters: [Parameters.$host, Parameters.billingAccountName],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/reservations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ReservationsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.orderby,
        Parameters.refreshSummary,
        Parameters.selectedState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingAccountNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ReservationsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.orderby,
        Parameters.refreshSummary,
        Parameters.selectedState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ReservationsListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.orderby,
        Parameters.refreshSummary,
        Parameters.selectedState
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=reservations.js.map