import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Customers } from "../operationsInterfaces";
import { BillingManagementClient } from "../billingManagementClient";
import { Customer, CustomersListByBillingProfileOptionalParams, CustomersListByBillingAccountOptionalParams, CustomersGetOptionalParams, CustomersGetResponse } from "../models";
/** Class containing Customers operations. */
export declare class CustomersImpl implements Customers {
    private readonly client;
    /**
     * Initialize a new instance of the class Customers class.
     * @param client Reference to the service client
     */
    constructor(client: BillingManagementClient);
    /**
     * Lists the customers that are billed to a billing profile. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: CustomersListByBillingProfileOptionalParams): PagedAsyncIterableIterator<Customer>;
    private listByBillingProfilePagingPage;
    private listByBillingProfilePagingAll;
    /**
     * Lists the customers that are billed to a billing account. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: CustomersListByBillingAccountOptionalParams): PagedAsyncIterableIterator<Customer>;
    private listByBillingAccountPagingPage;
    private listByBillingAccountPagingAll;
    /**
     * Lists the customers that are billed to a billing profile. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    private _listByBillingProfile;
    /**
     * Lists the customers that are billed to a billing account. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    private _listByBillingAccount;
    /**
     * Gets a customer by its ID. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    get(billingAccountName: string, customerName: string, options?: CustomersGetOptionalParams): Promise<CustomersGetResponse>;
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    private _listByBillingProfileNext;
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    private _listByBillingAccountNext;
}
//# sourceMappingURL=customers.d.ts.map