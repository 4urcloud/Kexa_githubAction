/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing Invoices operations. */
export class InvoicesImpl {
    /**
     * Initialize a new instance of the class Invoices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, periodStartDate, periodEndDate, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, periodStartDate, periodEndDate, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, periodStartDate, periodEndDate, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, periodStartDate, periodEndDate, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingAccount(billingAccountName, periodStartDate, periodEndDate, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingAccountNext(billingAccountName, periodStartDate, periodEndDate, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, periodStartDate, periodEndDate, options) {
        return __asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByBillingAccountPagingPage(billingAccountName, periodStartDate, periodEndDate, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingProfile(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingProfileNext(billingAccountName, billingProfileName, periodStartDate, periodEndDate, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options) {
        return __asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the invoices for a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param options The options parameters.
     */
    listByBillingSubscription(periodStartDate, periodEndDate, options) {
        const iter = this.listByBillingSubscriptionPagingAll(periodStartDate, periodEndDate, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingSubscriptionPagingPage(periodStartDate, periodEndDate, options, settings);
            }
        };
    }
    listByBillingSubscriptionPagingPage(periodStartDate, periodEndDate, options, settings) {
        return __asyncGenerator(this, arguments, function* listByBillingSubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByBillingSubscription(periodStartDate, periodEndDate, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByBillingSubscriptionNext(periodStartDate, periodEndDate, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByBillingSubscriptionPagingAll(periodStartDate, periodEndDate, options) {
        return __asyncGenerator(this, arguments, function* listByBillingSubscriptionPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listByBillingSubscriptionPagingPage(periodStartDate, periodEndDate, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, periodStartDate, periodEndDate, options) {
        return this.client.sendOperationRequest({ billingAccountName, periodStartDate, periodEndDate, options }, listByBillingAccountOperationSpec);
    }
    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            periodStartDate,
            periodEndDate,
            options
        }, listByBillingProfileOperationSpec);
    }
    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    get(billingAccountName, invoiceName, options) {
        return this.client.sendOperationRequest({ billingAccountName, invoiceName, options }, getOperationSpec);
    }
    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft
     * Partner Agreement or Microsoft Customer Agreement.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    getById(invoiceName, options) {
        return this.client.sendOperationRequest({ invoiceName, options }, getByIdOperationSpec);
    }
    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadInvoice(billingAccountName, invoiceName, downloadToken, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { billingAccountName, invoiceName, downloadToken, options }, downloadInvoiceOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadInvoiceAndWait(billingAccountName, invoiceName, downloadToken, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadInvoice(billingAccountName, invoiceName, downloadToken, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file. The operation is supported for billing accounts with agreement type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingProfileInvoices(billingAccountName, downloadUrls, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { billingAccountName, downloadUrls, options }, downloadMultipleBillingProfileInvoicesOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file. The operation is supported for billing accounts with agreement type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingProfileInvoicesAndWait(billingAccountName, downloadUrls, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadMultipleBillingProfileInvoices(billingAccountName, downloadUrls, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the invoices for a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param options The options parameters.
     */
    _listByBillingSubscription(periodStartDate, periodEndDate, options) {
        return this.client.sendOperationRequest({ periodStartDate, periodEndDate, options }, listByBillingSubscriptionOperationSpec);
    }
    /**
     * Gets an invoice by subscription ID and invoice ID.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    getBySubscriptionAndInvoiceId(invoiceName, options) {
        return this.client.sendOperationRequest({ invoiceName, options }, getBySubscriptionAndInvoiceIdOperationSpec);
    }
    /**
     * Gets a URL to download an invoice.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadBillingSubscriptionInvoice(invoiceName, downloadToken, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { invoiceName, downloadToken, options }, downloadBillingSubscriptionInvoiceOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download an invoice.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadBillingSubscriptionInvoiceAndWait(invoiceName, downloadToken, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadBillingSubscriptionInvoice(invoiceName, downloadToken, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingSubscriptionInvoices(downloadUrls, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { downloadUrls, options }, downloadMultipleBillingSubscriptionInvoicesOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingSubscriptionInvoicesAndWait(downloadUrls, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadMultipleBillingSubscriptionInvoices(downloadUrls, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, periodStartDate, periodEndDate, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, periodStartDate, periodEndDate, nextLink, options }, listByBillingAccountNextOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, periodStartDate, periodEndDate, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            periodStartDate,
            periodEndDate,
            nextLink,
            options
        }, listByBillingProfileNextOperationSpec);
    }
    /**
     * ListByBillingSubscriptionNext
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingSubscription
     *                 method.
     * @param options The options parameters.
     */
    _listByBillingSubscriptionNext(periodStartDate, periodEndDate, nextLink, options) {
        return this.client.sendOperationRequest({ periodStartDate, periodEndDate, nextLink, options }, listByBillingSubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.InvoiceListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.periodStartDate,
        Parameters.periodEndDate
    ],
    urlParameters: [Parameters.$host, Parameters.billingAccountName],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.InvoiceListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.periodStartDate,
        Parameters.periodEndDate
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Invoice
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.invoiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getByIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/invoices/{invoiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Invoice
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.invoiceName],
    headerParameters: [Parameters.accept],
    serializer
};
const downloadInvoiceOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DownloadUrl
        },
        201: {
            bodyMapper: Mappers.DownloadUrl
        },
        202: {
            bodyMapper: Mappers.DownloadUrl
        },
        204: {
            bodyMapper: Mappers.DownloadUrl
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.downloadToken],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.invoiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const downloadMultipleBillingProfileInvoicesOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/downloadDocuments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DownloadUrl
        },
        201: {
            bodyMapper: Mappers.DownloadUrl
        },
        202: {
            bodyMapper: Mappers.DownloadUrl
        },
        204: {
            bodyMapper: Mappers.DownloadUrl
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.downloadUrls,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.billingAccountName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByBillingSubscriptionOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.InvoiceListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.periodStartDate,
        Parameters.periodEndDate
    ],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getBySubscriptionAndInvoiceIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Invoice
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.invoiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const downloadBillingSubscriptionInvoiceOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DownloadUrl
        },
        201: {
            bodyMapper: Mappers.DownloadUrl
        },
        202: {
            bodyMapper: Mappers.DownloadUrl
        },
        204: {
            bodyMapper: Mappers.DownloadUrl
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.downloadToken],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.invoiceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const downloadMultipleBillingSubscriptionInvoicesOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/downloadDocuments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DownloadUrl
        },
        201: {
            bodyMapper: Mappers.DownloadUrl
        },
        202: {
            bodyMapper: Mappers.DownloadUrl
        },
        204: {
            bodyMapper: Mappers.DownloadUrl
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.downloadUrls,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByBillingAccountNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.InvoiceListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.periodStartDate,
        Parameters.periodEndDate
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingProfileNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.InvoiceListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.periodStartDate,
        Parameters.periodEndDate
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.nextLink,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByBillingSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.InvoiceListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.periodStartDate,
        Parameters.periodEndDate
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=invoices.js.map