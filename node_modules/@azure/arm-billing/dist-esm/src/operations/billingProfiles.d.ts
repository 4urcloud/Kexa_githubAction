import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BillingProfiles } from "../operationsInterfaces";
import { BillingManagementClient } from "../billingManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { BillingProfile, BillingProfilesListByBillingAccountOptionalParams, BillingProfilesGetOptionalParams, BillingProfilesGetResponse, BillingProfilesCreateOrUpdateOptionalParams, BillingProfilesCreateOrUpdateResponse } from "../models";
/** Class containing BillingProfiles operations. */
export declare class BillingProfilesImpl implements BillingProfiles {
    private readonly client;
    /**
     * Initialize a new instance of the class BillingProfiles class.
     * @param client Reference to the service client
     */
    constructor(client: BillingManagementClient);
    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: BillingProfilesListByBillingAccountOptionalParams): PagedAsyncIterableIterator<BillingProfile>;
    private listByBillingAccountPagingPage;
    private listByBillingAccountPagingAll;
    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    private _listByBillingAccount;
    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    get(billingAccountName: string, billingProfileName: string, options?: BillingProfilesGetOptionalParams): Promise<BillingProfilesGetResponse>;
    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(billingAccountName: string, billingProfileName: string, parameters: BillingProfile, options?: BillingProfilesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BillingProfilesCreateOrUpdateResponse>, BillingProfilesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(billingAccountName: string, billingProfileName: string, parameters: BillingProfile, options?: BillingProfilesCreateOrUpdateOptionalParams): Promise<BillingProfilesCreateOrUpdateResponse>;
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    private _listByBillingAccountNext;
}
//# sourceMappingURL=billingProfiles.d.ts.map