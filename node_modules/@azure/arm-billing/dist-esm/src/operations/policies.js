/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Policies operations. */
export class PoliciesImpl {
    /**
     * Initialize a new instance of the class Policies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the policies for a billing profile. This operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    getByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, getByBillingProfileOperationSpec);
    }
    /**
     * Updates the policies for a billing profile. This operation is supported only for billing accounts
     * with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters Request parameters that are provided to the update policies operation.
     * @param options The options parameters.
     */
    update(billingAccountName, billingProfileName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, parameters, options }, updateOperationSpec);
    }
    /**
     * Lists the policies for a customer. This operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    getByCustomer(billingAccountName, customerName, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, options }, getByCustomerOperationSpec);
    }
    /**
     * Updates the policies for a customer. This operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param parameters Request parameters that are provided to the update policies operation.
     * @param options The options parameters.
     */
    updateCustomer(billingAccountName, customerName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, parameters, options }, updateCustomerOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Policy
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Policy
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters8,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.billingProfileName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getByCustomerOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CustomerPolicy
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.customerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateCustomerOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.CustomerPolicy
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters9,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.billingAccountName,
        Parameters.customerName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=policies.js.map