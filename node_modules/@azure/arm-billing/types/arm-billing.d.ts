import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for AcceptanceMode. \
 * {@link KnownAcceptanceMode} can be used interchangeably with AcceptanceMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ClickToAccept** \
 * **ESignEmbedded** \
 * **ESignOffline**
 */
export declare type AcceptanceMode = string;

/**
 * Defines values for AccountStatus. \
 * {@link KnownAccountStatus} can be used interchangeably with AccountStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Deleted** \
 * **Disabled** \
 * **Expired** \
 * **Transferred** \
 * **Extended** \
 * **Terminated**
 */
export declare type AccountStatus = string;

/**
 * Defines values for AccountType. \
 * {@link KnownAccountType} can be used interchangeably with AccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enterprise** \
 * **Individual** \
 * **Partner**
 */
export declare type AccountType = string;

/** Interface representing a Address. */
export declare interface Address {
    /**
     * Validates an address. Use the operation to validate an address before using it as soldTo or a billTo
     * address.
     * @param address Address details.
     * @param options The options parameters.
     */
    validate(address: AddressDetails, options?: AddressValidateOptionalParams): Promise<AddressValidateResponse>;
}

/** Address details. */
export declare interface AddressDetails {
    /** First name. */
    firstName?: string;
    /** Middle name. */
    middleName?: string;
    /** Last name. */
    lastName?: string;
    /** Company name. */
    companyName?: string;
    /** Address line 1. */
    addressLine1: string;
    /** Address line 2. */
    addressLine2?: string;
    /** Address line 3. */
    addressLine3?: string;
    /** Address city. */
    city?: string;
    /** Address district. */
    district?: string;
    /** Address region. */
    region?: string;
    /** Country code uses ISO2, 2-digit format. */
    country: string;
    /** Postal code. */
    postalCode?: string;
    /** Email address. */
    email?: string;
    /** Phone number. */
    phoneNumber?: string;
}

/** Optional parameters. */
export declare interface AddressValidateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validate operation. */
export declare type AddressValidateResponse = ValidateAddressResponse;

/**
 * Defines values for AddressValidationStatus. \
 * {@link KnownAddressValidationStatus} can be used interchangeably with AddressValidationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Valid** \
 * **Invalid**
 */
export declare type AddressValidationStatus = string;

/** An agreement. */
export declare interface Agreement extends Resource {
    /**
     * The URL to download the agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly agreementLink?: string;
    /**
     * The category of the agreement signed by a customer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: Category;
    /**
     * The mode of acceptance for an agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly acceptanceMode?: AcceptanceMode;
    /**
     * The date from which the agreement is effective.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly effectiveDate?: Date;
    /**
     * The date when the agreement expires.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expirationDate?: Date;
    /** The list of participants that participates in acceptance of an agreement. */
    participants?: Participants[];
    /**
     * The current status of the agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Result of listing agreements. */
export declare interface AgreementListResult {
    /**
     * The list of agreements.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Agreement[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Agreements. */
export declare interface Agreements {
    /**
     * Lists the agreements for a billing account.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: AgreementsListByBillingAccountOptionalParams): PagedAsyncIterableIterator<Agreement>;
    /**
     * Gets an agreement by ID.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @param options The options parameters.
     */
    get(billingAccountName: string, agreementName: string, options?: AgreementsGetOptionalParams): Promise<AgreementsGetResponse>;
}

/** Optional parameters. */
export declare interface AgreementsGetOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the participants. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type AgreementsGetResponse = Agreement;

/** Optional parameters. */
export declare interface AgreementsListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the participants. */
    expand?: string;
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type AgreementsListByBillingAccountNextResponse = AgreementListResult;

/** Optional parameters. */
export declare interface AgreementsListByBillingAccountOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the participants. */
    expand?: string;
}

/** Contains response data for the listByBillingAccount operation. */
export declare type AgreementsListByBillingAccountResponse = AgreementListResult;

/**
 * Defines values for AgreementType. \
 * {@link KnownAgreementType} can be used interchangeably with AgreementType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MicrosoftCustomerAgreement** \
 * **EnterpriseAgreement** \
 * **MicrosoftOnlineServicesProgram** \
 * **MicrosoftPartnerAgreement**
 */
export declare type AgreementType = string;

/** The amount. */
export declare interface Amount {
    /**
     * The currency for the amount value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currency?: string;
    /** Amount value. */
    value?: number;
}

/**
 * Defines values for AutoRenew. \
 * {@link KnownAutoRenew} can be used interchangeably with AutoRenew,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Off** \
 * **On**
 */
export declare type AutoRenew = string;

/** The latest Azure credit balance. This is the balance available for pay now. */
export declare interface AvailableBalance extends Resource {
    /**
     * Balance amount.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly amount?: Amount;
}

/** Interface representing a AvailableBalances. */
export declare interface AvailableBalances {
    /**
     * The available credit balance for a billing profile. This is the balance that can be used for pay now
     * to settle due or past due invoices. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    get(billingAccountName: string, billingProfileName: string, options?: AvailableBalancesGetOptionalParams): Promise<AvailableBalancesGetResponse>;
}

/** Optional parameters. */
export declare interface AvailableBalancesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AvailableBalancesGetResponse = AvailableBalance;

/** Details of the Azure plan. */
export declare interface AzurePlan {
    /** The sku id. */
    skuId?: string;
    /**
     * The sku description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skuDescription?: string;
}

/** A billing account. */
export declare interface BillingAccount extends Resource {
    /** The billing account name. */
    displayName?: string;
    /** The address of the individual or organization that is responsible for the billing account. */
    soldTo?: AddressDetails;
    /**
     * The type of agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly agreementType?: AgreementType;
    /**
     * The type of customer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountType?: AccountType;
    /**
     * The current status of the billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountStatus?: AccountStatus;
    /** The billing profiles associated with the billing account. By default this is not populated, unless it's specified in $expand. */
    billingProfiles?: BillingProfilesOnExpand;
    /**
     * The details about the associated legacy enrollment. By default this is not populated, unless it's specified in $expand.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enrollmentDetails?: Enrollment;
    /** The departments associated to the enrollment. */
    departments?: Department[];
    /** The accounts associated to the enrollment. */
    enrollmentAccounts?: EnrollmentAccount[];
    /**
     * Indicates whether user has read access to the billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hasReadAccess?: boolean;
    /** Notification email address, only for legacy accounts */
    notificationEmailAddress?: string;
}

/** The list of billing accounts. */
export declare interface BillingAccountListResult {
    /**
     * The list of billing accounts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BillingAccount[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a BillingAccounts. */
export declare interface BillingAccounts {
    /**
     * Lists the billing accounts that a user has access to.
     * @param options The options parameters.
     */
    list(options?: BillingAccountsListOptionalParams): PagedAsyncIterableIterator<BillingAccount>;
    /**
     * Lists the invoice sections for which the user has permission to create Azure subscriptions. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listInvoiceSectionsByCreateSubscriptionPermission(billingAccountName: string, options?: BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptionalParams): PagedAsyncIterableIterator<InvoiceSectionWithCreateSubPermission>;
    /**
     * Gets a billing account by its ID.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    get(billingAccountName: string, options?: BillingAccountsGetOptionalParams): Promise<BillingAccountsGetResponse>;
    /**
     * Updates the properties of a billing account. Currently, displayName and address can be updated. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the update billing account operation.
     * @param options The options parameters.
     */
    beginUpdate(billingAccountName: string, parameters: BillingAccountUpdateRequest, options?: BillingAccountsUpdateOptionalParams): Promise<PollerLike<PollOperationState<BillingAccountsUpdateResponse>, BillingAccountsUpdateResponse>>;
    /**
     * Updates the properties of a billing account. Currently, displayName and address can be updated. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the update billing account operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(billingAccountName: string, parameters: BillingAccountUpdateRequest, options?: BillingAccountsUpdateOptionalParams): Promise<BillingAccountsUpdateResponse>;
}

/** Optional parameters. */
export declare interface BillingAccountsGetOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the soldTo, invoice sections and billing profiles. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type BillingAccountsGetResponse = BillingAccount;

/** Optional parameters. */
export declare interface BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listInvoiceSectionsByCreateSubscriptionPermissionNext operation. */
export declare type BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextResponse = InvoiceSectionListWithCreateSubPermissionResult;

/** Optional parameters. */
export declare interface BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listInvoiceSectionsByCreateSubscriptionPermission operation. */
export declare type BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse = InvoiceSectionListWithCreateSubPermissionResult;

/** Optional parameters. */
export declare interface BillingAccountsListNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the soldTo, invoice sections and billing profiles. */
    expand?: string;
}

/** Contains response data for the listNext operation. */
export declare type BillingAccountsListNextResponse = BillingAccountListResult;

/** Optional parameters. */
export declare interface BillingAccountsListOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the soldTo, invoice sections and billing profiles. */
    expand?: string;
}

/** Contains response data for the list operation. */
export declare type BillingAccountsListResponse = BillingAccountListResult;

/** Optional parameters. */
export declare interface BillingAccountsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type BillingAccountsUpdateResponse = BillingAccount;

/** The request properties of the billing account that can be updated. */
export declare interface BillingAccountUpdateRequest {
    /** The billing account name. */
    displayName?: string;
    /** The address of the individual or organization that is responsible for the billing account. */
    soldTo?: AddressDetails;
    /**
     * The type of agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly agreementType?: AgreementType;
    /**
     * The type of customer.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountType?: AccountType;
    /**
     * The current status of the billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountStatus?: AccountStatus;
    /** The billing profiles associated with the billing account. By default this is not populated, unless it's specified in $expand. */
    billingProfiles?: BillingProfilesOnExpand;
    /**
     * The details about the associated legacy enrollment. By default this is not populated, unless it's specified in $expand.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enrollmentDetails?: Enrollment;
    /** The departments associated to the enrollment. */
    departments?: Department[];
    /** The accounts associated to the enrollment. */
    enrollmentAccounts?: EnrollmentAccount[];
    /**
     * Indicates whether user has read access to the billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hasReadAccess?: boolean;
    /** Notification email address, only for legacy accounts */
    notificationEmailAddress?: string;
}

/**
 * Defines values for BillingFrequency. \
 * {@link KnownBillingFrequency} can be used interchangeably with BillingFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OneTime** \
 * **Monthly** \
 * **UsageBased**
 */
export declare type BillingFrequency = string;

export declare class BillingManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the BillingManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID that uniquely identifies an Azure subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: BillingManagementClientOptionalParams);
    billingAccounts: BillingAccounts;
    address: Address;
    availableBalances: AvailableBalances;
    instructions: Instructions;
    billingProfiles: BillingProfiles;
    customers: Customers;
    invoiceSections: InvoiceSections;
    billingPermissions: BillingPermissions;
    billingSubscriptions: BillingSubscriptions;
    products: Products;
    invoices: Invoices;
    transactions: Transactions;
    policies: Policies;
    billingPropertyOperations: BillingPropertyOperations;
    operations: Operations;
    billingRoleDefinitions: BillingRoleDefinitions;
    billingRoleAssignments: BillingRoleAssignments;
    agreements: Agreements;
    reservations: Reservations;
    enrollmentAccounts: EnrollmentAccounts;
    billingPeriods: BillingPeriods;
}

/** Optional parameters. */
export declare interface BillingManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** A billing period resource. */
export declare interface BillingPeriod extends Resource {
    /**
     * The start of the date range covered by the billing period.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingPeriodStartDate?: Date;
    /**
     * The end of the date range covered by the billing period.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingPeriodEndDate?: Date;
    /**
     * Array of invoice ids that associated with.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceIds?: string[];
}

/** Interface representing a BillingPeriods. */
export declare interface BillingPeriods {
    /**
     * Lists the available billing periods for a subscription in reverse chronological order. This is only
     * supported for Azure Web-Direct subscriptions. Other subscription types which were not purchased
     * directly through the Azure web portal are not supported through this preview API.
     * @param options The options parameters.
     */
    list(options?: BillingPeriodsListOptionalParams): PagedAsyncIterableIterator<BillingPeriod>;
    /**
     * Gets a named billing period.  This is only supported for Azure Web-Direct subscriptions. Other
     * subscription types which were not purchased directly through the Azure web portal are not supported
     * through this preview API.
     * @param billingPeriodName The name of a BillingPeriod resource.
     * @param options The options parameters.
     */
    get(billingPeriodName: string, options?: BillingPeriodsGetOptionalParams): Promise<BillingPeriodsGetResponse>;
}

/** Optional parameters. */
export declare interface BillingPeriodsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BillingPeriodsGetResponse = BillingPeriod;

/** Optional parameters. */
export declare interface BillingPeriodsListNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter billing periods by billingPeriodEndDate. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. */
    filter?: string;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
    /** May be used to limit the number of results to the most recent N billing periods. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type BillingPeriodsListNextResponse = BillingPeriodsListResult;

/** Optional parameters. */
export declare interface BillingPeriodsListOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter billing periods by billingPeriodEndDate. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. */
    filter?: string;
    /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
    skiptoken?: string;
    /** May be used to limit the number of results to the most recent N billing periods. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type BillingPeriodsListResponse = BillingPeriodsListResult;

/** Result of listing billing periods. It contains a list of available billing periods in reverse chronological order. */
export declare interface BillingPeriodsListResult {
    /**
     * The list of billing periods.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BillingPeriod[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a BillingPermissions. */
export declare interface BillingPermissions {
    /**
     * Lists the billing permissions the caller has for a customer.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    listByCustomer(billingAccountName: string, customerName: string, options?: BillingPermissionsListByCustomerOptionalParams): PagedAsyncIterableIterator<BillingPermissionsProperties>;
    /**
     * Lists the billing permissions the caller has on a billing account.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: BillingPermissionsListByBillingAccountOptionalParams): PagedAsyncIterableIterator<BillingPermissionsProperties>;
    /**
     * Lists the billing permissions the caller has on an invoice section.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSections(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, options?: BillingPermissionsListByInvoiceSectionsOptionalParams): PagedAsyncIterableIterator<BillingPermissionsProperties>;
    /**
     * Lists the billing permissions the caller has on a billing profile.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: BillingPermissionsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<BillingPermissionsProperties>;
}

/** Optional parameters. */
export declare interface BillingPermissionsListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type BillingPermissionsListByBillingAccountNextResponse = BillingPermissionsListResult;

/** Optional parameters. */
export declare interface BillingPermissionsListByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccount operation. */
export declare type BillingPermissionsListByBillingAccountResponse = BillingPermissionsListResult;

/** Optional parameters. */
export declare interface BillingPermissionsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type BillingPermissionsListByBillingProfileNextResponse = BillingPermissionsListResult;

/** Optional parameters. */
export declare interface BillingPermissionsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfile operation. */
export declare type BillingPermissionsListByBillingProfileResponse = BillingPermissionsListResult;

/** Optional parameters. */
export declare interface BillingPermissionsListByCustomerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCustomerNext operation. */
export declare type BillingPermissionsListByCustomerNextResponse = BillingPermissionsListResult;

/** Optional parameters. */
export declare interface BillingPermissionsListByCustomerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCustomer operation. */
export declare type BillingPermissionsListByCustomerResponse = BillingPermissionsListResult;

/** Optional parameters. */
export declare interface BillingPermissionsListByInvoiceSectionsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSectionsNext operation. */
export declare type BillingPermissionsListByInvoiceSectionsNextResponse = BillingPermissionsListResult;

/** Optional parameters. */
export declare interface BillingPermissionsListByInvoiceSectionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSections operation. */
export declare type BillingPermissionsListByInvoiceSectionsResponse = BillingPermissionsListResult;

/** Result of list billingPermissions a caller has on a billing account. */
export declare interface BillingPermissionsListResult {
    /**
     * The list of billingPermissions a caller has on a billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BillingPermissionsProperties[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The set of allowed action and not allowed actions a caller has on a billing account */
export declare interface BillingPermissionsProperties {
    /**
     * The set of actions that the caller is allowed to perform.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actions?: string[];
    /**
     * The set of actions that the caller is not allowed to perform.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly notActions?: string[];
}

/** A billing profile. */
export declare interface BillingProfile extends Resource {
    /** The name of the billing profile. */
    displayName?: string;
    /** The purchase order name that will appear on the invoices generated for the billing profile. */
    poNumber?: string;
    /**
     * Identifies which services and purchases are paid by a billing profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingRelationshipType?: BillingRelationshipType;
    /** Billing address. */
    billTo?: AddressDetails;
    /**
     * Identifies the billing profile that is linked to another billing profile in indirect purchase motion.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly indirectRelationshipInfo?: IndirectRelationshipInfo;
    /** Flag controlling whether the invoices for the billing profile are sent through email. */
    invoiceEmailOptIn?: boolean;
    /**
     * The day of the month when the invoice for the billing profile is generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceDay?: number;
    /**
     * The currency in which the charges for the billing profile are billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currency?: string;
    /** Information about the enabled azure plans. */
    enabledAzurePlans?: AzurePlan[];
    /** The invoice sections associated to the billing profile. By default this is not populated, unless it's specified in $expand. */
    invoiceSections?: InvoiceSectionsOnExpand;
    /**
     * Indicates whether user has read access to the billing profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hasReadAccess?: boolean;
    /**
     * The system generated unique identifier for a billing profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemId?: string;
    /**
     * The status of the billing profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: BillingProfileStatus;
    /**
     * Reason for the specified billing profile status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusReasonCode?: StatusReasonCode;
    /**
     * The billing profile spending limit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly spendingLimit?: SpendingLimit;
    /**
     * Identifies the cloud environments that are associated with a billing profile. This is a system managed optional field and gets updated as the billing profile gets associated with accounts in various clouds.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetClouds?: TargetCloud[];
    /** Tags of billing profiles. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The request parameters for creating a new billing profile. */
export declare interface BillingProfileCreationRequest {
    /** The name of the billing profile. */
    displayName?: string;
    /** The purchase order name that will appear on the invoices generated for the billing profile. */
    poNumber?: string;
    /** The address of the individual or organization that is responsible for the billing profile. */
    billTo?: AddressDetails;
    /** Flag controlling whether the invoices for the billing profile are sent through email. */
    invoiceEmailOptIn?: boolean;
    /** Enabled azure plans for the billing profile. */
    enabledAzurePlans?: AzurePlan[];
}

/** The list of billing profiles. */
export declare interface BillingProfileListResult {
    /**
     * The list of billing profiles.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BillingProfile[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a BillingProfiles. */
export declare interface BillingProfiles {
    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: BillingProfilesListByBillingAccountOptionalParams): PagedAsyncIterableIterator<BillingProfile>;
    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    get(billingAccountName: string, billingProfileName: string, options?: BillingProfilesGetOptionalParams): Promise<BillingProfilesGetResponse>;
    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(billingAccountName: string, billingProfileName: string, parameters: BillingProfile, options?: BillingProfilesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BillingProfilesCreateOrUpdateResponse>, BillingProfilesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(billingAccountName: string, billingProfileName: string, parameters: BillingProfile, options?: BillingProfilesCreateOrUpdateOptionalParams): Promise<BillingProfilesCreateOrUpdateResponse>;
}

/** Defines headers for BillingProfiles_createOrUpdate operation. */
export declare interface BillingProfilesCreateOrUpdateHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** Recommended time to wait before making another request to check the status of the operation. The time is specified in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BillingProfilesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BillingProfilesCreateOrUpdateResponse = BillingProfile;

/** Optional parameters. */
export declare interface BillingProfilesGetOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the invoice sections. */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type BillingProfilesGetResponse = BillingProfile;

/** Optional parameters. */
export declare interface BillingProfilesListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the invoice sections. */
    expand?: string;
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type BillingProfilesListByBillingAccountNextResponse = BillingProfileListResult;

/** Optional parameters. */
export declare interface BillingProfilesListByBillingAccountOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand the invoice sections. */
    expand?: string;
}

/** Contains response data for the listByBillingAccount operation. */
export declare type BillingProfilesListByBillingAccountResponse = BillingProfileListResult;

/** The billing profiles associated with the billing account. By default this is not populated, unless it's specified in $expand. */
export declare interface BillingProfilesOnExpand {
    /**
     * Indicates whether there are more billing profiles than the ones listed in this collection. The collection lists a maximum of 50 billing profiles. To get all billing profiles, use the list billing profiles API.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hasMoreResults?: boolean;
    /** The billing profiles associated with the billing account. */
    value?: BillingProfile[];
}

/**
 * Defines values for BillingProfileSpendingLimit. \
 * {@link KnownBillingProfileSpendingLimit} can be used interchangeably with BillingProfileSpendingLimit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Off** \
 * **On**
 */
export declare type BillingProfileSpendingLimit = string;

/**
 * Defines values for BillingProfileStatus. \
 * {@link KnownBillingProfileStatus} can be used interchangeably with BillingProfileStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Disabled** \
 * **Warned**
 */
export declare type BillingProfileStatus = string;

/**
 * Defines values for BillingProfileStatusReasonCode. \
 * {@link KnownBillingProfileStatusReasonCode} can be used interchangeably with BillingProfileStatusReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PastDue** \
 * **SpendingLimitReached** \
 * **SpendingLimitExpired**
 */
export declare type BillingProfileStatusReasonCode = string;

/** A billing property. */
export declare interface BillingProperty extends Resource {
    /**
     * The email address on which the account admin gets all Azure notifications.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountAdminNotificationEmailAddress?: string;
    /**
     * The Azure AD tenant ID of the billing account for the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingTenantId?: string;
    /**
     * The ID of the billing account to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingAccountId?: string;
    /**
     * The name of the billing account to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingAccountDisplayName?: string;
    /**
     * The ID of the billing profile to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileId?: string;
    /**
     * The name of the billing profile to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileDisplayName?: string;
    /**
     * The status of the billing profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileStatus?: BillingProfileStatus;
    /**
     * Reason for the specified billing profile status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileStatusReasonCode?: BillingProfileStatusReasonCode;
    /**
     * The billing profile spending limit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileSpendingLimit?: BillingProfileSpendingLimit;
    /** The cost center applied to the subscription. */
    costCenter?: string;
    /**
     * The ID of the invoice section to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionId?: string;
    /**
     * The name of the invoice section to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionDisplayName?: string;
    /**
     * Indicates whether user is the account admin.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isAccountAdmin?: boolean;
    /**
     * The product ID of the Azure plan.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productId?: string;
    /**
     * The product name of the Azure plan.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productName?: string;
    /**
     * The sku ID of the Azure plan for the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skuId?: string;
    /**
     * The sku description of the Azure plan for the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skuDescription?: string;
}

/** Optional parameters. */
export declare interface BillingPropertyGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BillingPropertyGetResponse = BillingProperty;

/** Interface representing a BillingPropertyOperations. */
export declare interface BillingPropertyOperations {
    /**
     * Get the billing properties for a subscription. This operation is not supported for billing accounts
     * with agreement type Enterprise Agreement.
     * @param options The options parameters.
     */
    get(options?: BillingPropertyGetOptionalParams): Promise<BillingPropertyGetResponse>;
    /**
     * Updates the billing property of a subscription. Currently, cost center can be updated. The operation
     * is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param parameters Request parameters that are provided to the update billing property operation.
     * @param options The options parameters.
     */
    update(parameters: BillingProperty, options?: BillingPropertyUpdateOptionalParams): Promise<BillingPropertyUpdateResponse>;
}

/** Optional parameters. */
export declare interface BillingPropertyUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type BillingPropertyUpdateResponse = BillingProperty;

/**
 * Defines values for BillingRelationshipType. \
 * {@link KnownBillingRelationshipType} can be used interchangeably with BillingRelationshipType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Direct** \
 * **IndirectCustomer** \
 * **IndirectPartner** \
 * **CSPPartner**
 */
export declare type BillingRelationshipType = string;

/** The role assignment */
export declare interface BillingRoleAssignment extends Resource {
    /**
     * The date the role assignment was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdOn?: string;
    /**
     * The tenant Id of the user who created the role assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdByPrincipalTenantId?: string;
    /**
     * The principal Id of the user who created the role assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdByPrincipalId?: string;
    /**
     * The email address of the user who created the role assignment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdByUserEmailAddress?: string;
    /** The principal id of the user to whom the role was assigned. */
    principalId?: string;
    /** The principal tenant id of the user to whom the role was assigned. */
    principalTenantId?: string;
    /** The ID of the role definition. */
    roleDefinitionId?: string;
    /**
     * The scope at which the role was assigned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scope?: string;
    /** The authentication type. */
    userAuthenticationType?: string;
    /** The email address of the user. */
    userEmailAddress?: string;
}

/** The list of role assignments. */
export declare interface BillingRoleAssignmentListResult {
    /**
     * The list of role assignments.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BillingRoleAssignment[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a BillingRoleAssignments. */
export declare interface BillingRoleAssignments {
    /**
     * Lists the role assignments for the caller on a billing account. The operation is supported for
     * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: BillingRoleAssignmentsListByBillingAccountOptionalParams): PagedAsyncIterableIterator<BillingRoleAssignment>;
    /**
     * Lists the role assignments for the caller on an invoice section. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, options?: BillingRoleAssignmentsListByInvoiceSectionOptionalParams): PagedAsyncIterableIterator<BillingRoleAssignment>;
    /**
     * Lists the role assignments for the caller on a billing profile. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: BillingRoleAssignmentsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<BillingRoleAssignment>;
    /**
     * Gets a role assignment for the caller on a billing account. The operation is supported for billing
     * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    getByBillingAccount(billingAccountName: string, billingRoleAssignmentName: string, options?: BillingRoleAssignmentsGetByBillingAccountOptionalParams): Promise<BillingRoleAssignmentsGetByBillingAccountResponse>;
    /**
     * Deletes a role assignment for the caller on a billing account. The operation is supported for
     * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    deleteByBillingAccount(billingAccountName: string, billingRoleAssignmentName: string, options?: BillingRoleAssignmentsDeleteByBillingAccountOptionalParams): Promise<BillingRoleAssignmentsDeleteByBillingAccountResponse>;
    /**
     * Gets a role assignment for the caller on an invoice section. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    getByInvoiceSection(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, billingRoleAssignmentName: string, options?: BillingRoleAssignmentsGetByInvoiceSectionOptionalParams): Promise<BillingRoleAssignmentsGetByInvoiceSectionResponse>;
    /**
     * Deletes a role assignment for the caller on an invoice section. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    deleteByInvoiceSection(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, billingRoleAssignmentName: string, options?: BillingRoleAssignmentsDeleteByInvoiceSectionOptionalParams): Promise<BillingRoleAssignmentsDeleteByInvoiceSectionResponse>;
    /**
     * Gets a role assignment for the caller on a billing profile. The operation is supported for billing
     * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    getByBillingProfile(billingAccountName: string, billingProfileName: string, billingRoleAssignmentName: string, options?: BillingRoleAssignmentsGetByBillingProfileOptionalParams): Promise<BillingRoleAssignmentsGetByBillingProfileResponse>;
    /**
     * Deletes a role assignment for the caller on a billing profile. The operation is supported for
     * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    deleteByBillingProfile(billingAccountName: string, billingProfileName: string, billingRoleAssignmentName: string, options?: BillingRoleAssignmentsDeleteByBillingProfileOptionalParams): Promise<BillingRoleAssignmentsDeleteByBillingProfileResponse>;
}

/** Optional parameters. */
export declare interface BillingRoleAssignmentsDeleteByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteByBillingAccount operation. */
export declare type BillingRoleAssignmentsDeleteByBillingAccountResponse = BillingRoleAssignment;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsDeleteByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteByBillingProfile operation. */
export declare type BillingRoleAssignmentsDeleteByBillingProfileResponse = BillingRoleAssignment;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsDeleteByInvoiceSectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deleteByInvoiceSection operation. */
export declare type BillingRoleAssignmentsDeleteByInvoiceSectionResponse = BillingRoleAssignment;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsGetByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByBillingAccount operation. */
export declare type BillingRoleAssignmentsGetByBillingAccountResponse = BillingRoleAssignment;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsGetByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByBillingProfile operation. */
export declare type BillingRoleAssignmentsGetByBillingProfileResponse = BillingRoleAssignment;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsGetByInvoiceSectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByInvoiceSection operation. */
export declare type BillingRoleAssignmentsGetByInvoiceSectionResponse = BillingRoleAssignment;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type BillingRoleAssignmentsListByBillingAccountNextResponse = BillingRoleAssignmentListResult;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsListByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccount operation. */
export declare type BillingRoleAssignmentsListByBillingAccountResponse = BillingRoleAssignmentListResult;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type BillingRoleAssignmentsListByBillingProfileNextResponse = BillingRoleAssignmentListResult;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfile operation. */
export declare type BillingRoleAssignmentsListByBillingProfileResponse = BillingRoleAssignmentListResult;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsListByInvoiceSectionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSectionNext operation. */
export declare type BillingRoleAssignmentsListByInvoiceSectionNextResponse = BillingRoleAssignmentListResult;

/** Optional parameters. */
export declare interface BillingRoleAssignmentsListByInvoiceSectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSection operation. */
export declare type BillingRoleAssignmentsListByInvoiceSectionResponse = BillingRoleAssignmentListResult;

/** The properties of a role definition. */
export declare interface BillingRoleDefinition extends Resource {
    /**
     * The role description
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /** The billingPermissions the role has */
    permissions?: BillingPermissionsProperties[];
    /**
     * The name of the role
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly roleName?: string;
}

/** The list of role definitions. */
export declare interface BillingRoleDefinitionListResult {
    /**
     * The role definitions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BillingRoleDefinition[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a BillingRoleDefinitions. */
export declare interface BillingRoleDefinitions {
    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: BillingRoleDefinitionsListByBillingAccountOptionalParams): PagedAsyncIterableIterator<BillingRoleDefinition>;
    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, options?: BillingRoleDefinitionsListByInvoiceSectionOptionalParams): PagedAsyncIterableIterator<BillingRoleDefinition>;
    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: BillingRoleDefinitionsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<BillingRoleDefinition>;
    /**
     * Gets the definition for a role on a billing account. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param options The options parameters.
     */
    getByBillingAccount(billingAccountName: string, billingRoleDefinitionName: string, options?: BillingRoleDefinitionsGetByBillingAccountOptionalParams): Promise<BillingRoleDefinitionsGetByBillingAccountResponse>;
    /**
     * Gets the definition for a role on an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param options The options parameters.
     */
    getByInvoiceSection(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, billingRoleDefinitionName: string, options?: BillingRoleDefinitionsGetByInvoiceSectionOptionalParams): Promise<BillingRoleDefinitionsGetByInvoiceSectionResponse>;
    /**
     * Gets the definition for a role on a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param options The options parameters.
     */
    getByBillingProfile(billingAccountName: string, billingProfileName: string, billingRoleDefinitionName: string, options?: BillingRoleDefinitionsGetByBillingProfileOptionalParams): Promise<BillingRoleDefinitionsGetByBillingProfileResponse>;
}

/** Optional parameters. */
export declare interface BillingRoleDefinitionsGetByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByBillingAccount operation. */
export declare type BillingRoleDefinitionsGetByBillingAccountResponse = BillingRoleDefinition;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsGetByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByBillingProfile operation. */
export declare type BillingRoleDefinitionsGetByBillingProfileResponse = BillingRoleDefinition;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsGetByInvoiceSectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByInvoiceSection operation. */
export declare type BillingRoleDefinitionsGetByInvoiceSectionResponse = BillingRoleDefinition;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type BillingRoleDefinitionsListByBillingAccountNextResponse = BillingRoleDefinitionListResult;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsListByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccount operation. */
export declare type BillingRoleDefinitionsListByBillingAccountResponse = BillingRoleDefinitionListResult;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type BillingRoleDefinitionsListByBillingProfileNextResponse = BillingRoleDefinitionListResult;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfile operation. */
export declare type BillingRoleDefinitionsListByBillingProfileResponse = BillingRoleDefinitionListResult;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsListByInvoiceSectionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSectionNext operation. */
export declare type BillingRoleDefinitionsListByInvoiceSectionNextResponse = BillingRoleDefinitionListResult;

/** Optional parameters. */
export declare interface BillingRoleDefinitionsListByInvoiceSectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSection operation. */
export declare type BillingRoleDefinitionsListByInvoiceSectionResponse = BillingRoleDefinitionListResult;

/** A billing subscription. */
export declare interface BillingSubscription extends Resource {
    /**
     * The name of the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The ID of the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /** The current billing status of the subscription. */
    subscriptionBillingStatus?: BillingSubscriptionStatusType;
    /**
     * The last month charges.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastMonthCharges?: Amount;
    /**
     * The current month to date charges.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly monthToDateCharges?: Amount;
    /**
     * The ID of the billing profile to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileId?: string;
    /**
     * The name of the billing profile to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileDisplayName?: string;
    /** The cost center applied to the subscription. */
    costCenter?: string;
    /**
     * The ID of the customer for whom the subscription was created. The field is applicable only for Microsoft Partner Agreement billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerId?: string;
    /**
     * The name of the customer for whom the subscription was created. The field is applicable only for Microsoft Partner Agreement billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerDisplayName?: string;
    /**
     * The ID of the invoice section to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionId?: string;
    /**
     * The name of the invoice section to which the subscription is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionDisplayName?: string;
    /**
     * Reseller for this subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reseller?: Reseller;
    /** The sku ID of the Azure plan for the subscription. */
    skuId?: string;
    /**
     * The sku description of the Azure plan for the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skuDescription?: string;
    /**
     * The suspension reason for a subscription. Applies only to subscriptions in Microsoft Online Services Program billing accounts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly suspensionReasons?: string[];
}

/** Interface representing a BillingSubscriptions. */
export declare interface BillingSubscriptions {
    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    listByCustomer(billingAccountName: string, customerName: string, options?: BillingSubscriptionsListByCustomerOptionalParams): PagedAsyncIterableIterator<BillingSubscription>;
    /**
     * Lists the subscriptions for a billing account. The operation is supported for billing accounts with
     * agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: BillingSubscriptionsListByBillingAccountOptionalParams): PagedAsyncIterableIterator<BillingSubscription>;
    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: BillingSubscriptionsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<BillingSubscription>;
    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, options?: BillingSubscriptionsListByInvoiceSectionOptionalParams): PagedAsyncIterableIterator<BillingSubscription>;
    /**
     * Gets a subscription by its ID. The operation is supported for billing accounts with agreement type
     * Microsoft Customer Agreement and Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    get(billingAccountName: string, options?: BillingSubscriptionsGetOptionalParams): Promise<BillingSubscriptionsGetResponse>;
    /**
     * Updates the properties of a billing subscription. Currently, cost center can be updated. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the update billing subscription operation.
     * @param options The options parameters.
     */
    update(billingAccountName: string, parameters: BillingSubscription, options?: BillingSubscriptionsUpdateOptionalParams): Promise<BillingSubscriptionsUpdateResponse>;
    /**
     * Moves a subscription's charges to a new invoice section. The new invoice section must belong to the
     * same billing profile as the existing invoice section. This operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the move subscription operation.
     * @param options The options parameters.
     */
    beginMove(billingAccountName: string, parameters: TransferBillingSubscriptionRequestProperties, options?: BillingSubscriptionsMoveOptionalParams): Promise<PollerLike<PollOperationState<BillingSubscriptionsMoveResponse>, BillingSubscriptionsMoveResponse>>;
    /**
     * Moves a subscription's charges to a new invoice section. The new invoice section must belong to the
     * same billing profile as the existing invoice section. This operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the move subscription operation.
     * @param options The options parameters.
     */
    beginMoveAndWait(billingAccountName: string, parameters: TransferBillingSubscriptionRequestProperties, options?: BillingSubscriptionsMoveOptionalParams): Promise<BillingSubscriptionsMoveResponse>;
    /**
     * Validates if a subscription's charges can be moved to a new invoice section. This operation is
     * supported for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the validate move eligibility operation.
     * @param options The options parameters.
     */
    validateMove(billingAccountName: string, parameters: TransferBillingSubscriptionRequestProperties, options?: BillingSubscriptionsValidateMoveOptionalParams): Promise<BillingSubscriptionsValidateMoveResponse>;
}

/** Optional parameters. */
export declare interface BillingSubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BillingSubscriptionsGetResponse = BillingSubscription;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type BillingSubscriptionsListByBillingAccountNextResponse = BillingSubscriptionsListResult;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccount operation. */
export declare type BillingSubscriptionsListByBillingAccountResponse = BillingSubscriptionsListResult;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type BillingSubscriptionsListByBillingProfileNextResponse = BillingSubscriptionsListResult;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfile operation. */
export declare type BillingSubscriptionsListByBillingProfileResponse = BillingSubscriptionsListResult;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByCustomerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCustomerNext operation. */
export declare type BillingSubscriptionsListByCustomerNextResponse = BillingSubscriptionsListResult;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByCustomerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCustomer operation. */
export declare type BillingSubscriptionsListByCustomerResponse = BillingSubscriptionsListResult;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByInvoiceSectionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSectionNext operation. */
export declare type BillingSubscriptionsListByInvoiceSectionNextResponse = BillingSubscriptionsListResult;

/** Optional parameters. */
export declare interface BillingSubscriptionsListByInvoiceSectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceSection operation. */
export declare type BillingSubscriptionsListByInvoiceSectionResponse = BillingSubscriptionsListResult;

/** The list of billing subscriptions. */
export declare interface BillingSubscriptionsListResult {
    /**
     * The list of billing subscriptions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: BillingSubscription[];
    /**
     * Total number of records.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines headers for BillingSubscriptions_move operation. */
export declare interface BillingSubscriptionsMoveHeaders {
    /** Location URI to poll for result. */
    location?: string;
    /** Recommended time to wait before making another request to check the status of the operation. The time is specified in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface BillingSubscriptionsMoveOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the move operation. */
export declare type BillingSubscriptionsMoveResponse = BillingSubscription;

/**
 * Defines values for BillingSubscriptionStatusType. \
 * {@link KnownBillingSubscriptionStatusType} can be used interchangeably with BillingSubscriptionStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Inactive** \
 * **Abandoned** \
 * **Deleted** \
 * **Warning**
 */
export declare type BillingSubscriptionStatusType = string;

/** Optional parameters. */
export declare interface BillingSubscriptionsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type BillingSubscriptionsUpdateResponse = BillingSubscription;

/** Optional parameters. */
export declare interface BillingSubscriptionsValidateMoveOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateMove operation. */
export declare type BillingSubscriptionsValidateMoveResponse = ValidateSubscriptionTransferEligibilityResult;

/**
 * Defines values for Category. \
 * {@link KnownCategory} can be used interchangeably with Category,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MicrosoftCustomerAgreement** \
 * **AffiliatePurchaseTerms** \
 * **Other**
 */
export declare type Category = string;

/** A partner's customer. */
export declare interface Customer extends Resource {
    /**
     * The ID of the billing profile for the invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileId?: string;
    /**
     * The name of the billing profile for the invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileDisplayName?: string;
    /** The name of the customer. */
    displayName?: string;
    /** Azure plans enabled for the customer. */
    enabledAzurePlans?: AzurePlan[];
    /** The list of resellers for which an Azure plan is enabled for the customer. */
    resellers?: Reseller[];
}

/** The list of customers. */
export declare interface CustomerListResult {
    /**
     * The list of customers.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Customer[];
    /**
     * Total number of records.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The customer's Policy. */
export declare interface CustomerPolicy extends Resource {
    /** The policy that controls whether the users in customer's organization can view charges at pay-as-you-go prices. */
    viewCharges?: ViewCharges;
}

/** Interface representing a Customers. */
export declare interface Customers {
    /**
     * Lists the customers that are billed to a billing profile. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: CustomersListByBillingProfileOptionalParams): PagedAsyncIterableIterator<Customer>;
    /**
     * Lists the customers that are billed to a billing account. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: CustomersListByBillingAccountOptionalParams): PagedAsyncIterableIterator<Customer>;
    /**
     * Gets a customer by its ID. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    get(billingAccountName: string, customerName: string, options?: CustomersGetOptionalParams): Promise<CustomersGetResponse>;
}

/** Optional parameters. */
export declare interface CustomersGetOptionalParams extends coreClient.OperationOptions {
    /** May be used to expand enabledAzurePlans and resellers */
    expand?: string;
}

/** Contains response data for the get operation. */
export declare type CustomersGetResponse = Customer;

/** Optional parameters. */
export declare interface CustomersListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
    /** Used for searching customers by their name. Any customer with name containing the search text will be included in the response */
    search?: string;
    /** May be used to filter the list of customers. */
    filter?: string;
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type CustomersListByBillingAccountNextResponse = CustomerListResult;

/** Optional parameters. */
export declare interface CustomersListByBillingAccountOptionalParams extends coreClient.OperationOptions {
    /** Used for searching customers by their name. Any customer with name containing the search text will be included in the response */
    search?: string;
    /** May be used to filter the list of customers. */
    filter?: string;
}

/** Contains response data for the listByBillingAccount operation. */
export declare type CustomersListByBillingAccountResponse = CustomerListResult;

/** Optional parameters. */
export declare interface CustomersListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
    /** Used for searching customers by their name. Any customer with name containing the search text will be included in the response */
    search?: string;
    /** May be used to filter the list of customers. */
    filter?: string;
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type CustomersListByBillingProfileNextResponse = CustomerListResult;

/** Optional parameters. */
export declare interface CustomersListByBillingProfileOptionalParams extends coreClient.OperationOptions {
    /** Used for searching customers by their name. Any customer with name containing the search text will be included in the response */
    search?: string;
    /** May be used to filter the list of customers. */
    filter?: string;
}

/** Contains response data for the listByBillingProfile operation. */
export declare type CustomersListByBillingProfileResponse = CustomerListResult;

/** A department. */
export declare interface Department extends Resource {
    /** The name of the department. */
    departmentName?: string;
    /** The cost center associated with the department. */
    costCenter?: string;
    /** The status of the department. */
    status?: string;
    /** Associated enrollment accounts. By default this is not populated, unless it's specified in $expand. */
    enrollmentAccounts?: EnrollmentAccount[];
}

/** The properties of a document. */
declare interface Document_2 {
    /**
     * The type of the document.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: DocumentType_2;
    /**
     * Document URL.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly url?: string;
    /**
     * The source of the document. ENF for Brazil and DRS for rest of the world.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly source?: DocumentSource;
}
export { Document_2 as Document }

/**
 * Defines values for DocumentSource. \
 * {@link KnownDocumentSource} can be used interchangeably with DocumentSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DRS** \
 * **ENF**
 */
export declare type DocumentSource = string;

/**
 * Defines values for DocumentType. \
 * {@link KnownDocumentType} can be used interchangeably with DocumentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invoice** \
 * **VoidNote** \
 * **TaxReceipt** \
 * **CreditNote**
 */
declare type DocumentType_2 = string;
export { DocumentType_2 as DocumentType }

/** A secure URL that can be used to download a an entity until the URL expires. */
export declare interface DownloadUrl {
    /**
     * The time in UTC when the download URL will expire.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiryTime?: Date;
    /**
     * The URL to the PDF file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly url?: string;
}

/** The properties of an enrollment. */
export declare interface Enrollment {
    /** The start date of the enrollment. */
    startDate?: Date;
    /** The end date of the enrollment. */
    endDate?: Date;
    /**
     * The billing currency for the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currency?: string;
    /**
     * The channel type of the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly channel?: string;
    /**
     * The policies for Enterprise Agreement enrollments.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policies?: EnrollmentPolicies;
    /**
     * The language for the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly language?: string;
    /**
     * The country code of the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countryCode?: string;
    /**
     * The current status of the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The billing cycle for the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingCycle?: string;
}

/** An enrollment account. */
export declare interface EnrollmentAccount extends Resource {
    /** The name of the enrollment account. */
    accountName?: string;
    /** The cost center associated with the enrollment account. */
    costCenter?: string;
    /** The owner of the enrollment account. */
    accountOwner?: string;
    /** The enrollment account owner email address. */
    accountOwnerEmail?: string;
    /** The status of the enrollment account. */
    status?: string;
    /** The start date of the enrollment account. */
    startDate?: Date;
    /** The end date of the enrollment account. */
    endDate?: Date;
    /** Associated department. By default this is not populated, unless it's specified in $expand. */
    department?: Department;
}

/** The enrollment account context */
export declare interface EnrollmentAccountContext {
    /** The cost center associated with the enrollment account. */
    costCenter?: string;
    /** The start date of the enrollment account. */
    startDate?: Date;
    /** The end date of the enrollment account. */
    endDate?: Date;
    /** The ID of the enrollment account. */
    enrollmentAccountName?: string;
}

/** Result of listing enrollment accounts. */
export declare interface EnrollmentAccountListResult {
    /**
     * The list of enrollment accounts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: EnrollmentAccountSummary[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a EnrollmentAccounts. */
export declare interface EnrollmentAccounts {
    /**
     * Lists the enrollment accounts the caller has access to.
     * @param options The options parameters.
     */
    list(options?: EnrollmentAccountsListOptionalParams): PagedAsyncIterableIterator<EnrollmentAccountSummary>;
    /**
     * Gets a enrollment account by name.
     * @param name Enrollment Account name.
     * @param options The options parameters.
     */
    get(name: string, options?: EnrollmentAccountsGetOptionalParams): Promise<EnrollmentAccountsGetResponse>;
}

/** Optional parameters. */
export declare interface EnrollmentAccountsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EnrollmentAccountsGetResponse = EnrollmentAccountSummary;

/** Optional parameters. */
export declare interface EnrollmentAccountsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type EnrollmentAccountsListNextResponse = EnrollmentAccountListResult;

/** Optional parameters. */
export declare interface EnrollmentAccountsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type EnrollmentAccountsListResponse = EnrollmentAccountListResult;

/** An enrollment account resource. */
export declare interface EnrollmentAccountSummary extends Resource {
    /**
     * The account owner's principal name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalName?: string;
}

/** The policies for Enterprise Agreement enrollments. */
export declare interface EnrollmentPolicies {
    /**
     * The policy that controls whether Account Owners can view charges.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accountOwnerViewCharges?: boolean;
    /**
     * The policy that controls whether Department Administrators can view charges.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly departmentAdminViewCharges?: boolean;
    /**
     * The policy that controls whether Azure marketplace purchases are allowed in the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly marketplaceEnabled?: boolean;
    /**
     * The policy that controls whether Azure reservation purchases are allowed in the enrollment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reservedInstancesEnabled?: boolean;
}

/** The details of the error. */
export declare interface ErrorDetails {
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Error message indicating why the operation failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The target of the particular error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The sub details of the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorSubDetailsItem[];
}

/** Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message. */
export declare interface ErrorResponse {
    /** The details of the error. */
    error?: ErrorDetails;
}

export declare interface ErrorSubDetailsItem {
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Error message indicating why the operation failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The target of the particular error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** The billing profile details of the partner of the customer for an indirect motion. */
export declare interface IndirectRelationshipInfo {
    /** The billing account name of the partner or the customer for an indirect motion. */
    billingAccountName?: string;
    /** The billing profile name of the partner or the customer for an indirect motion. */
    billingProfileName?: string;
    /** The display name of the partner or customer for an indirect motion. */
    displayName?: string;
}

/** An instruction. */
export declare interface Instruction extends Resource {
    /** The amount budgeted for this billing instruction. */
    amount?: number;
    /** The date this billing instruction goes into effect. */
    startDate?: Date;
    /** The date this billing instruction is no longer in effect. */
    endDate?: Date;
    /** The date this billing instruction was created. */
    creationDate?: Date;
}

/** The list of billing instructions used during invoice generation. */
export declare interface InstructionListResult {
    /**
     * The list of billing instructions used during invoice generation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Instruction[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Instructions. */
export declare interface Instructions {
    /**
     * Lists the instructions by billing profile id.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: InstructionsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<Instruction>;
    /**
     * Get the instruction by name. These are custom billing instructions and are only applicable for
     * certain customers.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param options The options parameters.
     */
    get(billingAccountName: string, billingProfileName: string, instructionName: string, options?: InstructionsGetOptionalParams): Promise<InstructionsGetResponse>;
    /**
     * Creates or updates an instruction. These are custom billing instructions and are only applicable for
     * certain customers.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param parameters The new instruction.
     * @param options The options parameters.
     */
    put(billingAccountName: string, billingProfileName: string, instructionName: string, parameters: Instruction, options?: InstructionsPutOptionalParams): Promise<InstructionsPutResponse>;
}

/** Optional parameters. */
export declare interface InstructionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type InstructionsGetResponse = Instruction;

/** Optional parameters. */
export declare interface InstructionsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type InstructionsListByBillingProfileNextResponse = InstructionListResult;

/** Optional parameters. */
export declare interface InstructionsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfile operation. */
export declare type InstructionsListByBillingProfileResponse = InstructionListResult;

/** Optional parameters. */
export declare interface InstructionsPutOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the put operation. */
export declare type InstructionsPutResponse = Instruction;

/** An invoice. */
export declare interface Invoice extends Resource {
    /**
     * The due date for the invoice.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dueDate?: Date;
    /**
     * The date when the invoice was generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceDate?: Date;
    /**
     * The current status of the invoice.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: InvoiceStatus;
    /**
     * The amount due as of now.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly amountDue?: Amount;
    /**
     * The amount of Azure prepayment applied to the charges. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azurePrepaymentApplied?: Amount;
    /**
     * The total charges for the invoice billing period.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billedAmount?: Amount;
    /**
     * The total refund for returns and cancellations during the invoice billing period. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creditAmount?: Amount;
    /**
     * The amount of free Azure credits applied to the charges. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly freeAzureCreditApplied?: Amount;
    /**
     * The pre-tax amount due. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subTotal?: Amount;
    /**
     * The amount of tax charged for the billing period. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly taxAmount?: Amount;
    /**
     * The amount due when the invoice was generated. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalAmount?: Amount;
    /**
     * The start date of the billing period for which the invoice is generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoicePeriodStartDate?: Date;
    /**
     * The end date of the billing period for which the invoice is generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoicePeriodEndDate?: Date;
    /**
     * Invoice type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceType?: InvoiceType;
    /**
     * Specifies if the invoice is generated as part of monthly invoicing cycle or not. This field is applicable to billing accounts with agreement type Microsoft Customer Agreement.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isMonthlyInvoice?: boolean;
    /**
     * The ID of the billing profile for which the invoice is generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileId?: string;
    /**
     * The name of the billing profile for which the invoice is generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileDisplayName?: string;
    /**
     * An optional purchase order number for the invoice.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly purchaseOrderNumber?: string;
    /**
     * List of documents available to download such as invoice and tax receipt.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly documents?: Document_2[];
    /**
     * List of payments.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly payments?: PaymentProperties[];
    /**
     * Rebill details for an invoice.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rebillDetails?: {
        [propertyName: string]: RebillDetails;
    };
    /**
     * The type of the document.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly documentType?: InvoiceDocumentType;
    /**
     * The Id of the active invoice which is originally billed after this invoice was voided. This field is applicable to the void invoices only.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billedDocumentId?: string;
    /**
     * The Id of the invoice which got voided and this credit note was issued as a result. This field is applicable to the credit notes only.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creditForDocumentId?: string;
    /**
     * The ID of the subscription for which the invoice is generated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
}

/**
 * Defines values for InvoiceDocumentType. \
 * {@link KnownInvoiceDocumentType} can be used interchangeably with InvoiceDocumentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invoice** \
 * **CreditNote**
 */
export declare type InvoiceDocumentType = string;

/** The list of invoices. */
export declare interface InvoiceListResult {
    /**
     * The list of invoices.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Invoice[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /**
     * Total number of records.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
}

/** Interface representing a Invoices. */
export declare interface Invoices {
    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, periodStartDate: string, periodEndDate: string, options?: InvoicesListByBillingAccountOptionalParams): PagedAsyncIterableIterator<Invoice>;
    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, periodStartDate: string, periodEndDate: string, options?: InvoicesListByBillingProfileOptionalParams): PagedAsyncIterableIterator<Invoice>;
    /**
     * Lists the invoices for a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param options The options parameters.
     */
    listByBillingSubscription(periodStartDate: string, periodEndDate: string, options?: InvoicesListByBillingSubscriptionOptionalParams): PagedAsyncIterableIterator<Invoice>;
    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    get(billingAccountName: string, invoiceName: string, options?: InvoicesGetOptionalParams): Promise<InvoicesGetResponse>;
    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft
     * Partner Agreement or Microsoft Customer Agreement.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    getById(invoiceName: string, options?: InvoicesGetByIdOptionalParams): Promise<InvoicesGetByIdResponse>;
    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadInvoice(billingAccountName: string, invoiceName: string, downloadToken: string, options?: InvoicesDownloadInvoiceOptionalParams): Promise<PollerLike<PollOperationState<InvoicesDownloadInvoiceResponse>, InvoicesDownloadInvoiceResponse>>;
    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadInvoiceAndWait(billingAccountName: string, invoiceName: string, downloadToken: string, options?: InvoicesDownloadInvoiceOptionalParams): Promise<InvoicesDownloadInvoiceResponse>;
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file. The operation is supported for billing accounts with agreement type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingProfileInvoices(billingAccountName: string, downloadUrls: string[], options?: InvoicesDownloadMultipleBillingProfileInvoicesOptionalParams): Promise<PollerLike<PollOperationState<InvoicesDownloadMultipleBillingProfileInvoicesResponse>, InvoicesDownloadMultipleBillingProfileInvoicesResponse>>;
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file. The operation is supported for billing accounts with agreement type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingProfileInvoicesAndWait(billingAccountName: string, downloadUrls: string[], options?: InvoicesDownloadMultipleBillingProfileInvoicesOptionalParams): Promise<InvoicesDownloadMultipleBillingProfileInvoicesResponse>;
    /**
     * Gets an invoice by subscription ID and invoice ID.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    getBySubscriptionAndInvoiceId(invoiceName: string, options?: InvoicesGetBySubscriptionAndInvoiceIdOptionalParams): Promise<InvoicesGetBySubscriptionAndInvoiceIdResponse>;
    /**
     * Gets a URL to download an invoice.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadBillingSubscriptionInvoice(invoiceName: string, downloadToken: string, options?: InvoicesDownloadBillingSubscriptionInvoiceOptionalParams): Promise<PollerLike<PollOperationState<InvoicesDownloadBillingSubscriptionInvoiceResponse>, InvoicesDownloadBillingSubscriptionInvoiceResponse>>;
    /**
     * Gets a URL to download an invoice.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadBillingSubscriptionInvoiceAndWait(invoiceName: string, downloadToken: string, options?: InvoicesDownloadBillingSubscriptionInvoiceOptionalParams): Promise<InvoicesDownloadBillingSubscriptionInvoiceResponse>;
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingSubscriptionInvoices(downloadUrls: string[], options?: InvoicesDownloadMultipleBillingSubscriptionInvoicesOptionalParams): Promise<PollerLike<PollOperationState<InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse>, InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse>>;
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingSubscriptionInvoicesAndWait(downloadUrls: string[], options?: InvoicesDownloadMultipleBillingSubscriptionInvoicesOptionalParams): Promise<InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse>;
}

/** Defines headers for Invoices_downloadBillingSubscriptionInvoice operation. */
export declare interface InvoicesDownloadBillingSubscriptionInvoiceHeaders {
    /** GET this URL to retrieve the status of the asynchronous operation. */
    location?: string;
    /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
    retryAfter?: string;
}

/** Optional parameters. */
export declare interface InvoicesDownloadBillingSubscriptionInvoiceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the downloadBillingSubscriptionInvoice operation. */
export declare type InvoicesDownloadBillingSubscriptionInvoiceResponse = DownloadUrl;

/** Defines headers for Invoices_downloadInvoice operation. */
export declare interface InvoicesDownloadInvoiceHeaders {
    /** GET this URL to retrieve the status of the asynchronous operation. */
    location?: string;
    /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
    retryAfter?: string;
}

/** Optional parameters. */
export declare interface InvoicesDownloadInvoiceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the downloadInvoice operation. */
export declare type InvoicesDownloadInvoiceResponse = DownloadUrl;

/** Defines headers for Invoices_downloadMultipleBillingProfileInvoices operation. */
export declare interface InvoicesDownloadMultipleBillingProfileInvoicesHeaders {
    /** GET this URL to retrieve the status of the asynchronous operation. */
    location?: string;
    /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
    retryAfter?: string;
}

/** Optional parameters. */
export declare interface InvoicesDownloadMultipleBillingProfileInvoicesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the downloadMultipleBillingProfileInvoices operation. */
export declare type InvoicesDownloadMultipleBillingProfileInvoicesResponse = DownloadUrl;

/** Defines headers for Invoices_downloadMultipleBillingSubscriptionInvoices operation. */
export declare interface InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders {
    /** GET this URL to retrieve the status of the asynchronous operation. */
    location?: string;
    /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
    retryAfter?: string;
}

/** Optional parameters. */
export declare interface InvoicesDownloadMultipleBillingSubscriptionInvoicesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the downloadMultipleBillingSubscriptionInvoices operation. */
export declare type InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse = DownloadUrl;

/** An invoice section. */
export declare interface InvoiceSection extends Resource {
    /** The name of the invoice section. */
    displayName?: string;
    /** Dictionary of metadata associated with the invoice section. */
    labels?: {
        [propertyName: string]: string;
    };
    /**
     * Identifies the state of an invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: InvoiceSectionState;
    /**
     * The system generated unique identifier for an invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemId?: string;
    /** Dictionary of metadata associated with the invoice section. Maximum key/value length supported of 256 characters. Keys/value should not empty value nor null. Keys can not contain < > % & \ ? / */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Identifies the cloud environments that are associated with an invoice section. This is a system managed optional field and gets updated as the invoice section gets associated with accounts in various clouds.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetCloud?: TargetCloud;
}

/** The properties of the invoice section. */
export declare interface InvoiceSectionCreationRequest {
    /** The name of the invoice section. */
    displayName?: string;
}

/** The list of invoice sections. */
export declare interface InvoiceSectionListResult {
    /**
     * The list of invoice sections.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: InvoiceSection[];
    /**
     * Total number of records.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The list of invoice section properties with create subscription permission. */
export declare interface InvoiceSectionListWithCreateSubPermissionResult {
    /** The list of invoice section properties with create subscription permission. */
    value?: InvoiceSectionWithCreateSubPermission[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a InvoiceSections. */
export declare interface InvoiceSections {
    /**
     * Lists the invoice sections that a user has access to. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: InvoiceSectionsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<InvoiceSection>;
    /**
     * Gets an invoice section by its ID. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    get(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, options?: InvoiceSectionsGetOptionalParams): Promise<InvoiceSectionsGetResponse>;
    /**
     * Creates or updates an invoice section. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The new or updated invoice section.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, parameters: InvoiceSection, options?: InvoiceSectionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<InvoiceSectionsCreateOrUpdateResponse>, InvoiceSectionsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an invoice section. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The new or updated invoice section.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, parameters: InvoiceSection, options?: InvoiceSectionsCreateOrUpdateOptionalParams): Promise<InvoiceSectionsCreateOrUpdateResponse>;
}

/** Defines headers for InvoiceSections_createOrUpdate operation. */
export declare interface InvoiceSectionsCreateOrUpdateHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** Recommended time to wait before making another request to check the status of the operation. The time is specified in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface InvoiceSectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type InvoiceSectionsCreateOrUpdateResponse = InvoiceSection;

/** Optional parameters. */
export declare interface InvoiceSectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type InvoiceSectionsGetResponse = InvoiceSection;

/** Optional parameters. */
export declare interface InvoiceSectionsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type InvoiceSectionsListByBillingProfileNextResponse = InvoiceSectionListResult;

/** Optional parameters. */
export declare interface InvoiceSectionsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfile operation. */
export declare type InvoiceSectionsListByBillingProfileResponse = InvoiceSectionListResult;

/** The invoice sections associated to the billing profile. By default this is not populated, unless it's specified in $expand. */
export declare interface InvoiceSectionsOnExpand {
    /**
     * Indicates whether there are more invoice sections than the ones listed in this collection. The collection lists a maximum of 50 invoice sections. To get all invoice sections, use the list invoice sections API.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hasMoreResults?: boolean;
    /** The invoice sections associated to the billing profile. */
    value?: InvoiceSection[];
}

/**
 * Defines values for InvoiceSectionState. \
 * {@link KnownInvoiceSectionState} can be used interchangeably with InvoiceSectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Restricted**
 */
export declare type InvoiceSectionState = string;

/** Invoice section properties with create subscription permission. */
export declare interface InvoiceSectionWithCreateSubPermission {
    /**
     * The ID of the invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionId?: string;
    /**
     * The name of the invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionDisplayName?: string;
    /**
     * The system generated unique identifier for an invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionSystemId?: string;
    /**
     * The ID of the billing profile for the invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileId?: string;
    /**
     * The name of the billing profile for the invoice section.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileDisplayName?: string;
    /**
     * The status of the billing profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileStatus?: BillingProfileStatus;
    /**
     * Reason for the specified billing profile status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileStatusReasonCode?: StatusReasonCodeForBillingProfile;
    /**
     * The billing profile spending limit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileSpendingLimit?: SpendingLimitForBillingProfile;
    /**
     * The system generated unique identifier for a billing profile.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileSystemId?: string;
    /** Enabled azure plans for the associated billing profile. */
    enabledAzurePlans?: AzurePlan[];
}

/** Optional parameters. */
export declare interface InvoicesGetByIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getById operation. */
export declare type InvoicesGetByIdResponse = Invoice;

/** Optional parameters. */
export declare interface InvoicesGetBySubscriptionAndInvoiceIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBySubscriptionAndInvoiceId operation. */
export declare type InvoicesGetBySubscriptionAndInvoiceIdResponse = Invoice;

/** Optional parameters. */
export declare interface InvoicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type InvoicesGetResponse = Invoice;

/** Optional parameters. */
export declare interface InvoicesListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type InvoicesListByBillingAccountNextResponse = InvoiceListResult;

/** Optional parameters. */
export declare interface InvoicesListByBillingAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingAccount operation. */
export declare type InvoicesListByBillingAccountResponse = InvoiceListResult;

/** Optional parameters. */
export declare interface InvoicesListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type InvoicesListByBillingProfileNextResponse = InvoiceListResult;

/** Optional parameters. */
export declare interface InvoicesListByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingProfile operation. */
export declare type InvoicesListByBillingProfileResponse = InvoiceListResult;

/** Optional parameters. */
export declare interface InvoicesListByBillingSubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingSubscriptionNext operation. */
export declare type InvoicesListByBillingSubscriptionNextResponse = InvoiceListResult;

/** Optional parameters. */
export declare interface InvoicesListByBillingSubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByBillingSubscription operation. */
export declare type InvoicesListByBillingSubscriptionResponse = InvoiceListResult;

/**
 * Defines values for InvoiceStatus. \
 * {@link KnownInvoiceStatus} can be used interchangeably with InvoiceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Due** \
 * **OverDue** \
 * **Paid** \
 * **Void**
 */
export declare type InvoiceStatus = string;

/**
 * Defines values for InvoiceType. \
 * {@link KnownInvoiceType} can be used interchangeably with InvoiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureService** \
 * **AzureMarketplace** \
 * **AzureSupport**
 */
export declare type InvoiceType = string;

/** Known values of {@link AcceptanceMode} that the service accepts. */
export declare enum KnownAcceptanceMode {
    /** ClickToAccept */
    ClickToAccept = "ClickToAccept",
    /** ESignEmbedded */
    ESignEmbedded = "ESignEmbedded",
    /** ESignOffline */
    ESignOffline = "ESignOffline"
}

/** Known values of {@link AccountStatus} that the service accepts. */
export declare enum KnownAccountStatus {
    /** Active */
    Active = "Active",
    /** Deleted */
    Deleted = "Deleted",
    /** Disabled */
    Disabled = "Disabled",
    /** Expired */
    Expired = "Expired",
    /** Transferred */
    Transferred = "Transferred",
    /** Extended */
    Extended = "Extended",
    /** Terminated */
    Terminated = "Terminated"
}

/** Known values of {@link AccountType} that the service accepts. */
export declare enum KnownAccountType {
    /** Enterprise */
    Enterprise = "Enterprise",
    /** Individual */
    Individual = "Individual",
    /** Partner */
    Partner = "Partner"
}

/** Known values of {@link AddressValidationStatus} that the service accepts. */
export declare enum KnownAddressValidationStatus {
    /** Valid */
    Valid = "Valid",
    /** Invalid */
    Invalid = "Invalid"
}

/** Known values of {@link AgreementType} that the service accepts. */
export declare enum KnownAgreementType {
    /** MicrosoftCustomerAgreement */
    MicrosoftCustomerAgreement = "MicrosoftCustomerAgreement",
    /** EnterpriseAgreement */
    EnterpriseAgreement = "EnterpriseAgreement",
    /** MicrosoftOnlineServicesProgram */
    MicrosoftOnlineServicesProgram = "MicrosoftOnlineServicesProgram",
    /** MicrosoftPartnerAgreement */
    MicrosoftPartnerAgreement = "MicrosoftPartnerAgreement"
}

/** Known values of {@link AutoRenew} that the service accepts. */
export declare enum KnownAutoRenew {
    /** Off */
    Off = "Off",
    /** On */
    On = "On"
}

/** Known values of {@link BillingFrequency} that the service accepts. */
export declare enum KnownBillingFrequency {
    /** OneTime */
    OneTime = "OneTime",
    /** Monthly */
    Monthly = "Monthly",
    /** UsageBased */
    UsageBased = "UsageBased"
}

/** Known values of {@link BillingProfileSpendingLimit} that the service accepts. */
export declare enum KnownBillingProfileSpendingLimit {
    /** Off */
    Off = "Off",
    /** On */
    On = "On"
}

/** Known values of {@link BillingProfileStatus} that the service accepts. */
export declare enum KnownBillingProfileStatus {
    /** Active */
    Active = "Active",
    /** Disabled */
    Disabled = "Disabled",
    /** Warned */
    Warned = "Warned"
}

/** Known values of {@link BillingProfileStatusReasonCode} that the service accepts. */
export declare enum KnownBillingProfileStatusReasonCode {
    /** PastDue */
    PastDue = "PastDue",
    /** SpendingLimitReached */
    SpendingLimitReached = "SpendingLimitReached",
    /** SpendingLimitExpired */
    SpendingLimitExpired = "SpendingLimitExpired"
}

/** Known values of {@link BillingRelationshipType} that the service accepts. */
export declare enum KnownBillingRelationshipType {
    /** Direct */
    Direct = "Direct",
    /** IndirectCustomer */
    IndirectCustomer = "IndirectCustomer",
    /** IndirectPartner */
    IndirectPartner = "IndirectPartner",
    /** CSPPartner */
    CSPPartner = "CSPPartner"
}

/** Known values of {@link BillingSubscriptionStatusType} that the service accepts. */
export declare enum KnownBillingSubscriptionStatusType {
    /** Active */
    Active = "Active",
    /** Inactive */
    Inactive = "Inactive",
    /** Abandoned */
    Abandoned = "Abandoned",
    /** Deleted */
    Deleted = "Deleted",
    /** Warning */
    Warning = "Warning"
}

/** Known values of {@link Category} that the service accepts. */
export declare enum KnownCategory {
    /** MicrosoftCustomerAgreement */
    MicrosoftCustomerAgreement = "MicrosoftCustomerAgreement",
    /** AffiliatePurchaseTerms */
    AffiliatePurchaseTerms = "AffiliatePurchaseTerms",
    /** Other */
    Other = "Other"
}

/** Known values of {@link DocumentSource} that the service accepts. */
export declare enum KnownDocumentSource {
    /** DRS */
    DRS = "DRS",
    /** ENF */
    ENF = "ENF"
}

/** Known values of {@link DocumentType} that the service accepts. */
export declare enum KnownDocumentType {
    /** Invoice */
    Invoice = "Invoice",
    /** VoidNote */
    VoidNote = "VoidNote",
    /** TaxReceipt */
    TaxReceipt = "TaxReceipt",
    /** CreditNote */
    CreditNote = "CreditNote"
}

/** Known values of {@link InvoiceDocumentType} that the service accepts. */
export declare enum KnownInvoiceDocumentType {
    /** Invoice */
    Invoice = "Invoice",
    /** CreditNote */
    CreditNote = "CreditNote"
}

/** Known values of {@link InvoiceSectionState} that the service accepts. */
export declare enum KnownInvoiceSectionState {
    /** Active */
    Active = "Active",
    /** Restricted */
    Restricted = "Restricted"
}

/** Known values of {@link InvoiceStatus} that the service accepts. */
export declare enum KnownInvoiceStatus {
    /** Due */
    Due = "Due",
    /** OverDue */
    OverDue = "OverDue",
    /** Paid */
    Paid = "Paid",
    /** Void */
    Void = "Void"
}

/** Known values of {@link InvoiceType} that the service accepts. */
export declare enum KnownInvoiceType {
    /** AzureService */
    AzureService = "AzureService",
    /** AzureMarketplace */
    AzureMarketplace = "AzureMarketplace",
    /** AzureSupport */
    AzureSupport = "AzureSupport"
}

/** Known values of {@link MarketplacePurchasesPolicy} that the service accepts. */
export declare enum KnownMarketplacePurchasesPolicy {
    /** AllAllowed */
    AllAllowed = "AllAllowed",
    /** OnlyFreeAllowed */
    OnlyFreeAllowed = "OnlyFreeAllowed",
    /** NotAllowed */
    NotAllowed = "NotAllowed"
}

/** Known values of {@link PaymentMethodFamily} that the service accepts. */
export declare enum KnownPaymentMethodFamily {
    /** Credits */
    Credits = "Credits",
    /** CheckWire */
    CheckWire = "CheckWire",
    /** CreditCard */
    CreditCard = "CreditCard",
    /** None */
    None = "None"
}

/** Known values of {@link ProductStatusType} that the service accepts. */
export declare enum KnownProductStatusType {
    /** Active */
    Active = "Active",
    /** Inactive */
    Inactive = "Inactive",
    /** PastDue */
    PastDue = "PastDue",
    /** Expiring */
    Expiring = "Expiring",
    /** Expired */
    Expired = "Expired",
    /** Disabled */
    Disabled = "Disabled",
    /** Cancelled */
    Cancelled = "Cancelled",
    /** AutoRenew */
    AutoRenew = "AutoRenew"
}

/** Known values of {@link ProductTransferValidationErrorCode} that the service accepts. */
export declare enum KnownProductTransferValidationErrorCode {
    /** InvalidSource */
    InvalidSource = "InvalidSource",
    /** ProductNotActive */
    ProductNotActive = "ProductNotActive",
    /** InsufficientPermissionOnSource */
    InsufficientPermissionOnSource = "InsufficientPermissionOnSource",
    /** InsufficientPermissionOnDestination */
    InsufficientPermissionOnDestination = "InsufficientPermissionOnDestination",
    /** DestinationBillingProfilePastDue */
    DestinationBillingProfilePastDue = "DestinationBillingProfilePastDue",
    /** ProductTypeNotSupported */
    ProductTypeNotSupported = "ProductTypeNotSupported",
    /** CrossBillingAccountNotAllowed */
    CrossBillingAccountNotAllowed = "CrossBillingAccountNotAllowed",
    /** NotAvailableForDestinationMarket */
    NotAvailableForDestinationMarket = "NotAvailableForDestinationMarket",
    /** OneTimePurchaseProductTransferNotAllowed */
    OneTimePurchaseProductTransferNotAllowed = "OneTimePurchaseProductTransferNotAllowed"
}

/** Known values of {@link ReservationPurchasesPolicy} that the service accepts. */
export declare enum KnownReservationPurchasesPolicy {
    /** Allowed */
    Allowed = "Allowed",
    /** NotAllowed */
    NotAllowed = "NotAllowed"
}

/** Known values of {@link ReservationType} that the service accepts. */
export declare enum KnownReservationType {
    /** Purchase */
    Purchase = "Purchase",
    /** UsageCharge */
    UsageCharge = "Usage Charge"
}

/** Known values of {@link SpendingLimit} that the service accepts. */
export declare enum KnownSpendingLimit {
    /** Off */
    Off = "Off",
    /** On */
    On = "On"
}

/** Known values of {@link SpendingLimitForBillingProfile} that the service accepts. */
export declare enum KnownSpendingLimitForBillingProfile {
    /** Off */
    Off = "Off",
    /** On */
    On = "On"
}

/** Known values of {@link StatusReasonCode} that the service accepts. */
export declare enum KnownStatusReasonCode {
    /** PastDue */
    PastDue = "PastDue",
    /** SpendingLimitReached */
    SpendingLimitReached = "SpendingLimitReached",
    /** SpendingLimitExpired */
    SpendingLimitExpired = "SpendingLimitExpired"
}

/** Known values of {@link StatusReasonCodeForBillingProfile} that the service accepts. */
export declare enum KnownStatusReasonCodeForBillingProfile {
    /** PastDue */
    PastDue = "PastDue",
    /** SpendingLimitReached */
    SpendingLimitReached = "SpendingLimitReached",
    /** SpendingLimitExpired */
    SpendingLimitExpired = "SpendingLimitExpired"
}

/** Known values of {@link SubscriptionTransferValidationErrorCode} that the service accepts. */
export declare enum KnownSubscriptionTransferValidationErrorCode {
    /** BillingAccountInactive */
    BillingAccountInactive = "BillingAccountInactive",
    /** CrossBillingAccountNotAllowed */
    CrossBillingAccountNotAllowed = "CrossBillingAccountNotAllowed",
    /** DestinationBillingProfileInactive */
    DestinationBillingProfileInactive = "DestinationBillingProfileInactive",
    /** DestinationBillingProfileNotFound */
    DestinationBillingProfileNotFound = "DestinationBillingProfileNotFound",
    /** DestinationBillingProfilePastDue */
    DestinationBillingProfilePastDue = "DestinationBillingProfilePastDue",
    /** DestinationInvoiceSectionInactive */
    DestinationInvoiceSectionInactive = "DestinationInvoiceSectionInactive",
    /** DestinationInvoiceSectionNotFound */
    DestinationInvoiceSectionNotFound = "DestinationInvoiceSectionNotFound",
    /** InsufficientPermissionOnDestination */
    InsufficientPermissionOnDestination = "InsufficientPermissionOnDestination",
    /** InsufficientPermissionOnSource */
    InsufficientPermissionOnSource = "InsufficientPermissionOnSource",
    /** InvalidDestination */
    InvalidDestination = "InvalidDestination",
    /** InvalidSource */
    InvalidSource = "InvalidSource",
    /** MarketplaceNotEnabledOnDestination */
    MarketplaceNotEnabledOnDestination = "MarketplaceNotEnabledOnDestination",
    /** NotAvailableForDestinationMarket */
    NotAvailableForDestinationMarket = "NotAvailableForDestinationMarket",
    /** ProductInactive */
    ProductInactive = "ProductInactive",
    /** ProductNotFound */
    ProductNotFound = "ProductNotFound",
    /** ProductTypeNotSupported */
    ProductTypeNotSupported = "ProductTypeNotSupported",
    /** SourceBillingProfilePastDue */
    SourceBillingProfilePastDue = "SourceBillingProfilePastDue",
    /** SourceInvoiceSectionInactive */
    SourceInvoiceSectionInactive = "SourceInvoiceSectionInactive",
    /** SubscriptionNotActive */
    SubscriptionNotActive = "SubscriptionNotActive",
    /** SubscriptionTypeNotSupported */
    SubscriptionTypeNotSupported = "SubscriptionTypeNotSupported"
}

/** Known values of {@link TargetCloud} that the service accepts. */
export declare enum KnownTargetCloud {
    /** USGov */
    USGov = "USGov",
    /** USNat */
    USNat = "USNat",
    /** USSec */
    USSec = "USSec"
}

/** Known values of {@link TransactionTypeKind} that the service accepts. */
export declare enum KnownTransactionTypeKind {
    /** All */
    All = "all",
    /** Reservation */
    Reservation = "reservation"
}

/** Known values of {@link ViewCharges} that the service accepts. */
export declare enum KnownViewCharges {
    /** Allowed */
    Allowed = "Allowed",
    /** NotAllowed */
    NotAllowed = "NotAllowed"
}

/** Known values of {@link ViewChargesPolicy} that the service accepts. */
export declare enum KnownViewChargesPolicy {
    /** Allowed */
    Allowed = "Allowed",
    /** NotAllowed */
    NotAllowed = "NotAllowed"
}

/**
 * Defines values for MarketplacePurchasesPolicy. \
 * {@link KnownMarketplacePurchasesPolicy} can be used interchangeably with MarketplacePurchasesPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllAllowed** \
 * **OnlyFreeAllowed** \
 * **NotAllowed**
 */
export declare type MarketplacePurchasesPolicy = string;

/** A Billing REST API operation. */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{operation}.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Identifies if the operation is a data operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /**
     * Service provider: Microsoft.Billing.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource on which the operation is performed such as invoice and billing subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Operation type such as read, write and delete.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Description of operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** The list of billing operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * The list of billing operations supported by the Microsoft.Billing resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists the available billing REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** The details about a participant. */
export declare interface Participants {
    /**
     * The acceptance status of the participant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The date when the status got changed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusDate?: Date;
    /**
     * The email address of the participant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly email?: string;
}

/**
 * Defines values for PaymentMethodFamily. \
 * {@link KnownPaymentMethodFamily} can be used interchangeably with PaymentMethodFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Credits** \
 * **CheckWire** \
 * **CreditCard** \
 * **None**
 */
export declare type PaymentMethodFamily = string;

/** The properties of a payment. */
export declare interface PaymentProperties {
    /**
     * The type of payment.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly paymentType?: string;
    /**
     * The paid amount.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly amount?: Amount;
    /**
     * The date when the payment was made.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly date?: Date;
    /** The family of payment method. */
    paymentMethodFamily?: PaymentMethodFamily;
    /**
     * The type of payment method.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly paymentMethodType?: string;
}

/** Interface representing a Policies. */
export declare interface Policies {
    /**
     * Lists the policies for a billing profile. This operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    getByBillingProfile(billingAccountName: string, billingProfileName: string, options?: PoliciesGetByBillingProfileOptionalParams): Promise<PoliciesGetByBillingProfileResponse>;
    /**
     * Updates the policies for a billing profile. This operation is supported only for billing accounts
     * with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters Request parameters that are provided to the update policies operation.
     * @param options The options parameters.
     */
    update(billingAccountName: string, billingProfileName: string, parameters: Policy, options?: PoliciesUpdateOptionalParams): Promise<PoliciesUpdateResponse>;
    /**
     * Lists the policies for a customer. This operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    getByCustomer(billingAccountName: string, customerName: string, options?: PoliciesGetByCustomerOptionalParams): Promise<PoliciesGetByCustomerResponse>;
    /**
     * Updates the policies for a customer. This operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param parameters Request parameters that are provided to the update policies operation.
     * @param options The options parameters.
     */
    updateCustomer(billingAccountName: string, customerName: string, parameters: CustomerPolicy, options?: PoliciesUpdateCustomerOptionalParams): Promise<PoliciesUpdateCustomerResponse>;
}

/** Optional parameters. */
export declare interface PoliciesGetByBillingProfileOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByBillingProfile operation. */
export declare type PoliciesGetByBillingProfileResponse = Policy;

/** Optional parameters. */
export declare interface PoliciesGetByCustomerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByCustomer operation. */
export declare type PoliciesGetByCustomerResponse = CustomerPolicy;

/** Optional parameters. */
export declare interface PoliciesUpdateCustomerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateCustomer operation. */
export declare type PoliciesUpdateCustomerResponse = CustomerPolicy;

/** Optional parameters. */
export declare interface PoliciesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PoliciesUpdateResponse = Policy;

/** A policy. */
export declare interface Policy extends Resource {
    /** The policy that controls whether Azure marketplace purchases are allowed for a billing profile. */
    marketplacePurchases?: MarketplacePurchasesPolicy;
    /** The policy that controls whether Azure reservation purchases are allowed for a billing profile. */
    reservationPurchases?: ReservationPurchasesPolicy;
    /** The policy that controls whether users with Azure RBAC access to a subscription can view its charges. */
    viewCharges?: ViewChargesPolicy;
}

/** A product. */
export declare interface Product extends Resource {
    /** Indicates whether auto renewal is turned on or off for a product. */
    autoRenew?: AutoRenew;
    /**
     * The display name of the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The date when the product was purchased.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly purchaseDate?: Date;
    /**
     * The ID of the type of product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productTypeId?: string;
    /**
     * The description of the type of product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productType?: string;
    /** The current status of the product. */
    status?: ProductStatusType;
    /**
     * The date when the product will be renewed or canceled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endDate?: Date;
    /** The frequency at which the product will be billed. */
    billingFrequency?: BillingFrequency;
    /**
     * The last month charges.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastCharge?: Amount;
    /**
     * The date of the last charge.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastChargeDate?: Date;
    /**
     * The quantity purchased for the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quantity?: number;
    /**
     * The sku ID of the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skuId?: string;
    /**
     * The sku description of the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skuDescription?: string;
    /**
     * The id of the tenant in which the product is used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The availability of the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availabilityId?: string;
    /**
     * The ID of the invoice section to which the product is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionId?: string;
    /**
     * The name of the invoice section to which the product is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionDisplayName?: string;
    /**
     * The ID of the billing profile to which the product is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileId?: string;
    /**
     * The name of the billing profile to which the product is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileDisplayName?: string;
    /**
     * The ID of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner Agreement billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerId?: string;
    /**
     * The name of the customer for whom the product was purchased. The field is applicable only for Microsoft Partner Agreement billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerDisplayName?: string;
    /**
     * Reseller for this product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reseller?: Reseller;
}

/** Interface representing a Products. */
export declare interface Products {
    /**
     * Lists the products for a customer. These don't include products billed based on usage.The operation
     * is supported only for billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    listByCustomer(billingAccountName: string, customerName: string, options?: ProductsListByCustomerOptionalParams): PagedAsyncIterableIterator<Product>;
    /**
     * Lists the products for a billing account. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: ProductsListByBillingAccountOptionalParams): PagedAsyncIterableIterator<Product>;
    /**
     * Lists the products for a billing profile. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: ProductsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<Product>;
    /**
     * Lists the products for an invoice section. These don't include products billed based on usage. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, options?: ProductsListByInvoiceSectionOptionalParams): PagedAsyncIterableIterator<Product>;
    /**
     * Gets a product by ID. The operation is supported only for billing accounts with agreement type
     * Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param options The options parameters.
     */
    get(billingAccountName: string, productName: string, options?: ProductsGetOptionalParams): Promise<ProductsGetResponse>;
    /**
     * Updates the properties of a Product. Currently, auto renew can be updated. The operation is
     * supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the update product operation.
     * @param options The options parameters.
     */
    update(billingAccountName: string, productName: string, parameters: Product, options?: ProductsUpdateOptionalParams): Promise<ProductsUpdateResponse>;
    /**
     * Moves a product's charges to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported only for products that
     * are purchased with a recurring charge and for billing accounts with agreement type Microsoft
     * Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the move product operation.
     * @param options The options parameters.
     */
    move(billingAccountName: string, productName: string, parameters: TransferProductRequestProperties, options?: ProductsMoveOptionalParams): Promise<ProductsMoveResponse>;
    /**
     * Validates if a product's charges can be moved to a new invoice section. This operation is supported
     * only for products that are purchased with a recurring charge and for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the validate move eligibility operation.
     * @param options The options parameters.
     */
    validateMove(billingAccountName: string, productName: string, parameters: TransferProductRequestProperties, options?: ProductsValidateMoveOptionalParams): Promise<ProductsValidateMoveResponse>;
}

/** Optional parameters. */
export declare interface ProductsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ProductsGetResponse = Product;

/** Optional parameters. */
export declare interface ProductsListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:). */
    filter?: string;
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type ProductsListByBillingAccountNextResponse = ProductsListResult;

/** Optional parameters. */
export declare interface ProductsListByBillingAccountOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:). */
    filter?: string;
}

/** Contains response data for the listByBillingAccount operation. */
export declare type ProductsListByBillingAccountResponse = ProductsListResult;

/** Optional parameters. */
export declare interface ProductsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:). */
    filter?: string;
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type ProductsListByBillingProfileNextResponse = ProductsListResult;

/** Optional parameters. */
export declare interface ProductsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:). */
    filter?: string;
}

/** Contains response data for the listByBillingProfile operation. */
export declare type ProductsListByBillingProfileResponse = ProductsListResult;

/** Optional parameters. */
export declare interface ProductsListByCustomerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCustomerNext operation. */
export declare type ProductsListByCustomerNextResponse = ProductsListResult;

/** Optional parameters. */
export declare interface ProductsListByCustomerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCustomer operation. */
export declare type ProductsListByCustomerResponse = ProductsListResult;

/** Optional parameters. */
export declare interface ProductsListByInvoiceSectionNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:). */
    filter?: string;
}

/** Contains response data for the listByInvoiceSectionNext operation. */
export declare type ProductsListByInvoiceSectionNextResponse = ProductsListResult;

/** Optional parameters. */
export declare interface ProductsListByInvoiceSectionOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by product type. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value are separated by a colon (:). */
    filter?: string;
}

/** Contains response data for the listByInvoiceSection operation. */
export declare type ProductsListByInvoiceSectionResponse = ProductsListResult;

/** The list of products. It contains a list of available product summaries in reverse chronological order by purchase date. */
export declare interface ProductsListResult {
    /**
     * The list of products.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Product[];
    /**
     * Total number of records.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines headers for Products_move operation. */
export declare interface ProductsMoveHeaders {
    /** Location URI to poll for result */
    location?: string;
    /** Recommended time to wait before making another request to check the status of the operation. The time is specified in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface ProductsMoveOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the move operation. */
export declare type ProductsMoveResponse = Product;

/**
 * Defines values for ProductStatusType. \
 * {@link KnownProductStatusType} can be used interchangeably with ProductStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Inactive** \
 * **PastDue** \
 * **Expiring** \
 * **Expired** \
 * **Disabled** \
 * **Cancelled** \
 * **AutoRenew**
 */
export declare type ProductStatusType = string;

/** Optional parameters. */
export declare interface ProductsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ProductsUpdateResponse = Product;

/** Optional parameters. */
export declare interface ProductsValidateMoveOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the validateMove operation. */
export declare type ProductsValidateMoveResponse = ValidateProductTransferEligibilityResult;

/**
 * Defines values for ProductTransferValidationErrorCode. \
 * {@link KnownProductTransferValidationErrorCode} can be used interchangeably with ProductTransferValidationErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidSource** \
 * **ProductNotActive** \
 * **InsufficientPermissionOnSource** \
 * **InsufficientPermissionOnDestination** \
 * **DestinationBillingProfilePastDue** \
 * **ProductTypeNotSupported** \
 * **CrossBillingAccountNotAllowed** \
 * **NotAvailableForDestinationMarket** \
 * **OneTimePurchaseProductTransferNotAllowed**
 */
export declare type ProductTransferValidationErrorCode = string;

/** The rebill details of an invoice. */
export declare interface RebillDetails {
    /**
     * The ID of credit note.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creditNoteDocumentId?: string;
    /**
     * The ID of invoice.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceDocumentId?: string;
    /**
     * Rebill details for an invoice.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rebillDetails?: {
        [propertyName: string]: RebillDetails;
    };
}

/** Details of the reseller. */
export declare interface Reseller {
    /**
     * The MPN ID of the reseller.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resellerId?: string;
    /**
     * The name of the reseller.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** The definition of the reservation. */
export declare interface Reservation {
    /**
     * The id of the reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The location of the reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** The sku information associated to this reservation */
    sku?: ReservationSkuProperty;
    /** The array of applied scopes of a reservation. Will be null if the reservation is in Shared scope */
    appliedScopes?: string[];
    /**
     * The applied scope type of the reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly appliedScopeType?: string;
    /**
     * The reserved source type of the reservation, e.g. virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reservedResourceType?: string;
    /**
     * The number of the reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quantity?: number;
    /**
     * The provisioning state of the reservation, e.g. Succeeded
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The expiry date of the reservation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiryDate?: string;
    /**
     * The provisioning state of the reservation, e.g. Succeeded
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningSubState?: string;
    /**
     * The display name of the reservation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The provisioning state of the reservation for display, e.g. Succeeded
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayProvisioningState?: string;
    /**
     * The renew state of the reservation for display, e.g. On
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userFriendlyRenewState?: string;
    /**
     * The applied scope type of the reservation for display, e.g. Shared
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly userFriendlyAppliedScopeType?: string;
    /**
     * The effective date time of the reservation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly effectiveDateTime?: string;
    /**
     * The sku description of the reservation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly skuDescription?: string;
    /**
     * The term of the reservation, e.g. P1Y
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly term?: string;
    /**
     * The renew state of the reservation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly renew?: boolean;
    /**
     * The renew source of the reservation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly renewSource?: string;
    /**
     * Reservation utilization
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly utilization?: ReservationPropertyUtilization;
}

/** Reservation utilization */
export declare interface ReservationPropertyUtilization {
    /**
     * The number of days trend for a reservation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trend?: string;
    /** The array of aggregates of a reservation's utilization */
    aggregates?: ReservationUtilizationAggregates[];
}

/**
 * Defines values for ReservationPurchasesPolicy. \
 * {@link KnownReservationPurchasesPolicy} can be used interchangeably with ReservationPurchasesPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allowed** \
 * **NotAllowed**
 */
export declare type ReservationPurchasesPolicy = string;

/** Interface representing a Reservations. */
export declare interface Reservations {
    /**
     * Lists the reservations for a billing account and the roll up counts of reservations group by
     * provisioning states.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName: string, options?: ReservationsListByBillingAccountOptionalParams): PagedAsyncIterableIterator<Reservation>;
    /**
     * Lists the reservations for a billing profile and the roll up counts of reservations group by
     * provisioning state.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName: string, billingProfileName: string, options?: ReservationsListByBillingProfileOptionalParams): PagedAsyncIterableIterator<Reservation>;
}

/** The property of reservation sku object. */
export declare interface ReservationSkuProperty {
    /**
     * The name of the reservation sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
}

/** Optional parameters. */
export declare interface ReservationsListByBillingAccountNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or 'not'. */
    filter?: string;
    /** May be used to sort order by reservation properties. */
    orderby?: string;
    /** To indicate whether to refresh the roll up counts of the reservations group by provisioning states */
    refreshSummary?: string;
    /** The selected provisioning state */
    selectedState?: string;
}

/** Contains response data for the listByBillingAccountNext operation. */
export declare type ReservationsListByBillingAccountNextResponse = ReservationsListResult;

/** Optional parameters. */
export declare interface ReservationsListByBillingAccountOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or 'not'. */
    filter?: string;
    /** May be used to sort order by reservation properties. */
    orderby?: string;
    /** To indicate whether to refresh the roll up counts of the reservations group by provisioning states */
    refreshSummary?: string;
    /** The selected provisioning state */
    selectedState?: string;
}

/** Contains response data for the listByBillingAccount operation. */
export declare type ReservationsListByBillingAccountResponse = ReservationsListResult;

/** Optional parameters. */
export declare interface ReservationsListByBillingProfileNextOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or 'not'. */
    filter?: string;
    /** May be used to sort order by reservation properties. */
    orderby?: string;
    /** To indicate whether to refresh the roll up counts of the reservations group by provisioning state */
    refreshSummary?: string;
    /** The selected provisioning state */
    selectedState?: string;
}

/** Contains response data for the listByBillingProfileNext operation. */
export declare type ReservationsListByBillingProfileNextResponse = ReservationsListResult;

/** Optional parameters. */
export declare interface ReservationsListByBillingProfileOptionalParams extends coreClient.OperationOptions {
    /** May be used to filter by reservation properties. The filter supports 'eq', 'or', and 'and'. It does not currently support 'ne', 'gt', 'le', 'ge', or 'not'. */
    filter?: string;
    /** May be used to sort order by reservation properties. */
    orderby?: string;
    /** To indicate whether to refresh the roll up counts of the reservations group by provisioning state */
    refreshSummary?: string;
    /** The selected provisioning state */
    selectedState?: string;
}

/** Contains response data for the listByBillingProfile operation. */
export declare type ReservationsListByBillingProfileResponse = ReservationsListResult;

/** The list of reservations and summary of roll out count of reservations in each state. */
export declare interface ReservationsListResult {
    /**
     * The list of reservations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Reservation[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
    /** The roll out count summary of the reservations */
    summary?: ReservationSummary;
}

/** The roll up count summary of reservations in each state */
export declare interface ReservationSummary {
    /**
     * The number of reservation in Succeeded state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly succeededCount?: number;
    /**
     * The number of reservation in Failed state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failedCount?: number;
    /**
     * The number of reservation in Expiring state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiringCount?: number;
    /**
     * The number of reservation in Expired state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiredCount?: number;
    /**
     * The number of reservation in Pending state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pendingCount?: number;
    /**
     * The number of reservation in Cancelled state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cancelledCount?: number;
}

/**
 * Defines values for ReservationType. \
 * {@link KnownReservationType} can be used interchangeably with ReservationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Purchase** \
 * **Usage Charge**
 */
export declare type ReservationType = string;

/** The aggregate values of reservation utilization */
export declare interface ReservationUtilizationAggregates {
    /**
     * The grain of the aggregate
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly grain?: number;
    /**
     * The grain unit of the aggregate
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly grainUnit?: string;
    /**
     * The aggregate value
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: number;
    /**
     * The aggregate value unit
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly valueUnit?: string;
}

/** The Resource model definition. */
export declare interface Resource {
    /**
     * Resource Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/**
 * Defines values for SpendingLimit. \
 * {@link KnownSpendingLimit} can be used interchangeably with SpendingLimit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Off** \
 * **On**
 */
export declare type SpendingLimit = string;

/**
 * Defines values for SpendingLimitForBillingProfile. \
 * {@link KnownSpendingLimitForBillingProfile} can be used interchangeably with SpendingLimitForBillingProfile,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Off** \
 * **On**
 */
export declare type SpendingLimitForBillingProfile = string;

/**
 * Defines values for StatusReasonCode. \
 * {@link KnownStatusReasonCode} can be used interchangeably with StatusReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PastDue** \
 * **SpendingLimitReached** \
 * **SpendingLimitExpired**
 */
export declare type StatusReasonCode = string;

/**
 * Defines values for StatusReasonCodeForBillingProfile. \
 * {@link KnownStatusReasonCodeForBillingProfile} can be used interchangeably with StatusReasonCodeForBillingProfile,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PastDue** \
 * **SpendingLimitReached** \
 * **SpendingLimitExpired**
 */
export declare type StatusReasonCodeForBillingProfile = string;

/**
 * Defines values for SubscriptionTransferValidationErrorCode. \
 * {@link KnownSubscriptionTransferValidationErrorCode} can be used interchangeably with SubscriptionTransferValidationErrorCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BillingAccountInactive** \
 * **CrossBillingAccountNotAllowed** \
 * **DestinationBillingProfileInactive** \
 * **DestinationBillingProfileNotFound** \
 * **DestinationBillingProfilePastDue** \
 * **DestinationInvoiceSectionInactive** \
 * **DestinationInvoiceSectionNotFound** \
 * **InsufficientPermissionOnDestination** \
 * **InsufficientPermissionOnSource** \
 * **InvalidDestination** \
 * **InvalidSource** \
 * **MarketplaceNotEnabledOnDestination** \
 * **NotAvailableForDestinationMarket** \
 * **ProductInactive** \
 * **ProductNotFound** \
 * **ProductTypeNotSupported** \
 * **SourceBillingProfilePastDue** \
 * **SourceInvoiceSectionInactive** \
 * **SubscriptionNotActive** \
 * **SubscriptionTypeNotSupported**
 */
export declare type SubscriptionTransferValidationErrorCode = string;

/**
 * Defines values for TargetCloud. \
 * {@link KnownTargetCloud} can be used interchangeably with TargetCloud,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **USGov** \
 * **USNat** \
 * **USSec**
 */
export declare type TargetCloud = string;

/** A transaction. */
export declare interface Transaction extends Resource {
    /** The kind of transaction. Options are all or reservation. */
    kind?: TransactionTypeKind;
    /**
     * The date of transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly date?: Date;
    /**
     * Invoice on which the transaction was billed or 'pending' if the transaction is not billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoice?: string;
    /**
     * The ID of the invoice on which the transaction was billed. This field is only applicable for transactions which are billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceId?: string;
    /**
     * The order ID of the reservation. The field is only applicable for transaction of kind reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly orderId?: string;
    /**
     * The name of the reservation order. The field is only applicable for transactions of kind reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly orderName?: string;
    /**
     * The family of the product for which the transaction took place.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productFamily?: string;
    /**
     * The ID of the product type for which the transaction took place.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productTypeId?: string;
    /**
     * The type of the product for which the transaction took place.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productType?: string;
    /**
     * The description of the product for which the transaction took place.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly productDescription?: string;
    /** The type of transaction. */
    transactionType?: ReservationType;
    /**
     * The charge associated with the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transactionAmount?: Amount;
    /**
     * The quantity purchased in the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quantity?: number;
    /**
     * The ID of the invoice section which will be billed for the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionId?: string;
    /**
     * The name of the invoice section which will be billed for the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly invoiceSectionDisplayName?: string;
    /**
     * The ID of the billing profile which will be billed for the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileId?: string;
    /**
     * The name of the billing profile which will be billed for the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingProfileDisplayName?: string;
    /**
     * The ID of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerId?: string;
    /**
     * The name of the customer for which the transaction took place. The field is applicable only for Microsoft Partner Agreement billing account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerDisplayName?: string;
    /**
     * The ID of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /**
     * The name of the subscription that was used for the transaction. The field is only applicable for transaction of kind reservation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionName?: string;
    /**
     * The type of azure plan of the subscription that was used for the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azurePlan?: string;
    /**
     * The amount of any Azure credits automatically applied to this transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureCreditApplied?: Amount;
    /**
     * The ISO 4217 code for the currency in which this transaction is billed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingCurrency?: string;
    /**
     * The percentage discount, if any, applied to this transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly discount?: number;
    /**
     * The price of the product after applying any discounts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly effectivePrice?: Amount;
    /**
     * The exchange rate used to convert charged amount to billing currency, if applicable.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly exchangeRate?: number;
    /**
     * The retail price of the product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly marketPrice?: Amount;
    /**
     * The ISO 4217 code for the currency in which the product is priced.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pricingCurrency?: string;
    /**
     * The date of the purchase of the product, or the start date of the month in which usage started.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly servicePeriodStartDate?: Date;
    /**
     * The end date of the product term, or the end date of the month in which usage ended.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly servicePeriodEndDate?: Date;
    /**
     * The pre-tax charged amount for the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subTotal?: Amount;
    /**
     * The tax amount applied to the transaction.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tax?: Amount;
    /**
     * The unit of measure used to bill for the product. For example, compute services are billed per hour.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unitOfMeasure?: string;
    /**
     * The number of units used for a given product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly units?: number;
    /**
     * The description for the unit of measure for a given product.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unitType?: string;
}

/** The list of transactions. */
export declare interface TransactionListResult {
    /**
     * The list of transactions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Transaction[];
    /**
     * Total number of records.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalCount?: number;
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Transactions. */
export declare interface Transactions {
    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage
     * charges.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    listByInvoice(billingAccountName: string, invoiceName: string, options?: TransactionsListByInvoiceOptionalParams): PagedAsyncIterableIterator<Transaction>;
}

/** Optional parameters. */
export declare interface TransactionsListByInvoiceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoiceNext operation. */
export declare type TransactionsListByInvoiceNextResponse = TransactionListResult;

/** Optional parameters. */
export declare interface TransactionsListByInvoiceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByInvoice operation. */
export declare type TransactionsListByInvoiceResponse = TransactionListResult;

/**
 * Defines values for TransactionTypeKind. \
 * {@link KnownTransactionTypeKind} can be used interchangeably with TransactionTypeKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **all** \
 * **reservation**
 */
export declare type TransactionTypeKind = string;

/** Request parameters to transfer billing subscription. */
export declare interface TransferBillingSubscriptionRequestProperties {
    /** The destination invoice section id. */
    destinationInvoiceSectionId: string;
}

/** The properties of the product to initiate a transfer. */
export declare interface TransferProductRequestProperties {
    /** The destination invoice section id. */
    destinationInvoiceSectionId?: string;
}

/** Result of the address validation */
export declare interface ValidateAddressResponse {
    /** status of the address validation. */
    status?: AddressValidationStatus;
    /** The list of suggested addresses. */
    suggestedAddresses?: AddressDetails[];
    /** Validation error message. */
    validationMessage?: string;
}

/** Error details of the product transfer eligibility validation. */
export declare interface ValidateProductTransferEligibilityError {
    /** Error code for the product transfer validation. */
    code?: ProductTransferValidationErrorCode;
    /** The error message. */
    message?: string;
    /** Detailed error message explaining the error. */
    details?: string;
}

/** Result of the product transfer eligibility validation. */
export declare interface ValidateProductTransferEligibilityResult {
    /**
     * Specifies whether the transfer is eligible or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isMoveEligible?: boolean;
    /** Validation error details. */
    errorDetails?: ValidateProductTransferEligibilityError;
}

/** Error details of the transfer eligibility validation */
export declare interface ValidateSubscriptionTransferEligibilityError {
    /** Error code for the product transfer validation. */
    code?: SubscriptionTransferValidationErrorCode;
    /** The error message. */
    message?: string;
    /** Detailed error message explaining the error. */
    details?: string;
}

/** Result of the transfer eligibility validation. */
export declare interface ValidateSubscriptionTransferEligibilityResult {
    /**
     * Specifies whether the subscription is eligible to be transferred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isMoveEligible?: boolean;
    /** Validation error details. */
    errorDetails?: ValidateSubscriptionTransferEligibilityError;
}

/**
 * Defines values for ViewCharges. \
 * {@link KnownViewCharges} can be used interchangeably with ViewCharges,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allowed** \
 * **NotAllowed**
 */
export declare type ViewCharges = string;

/**
 * Defines values for ViewChargesPolicy. \
 * {@link KnownViewChargesPolicy} can be used interchangeably with ViewChargesPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allowed** \
 * **NotAllowed**
 */
export declare type ViewChargesPolicy = string;

export { }
