'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var tslib = require('tslib');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link AgreementType} that the service accepts. */
exports.KnownAgreementType = void 0;
(function (KnownAgreementType) {
    /** MicrosoftCustomerAgreement */
    KnownAgreementType["MicrosoftCustomerAgreement"] = "MicrosoftCustomerAgreement";
    /** EnterpriseAgreement */
    KnownAgreementType["EnterpriseAgreement"] = "EnterpriseAgreement";
    /** MicrosoftOnlineServicesProgram */
    KnownAgreementType["MicrosoftOnlineServicesProgram"] = "MicrosoftOnlineServicesProgram";
    /** MicrosoftPartnerAgreement */
    KnownAgreementType["MicrosoftPartnerAgreement"] = "MicrosoftPartnerAgreement";
})(exports.KnownAgreementType || (exports.KnownAgreementType = {}));
/** Known values of {@link AccountType} that the service accepts. */
exports.KnownAccountType = void 0;
(function (KnownAccountType) {
    /** Enterprise */
    KnownAccountType["Enterprise"] = "Enterprise";
    /** Individual */
    KnownAccountType["Individual"] = "Individual";
    /** Partner */
    KnownAccountType["Partner"] = "Partner";
})(exports.KnownAccountType || (exports.KnownAccountType = {}));
/** Known values of {@link AccountStatus} that the service accepts. */
exports.KnownAccountStatus = void 0;
(function (KnownAccountStatus) {
    /** Active */
    KnownAccountStatus["Active"] = "Active";
    /** Deleted */
    KnownAccountStatus["Deleted"] = "Deleted";
    /** Disabled */
    KnownAccountStatus["Disabled"] = "Disabled";
    /** Expired */
    KnownAccountStatus["Expired"] = "Expired";
    /** Transferred */
    KnownAccountStatus["Transferred"] = "Transferred";
    /** Extended */
    KnownAccountStatus["Extended"] = "Extended";
    /** Terminated */
    KnownAccountStatus["Terminated"] = "Terminated";
})(exports.KnownAccountStatus || (exports.KnownAccountStatus = {}));
/** Known values of {@link BillingRelationshipType} that the service accepts. */
exports.KnownBillingRelationshipType = void 0;
(function (KnownBillingRelationshipType) {
    /** Direct */
    KnownBillingRelationshipType["Direct"] = "Direct";
    /** IndirectCustomer */
    KnownBillingRelationshipType["IndirectCustomer"] = "IndirectCustomer";
    /** IndirectPartner */
    KnownBillingRelationshipType["IndirectPartner"] = "IndirectPartner";
    /** CSPPartner */
    KnownBillingRelationshipType["CSPPartner"] = "CSPPartner";
})(exports.KnownBillingRelationshipType || (exports.KnownBillingRelationshipType = {}));
/** Known values of {@link InvoiceSectionState} that the service accepts. */
exports.KnownInvoiceSectionState = void 0;
(function (KnownInvoiceSectionState) {
    /** Active */
    KnownInvoiceSectionState["Active"] = "Active";
    /** Restricted */
    KnownInvoiceSectionState["Restricted"] = "Restricted";
})(exports.KnownInvoiceSectionState || (exports.KnownInvoiceSectionState = {}));
/** Known values of {@link TargetCloud} that the service accepts. */
exports.KnownTargetCloud = void 0;
(function (KnownTargetCloud) {
    /** USGov */
    KnownTargetCloud["USGov"] = "USGov";
    /** USNat */
    KnownTargetCloud["USNat"] = "USNat";
    /** USSec */
    KnownTargetCloud["USSec"] = "USSec";
})(exports.KnownTargetCloud || (exports.KnownTargetCloud = {}));
/** Known values of {@link BillingProfileStatus} that the service accepts. */
exports.KnownBillingProfileStatus = void 0;
(function (KnownBillingProfileStatus) {
    /** Active */
    KnownBillingProfileStatus["Active"] = "Active";
    /** Disabled */
    KnownBillingProfileStatus["Disabled"] = "Disabled";
    /** Warned */
    KnownBillingProfileStatus["Warned"] = "Warned";
})(exports.KnownBillingProfileStatus || (exports.KnownBillingProfileStatus = {}));
/** Known values of {@link StatusReasonCode} that the service accepts. */
exports.KnownStatusReasonCode = void 0;
(function (KnownStatusReasonCode) {
    /** PastDue */
    KnownStatusReasonCode["PastDue"] = "PastDue";
    /** SpendingLimitReached */
    KnownStatusReasonCode["SpendingLimitReached"] = "SpendingLimitReached";
    /** SpendingLimitExpired */
    KnownStatusReasonCode["SpendingLimitExpired"] = "SpendingLimitExpired";
})(exports.KnownStatusReasonCode || (exports.KnownStatusReasonCode = {}));
/** Known values of {@link SpendingLimit} that the service accepts. */
exports.KnownSpendingLimit = void 0;
(function (KnownSpendingLimit) {
    /** Off */
    KnownSpendingLimit["Off"] = "Off";
    /** On */
    KnownSpendingLimit["On"] = "On";
})(exports.KnownSpendingLimit || (exports.KnownSpendingLimit = {}));
/** Known values of {@link StatusReasonCodeForBillingProfile} that the service accepts. */
exports.KnownStatusReasonCodeForBillingProfile = void 0;
(function (KnownStatusReasonCodeForBillingProfile) {
    /** PastDue */
    KnownStatusReasonCodeForBillingProfile["PastDue"] = "PastDue";
    /** SpendingLimitReached */
    KnownStatusReasonCodeForBillingProfile["SpendingLimitReached"] = "SpendingLimitReached";
    /** SpendingLimitExpired */
    KnownStatusReasonCodeForBillingProfile["SpendingLimitExpired"] = "SpendingLimitExpired";
})(exports.KnownStatusReasonCodeForBillingProfile || (exports.KnownStatusReasonCodeForBillingProfile = {}));
/** Known values of {@link SpendingLimitForBillingProfile} that the service accepts. */
exports.KnownSpendingLimitForBillingProfile = void 0;
(function (KnownSpendingLimitForBillingProfile) {
    /** Off */
    KnownSpendingLimitForBillingProfile["Off"] = "Off";
    /** On */
    KnownSpendingLimitForBillingProfile["On"] = "On";
})(exports.KnownSpendingLimitForBillingProfile || (exports.KnownSpendingLimitForBillingProfile = {}));
/** Known values of {@link AddressValidationStatus} that the service accepts. */
exports.KnownAddressValidationStatus = void 0;
(function (KnownAddressValidationStatus) {
    /** Valid */
    KnownAddressValidationStatus["Valid"] = "Valid";
    /** Invalid */
    KnownAddressValidationStatus["Invalid"] = "Invalid";
})(exports.KnownAddressValidationStatus || (exports.KnownAddressValidationStatus = {}));
/** Known values of {@link BillingSubscriptionStatusType} that the service accepts. */
exports.KnownBillingSubscriptionStatusType = void 0;
(function (KnownBillingSubscriptionStatusType) {
    /** Active */
    KnownBillingSubscriptionStatusType["Active"] = "Active";
    /** Inactive */
    KnownBillingSubscriptionStatusType["Inactive"] = "Inactive";
    /** Abandoned */
    KnownBillingSubscriptionStatusType["Abandoned"] = "Abandoned";
    /** Deleted */
    KnownBillingSubscriptionStatusType["Deleted"] = "Deleted";
    /** Warning */
    KnownBillingSubscriptionStatusType["Warning"] = "Warning";
})(exports.KnownBillingSubscriptionStatusType || (exports.KnownBillingSubscriptionStatusType = {}));
/** Known values of {@link AutoRenew} that the service accepts. */
exports.KnownAutoRenew = void 0;
(function (KnownAutoRenew) {
    /** Off */
    KnownAutoRenew["Off"] = "Off";
    /** On */
    KnownAutoRenew["On"] = "On";
})(exports.KnownAutoRenew || (exports.KnownAutoRenew = {}));
/** Known values of {@link ProductStatusType} that the service accepts. */
exports.KnownProductStatusType = void 0;
(function (KnownProductStatusType) {
    /** Active */
    KnownProductStatusType["Active"] = "Active";
    /** Inactive */
    KnownProductStatusType["Inactive"] = "Inactive";
    /** PastDue */
    KnownProductStatusType["PastDue"] = "PastDue";
    /** Expiring */
    KnownProductStatusType["Expiring"] = "Expiring";
    /** Expired */
    KnownProductStatusType["Expired"] = "Expired";
    /** Disabled */
    KnownProductStatusType["Disabled"] = "Disabled";
    /** Cancelled */
    KnownProductStatusType["Cancelled"] = "Cancelled";
    /** AutoRenew */
    KnownProductStatusType["AutoRenew"] = "AutoRenew";
})(exports.KnownProductStatusType || (exports.KnownProductStatusType = {}));
/** Known values of {@link BillingFrequency} that the service accepts. */
exports.KnownBillingFrequency = void 0;
(function (KnownBillingFrequency) {
    /** OneTime */
    KnownBillingFrequency["OneTime"] = "OneTime";
    /** Monthly */
    KnownBillingFrequency["Monthly"] = "Monthly";
    /** UsageBased */
    KnownBillingFrequency["UsageBased"] = "UsageBased";
})(exports.KnownBillingFrequency || (exports.KnownBillingFrequency = {}));
/** Known values of {@link InvoiceStatus} that the service accepts. */
exports.KnownInvoiceStatus = void 0;
(function (KnownInvoiceStatus) {
    /** Due */
    KnownInvoiceStatus["Due"] = "Due";
    /** OverDue */
    KnownInvoiceStatus["OverDue"] = "OverDue";
    /** Paid */
    KnownInvoiceStatus["Paid"] = "Paid";
    /** Void */
    KnownInvoiceStatus["Void"] = "Void";
})(exports.KnownInvoiceStatus || (exports.KnownInvoiceStatus = {}));
/** Known values of {@link InvoiceType} that the service accepts. */
exports.KnownInvoiceType = void 0;
(function (KnownInvoiceType) {
    /** AzureService */
    KnownInvoiceType["AzureService"] = "AzureService";
    /** AzureMarketplace */
    KnownInvoiceType["AzureMarketplace"] = "AzureMarketplace";
    /** AzureSupport */
    KnownInvoiceType["AzureSupport"] = "AzureSupport";
})(exports.KnownInvoiceType || (exports.KnownInvoiceType = {}));
/** Known values of {@link DocumentType} that the service accepts. */
exports.KnownDocumentType = void 0;
(function (KnownDocumentType) {
    /** Invoice */
    KnownDocumentType["Invoice"] = "Invoice";
    /** VoidNote */
    KnownDocumentType["VoidNote"] = "VoidNote";
    /** TaxReceipt */
    KnownDocumentType["TaxReceipt"] = "TaxReceipt";
    /** CreditNote */
    KnownDocumentType["CreditNote"] = "CreditNote";
})(exports.KnownDocumentType || (exports.KnownDocumentType = {}));
/** Known values of {@link DocumentSource} that the service accepts. */
exports.KnownDocumentSource = void 0;
(function (KnownDocumentSource) {
    /** DRS */
    KnownDocumentSource["DRS"] = "DRS";
    /** ENF */
    KnownDocumentSource["ENF"] = "ENF";
})(exports.KnownDocumentSource || (exports.KnownDocumentSource = {}));
/** Known values of {@link PaymentMethodFamily} that the service accepts. */
exports.KnownPaymentMethodFamily = void 0;
(function (KnownPaymentMethodFamily) {
    /** Credits */
    KnownPaymentMethodFamily["Credits"] = "Credits";
    /** CheckWire */
    KnownPaymentMethodFamily["CheckWire"] = "CheckWire";
    /** CreditCard */
    KnownPaymentMethodFamily["CreditCard"] = "CreditCard";
    /** None */
    KnownPaymentMethodFamily["None"] = "None";
})(exports.KnownPaymentMethodFamily || (exports.KnownPaymentMethodFamily = {}));
/** Known values of {@link InvoiceDocumentType} that the service accepts. */
exports.KnownInvoiceDocumentType = void 0;
(function (KnownInvoiceDocumentType) {
    /** Invoice */
    KnownInvoiceDocumentType["Invoice"] = "Invoice";
    /** CreditNote */
    KnownInvoiceDocumentType["CreditNote"] = "CreditNote";
})(exports.KnownInvoiceDocumentType || (exports.KnownInvoiceDocumentType = {}));
/** Known values of {@link SubscriptionTransferValidationErrorCode} that the service accepts. */
exports.KnownSubscriptionTransferValidationErrorCode = void 0;
(function (KnownSubscriptionTransferValidationErrorCode) {
    /** BillingAccountInactive */
    KnownSubscriptionTransferValidationErrorCode["BillingAccountInactive"] = "BillingAccountInactive";
    /** CrossBillingAccountNotAllowed */
    KnownSubscriptionTransferValidationErrorCode["CrossBillingAccountNotAllowed"] = "CrossBillingAccountNotAllowed";
    /** DestinationBillingProfileInactive */
    KnownSubscriptionTransferValidationErrorCode["DestinationBillingProfileInactive"] = "DestinationBillingProfileInactive";
    /** DestinationBillingProfileNotFound */
    KnownSubscriptionTransferValidationErrorCode["DestinationBillingProfileNotFound"] = "DestinationBillingProfileNotFound";
    /** DestinationBillingProfilePastDue */
    KnownSubscriptionTransferValidationErrorCode["DestinationBillingProfilePastDue"] = "DestinationBillingProfilePastDue";
    /** DestinationInvoiceSectionInactive */
    KnownSubscriptionTransferValidationErrorCode["DestinationInvoiceSectionInactive"] = "DestinationInvoiceSectionInactive";
    /** DestinationInvoiceSectionNotFound */
    KnownSubscriptionTransferValidationErrorCode["DestinationInvoiceSectionNotFound"] = "DestinationInvoiceSectionNotFound";
    /** InsufficientPermissionOnDestination */
    KnownSubscriptionTransferValidationErrorCode["InsufficientPermissionOnDestination"] = "InsufficientPermissionOnDestination";
    /** InsufficientPermissionOnSource */
    KnownSubscriptionTransferValidationErrorCode["InsufficientPermissionOnSource"] = "InsufficientPermissionOnSource";
    /** InvalidDestination */
    KnownSubscriptionTransferValidationErrorCode["InvalidDestination"] = "InvalidDestination";
    /** InvalidSource */
    KnownSubscriptionTransferValidationErrorCode["InvalidSource"] = "InvalidSource";
    /** MarketplaceNotEnabledOnDestination */
    KnownSubscriptionTransferValidationErrorCode["MarketplaceNotEnabledOnDestination"] = "MarketplaceNotEnabledOnDestination";
    /** NotAvailableForDestinationMarket */
    KnownSubscriptionTransferValidationErrorCode["NotAvailableForDestinationMarket"] = "NotAvailableForDestinationMarket";
    /** ProductInactive */
    KnownSubscriptionTransferValidationErrorCode["ProductInactive"] = "ProductInactive";
    /** ProductNotFound */
    KnownSubscriptionTransferValidationErrorCode["ProductNotFound"] = "ProductNotFound";
    /** ProductTypeNotSupported */
    KnownSubscriptionTransferValidationErrorCode["ProductTypeNotSupported"] = "ProductTypeNotSupported";
    /** SourceBillingProfilePastDue */
    KnownSubscriptionTransferValidationErrorCode["SourceBillingProfilePastDue"] = "SourceBillingProfilePastDue";
    /** SourceInvoiceSectionInactive */
    KnownSubscriptionTransferValidationErrorCode["SourceInvoiceSectionInactive"] = "SourceInvoiceSectionInactive";
    /** SubscriptionNotActive */
    KnownSubscriptionTransferValidationErrorCode["SubscriptionNotActive"] = "SubscriptionNotActive";
    /** SubscriptionTypeNotSupported */
    KnownSubscriptionTransferValidationErrorCode["SubscriptionTypeNotSupported"] = "SubscriptionTypeNotSupported";
})(exports.KnownSubscriptionTransferValidationErrorCode || (exports.KnownSubscriptionTransferValidationErrorCode = {}));
/** Known values of {@link ProductTransferValidationErrorCode} that the service accepts. */
exports.KnownProductTransferValidationErrorCode = void 0;
(function (KnownProductTransferValidationErrorCode) {
    /** InvalidSource */
    KnownProductTransferValidationErrorCode["InvalidSource"] = "InvalidSource";
    /** ProductNotActive */
    KnownProductTransferValidationErrorCode["ProductNotActive"] = "ProductNotActive";
    /** InsufficientPermissionOnSource */
    KnownProductTransferValidationErrorCode["InsufficientPermissionOnSource"] = "InsufficientPermissionOnSource";
    /** InsufficientPermissionOnDestination */
    KnownProductTransferValidationErrorCode["InsufficientPermissionOnDestination"] = "InsufficientPermissionOnDestination";
    /** DestinationBillingProfilePastDue */
    KnownProductTransferValidationErrorCode["DestinationBillingProfilePastDue"] = "DestinationBillingProfilePastDue";
    /** ProductTypeNotSupported */
    KnownProductTransferValidationErrorCode["ProductTypeNotSupported"] = "ProductTypeNotSupported";
    /** CrossBillingAccountNotAllowed */
    KnownProductTransferValidationErrorCode["CrossBillingAccountNotAllowed"] = "CrossBillingAccountNotAllowed";
    /** NotAvailableForDestinationMarket */
    KnownProductTransferValidationErrorCode["NotAvailableForDestinationMarket"] = "NotAvailableForDestinationMarket";
    /** OneTimePurchaseProductTransferNotAllowed */
    KnownProductTransferValidationErrorCode["OneTimePurchaseProductTransferNotAllowed"] = "OneTimePurchaseProductTransferNotAllowed";
})(exports.KnownProductTransferValidationErrorCode || (exports.KnownProductTransferValidationErrorCode = {}));
/** Known values of {@link TransactionTypeKind} that the service accepts. */
exports.KnownTransactionTypeKind = void 0;
(function (KnownTransactionTypeKind) {
    /** All */
    KnownTransactionTypeKind["All"] = "all";
    /** Reservation */
    KnownTransactionTypeKind["Reservation"] = "reservation";
})(exports.KnownTransactionTypeKind || (exports.KnownTransactionTypeKind = {}));
/** Known values of {@link ReservationType} that the service accepts. */
exports.KnownReservationType = void 0;
(function (KnownReservationType) {
    /** Purchase */
    KnownReservationType["Purchase"] = "Purchase";
    /** UsageCharge */
    KnownReservationType["UsageCharge"] = "Usage Charge";
})(exports.KnownReservationType || (exports.KnownReservationType = {}));
/** Known values of {@link MarketplacePurchasesPolicy} that the service accepts. */
exports.KnownMarketplacePurchasesPolicy = void 0;
(function (KnownMarketplacePurchasesPolicy) {
    /** AllAllowed */
    KnownMarketplacePurchasesPolicy["AllAllowed"] = "AllAllowed";
    /** OnlyFreeAllowed */
    KnownMarketplacePurchasesPolicy["OnlyFreeAllowed"] = "OnlyFreeAllowed";
    /** NotAllowed */
    KnownMarketplacePurchasesPolicy["NotAllowed"] = "NotAllowed";
})(exports.KnownMarketplacePurchasesPolicy || (exports.KnownMarketplacePurchasesPolicy = {}));
/** Known values of {@link ReservationPurchasesPolicy} that the service accepts. */
exports.KnownReservationPurchasesPolicy = void 0;
(function (KnownReservationPurchasesPolicy) {
    /** Allowed */
    KnownReservationPurchasesPolicy["Allowed"] = "Allowed";
    /** NotAllowed */
    KnownReservationPurchasesPolicy["NotAllowed"] = "NotAllowed";
})(exports.KnownReservationPurchasesPolicy || (exports.KnownReservationPurchasesPolicy = {}));
/** Known values of {@link ViewChargesPolicy} that the service accepts. */
exports.KnownViewChargesPolicy = void 0;
(function (KnownViewChargesPolicy) {
    /** Allowed */
    KnownViewChargesPolicy["Allowed"] = "Allowed";
    /** NotAllowed */
    KnownViewChargesPolicy["NotAllowed"] = "NotAllowed";
})(exports.KnownViewChargesPolicy || (exports.KnownViewChargesPolicy = {}));
/** Known values of {@link ViewCharges} that the service accepts. */
exports.KnownViewCharges = void 0;
(function (KnownViewCharges) {
    /** Allowed */
    KnownViewCharges["Allowed"] = "Allowed";
    /** NotAllowed */
    KnownViewCharges["NotAllowed"] = "NotAllowed";
})(exports.KnownViewCharges || (exports.KnownViewCharges = {}));
/** Known values of {@link BillingProfileStatusReasonCode} that the service accepts. */
exports.KnownBillingProfileStatusReasonCode = void 0;
(function (KnownBillingProfileStatusReasonCode) {
    /** PastDue */
    KnownBillingProfileStatusReasonCode["PastDue"] = "PastDue";
    /** SpendingLimitReached */
    KnownBillingProfileStatusReasonCode["SpendingLimitReached"] = "SpendingLimitReached";
    /** SpendingLimitExpired */
    KnownBillingProfileStatusReasonCode["SpendingLimitExpired"] = "SpendingLimitExpired";
})(exports.KnownBillingProfileStatusReasonCode || (exports.KnownBillingProfileStatusReasonCode = {}));
/** Known values of {@link BillingProfileSpendingLimit} that the service accepts. */
exports.KnownBillingProfileSpendingLimit = void 0;
(function (KnownBillingProfileSpendingLimit) {
    /** Off */
    KnownBillingProfileSpendingLimit["Off"] = "Off";
    /** On */
    KnownBillingProfileSpendingLimit["On"] = "On";
})(exports.KnownBillingProfileSpendingLimit || (exports.KnownBillingProfileSpendingLimit = {}));
/** Known values of {@link Category} that the service accepts. */
exports.KnownCategory = void 0;
(function (KnownCategory) {
    /** MicrosoftCustomerAgreement */
    KnownCategory["MicrosoftCustomerAgreement"] = "MicrosoftCustomerAgreement";
    /** AffiliatePurchaseTerms */
    KnownCategory["AffiliatePurchaseTerms"] = "AffiliatePurchaseTerms";
    /** Other */
    KnownCategory["Other"] = "Other";
})(exports.KnownCategory || (exports.KnownCategory = {}));
/** Known values of {@link AcceptanceMode} that the service accepts. */
exports.KnownAcceptanceMode = void 0;
(function (KnownAcceptanceMode) {
    /** ClickToAccept */
    KnownAcceptanceMode["ClickToAccept"] = "ClickToAccept";
    /** ESignEmbedded */
    KnownAcceptanceMode["ESignEmbedded"] = "ESignEmbedded";
    /** ESignOffline */
    KnownAcceptanceMode["ESignOffline"] = "ESignOffline";
})(exports.KnownAcceptanceMode || (exports.KnownAcceptanceMode = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const BillingAccountListResult = {
    type: {
        name: "Composite",
        className: "BillingAccountListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingAccount"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AddressDetails = {
    type: {
        name: "Composite",
        className: "AddressDetails",
        modelProperties: {
            firstName: {
                serializedName: "firstName",
                type: {
                    name: "String"
                }
            },
            middleName: {
                serializedName: "middleName",
                type: {
                    name: "String"
                }
            },
            lastName: {
                serializedName: "lastName",
                type: {
                    name: "String"
                }
            },
            companyName: {
                serializedName: "companyName",
                type: {
                    name: "String"
                }
            },
            addressLine1: {
                serializedName: "addressLine1",
                required: true,
                type: {
                    name: "String"
                }
            },
            addressLine2: {
                serializedName: "addressLine2",
                type: {
                    name: "String"
                }
            },
            addressLine3: {
                serializedName: "addressLine3",
                type: {
                    name: "String"
                }
            },
            city: {
                serializedName: "city",
                type: {
                    name: "String"
                }
            },
            district: {
                serializedName: "district",
                type: {
                    name: "String"
                }
            },
            region: {
                serializedName: "region",
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                required: true,
                type: {
                    name: "String"
                }
            },
            postalCode: {
                serializedName: "postalCode",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            phoneNumber: {
                serializedName: "phoneNumber",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingProfilesOnExpand = {
    type: {
        name: "Composite",
        className: "BillingProfilesOnExpand",
        modelProperties: {
            hasMoreResults: {
                serializedName: "hasMoreResults",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingProfile"
                        }
                    }
                }
            }
        }
    }
};
const IndirectRelationshipInfo = {
    type: {
        name: "Composite",
        className: "IndirectRelationshipInfo",
        modelProperties: {
            billingAccountName: {
                serializedName: "billingAccountName",
                type: {
                    name: "String"
                }
            },
            billingProfileName: {
                serializedName: "billingProfileName",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzurePlan = {
    type: {
        name: "Composite",
        className: "AzurePlan",
        modelProperties: {
            skuId: {
                serializedName: "skuId",
                type: {
                    name: "String"
                }
            },
            skuDescription: {
                serializedName: "skuDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceSectionsOnExpand = {
    type: {
        name: "Composite",
        className: "InvoiceSectionsOnExpand",
        modelProperties: {
            hasMoreResults: {
                serializedName: "hasMoreResults",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InvoiceSection"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Enrollment = {
    type: {
        name: "Composite",
        className: "Enrollment",
        modelProperties: {
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "DateTime"
                }
            },
            endDate: {
                serializedName: "endDate",
                type: {
                    name: "DateTime"
                }
            },
            currency: {
                serializedName: "currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            channel: {
                serializedName: "channel",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            policies: {
                serializedName: "policies",
                type: {
                    name: "Composite",
                    className: "EnrollmentPolicies"
                }
            },
            language: {
                serializedName: "language",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            countryCode: {
                serializedName: "countryCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingCycle: {
                serializedName: "billingCycle",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnrollmentPolicies = {
    type: {
        name: "Composite",
        className: "EnrollmentPolicies",
        modelProperties: {
            accountOwnerViewCharges: {
                serializedName: "accountOwnerViewCharges",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            departmentAdminViewCharges: {
                serializedName: "departmentAdminViewCharges",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            marketplaceEnabled: {
                serializedName: "marketplaceEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            reservedInstancesEnabled: {
                serializedName: "reservedInstancesEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetails"
                }
            }
        }
    }
};
const ErrorDetails = {
    type: {
        name: "Composite",
        className: "ErrorDetails",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorSubDetailsItem"
                        }
                    }
                }
            }
        }
    }
};
const ErrorSubDetailsItem = {
    type: {
        name: "Composite",
        className: "ErrorSubDetailsItem",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingAccountUpdateRequest = {
    type: {
        name: "Composite",
        className: "BillingAccountUpdateRequest",
        modelProperties: {
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            soldTo: {
                serializedName: "properties.soldTo",
                type: {
                    name: "Composite",
                    className: "AddressDetails"
                }
            },
            agreementType: {
                serializedName: "properties.agreementType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            accountType: {
                serializedName: "properties.accountType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            accountStatus: {
                serializedName: "properties.accountStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingProfiles: {
                serializedName: "properties.billingProfiles",
                type: {
                    name: "Composite",
                    className: "BillingProfilesOnExpand"
                }
            },
            enrollmentDetails: {
                serializedName: "properties.enrollmentDetails",
                type: {
                    name: "Composite",
                    className: "Enrollment"
                }
            },
            departments: {
                serializedName: "properties.departments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Department"
                        }
                    }
                }
            },
            enrollmentAccounts: {
                serializedName: "properties.enrollmentAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnrollmentAccount"
                        }
                    }
                }
            },
            hasReadAccess: {
                serializedName: "properties.hasReadAccess",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            notificationEmailAddress: {
                serializedName: "properties.notificationEmailAddress",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceSectionListWithCreateSubPermissionResult = {
    type: {
        name: "Composite",
        className: "InvoiceSectionListWithCreateSubPermissionResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InvoiceSectionWithCreateSubPermission"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceSectionWithCreateSubPermission = {
    type: {
        name: "Composite",
        className: "InvoiceSectionWithCreateSubPermission",
        modelProperties: {
            invoiceSectionId: {
                serializedName: "invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            invoiceSectionDisplayName: {
                serializedName: "invoiceSectionDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            invoiceSectionSystemId: {
                serializedName: "invoiceSectionSystemId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingProfileId: {
                serializedName: "billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingProfileDisplayName: {
                serializedName: "billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingProfileStatus: {
                serializedName: "billingProfileStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingProfileStatusReasonCode: {
                serializedName: "billingProfileStatusReasonCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingProfileSpendingLimit: {
                serializedName: "billingProfileSpendingLimit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            billingProfileSystemId: {
                serializedName: "billingProfileSystemId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            enabledAzurePlans: {
                serializedName: "enabledAzurePlans",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzurePlan"
                        }
                    }
                }
            }
        }
    }
};
const ValidateAddressResponse = {
    type: {
        name: "Composite",
        className: "ValidateAddressResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            suggestedAddresses: {
                serializedName: "suggestedAddresses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AddressDetails"
                        }
                    }
                }
            },
            validationMessage: {
                serializedName: "validationMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Amount = {
    type: {
        name: "Composite",
        className: "Amount",
        modelProperties: {
            currency: {
                serializedName: "currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const InstructionListResult = {
    type: {
        name: "Composite",
        className: "InstructionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Instruction"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingProfileListResult = {
    type: {
        name: "Composite",
        className: "BillingProfileListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingProfile"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomerListResult = {
    type: {
        name: "Composite",
        className: "CustomerListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Customer"
                        }
                    }
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Reseller = {
    type: {
        name: "Composite",
        className: "Reseller",
        modelProperties: {
            resellerId: {
                serializedName: "resellerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceSectionListResult = {
    type: {
        name: "Composite",
        className: "InvoiceSectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InvoiceSection"
                        }
                    }
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingPermissionsListResult = {
    type: {
        name: "Composite",
        className: "BillingPermissionsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingPermissionsProperties"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingPermissionsProperties = {
    type: {
        name: "Composite",
        className: "BillingPermissionsProperties",
        modelProperties: {
            actions: {
                serializedName: "actions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            notActions: {
                serializedName: "notActions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const BillingSubscriptionsListResult = {
    type: {
        name: "Composite",
        className: "BillingSubscriptionsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingSubscription"
                        }
                    }
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProductsListResult = {
    type: {
        name: "Composite",
        className: "ProductsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Product"
                        }
                    }
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceListResult = {
    type: {
        name: "Composite",
        className: "InvoiceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Invoice"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Document = {
    type: {
        name: "Composite",
        className: "Document",
        modelProperties: {
            kind: {
                serializedName: "kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PaymentProperties = {
    type: {
        name: "Composite",
        className: "PaymentProperties",
        modelProperties: {
            paymentType: {
                serializedName: "paymentType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            amount: {
                serializedName: "amount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            },
            date: {
                serializedName: "date",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            paymentMethodFamily: {
                serializedName: "paymentMethodFamily",
                type: {
                    name: "String"
                }
            },
            paymentMethodType: {
                serializedName: "paymentMethodType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RebillDetails = {
    type: {
        name: "Composite",
        className: "RebillDetails",
        modelProperties: {
            creditNoteDocumentId: {
                serializedName: "creditNoteDocumentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            invoiceDocumentId: {
                serializedName: "invoiceDocumentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            rebillDetails: {
                serializedName: "rebillDetails",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "RebillDetails" } }
                }
            }
        }
    }
};
const DownloadUrl = {
    type: {
        name: "Composite",
        className: "DownloadUrl",
        modelProperties: {
            expiryTime: {
                serializedName: "expiryTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            url: {
                serializedName: "url",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TransferBillingSubscriptionRequestProperties = {
    type: {
        name: "Composite",
        className: "TransferBillingSubscriptionRequestProperties",
        modelProperties: {
            destinationInvoiceSectionId: {
                serializedName: "destinationInvoiceSectionId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ValidateSubscriptionTransferEligibilityResult = {
    type: {
        name: "Composite",
        className: "ValidateSubscriptionTransferEligibilityResult",
        modelProperties: {
            isMoveEligible: {
                serializedName: "isMoveEligible",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Composite",
                    className: "ValidateSubscriptionTransferEligibilityError"
                }
            }
        }
    }
};
const ValidateSubscriptionTransferEligibilityError = {
    type: {
        name: "Composite",
        className: "ValidateSubscriptionTransferEligibilityError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TransferProductRequestProperties = {
    type: {
        name: "Composite",
        className: "TransferProductRequestProperties",
        modelProperties: {
            destinationInvoiceSectionId: {
                serializedName: "destinationInvoiceSectionId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ValidateProductTransferEligibilityResult = {
    type: {
        name: "Composite",
        className: "ValidateProductTransferEligibilityResult",
        modelProperties: {
            isMoveEligible: {
                serializedName: "isMoveEligible",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            errorDetails: {
                serializedName: "errorDetails",
                type: {
                    name: "Composite",
                    className: "ValidateProductTransferEligibilityError"
                }
            }
        }
    }
};
const ValidateProductTransferEligibilityError = {
    type: {
        name: "Composite",
        className: "ValidateProductTransferEligibilityError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TransactionListResult = {
    type: {
        name: "Composite",
        className: "TransactionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transaction"
                        }
                    }
                }
            },
            totalCount: {
                serializedName: "totalCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingRoleDefinitionListResult = {
    type: {
        name: "Composite",
        className: "BillingRoleDefinitionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingRoleDefinition"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingRoleAssignmentListResult = {
    type: {
        name: "Composite",
        className: "BillingRoleAssignmentListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingRoleAssignment"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AgreementListResult = {
    type: {
        name: "Composite",
        className: "AgreementListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Agreement"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Participants = {
    type: {
        name: "Composite",
        className: "Participants",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            statusDate: {
                serializedName: "statusDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            email: {
                serializedName: "email",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationsListResult = {
    type: {
        name: "Composite",
        className: "ReservationsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Reservation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            summary: {
                serializedName: "summary",
                type: {
                    name: "Composite",
                    className: "ReservationSummary"
                }
            }
        }
    }
};
const Reservation = {
    type: {
        name: "Composite",
        className: "Reservation",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ReservationSkuProperty"
                }
            },
            appliedScopes: {
                serializedName: "properties.appliedScopes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            appliedScopeType: {
                serializedName: "properties.appliedScopeType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reservedResourceType: {
                serializedName: "properties.reservedResourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            quantity: {
                serializedName: "properties.quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expiryDate: {
                serializedName: "properties.expiryDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningSubState: {
                serializedName: "properties.provisioningSubState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayProvisioningState: {
                serializedName: "properties.displayProvisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            userFriendlyRenewState: {
                serializedName: "properties.userFriendlyRenewState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            userFriendlyAppliedScopeType: {
                serializedName: "properties.userFriendlyAppliedScopeType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            effectiveDateTime: {
                serializedName: "properties.effectiveDateTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            skuDescription: {
                serializedName: "properties.skuDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            term: {
                serializedName: "properties.term",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            renew: {
                serializedName: "properties.renew",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            renewSource: {
                serializedName: "properties.renewSource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            utilization: {
                serializedName: "properties.utilization",
                type: {
                    name: "Composite",
                    className: "ReservationPropertyUtilization"
                }
            }
        }
    }
};
const ReservationSkuProperty = {
    type: {
        name: "Composite",
        className: "ReservationSkuProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationPropertyUtilization = {
    type: {
        name: "Composite",
        className: "ReservationPropertyUtilization",
        modelProperties: {
            trend: {
                serializedName: "trend",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aggregates: {
                serializedName: "aggregates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReservationUtilizationAggregates"
                        }
                    }
                }
            }
        }
    }
};
const ReservationUtilizationAggregates = {
    type: {
        name: "Composite",
        className: "ReservationUtilizationAggregates",
        modelProperties: {
            grain: {
                serializedName: "grain",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            grainUnit: {
                serializedName: "grainUnit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            valueUnit: {
                serializedName: "valueUnit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReservationSummary = {
    type: {
        name: "Composite",
        className: "ReservationSummary",
        modelProperties: {
            succeededCount: {
                serializedName: "succeededCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            failedCount: {
                serializedName: "failedCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            expiringCount: {
                serializedName: "expiringCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            expiredCount: {
                serializedName: "expiredCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            pendingCount: {
                serializedName: "pendingCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            cancelledCount: {
                serializedName: "cancelledCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const EnrollmentAccountListResult = {
    type: {
        name: "Composite",
        className: "EnrollmentAccountListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnrollmentAccountSummary"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingPeriodsListResult = {
    type: {
        name: "Composite",
        className: "BillingPeriodsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingPeriod"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BillingProfileCreationRequest = {
    type: {
        name: "Composite",
        className: "BillingProfileCreationRequest",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            poNumber: {
                serializedName: "poNumber",
                type: {
                    name: "String"
                }
            },
            billTo: {
                serializedName: "billTo",
                type: {
                    name: "Composite",
                    className: "AddressDetails"
                }
            },
            invoiceEmailOptIn: {
                serializedName: "invoiceEmailOptIn",
                type: {
                    name: "Boolean"
                }
            },
            enabledAzurePlans: {
                serializedName: "enabledAzurePlans",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzurePlan"
                        }
                    }
                }
            }
        }
    }
};
const InvoiceSectionCreationRequest = {
    type: {
        name: "Composite",
        className: "InvoiceSectionCreationRequest",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EnrollmentAccountContext = {
    type: {
        name: "Composite",
        className: "EnrollmentAccountContext",
        modelProperties: {
            costCenter: {
                serializedName: "costCenter",
                type: {
                    name: "String"
                }
            },
            startDate: {
                serializedName: "startDate",
                type: {
                    name: "DateTime"
                }
            },
            endDate: {
                serializedName: "endDate",
                type: {
                    name: "DateTime"
                }
            },
            enrollmentAccountName: {
                serializedName: "enrollmentAccountName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoiceSection = {
    type: {
        name: "Composite",
        className: "InvoiceSection",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, labels: {
                serializedName: "properties.labels",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, systemId: {
                serializedName: "properties.systemId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "properties.tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, targetCloud: {
                serializedName: "properties.targetCloud",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const BillingProfile = {
    type: {
        name: "Composite",
        className: "BillingProfile",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, poNumber: {
                serializedName: "properties.poNumber",
                type: {
                    name: "String"
                }
            }, billingRelationshipType: {
                serializedName: "properties.billingRelationshipType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billTo: {
                serializedName: "properties.billTo",
                type: {
                    name: "Composite",
                    className: "AddressDetails"
                }
            }, indirectRelationshipInfo: {
                serializedName: "properties.indirectRelationshipInfo",
                type: {
                    name: "Composite",
                    className: "IndirectRelationshipInfo"
                }
            }, invoiceEmailOptIn: {
                serializedName: "properties.invoiceEmailOptIn",
                type: {
                    name: "Boolean"
                }
            }, invoiceDay: {
                serializedName: "properties.invoiceDay",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, currency: {
                serializedName: "properties.currency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, enabledAzurePlans: {
                serializedName: "properties.enabledAzurePlans",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzurePlan"
                        }
                    }
                }
            }, invoiceSections: {
                serializedName: "properties.invoiceSections",
                type: {
                    name: "Composite",
                    className: "InvoiceSectionsOnExpand"
                }
            }, hasReadAccess: {
                serializedName: "properties.hasReadAccess",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, systemId: {
                serializedName: "properties.systemId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, statusReasonCode: {
                serializedName: "properties.statusReasonCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, spendingLimit: {
                serializedName: "properties.spendingLimit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, targetClouds: {
                serializedName: "properties.targetClouds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, tags: {
                serializedName: "properties.tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const EnrollmentAccount = {
    type: {
        name: "Composite",
        className: "EnrollmentAccount",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { accountName: {
                serializedName: "properties.accountName",
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                type: {
                    name: "String"
                }
            }, accountOwner: {
                serializedName: "properties.accountOwner",
                type: {
                    name: "String"
                }
            }, accountOwnerEmail: {
                serializedName: "properties.accountOwnerEmail",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, startDate: {
                serializedName: "properties.startDate",
                type: {
                    name: "DateTime"
                }
            }, endDate: {
                serializedName: "properties.endDate",
                type: {
                    name: "DateTime"
                }
            }, department: {
                serializedName: "properties.department",
                type: {
                    name: "Composite",
                    className: "Department"
                }
            } })
    }
};
const Department = {
    type: {
        name: "Composite",
        className: "Department",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { departmentName: {
                serializedName: "properties.departmentName",
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, enrollmentAccounts: {
                serializedName: "properties.enrollmentAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnrollmentAccount"
                        }
                    }
                }
            } })
    }
};
const BillingAccount = {
    type: {
        name: "Composite",
        className: "BillingAccount",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, soldTo: {
                serializedName: "properties.soldTo",
                type: {
                    name: "Composite",
                    className: "AddressDetails"
                }
            }, agreementType: {
                serializedName: "properties.agreementType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountType: {
                serializedName: "properties.accountType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accountStatus: {
                serializedName: "properties.accountStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfiles: {
                serializedName: "properties.billingProfiles",
                type: {
                    name: "Composite",
                    className: "BillingProfilesOnExpand"
                }
            }, enrollmentDetails: {
                serializedName: "properties.enrollmentDetails",
                type: {
                    name: "Composite",
                    className: "Enrollment"
                }
            }, departments: {
                serializedName: "properties.departments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Department"
                        }
                    }
                }
            }, enrollmentAccounts: {
                serializedName: "properties.enrollmentAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EnrollmentAccount"
                        }
                    }
                }
            }, hasReadAccess: {
                serializedName: "properties.hasReadAccess",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, notificationEmailAddress: {
                serializedName: "properties.notificationEmailAddress",
                type: {
                    name: "String"
                }
            } })
    }
};
const AvailableBalance = {
    type: {
        name: "Composite",
        className: "AvailableBalance",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { amount: {
                serializedName: "properties.amount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            } })
    }
};
const Instruction = {
    type: {
        name: "Composite",
        className: "Instruction",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { amount: {
                serializedName: "properties.amount",
                type: {
                    name: "Number"
                }
            }, startDate: {
                serializedName: "properties.startDate",
                type: {
                    name: "DateTime"
                }
            }, endDate: {
                serializedName: "properties.endDate",
                type: {
                    name: "DateTime"
                }
            }, creationDate: {
                serializedName: "properties.creationDate",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const Customer = {
    type: {
        name: "Composite",
        className: "Customer",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileDisplayName: {
                serializedName: "properties.billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, enabledAzurePlans: {
                serializedName: "properties.enabledAzurePlans",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzurePlan"
                        }
                    }
                }
            }, resellers: {
                serializedName: "properties.resellers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Reseller"
                        }
                    }
                }
            } })
    }
};
const BillingSubscription = {
    type: {
        name: "Composite",
        className: "BillingSubscription",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, subscriptionBillingStatus: {
                serializedName: "properties.subscriptionBillingStatus",
                type: {
                    name: "String"
                }
            }, lastMonthCharges: {
                serializedName: "properties.lastMonthCharges",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, monthToDateCharges: {
                serializedName: "properties.monthToDateCharges",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileDisplayName: {
                serializedName: "properties.billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerDisplayName: {
                serializedName: "properties.customerDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionId: {
                serializedName: "properties.invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionDisplayName: {
                serializedName: "properties.invoiceSectionDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reseller: {
                serializedName: "properties.reseller",
                type: {
                    name: "Composite",
                    className: "Reseller"
                }
            }, skuId: {
                serializedName: "properties.skuId",
                type: {
                    name: "String"
                }
            }, skuDescription: {
                serializedName: "properties.skuDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, suspensionReasons: {
                serializedName: "properties.suspensionReasons",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Product = {
    type: {
        name: "Composite",
        className: "Product",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { autoRenew: {
                serializedName: "properties.autoRenew",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purchaseDate: {
                serializedName: "properties.purchaseDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, productTypeId: {
                serializedName: "properties.productTypeId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productType: {
                serializedName: "properties.productType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, endDate: {
                serializedName: "properties.endDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, billingFrequency: {
                serializedName: "properties.billingFrequency",
                type: {
                    name: "String"
                }
            }, lastCharge: {
                serializedName: "properties.lastCharge",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, lastChargeDate: {
                serializedName: "properties.lastChargeDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, quantity: {
                serializedName: "properties.quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, skuId: {
                serializedName: "properties.skuId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, skuDescription: {
                serializedName: "properties.skuDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "properties.tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, availabilityId: {
                serializedName: "properties.availabilityId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionId: {
                serializedName: "properties.invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionDisplayName: {
                serializedName: "properties.invoiceSectionDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileDisplayName: {
                serializedName: "properties.billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerDisplayName: {
                serializedName: "properties.customerDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, reseller: {
                serializedName: "properties.reseller",
                type: {
                    name: "Composite",
                    className: "Reseller"
                }
            } })
    }
};
const Invoice = {
    type: {
        name: "Composite",
        className: "Invoice",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { dueDate: {
                serializedName: "properties.dueDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, invoiceDate: {
                serializedName: "properties.invoiceDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, amountDue: {
                serializedName: "properties.amountDue",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, azurePrepaymentApplied: {
                serializedName: "properties.azurePrepaymentApplied",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, billedAmount: {
                serializedName: "properties.billedAmount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, creditAmount: {
                serializedName: "properties.creditAmount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, freeAzureCreditApplied: {
                serializedName: "properties.freeAzureCreditApplied",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, subTotal: {
                serializedName: "properties.subTotal",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, taxAmount: {
                serializedName: "properties.taxAmount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, totalAmount: {
                serializedName: "properties.totalAmount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, invoicePeriodStartDate: {
                serializedName: "properties.invoicePeriodStartDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, invoicePeriodEndDate: {
                serializedName: "properties.invoicePeriodEndDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, invoiceType: {
                serializedName: "properties.invoiceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isMonthlyInvoice: {
                serializedName: "properties.isMonthlyInvoice",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileDisplayName: {
                serializedName: "properties.billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, purchaseOrderNumber: {
                serializedName: "properties.purchaseOrderNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, documents: {
                serializedName: "properties.documents",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Document"
                        }
                    }
                }
            }, payments: {
                serializedName: "properties.payments",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PaymentProperties"
                        }
                    }
                }
            }, rebillDetails: {
                serializedName: "properties.rebillDetails",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "RebillDetails" } }
                }
            }, documentType: {
                serializedName: "properties.documentType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billedDocumentId: {
                serializedName: "properties.billedDocumentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creditForDocumentId: {
                serializedName: "properties.creditForDocumentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Transaction = {
    type: {
        name: "Composite",
        className: "Transaction",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { kind: {
                serializedName: "properties.kind",
                type: {
                    name: "String"
                }
            }, date: {
                serializedName: "properties.date",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, invoice: {
                serializedName: "properties.invoice",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceId: {
                serializedName: "properties.invoiceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, orderId: {
                serializedName: "properties.orderId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, orderName: {
                serializedName: "properties.orderName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productFamily: {
                serializedName: "properties.productFamily",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productTypeId: {
                serializedName: "properties.productTypeId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productType: {
                serializedName: "properties.productType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productDescription: {
                serializedName: "properties.productDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, transactionType: {
                serializedName: "properties.transactionType",
                type: {
                    name: "String"
                }
            }, transactionAmount: {
                serializedName: "properties.transactionAmount",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, quantity: {
                serializedName: "properties.quantity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, invoiceSectionId: {
                serializedName: "properties.invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionDisplayName: {
                serializedName: "properties.invoiceSectionDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileDisplayName: {
                serializedName: "properties.billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerDisplayName: {
                serializedName: "properties.customerDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionId: {
                serializedName: "properties.subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subscriptionName: {
                serializedName: "properties.subscriptionName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azurePlan: {
                serializedName: "properties.azurePlan",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azureCreditApplied: {
                serializedName: "properties.azureCreditApplied",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, billingCurrency: {
                serializedName: "properties.billingCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, discount: {
                serializedName: "properties.discount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, effectivePrice: {
                serializedName: "properties.effectivePrice",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, exchangeRate: {
                serializedName: "properties.exchangeRate",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, marketPrice: {
                serializedName: "properties.marketPrice",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, pricingCurrency: {
                serializedName: "properties.pricingCurrency",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, servicePeriodStartDate: {
                serializedName: "properties.servicePeriodStartDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, servicePeriodEndDate: {
                serializedName: "properties.servicePeriodEndDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, subTotal: {
                serializedName: "properties.subTotal",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, tax: {
                serializedName: "properties.tax",
                type: {
                    name: "Composite",
                    className: "Amount"
                }
            }, unitOfMeasure: {
                serializedName: "properties.unitOfMeasure",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, units: {
                serializedName: "properties.units",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, unitType: {
                serializedName: "properties.unitType",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Policy = {
    type: {
        name: "Composite",
        className: "Policy",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { marketplacePurchases: {
                serializedName: "properties.marketplacePurchases",
                type: {
                    name: "String"
                }
            }, reservationPurchases: {
                serializedName: "properties.reservationPurchases",
                type: {
                    name: "String"
                }
            }, viewCharges: {
                serializedName: "properties.viewCharges",
                type: {
                    name: "String"
                }
            } })
    }
};
const CustomerPolicy = {
    type: {
        name: "Composite",
        className: "CustomerPolicy",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { viewCharges: {
                serializedName: "properties.viewCharges",
                type: {
                    name: "String"
                }
            } })
    }
};
const BillingProperty = {
    type: {
        name: "Composite",
        className: "BillingProperty",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { accountAdminNotificationEmailAddress: {
                serializedName: "properties.accountAdminNotificationEmailAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingTenantId: {
                serializedName: "properties.billingTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingAccountId: {
                serializedName: "properties.billingAccountId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingAccountDisplayName: {
                serializedName: "properties.billingAccountDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileId: {
                serializedName: "properties.billingProfileId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileDisplayName: {
                serializedName: "properties.billingProfileDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileStatus: {
                serializedName: "properties.billingProfileStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileStatusReasonCode: {
                serializedName: "properties.billingProfileStatusReasonCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, billingProfileSpendingLimit: {
                serializedName: "properties.billingProfileSpendingLimit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, costCenter: {
                serializedName: "properties.costCenter",
                type: {
                    name: "String"
                }
            }, invoiceSectionId: {
                serializedName: "properties.invoiceSectionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, invoiceSectionDisplayName: {
                serializedName: "properties.invoiceSectionDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isAccountAdmin: {
                serializedName: "properties.isAccountAdmin",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, productId: {
                serializedName: "properties.productId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, productName: {
                serializedName: "properties.productName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, skuId: {
                serializedName: "properties.skuId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, skuDescription: {
                serializedName: "properties.skuDescription",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const BillingRoleDefinition = {
    type: {
        name: "Composite",
        className: "BillingRoleDefinition",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, permissions: {
                serializedName: "properties.permissions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BillingPermissionsProperties"
                        }
                    }
                }
            }, roleName: {
                serializedName: "properties.roleName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const BillingRoleAssignment = {
    type: {
        name: "Composite",
        className: "BillingRoleAssignment",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { createdOn: {
                serializedName: "properties.createdOn",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdByPrincipalTenantId: {
                serializedName: "properties.createdByPrincipalTenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdByPrincipalId: {
                serializedName: "properties.createdByPrincipalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdByUserEmailAddress: {
                serializedName: "properties.createdByUserEmailAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, principalId: {
                serializedName: "properties.principalId",
                type: {
                    name: "String"
                }
            }, principalTenantId: {
                serializedName: "properties.principalTenantId",
                type: {
                    name: "String"
                }
            }, roleDefinitionId: {
                serializedName: "properties.roleDefinitionId",
                type: {
                    name: "String"
                }
            }, scope: {
                serializedName: "properties.scope",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, userAuthenticationType: {
                serializedName: "properties.userAuthenticationType",
                type: {
                    name: "String"
                }
            }, userEmailAddress: {
                serializedName: "properties.userEmailAddress",
                type: {
                    name: "String"
                }
            } })
    }
};
const Agreement = {
    type: {
        name: "Composite",
        className: "Agreement",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { agreementLink: {
                serializedName: "properties.agreementLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, category: {
                serializedName: "properties.category",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, acceptanceMode: {
                serializedName: "properties.acceptanceMode",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, effectiveDate: {
                serializedName: "properties.effectiveDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, expirationDate: {
                serializedName: "properties.expirationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, participants: {
                serializedName: "properties.participants",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Participants"
                        }
                    }
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EnrollmentAccountSummary = {
    type: {
        name: "Composite",
        className: "EnrollmentAccountSummary",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { principalName: {
                serializedName: "properties.principalName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const BillingPeriod = {
    type: {
        name: "Composite",
        className: "BillingPeriod",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { billingPeriodStartDate: {
                serializedName: "properties.billingPeriodStartDate",
                readOnly: true,
                type: {
                    name: "Date"
                }
            }, billingPeriodEndDate: {
                serializedName: "properties.billingPeriodEndDate",
                readOnly: true,
                type: {
                    name: "Date"
                }
            }, invoiceIds: {
                serializedName: "properties.invoiceIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const BillingProfilesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "BillingProfilesCreateOrUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const InvoiceSectionsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "InvoiceSectionsCreateOrUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const BillingSubscriptionsMoveHeaders = {
    type: {
        name: "Composite",
        className: "BillingSubscriptionsMoveHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ProductsMoveHeaders = {
    type: {
        name: "Composite",
        className: "ProductsMoveHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const InvoicesDownloadInvoiceHeaders = {
    type: {
        name: "Composite",
        className: "InvoicesDownloadInvoiceHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoicesDownloadMultipleBillingProfileInvoicesHeaders = {
    type: {
        name: "Composite",
        className: "InvoicesDownloadMultipleBillingProfileInvoicesHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoicesDownloadBillingSubscriptionInvoiceHeaders = {
    type: {
        name: "Composite",
        className: "InvoicesDownloadBillingSubscriptionInvoiceHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders = {
    type: {
        name: "Composite",
        className: "InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            retryAfter: {
                serializedName: "retry-after",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BillingAccountListResult: BillingAccountListResult,
    AddressDetails: AddressDetails,
    BillingProfilesOnExpand: BillingProfilesOnExpand,
    IndirectRelationshipInfo: IndirectRelationshipInfo,
    AzurePlan: AzurePlan,
    InvoiceSectionsOnExpand: InvoiceSectionsOnExpand,
    Resource: Resource,
    Enrollment: Enrollment,
    EnrollmentPolicies: EnrollmentPolicies,
    ErrorResponse: ErrorResponse,
    ErrorDetails: ErrorDetails,
    ErrorSubDetailsItem: ErrorSubDetailsItem,
    BillingAccountUpdateRequest: BillingAccountUpdateRequest,
    InvoiceSectionListWithCreateSubPermissionResult: InvoiceSectionListWithCreateSubPermissionResult,
    InvoiceSectionWithCreateSubPermission: InvoiceSectionWithCreateSubPermission,
    ValidateAddressResponse: ValidateAddressResponse,
    Amount: Amount,
    InstructionListResult: InstructionListResult,
    BillingProfileListResult: BillingProfileListResult,
    CustomerListResult: CustomerListResult,
    Reseller: Reseller,
    InvoiceSectionListResult: InvoiceSectionListResult,
    BillingPermissionsListResult: BillingPermissionsListResult,
    BillingPermissionsProperties: BillingPermissionsProperties,
    BillingSubscriptionsListResult: BillingSubscriptionsListResult,
    ProductsListResult: ProductsListResult,
    InvoiceListResult: InvoiceListResult,
    Document: Document,
    PaymentProperties: PaymentProperties,
    RebillDetails: RebillDetails,
    DownloadUrl: DownloadUrl,
    TransferBillingSubscriptionRequestProperties: TransferBillingSubscriptionRequestProperties,
    ValidateSubscriptionTransferEligibilityResult: ValidateSubscriptionTransferEligibilityResult,
    ValidateSubscriptionTransferEligibilityError: ValidateSubscriptionTransferEligibilityError,
    TransferProductRequestProperties: TransferProductRequestProperties,
    ValidateProductTransferEligibilityResult: ValidateProductTransferEligibilityResult,
    ValidateProductTransferEligibilityError: ValidateProductTransferEligibilityError,
    TransactionListResult: TransactionListResult,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    BillingRoleDefinitionListResult: BillingRoleDefinitionListResult,
    BillingRoleAssignmentListResult: BillingRoleAssignmentListResult,
    AgreementListResult: AgreementListResult,
    Participants: Participants,
    ReservationsListResult: ReservationsListResult,
    Reservation: Reservation,
    ReservationSkuProperty: ReservationSkuProperty,
    ReservationPropertyUtilization: ReservationPropertyUtilization,
    ReservationUtilizationAggregates: ReservationUtilizationAggregates,
    ReservationSummary: ReservationSummary,
    EnrollmentAccountListResult: EnrollmentAccountListResult,
    BillingPeriodsListResult: BillingPeriodsListResult,
    BillingProfileCreationRequest: BillingProfileCreationRequest,
    InvoiceSectionCreationRequest: InvoiceSectionCreationRequest,
    EnrollmentAccountContext: EnrollmentAccountContext,
    InvoiceSection: InvoiceSection,
    BillingProfile: BillingProfile,
    EnrollmentAccount: EnrollmentAccount,
    Department: Department,
    BillingAccount: BillingAccount,
    AvailableBalance: AvailableBalance,
    Instruction: Instruction,
    Customer: Customer,
    BillingSubscription: BillingSubscription,
    Product: Product,
    Invoice: Invoice,
    Transaction: Transaction,
    Policy: Policy,
    CustomerPolicy: CustomerPolicy,
    BillingProperty: BillingProperty,
    BillingRoleDefinition: BillingRoleDefinition,
    BillingRoleAssignment: BillingRoleAssignment,
    Agreement: Agreement,
    EnrollmentAccountSummary: EnrollmentAccountSummary,
    BillingPeriod: BillingPeriod,
    BillingProfilesCreateOrUpdateHeaders: BillingProfilesCreateOrUpdateHeaders,
    InvoiceSectionsCreateOrUpdateHeaders: InvoiceSectionsCreateOrUpdateHeaders,
    BillingSubscriptionsMoveHeaders: BillingSubscriptionsMoveHeaders,
    ProductsMoveHeaders: ProductsMoveHeaders,
    InvoicesDownloadInvoiceHeaders: InvoicesDownloadInvoiceHeaders,
    InvoicesDownloadMultipleBillingProfileInvoicesHeaders: InvoicesDownloadMultipleBillingProfileInvoicesHeaders,
    InvoicesDownloadBillingSubscriptionInvoiceHeaders: InvoicesDownloadBillingSubscriptionInvoiceHeaders,
    InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders: InvoicesDownloadMultipleBillingSubscriptionInvoicesHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const billingAccountName = {
    parameterPath: "billingAccountName",
    mapper: {
        serializedName: "billingAccountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: BillingAccountUpdateRequest
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const address = {
    parameterPath: "address",
    mapper: AddressDetails
};
const billingProfileName = {
    parameterPath: "billingProfileName",
    mapper: {
        serializedName: "billingProfileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const instructionName = {
    parameterPath: "instructionName",
    mapper: {
        serializedName: "instructionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: Instruction
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: BillingProfile
};
const search = {
    parameterPath: ["options", "search"],
    mapper: {
        serializedName: "$search",
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const customerName = {
    parameterPath: "customerName",
    mapper: {
        serializedName: "customerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const invoiceSectionName = {
    parameterPath: "invoiceSectionName",
    mapper: {
        serializedName: "invoiceSectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: InvoiceSection
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: BillingSubscription
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: TransferBillingSubscriptionRequestProperties
};
const productName = {
    parameterPath: "productName",
    mapper: {
        serializedName: "productName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: Product
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: TransferProductRequestProperties
};
const periodStartDate = {
    parameterPath: "periodStartDate",
    mapper: {
        serializedName: "periodStartDate",
        required: true,
        type: {
            name: "String"
        }
    }
};
const periodEndDate = {
    parameterPath: "periodEndDate",
    mapper: {
        serializedName: "periodEndDate",
        required: true,
        type: {
            name: "String"
        }
    }
};
const invoiceName = {
    parameterPath: "invoiceName",
    mapper: {
        serializedName: "invoiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const downloadToken = {
    parameterPath: "downloadToken",
    mapper: {
        serializedName: "downloadToken",
        required: true,
        type: {
            name: "String"
        }
    }
};
const downloadUrls = {
    parameterPath: "downloadUrls",
    mapper: {
        serializedName: "downloadUrls",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    }
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: Policy
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: CustomerPolicy
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: BillingProperty
};
const billingRoleDefinitionName = {
    parameterPath: "billingRoleDefinitionName",
    mapper: {
        serializedName: "billingRoleDefinitionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const billingRoleAssignmentName = {
    parameterPath: "billingRoleAssignmentName",
    mapper: {
        serializedName: "billingRoleAssignmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const agreementName = {
    parameterPath: "agreementName",
    mapper: {
        serializedName: "agreementName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "$orderby",
        type: {
            name: "String"
        }
    }
};
const refreshSummary = {
    parameterPath: ["options", "refreshSummary"],
    mapper: {
        serializedName: "refreshSummary",
        type: {
            name: "String"
        }
    }
};
const selectedState = {
    parameterPath: ["options", "selectedState"],
    mapper: {
        serializedName: "selectedState",
        type: {
            name: "String"
        }
    }
};
const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-03-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 100,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const billingPeriodName = {
    parameterPath: "billingPeriodName",
    mapper: {
        serializedName: "billingPeriodName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BillingAccounts operations. */
class BillingAccountsImpl {
    /**
     * Initialize a new instance of the class BillingAccounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the billing accounts that a user has access to.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the invoice sections for which the user has permission to create Azure subscriptions. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listInvoiceSectionsByCreateSubscriptionPermission(billingAccountName, options) {
        const iter = this.listInvoiceSectionsByCreateSubscriptionPermissionPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listInvoiceSectionsByCreateSubscriptionPermissionPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listInvoiceSectionsByCreateSubscriptionPermissionPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listInvoiceSectionsByCreateSubscriptionPermissionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listInvoiceSectionsByCreateSubscriptionPermission(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listInvoiceSectionsByCreateSubscriptionPermissionNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listInvoiceSectionsByCreateSubscriptionPermissionPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listInvoiceSectionsByCreateSubscriptionPermissionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listInvoiceSectionsByCreateSubscriptionPermissionPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the billing accounts that a user has access to.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Gets a billing account by its ID.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    get(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, getOperationSpec$c);
    }
    /**
     * Updates the properties of a billing account. Currently, displayName and address can be updated. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the update billing account operation.
     * @param options The options parameters.
     */
    beginUpdate(billingAccountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { billingAccountName, parameters, options }, updateOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the properties of a billing account. Currently, displayName and address can be updated. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the update billing account operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(billingAccountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(billingAccountName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the invoice sections for which the user has permission to create Azure subscriptions. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listInvoiceSectionsByCreateSubscriptionPermission(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listInvoiceSectionsByCreateSubscriptionPermissionOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
    /**
     * ListInvoiceSectionsByCreateSubscriptionPermissionNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListInvoiceSectionsByCreateSubscriptionPermission method.
     * @param options The options parameters.
     */
    _listInvoiceSectionsByCreateSubscriptionPermissionNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listInvoiceSectionsByCreateSubscriptionPermissionNextOperationSpec);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Billing/billingAccounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingAccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$k
};
const getOperationSpec$c = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingAccount
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$k
};
const updateOperationSpec$4 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: BillingAccount
        },
        201: {
            bodyMapper: BillingAccount
        },
        202: {
            bodyMapper: BillingAccount
        },
        204: {
            bodyMapper: BillingAccount
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const listInvoiceSectionsByCreateSubscriptionPermissionOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/listInvoiceSectionsWithCreateSubscriptionPermission",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: InvoiceSectionListWithCreateSubPermissionResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$k
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingAccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$k
};
const listInvoiceSectionsByCreateSubscriptionPermissionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceSectionListWithCreateSubPermissionResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$k
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Address operations. */
class AddressImpl {
    /**
     * Initialize a new instance of the class Address class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Validates an address. Use the operation to validate an address before using it as soldTo or a billTo
     * address.
     * @param address Address details.
     * @param options The options parameters.
     */
    validate(address, options) {
        return this.client.sendOperationRequest({ address, options }, validateOperationSpec);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const validateOperationSpec = {
    path: "/providers/Microsoft.Billing/validateAddress",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidateAddressResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: address,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing AvailableBalances operations. */
class AvailableBalancesImpl {
    /**
     * Initialize a new instance of the class AvailableBalances class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * The available credit balance for a billing profile. This is the balance that can be used for pay now
     * to settle due or past due invoices. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, getOperationSpec$b);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$b = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/availableBalance/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableBalance
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Instructions operations. */
class InstructionsImpl {
    /**
     * Initialize a new instance of the class Instructions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the instructions by billing profile id.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the instructions by billing profile id.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$9);
    }
    /**
     * Get the instruction by name. These are custom billing instructions and are only applicable for
     * certain customers.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, instructionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, instructionName, options }, getOperationSpec$a);
    }
    /**
     * Creates or updates an instruction. These are custom billing instructions and are only applicable for
     * certain customers.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param instructionName Instruction Name.
     * @param parameters The new instruction.
     * @param options The options parameters.
     */
    put(billingAccountName, billingProfileName, instructionName, parameters, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            instructionName,
            parameters,
            options
        }, putOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingProfileOperationSpec$9 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InstructionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const getOperationSpec$a = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Instruction
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        instructionName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};
const putOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/instructions/{instructionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Instruction
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        instructionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h
};
const listByBillingProfileNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InstructionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BillingProfiles operations. */
class BillingProfilesImpl {
    /**
     * Initialize a new instance of the class BillingProfiles class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the billing profiles that a user has access to. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$9);
    }
    /**
     * Gets a billing profile by its ID. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, getOperationSpec$9);
    }
    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(billingAccountName, billingProfileName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { billingAccountName, billingProfileName, parameters, options }, createOrUpdateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a billing profile. The operation is supported for billing accounts with agreement
     * type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters The new or updated billing profile.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(billingAccountName, billingProfileName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(billingAccountName, billingProfileName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountOperationSpec$9 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingProfileListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$g
};
const getOperationSpec$9 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const createOrUpdateOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: BillingProfile
        },
        201: {
            bodyMapper: BillingProfile
        },
        202: {
            bodyMapper: BillingProfile
        },
        204: {
            bodyMapper: BillingProfile
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const listByBillingAccountNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingProfileListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Customers operations. */
class CustomersImpl {
    /**
     * Initialize a new instance of the class Customers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the customers that are billed to a billing profile. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the customers that are billed to a billing account. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the customers that are billed to a billing profile. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$8);
    }
    /**
     * Lists the customers that are billed to a billing account. The operation is supported only for
     * billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$8);
    }
    /**
     * Gets a customer by its ID. The operation is supported only for billing accounts with agreement type
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    get(billingAccountName, customerName, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, options }, getOperationSpec$8);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$8);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingProfileOperationSpec$8 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        search,
        filter
    ],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listByBillingAccountOperationSpec$8 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        search,
        filter
    ],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$f
};
const getOperationSpec$8 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Customer
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        billingAccountName,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listByBillingProfileNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        search,
        filter
    ],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listByBillingAccountNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        search,
        filter
    ],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing InvoiceSections operations. */
class InvoiceSectionsImpl {
    /**
     * Initialize a new instance of the class InvoiceSections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the invoice sections that a user has access to. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the invoice sections that a user has access to. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$7);
    }
    /**
     * Gets an invoice section by its ID. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    get(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, getOperationSpec$7);
    }
    /**
     * Creates or updates an invoice section. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The new or updated invoice section.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(billingAccountName, billingProfileName, invoiceSectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                billingAccountName,
                billingProfileName,
                invoiceSectionName,
                parameters,
                options
            }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates an invoice section. The operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param parameters The new or updated invoice section.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(billingAccountName, billingProfileName, invoiceSectionName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(billingAccountName, billingProfileName, invoiceSectionName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingProfileOperationSpec$7 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceSectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const getOperationSpec$7 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceSection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOrUpdateOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: InvoiceSection
        },
        201: {
            bodyMapper: InvoiceSection
        },
        202: {
            bodyMapper: InvoiceSection
        },
        204: {
            bodyMapper: InvoiceSection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const listByBillingProfileNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceSectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BillingPermissions operations. */
class BillingPermissionsImpl {
    /**
     * Initialize a new instance of the class BillingPermissions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the billing permissions the caller has for a customer.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    listByCustomer(billingAccountName, customerName, options) {
        const iter = this.listByCustomerPagingAll(billingAccountName, customerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByCustomerPagingPage(billingAccountName, customerName, options, settings);
            }
        };
    }
    listByCustomerPagingPage(billingAccountName, customerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByCustomerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByCustomer(billingAccountName, customerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByCustomerNext(billingAccountName, customerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByCustomerPagingAll(billingAccountName, customerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByCustomerPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByCustomerPagingPage(billingAccountName, customerName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the billing permissions the caller has on a billing account.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the billing permissions the caller has on an invoice section.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSections(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listByInvoiceSectionsPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByInvoiceSectionsPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listByInvoiceSectionsPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSections(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSectionsNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByInvoiceSectionsPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionsPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByInvoiceSectionsPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the billing permissions the caller has on a billing profile.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Lists the billing permissions the caller has for a customer.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    _listByCustomer(billingAccountName, customerName, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, options }, listByCustomerOperationSpec$2);
    }
    /**
     * Lists the billing permissions the caller has on a billing account.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$7);
    }
    /**
     * Lists the billing permissions the caller has on an invoice section.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    _listByInvoiceSections(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listByInvoiceSectionsOperationSpec);
    }
    /**
     * Lists the billing permissions the caller has on a billing profile.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$6);
    }
    /**
     * ListByCustomerNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
     * @param options The options parameters.
     */
    _listByCustomerNext(billingAccountName, customerName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, nextLink, options }, listByCustomerNextOperationSpec$2);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$7);
    }
    /**
     * ListByInvoiceSectionsNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSections method.
     * @param options The options parameters.
     */
    _listByInvoiceSectionsNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listByInvoiceSectionsNextOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByCustomerOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingPermissions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByBillingAccountOperationSpec$7 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingPermissions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByInvoiceSectionsOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingPermissions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByBillingProfileOperationSpec$6 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingPermissions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByCustomerNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByBillingAccountNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByInvoiceSectionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByBillingProfileNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPermissionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BillingSubscriptions operations. */
class BillingSubscriptionsImpl {
    /**
     * Initialize a new instance of the class BillingSubscriptions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    listByCustomer(billingAccountName, customerName, options) {
        const iter = this.listByCustomerPagingAll(billingAccountName, customerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByCustomerPagingPage(billingAccountName, customerName, options, settings);
            }
        };
    }
    listByCustomerPagingPage(billingAccountName, customerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByCustomerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByCustomer(billingAccountName, customerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByCustomerNext(billingAccountName, customerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByCustomerPagingAll(billingAccountName, customerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByCustomerPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByCustomerPagingPage(billingAccountName, customerName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the subscriptions for a billing account. The operation is supported for billing accounts with
     * agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Lists the subscriptions for a customer. The operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    _listByCustomer(billingAccountName, customerName, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, options }, listByCustomerOperationSpec$1);
    }
    /**
     * Lists the subscriptions for a billing account. The operation is supported for billing accounts with
     * agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$6);
    }
    /**
     * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$5);
    }
    /**
     * Lists the subscriptions that are billed to an invoice section. The operation is supported only for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    _listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listByInvoiceSectionOperationSpec$3);
    }
    /**
     * Gets a subscription by its ID. The operation is supported for billing accounts with agreement type
     * Microsoft Customer Agreement and Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    get(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, getOperationSpec$6);
    }
    /**
     * Updates the properties of a billing subscription. Currently, cost center can be updated. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the update billing subscription operation.
     * @param options The options parameters.
     */
    update(billingAccountName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, parameters, options }, updateOperationSpec$3);
    }
    /**
     * Moves a subscription's charges to a new invoice section. The new invoice section must belong to the
     * same billing profile as the existing invoice section. This operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the move subscription operation.
     * @param options The options parameters.
     */
    beginMove(billingAccountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { billingAccountName, parameters, options }, moveOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Moves a subscription's charges to a new invoice section. The new invoice section must belong to the
     * same billing profile as the existing invoice section. This operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the move subscription operation.
     * @param options The options parameters.
     */
    beginMoveAndWait(billingAccountName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMove(billingAccountName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Validates if a subscription's charges can be moved to a new invoice section. This operation is
     * supported for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param parameters Request parameters that are provided to the validate move eligibility operation.
     * @param options The options parameters.
     */
    validateMove(billingAccountName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, parameters, options }, validateMoveOperationSpec$1);
    }
    /**
     * ListByCustomerNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
     * @param options The options parameters.
     */
    _listByCustomerNext(billingAccountName, customerName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, nextLink, options }, listByCustomerNextOperationSpec$1);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$6);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$5);
    }
    /**
     * ListByInvoiceSectionNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSection method.
     * @param options The options parameters.
     */
    _listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listByInvoiceSectionNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByCustomerOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByBillingAccountOperationSpec$6 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByBillingProfileOperationSpec$5 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByInvoiceSectionOperationSpec$3 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getOperationSpec$6 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscription
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const updateOperationSpec$3 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: BillingSubscription
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const moveOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}/move",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: BillingSubscription
        },
        201: {
            bodyMapper: BillingSubscription
        },
        202: {
            bodyMapper: BillingSubscription
        },
        204: {
            bodyMapper: BillingSubscription
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const validateMoveOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{subscriptionId}/validateMoveEligibility",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidateSubscriptionTransferEligibilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        subscriptionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$c
};
const listByCustomerNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByBillingAccountNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByBillingProfileNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByInvoiceSectionNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingSubscriptionsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Products operations. */
class ProductsImpl {
    /**
     * Initialize a new instance of the class Products class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the products for a customer. These don't include products billed based on usage.The operation
     * is supported only for billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    listByCustomer(billingAccountName, customerName, options) {
        const iter = this.listByCustomerPagingAll(billingAccountName, customerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByCustomerPagingPage(billingAccountName, customerName, options, settings);
            }
        };
    }
    listByCustomerPagingPage(billingAccountName, customerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByCustomerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByCustomer(billingAccountName, customerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByCustomerNext(billingAccountName, customerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByCustomerPagingAll(billingAccountName, customerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByCustomerPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByCustomerPagingPage(billingAccountName, customerName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the products for a billing account. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the products for a billing profile. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the products for an invoice section. These don't include products billed based on usage. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Lists the products for a customer. These don't include products billed based on usage.The operation
     * is supported only for billing accounts with agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    _listByCustomer(billingAccountName, customerName, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, options }, listByCustomerOperationSpec);
    }
    /**
     * Lists the products for a billing account. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$5);
    }
    /**
     * Lists the products for a billing profile. These don't include products billed based on usage. The
     * operation is supported for billing accounts with agreement type Microsoft Customer Agreement or
     * Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$4);
    }
    /**
     * Lists the products for an invoice section. These don't include products billed based on usage. The
     * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    _listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listByInvoiceSectionOperationSpec$2);
    }
    /**
     * Gets a product by ID. The operation is supported only for billing accounts with agreement type
     * Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param options The options parameters.
     */
    get(billingAccountName, productName, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, options }, getOperationSpec$5);
    }
    /**
     * Updates the properties of a Product. Currently, auto renew can be updated. The operation is
     * supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the update product operation.
     * @param options The options parameters.
     */
    update(billingAccountName, productName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, parameters, options }, updateOperationSpec$2);
    }
    /**
     * Moves a product's charges to a new invoice section. The new invoice section must belong to the same
     * billing profile as the existing invoice section. This operation is supported only for products that
     * are purchased with a recurring charge and for billing accounts with agreement type Microsoft
     * Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the move product operation.
     * @param options The options parameters.
     */
    move(billingAccountName, productName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, parameters, options }, moveOperationSpec);
    }
    /**
     * Validates if a product's charges can be moved to a new invoice section. This operation is supported
     * only for products that are purchased with a recurring charge and for billing accounts with agreement
     * type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param productName The ID that uniquely identifies a product.
     * @param parameters Request parameters that are provided to the validate move eligibility operation.
     * @param options The options parameters.
     */
    validateMove(billingAccountName, productName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, productName, parameters, options }, validateMoveOperationSpec);
    }
    /**
     * ListByCustomerNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
     * @param options The options parameters.
     */
    _listByCustomerNext(billingAccountName, customerName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, nextLink, options }, listByCustomerNextOperationSpec);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$5);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$4);
    }
    /**
     * ListByInvoiceSectionNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSection method.
     * @param options The options parameters.
     */
    _listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listByInvoiceSectionNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByCustomerOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByBillingAccountOperationSpec$5 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByBillingProfileOperationSpec$4 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByInvoiceSectionOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/products",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getOperationSpec$5 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Product
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        productName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const updateOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Product
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        productName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const moveOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}/move",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Product
        },
        202: {
            headersMapper: ProductsMoveHeaders
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        productName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const validateMoveOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/products/{productName}/validateMoveEligibility",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ValidateProductTransferEligibilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        productName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const listByCustomerNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByBillingAccountNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByBillingProfileNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByInvoiceSectionNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProductsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Invoices operations. */
class InvoicesImpl {
    /**
     * Initialize a new instance of the class Invoices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, periodStartDate, periodEndDate, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, periodStartDate, periodEndDate, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, periodStartDate, periodEndDate, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, periodStartDate, periodEndDate, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, periodStartDate, periodEndDate, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, periodStartDate, periodEndDate, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, periodStartDate, periodEndDate, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, periodStartDate, periodEndDate, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, periodStartDate, periodEndDate, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the invoices for a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param options The options parameters.
     */
    listByBillingSubscription(periodStartDate, periodEndDate, options) {
        const iter = this.listByBillingSubscriptionPagingAll(periodStartDate, periodEndDate, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingSubscriptionPagingPage(periodStartDate, periodEndDate, options, settings);
            }
        };
    }
    listByBillingSubscriptionPagingPage(periodStartDate, periodEndDate, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingSubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingSubscription(periodStartDate, periodEndDate, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingSubscriptionNext(periodStartDate, periodEndDate, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingSubscriptionPagingAll(periodStartDate, periodEndDate, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingSubscriptionPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingSubscriptionPagingPage(periodStartDate, periodEndDate, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the invoices for a billing account for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, periodStartDate, periodEndDate, options) {
        return this.client.sendOperationRequest({ billingAccountName, periodStartDate, periodEndDate, options }, listByBillingAccountOperationSpec$4);
    }
    /**
     * Lists the invoices for a billing profile for a given start date and end date. The operation is
     * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
     * Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, periodStartDate, periodEndDate, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            periodStartDate,
            periodEndDate,
            options
        }, listByBillingProfileOperationSpec$3);
    }
    /**
     * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with
     * agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    get(billingAccountName, invoiceName, options) {
        return this.client.sendOperationRequest({ billingAccountName, invoiceName, options }, getOperationSpec$4);
    }
    /**
     * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft
     * Partner Agreement or Microsoft Customer Agreement.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    getById(invoiceName, options) {
        return this.client.sendOperationRequest({ invoiceName, options }, getByIdOperationSpec);
    }
    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadInvoice(billingAccountName, invoiceName, downloadToken, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { billingAccountName, invoiceName, downloadToken, options }, downloadInvoiceOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
     * type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadInvoiceAndWait(billingAccountName, invoiceName, downloadToken, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadInvoice(billingAccountName, invoiceName, downloadToken, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file. The operation is supported for billing accounts with agreement type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingProfileInvoices(billingAccountName, downloadUrls, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { billingAccountName, downloadUrls, options }, downloadMultipleBillingProfileInvoicesOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file. The operation is supported for billing accounts with agreement type Microsoft Partner
     * Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingProfileInvoicesAndWait(billingAccountName, downloadUrls, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadMultipleBillingProfileInvoices(billingAccountName, downloadUrls, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the invoices for a subscription.
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param options The options parameters.
     */
    _listByBillingSubscription(periodStartDate, periodEndDate, options) {
        return this.client.sendOperationRequest({ periodStartDate, periodEndDate, options }, listByBillingSubscriptionOperationSpec);
    }
    /**
     * Gets an invoice by subscription ID and invoice ID.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    getBySubscriptionAndInvoiceId(invoiceName, options) {
        return this.client.sendOperationRequest({ invoiceName, options }, getBySubscriptionAndInvoiceIdOperationSpec);
    }
    /**
     * Gets a URL to download an invoice.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadBillingSubscriptionInvoice(invoiceName, downloadToken, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { invoiceName, downloadToken, options }, downloadBillingSubscriptionInvoiceOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download an invoice.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param downloadToken Download token with document source and document ID.
     * @param options The options parameters.
     */
    beginDownloadBillingSubscriptionInvoiceAndWait(invoiceName, downloadToken, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadBillingSubscriptionInvoice(invoiceName, downloadToken, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingSubscriptionInvoices(downloadUrls, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { downloadUrls, options }, downloadMultipleBillingSubscriptionInvoicesOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
     * file.
     * @param downloadUrls An array of download urls for individual documents
     * @param options The options parameters.
     */
    beginDownloadMultipleBillingSubscriptionInvoicesAndWait(downloadUrls, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDownloadMultipleBillingSubscriptionInvoices(downloadUrls, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, periodStartDate, periodEndDate, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, periodStartDate, periodEndDate, nextLink, options }, listByBillingAccountNextOperationSpec$4);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param periodStartDate The start date to fetch the invoices. The date should be specified in
     *                        MM-DD-YYYY format.
     * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
     *                      format.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, periodStartDate, periodEndDate, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            periodStartDate,
            periodEndDate,
            nextLink,
            options
        }, listByBillingProfileNextOperationSpec$3);
    }
    /**
     * ListByBillingSubscriptionNext
     * @param periodStartDate Invoice period start date.
     * @param periodEndDate Invoice period end date.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingSubscription
     *                 method.
     * @param options The options parameters.
     */
    _listByBillingSubscriptionNext(periodStartDate, periodEndDate, nextLink, options) {
        return this.client.sendOperationRequest({ periodStartDate, periodEndDate, nextLink, options }, listByBillingSubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountOperationSpec$4 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        periodStartDate,
        periodEndDate
    ],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByBillingProfileOperationSpec$3 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        periodStartDate,
        periodEndDate
    ],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getOperationSpec$4 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Invoice
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        invoiceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getByIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/invoices/{invoiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Invoice
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, invoiceName],
    headerParameters: [accept],
    serializer: serializer$a
};
const downloadInvoiceOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DownloadUrl
        },
        201: {
            bodyMapper: DownloadUrl
        },
        202: {
            bodyMapper: DownloadUrl
        },
        204: {
            bodyMapper: DownloadUrl
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, downloadToken],
    urlParameters: [
        $host,
        billingAccountName,
        invoiceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const downloadMultipleBillingProfileInvoicesOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/downloadDocuments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DownloadUrl
        },
        201: {
            bodyMapper: DownloadUrl
        },
        202: {
            bodyMapper: DownloadUrl
        },
        204: {
            bodyMapper: DownloadUrl
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: downloadUrls,
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const listByBillingSubscriptionOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        periodStartDate,
        periodEndDate
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$a
};
const getBySubscriptionAndInvoiceIdOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Invoice
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        invoiceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const downloadBillingSubscriptionInvoiceOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DownloadUrl
        },
        201: {
            bodyMapper: DownloadUrl
        },
        202: {
            bodyMapper: DownloadUrl
        },
        204: {
            bodyMapper: DownloadUrl
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, downloadToken],
    urlParameters: [
        $host,
        subscriptionId,
        invoiceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const downloadMultipleBillingSubscriptionInvoicesOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/downloadDocuments",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DownloadUrl
        },
        201: {
            bodyMapper: DownloadUrl
        },
        202: {
            bodyMapper: DownloadUrl
        },
        204: {
            bodyMapper: DownloadUrl
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: downloadUrls,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const listByBillingAccountNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        periodStartDate,
        periodEndDate
    ],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByBillingProfileNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        periodStartDate,
        periodEndDate
    ],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByBillingSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: InvoiceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        periodStartDate,
        periodEndDate
    ],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Transactions operations. */
class TransactionsImpl {
    /**
     * Initialize a new instance of the class Transactions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage
     * charges.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    listByInvoice(billingAccountName, invoiceName, options) {
        const iter = this.listByInvoicePagingAll(billingAccountName, invoiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByInvoicePagingPage(billingAccountName, invoiceName, options, settings);
            }
        };
    }
    listByInvoicePagingPage(billingAccountName, invoiceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoicePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByInvoice(billingAccountName, invoiceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByInvoiceNext(billingAccountName, invoiceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByInvoicePagingAll(billingAccountName, invoiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoicePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByInvoicePagingPage(billingAccountName, invoiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage
     * charges.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param options The options parameters.
     */
    _listByInvoice(billingAccountName, invoiceName, options) {
        return this.client.sendOperationRequest({ billingAccountName, invoiceName, options }, listByInvoiceOperationSpec);
    }
    /**
     * ListByInvoiceNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param invoiceName The ID that uniquely identifies an invoice.
     * @param nextLink The nextLink from the previous successful call to the ListByInvoice method.
     * @param options The options parameters.
     */
    _listByInvoiceNext(billingAccountName, invoiceName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, invoiceName, nextLink, options }, listByInvoiceNextOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByInvoiceOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TransactionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        invoiceName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByInvoiceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TransactionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        invoiceName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Policies operations. */
class PoliciesImpl {
    /**
     * Initialize a new instance of the class Policies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the policies for a billing profile. This operation is supported only for billing accounts with
     * agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    getByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, getByBillingProfileOperationSpec$2);
    }
    /**
     * Updates the policies for a billing profile. This operation is supported only for billing accounts
     * with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param parameters Request parameters that are provided to the update policies operation.
     * @param options The options parameters.
     */
    update(billingAccountName, billingProfileName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, parameters, options }, updateOperationSpec$1);
    }
    /**
     * Lists the policies for a customer. This operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param options The options parameters.
     */
    getByCustomer(billingAccountName, customerName, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, options }, getByCustomerOperationSpec);
    }
    /**
     * Updates the policies for a customer. This operation is supported only for billing accounts with
     * agreement type Microsoft Partner Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param customerName The ID that uniquely identifies a customer.
     * @param parameters Request parameters that are provided to the update policies operation.
     * @param options The options parameters.
     */
    updateCustomer(billingAccountName, customerName, parameters, options) {
        return this.client.sendOperationRequest({ billingAccountName, customerName, parameters, options }, updateCustomerOperationSpec);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getByBillingProfileOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Policy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const updateOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Policy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const getByCustomerOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CustomerPolicy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        customerName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const updateCustomerOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CustomerPolicy
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        customerName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing BillingPropertyOperations operations. */
class BillingPropertyOperationsImpl {
    /**
     * Initialize a new instance of the class BillingPropertyOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the billing properties for a subscription. This operation is not supported for billing accounts
     * with agreement type Enterprise Agreement.
     * @param options The options parameters.
     */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec$3);
    }
    /**
     * Updates the billing property of a subscription. Currently, cost center can be updated. The operation
     * is supported only for billing accounts with agreement type Microsoft Customer Agreement.
     * @param parameters Request parameters that are provided to the update billing property operation.
     * @param options The options parameters.
     */
    update(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, updateOperationSpec);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingProperty
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$7
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: BillingProperty
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available billing REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available billing REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BillingRoleDefinitions operations. */
class BillingRoleDefinitionsImpl {
    /**
     * Initialize a new instance of the class BillingRoleDefinitions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets the definition for a role on a billing account. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param options The options parameters.
     */
    getByBillingAccount(billingAccountName, billingRoleDefinitionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingRoleDefinitionName, options }, getByBillingAccountOperationSpec$1);
    }
    /**
     * Gets the definition for a role on an invoice section. The operation is supported only for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param options The options parameters.
     */
    getByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, billingRoleDefinitionName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            billingRoleDefinitionName,
            options
        }, getByInvoiceSectionOperationSpec$1);
    }
    /**
     * Gets the definition for a role on a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleDefinitionName The ID that uniquely identifies a role definition.
     * @param options The options parameters.
     */
    getByBillingProfile(billingAccountName, billingProfileName, billingRoleDefinitionName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            billingRoleDefinitionName,
            options
        }, getByBillingProfileOperationSpec$1);
    }
    /**
     * Lists the role definitions for a billing account. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$3);
    }
    /**
     * Lists the role definitions for an invoice section. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    _listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listByInvoiceSectionOperationSpec$1);
    }
    /**
     * Lists the role definitions for a billing profile. The operation is supported for billing accounts
     * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$2);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$3);
    }
    /**
     * ListByInvoiceSectionNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSection method.
     * @param options The options parameters.
     */
    _listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listByInvoiceSectionNextOperationSpec$1);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getByBillingAccountOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/{billingRoleDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingRoleDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getByInvoiceSectionOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions/{billingRoleDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        billingRoleDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getByBillingProfileOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions/{billingRoleDefinitionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        billingRoleDefinitionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByBillingAccountOperationSpec$3 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByInvoiceSectionOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByBillingProfileOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByBillingAccountNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByInvoiceSectionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByBillingProfileNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleDefinitionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BillingRoleAssignments operations. */
class BillingRoleAssignmentsImpl {
    /**
     * Initialize a new instance of the class BillingRoleAssignments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the role assignments for the caller on a billing account. The operation is supported for
     * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the role assignments for the caller on an invoice section. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        const iter = this.listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings);
            }
        };
    }
    listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByInvoiceSectionPagingAll(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByInvoiceSectionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByInvoiceSectionPagingPage(billingAccountName, billingProfileName, invoiceSectionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the role assignments for the caller on a billing profile. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets a role assignment for the caller on a billing account. The operation is supported for billing
     * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    getByBillingAccount(billingAccountName, billingRoleAssignmentName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingRoleAssignmentName, options }, getByBillingAccountOperationSpec);
    }
    /**
     * Deletes a role assignment for the caller on a billing account. The operation is supported for
     * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    deleteByBillingAccount(billingAccountName, billingRoleAssignmentName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingRoleAssignmentName, options }, deleteByBillingAccountOperationSpec);
    }
    /**
     * Gets a role assignment for the caller on an invoice section. The operation is supported for billing
     * accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    getByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            billingRoleAssignmentName,
            options
        }, getByInvoiceSectionOperationSpec);
    }
    /**
     * Deletes a role assignment for the caller on an invoice section. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    deleteByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, billingRoleAssignmentName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            billingRoleAssignmentName,
            options
        }, deleteByInvoiceSectionOperationSpec);
    }
    /**
     * Gets a role assignment for the caller on a billing profile. The operation is supported for billing
     * accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    getByBillingProfile(billingAccountName, billingProfileName, billingRoleAssignmentName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            billingRoleAssignmentName,
            options
        }, getByBillingProfileOperationSpec);
    }
    /**
     * Deletes a role assignment for the caller on a billing profile. The operation is supported for
     * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param billingRoleAssignmentName The ID that uniquely identifies a role assignment.
     * @param options The options parameters.
     */
    deleteByBillingProfile(billingAccountName, billingProfileName, billingRoleAssignmentName, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            billingRoleAssignmentName,
            options
        }, deleteByBillingProfileOperationSpec);
    }
    /**
     * Lists the role assignments for the caller on a billing account. The operation is supported for
     * billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$2);
    }
    /**
     * Lists the role assignments for the caller on an invoice section. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param options The options parameters.
     */
    _listByInvoiceSection(billingAccountName, billingProfileName, invoiceSectionName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, invoiceSectionName, options }, listByInvoiceSectionOperationSpec);
    }
    /**
     * Lists the role assignments for the caller on a billing profile. The operation is supported for
     * billing accounts with agreement type Microsoft Customer Agreement.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec$1);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$2);
    }
    /**
     * ListByInvoiceSectionNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param invoiceSectionName The ID that uniquely identifies an invoice section.
     * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSection method.
     * @param options The options parameters.
     */
    _listByInvoiceSectionNext(billingAccountName, billingProfileName, invoiceSectionName, nextLink, options) {
        return this.client.sendOperationRequest({
            billingAccountName,
            billingProfileName,
            invoiceSectionName,
            nextLink,
            options
        }, listByInvoiceSectionNextOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingRoleAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const deleteByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments/{billingRoleAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingRoleAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getByInvoiceSectionOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        billingRoleAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const deleteByInvoiceSectionOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments/{billingRoleAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        billingRoleAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        billingRoleAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const deleteByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments/{billingRoleAssignmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignment
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        billingRoleAssignmentName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByBillingAccountOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByInvoiceSectionOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByBillingProfileOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByBillingAccountNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByInvoiceSectionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName,
        invoiceSectionName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByBillingProfileNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingRoleAssignmentListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Agreements operations. */
class AgreementsImpl {
    /**
     * Initialize a new instance of the class Agreements class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the agreements for a billing account.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the agreements for a billing account.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec$1);
    }
    /**
     * Gets an agreement by ID.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param agreementName The ID that uniquely identifies an agreement.
     * @param options The options parameters.
     */
    get(billingAccountName, agreementName, options) {
        return this.client.sendOperationRequest({ billingAccountName, agreementName, options }, getOperationSpec$2);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AgreementListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/{agreementName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Agreement
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        billingAccountName,
        agreementName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByBillingAccountNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AgreementListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, expand],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Reservations operations. */
class ReservationsImpl {
    /**
     * Initialize a new instance of the class Reservations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the reservations for a billing account and the roll up counts of reservations group by
     * provisioning states.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    listByBillingAccount(billingAccountName, options) {
        const iter = this.listByBillingAccountPagingAll(billingAccountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingAccountPagingPage(billingAccountName, options, settings);
            }
        };
    }
    listByBillingAccountPagingPage(billingAccountName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingAccount(billingAccountName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingAccountNext(billingAccountName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingAccountPagingAll(billingAccountName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingAccountPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingAccountPagingPage(billingAccountName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the reservations for a billing profile and the roll up counts of reservations group by
     * provisioning state.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    listByBillingProfile(billingAccountName, billingProfileName, options) {
        const iter = this.listByBillingProfilePagingAll(billingAccountName, billingProfileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings);
            }
        };
    }
    listByBillingProfilePagingPage(billingAccountName, billingProfileName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByBillingProfile(billingAccountName, billingProfileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByBillingProfileNext(billingAccountName, billingProfileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByBillingProfilePagingAll(billingAccountName, billingProfileName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByBillingProfilePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByBillingProfilePagingPage(billingAccountName, billingProfileName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the reservations for a billing account and the roll up counts of reservations group by
     * provisioning states.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param options The options parameters.
     */
    _listByBillingAccount(billingAccountName, options) {
        return this.client.sendOperationRequest({ billingAccountName, options }, listByBillingAccountOperationSpec);
    }
    /**
     * Lists the reservations for a billing profile and the roll up counts of reservations group by
     * provisioning state.
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param options The options parameters.
     */
    _listByBillingProfile(billingAccountName, billingProfileName, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, options }, listByBillingProfileOperationSpec);
    }
    /**
     * ListByBillingAccountNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
     * @param options The options parameters.
     */
    _listByBillingAccountNext(billingAccountName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, nextLink, options }, listByBillingAccountNextOperationSpec);
    }
    /**
     * ListByBillingProfileNext
     * @param billingAccountName The ID that uniquely identifies a billing account.
     * @param billingProfileName The ID that uniquely identifies a billing profile.
     * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
     * @param options The options parameters.
     */
    _listByBillingProfileNext(billingAccountName, billingProfileName, nextLink, options) {
        return this.client.sendOperationRequest({ billingAccountName, billingProfileName, nextLink, options }, listByBillingProfileNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByBillingAccountOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/reservations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        refreshSummary,
        selectedState
    ],
    urlParameters: [$host, billingAccountName],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByBillingProfileOperationSpec = {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/reservations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        refreshSummary,
        selectedState
    ],
    urlParameters: [
        $host,
        billingAccountName,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByBillingAccountNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        refreshSummary,
        selectedState
    ],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByBillingProfileNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReservationsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        orderby,
        refreshSummary,
        selectedState
    ],
    urlParameters: [
        $host,
        billingAccountName,
        nextLink,
        billingProfileName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EnrollmentAccounts operations. */
class EnrollmentAccountsImpl {
    /**
     * Initialize a new instance of the class EnrollmentAccounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the enrollment accounts the caller has access to.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the enrollment accounts the caller has access to.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Gets a enrollment account by name.
     * @param name Enrollment Account name.
     * @param options The options parameters.
     */
    get(name, options) {
        return this.client.sendOperationRequest({ name, options }, getOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/enrollmentAccounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnrollmentAccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/providers/Microsoft.Billing/enrollmentAccounts/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnrollmentAccountSummary
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [$host, name],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EnrollmentAccountListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing BillingPeriods operations. */
class BillingPeriodsImpl {
    /**
     * Initialize a new instance of the class BillingPeriods class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available billing periods for a subscription in reverse chronological order. This is only
     * supported for Azure Web-Direct subscriptions. Other subscription types which were not purchased
     * directly through the Azure web portal are not supported through this preview API.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available billing periods for a subscription in reverse chronological order. This is only
     * supported for Azure Web-Direct subscriptions. Other subscription types which were not purchased
     * directly through the Azure web portal are not supported through this preview API.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Gets a named billing period.  This is only supported for Azure Web-Direct subscriptions. Other
     * subscription types which were not purchased directly through the Azure web portal are not supported
     * through this preview API.
     * @param billingPeriodName The name of a BillingPeriod resource.
     * @param options The options parameters.
     */
    get(billingPeriodName, options) {
        return this.client.sendOperationRequest({ billingPeriodName, options }, getOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPeriodsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        filter,
        apiVersion1,
        skiptoken,
        top
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPeriod
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        billingPeriodName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: BillingPeriodsListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        filter,
        apiVersion1,
        skiptoken,
        top
    ],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class BillingManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the BillingManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID that uniquely identifies an Azure subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-billing/4.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.billingAccounts = new BillingAccountsImpl(this);
        this.address = new AddressImpl(this);
        this.availableBalances = new AvailableBalancesImpl(this);
        this.instructions = new InstructionsImpl(this);
        this.billingProfiles = new BillingProfilesImpl(this);
        this.customers = new CustomersImpl(this);
        this.invoiceSections = new InvoiceSectionsImpl(this);
        this.billingPermissions = new BillingPermissionsImpl(this);
        this.billingSubscriptions = new BillingSubscriptionsImpl(this);
        this.products = new ProductsImpl(this);
        this.invoices = new InvoicesImpl(this);
        this.transactions = new TransactionsImpl(this);
        this.policies = new PoliciesImpl(this);
        this.billingPropertyOperations = new BillingPropertyOperationsImpl(this);
        this.operations = new OperationsImpl(this);
        this.billingRoleDefinitions = new BillingRoleDefinitionsImpl(this);
        this.billingRoleAssignments = new BillingRoleAssignmentsImpl(this);
        this.agreements = new AgreementsImpl(this);
        this.reservations = new ReservationsImpl(this);
        this.enrollmentAccounts = new EnrollmentAccountsImpl(this);
        this.billingPeriods = new BillingPeriodsImpl(this);
    }
}

exports.BillingManagementClient = BillingManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
