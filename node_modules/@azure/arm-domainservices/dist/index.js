'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link Ldaps} that the service accepts. */
exports.KnownLdaps = void 0;
(function (KnownLdaps) {
    /** Enabled */
    KnownLdaps["Enabled"] = "Enabled";
    /** Disabled */
    KnownLdaps["Disabled"] = "Disabled";
})(exports.KnownLdaps || (exports.KnownLdaps = {}));
/** Known values of {@link ExternalAccess} that the service accepts. */
exports.KnownExternalAccess = void 0;
(function (KnownExternalAccess) {
    /** Enabled */
    KnownExternalAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownExternalAccess["Disabled"] = "Disabled";
})(exports.KnownExternalAccess || (exports.KnownExternalAccess = {}));
/** Known values of {@link NtlmV1} that the service accepts. */
exports.KnownNtlmV1 = void 0;
(function (KnownNtlmV1) {
    /** Enabled */
    KnownNtlmV1["Enabled"] = "Enabled";
    /** Disabled */
    KnownNtlmV1["Disabled"] = "Disabled";
})(exports.KnownNtlmV1 || (exports.KnownNtlmV1 = {}));
/** Known values of {@link TlsV1} that the service accepts. */
exports.KnownTlsV1 = void 0;
(function (KnownTlsV1) {
    /** Enabled */
    KnownTlsV1["Enabled"] = "Enabled";
    /** Disabled */
    KnownTlsV1["Disabled"] = "Disabled";
})(exports.KnownTlsV1 || (exports.KnownTlsV1 = {}));
/** Known values of {@link SyncNtlmPasswords} that the service accepts. */
exports.KnownSyncNtlmPasswords = void 0;
(function (KnownSyncNtlmPasswords) {
    /** Enabled */
    KnownSyncNtlmPasswords["Enabled"] = "Enabled";
    /** Disabled */
    KnownSyncNtlmPasswords["Disabled"] = "Disabled";
})(exports.KnownSyncNtlmPasswords || (exports.KnownSyncNtlmPasswords = {}));
/** Known values of {@link SyncKerberosPasswords} that the service accepts. */
exports.KnownSyncKerberosPasswords = void 0;
(function (KnownSyncKerberosPasswords) {
    /** Enabled */
    KnownSyncKerberosPasswords["Enabled"] = "Enabled";
    /** Disabled */
    KnownSyncKerberosPasswords["Disabled"] = "Disabled";
})(exports.KnownSyncKerberosPasswords || (exports.KnownSyncKerberosPasswords = {}));
/** Known values of {@link SyncOnPremPasswords} that the service accepts. */
exports.KnownSyncOnPremPasswords = void 0;
(function (KnownSyncOnPremPasswords) {
    /** Enabled */
    KnownSyncOnPremPasswords["Enabled"] = "Enabled";
    /** Disabled */
    KnownSyncOnPremPasswords["Disabled"] = "Disabled";
})(exports.KnownSyncOnPremPasswords || (exports.KnownSyncOnPremPasswords = {}));
/** Known values of {@link KerberosRc4Encryption} that the service accepts. */
exports.KnownKerberosRc4Encryption = void 0;
(function (KnownKerberosRc4Encryption) {
    /** Enabled */
    KnownKerberosRc4Encryption["Enabled"] = "Enabled";
    /** Disabled */
    KnownKerberosRc4Encryption["Disabled"] = "Disabled";
})(exports.KnownKerberosRc4Encryption || (exports.KnownKerberosRc4Encryption = {}));
/** Known values of {@link KerberosArmoring} that the service accepts. */
exports.KnownKerberosArmoring = void 0;
(function (KnownKerberosArmoring) {
    /** Enabled */
    KnownKerberosArmoring["Enabled"] = "Enabled";
    /** Disabled */
    KnownKerberosArmoring["Disabled"] = "Disabled";
})(exports.KnownKerberosArmoring || (exports.KnownKerberosArmoring = {}));
/** Known values of {@link FilteredSync} that the service accepts. */
exports.KnownFilteredSync = void 0;
(function (KnownFilteredSync) {
    /** Enabled */
    KnownFilteredSync["Enabled"] = "Enabled";
    /** Disabled */
    KnownFilteredSync["Disabled"] = "Disabled";
})(exports.KnownFilteredSync || (exports.KnownFilteredSync = {}));
/** Known values of {@link NotifyGlobalAdmins} that the service accepts. */
exports.KnownNotifyGlobalAdmins = void 0;
(function (KnownNotifyGlobalAdmins) {
    /** Enabled */
    KnownNotifyGlobalAdmins["Enabled"] = "Enabled";
    /** Disabled */
    KnownNotifyGlobalAdmins["Disabled"] = "Disabled";
})(exports.KnownNotifyGlobalAdmins || (exports.KnownNotifyGlobalAdmins = {}));
/** Known values of {@link NotifyDcAdmins} that the service accepts. */
exports.KnownNotifyDcAdmins = void 0;
(function (KnownNotifyDcAdmins) {
    /** Enabled */
    KnownNotifyDcAdmins["Enabled"] = "Enabled";
    /** Disabled */
    KnownNotifyDcAdmins["Disabled"] = "Disabled";
})(exports.KnownNotifyDcAdmins || (exports.KnownNotifyDcAdmins = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** None */
    KnownStatus["None"] = "None";
    /** Running */
    KnownStatus["Running"] = "Running";
    /** OK */
    KnownStatus["OK"] = "OK";
    /** Failure */
    KnownStatus["Failure"] = "Failure";
    /** Warning */
    KnownStatus["Warning"] = "Warning";
    /** Skipped */
    KnownStatus["Skipped"] = "Skipped";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationEntityListResult = {
    type: {
        name: "Composite",
        className: "OperationEntityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationEntity"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationEntity = {
    type: {
        name: "Composite",
        className: "OperationEntity",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayInfo"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplayInfo = {
    type: {
        name: "Composite",
        className: "OperationDisplayInfo",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const DomainServiceListResult = {
    type: {
        name: "Composite",
        className: "DomainServiceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DomainService"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReplicaSet = {
    type: {
        name: "Composite",
        className: "ReplicaSet",
        modelProperties: {
            replicaSetId: {
                serializedName: "replicaSetId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            vnetSiteId: {
                serializedName: "vnetSiteId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subnetId: {
                serializedName: "subnetId",
                type: {
                    name: "String"
                }
            },
            domainControllerIpAddress: {
                serializedName: "domainControllerIpAddress",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            externalAccessIpAddress: {
                serializedName: "externalAccessIpAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serviceStatus: {
                serializedName: "serviceStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            healthLastEvaluated: {
                serializedName: "healthLastEvaluated",
                readOnly: true,
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            healthMonitors: {
                serializedName: "healthMonitors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthMonitor"
                        }
                    }
                }
            },
            healthAlerts: {
                serializedName: "healthAlerts",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthAlert"
                        }
                    }
                }
            }
        }
    }
};
const HealthMonitor = {
    type: {
        name: "Composite",
        className: "HealthMonitor",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HealthAlert = {
    type: {
        name: "Composite",
        className: "HealthAlert",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            issue: {
                serializedName: "issue",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            raised: {
                serializedName: "raised",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastDetected: {
                serializedName: "lastDetected",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            resolutionUri: {
                serializedName: "resolutionUri",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LdapsSettings = {
    type: {
        name: "Composite",
        className: "LdapsSettings",
        modelProperties: {
            ldaps: {
                defaultValue: "Disabled",
                serializedName: "ldaps",
                type: {
                    name: "String"
                }
            },
            pfxCertificate: {
                serializedName: "pfxCertificate",
                type: {
                    name: "String"
                }
            },
            pfxCertificatePassword: {
                serializedName: "pfxCertificatePassword",
                type: {
                    name: "String"
                }
            },
            publicCertificate: {
                serializedName: "publicCertificate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            certificateThumbprint: {
                serializedName: "certificateThumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            certificateNotAfter: {
                serializedName: "certificateNotAfter",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            externalAccess: {
                defaultValue: "Disabled",
                serializedName: "externalAccess",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceForestSettings = {
    type: {
        name: "Composite",
        className: "ResourceForestSettings",
        modelProperties: {
            settings: {
                serializedName: "settings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ForestTrust"
                        }
                    }
                }
            },
            resourceForest: {
                serializedName: "resourceForest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ForestTrust = {
    type: {
        name: "Composite",
        className: "ForestTrust",
        modelProperties: {
            trustedDomainFqdn: {
                serializedName: "trustedDomainFqdn",
                type: {
                    name: "String"
                }
            },
            trustDirection: {
                serializedName: "trustDirection",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            remoteDnsIps: {
                serializedName: "remoteDnsIps",
                type: {
                    name: "String"
                }
            },
            trustPassword: {
                serializedName: "trustPassword",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainSecuritySettings = {
    type: {
        name: "Composite",
        className: "DomainSecuritySettings",
        modelProperties: {
            ntlmV1: {
                defaultValue: "Enabled",
                serializedName: "ntlmV1",
                type: {
                    name: "String"
                }
            },
            tlsV1: {
                defaultValue: "Enabled",
                serializedName: "tlsV1",
                type: {
                    name: "String"
                }
            },
            syncNtlmPasswords: {
                defaultValue: "Enabled",
                serializedName: "syncNtlmPasswords",
                type: {
                    name: "String"
                }
            },
            syncKerberosPasswords: {
                defaultValue: "Enabled",
                serializedName: "syncKerberosPasswords",
                type: {
                    name: "String"
                }
            },
            syncOnPremPasswords: {
                defaultValue: "Enabled",
                serializedName: "syncOnPremPasswords",
                type: {
                    name: "String"
                }
            },
            kerberosRc4Encryption: {
                defaultValue: "Enabled",
                serializedName: "kerberosRc4Encryption",
                type: {
                    name: "String"
                }
            },
            kerberosArmoring: {
                defaultValue: "Disabled",
                serializedName: "kerberosArmoring",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NotificationSettings = {
    type: {
        name: "Composite",
        className: "NotificationSettings",
        modelProperties: {
            notifyGlobalAdmins: {
                serializedName: "notifyGlobalAdmins",
                type: {
                    name: "String"
                }
            },
            notifyDcAdmins: {
                serializedName: "notifyDcAdmins",
                type: {
                    name: "String"
                }
            },
            additionalRecipients: {
                serializedName: "additionalRecipients",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const MigrationProperties = {
    type: {
        name: "Composite",
        className: "MigrationProperties",
        modelProperties: {
            oldSubnetId: {
                serializedName: "oldSubnetId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            oldVnetSiteId: {
                serializedName: "oldVnetSiteId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            migrationProgress: {
                serializedName: "migrationProgress",
                type: {
                    name: "Composite",
                    className: "MigrationProgress"
                }
            }
        }
    }
};
const MigrationProgress = {
    type: {
        name: "Composite",
        className: "MigrationProgress",
        modelProperties: {
            completionPercentage: {
                serializedName: "completionPercentage",
                type: {
                    name: "Number"
                }
            },
            progressMessage: {
                serializedName: "progressMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigDiagnostics = {
    type: {
        name: "Composite",
        className: "ConfigDiagnostics",
        modelProperties: {
            lastExecuted: {
                serializedName: "lastExecuted",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            validatorResults: {
                serializedName: "validatorResults",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigDiagnosticsValidatorResult"
                        }
                    }
                }
            }
        }
    }
};
const ConfigDiagnosticsValidatorResult = {
    type: {
        name: "Composite",
        className: "ConfigDiagnosticsValidatorResult",
        modelProperties: {
            validatorId: {
                serializedName: "validatorId",
                type: {
                    name: "String"
                }
            },
            replicaSetSubnetDisplayName: {
                serializedName: "replicaSetSubnetDisplayName",
                type: {
                    name: "String"
                }
            },
            status: {
                defaultValue: "None",
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            issues: {
                serializedName: "issues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConfigDiagnosticsValidatorResultIssue"
                        }
                    }
                }
            }
        }
    }
};
const ConfigDiagnosticsValidatorResultIssue = {
    type: {
        name: "Composite",
        className: "ConfigDiagnosticsValidatorResultIssue",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            descriptionParams: {
                serializedName: "descriptionParams",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const OuContainerListResult = {
    type: {
        name: "Composite",
        className: "OuContainerListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OuContainer"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerAccount = {
    type: {
        name: "Composite",
        className: "ContainerAccount",
        modelProperties: {
            accountName: {
                serializedName: "accountName",
                type: {
                    name: "String"
                }
            },
            spn: {
                serializedName: "spn",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DomainService = {
    type: {
        name: "Composite",
        className: "DomainService",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { version: {
                serializedName: "properties.version",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, tenantId: {
                serializedName: "properties.tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, domainName: {
                serializedName: "properties.domainName",
                type: {
                    name: "String"
                }
            }, deploymentId: {
                serializedName: "properties.deploymentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, syncOwner: {
                serializedName: "properties.syncOwner",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, replicaSets: {
                serializedName: "properties.replicaSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicaSet"
                        }
                    }
                }
            }, ldapsSettings: {
                serializedName: "properties.ldapsSettings",
                type: {
                    name: "Composite",
                    className: "LdapsSettings"
                }
            }, resourceForestSettings: {
                serializedName: "properties.resourceForestSettings",
                type: {
                    name: "Composite",
                    className: "ResourceForestSettings"
                }
            }, domainSecuritySettings: {
                serializedName: "properties.domainSecuritySettings",
                type: {
                    name: "Composite",
                    className: "DomainSecuritySettings"
                }
            }, domainConfigurationType: {
                serializedName: "properties.domainConfigurationType",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "properties.sku",
                type: {
                    name: "String"
                }
            }, filteredSync: {
                serializedName: "properties.filteredSync",
                type: {
                    name: "String"
                }
            }, notificationSettings: {
                serializedName: "properties.notificationSettings",
                type: {
                    name: "Composite",
                    className: "NotificationSettings"
                }
            }, migrationProperties: {
                serializedName: "properties.migrationProperties",
                type: {
                    name: "Composite",
                    className: "MigrationProperties"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, configDiagnostics: {
                serializedName: "properties.configDiagnostics",
                type: {
                    name: "Composite",
                    className: "ConfigDiagnostics"
                }
            } })
    }
};
const OuContainer = {
    type: {
        name: "Composite",
        className: "OuContainer",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tenantId: {
                serializedName: "properties.tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, domainName: {
                serializedName: "properties.domainName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentId: {
                serializedName: "properties.deploymentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, containerId: {
                serializedName: "properties.containerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, accounts: {
                serializedName: "properties.accounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContainerAccount"
                        }
                    }
                }
            }, serviceStatus: {
                serializedName: "properties.serviceStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, distinguishedName: {
                serializedName: "properties.distinguishedName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationEntityListResult: OperationEntityListResult,
    OperationEntity: OperationEntity,
    OperationDisplayInfo: OperationDisplayInfo,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    DomainServiceListResult: DomainServiceListResult,
    ReplicaSet: ReplicaSet,
    HealthMonitor: HealthMonitor,
    HealthAlert: HealthAlert,
    LdapsSettings: LdapsSettings,
    ResourceForestSettings: ResourceForestSettings,
    ForestTrust: ForestTrust,
    DomainSecuritySettings: DomainSecuritySettings,
    NotificationSettings: NotificationSettings,
    MigrationProperties: MigrationProperties,
    MigrationProgress: MigrationProgress,
    ConfigDiagnostics: ConfigDiagnostics,
    ConfigDiagnosticsValidatorResult: ConfigDiagnosticsValidatorResult,
    ConfigDiagnosticsValidatorResultIssue: ConfigDiagnosticsValidatorResultIssue,
    Resource: Resource,
    SystemData: SystemData,
    OuContainerListResult: OuContainerListResult,
    ContainerAccount: ContainerAccount,
    DomainService: DomainService,
    OuContainer: OuContainer
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const domainService = {
    parameterPath: "domainService",
    mapper: DomainService
};
const domainServiceName = {
    parameterPath: "domainServiceName",
    mapper: {
        serializedName: "domainServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const ouContainerName = {
    parameterPath: "ouContainerName",
    mapper: {
        serializedName: "ouContainerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const containerAccount = {
    parameterPath: "containerAccount",
    mapper: ContainerAccount
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DomainServiceOperations operations. */
class DomainServiceOperationsImpl {
    /**
     * Initialize a new instance of the class DomainServiceOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the available Domain Services operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available Domain Services operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/providers/Microsoft.AAD/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DomainServices operations. */
class DomainServicesImpl {
    /**
     * Initialize a new instance of the class DomainServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * The List Domain Services in Subscription operation lists all the domain services available under the
     * given subscription (and across all resource groups within that subscription).
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * The List Domain Services in Resource Group operation lists all the domain services available under
     * the given resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * The List Domain Services in Subscription operation lists all the domain services available under the
     * given subscription (and across all resource groups within that subscription).
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * The List Domain Services in Resource Group operation lists all the domain services available under
     * the given resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * The Create Domain Service operation creates a new domain service with the specified parameters. If
     * the specific service already exists, then any patchable properties will be updated and any immutable
     * properties will remain unchanged.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param domainService Properties supplied to the Create or Update a Domain Service operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, domainServiceName, domainService, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, domainServiceName, domainService, options }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The Create Domain Service operation creates a new domain service with the specified parameters. If
     * the specific service already exists, then any patchable properties will be updated and any immutable
     * properties will remain unchanged.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param domainService Properties supplied to the Create or Update a Domain Service operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, domainServiceName, domainService, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, domainServiceName, domainService, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The Get Domain Service operation retrieves a json representation of the Domain Service.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param options The options parameters.
     */
    get(resourceGroupName, domainServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, domainServiceName, options }, getOperationSpec$1);
    }
    /**
     * The Delete Domain Service operation deletes an existing Domain Service.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, domainServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, domainServiceName, options }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The Delete Domain Service operation deletes an existing Domain Service.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, domainServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, domainServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The Update Domain Service operation can be used to update the existing deployment. The update call
     * only supports the properties listed in the PATCH body.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param domainService Properties supplied to the Update a Domain Service operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, domainServiceName, domainService, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, domainServiceName, domainService, options }, updateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The Update Domain Service operation can be used to update the existing deployment. The update call
     * only supports the properties listed in the PATCH body.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param domainService Properties supplied to the Update a Domain Service operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, domainServiceName, domainService, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, domainServiceName, domainService, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AAD/domainServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainServiceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainServiceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DomainService
        },
        201: {
            bodyMapper: DomainService
        },
        202: {
            bodyMapper: DomainService
        },
        204: {
            bodyMapper: DomainService
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: domainService,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainService
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: DomainService
        },
        201: {
            bodyMapper: DomainService
        },
        202: {
            bodyMapper: DomainService
        },
        204: {
            bodyMapper: DomainService
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: domainService,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainServiceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DomainServiceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing OuContainerOperations operations. */
class OuContainerOperationsImpl {
    /**
     * Initialize a new instance of the class OuContainerOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the available OuContainer operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the available OuContainer operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.Aad/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationEntityListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing OuContainerOperationGrp operations. */
class OuContainerOperationGrpImpl {
    /**
     * Initialize a new instance of the class OuContainerOperationGrp class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * The List of OuContainers in DomainService instance.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param options The options parameters.
     */
    list(resourceGroupName, domainServiceName, options) {
        const iter = this.listPagingAll(resourceGroupName, domainServiceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, domainServiceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, domainServiceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, domainServiceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, domainServiceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, domainServiceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, domainServiceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * The List of OuContainers in DomainService instance.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param options The options parameters.
     */
    _list(resourceGroupName, domainServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, domainServiceName, options }, listOperationSpec);
    }
    /**
     * Get OuContainer in DomainService instance.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param ouContainerName The name of the OuContainer.
     * @param options The options parameters.
     */
    get(resourceGroupName, domainServiceName, ouContainerName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, domainServiceName, ouContainerName, options }, getOperationSpec);
    }
    /**
     * The Create OuContainer operation creates a new OuContainer under the specified Domain Service
     * instance.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param ouContainerName The name of the OuContainer.
     * @param containerAccount Container Account Description.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, domainServiceName, ouContainerName, containerAccount, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                domainServiceName,
                ouContainerName,
                containerAccount,
                options
            }, createOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The Create OuContainer operation creates a new OuContainer under the specified Domain Service
     * instance.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param ouContainerName The name of the OuContainer.
     * @param containerAccount Container Account Description.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, domainServiceName, ouContainerName, containerAccount, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, domainServiceName, ouContainerName, containerAccount, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The Delete OuContainer operation deletes specified OuContainer.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param ouContainerName The name of the OuContainer.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, domainServiceName, ouContainerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, domainServiceName, ouContainerName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The Delete OuContainer operation deletes specified OuContainer.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param ouContainerName The name of the OuContainer.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, domainServiceName, ouContainerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, domainServiceName, ouContainerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The Update OuContainer operation can be used to update the existing OuContainers.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param ouContainerName The name of the OuContainer.
     * @param containerAccount Container Account Description.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, domainServiceName, ouContainerName, containerAccount, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                domainServiceName,
                ouContainerName,
                containerAccount,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The Update OuContainer operation can be used to update the existing OuContainers.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param ouContainerName The name of the OuContainer.
     * @param containerAccount Container Account Description.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, domainServiceName, ouContainerName, containerAccount, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, domainServiceName, ouContainerName, containerAccount, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param domainServiceName The name of the domain service.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, domainServiceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, domainServiceName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OuContainerListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OuContainer
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName,
        ouContainerName
    ],
    headerParameters: [accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: OuContainer
        },
        201: {
            bodyMapper: OuContainer
        },
        202: {
            bodyMapper: OuContainer
        },
        204: {
            bodyMapper: OuContainer
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: containerAccount,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName,
        ouContainerName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName,
        ouContainerName
    ],
    headerParameters: [accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: OuContainer
        },
        201: {
            bodyMapper: OuContainer
        },
        202: {
            bodyMapper: OuContainer
        },
        204: {
            bodyMapper: OuContainer
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: containerAccount,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        domainServiceName,
        ouContainerName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OuContainerListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        domainServiceName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class DomainServicesResourceProvider extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the DomainServicesResourceProvider class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-domainservices/4.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-05-01";
        this.domainServiceOperations = new DomainServiceOperationsImpl(this);
        this.domainServices = new DomainServicesImpl(this);
        this.ouContainerOperations = new OuContainerOperationsImpl(this);
        this.ouContainerOperationGrp = new OuContainerOperationGrpImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.DomainServicesResourceProvider = DomainServicesResourceProvider;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
