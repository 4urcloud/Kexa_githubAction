import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { MachineLearningComputeManagementClientContext } from "../machineLearningComputeManagementClientContext";
/** Class representing a OperationalizationClusters. */
export declare class OperationalizationClusters {
    private readonly client;
    /**
     * Create a OperationalizationClusters.
     * @param {MachineLearningComputeManagementClientContext} client Reference to the service client.
     */
    constructor(client: MachineLearningComputeManagementClientContext);
    /**
     * Create or update an operationalization cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, clusterName: string, parameters: Models.OperationalizationCluster, options?: msRest.RequestOptionsBase): Promise<Models.OperationalizationClustersCreateOrUpdateResponse>;
    /**
     * Gets the operationalization cluster resource view. Note that the credentials are not returned by
     * this call. Call ListKeys to get them.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersGetResponse>
     */
    get(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationalizationClustersGetResponse>;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param callback The callback
     */
    get(resourceGroupName: string, clusterName: string, callback: msRest.ServiceCallback<Models.OperationalizationCluster>): void;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, clusterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationalizationCluster>): void;
    /**
     * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to
     * update other properties.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersUpdateResponse>
     */
    update(resourceGroupName: string, clusterName: string, parameters: Models.OperationalizationClusterUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.OperationalizationClustersUpdateResponse>;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @param callback The callback
     */
    update(resourceGroupName: string, clusterName: string, parameters: Models.OperationalizationClusterUpdateParameters, callback: msRest.ServiceCallback<Models.OperationalizationCluster>): void;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters supplied to patch the cluster.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(resourceGroupName: string, clusterName: string, parameters: Models.OperationalizationClusterUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationalizationCluster>): void;
    /**
     * Deletes the specified cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersDeleteResponse>
     */
    deleteMethod(resourceGroupName: string, clusterName: string, options?: Models.OperationalizationClustersDeleteMethodOptionalParams): Promise<Models.OperationalizationClustersDeleteResponse>;
    /**
     * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is
     * a long running operation because it fetches keys from dependencies.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersListKeysResponse>
     */
    listKeys(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationalizationClustersListKeysResponse>;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param callback The callback
     */
    listKeys(resourceGroupName: string, clusterName: string, callback: msRest.ServiceCallback<Models.OperationalizationClusterCredentials>): void;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param options The optional parameters
     * @param callback The callback
     */
    listKeys(resourceGroupName: string, clusterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationalizationClusterCredentials>): void;
    /**
     * Checks if updates are available for system services in the cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse>
     */
    checkSystemServicesUpdatesAvailable(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse>;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param callback The callback
     */
    checkSystemServicesUpdatesAvailable(resourceGroupName: string, clusterName: string, callback: msRest.ServiceCallback<Models.CheckSystemServicesUpdatesAvailableResponse>): void;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkSystemServicesUpdatesAvailable(resourceGroupName: string, clusterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckSystemServicesUpdatesAvailableResponse>): void;
    /**
     * Updates system services in a cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersUpdateSystemServicesResponse>
     */
    updateSystemServices(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationalizationClustersUpdateSystemServicesResponse>;
    /**
     * Gets the clusters in the specified resource group.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: Models.OperationalizationClustersListByResourceGroupOptionalParams): Promise<Models.OperationalizationClustersListByResourceGroupResponse>;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
    /**
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: Models.OperationalizationClustersListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
    /**
     * Gets the operationalization clusters in the specified subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersListBySubscriptionIdResponse>
     */
    listBySubscriptionId(options?: Models.OperationalizationClustersListBySubscriptionIdOptionalParams): Promise<Models.OperationalizationClustersListBySubscriptionIdResponse>;
    /**
     * @param callback The callback
     */
    listBySubscriptionId(callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscriptionId(options: Models.OperationalizationClustersListBySubscriptionIdOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
    /**
     * Create or update an operationalization cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterName: string, parameters: Models.OperationalizationCluster, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Deletes the specified cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, clusterName: string, options?: Models.OperationalizationClustersBeginDeleteMethodOptionalParams): Promise<msRestAzure.LROPoller>;
    /**
     * Updates system services in a cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginUpdateSystemServices(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Gets the clusters in the specified resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: Models.OperationalizationClustersListByResourceGroupNextOptionalParams): Promise<Models.OperationalizationClustersListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: Models.OperationalizationClustersListByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
    /**
     * Gets the operationalization clusters in the specified subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersListBySubscriptionIdNextResponse>
     */
    listBySubscriptionIdNext(nextPageLink: string, options?: Models.OperationalizationClustersListBySubscriptionIdNextOptionalParams): Promise<Models.OperationalizationClustersListBySubscriptionIdNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listBySubscriptionIdNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listBySubscriptionIdNext(nextPageLink: string, options: Models.OperationalizationClustersListBySubscriptionIdNextOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedOperationalizationClustersList>): void;
}
//# sourceMappingURL=operationalizationClusters.d.ts.map