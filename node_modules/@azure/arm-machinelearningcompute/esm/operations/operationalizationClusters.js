/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/operationalizationClustersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a OperationalizationClusters. */
var OperationalizationClusters = /** @class */ (function () {
    /**
     * Create a OperationalizationClusters.
     * @param {MachineLearningComputeManagementClientContext} client Reference to the service client.
     */
    function OperationalizationClusters(client) {
        this.client = client;
    }
    /**
     * Create or update an operationalization cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersCreateOrUpdateResponse>
     */
    OperationalizationClusters.prototype.createOrUpdate = function (resourceGroupName, clusterName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    OperationalizationClusters.prototype.get = function (resourceGroupName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, getOperationSpec, callback);
    };
    OperationalizationClusters.prototype.update = function (resourceGroupName, clusterName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    /**
     * Deletes the specified cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersDeleteResponse>
     */
    OperationalizationClusters.prototype.deleteMethod = function (resourceGroupName, clusterName, options) {
        return this.beginDeleteMethod(resourceGroupName, clusterName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    OperationalizationClusters.prototype.listKeys = function (resourceGroupName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, listKeysOperationSpec, callback);
    };
    OperationalizationClusters.prototype.checkSystemServicesUpdatesAvailable = function (resourceGroupName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, checkSystemServicesUpdatesAvailableOperationSpec, callback);
    };
    /**
     * Updates system services in a cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationalizationClustersUpdateSystemServicesResponse>
     */
    OperationalizationClusters.prototype.updateSystemServices = function (resourceGroupName, clusterName, options) {
        return this.beginUpdateSystemServices(resourceGroupName, clusterName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    OperationalizationClusters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    OperationalizationClusters.prototype.listBySubscriptionId = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listBySubscriptionIdOperationSpec, callback);
    };
    /**
     * Create or update an operationalization cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param parameters Parameters supplied to create or update an Operationalization cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    OperationalizationClusters.prototype.beginCreateOrUpdate = function (resourceGroupName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes the specified cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    OperationalizationClusters.prototype.beginDeleteMethod = function (resourceGroupName, clusterName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Updates system services in a cluster.
     * @param resourceGroupName Name of the resource group in which the cluster is located.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    OperationalizationClusters.prototype.beginUpdateSystemServices = function (resourceGroupName, clusterName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, beginUpdateSystemServicesOperationSpec, options);
    };
    OperationalizationClusters.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    OperationalizationClusters.prototype.listBySubscriptionIdNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBySubscriptionIdNextOperationSpec, callback);
    };
    return OperationalizationClusters;
}());
export { OperationalizationClusters };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationalizationCluster
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWrapper
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.OperationalizationClusterUpdateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationalizationCluster
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWrapper
        }
    },
    serializer: serializer
};
var listKeysOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/listKeys",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationalizationClusterCredentials
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkSystemServicesUpdatesAvailableOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/checkSystemServicesUpdatesAvailable",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.CheckSystemServicesUpdatesAvailableResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skiptoken
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedOperationalizationClustersList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySubscriptionIdOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skiptoken
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedOperationalizationClustersList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.OperationalizationCluster), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.OperationalizationCluster
        },
        201: {
            bodyMapper: Mappers.OperationalizationCluster
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWrapper
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.deleteAll
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {
            headersMapper: Mappers.OperationalizationClustersDeleteHeaders
        },
        204: {
            headersMapper: Mappers.OperationalizationClustersDeleteHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponseWrapper,
            headersMapper: Mappers.OperationalizationClustersDeleteHeaders
        }
    },
    serializer: serializer
};
var beginUpdateSystemServicesOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UpdateSystemServicesResponse,
            headersMapper: Mappers.OperationalizationClustersUpdateSystemServicesHeaders
        },
        202: {
            headersMapper: Mappers.OperationalizationClustersUpdateSystemServicesHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError,
            headersMapper: Mappers.OperationalizationClustersUpdateSystemServicesHeaders
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skiptoken
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedOperationalizationClustersList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySubscriptionIdNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.skiptoken
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PaginatedOperationalizationClustersList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=operationalizationClusters.js.map