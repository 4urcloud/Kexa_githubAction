/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmMachinelearningcompute = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorDetail = {
        serializedName: "ErrorDetail",
        type: {
            name: "Composite",
            className: "ErrorDetail",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetail"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponseWrapper = {
        serializedName: "ErrorResponseWrapper",
        type: {
            name: "Composite",
            className: "ErrorResponseWrapper",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorResponse"
                    }
                }
            }
        }
    };
    var StorageAccountProperties = {
        serializedName: "StorageAccountProperties",
        type: {
            name: "Composite",
            className: "StorageAccountProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryProperties = {
        serializedName: "ContainerRegistryProperties",
        type: {
            name: "Composite",
            className: "ContainerRegistryProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServicePrincipalProperties = {
        serializedName: "ServicePrincipalProperties",
        type: {
            name: "Composite",
            className: "ServicePrincipalProperties",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                secret: {
                    required: true,
                    serializedName: "secret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var KubernetesClusterProperties = {
        serializedName: "Kubernetes",
        type: {
            name: "Composite",
            className: "KubernetesClusterProperties",
            modelProperties: {
                servicePrincipal: {
                    serializedName: "servicePrincipal",
                    type: {
                        name: "Composite",
                        className: "ServicePrincipalProperties"
                    }
                }
            }
        }
    };
    var SystemService = {
        serializedName: "SystemService",
        type: {
            name: "Composite",
            className: "SystemService",
            modelProperties: {
                systemServiceType: {
                    required: true,
                    serializedName: "systemServiceType",
                    type: {
                        name: "String"
                    }
                },
                publicIpAddress: {
                    readOnly: true,
                    serializedName: "publicIpAddress",
                    type: {
                        name: "String"
                    }
                },
                version: {
                    readOnly: true,
                    serializedName: "version",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AcsClusterProperties = {
        serializedName: "AcsClusterProperties",
        type: {
            name: "Composite",
            className: "AcsClusterProperties",
            modelProperties: {
                clusterFqdn: {
                    readOnly: true,
                    serializedName: "clusterFqdn",
                    type: {
                        name: "String"
                    }
                },
                orchestratorType: {
                    required: true,
                    serializedName: "orchestratorType",
                    type: {
                        name: "String"
                    }
                },
                orchestratorProperties: {
                    serializedName: "orchestratorProperties",
                    type: {
                        name: "Composite",
                        className: "KubernetesClusterProperties"
                    }
                },
                systemServices: {
                    serializedName: "systemServices",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SystemService"
                            }
                        }
                    }
                },
                masterCount: {
                    serializedName: "masterCount",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMaximum: 5,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                agentCount: {
                    serializedName: "agentCount",
                    defaultValue: 2,
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                agentVmSize: {
                    serializedName: "agentVmSize",
                    defaultValue: 'Standard_D3_v2',
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppInsightsProperties = {
        serializedName: "AppInsightsProperties",
        type: {
            name: "Composite",
            className: "AppInsightsProperties",
            modelProperties: {
                resourceId: {
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SslConfiguration = {
        serializedName: "SslConfiguration",
        type: {
            name: "Composite",
            className: "SslConfiguration",
            modelProperties: {
                status: {
                    serializedName: "status",
                    defaultValue: 'Enabled',
                    type: {
                        name: "String"
                    }
                },
                cert: {
                    serializedName: "cert",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                cname: {
                    serializedName: "cname",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceAuthConfiguration = {
        serializedName: "ServiceAuthConfiguration",
        type: {
            name: "Composite",
            className: "ServiceAuthConfiguration",
            modelProperties: {
                primaryAuthKeyHash: {
                    required: true,
                    serializedName: "primaryAuthKeyHash",
                    type: {
                        name: "String"
                    }
                },
                secondaryAuthKeyHash: {
                    required: true,
                    serializedName: "secondaryAuthKeyHash",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoScaleConfiguration = {
        serializedName: "AutoScaleConfiguration",
        type: {
            name: "Composite",
            className: "AutoScaleConfiguration",
            modelProperties: {
                status: {
                    serializedName: "status",
                    defaultValue: 'Disabled',
                    type: {
                        name: "String"
                    }
                },
                minReplicas: {
                    serializedName: "minReplicas",
                    defaultValue: 1,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                maxReplicas: {
                    serializedName: "maxReplicas",
                    defaultValue: 100,
                    constraints: {
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                targetUtilization: {
                    serializedName: "targetUtilization",
                    type: {
                        name: "Number"
                    }
                },
                refreshPeriodInSeconds: {
                    serializedName: "refreshPeriodInSeconds",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var GlobalServiceConfiguration = {
        serializedName: "GlobalServiceConfiguration",
        type: {
            name: "Composite",
            className: "GlobalServiceConfiguration",
            modelProperties: {
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                },
                ssl: {
                    serializedName: "ssl",
                    type: {
                        name: "Composite",
                        className: "SslConfiguration"
                    }
                },
                serviceAuth: {
                    serializedName: "serviceAuth",
                    type: {
                        name: "Composite",
                        className: "ServiceAuthConfiguration"
                    }
                },
                autoScale: {
                    serializedName: "autoScale",
                    type: {
                        name: "Composite",
                        className: "AutoScaleConfiguration"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var OperationalizationCluster = {
        serializedName: "OperationalizationCluster",
        type: {
            name: "Composite",
            className: "OperationalizationCluster",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { description: {
                    serializedName: "properties.description",
                    type: {
                        name: "String"
                    }
                }, createdOn: {
                    readOnly: true,
                    serializedName: "properties.createdOn",
                    type: {
                        name: "DateTime"
                    }
                }, modifiedOn: {
                    readOnly: true,
                    serializedName: "properties.modifiedOn",
                    type: {
                        name: "DateTime"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, provisioningErrors: {
                    readOnly: true,
                    serializedName: "properties.provisioningErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorResponseWrapper"
                            }
                        }
                    }
                }, clusterType: {
                    required: true,
                    serializedName: "properties.clusterType",
                    type: {
                        name: "String"
                    }
                }, storageAccount: {
                    serializedName: "properties.storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountProperties"
                    }
                }, containerRegistry: {
                    serializedName: "properties.containerRegistry",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryProperties"
                    }
                }, containerService: {
                    serializedName: "properties.containerService",
                    type: {
                        name: "Composite",
                        className: "AcsClusterProperties"
                    }
                }, appInsights: {
                    serializedName: "properties.appInsights",
                    type: {
                        name: "Composite",
                        className: "AppInsightsProperties"
                    }
                }, globalServiceConfiguration: {
                    serializedName: "properties.globalServiceConfiguration",
                    type: {
                        name: "Composite",
                        className: "GlobalServiceConfiguration",
                        additionalProperties: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                } })
        }
    };
    var OperationalizationClusterUpdateParameters = {
        serializedName: "OperationalizationClusterUpdateParameters",
        type: {
            name: "Composite",
            className: "OperationalizationClusterUpdateParameters",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageAccountCredentials = {
        serializedName: "StorageAccountCredentials",
        type: {
            name: "Composite",
            className: "StorageAccountCredentials",
            modelProperties: {
                resourceId: {
                    readOnly: true,
                    serializedName: "resourceId",
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    readOnly: true,
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    readOnly: true,
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerRegistryCredentials = {
        serializedName: "ContainerRegistryCredentials",
        type: {
            name: "Composite",
            className: "ContainerRegistryCredentials",
            modelProperties: {
                loginServer: {
                    readOnly: true,
                    serializedName: "loginServer",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    readOnly: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                password2: {
                    readOnly: true,
                    serializedName: "password2",
                    type: {
                        name: "String"
                    }
                },
                username: {
                    readOnly: true,
                    serializedName: "username",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ContainerServiceCredentials = {
        serializedName: "ContainerServiceCredentials",
        type: {
            name: "Composite",
            className: "ContainerServiceCredentials",
            modelProperties: {
                acsKubeConfig: {
                    readOnly: true,
                    serializedName: "acsKubeConfig",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalConfiguration: {
                    readOnly: true,
                    serializedName: "servicePrincipalConfiguration",
                    type: {
                        name: "Composite",
                        className: "ServicePrincipalProperties"
                    }
                },
                imagePullSecretName: {
                    readOnly: true,
                    serializedName: "imagePullSecretName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AppInsightsCredentials = {
        serializedName: "AppInsightsCredentials",
        type: {
            name: "Composite",
            className: "AppInsightsCredentials",
            modelProperties: {
                appId: {
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                },
                instrumentationKey: {
                    serializedName: "instrumentationKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationalizationClusterCredentials = {
        serializedName: "OperationalizationClusterCredentials",
        type: {
            name: "Composite",
            className: "OperationalizationClusterCredentials",
            modelProperties: {
                storageAccount: {
                    serializedName: "storageAccount",
                    type: {
                        name: "Composite",
                        className: "StorageAccountCredentials"
                    }
                },
                containerRegistry: {
                    serializedName: "containerRegistry",
                    type: {
                        name: "Composite",
                        className: "ContainerRegistryCredentials"
                    }
                },
                containerService: {
                    serializedName: "containerService",
                    type: {
                        name: "Composite",
                        className: "ContainerServiceCredentials"
                    }
                },
                appInsights: {
                    serializedName: "appInsights",
                    type: {
                        name: "Composite",
                        className: "AppInsightsCredentials"
                    }
                },
                serviceAuthConfiguration: {
                    serializedName: "serviceAuthConfiguration",
                    type: {
                        name: "Composite",
                        className: "ServiceAuthConfiguration"
                    }
                },
                sslConfiguration: {
                    serializedName: "sslConfiguration",
                    type: {
                        name: "Composite",
                        className: "SslConfiguration"
                    }
                }
            }
        }
    };
    var CheckSystemServicesUpdatesAvailableResponse = {
        serializedName: "CheckSystemServicesUpdatesAvailableResponse",
        type: {
            name: "Composite",
            className: "CheckSystemServicesUpdatesAvailableResponse",
            modelProperties: {
                updatesAvailable: {
                    readOnly: true,
                    serializedName: "updatesAvailable",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UpdateSystemServicesResponse = {
        serializedName: "UpdateSystemServicesResponse",
        type: {
            name: "Composite",
            className: "UpdateSystemServicesResponse",
            modelProperties: {
                updateStatus: {
                    readOnly: true,
                    serializedName: "updateStatus",
                    type: {
                        name: "String"
                    }
                },
                updateStartedOn: {
                    readOnly: true,
                    serializedName: "updateStartedOn",
                    type: {
                        name: "DateTime"
                    }
                },
                updateCompletedOn: {
                    readOnly: true,
                    serializedName: "updateCompletedOn",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ResourceOperationDisplay = {
        serializedName: "ResourceOperation_display",
        type: {
            name: "Composite",
            className: "ResourceOperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ResourceOperation = {
        serializedName: "ResourceOperation",
        type: {
            name: "Composite",
            className: "ResourceOperation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "ResourceOperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AvailableOperations = {
        serializedName: "AvailableOperations",
        type: {
            name: "Composite",
            className: "AvailableOperations",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceOperation"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationalizationClustersDeleteHeaders = {
        serializedName: "operationalizationclusters-delete-headers",
        type: {
            name: "Composite",
            className: "OperationalizationClustersDeleteHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationalizationClustersUpdateSystemServicesHeaders = {
        serializedName: "operationalizationclusters-updatesystemservices-headers",
        type: {
            name: "Composite",
            className: "OperationalizationClustersUpdateSystemServicesHeaders",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PaginatedOperationalizationClustersList = {
        serializedName: "PaginatedOperationalizationClustersList",
        type: {
            name: "Composite",
            className: "PaginatedOperationalizationClustersList",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationalizationCluster"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Resource: Resource,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        ErrorResponseWrapper: ErrorResponseWrapper,
        StorageAccountProperties: StorageAccountProperties,
        ContainerRegistryProperties: ContainerRegistryProperties,
        ServicePrincipalProperties: ServicePrincipalProperties,
        KubernetesClusterProperties: KubernetesClusterProperties,
        SystemService: SystemService,
        AcsClusterProperties: AcsClusterProperties,
        AppInsightsProperties: AppInsightsProperties,
        SslConfiguration: SslConfiguration,
        ServiceAuthConfiguration: ServiceAuthConfiguration,
        AutoScaleConfiguration: AutoScaleConfiguration,
        GlobalServiceConfiguration: GlobalServiceConfiguration,
        OperationalizationCluster: OperationalizationCluster,
        OperationalizationClusterUpdateParameters: OperationalizationClusterUpdateParameters,
        StorageAccountCredentials: StorageAccountCredentials,
        ContainerRegistryCredentials: ContainerRegistryCredentials,
        ContainerServiceCredentials: ContainerServiceCredentials,
        AppInsightsCredentials: AppInsightsCredentials,
        OperationalizationClusterCredentials: OperationalizationClusterCredentials,
        CheckSystemServicesUpdatesAvailableResponse: CheckSystemServicesUpdatesAvailableResponse,
        UpdateSystemServicesResponse: UpdateSystemServicesResponse,
        ResourceOperationDisplay: ResourceOperationDisplay,
        ResourceOperation: ResourceOperation,
        AvailableOperations: AvailableOperations,
        OperationalizationClustersDeleteHeaders: OperationalizationClustersDeleteHeaders,
        OperationalizationClustersUpdateSystemServicesHeaders: OperationalizationClustersUpdateSystemServicesHeaders,
        PaginatedOperationalizationClustersList: PaginatedOperationalizationClustersList
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AcsClusterProperties: AcsClusterProperties,
        AppInsightsCredentials: AppInsightsCredentials,
        AppInsightsProperties: AppInsightsProperties,
        AutoScaleConfiguration: AutoScaleConfiguration,
        BaseResource: BaseResource,
        CheckSystemServicesUpdatesAvailableResponse: CheckSystemServicesUpdatesAvailableResponse,
        CloudError: CloudError,
        ContainerRegistryCredentials: ContainerRegistryCredentials,
        ContainerRegistryProperties: ContainerRegistryProperties,
        ContainerServiceCredentials: ContainerServiceCredentials,
        ErrorDetail: ErrorDetail,
        ErrorResponse: ErrorResponse,
        ErrorResponseWrapper: ErrorResponseWrapper,
        GlobalServiceConfiguration: GlobalServiceConfiguration,
        KubernetesClusterProperties: KubernetesClusterProperties,
        OperationalizationCluster: OperationalizationCluster,
        OperationalizationClusterCredentials: OperationalizationClusterCredentials,
        OperationalizationClustersDeleteHeaders: OperationalizationClustersDeleteHeaders,
        OperationalizationClustersUpdateSystemServicesHeaders: OperationalizationClustersUpdateSystemServicesHeaders,
        OperationalizationClusterUpdateParameters: OperationalizationClusterUpdateParameters,
        PaginatedOperationalizationClustersList: PaginatedOperationalizationClustersList,
        Resource: Resource,
        ServiceAuthConfiguration: ServiceAuthConfiguration,
        ServicePrincipalProperties: ServicePrincipalProperties,
        SslConfiguration: SslConfiguration,
        StorageAccountCredentials: StorageAccountCredentials,
        StorageAccountProperties: StorageAccountProperties,
        SystemService: SystemService,
        UpdateSystemServicesResponse: UpdateSystemServicesResponse
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var clusterName = {
        parameterPath: "clusterName",
        mapper: {
            required: true,
            serializedName: "clusterName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[a-zA-Z][-\w\._\(\)]+[a-zA-Z0-9]$/
            },
            type: {
                name: "String"
            }
        }
    };
    var deleteAll = {
        parameterPath: [
            "options",
            "deleteAll"
        ],
        mapper: {
            serializedName: "deleteAll",
            type: {
                name: "Boolean"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var skiptoken = {
        parameterPath: [
            "options",
            "skiptoken"
        ],
        mapper: {
            serializedName: "$skiptoken",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a OperationalizationClusters. */
    var OperationalizationClusters = /** @class */ (function () {
        /**
         * Create a OperationalizationClusters.
         * @param {MachineLearningComputeManagementClientContext} client Reference to the service client.
         */
        function OperationalizationClusters(client) {
            this.client = client;
        }
        /**
         * Create or update an operationalization cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param parameters Parameters supplied to create or update an Operationalization cluster.
         * @param [options] The optional parameters
         * @returns Promise<Models.OperationalizationClustersCreateOrUpdateResponse>
         */
        OperationalizationClusters.prototype.createOrUpdate = function (resourceGroupName, clusterName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        OperationalizationClusters.prototype.get = function (resourceGroupName, clusterName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                clusterName: clusterName,
                options: options
            }, getOperationSpec, callback);
        };
        OperationalizationClusters.prototype.update = function (resourceGroupName, clusterName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                clusterName: clusterName,
                parameters: parameters,
                options: options
            }, updateOperationSpec, callback);
        };
        /**
         * Deletes the specified cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<Models.OperationalizationClustersDeleteResponse>
         */
        OperationalizationClusters.prototype.deleteMethod = function (resourceGroupName, clusterName, options) {
            return this.beginDeleteMethod(resourceGroupName, clusterName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        OperationalizationClusters.prototype.listKeys = function (resourceGroupName, clusterName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                clusterName: clusterName,
                options: options
            }, listKeysOperationSpec, callback);
        };
        OperationalizationClusters.prototype.checkSystemServicesUpdatesAvailable = function (resourceGroupName, clusterName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                clusterName: clusterName,
                options: options
            }, checkSystemServicesUpdatesAvailableOperationSpec, callback);
        };
        /**
         * Updates system services in a cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<Models.OperationalizationClustersUpdateSystemServicesResponse>
         */
        OperationalizationClusters.prototype.updateSystemServices = function (resourceGroupName, clusterName, options) {
            return this.beginUpdateSystemServices(resourceGroupName, clusterName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        OperationalizationClusters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        OperationalizationClusters.prototype.listBySubscriptionId = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listBySubscriptionIdOperationSpec, callback);
        };
        /**
         * Create or update an operationalization cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param parameters Parameters supplied to create or update an Operationalization cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OperationalizationClusters.prototype.beginCreateOrUpdate = function (resourceGroupName, clusterName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                clusterName: clusterName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes the specified cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OperationalizationClusters.prototype.beginDeleteMethod = function (resourceGroupName, clusterName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                clusterName: clusterName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        /**
         * Updates system services in a cluster.
         * @param resourceGroupName Name of the resource group in which the cluster is located.
         * @param clusterName The name of the cluster.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        OperationalizationClusters.prototype.beginUpdateSystemServices = function (resourceGroupName, clusterName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                clusterName: clusterName,
                options: options
            }, beginUpdateSystemServicesOperationSpec, options);
        };
        OperationalizationClusters.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        OperationalizationClusters.prototype.listBySubscriptionIdNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySubscriptionIdNextOperationSpec, callback);
        };
        return OperationalizationClusters;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationalizationCluster
            },
            default: {
                bodyMapper: ErrorResponseWrapper
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, OperationalizationClusterUpdateParameters), { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationalizationCluster
            },
            default: {
                bodyMapper: ErrorResponseWrapper
            }
        },
        serializer: serializer
    };
    var listKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/listKeys",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationalizationClusterCredentials
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var checkSystemServicesUpdatesAvailableOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/checkSystemServicesUpdatesAvailable",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: CheckSystemServicesUpdatesAvailableResponse
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionIdOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, OperationalizationCluster), { required: true })
        },
        responses: {
            200: {
                bodyMapper: OperationalizationCluster
            },
            201: {
                bodyMapper: OperationalizationCluster
            },
            default: {
                bodyMapper: ErrorResponseWrapper
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion,
            deleteAll
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            202: {
                headersMapper: OperationalizationClustersDeleteHeaders
            },
            204: {
                headersMapper: OperationalizationClustersDeleteHeaders
            },
            default: {
                bodyMapper: ErrorResponseWrapper,
                headersMapper: OperationalizationClustersDeleteHeaders
            }
        },
        serializer: serializer
    };
    var beginUpdateSystemServicesOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            clusterName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: UpdateSystemServicesResponse,
                headersMapper: OperationalizationClustersUpdateSystemServicesHeaders
            },
            202: {
                headersMapper: OperationalizationClustersUpdateSystemServicesHeaders
            },
            default: {
                bodyMapper: CloudError,
                headersMapper: OperationalizationClustersUpdateSystemServicesHeaders
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listBySubscriptionIdNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        queryParameters: [
            apiVersion,
            skiptoken
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: PaginatedOperationalizationClustersList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AvailableOperations: AvailableOperations,
        CloudError: CloudError,
        ResourceOperation: ResourceOperation,
        ResourceOperationDisplay: ResourceOperationDisplay
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a MachineLearningCompute. */
    var MachineLearningCompute = /** @class */ (function () {
        /**
         * Create a MachineLearningCompute.
         * @param {MachineLearningComputeManagementClientContext} client Reference to the service client.
         */
        function MachineLearningCompute(client) {
            this.client = client;
        }
        MachineLearningCompute.prototype.listAvailableOperations = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listAvailableOperationsOperationSpec, callback);
        };
        return MachineLearningCompute;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listAvailableOperationsOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.MachineLearningCompute/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailableOperations
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-machinelearningcompute";
    var packageVersion = "2.1.1";
    var MachineLearningComputeManagementClientContext = /** @class */ (function (_super) {
        __extends(MachineLearningComputeManagementClientContext, _super);
        /**
         * Initializes a new instance of the MachineLearningComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The Azure subscription ID.
         * @param [options] The parameter options
         */
        function MachineLearningComputeManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-08-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return MachineLearningComputeManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var MachineLearningComputeManagementClient = /** @class */ (function (_super) {
        __extends(MachineLearningComputeManagementClient, _super);
        /**
         * Initializes a new instance of the MachineLearningComputeManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId The Azure subscription ID.
         * @param [options] The parameter options
         */
        function MachineLearningComputeManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operationalizationClusters = new OperationalizationClusters(_this);
            _this.machineLearningCompute = new MachineLearningCompute(_this);
            return _this;
        }
        return MachineLearningComputeManagementClient;
    }(MachineLearningComputeManagementClientContext));

    exports.MachineLearningCompute = MachineLearningCompute;
    exports.MachineLearningComputeManagementClient = MachineLearningComputeManagementClient;
    exports.MachineLearningComputeManagementClientContext = MachineLearningComputeManagementClientContext;
    exports.MachineLearningComputeManagementMappers = mappers;
    exports.MachineLearningComputeManagementModels = index;
    exports.OperationalizationClusters = OperationalizationClusters;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-machinelearningcompute.js.map
