'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Provisioning */
    KnownProvisioningState["Provisioning"] = "Provisioning";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link ArcSettingAggregateState} that the service accepts. */
exports.KnownArcSettingAggregateState = void 0;
(function (KnownArcSettingAggregateState) {
    /** NotSpecified */
    KnownArcSettingAggregateState["NotSpecified"] = "NotSpecified";
    /** Error */
    KnownArcSettingAggregateState["Error"] = "Error";
    /** Succeeded */
    KnownArcSettingAggregateState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownArcSettingAggregateState["Canceled"] = "Canceled";
    /** Failed */
    KnownArcSettingAggregateState["Failed"] = "Failed";
    /** Connected */
    KnownArcSettingAggregateState["Connected"] = "Connected";
    /** Disconnected */
    KnownArcSettingAggregateState["Disconnected"] = "Disconnected";
    /** Deleted */
    KnownArcSettingAggregateState["Deleted"] = "Deleted";
    /** Creating */
    KnownArcSettingAggregateState["Creating"] = "Creating";
    /** Updating */
    KnownArcSettingAggregateState["Updating"] = "Updating";
    /** Deleting */
    KnownArcSettingAggregateState["Deleting"] = "Deleting";
    /** Moving */
    KnownArcSettingAggregateState["Moving"] = "Moving";
    /** PartiallySucceeded */
    KnownArcSettingAggregateState["PartiallySucceeded"] = "PartiallySucceeded";
    /** PartiallyConnected */
    KnownArcSettingAggregateState["PartiallyConnected"] = "PartiallyConnected";
    /** InProgress */
    KnownArcSettingAggregateState["InProgress"] = "InProgress";
})(exports.KnownArcSettingAggregateState || (exports.KnownArcSettingAggregateState = {}));
/** Known values of {@link NodeArcState} that the service accepts. */
exports.KnownNodeArcState = void 0;
(function (KnownNodeArcState) {
    /** NotSpecified */
    KnownNodeArcState["NotSpecified"] = "NotSpecified";
    /** Error */
    KnownNodeArcState["Error"] = "Error";
    /** Succeeded */
    KnownNodeArcState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownNodeArcState["Canceled"] = "Canceled";
    /** Failed */
    KnownNodeArcState["Failed"] = "Failed";
    /** Connected */
    KnownNodeArcState["Connected"] = "Connected";
    /** Disconnected */
    KnownNodeArcState["Disconnected"] = "Disconnected";
    /** Deleted */
    KnownNodeArcState["Deleted"] = "Deleted";
    /** Creating */
    KnownNodeArcState["Creating"] = "Creating";
    /** Updating */
    KnownNodeArcState["Updating"] = "Updating";
    /** Deleting */
    KnownNodeArcState["Deleting"] = "Deleting";
    /** Moving */
    KnownNodeArcState["Moving"] = "Moving";
})(exports.KnownNodeArcState || (exports.KnownNodeArcState = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** NotYetRegistered */
    KnownStatus["NotYetRegistered"] = "NotYetRegistered";
    /** ConnectedRecently */
    KnownStatus["ConnectedRecently"] = "ConnectedRecently";
    /** NotConnectedRecently */
    KnownStatus["NotConnectedRecently"] = "NotConnectedRecently";
    /** Disconnected */
    KnownStatus["Disconnected"] = "Disconnected";
    /** Error */
    KnownStatus["Error"] = "Error";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link WindowsServerSubscription} that the service accepts. */
exports.KnownWindowsServerSubscription = void 0;
(function (KnownWindowsServerSubscription) {
    /** Disabled */
    KnownWindowsServerSubscription["Disabled"] = "Disabled";
    /** Enabled */
    KnownWindowsServerSubscription["Enabled"] = "Enabled";
})(exports.KnownWindowsServerSubscription || (exports.KnownWindowsServerSubscription = {}));
/** Known values of {@link DiagnosticLevel} that the service accepts. */
exports.KnownDiagnosticLevel = void 0;
(function (KnownDiagnosticLevel) {
    /** Off */
    KnownDiagnosticLevel["Off"] = "Off";
    /** Basic */
    KnownDiagnosticLevel["Basic"] = "Basic";
    /** Enhanced */
    KnownDiagnosticLevel["Enhanced"] = "Enhanced";
})(exports.KnownDiagnosticLevel || (exports.KnownDiagnosticLevel = {}));
/** Known values of {@link ImdsAttestation} that the service accepts. */
exports.KnownImdsAttestation = void 0;
(function (KnownImdsAttestation) {
    /** Disabled */
    KnownImdsAttestation["Disabled"] = "Disabled";
    /** Enabled */
    KnownImdsAttestation["Enabled"] = "Enabled";
})(exports.KnownImdsAttestation || (exports.KnownImdsAttestation = {}));
/** Known values of {@link ExtensionAggregateState} that the service accepts. */
exports.KnownExtensionAggregateState = void 0;
(function (KnownExtensionAggregateState) {
    /** NotSpecified */
    KnownExtensionAggregateState["NotSpecified"] = "NotSpecified";
    /** Error */
    KnownExtensionAggregateState["Error"] = "Error";
    /** Succeeded */
    KnownExtensionAggregateState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownExtensionAggregateState["Canceled"] = "Canceled";
    /** Failed */
    KnownExtensionAggregateState["Failed"] = "Failed";
    /** Connected */
    KnownExtensionAggregateState["Connected"] = "Connected";
    /** Disconnected */
    KnownExtensionAggregateState["Disconnected"] = "Disconnected";
    /** Deleted */
    KnownExtensionAggregateState["Deleted"] = "Deleted";
    /** Creating */
    KnownExtensionAggregateState["Creating"] = "Creating";
    /** Updating */
    KnownExtensionAggregateState["Updating"] = "Updating";
    /** Deleting */
    KnownExtensionAggregateState["Deleting"] = "Deleting";
    /** Moving */
    KnownExtensionAggregateState["Moving"] = "Moving";
    /** PartiallySucceeded */
    KnownExtensionAggregateState["PartiallySucceeded"] = "PartiallySucceeded";
    /** PartiallyConnected */
    KnownExtensionAggregateState["PartiallyConnected"] = "PartiallyConnected";
    /** InProgress */
    KnownExtensionAggregateState["InProgress"] = "InProgress";
})(exports.KnownExtensionAggregateState || (exports.KnownExtensionAggregateState = {}));
/** Known values of {@link NodeExtensionState} that the service accepts. */
exports.KnownNodeExtensionState = void 0;
(function (KnownNodeExtensionState) {
    /** NotSpecified */
    KnownNodeExtensionState["NotSpecified"] = "NotSpecified";
    /** Error */
    KnownNodeExtensionState["Error"] = "Error";
    /** Succeeded */
    KnownNodeExtensionState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownNodeExtensionState["Canceled"] = "Canceled";
    /** Failed */
    KnownNodeExtensionState["Failed"] = "Failed";
    /** Connected */
    KnownNodeExtensionState["Connected"] = "Connected";
    /** Disconnected */
    KnownNodeExtensionState["Disconnected"] = "Disconnected";
    /** Deleted */
    KnownNodeExtensionState["Deleted"] = "Deleted";
    /** Creating */
    KnownNodeExtensionState["Creating"] = "Creating";
    /** Updating */
    KnownNodeExtensionState["Updating"] = "Updating";
    /** Deleting */
    KnownNodeExtensionState["Deleting"] = "Deleting";
    /** Moving */
    KnownNodeExtensionState["Moving"] = "Moving";
})(exports.KnownNodeExtensionState || (exports.KnownNodeExtensionState = {}));
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** User */
    KnownOrigin["User"] = "user";
    /** System */
    KnownOrigin["System"] = "system";
    /** UserSystem */
    KnownOrigin["UserSystem"] = "user,system";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link ActionType} that the service accepts. */
exports.KnownActionType = void 0;
(function (KnownActionType) {
    /** Internal */
    KnownActionType["Internal"] = "Internal";
})(exports.KnownActionType || (exports.KnownActionType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ArcSettingList = {
    type: {
        name: "Composite",
        className: "ArcSettingList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArcSetting"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PerNodeState = {
    type: {
        name: "Composite",
        className: "PerNodeState",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            arcInstance: {
                serializedName: "arcInstance",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ArcSettingsPatch = {
    type: {
        name: "Composite",
        className: "ArcSettingsPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            connectivityProperties: {
                serializedName: "properties.connectivityProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const PasswordCredential = {
    type: {
        name: "Composite",
        className: "PasswordCredential",
        modelProperties: {
            secretText: {
                serializedName: "secretText",
                type: {
                    name: "String"
                }
            },
            keyId: {
                serializedName: "keyId",
                type: {
                    name: "String"
                }
            },
            startDateTime: {
                serializedName: "startDateTime",
                type: {
                    name: "DateTime"
                }
            },
            endDateTime: {
                serializedName: "endDateTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ArcIdentityResponse = {
    type: {
        name: "Composite",
        className: "ArcIdentityResponse",
        modelProperties: {
            arcApplicationClientId: {
                serializedName: "properties.arcApplicationClientId",
                type: {
                    name: "String"
                }
            },
            arcApplicationTenantId: {
                serializedName: "properties.arcApplicationTenantId",
                type: {
                    name: "String"
                }
            },
            arcServicePrincipalObjectId: {
                serializedName: "properties.arcServicePrincipalObjectId",
                type: {
                    name: "String"
                }
            },
            arcApplicationObjectId: {
                serializedName: "properties.arcApplicationObjectId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterList = {
    type: {
        name: "Composite",
        className: "ClusterList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Cluster"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterDesiredProperties = {
    type: {
        name: "Composite",
        className: "ClusterDesiredProperties",
        modelProperties: {
            windowsServerSubscription: {
                serializedName: "windowsServerSubscription",
                type: {
                    name: "String"
                }
            },
            diagnosticLevel: {
                serializedName: "diagnosticLevel",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterReportedProperties = {
    type: {
        name: "Composite",
        className: "ClusterReportedProperties",
        modelProperties: {
            clusterName: {
                serializedName: "clusterName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clusterId: {
                serializedName: "clusterId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clusterVersion: {
                serializedName: "clusterVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            nodes: {
                serializedName: "nodes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClusterNode"
                        }
                    }
                }
            },
            lastUpdated: {
                serializedName: "lastUpdated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            imdsAttestation: {
                serializedName: "imdsAttestation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            diagnosticLevel: {
                serializedName: "diagnosticLevel",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterNode = {
    type: {
        name: "Composite",
        className: "ClusterNode",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            windowsServerSubscription: {
                serializedName: "windowsServerSubscription",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            manufacturer: {
                serializedName: "manufacturer",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            model: {
                serializedName: "model",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            osName: {
                serializedName: "osName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            osVersion: {
                serializedName: "osVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serialNumber: {
                serializedName: "serialNumber",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            coreCount: {
                serializedName: "coreCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            memoryInGiB: {
                serializedName: "memoryInGiB",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ClusterPatch = {
    type: {
        name: "Composite",
        className: "ClusterPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            cloudManagementEndpoint: {
                serializedName: "properties.cloudManagementEndpoint",
                type: {
                    name: "String"
                }
            },
            aadClientId: {
                serializedName: "properties.aadClientId",
                type: {
                    name: "String"
                }
            },
            aadTenantId: {
                serializedName: "properties.aadTenantId",
                type: {
                    name: "String"
                }
            },
            desiredProperties: {
                serializedName: "properties.desiredProperties",
                type: {
                    name: "Composite",
                    className: "ClusterDesiredProperties"
                }
            }
        }
    }
};
const UploadCertificateRequest = {
    type: {
        name: "Composite",
        className: "UploadCertificateRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RawCertificateData"
                }
            }
        }
    }
};
const RawCertificateData = {
    type: {
        name: "Composite",
        className: "RawCertificateData",
        modelProperties: {
            certificates: {
                serializedName: "certificates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ClusterIdentityResponse = {
    type: {
        name: "Composite",
        className: "ClusterIdentityResponse",
        modelProperties: {
            aadClientId: {
                serializedName: "properties.aadClientId",
                type: {
                    name: "String"
                }
            },
            aadTenantId: {
                serializedName: "properties.aadTenantId",
                type: {
                    name: "String"
                }
            },
            aadServicePrincipalObjectId: {
                serializedName: "properties.aadServicePrincipalObjectId",
                type: {
                    name: "String"
                }
            },
            aadApplicationObjectId: {
                serializedName: "properties.aadApplicationObjectId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExtensionList = {
    type: {
        name: "Composite",
        className: "ExtensionList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Extension"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PerNodeExtensionState = {
    type: {
        name: "Composite",
        className: "PerNodeExtensionState",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            extension: {
                serializedName: "extension",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionType: {
                serializedName: "actionType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ArcConnectivityProperties = {
    type: {
        name: "Composite",
        className: "ArcConnectivityProperties",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ArcSetting = {
    type: {
        name: "Composite",
        className: "ArcSetting",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, arcInstanceResourceGroup: {
                serializedName: "properties.arcInstanceResourceGroup",
                type: {
                    name: "String"
                }
            }, arcApplicationClientId: {
                serializedName: "properties.arcApplicationClientId",
                type: {
                    name: "String"
                }
            }, arcApplicationTenantId: {
                serializedName: "properties.arcApplicationTenantId",
                type: {
                    name: "String"
                }
            }, arcServicePrincipalObjectId: {
                serializedName: "properties.arcServicePrincipalObjectId",
                type: {
                    name: "String"
                }
            }, arcApplicationObjectId: {
                serializedName: "properties.arcApplicationObjectId",
                type: {
                    name: "String"
                }
            }, aggregateState: {
                serializedName: "properties.aggregateState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, perNodeDetails: {
                serializedName: "properties.perNodeDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PerNodeState"
                        }
                    }
                }
            }, connectivityProperties: {
                serializedName: "properties.connectivityProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, createdBy: {
                serializedName: "systemData.createdBy",
                type: {
                    name: "String"
                }
            }, createdByType: {
                serializedName: "systemData.createdByType",
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "systemData.createdAt",
                type: {
                    name: "DateTime"
                }
            }, lastModifiedBy: {
                serializedName: "systemData.lastModifiedBy",
                type: {
                    name: "String"
                }
            }, lastModifiedByType: {
                serializedName: "systemData.lastModifiedByType",
                type: {
                    name: "String"
                }
            }, lastModifiedAt: {
                serializedName: "systemData.lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const Extension = {
    type: {
        name: "Composite",
        className: "Extension",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, aggregateState: {
                serializedName: "properties.aggregateState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, perNodeExtensionDetails: {
                serializedName: "properties.perNodeExtensionDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PerNodeExtensionState"
                        }
                    }
                }
            }, forceUpdateTag: {
                serializedName: "properties.extensionParameters.forceUpdateTag",
                type: {
                    name: "String"
                }
            }, publisher: {
                serializedName: "properties.extensionParameters.publisher",
                type: {
                    name: "String"
                }
            }, typePropertiesExtensionParametersType: {
                serializedName: "properties.extensionParameters.type",
                type: {
                    name: "String"
                }
            }, typeHandlerVersion: {
                serializedName: "properties.extensionParameters.typeHandlerVersion",
                type: {
                    name: "String"
                }
            }, autoUpgradeMinorVersion: {
                serializedName: "properties.extensionParameters.autoUpgradeMinorVersion",
                type: {
                    name: "Boolean"
                }
            }, settings: {
                serializedName: "properties.extensionParameters.settings",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, protectedSettings: {
                serializedName: "properties.extensionParameters.protectedSettings",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, createdBy: {
                serializedName: "systemData.createdBy",
                type: {
                    name: "String"
                }
            }, createdByType: {
                serializedName: "systemData.createdByType",
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "systemData.createdAt",
                type: {
                    name: "DateTime"
                }
            }, lastModifiedBy: {
                serializedName: "systemData.lastModifiedBy",
                type: {
                    name: "String"
                }
            }, lastModifiedByType: {
                serializedName: "systemData.lastModifiedByType",
                type: {
                    name: "String"
                }
            }, lastModifiedAt: {
                serializedName: "systemData.lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const Cluster = {
    type: {
        name: "Composite",
        className: "Cluster",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, cloudId: {
                serializedName: "properties.cloudId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, cloudManagementEndpoint: {
                serializedName: "properties.cloudManagementEndpoint",
                type: {
                    name: "String"
                }
            }, aadClientId: {
                serializedName: "properties.aadClientId",
                type: {
                    name: "String"
                }
            }, aadTenantId: {
                serializedName: "properties.aadTenantId",
                type: {
                    name: "String"
                }
            }, aadApplicationObjectId: {
                serializedName: "properties.aadApplicationObjectId",
                type: {
                    name: "String"
                }
            }, aadServicePrincipalObjectId: {
                serializedName: "properties.aadServicePrincipalObjectId",
                type: {
                    name: "String"
                }
            }, desiredProperties: {
                serializedName: "properties.desiredProperties",
                type: {
                    name: "Composite",
                    className: "ClusterDesiredProperties"
                }
            }, reportedProperties: {
                serializedName: "properties.reportedProperties",
                type: {
                    name: "Composite",
                    className: "ClusterReportedProperties"
                }
            }, trialDaysRemaining: {
                serializedName: "properties.trialDaysRemaining",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, billingModel: {
                serializedName: "properties.billingModel",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, registrationTimestamp: {
                serializedName: "properties.registrationTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastSyncTimestamp: {
                serializedName: "properties.lastSyncTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, lastBillingTimestamp: {
                serializedName: "properties.lastBillingTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, serviceEndpoint: {
                serializedName: "properties.serviceEndpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdBy: {
                serializedName: "systemData.createdBy",
                type: {
                    name: "String"
                }
            }, createdByType: {
                serializedName: "systemData.createdByType",
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "systemData.createdAt",
                type: {
                    name: "DateTime"
                }
            }, lastModifiedBy: {
                serializedName: "systemData.lastModifiedBy",
                type: {
                    name: "String"
                }
            }, lastModifiedByType: {
                serializedName: "systemData.lastModifiedByType",
                type: {
                    name: "String"
                }
            }, lastModifiedAt: {
                serializedName: "systemData.lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ArcSettingList: ArcSettingList,
    PerNodeState: PerNodeState,
    Resource: Resource,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ArcSettingsPatch: ArcSettingsPatch,
    PasswordCredential: PasswordCredential,
    ArcIdentityResponse: ArcIdentityResponse,
    ClusterList: ClusterList,
    ClusterDesiredProperties: ClusterDesiredProperties,
    ClusterReportedProperties: ClusterReportedProperties,
    ClusterNode: ClusterNode,
    ClusterPatch: ClusterPatch,
    UploadCertificateRequest: UploadCertificateRequest,
    RawCertificateData: RawCertificateData,
    ClusterIdentityResponse: ClusterIdentityResponse,
    ExtensionList: ExtensionList,
    PerNodeExtensionState: PerNodeExtensionState,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ArcConnectivityProperties: ArcConnectivityProperties,
    ProxyResource: ProxyResource,
    TrackedResource: TrackedResource,
    ArcSetting: ArcSetting,
    Extension: Extension,
    Cluster: Cluster
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const arcSettingName = {
    parameterPath: "arcSettingName",
    mapper: {
        serializedName: "arcSettingName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const arcSetting = {
    parameterPath: "arcSetting",
    mapper: ArcSetting
};
const arcSetting1 = {
    parameterPath: "arcSetting",
    mapper: ArcSettingsPatch
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const cluster = {
    parameterPath: "cluster",
    mapper: Cluster
};
const cluster1 = {
    parameterPath: "cluster",
    mapper: ClusterPatch
};
const uploadCertificateRequest = {
    parameterPath: "uploadCertificateRequest",
    mapper: UploadCertificateRequest
};
const extensionName = {
    parameterPath: "extensionName",
    mapper: {
        serializedName: "extensionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const extension = {
    parameterPath: "extension",
    mapper: Extension
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ArcSettings operations. */
class ArcSettingsImpl {
    /**
     * Initialize a new instance of the class ArcSettings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get ArcSetting resources of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    listByCluster(resourceGroupName, clusterName, options) {
        const iter = this.listByClusterPagingAll(resourceGroupName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByClusterPagingPage(resourceGroupName, clusterName, options, settings);
            }
        };
    }
    listByClusterPagingPage(resourceGroupName, clusterName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByCluster(resourceGroupName, clusterName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByClusterNext(resourceGroupName, clusterName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByClusterPagingAll(resourceGroupName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByClusterPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByClusterPagingPage(resourceGroupName, clusterName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get ArcSetting resources of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    _listByCluster(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listByClusterOperationSpec);
    }
    /**
     * Get ArcSetting resource details of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, arcSettingName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, arcSettingName, options }, getOperationSpec$2);
    }
    /**
     * Create ArcSetting for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param arcSetting Parameters supplied to the Create ArcSetting resource for this HCI cluster.
     * @param options The options parameters.
     */
    create(resourceGroupName, clusterName, arcSettingName, arcSetting, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, arcSettingName, arcSetting, options }, createOperationSpec$2);
    }
    /**
     * Update ArcSettings for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param arcSetting ArcSettings parameters that needs to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName, clusterName, arcSettingName, arcSetting, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, arcSettingName, arcSetting, options }, updateOperationSpec$2);
    }
    /**
     * Delete ArcSetting resource details of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, arcSettingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, arcSettingName, options }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete ArcSetting resource details of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, arcSettingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, arcSettingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Generate password for arc settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    generatePassword(resourceGroupName, clusterName, arcSettingName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, arcSettingName, options }, generatePasswordOperationSpec);
    }
    /**
     * Create Aad identity for arc settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginCreateIdentity(resourceGroupName, clusterName, arcSettingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, arcSettingName, options }, createIdentityOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create Aad identity for arc settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginCreateIdentityAndWait(resourceGroupName, clusterName, arcSettingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateIdentity(resourceGroupName, clusterName, arcSettingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByClusterNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param nextLink The nextLink from the previous successful call to the ListByCluster method.
     * @param options The options parameters.
     */
    _listByClusterNext(resourceGroupName, clusterName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, nextLink, options }, listByClusterNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByClusterOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArcSettingList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArcSetting
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ArcSetting
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: arcSetting,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ArcSetting
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: arcSetting1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const generatePasswordOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/generatePassword",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: PasswordCredential
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createIdentityOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/createArcIdentity",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ArcIdentityResponse
        },
        201: {
            bodyMapper: ArcIdentityResponse
        },
        202: {
            bodyMapper: ArcIdentityResponse
        },
        204: {
            bodyMapper: ArcIdentityResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByClusterNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArcSettingList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Clusters operations. */
class ClustersImpl {
    /**
     * Initialize a new instance of the class Clusters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all HCI clusters in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all HCI clusters in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List all HCI clusters in a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * List all HCI clusters in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, getOperationSpec$1);
    }
    /**
     * Create an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster Details of the HCI cluster.
     * @param options The options parameters.
     */
    create(resourceGroupName, clusterName, cluster, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, cluster, options }, createOperationSpec$1);
    }
    /**
     * Update an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster Details of the HCI cluster.
     * @param options The options parameters.
     */
    update(resourceGroupName, clusterName, cluster, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, cluster, options }, updateOperationSpec$1);
    }
    /**
     * Delete an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, options }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Upload certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param uploadCertificateRequest Upload certificate request.
     * @param options The options parameters.
     */
    beginUploadCertificate(resourceGroupName, clusterName, uploadCertificateRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, uploadCertificateRequest, options }, uploadCertificateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Upload certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param uploadCertificateRequest Upload certificate request.
     * @param options The options parameters.
     */
    beginUploadCertificateAndWait(resourceGroupName, clusterName, uploadCertificateRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUploadCertificate(resourceGroupName, clusterName, uploadCertificateRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Create cluster identity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginCreateIdentity(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, options }, createIdentityOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create cluster identity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginCreateIdentityAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateIdentity(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.AzureStackHCI/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: cluster,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: cluster1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const uploadCertificateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/uploadCertificate",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: uploadCertificateRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const createIdentityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/createClusterIdentity",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ClusterIdentityResponse
        },
        201: {
            bodyMapper: ClusterIdentityResponse
        },
        202: {
            bodyMapper: ClusterIdentityResponse
        },
        204: {
            bodyMapper: ClusterIdentityResponse
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Extensions operations. */
class ExtensionsImpl {
    /**
     * Initialize a new instance of the class Extensions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all Extensions under ArcSetting resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    listByArcSetting(resourceGroupName, clusterName, arcSettingName, options) {
        const iter = this.listByArcSettingPagingAll(resourceGroupName, clusterName, arcSettingName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByArcSettingPagingPage(resourceGroupName, clusterName, arcSettingName, options, settings);
            }
        };
    }
    listByArcSettingPagingPage(resourceGroupName, clusterName, arcSettingName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByArcSettingPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByArcSetting(resourceGroupName, clusterName, arcSettingName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByArcSettingNext(resourceGroupName, clusterName, arcSettingName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByArcSettingPagingAll(resourceGroupName, clusterName, arcSettingName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByArcSettingPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByArcSettingPagingPage(resourceGroupName, clusterName, arcSettingName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all Extensions under ArcSetting resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    _listByArcSetting(resourceGroupName, clusterName, arcSettingName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, arcSettingName, options }, listByArcSettingOperationSpec);
    }
    /**
     * Get particular Arc Extension of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, arcSettingName, extensionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterName,
            arcSettingName,
            extensionName,
            options
        }, getOperationSpec);
    }
    /**
     * Create Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, clusterName, arcSettingName, extensionName, extension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                clusterName,
                arcSettingName,
                extensionName,
                extension,
                options
            }, createOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, clusterName, arcSettingName, extensionName, extension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, clusterName, arcSettingName, extensionName, extension, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, arcSettingName, extensionName, extension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                clusterName,
                arcSettingName,
                extensionName,
                extension,
                options
            }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "original-uri"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, arcSettingName, extensionName, extension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, arcSettingName, extensionName, extension, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete particular Arc Extension of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, arcSettingName, extensionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                clusterName,
                arcSettingName,
                extensionName,
                options
            }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete particular Arc Extension of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, arcSettingName, extensionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, arcSettingName, extensionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByArcSettingNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param nextLink The nextLink from the previous successful call to the ListByArcSetting method.
     * @param options The options parameters.
     */
    _listByArcSettingNext(resourceGroupName, clusterName, arcSettingName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, arcSettingName, nextLink, options }, listByArcSettingNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByArcSettingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExtensionList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Extension
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Extension
        },
        201: {
            bodyMapper: Extension
        },
        202: {
            bodyMapper: Extension
        },
        204: {
            bodyMapper: Extension
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: extension,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Extension
        },
        201: {
            bodyMapper: Extension
        },
        202: {
            bodyMapper: Extension
        },
        204: {
            bodyMapper: Extension
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: extension,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/clusters/{clusterName}/arcSettings/{arcSettingName}/extensions/{extensionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName,
        extensionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByArcSettingNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExtensionList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName,
        arcSettingName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all available Microsoft.AzureStackHCI provider operations
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.AzureStackHCI/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureStackHCIClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureStackHCIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-azurestackhci/3.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-05-01";
        this.arcSettings = new ArcSettingsImpl(this);
        this.clusters = new ClustersImpl(this);
        this.extensions = new ExtensionsImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AzureStackHCIClient = AzureStackHCIClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
