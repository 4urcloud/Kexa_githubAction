import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export declare type ActionType = string;

/** Connectivity related configuration required by arc server. */
export declare interface ArcConnectivityProperties {
    /** True indicates ARC connectivity is enabled */
    enabled?: boolean;
}

/** ArcIdentity details. */
export declare interface ArcIdentityResponse {
    arcApplicationClientId?: string;
    arcApplicationTenantId?: string;
    arcServicePrincipalObjectId?: string;
    arcApplicationObjectId?: string;
}

/** ArcSetting details. */
export declare interface ArcSetting extends ProxyResource {
    /**
     * Provisioning state of the ArcSetting proxy resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The resource group that hosts the Arc agents, ie. Hybrid Compute Machine resources. */
    arcInstanceResourceGroup?: string;
    /** App id of arc AAD identity. */
    arcApplicationClientId?: string;
    /** Tenant id of arc AAD identity. */
    arcApplicationTenantId?: string;
    /** Object id of arc AAD service principal. */
    arcServicePrincipalObjectId?: string;
    /** Object id of arc AAD identity. */
    arcApplicationObjectId?: string;
    /**
     * Aggregate state of Arc agent across the nodes in this HCI cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregateState?: ArcSettingAggregateState;
    /**
     * State of Arc agent in each of the nodes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly perNodeDetails?: PerNodeState[];
    /** contains connectivity related configuration for ARC resources */
    connectivityProperties?: Record<string, unknown>;
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/**
 * Defines values for ArcSettingAggregateState. \
 * {@link KnownArcSettingAggregateState} can be used interchangeably with ArcSettingAggregateState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Error** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **Connected** \
 * **Disconnected** \
 * **Deleted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving** \
 * **PartiallySucceeded** \
 * **PartiallyConnected** \
 * **InProgress**
 */
export declare type ArcSettingAggregateState = string;

/** List of ArcSetting proxy resources for the HCI cluster. */
export declare interface ArcSettingList {
    /**
     * List of ArcSetting proxy resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ArcSetting[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a ArcSettings. */
export declare interface ArcSettings {
    /**
     * Get ArcSetting resources of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    listByCluster(resourceGroupName: string, clusterName: string, options?: ArcSettingsListByClusterOptionalParams): PagedAsyncIterableIterator<ArcSetting>;
    /**
     * Get ArcSetting resource details of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: ArcSettingsGetOptionalParams): Promise<ArcSettingsGetResponse>;
    /**
     * Create ArcSetting for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param arcSetting Parameters supplied to the Create ArcSetting resource for this HCI cluster.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, clusterName: string, arcSettingName: string, arcSetting: ArcSetting, options?: ArcSettingsCreateOptionalParams): Promise<ArcSettingsCreateResponse>;
    /**
     * Update ArcSettings for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param arcSetting ArcSettings parameters that needs to be updated
     * @param options The options parameters.
     */
    update(resourceGroupName: string, clusterName: string, arcSettingName: string, arcSetting: ArcSettingsPatch, options?: ArcSettingsUpdateOptionalParams): Promise<ArcSettingsUpdateResponse>;
    /**
     * Delete ArcSetting resource details of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: ArcSettingsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete ArcSetting resource details of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: ArcSettingsDeleteOptionalParams): Promise<void>;
    /**
     * Generate password for arc settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    generatePassword(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: ArcSettingsGeneratePasswordOptionalParams): Promise<ArcSettingsGeneratePasswordResponse>;
    /**
     * Create Aad identity for arc settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginCreateIdentity(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: ArcSettingsCreateIdentityOptionalParams): Promise<PollerLike<PollOperationState<ArcSettingsCreateIdentityResponse>, ArcSettingsCreateIdentityResponse>>;
    /**
     * Create Aad identity for arc settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    beginCreateIdentityAndWait(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: ArcSettingsCreateIdentityOptionalParams): Promise<ArcSettingsCreateIdentityResponse>;
}

/** Optional parameters. */
export declare interface ArcSettingsCreateIdentityOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createIdentity operation. */
export declare type ArcSettingsCreateIdentityResponse = ArcIdentityResponse;

/** Optional parameters. */
export declare interface ArcSettingsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type ArcSettingsCreateResponse = ArcSetting;

/** Optional parameters. */
export declare interface ArcSettingsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ArcSettingsGeneratePasswordOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generatePassword operation. */
export declare type ArcSettingsGeneratePasswordResponse = PasswordCredential;

/** Optional parameters. */
export declare interface ArcSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ArcSettingsGetResponse = ArcSetting;

/** Optional parameters. */
export declare interface ArcSettingsListByClusterNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByClusterNext operation. */
export declare type ArcSettingsListByClusterNextResponse = ArcSettingList;

/** Optional parameters. */
export declare interface ArcSettingsListByClusterOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByCluster operation. */
export declare type ArcSettingsListByClusterResponse = ArcSettingList;

/** ArcSetting details to update. */
export declare interface ArcSettingsPatch {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** contains connectivity related configuration for ARC resources */
    connectivityProperties?: Record<string, unknown>;
}

/** Optional parameters. */
export declare interface ArcSettingsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ArcSettingsUpdateResponse = ArcSetting;

export declare class AzureStackHCIClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the AzureStackHCIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureStackHCIClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    arcSettings: ArcSettings;
    clusters: Clusters;
    extensions: Extensions;
    operations: Operations;
}

/** Optional parameters. */
export declare interface AzureStackHCIClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Cluster details. */
export declare interface Cluster extends TrackedResource {
    /**
     * Provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Status of the cluster agent.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
    /**
     * Unique, immutable resource id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudId?: string;
    /** Endpoint configured for management from the Azure portal. */
    cloudManagementEndpoint?: string;
    /** App id of cluster AAD identity. */
    aadClientId?: string;
    /** Tenant id of cluster AAD identity. */
    aadTenantId?: string;
    /** Object id of cluster AAD identity. */
    aadApplicationObjectId?: string;
    /** Id of cluster identity service principal. */
    aadServicePrincipalObjectId?: string;
    /** Desired properties of the cluster. */
    desiredProperties?: ClusterDesiredProperties;
    /**
     * Properties reported by cluster agent.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reportedProperties?: ClusterReportedProperties;
    /**
     * Number of days remaining in the trial period.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trialDaysRemaining?: number;
    /**
     * Type of billing applied to the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingModel?: string;
    /**
     * First cluster sync timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly registrationTimestamp?: Date;
    /**
     * Most recent cluster sync timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSyncTimestamp?: Date;
    /**
     * Most recent billing meter timestamp.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastBillingTimestamp?: Date;
    /**
     * Region specific DataPath Endpoint of the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceEndpoint?: string;
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Desired properties of the cluster. */
export declare interface ClusterDesiredProperties {
    /** Desired state of Windows Server Subscription. */
    windowsServerSubscription?: WindowsServerSubscription;
    /** Desired level of diagnostic data emitted by the cluster. */
    diagnosticLevel?: DiagnosticLevel;
}

/** Cluster Identity details. */
export declare interface ClusterIdentityResponse {
    aadClientId?: string;
    aadTenantId?: string;
    aadServicePrincipalObjectId?: string;
    aadApplicationObjectId?: string;
}

/** List of clusters. */
export declare interface ClusterList {
    /** List of clusters. */
    value?: Cluster[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Cluster node details. */
export declare interface ClusterNode {
    /**
     * Name of the cluster node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Id of the node in the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: number;
    /**
     * State of Windows Server Subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly windowsServerSubscription?: WindowsServerSubscription;
    /**
     * Manufacturer of the cluster node hardware.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly manufacturer?: string;
    /**
     * Model name of the cluster node hardware.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly model?: string;
    /**
     * Operating system running on the cluster node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osName?: string;
    /**
     * Version of the operating system running on the cluster node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly osVersion?: string;
    /**
     * Immutable id of the cluster node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serialNumber?: string;
    /**
     * Number of physical cores on the cluster node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly coreCount?: number;
    /**
     * Total available memory on the cluster node (in GiB).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly memoryInGiB?: number;
}

/** Cluster details to update. */
export declare interface ClusterPatch {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Endpoint configured for management from the Azure portal */
    cloudManagementEndpoint?: string;
    /** App id of cluster AAD identity. */
    aadClientId?: string;
    /** Tenant id of cluster AAD identity. */
    aadTenantId?: string;
    /** Desired properties of the cluster. */
    desiredProperties?: ClusterDesiredProperties;
}

/** Properties reported by cluster agent. */
export declare interface ClusterReportedProperties {
    /**
     * Name of the on-prem cluster connected to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterName?: string;
    /**
     * Unique id generated by the on-prem cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterId?: string;
    /**
     * Version of the cluster software.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterVersion?: string;
    /**
     * List of nodes reported by the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodes?: ClusterNode[];
    /**
     * Last time the cluster reported the data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdated?: Date;
    /**
     * IMDS attestation status of the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly imdsAttestation?: ImdsAttestation;
    /** Level of diagnostic data emitted by the cluster. */
    diagnosticLevel?: DiagnosticLevel;
}

/** Interface representing a Clusters. */
export declare interface Clusters {
    /**
     * List all HCI clusters in a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ClustersListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Cluster>;
    /**
     * List all HCI clusters in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ClustersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Cluster>;
    /**
     * Get HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, options?: ClustersGetOptionalParams): Promise<ClustersGetResponse>;
    /**
     * Create an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster Details of the HCI cluster.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, clusterName: string, cluster: Cluster, options?: ClustersCreateOptionalParams): Promise<ClustersCreateResponse>;
    /**
     * Update an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param cluster Details of the HCI cluster.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, clusterName: string, cluster: ClusterPatch, options?: ClustersUpdateOptionalParams): Promise<ClustersUpdateResponse>;
    /**
     * Delete an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<void>;
    /**
     * Upload certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param uploadCertificateRequest Upload certificate request.
     * @param options The options parameters.
     */
    beginUploadCertificate(resourceGroupName: string, clusterName: string, uploadCertificateRequest: UploadCertificateRequest, options?: ClustersUploadCertificateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Upload certificate.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param uploadCertificateRequest Upload certificate request.
     * @param options The options parameters.
     */
    beginUploadCertificateAndWait(resourceGroupName: string, clusterName: string, uploadCertificateRequest: UploadCertificateRequest, options?: ClustersUploadCertificateOptionalParams): Promise<void>;
    /**
     * Create cluster identity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginCreateIdentity(resourceGroupName: string, clusterName: string, options?: ClustersCreateIdentityOptionalParams): Promise<PollerLike<PollOperationState<ClustersCreateIdentityResponse>, ClustersCreateIdentityResponse>>;
    /**
     * Create cluster identity.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param options The options parameters.
     */
    beginCreateIdentityAndWait(resourceGroupName: string, clusterName: string, options?: ClustersCreateIdentityOptionalParams): Promise<ClustersCreateIdentityResponse>;
}

/** Optional parameters. */
export declare interface ClustersCreateIdentityOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createIdentity operation. */
export declare type ClustersCreateIdentityResponse = ClusterIdentityResponse;

/** Optional parameters. */
export declare interface ClustersCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type ClustersCreateResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ClustersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ClustersGetResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ClustersListByResourceGroupNextResponse = ClusterList;

/** Optional parameters. */
export declare interface ClustersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ClustersListByResourceGroupResponse = ClusterList;

/** Optional parameters. */
export declare interface ClustersListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ClustersListBySubscriptionNextResponse = ClusterList;

/** Optional parameters. */
export declare interface ClustersListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ClustersListBySubscriptionResponse = ClusterList;

/** Optional parameters. */
export declare interface ClustersUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ClustersUpdateResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersUploadCertificateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for DiagnosticLevel. \
 * {@link KnownDiagnosticLevel} can be used interchangeably with DiagnosticLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Off** \
 * **Basic** \
 * **Enhanced**
 */
export declare type DiagnosticLevel = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Details of a particular extension in HCI Cluster. */
export declare interface Extension extends ProxyResource {
    /**
     * Provisioning state of the Extension proxy resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Aggregate state of Arc Extensions across the nodes in this HCI cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregateState?: ExtensionAggregateState;
    /**
     * State of Arc Extension in each of the nodes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly perNodeExtensionDetails?: PerNodeExtensionState[];
    /** How the extension handler should be forced to update even if the extension configuration has not changed. */
    forceUpdateTag?: string;
    /** The name of the extension handler publisher. */
    publisher?: string;
    /** Specifies the type of the extension; an example is "CustomScriptExtension". */
    typePropertiesExtensionParametersType?: string;
    /** Specifies the version of the script handler. */
    typeHandlerVersion?: string;
    /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
    autoUpgradeMinorVersion?: boolean;
    /** Json formatted public settings for the extension. */
    settings?: Record<string, unknown>;
    /** Protected settings (may contain secrets). */
    protectedSettings?: Record<string, unknown>;
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/**
 * Defines values for ExtensionAggregateState. \
 * {@link KnownExtensionAggregateState} can be used interchangeably with ExtensionAggregateState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Error** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **Connected** \
 * **Disconnected** \
 * **Deleted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving** \
 * **PartiallySucceeded** \
 * **PartiallyConnected** \
 * **InProgress**
 */
export declare type ExtensionAggregateState = string;

/** List of Extensions in HCI cluster. */
export declare interface ExtensionList {
    /**
     * List of Extensions in HCI cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Extension[];
    /**
     * Link to the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Extensions. */
export declare interface Extensions {
    /**
     * List all Extensions under ArcSetting resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param options The options parameters.
     */
    listByArcSetting(resourceGroupName: string, clusterName: string, arcSettingName: string, options?: ExtensionsListByArcSettingOptionalParams): PagedAsyncIterableIterator<Extension>;
    /**
     * Get particular Arc Extension of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options?: ExtensionsGetOptionalParams): Promise<ExtensionsGetResponse>;
    /**
     * Create Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Extension, options?: ExtensionsCreateOptionalParams): Promise<PollerLike<PollOperationState<ExtensionsCreateResponse>, ExtensionsCreateResponse>>;
    /**
     * Create Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Extension, options?: ExtensionsCreateOptionalParams): Promise<ExtensionsCreateResponse>;
    /**
     * Update Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Extension, options?: ExtensionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<ExtensionsUpdateResponse>, ExtensionsUpdateResponse>>;
    /**
     * Update Extension for HCI cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param extension Details of the Machine Extension to be created.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, extension: Extension, options?: ExtensionsUpdateOptionalParams): Promise<ExtensionsUpdateResponse>;
    /**
     * Delete particular Arc Extension of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options?: ExtensionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete particular Arc Extension of HCI Cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the cluster.
     * @param arcSettingName The name of the proxy resource holding details of HCI ArcSetting information.
     * @param extensionName The name of the machine extension.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, arcSettingName: string, extensionName: string, options?: ExtensionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ExtensionsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ExtensionsCreateResponse = Extension;

/** Optional parameters. */
export declare interface ExtensionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ExtensionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ExtensionsGetResponse = Extension;

/** Optional parameters. */
export declare interface ExtensionsListByArcSettingNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByArcSettingNext operation. */
export declare type ExtensionsListByArcSettingNextResponse = ExtensionList;

/** Optional parameters. */
export declare interface ExtensionsListByArcSettingOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByArcSetting operation. */
export declare type ExtensionsListByArcSettingResponse = ExtensionList;

/** Optional parameters. */
export declare interface ExtensionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ExtensionsUpdateResponse = Extension;

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for ImdsAttestation. \
 * {@link KnownImdsAttestation} can be used interchangeably with ImdsAttestation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export declare type ImdsAttestation = string;

/** Known values of {@link ActionType} that the service accepts. */
export declare enum KnownActionType {
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link ArcSettingAggregateState} that the service accepts. */
export declare enum KnownArcSettingAggregateState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Error */
    Error = "Error",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Connected */
    Connected = "Connected",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Deleted */
    Deleted = "Deleted",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving",
    /** PartiallySucceeded */
    PartiallySucceeded = "PartiallySucceeded",
    /** PartiallyConnected */
    PartiallyConnected = "PartiallyConnected",
    /** InProgress */
    InProgress = "InProgress"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DiagnosticLevel} that the service accepts. */
export declare enum KnownDiagnosticLevel {
    /** Off */
    Off = "Off",
    /** Basic */
    Basic = "Basic",
    /** Enhanced */
    Enhanced = "Enhanced"
}

/** Known values of {@link ExtensionAggregateState} that the service accepts. */
export declare enum KnownExtensionAggregateState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Error */
    Error = "Error",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Connected */
    Connected = "Connected",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Deleted */
    Deleted = "Deleted",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving",
    /** PartiallySucceeded */
    PartiallySucceeded = "PartiallySucceeded",
    /** PartiallyConnected */
    PartiallyConnected = "PartiallyConnected",
    /** InProgress */
    InProgress = "InProgress"
}

/** Known values of {@link ImdsAttestation} that the service accepts. */
export declare enum KnownImdsAttestation {
    /** Disabled */
    Disabled = "Disabled",
    /** Enabled */
    Enabled = "Enabled"
}

/** Known values of {@link NodeArcState} that the service accepts. */
export declare enum KnownNodeArcState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Error */
    Error = "Error",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Connected */
    Connected = "Connected",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Deleted */
    Deleted = "Deleted",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving"
}

/** Known values of {@link NodeExtensionState} that the service accepts. */
export declare enum KnownNodeExtensionState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Error */
    Error = "Error",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Connected */
    Connected = "Connected",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Deleted */
    Deleted = "Deleted",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Moving */
    Moving = "Moving"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** User */
    User = "user",
    /** System */
    System = "system",
    /** UserSystem */
    UserSystem = "user,system"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Accepted */
    Accepted = "Accepted",
    /** Provisioning */
    Provisioning = "Provisioning"
}

/** Known values of {@link Status} that the service accepts. */
export declare enum KnownStatus {
    /** NotYetRegistered */
    NotYetRegistered = "NotYetRegistered",
    /** ConnectedRecently */
    ConnectedRecently = "ConnectedRecently",
    /** NotConnectedRecently */
    NotConnectedRecently = "NotConnectedRecently",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Error */
    Error = "Error"
}

/** Known values of {@link WindowsServerSubscription} that the service accepts. */
export declare enum KnownWindowsServerSubscription {
    /** Disabled */
    Disabled = "Disabled",
    /** Enabled */
    Enabled = "Enabled"
}

/**
 * Defines values for NodeArcState. \
 * {@link KnownNodeArcState} can be used interchangeably with NodeArcState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Error** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **Connected** \
 * **Disconnected** \
 * **Deleted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving**
 */
export declare type NodeArcState = string;

/**
 * Defines values for NodeExtensionState. \
 * {@link KnownNodeExtensionState} can be used interchangeably with NodeExtensionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Error** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **Connected** \
 * **Disconnected** \
 * **Deleted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Moving**
 */
export declare type NodeExtensionState = string;

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export declare interface Operation {
    /**
     * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /** Localized display information for this particular operation. */
    display?: OperationDisplay;
    /**
     * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: Origin;
    /**
     * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export declare interface OperationDisplay {
    /**
     * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of operations supported by the resource provider
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results (if there are any).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * List all available Microsoft.AzureStackHCI provider operations
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export declare type Origin = string;

export declare interface PasswordCredential {
    secretText?: string;
    keyId?: string;
    startDateTime?: Date;
    endDateTime?: Date;
}

/** Status of Arc Extension for a particular node in HCI Cluster. */
export declare interface PerNodeExtensionState {
    /**
     * Name of the node in HCI Cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Fully qualified resource ID for the particular Arc Extension on this node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extension?: string;
    /**
     * State of Arc Extension in this node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: NodeExtensionState;
}

/** Status of Arc agent for a particular node in HCI Cluster. */
export declare interface PerNodeState {
    /**
     * Name of the Node in HCI Cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Fully qualified resource ID for the Arc agent of this node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly arcInstance?: string;
    /**
     * State of Arc agent in this node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: NodeArcState;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Accepted** \
 * **Provisioning**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

export declare interface RawCertificateData {
    certificates?: string[];
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotYetRegistered** \
 * **ConnectedRecently** \
 * **NotConnectedRecently** \
 * **Disconnected** \
 * **Error**
 */
export declare type Status = string;

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

export declare interface UploadCertificateRequest {
    properties?: RawCertificateData;
}

/**
 * Defines values for WindowsServerSubscription. \
 * {@link KnownWindowsServerSubscription} can be used interchangeably with WindowsServerSubscription,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export declare type WindowsServerSubscription = string;

export { }
