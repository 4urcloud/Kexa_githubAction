/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { RedisEnterpriseManagementClient } from "@azure/arm-redisenterprisecache";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates a database
 *
 * @summary Creates a database
 * x-ms-original-file: specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreate.json
 */
function redisEnterpriseDatabasesCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const clusterName = "cache1";
        const databaseName = "default";
        const parameters = {
            clientProtocol: "Encrypted",
            clusteringPolicy: "EnterpriseCluster",
            evictionPolicy: "AllKeysLRU",
            modules: [
                { name: "RedisBloom", args: "ERROR_RATE 0.00 INITIAL_SIZE 400" },
                { name: "RedisTimeSeries", args: "RETENTION_POLICY 20" },
                { name: "RediSearch" }
            ],
            persistence: { aofEnabled: true, aofFrequency: "1s" },
            port: 10000
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisEnterpriseManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateAndWait(resourceGroupName, clusterName, databaseName, parameters);
        console.log(result);
    });
}
redisEnterpriseDatabasesCreate().catch(console.error);
/**
 * This sample demonstrates how to Creates a database
 *
 * @summary Creates a database
 * x-ms-original-file: specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2022-01-01/examples/RedisEnterpriseDatabasesCreateWithGeoReplication.json
 */
function redisEnterpriseDatabasesCreateWithActiveGeoReplication() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid1";
        const resourceGroupName = "rg1";
        const clusterName = "cache1";
        const databaseName = "default";
        const parameters = {
            clientProtocol: "Encrypted",
            clusteringPolicy: "EnterpriseCluster",
            evictionPolicy: "NoEviction",
            geoReplication: {
                groupNickname: "groupName",
                linkedDatabases: [
                    {
                        id: "/subscriptions/subid1/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/default"
                    },
                    {
                        id: "/subscriptions/subid2/resourceGroups/rg2/providers/Microsoft.Cache/redisEnterprise/cache2/databases/default"
                    }
                ]
            },
            port: 10000
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisEnterpriseManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateAndWait(resourceGroupName, clusterName, databaseName, parameters);
        console.log(result);
    });
}
redisEnterpriseDatabasesCreateWithActiveGeoReplication().catch(console.error);
//# sourceMappingURL=databasesCreateSample.js.map