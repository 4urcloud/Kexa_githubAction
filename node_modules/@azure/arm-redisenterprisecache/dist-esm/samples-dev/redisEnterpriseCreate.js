/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
/**
 * This sample demonstrates how to Creates or updates an existing (overwrite/recreate, with potential downtime) cache cluster
 *
 * @summary Creates or updates an existing (overwrite/recreate, with potential downtime) cache cluster
 * x-ms-original-file: specification/redisenterprise/resource-manager/Microsoft.Cache/stable/2021-08-01/examples/RedisEnterpriseCreate.json
 */
import { RedisEnterpriseManagementClient } from "@azure/arm-redisenterprisecache";
import { DefaultAzureCredential } from "@azure/identity";
function redisEnterpriseCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const clusterName = "cache1";
        const parameters = {
            location: "West US",
            minimumTlsVersion: "1.2",
            sku: { name: "EnterpriseFlash_F300", capacity: 3 },
            tags: { tag1: "value1" },
            zones: ["1", "2", "3"]
        };
        const credential = new DefaultAzureCredential();
        const client = new RedisEnterpriseManagementClient(credential, subscriptionId);
        const result = yield client.redisEnterprise.beginCreateAndWait(resourceGroupName, clusterName, parameters);
        console.log(result);
    });
}
redisEnterpriseCreate().catch(console.error);
//# sourceMappingURL=redisEnterpriseCreate.js.map