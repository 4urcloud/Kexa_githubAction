/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing WorkspaceCollections operations. */
export class WorkspaceCollectionsImpl {
    /**
     * Initialize a new instance of the class WorkspaceCollections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves all existing Power BI workspace collections in the specified resource group.
     * @param resourceGroupName Azure resource group
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield __await(this._listByResourceGroup(resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Retrieves all existing Power BI workspace collections in the specified subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, _settings) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            result = yield __await(this._listBySubscription(options));
            yield yield __await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Retrieves an existing Power BI Workspace Collection.
     * @param resourceGroupName Azure resource group
     * @param workspaceCollectionName Power BI Embedded Workspace Collection name
     * @param options The options parameters.
     */
    getByName(resourceGroupName, workspaceCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceCollectionName, options }, getByNameOperationSpec);
    }
    /**
     * Creates a new Power BI Workspace Collection with the specified properties. A Power BI Workspace
     * Collection contains one or more workspaces, and can be used to provision keys that provide API
     * access to those workspaces.
     * @param resourceGroupName Azure resource group
     * @param workspaceCollectionName Power BI Embedded Workspace Collection name
     * @param body Create workspace collection request
     * @param options The options parameters.
     */
    create(resourceGroupName, workspaceCollectionName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceCollectionName, body, options }, createOperationSpec);
    }
    /**
     * Update an existing Power BI Workspace Collection with the specified properties.
     * @param resourceGroupName Azure resource group
     * @param workspaceCollectionName Power BI Embedded Workspace Collection name
     * @param body Update workspace collection request
     * @param options The options parameters.
     */
    update(resourceGroupName, workspaceCollectionName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceCollectionName, body, options }, updateOperationSpec);
    }
    /**
     * Delete a Power BI Workspace Collection.
     * @param resourceGroupName Azure resource group
     * @param workspaceCollectionName Power BI Embedded Workspace Collection name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, workspaceCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceCollectionName, options }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a Power BI Workspace Collection.
     * @param resourceGroupName Azure resource group
     * @param workspaceCollectionName Power BI Embedded Workspace Collection name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, workspaceCollectionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, workspaceCollectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Verify the specified Power BI Workspace Collection name is valid and not already in use.
     * @param location Azure location
     * @param body Check name availability request
     * @param options The options parameters.
     */
    checkNameAvailability(location, body, options) {
        return this.client.sendOperationRequest({ location, body, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Retrieves all existing Power BI workspace collections in the specified resource group.
     * @param resourceGroupName Azure resource group
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Retrieves all existing Power BI workspace collections in the specified subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Retrieves the primary and secondary access keys for the specified Power BI Workspace Collection.
     * @param resourceGroupName Azure resource group
     * @param workspaceCollectionName Power BI Embedded Workspace Collection name
     * @param options The options parameters.
     */
    getAccessKeys(resourceGroupName, workspaceCollectionName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceCollectionName, options }, getAccessKeysOperationSpec);
    }
    /**
     * Regenerates the primary or secondary access key for the specified Power BI Workspace Collection.
     * @param resourceGroupName Azure resource group
     * @param workspaceCollectionName Power BI Embedded Workspace Collection name
     * @param body Access key to regenerate
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName, workspaceCollectionName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceCollectionName, body, options }, regenerateKeyOperationSpec);
    }
    /**
     * Migrates an existing Power BI Workspace Collection to a different resource group and/or
     * subscription.
     * @param resourceGroupName Azure resource group
     * @param body Workspace migration request
     * @param options The options parameters.
     */
    migrate(resourceGroupName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, body, options }, migrateOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getByNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkspaceCollection
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceCollectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.WorkspaceCollection
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.body,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceCollectionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.WorkspaceCollection
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceCollectionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceCollectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBI/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameResponse
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkspaceCollectionList
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.PowerBI/workspaceCollections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.WorkspaceCollectionList
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getAccessKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.WorkspaceCollectionAccessKeys
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceCollectionName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const regenerateKeyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBI/workspaceCollections/{workspaceCollectionName}/regenerateKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.WorkspaceCollectionAccessKeys
        },
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.body3,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceCollectionName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const migrateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=workspaceCollections.js.map