import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/**
 * Defines values for AvailabilityStateValues. \
 * {@link KnownAvailabilityStateValues} can be used interchangeably with AvailabilityStateValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available** \
 * **Unavailable** \
 * **Degraded** \
 * **Unknown**
 */
export declare type AvailabilityStateValues = string;

/** availabilityStatus of a resource. */
export declare interface AvailabilityStatus {
    /** Azure Resource Manager Identity for the availabilityStatuses resource. */
    id?: string;
    /** current. */
    name?: string;
    /** Microsoft.ResourceHealth/AvailabilityStatuses. */
    type?: string;
    /** Azure Resource Manager geo location of the resource. */
    location?: string;
    /** Properties of availability state. */
    properties?: AvailabilityStatusProperties;
}

/** Interface representing a AvailabilityStatuses. */
export declare interface AvailabilityStatuses {
    /**
     * Lists the current availability status for all the resources in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options?: AvailabilityStatusesListBySubscriptionIdOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    /**
     * Lists the current availability status for all the resources in the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AvailabilityStatusesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    /**
     * Lists all historical availability transitions and impacting events for a single resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    list(resourceUri: string, options?: AvailabilityStatusesListOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    /**
     * Gets current availability status for a single resource
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    getByResource(resourceUri: string, options?: AvailabilityStatusesGetByResourceOptionalParams): Promise<AvailabilityStatusesGetByResourceResponse>;
}

/** Optional parameters. */
export declare interface AvailabilityStatusesGetByResourceOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Setting $expand=recommendedactions in url query expands the recommendedactions in the response. */
    expand?: string;
}

/** Contains response data for the getByResource operation. */
export declare type AvailabilityStatusesGetByResourceResponse = AvailabilityStatus;

/** Optional parameters. */
export declare interface AvailabilityStatusesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type AvailabilityStatusesListByResourceGroupNextResponse = AvailabilityStatusListResult;

/** Optional parameters. */
export declare interface AvailabilityStatusesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Setting $expand=recommendedactions in url query expands the recommendedactions in the response. */
    expand?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type AvailabilityStatusesListByResourceGroupResponse = AvailabilityStatusListResult;

/** Optional parameters. */
export declare interface AvailabilityStatusesListBySubscriptionIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionIdNext operation. */
export declare type AvailabilityStatusesListBySubscriptionIdNextResponse = AvailabilityStatusListResult;

/** Optional parameters. */
export declare interface AvailabilityStatusesListBySubscriptionIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Setting $expand=recommendedactions in url query expands the recommendedactions in the response. */
    expand?: string;
}

/** Contains response data for the listBySubscriptionId operation. */
export declare type AvailabilityStatusesListBySubscriptionIdResponse = AvailabilityStatusListResult;

/** Optional parameters. */
export declare interface AvailabilityStatusesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AvailabilityStatusesListNextResponse = AvailabilityStatusListResult;

/** Optional parameters. */
export declare interface AvailabilityStatusesListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Setting $expand=recommendedactions in url query expands the recommendedactions in the response. */
    expand?: string;
}

/** Contains response data for the list operation. */
export declare type AvailabilityStatusesListResponse = AvailabilityStatusListResult;

/** The List availabilityStatus operation response. */
export declare interface AvailabilityStatusListResult {
    /** The list of availabilityStatuses. */
    value: AvailabilityStatus[];
    /** The URI to fetch the next page of availabilityStatuses. Call ListNext() with this URI to fetch the next page of availabilityStatuses. */
    nextLink?: string;
}

/** Properties of availability state. */
export declare interface AvailabilityStatusProperties {
    /** Availability status of the resource. When it is null, this availabilityStatus object represents an availability impacting event */
    availabilityState?: AvailabilityStateValues;
    /** Title description of the availability status. */
    title?: string;
    /** Summary description of the availability status. */
    summary?: string;
    /** Details of the availability status. */
    detailedStatus?: string;
    /** When the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. Examples are planned, unplanned, user initiated or an outage etc. */
    reasonType?: string;
    /** When an event is created, it can either be triggered by a customer or the platform of the resource and this field will illustrate that. This field is connected to the category field in this object. */
    context?: string;
    /** When a context field is set to Platform, this field will reflect if the event was planned or unplanned. If the context field does not have a value of Platform, then this field will be ignored. */
    category?: string;
    /** The Article Id */
    articleId?: string;
    /** When the resource's availabilityState is Unavailable, it provides the Timestamp for when the health impacting event was received. */
    rootCauseAttributionTime?: Date;
    /** In case of an availability impacting event, it describes when the health impacting event was originated. Examples are Lifecycle, Downtime, Fault Analysis etc. */
    healthEventType?: string;
    /** In case of an availability impacting event, it describes where the health impacting event was originated. Examples are PlatformInitiated, UserInitiated etc. */
    healthEventCause?: string;
    /** In case of an availability impacting event, it describes the category of a PlatformInitiated health impacting event. Examples are Planned, Unplanned etc. */
    healthEventCategory?: string;
    /** It is a unique Id that identifies the event */
    healthEventId?: string;
    /** When the resource's availabilityState is Unavailable and the reasonType is not User Initiated, it provides the date and time for when the issue is expected to be resolved. */
    resolutionETA?: Date;
    /** Timestamp for when last change in health status occurred. */
    occuredTime?: Date;
    /** Chronicity of the availability transition. */
    reasonChronicity?: ReasonChronicityTypes;
    /** Timestamp for when the health was last checked. */
    reportedTime?: Date;
    /** An annotation describing a change in the availabilityState to Available from Unavailable with a reasonType of type Unplanned */
    recentlyResolved?: AvailabilityStatusPropertiesRecentlyResolved;
    /** Lists actions the user can take based on the current availabilityState of the resource. */
    recommendedActions?: RecommendedAction[];
    /** Lists the service impacting events that may be affecting the health of the resource. */
    serviceImpactingEvents?: ServiceImpactingEvent[];
}

/** An annotation describing a change in the availabilityState to Available from Unavailable with a reasonType of type Unplanned */
export declare interface AvailabilityStatusPropertiesRecentlyResolved {
    /** Timestamp for when the availabilityState changed to Unavailable */
    unavailableOccuredTime?: Date;
    /** Timestamp when the availabilityState changes to Available. */
    resolvedTime?: Date;
    /** Brief description of cause of the resource becoming unavailable. */
    unavailableSummary?: string;
}

/** Interface representing a ChildAvailabilityStatuses. */
export declare interface ChildAvailabilityStatuses {
    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in
     * the response to get the next page of availability status
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    list(resourceUri: string, options?: ChildAvailabilityStatusesListOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    /**
     * Gets current availability status for a single resource
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    getByResource(resourceUri: string, options?: ChildAvailabilityStatusesGetByResourceOptionalParams): Promise<ChildAvailabilityStatusesGetByResourceResponse>;
}

/** Optional parameters. */
export declare interface ChildAvailabilityStatusesGetByResourceOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Setting $expand=recommendedactions in url query expands the recommendedactions in the response. */
    expand?: string;
}

/** Contains response data for the getByResource operation. */
export declare type ChildAvailabilityStatusesGetByResourceResponse = AvailabilityStatus;

/** Optional parameters. */
export declare interface ChildAvailabilityStatusesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ChildAvailabilityStatusesListNextResponse = AvailabilityStatusListResult;

/** Optional parameters. */
export declare interface ChildAvailabilityStatusesListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Setting $expand=recommendedactions in url query expands the recommendedactions in the response. */
    expand?: string;
}

/** Contains response data for the list operation. */
export declare type ChildAvailabilityStatusesListResponse = AvailabilityStatusListResult;

/** Interface representing a ChildResources. */
export declare interface ChildResources {
    /**
     * Lists the all the children and its current health status for a parent resource. Use the nextLink
     * property in the response to get the next page of children current health
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support not nested parent resource type:
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     * @param options The options parameters.
     */
    list(resourceUri: string, options?: ChildResourcesListOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
}

/** Optional parameters. */
export declare interface ChildResourcesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ChildResourcesListNextResponse = AvailabilityStatusListResult;

/** Optional parameters. */
export declare interface ChildResourcesListOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Setting $expand=recommendedactions in url query expands the recommendedactions in the response. */
    expand?: string;
}

/** Contains response data for the list operation. */
export declare type ChildResourcesListResponse = AvailabilityStatusListResult;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Object of the emerging issue impact on services and regions. */
export declare interface EmergingIssueImpact {
    /** The impacted service id. */
    id?: string;
    /** The impacted service name. */
    name?: string;
    /** The list of impacted regions for corresponding emerging issues. */
    regions?: ImpactedRegion[];
}

/** The list of emerging issues. */
export declare interface EmergingIssueListResult {
    /** The list of emerging issues. */
    value?: EmergingIssuesGetResult[];
    /** The link used to get the next page of emerging issues. */
    nextLink?: string;
}

/** Interface representing a EmergingIssues. */
export declare interface EmergingIssues {
    /**
     * Lists Azure services' emerging issues.
     * @param options The options parameters.
     */
    list(options?: EmergingIssuesListOptionalParams): PagedAsyncIterableIterator<EmergingIssuesGetResult>;
    /**
     * Gets Azure services' emerging issues.
     * @param issueName The name of the emerging issue.
     * @param options The options parameters.
     */
    get(issueName: IssueNameParameter, options?: EmergingIssuesGetOptionalParams): Promise<EmergingIssuesGetResponse>;
}

/** Optional parameters. */
export declare interface EmergingIssuesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EmergingIssuesGetResponse = EmergingIssuesGetResult;

/** The Get EmergingIssues operation response. */
export declare interface EmergingIssuesGetResult extends ProxyResource {
    /** Timestamp for when last time refreshed for ongoing emerging issue. */
    refreshTimestamp?: Date;
    /** The list of emerging issues of banner type. */
    statusBanners?: StatusBanner[];
    /** The list of emerging issues of active event type. */
    statusActiveEvents?: StatusActiveEvent[];
}

/** Optional parameters. */
export declare interface EmergingIssuesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type EmergingIssuesListNextResponse = EmergingIssueListResult;

/** Optional parameters. */
export declare interface EmergingIssuesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type EmergingIssuesListResponse = EmergingIssueListResult;

/** Error details. */
export declare interface ErrorResponse {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: string;
}

/** Service health event */
declare interface Event_2 extends ProxyResource {
    /** Type of event. */
    eventType?: EventTypeValues;
    /** Source of event. */
    eventSource?: EventSourceValues;
    /** Current status of event. */
    status?: EventStatusValues;
    /** Title text of event. */
    title?: string;
    /** Summary text of event. */
    summary?: string;
    /** Header text of event. */
    header?: string;
    /** Level of insight. */
    level?: LevelValues;
    /** Level of event. */
    eventLevel?: EventLevelValues;
    /** The id of the Incident */
    externalIncidentId?: string;
    /** The reason for the Incident */
    reason?: string;
    /** Article of event. */
    article?: EventPropertiesArticle;
    /** Useful links of event. */
    links?: Link[];
    /** It provides the Timestamp for when the health impacting event started. */
    impactStartTime?: Date;
    /** It provides the Timestamp for when the health impacting event resolved. */
    impactMitigationTime?: Date;
    /** List services impacted by the service health event. */
    impact?: Impact[];
    /** Recommended actions of event. */
    recommendedActions?: EventPropertiesRecommendedActions;
    /** Frequently asked questions for the service health event. */
    faqs?: Faq[];
    /** It provides information if the event is High incident rate event or not. */
    isHIR?: boolean;
    /** Tells if we want to enable or disable Microsoft Support for this event. */
    enableMicrosoftSupport?: boolean;
    /** Contains the communication message for the event, that could include summary, root cause and other details. */
    description?: string;
    /** Is true if the event is platform initiated. */
    platformInitiated?: boolean;
    /** Tells if we want to enable or disable Microsoft Support for this event. */
    enableChatWithUs?: boolean;
    /** Priority level of the event. Has value from 0 to 23. 0 is the highest priority. Service issue events have higher priority followed by planned maintenance and health advisory. Critical events have higher priority followed by error, warning and informational. Furthermore, active events have higher priority than resolved. */
    priority?: number;
    /** It provides the Timestamp for when the health impacting event was last updated. */
    lastUpdateTime?: Date;
    /** Stage for HIR Document */
    hirStage?: string;
    /** Additional information */
    additionalInformation?: EventPropertiesAdditionalInformation;
    /** duration in seconds */
    duration?: number;
    /** The type of the impact */
    impactType?: string;
}
export { Event_2 as Event }

/** Optional parameters. */
export declare interface EventFetchDetailsBySubscriptionIdAndTrackingIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the fetchDetailsBySubscriptionIdAndTrackingId operation. */
export declare type EventFetchDetailsBySubscriptionIdAndTrackingIdResponse = Event_2;

/** Optional parameters. */
export declare interface EventFetchDetailsByTenantIdAndTrackingIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the fetchDetailsByTenantIdAndTrackingId operation. */
export declare type EventFetchDetailsByTenantIdAndTrackingIdResponse = Event_2;

/** Optional parameters. */
export declare interface EventGetBySubscriptionIdAndTrackingIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020 */
    queryStartTime?: string;
}

/** Contains response data for the getBySubscriptionIdAndTrackingId operation. */
export declare type EventGetBySubscriptionIdAndTrackingIdResponse = Event_2;

/** Optional parameters. */
export declare interface EventGetByTenantIdAndTrackingIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020 */
    queryStartTime?: string;
}

/** Contains response data for the getByTenantIdAndTrackingId operation. */
export declare type EventGetByTenantIdAndTrackingIdResponse = Event_2;

/** Impacted resource for an event. */
export declare interface EventImpactedResource extends ProxyResource {
    /**
     * Resource type within Microsoft cloud.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetResourceType?: string;
    /**
     * Identity for resource within Microsoft cloud.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetResourceId?: string;
    /**
     * Impacted resource region name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetRegion?: string;
    /** Additional information. */
    info?: KeyValueItem[];
}

/** The List of eventImpactedResources operation response. */
export declare interface EventImpactedResourceListResult {
    /** The list of eventImpactedResources. */
    value: EventImpactedResource[];
    /** The URI to fetch the next page of events. Call ListNext() with this URI to fetch the next page of impacted resource. */
    nextLink?: string;
}

/**
 * Defines values for EventLevelValues. \
 * {@link KnownEventLevelValues} can be used interchangeably with EventLevelValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Error** \
 * **Warning** \
 * **Informational**
 */
export declare type EventLevelValues = string;

/** Interface representing a EventOperations. */
export declare interface EventOperations {
    /**
     * Service health event in the subscription by event tracking id
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    getBySubscriptionIdAndTrackingId(eventTrackingId: string, options?: EventGetBySubscriptionIdAndTrackingIdOptionalParams): Promise<EventGetBySubscriptionIdAndTrackingIdResponse>;
    /**
     * Service health event details in the subscription by event tracking id. This can be used to fetch
     * sensitive properties for Security Advisory events
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    fetchDetailsBySubscriptionIdAndTrackingId(eventTrackingId: string, options?: EventFetchDetailsBySubscriptionIdAndTrackingIdOptionalParams): Promise<EventFetchDetailsBySubscriptionIdAndTrackingIdResponse>;
    /**
     * Service health event in the tenant by event tracking id
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    getByTenantIdAndTrackingId(eventTrackingId: string, options?: EventGetByTenantIdAndTrackingIdOptionalParams): Promise<EventGetByTenantIdAndTrackingIdResponse>;
    /**
     * Service health event details in the tenant by event tracking id. This can be used to fetch sensitive
     * properties for Security Advisory events
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    fetchDetailsByTenantIdAndTrackingId(eventTrackingId: string, options?: EventFetchDetailsByTenantIdAndTrackingIdOptionalParams): Promise<EventFetchDetailsByTenantIdAndTrackingIdResponse>;
}

/** Additional information */
export declare interface EventPropertiesAdditionalInformation {
    /** Additional information Message */
    message?: string;
}

/** Article of event. */
export declare interface EventPropertiesArticle {
    /** Article content of event. */
    articleContent?: string;
    /** Article Id */
    articleId?: string;
    /** It provides a map of parameter name and value */
    parameters?: Record<string, unknown>;
}

/** Recommended actions of event. */
export declare interface EventPropertiesRecommendedActions {
    /** Recommended action title for the service health event. */
    message?: string;
    /** Recommended actions for the service health event. */
    actions?: EventPropertiesRecommendedActionsItem[];
    /** Recommended action locale for the service health event. */
    localeCode?: string;
}

/** Recommended action for the service health event. */
export declare interface EventPropertiesRecommendedActionsItem {
    /** Recommended action group Id for the service health event. */
    groupId?: number;
    /** Recommended action text */
    actionText?: string;
}

/** The List events operation response. */
export declare interface Events {
    /** The list of event. */
    value: Event_2[];
    /** The URI to fetch the next page of events. Call ListNext() with this URI to fetch the next page of events. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface EventsListBySingleResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySingleResourceNext operation. */
export declare type EventsListBySingleResourceNextResponse = Events;

/** Optional parameters. */
export declare interface EventsListBySingleResourceOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
}

/** Contains response data for the listBySingleResource operation. */
export declare type EventsListBySingleResourceResponse = Events;

/** Optional parameters. */
export declare interface EventsListBySubscriptionIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionIdNext operation. */
export declare type EventsListBySubscriptionIdNextResponse = Events;

/** Optional parameters. */
export declare interface EventsListBySubscriptionIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020 */
    queryStartTime?: string;
}

/** Contains response data for the listBySubscriptionId operation. */
export declare type EventsListBySubscriptionIdResponse = Events;

/** Optional parameters. */
export declare interface EventsListByTenantIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByTenantIdNext operation. */
export declare type EventsListByTenantIdNextResponse = Events;

/** Optional parameters. */
export declare interface EventsListByTenantIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
    /** Specifies from when to return events, based on the lastUpdateTime property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020 */
    queryStartTime?: string;
}

/** Contains response data for the listByTenantId operation. */
export declare type EventsListByTenantIdResponse = Events;

/** Interface representing a EventsOperations. */
export declare interface EventsOperations {
    /**
     * Lists service health events in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options?: EventsListBySubscriptionIdOptionalParams): PagedAsyncIterableIterator<Event_2>;
    /**
     * Lists current service health events in the tenant.
     * @param options The options parameters.
     */
    listByTenantId(options?: EventsListByTenantIdOptionalParams): PagedAsyncIterableIterator<Event_2>;
    /**
     * Lists current service health events for given resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    listBySingleResource(resourceUri: string, options?: EventsListBySingleResourceOptionalParams): PagedAsyncIterableIterator<Event_2>;
}

/**
 * Defines values for EventSourceValues. \
 * {@link KnownEventSourceValues} can be used interchangeably with EventSourceValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ResourceHealth** \
 * **ServiceHealth**
 */
export declare type EventSourceValues = string;

/**
 * Defines values for EventStatusValues. \
 * {@link KnownEventStatusValues} can be used interchangeably with EventStatusValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Resolved**
 */
export declare type EventStatusValues = string;

/**
 * Defines values for EventTypeValues. \
 * {@link KnownEventTypeValues} can be used interchangeably with EventTypeValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceIssue** \
 * **PlannedMaintenance** \
 * **HealthAdvisory** \
 * **RCA** \
 * **EmergingIssues** \
 * **SecurityAdvisory**
 */
export declare type EventTypeValues = string;

/** Frequently asked question for the service health event */
export declare interface Faq {
    /** FAQ question for the service health event. */
    question?: string;
    /** FAQ answer for the service health event. */
    answer?: string;
    /** FAQ locale for the service health event. */
    localeCode?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Azure service impacted by the service health event. */
export declare interface Impact {
    /** Impacted service name. */
    impactedService?: string;
    /** List regions impacted by the service health event. */
    impactedRegions?: ImpactedServiceRegion[];
}

/** Object of impacted region. */
export declare interface ImpactedRegion {
    /** The impacted region id. */
    id?: string;
    /** The impacted region name. */
    name?: string;
}

/** Interface representing a ImpactedResources. */
export declare interface ImpactedResources {
    /**
     * Lists impacted resources in the subscription by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listBySubscriptionIdAndEventId(eventTrackingId: string, options?: ImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams): PagedAsyncIterableIterator<EventImpactedResource>;
    /**
     * Lists impacted resources in the tenant by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listByTenantIdAndEventId(eventTrackingId: string, options?: ImpactedResourcesListByTenantIdAndEventIdOptionalParams): PagedAsyncIterableIterator<EventImpactedResource>;
    /**
     * Gets the specific impacted resource in the subscription by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param options The options parameters.
     */
    get(eventTrackingId: string, impactedResourceName: string, options?: ImpactedResourcesGetOptionalParams): Promise<ImpactedResourcesGetResponse>;
    /**
     * Gets the specific impacted resource in the tenant by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param options The options parameters.
     */
    getByTenantId(eventTrackingId: string, impactedResourceName: string, options?: ImpactedResourcesGetByTenantIdOptionalParams): Promise<ImpactedResourcesGetByTenantIdResponse>;
}

/** Optional parameters. */
export declare interface ImpactedResourcesGetByTenantIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByTenantId operation. */
export declare type ImpactedResourcesGetByTenantIdResponse = EventImpactedResource;

/** Optional parameters. */
export declare interface ImpactedResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ImpactedResourcesGetResponse = EventImpactedResource;

/** Optional parameters. */
export declare interface ImpactedResourcesListBySubscriptionIdAndEventIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionIdAndEventIdNext operation. */
export declare type ImpactedResourcesListBySubscriptionIdAndEventIdNextResponse = EventImpactedResourceListResult;

/** Optional parameters. */
export declare interface ImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
}

/** Contains response data for the listBySubscriptionIdAndEventId operation. */
export declare type ImpactedResourcesListBySubscriptionIdAndEventIdResponse = EventImpactedResourceListResult;

/** Optional parameters. */
export declare interface ImpactedResourcesListByTenantIdAndEventIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByTenantIdAndEventIdNext operation. */
export declare type ImpactedResourcesListByTenantIdAndEventIdNextResponse = EventImpactedResourceListResult;

/** Optional parameters. */
export declare interface ImpactedResourcesListByTenantIdAndEventIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
}

/** Contains response data for the listByTenantIdAndEventId operation. */
export declare type ImpactedResourcesListByTenantIdAndEventIdResponse = EventImpactedResourceListResult;

/** impactedResource with health status */
export declare interface ImpactedResourceStatus extends ProxyResource {
    /** Impacted resource status of the resource. */
    availabilityState?: AvailabilityStateValues;
    /** Title description of the impacted resource status. */
    title?: string;
    /** Summary description of the impacted resource status. */
    summary?: string;
    /** When the resource's availabilityState is Unavailable, it describes where the health impacting event was originated. */
    reasonType?: ReasonTypeValues;
    /** Timestamp for when last change in health status occurred. */
    occurredTime?: Date;
}

/** Azure region impacted by the service health event. */
export declare interface ImpactedServiceRegion {
    /** Impacted region name. */
    impactedRegion?: string;
    /** Current status of event in the region. */
    status?: EventStatusValues;
    /** List subscription impacted by the service health event. */
    impactedSubscriptions?: string[];
    /** List tenant impacted by the service health event. */
    impactedTenants?: string[];
    /** It provides the Timestamp for when the last update for the service health event. */
    lastUpdateTime?: Date;
    /** List of updates for given service health event. */
    updates?: Update[];
}

/**
 * Defines values for IssueNameParameter. \
 * {@link KnownIssueNameParameter} can be used interchangeably with IssueNameParameter,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type IssueNameParameter = string;

/** Key value tuple. */
export declare interface KeyValueItem {
    /**
     * Key of tuple.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly key?: string;
    /**
     * Value of tuple.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
}

/** Known values of {@link AvailabilityStateValues} that the service accepts. */
export declare enum KnownAvailabilityStateValues {
    /** Available */
    Available = "Available",
    /** Unavailable */
    Unavailable = "Unavailable",
    /** Degraded */
    Degraded = "Degraded",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link EventLevelValues} that the service accepts. */
export declare enum KnownEventLevelValues {
    /** Critical */
    Critical = "Critical",
    /** Error */
    Error = "Error",
    /** Warning */
    Warning = "Warning",
    /** Informational */
    Informational = "Informational"
}

/** Known values of {@link EventSourceValues} that the service accepts. */
export declare enum KnownEventSourceValues {
    /** ResourceHealth */
    ResourceHealth = "ResourceHealth",
    /** ServiceHealth */
    ServiceHealth = "ServiceHealth"
}

/** Known values of {@link EventStatusValues} that the service accepts. */
export declare enum KnownEventStatusValues {
    /** Active */
    Active = "Active",
    /** Resolved */
    Resolved = "Resolved"
}

/** Known values of {@link EventTypeValues} that the service accepts. */
export declare enum KnownEventTypeValues {
    /** ServiceIssue */
    ServiceIssue = "ServiceIssue",
    /** PlannedMaintenance */
    PlannedMaintenance = "PlannedMaintenance",
    /** HealthAdvisory */
    HealthAdvisory = "HealthAdvisory",
    /** RCA */
    RCA = "RCA",
    /** EmergingIssues */
    EmergingIssues = "EmergingIssues",
    /** SecurityAdvisory */
    SecurityAdvisory = "SecurityAdvisory"
}

/** Known values of {@link IssueNameParameter} that the service accepts. */
export declare enum KnownIssueNameParameter {
    /** Default */
    Default = "default"
}

/** Known values of {@link LevelValues} that the service accepts. */
export declare enum KnownLevelValues {
    /** Critical */
    Critical = "Critical",
    /** Warning */
    Warning = "Warning"
}

/** Known values of {@link LinkTypeValues} that the service accepts. */
export declare enum KnownLinkTypeValues {
    /** Button */
    Button = "Button",
    /** Hyperlink */
    Hyperlink = "Hyperlink"
}

/** Known values of {@link ReasonChronicityTypes} that the service accepts. */
export declare enum KnownReasonChronicityTypes {
    /** Transient */
    Transient = "Transient",
    /** Persistent */
    Persistent = "Persistent"
}

/** Known values of {@link ReasonTypeValues} that the service accepts. */
export declare enum KnownReasonTypeValues {
    /** Unplanned */
    Unplanned = "Unplanned",
    /** Planned */
    Planned = "Planned",
    /** UserInitiated */
    UserInitiated = "UserInitiated"
}

/** Known values of {@link Scenario} that the service accepts. */
export declare enum KnownScenario {
    /** Alerts */
    Alerts = "Alerts"
}

/** Known values of {@link SeverityValues} that the service accepts. */
export declare enum KnownSeverityValues {
    /** Information */
    Information = "Information",
    /** Warning */
    Warning = "Warning",
    /** Error */
    Error = "Error"
}

/** Known values of {@link StageValues} that the service accepts. */
export declare enum KnownStageValues {
    /** Active */
    Active = "Active",
    /** Resolve */
    Resolve = "Resolve",
    /** Archived */
    Archived = "Archived"
}

/**
 * Defines values for LevelValues. \
 * {@link KnownLevelValues} can be used interchangeably with LevelValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Warning**
 */
export declare type LevelValues = string;

/** Useful links for service health event. */
export declare interface Link {
    /** Type of link. */
    type?: LinkTypeValues;
    /** Display text of link. */
    displayText?: LinkDisplayText;
    /** It provides the name of portal extension to produce link for given service health event. */
    extensionName?: string;
    /** It provides the name of portal extension blade to produce link for given service health event. */
    bladeName?: string;
    /** It provides a map of parameter name and value for portal extension blade to produce lik for given service health event. */
    parameters?: Record<string, unknown>;
}

/** Display text of link. */
export declare interface LinkDisplayText {
    /** Display text of link. */
    value?: string;
    /** Localized display text of link. */
    localizedValue?: string;
}

/**
 * Defines values for LinkTypeValues. \
 * {@link KnownLinkTypeValues} can be used interchangeably with LinkTypeValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Button** \
 * **Hyperlink**
 */
export declare type LinkTypeValues = string;

/** Interface representing a Metadata. */
export declare interface Metadata {
    /**
     * Gets the list of metadata entities.
     * @param options The options parameters.
     */
    list(options?: MetadataListOptionalParams): PagedAsyncIterableIterator<MetadataEntity>;
    /**
     * Gets the list of metadata entities.
     * @param name Name of metadata entity.
     * @param options The options parameters.
     */
    getEntity(name: string, options?: MetadataGetEntityOptionalParams): Promise<MetadataGetEntityResponse>;
}

/** The metadata entity contract. */
export declare interface MetadataEntity extends ProxyResource {
    /** The display name. */
    displayName?: string;
    /** The list of keys on which this entity depends on. */
    dependsOn?: string[];
    /** The list of scenarios applicable to this metadata entity. */
    applicableScenarios?: Scenario[];
    /** The list of supported values. */
    supportedValues?: MetadataSupportedValueDetail[];
}

/** The list of metadata entities */
export declare interface MetadataEntityListResult {
    /** The list of metadata entities. */
    value?: MetadataEntity[];
    /** The link used to get the next page of metadata. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface MetadataGetEntityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getEntity operation. */
export declare type MetadataGetEntityResponse = MetadataEntity;

/** Optional parameters. */
export declare interface MetadataListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MetadataListNextResponse = MetadataEntityListResult;

/** Optional parameters. */
export declare interface MetadataListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type MetadataListResponse = MetadataEntityListResult;

/** The metadata supported value detail. */
export declare interface MetadataSupportedValueDetail {
    /** The id. */
    id?: string;
    /** The display name. */
    displayName?: string;
    /** The list of associated resource types. */
    resourceTypes?: string[];
}

export declare class MicrosoftResourceHealth extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MicrosoftResourceHealth class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MicrosoftResourceHealthOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    availabilityStatuses: AvailabilityStatuses;
    operations: Operations;
    metadata: Metadata;
    impactedResources: ImpactedResources;
    securityAdvisoryImpactedResources: SecurityAdvisoryImpactedResources;
    eventsOperations: EventsOperations;
    eventOperations: EventOperations;
    childAvailabilityStatuses: ChildAvailabilityStatuses;
    childResources: ChildResources;
    emergingIssues: EmergingIssues;
}

/** Optional parameters. */
export declare interface MicrosoftResourceHealthOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Operation available in the Microsoft.ResourceHealth resource provider. */
export declare interface Operation {
    /** Name of the operation. */
    name?: string;
    /** Properties of the operation. */
    display?: OperationDisplay;
}

/** Properties of the operation. */
export declare interface OperationDisplay {
    /** Provider name. */
    provider?: string;
    /** Resource name. */
    resource?: string;
    /** Operation name. */
    operation?: string;
    /** Description of the operation. */
    description?: string;
}

/** Lists the operations response. */
export declare interface OperationListResult {
    /** List of operations available in the Microsoft.ResourceHealth resource provider. */
    value: Operation[];
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists available operations for the resourcehealth resource provider
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for ReasonChronicityTypes. \
 * {@link KnownReasonChronicityTypes} can be used interchangeably with ReasonChronicityTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Transient** \
 * **Persistent**
 */
export declare type ReasonChronicityTypes = string;

/**
 * Defines values for ReasonTypeValues. \
 * {@link KnownReasonTypeValues} can be used interchangeably with ReasonTypeValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unplanned** \
 * **Planned** \
 * **UserInitiated**
 */
export declare type ReasonTypeValues = string;

/** Lists actions the user can take based on the current availabilityState of the resource. */
export declare interface RecommendedAction {
    /** Recommended action. */
    action?: string;
    /** Link to the action */
    actionUrl?: string;
    /** the comment for the Action */
    actionUrlComment?: string;
    /** Substring of action, it describes which text should host the action URL. */
    actionUrlText?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for Scenario. \
 * {@link KnownScenario} can be used interchangeably with Scenario,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Alerts**
 */
export declare type Scenario = string;

/** Interface representing a SecurityAdvisoryImpactedResources. */
export declare interface SecurityAdvisoryImpactedResources {
    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listBySubscriptionIdAndEventId(eventTrackingId: string, options?: SecurityAdvisoryImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams): PagedAsyncIterableIterator<EventImpactedResource>;
    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listByTenantIdAndEventId(eventTrackingId: string, options?: SecurityAdvisoryImpactedResourcesListByTenantIdAndEventIdOptionalParams): PagedAsyncIterableIterator<EventImpactedResource>;
}

/** Optional parameters. */
export declare interface SecurityAdvisoryImpactedResourcesListBySubscriptionIdAndEventIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionIdAndEventIdNext operation. */
export declare type SecurityAdvisoryImpactedResourcesListBySubscriptionIdAndEventIdNextResponse = EventImpactedResourceListResult;

/** Optional parameters. */
export declare interface SecurityAdvisoryImpactedResourcesListBySubscriptionIdAndEventIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
}

/** Contains response data for the listBySubscriptionIdAndEventId operation. */
export declare type SecurityAdvisoryImpactedResourcesListBySubscriptionIdAndEventIdResponse = EventImpactedResourceListResult;

/** Optional parameters. */
export declare interface SecurityAdvisoryImpactedResourcesListByTenantIdAndEventIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByTenantIdAndEventIdNext operation. */
export declare type SecurityAdvisoryImpactedResourcesListByTenantIdAndEventIdNextResponse = EventImpactedResourceListResult;

/** Optional parameters. */
export declare interface SecurityAdvisoryImpactedResourcesListByTenantIdAndEventIdOptionalParams extends coreClient.OperationOptions {
    /** The filter to apply on the operation. For more information please see https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN */
    filter?: string;
}

/** Contains response data for the listByTenantIdAndEventId operation. */
export declare type SecurityAdvisoryImpactedResourcesListByTenantIdAndEventIdResponse = EventImpactedResourceListResult;

/** Lists the service impacting events that may be affecting the health of the resource. */
export declare interface ServiceImpactingEvent {
    /** Timestamp for when the event started. */
    eventStartTime?: Date;
    /** Timestamp for when event was submitted/detected. */
    eventStatusLastModifiedTime?: Date;
    /** Correlation id for the event */
    correlationId?: string;
    /** Status of the service impacting event. */
    status?: ServiceImpactingEventStatus;
    /** Properties of the service impacting event. */
    incidentProperties?: ServiceImpactingEventIncidentProperties;
}

/** Properties of the service impacting event. */
export declare interface ServiceImpactingEventIncidentProperties {
    /** Title of the incident. */
    title?: string;
    /** Service impacted by the event. */
    service?: string;
    /** Region impacted by the event. */
    region?: string;
    /** Type of Event. */
    incidentType?: string;
}

/** Status of the service impacting event. */
export declare interface ServiceImpactingEventStatus {
    /** Current status of the event */
    value?: string;
}

/**
 * Defines values for SeverityValues. \
 * {@link KnownSeverityValues} can be used interchangeably with SeverityValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Information** \
 * **Warning** \
 * **Error**
 */
export declare type SeverityValues = string;

/**
 * Defines values for StageValues. \
 * {@link KnownStageValues} can be used interchangeably with StageValues,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Resolve** \
 * **Archived**
 */
export declare type StageValues = string;

/** Active event type of emerging issue. */
export declare interface StatusActiveEvent {
    /** The active event title. */
    title?: string;
    /** The details of active event. */
    description?: string;
    /** The tracking id of this active event. */
    trackingId?: string;
    /** The impact start time on this active event. */
    startTime?: Date;
    /** The cloud type of this active event. */
    cloud?: string;
    /** The severity level of this active event. */
    severity?: SeverityValues;
    /** The stage of this active event. */
    stage?: StageValues;
    /** The boolean value of this active event if published or not. */
    published?: boolean;
    /** The last time modified on this banner. */
    lastModifiedTime?: Date;
    /** The list of emerging issues impacts. */
    impacts?: EmergingIssueImpact[];
}

/** Banner type of emerging issue. */
export declare interface StatusBanner {
    /** The banner title. */
    title?: string;
    /** The details of banner. */
    message?: string;
    /** The cloud type of this banner. */
    cloud?: string;
    /** The last time modified on this banner. */
    lastModifiedTime?: Date;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Update for service health event. */
export declare interface Update {
    /** Summary text for the given update for the service health event. */
    summary?: string;
    /** It provides the Timestamp for the given update for the service health event. */
    updateDateTime?: Date;
}

export { }
