import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { EventsOperations } from "../operationsInterfaces";
import { MicrosoftResourceHealth } from "../microsoftResourceHealth";
import { Event, EventsListBySubscriptionIdOptionalParams, EventsListByTenantIdOptionalParams, EventsListBySingleResourceOptionalParams } from "../models";
/** Class containing EventsOperations operations. */
export declare class EventsOperationsImpl implements EventsOperations {
    private readonly client;
    /**
     * Initialize a new instance of the class EventsOperations class.
     * @param client Reference to the service client
     */
    constructor(client: MicrosoftResourceHealth);
    /**
     * Lists service health events in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options?: EventsListBySubscriptionIdOptionalParams): PagedAsyncIterableIterator<Event>;
    private listBySubscriptionIdPagingPage;
    private listBySubscriptionIdPagingAll;
    /**
     * Lists current service health events in the tenant.
     * @param options The options parameters.
     */
    listByTenantId(options?: EventsListByTenantIdOptionalParams): PagedAsyncIterableIterator<Event>;
    private listByTenantIdPagingPage;
    private listByTenantIdPagingAll;
    /**
     * Lists current service health events for given resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    listBySingleResource(resourceUri: string, options?: EventsListBySingleResourceOptionalParams): PagedAsyncIterableIterator<Event>;
    private listBySingleResourcePagingPage;
    private listBySingleResourcePagingAll;
    /**
     * Lists service health events in the subscription.
     * @param options The options parameters.
     */
    private _listBySubscriptionId;
    /**
     * Lists current service health events in the tenant.
     * @param options The options parameters.
     */
    private _listByTenantId;
    /**
     * Lists current service health events for given resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    private _listBySingleResource;
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    private _listBySubscriptionIdNext;
    /**
     * ListByTenantIdNext
     * @param nextLink The nextLink from the previous successful call to the ListByTenantId method.
     * @param options The options parameters.
     */
    private _listByTenantIdNext;
    /**
     * ListBySingleResourceNext
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param nextLink The nextLink from the previous successful call to the ListBySingleResource method.
     * @param options The options parameters.
     */
    private _listBySingleResourceNext;
}
//# sourceMappingURL=eventsOperations.d.ts.map