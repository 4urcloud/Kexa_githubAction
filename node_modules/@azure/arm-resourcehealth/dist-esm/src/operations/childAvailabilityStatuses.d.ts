import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ChildAvailabilityStatuses } from "../operationsInterfaces";
import { MicrosoftResourceHealth } from "../microsoftResourceHealth";
import { AvailabilityStatus, ChildAvailabilityStatusesListOptionalParams, ChildAvailabilityStatusesGetByResourceOptionalParams, ChildAvailabilityStatusesGetByResourceResponse } from "../models";
/** Class containing ChildAvailabilityStatuses operations. */
export declare class ChildAvailabilityStatusesImpl implements ChildAvailabilityStatuses {
    private readonly client;
    /**
     * Initialize a new instance of the class ChildAvailabilityStatuses class.
     * @param client Reference to the service client
     */
    constructor(client: MicrosoftResourceHealth);
    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in
     * the response to get the next page of availability status
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    list(resourceUri: string, options?: ChildAvailabilityStatusesListOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets current availability status for a single resource
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    getByResource(resourceUri: string, options?: ChildAvailabilityStatusesGetByResourceOptionalParams): Promise<ChildAvailabilityStatusesGetByResourceResponse>;
    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in
     * the response to get the next page of availability status
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=childAvailabilityStatuses.d.ts.map