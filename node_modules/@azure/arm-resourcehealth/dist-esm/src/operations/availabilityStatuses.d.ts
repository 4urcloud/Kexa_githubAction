import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AvailabilityStatuses } from "../operationsInterfaces";
import { MicrosoftResourceHealth } from "../microsoftResourceHealth";
import { AvailabilityStatus, AvailabilityStatusesListBySubscriptionIdOptionalParams, AvailabilityStatusesListByResourceGroupOptionalParams, AvailabilityStatusesListOptionalParams, AvailabilityStatusesGetByResourceOptionalParams, AvailabilityStatusesGetByResourceResponse } from "../models";
/** Class containing AvailabilityStatuses operations. */
export declare class AvailabilityStatusesImpl implements AvailabilityStatuses {
    private readonly client;
    /**
     * Initialize a new instance of the class AvailabilityStatuses class.
     * @param client Reference to the service client
     */
    constructor(client: MicrosoftResourceHealth);
    /**
     * Lists the current availability status for all the resources in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options?: AvailabilityStatusesListBySubscriptionIdOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    private listBySubscriptionIdPagingPage;
    private listBySubscriptionIdPagingAll;
    /**
     * Lists the current availability status for all the resources in the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AvailabilityStatusesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists all historical availability transitions and impacting events for a single resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    list(resourceUri: string, options?: AvailabilityStatusesListOptionalParams): PagedAsyncIterableIterator<AvailabilityStatus>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists the current availability status for all the resources in the subscription.
     * @param options The options parameters.
     */
    private _listBySubscriptionId;
    /**
     * Lists the current availability status for all the resources in the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Gets current availability status for a single resource
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    getByResource(resourceUri: string, options?: AvailabilityStatusesGetByResourceOptionalParams): Promise<AvailabilityStatusesGetByResourceResponse>;
    /**
     * Lists all historical availability transitions and impacting events for a single resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    private _listBySubscriptionIdNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListNext
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=availabilityStatuses.d.ts.map