/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing EventOperations operations. */
export class EventOperationsImpl {
    /**
     * Initialize a new instance of the class EventOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Service health event in the subscription by event tracking id
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    getBySubscriptionIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, getBySubscriptionIdAndTrackingIdOperationSpec);
    }
    /**
     * Service health event details in the subscription by event tracking id. This can be used to fetch
     * sensitive properties for Security Advisory events
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    fetchDetailsBySubscriptionIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, fetchDetailsBySubscriptionIdAndTrackingIdOperationSpec);
    }
    /**
     * Service health event in the tenant by event tracking id
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    getByTenantIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, getByTenantIdAndTrackingIdOperationSpec);
    }
    /**
     * Service health event details in the tenant by event tracking id. This can be used to fetch sensitive
     * properties for Security Advisory events
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    fetchDetailsByTenantIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, fetchDetailsByTenantIdAndTrackingIdOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getBySubscriptionIdAndTrackingIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Event
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.queryStartTime
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.eventTrackingId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const fetchDetailsBySubscriptionIdAndTrackingIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Event
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.eventTrackingId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getByTenantIdAndTrackingIdOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Event
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.queryStartTime
    ],
    urlParameters: [Parameters.$host, Parameters.eventTrackingId],
    headerParameters: [Parameters.accept],
    serializer
};
const fetchDetailsByTenantIdAndTrackingIdOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.Event
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.eventTrackingId],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=eventOperations.js.map