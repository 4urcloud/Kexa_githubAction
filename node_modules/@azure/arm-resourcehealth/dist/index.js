'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link AvailabilityStateValues} that the service accepts. */
exports.KnownAvailabilityStateValues = void 0;
(function (KnownAvailabilityStateValues) {
    /** Available */
    KnownAvailabilityStateValues["Available"] = "Available";
    /** Unavailable */
    KnownAvailabilityStateValues["Unavailable"] = "Unavailable";
    /** Degraded */
    KnownAvailabilityStateValues["Degraded"] = "Degraded";
    /** Unknown */
    KnownAvailabilityStateValues["Unknown"] = "Unknown";
})(exports.KnownAvailabilityStateValues || (exports.KnownAvailabilityStateValues = {}));
/** Known values of {@link ReasonChronicityTypes} that the service accepts. */
exports.KnownReasonChronicityTypes = void 0;
(function (KnownReasonChronicityTypes) {
    /** Transient */
    KnownReasonChronicityTypes["Transient"] = "Transient";
    /** Persistent */
    KnownReasonChronicityTypes["Persistent"] = "Persistent";
})(exports.KnownReasonChronicityTypes || (exports.KnownReasonChronicityTypes = {}));
/** Known values of {@link Scenario} that the service accepts. */
exports.KnownScenario = void 0;
(function (KnownScenario) {
    /** Alerts */
    KnownScenario["Alerts"] = "Alerts";
})(exports.KnownScenario || (exports.KnownScenario = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link EventTypeValues} that the service accepts. */
exports.KnownEventTypeValues = void 0;
(function (KnownEventTypeValues) {
    /** ServiceIssue */
    KnownEventTypeValues["ServiceIssue"] = "ServiceIssue";
    /** PlannedMaintenance */
    KnownEventTypeValues["PlannedMaintenance"] = "PlannedMaintenance";
    /** HealthAdvisory */
    KnownEventTypeValues["HealthAdvisory"] = "HealthAdvisory";
    /** RCA */
    KnownEventTypeValues["RCA"] = "RCA";
    /** EmergingIssues */
    KnownEventTypeValues["EmergingIssues"] = "EmergingIssues";
    /** SecurityAdvisory */
    KnownEventTypeValues["SecurityAdvisory"] = "SecurityAdvisory";
})(exports.KnownEventTypeValues || (exports.KnownEventTypeValues = {}));
/** Known values of {@link EventSourceValues} that the service accepts. */
exports.KnownEventSourceValues = void 0;
(function (KnownEventSourceValues) {
    /** ResourceHealth */
    KnownEventSourceValues["ResourceHealth"] = "ResourceHealth";
    /** ServiceHealth */
    KnownEventSourceValues["ServiceHealth"] = "ServiceHealth";
})(exports.KnownEventSourceValues || (exports.KnownEventSourceValues = {}));
/** Known values of {@link EventStatusValues} that the service accepts. */
exports.KnownEventStatusValues = void 0;
(function (KnownEventStatusValues) {
    /** Active */
    KnownEventStatusValues["Active"] = "Active";
    /** Resolved */
    KnownEventStatusValues["Resolved"] = "Resolved";
})(exports.KnownEventStatusValues || (exports.KnownEventStatusValues = {}));
/** Known values of {@link LevelValues} that the service accepts. */
exports.KnownLevelValues = void 0;
(function (KnownLevelValues) {
    /** Critical */
    KnownLevelValues["Critical"] = "Critical";
    /** Warning */
    KnownLevelValues["Warning"] = "Warning";
})(exports.KnownLevelValues || (exports.KnownLevelValues = {}));
/** Known values of {@link EventLevelValues} that the service accepts. */
exports.KnownEventLevelValues = void 0;
(function (KnownEventLevelValues) {
    /** Critical */
    KnownEventLevelValues["Critical"] = "Critical";
    /** Error */
    KnownEventLevelValues["Error"] = "Error";
    /** Warning */
    KnownEventLevelValues["Warning"] = "Warning";
    /** Informational */
    KnownEventLevelValues["Informational"] = "Informational";
})(exports.KnownEventLevelValues || (exports.KnownEventLevelValues = {}));
/** Known values of {@link LinkTypeValues} that the service accepts. */
exports.KnownLinkTypeValues = void 0;
(function (KnownLinkTypeValues) {
    /** Button */
    KnownLinkTypeValues["Button"] = "Button";
    /** Hyperlink */
    KnownLinkTypeValues["Hyperlink"] = "Hyperlink";
})(exports.KnownLinkTypeValues || (exports.KnownLinkTypeValues = {}));
/** Known values of {@link SeverityValues} that the service accepts. */
exports.KnownSeverityValues = void 0;
(function (KnownSeverityValues) {
    /** Information */
    KnownSeverityValues["Information"] = "Information";
    /** Warning */
    KnownSeverityValues["Warning"] = "Warning";
    /** Error */
    KnownSeverityValues["Error"] = "Error";
})(exports.KnownSeverityValues || (exports.KnownSeverityValues = {}));
/** Known values of {@link StageValues} that the service accepts. */
exports.KnownStageValues = void 0;
(function (KnownStageValues) {
    /** Active */
    KnownStageValues["Active"] = "Active";
    /** Resolve */
    KnownStageValues["Resolve"] = "Resolve";
    /** Archived */
    KnownStageValues["Archived"] = "Archived";
})(exports.KnownStageValues || (exports.KnownStageValues = {}));
/** Known values of {@link IssueNameParameter} that the service accepts. */
exports.KnownIssueNameParameter = void 0;
(function (KnownIssueNameParameter) {
    /** Default */
    KnownIssueNameParameter["Default"] = "default";
})(exports.KnownIssueNameParameter || (exports.KnownIssueNameParameter = {}));
/** Known values of {@link ReasonTypeValues} that the service accepts. */
exports.KnownReasonTypeValues = void 0;
(function (KnownReasonTypeValues) {
    /** Unplanned */
    KnownReasonTypeValues["Unplanned"] = "Unplanned";
    /** Planned */
    KnownReasonTypeValues["Planned"] = "Planned";
    /** UserInitiated */
    KnownReasonTypeValues["UserInitiated"] = "UserInitiated";
})(exports.KnownReasonTypeValues || (exports.KnownReasonTypeValues = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AvailabilityStatusListResult = {
    type: {
        name: "Composite",
        className: "AvailabilityStatusListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailabilityStatus"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AvailabilityStatus = {
    type: {
        name: "Composite",
        className: "AvailabilityStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AvailabilityStatusProperties"
                }
            }
        }
    }
};
const AvailabilityStatusProperties = {
    type: {
        name: "Composite",
        className: "AvailabilityStatusProperties",
        modelProperties: {
            availabilityState: {
                serializedName: "availabilityState",
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            summary: {
                serializedName: "summary",
                type: {
                    name: "String"
                }
            },
            detailedStatus: {
                serializedName: "detailedStatus",
                type: {
                    name: "String"
                }
            },
            reasonType: {
                serializedName: "reasonType",
                type: {
                    name: "String"
                }
            },
            context: {
                serializedName: "context",
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                type: {
                    name: "String"
                }
            },
            articleId: {
                serializedName: "articleId",
                type: {
                    name: "String"
                }
            },
            rootCauseAttributionTime: {
                serializedName: "rootCauseAttributionTime",
                type: {
                    name: "DateTime"
                }
            },
            healthEventType: {
                serializedName: "healthEventType",
                type: {
                    name: "String"
                }
            },
            healthEventCause: {
                serializedName: "healthEventCause",
                type: {
                    name: "String"
                }
            },
            healthEventCategory: {
                serializedName: "healthEventCategory",
                type: {
                    name: "String"
                }
            },
            healthEventId: {
                serializedName: "healthEventId",
                type: {
                    name: "String"
                }
            },
            resolutionETA: {
                serializedName: "resolutionETA",
                type: {
                    name: "DateTime"
                }
            },
            occuredTime: {
                serializedName: "occuredTime",
                type: {
                    name: "DateTime"
                }
            },
            reasonChronicity: {
                serializedName: "reasonChronicity",
                type: {
                    name: "String"
                }
            },
            reportedTime: {
                serializedName: "reportedTime",
                type: {
                    name: "DateTime"
                }
            },
            recentlyResolved: {
                serializedName: "recentlyResolved",
                type: {
                    name: "Composite",
                    className: "AvailabilityStatusPropertiesRecentlyResolved"
                }
            },
            recommendedActions: {
                serializedName: "recommendedActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecommendedAction"
                        }
                    }
                }
            },
            serviceImpactingEvents: {
                serializedName: "serviceImpactingEvents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceImpactingEvent"
                        }
                    }
                }
            }
        }
    }
};
const AvailabilityStatusPropertiesRecentlyResolved = {
    type: {
        name: "Composite",
        className: "AvailabilityStatusPropertiesRecentlyResolved",
        modelProperties: {
            unavailableOccuredTime: {
                serializedName: "unavailableOccuredTime",
                type: {
                    name: "DateTime"
                }
            },
            resolvedTime: {
                serializedName: "resolvedTime",
                type: {
                    name: "DateTime"
                }
            },
            unavailableSummary: {
                serializedName: "unavailableSummary",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RecommendedAction = {
    type: {
        name: "Composite",
        className: "RecommendedAction",
        modelProperties: {
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            },
            actionUrl: {
                serializedName: "actionUrl",
                type: {
                    name: "String"
                }
            },
            actionUrlComment: {
                serializedName: "_ActionUrl\\.Comment",
                type: {
                    name: "String"
                }
            },
            actionUrlText: {
                serializedName: "actionUrlText",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceImpactingEvent = {
    type: {
        name: "Composite",
        className: "ServiceImpactingEvent",
        modelProperties: {
            eventStartTime: {
                serializedName: "eventStartTime",
                type: {
                    name: "DateTime"
                }
            },
            eventStatusLastModifiedTime: {
                serializedName: "eventStatusLastModifiedTime",
                type: {
                    name: "DateTime"
                }
            },
            correlationId: {
                serializedName: "correlationId",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "Composite",
                    className: "ServiceImpactingEventStatus"
                }
            },
            incidentProperties: {
                serializedName: "incidentProperties",
                type: {
                    name: "Composite",
                    className: "ServiceImpactingEventIncidentProperties"
                }
            }
        }
    }
};
const ServiceImpactingEventStatus = {
    type: {
        name: "Composite",
        className: "ServiceImpactingEventStatus",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceImpactingEventIncidentProperties = {
    type: {
        name: "Composite",
        className: "ServiceImpactingEventIncidentProperties",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            service: {
                serializedName: "service",
                type: {
                    name: "String"
                }
            },
            region: {
                serializedName: "region",
                type: {
                    name: "String"
                }
            },
            incidentType: {
                serializedName: "incidentType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataEntityListResult = {
    type: {
        name: "Composite",
        className: "MetadataEntityListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataEntity"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetadataSupportedValueDetail = {
    type: {
        name: "Composite",
        className: "MetadataSupportedValueDetail",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            resourceTypes: {
                serializedName: "resourceTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const EventImpactedResourceListResult = {
    type: {
        name: "Composite",
        className: "EventImpactedResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EventImpactedResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyValueItem = {
    type: {
        name: "Composite",
        className: "KeyValueItem",
        modelProperties: {
            key: {
                serializedName: "key",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Events = {
    type: {
        name: "Composite",
        className: "Events",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Event"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventPropertiesArticle = {
    type: {
        name: "Composite",
        className: "EventPropertiesArticle",
        modelProperties: {
            articleContent: {
                serializedName: "articleContent",
                type: {
                    name: "String"
                }
            },
            articleId: {
                serializedName: "articleId",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const Link = {
    type: {
        name: "Composite",
        className: "Link",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            displayText: {
                serializedName: "displayText",
                type: {
                    name: "Composite",
                    className: "LinkDisplayText"
                }
            },
            extensionName: {
                serializedName: "extensionName",
                type: {
                    name: "String"
                }
            },
            bladeName: {
                serializedName: "bladeName",
                type: {
                    name: "String"
                }
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const LinkDisplayText = {
    type: {
        name: "Composite",
        className: "LinkDisplayText",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Impact = {
    type: {
        name: "Composite",
        className: "Impact",
        modelProperties: {
            impactedService: {
                serializedName: "impactedService",
                type: {
                    name: "String"
                }
            },
            impactedRegions: {
                serializedName: "impactedRegions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImpactedServiceRegion"
                        }
                    }
                }
            }
        }
    }
};
const ImpactedServiceRegion = {
    type: {
        name: "Composite",
        className: "ImpactedServiceRegion",
        modelProperties: {
            impactedRegion: {
                serializedName: "impactedRegion",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            impactedSubscriptions: {
                serializedName: "impactedSubscriptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            impactedTenants: {
                serializedName: "impactedTenants",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            lastUpdateTime: {
                serializedName: "lastUpdateTime",
                type: {
                    name: "DateTime"
                }
            },
            updates: {
                serializedName: "updates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Update"
                        }
                    }
                }
            }
        }
    }
};
const Update = {
    type: {
        name: "Composite",
        className: "Update",
        modelProperties: {
            summary: {
                serializedName: "summary",
                type: {
                    name: "String"
                }
            },
            updateDateTime: {
                serializedName: "updateDateTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const EventPropertiesRecommendedActions = {
    type: {
        name: "Composite",
        className: "EventPropertiesRecommendedActions",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EventPropertiesRecommendedActionsItem"
                        }
                    }
                }
            },
            localeCode: {
                serializedName: "localeCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventPropertiesRecommendedActionsItem = {
    type: {
        name: "Composite",
        className: "EventPropertiesRecommendedActionsItem",
        modelProperties: {
            groupId: {
                serializedName: "groupId",
                type: {
                    name: "Number"
                }
            },
            actionText: {
                serializedName: "actionText",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Faq = {
    type: {
        name: "Composite",
        className: "Faq",
        modelProperties: {
            question: {
                serializedName: "question",
                type: {
                    name: "String"
                }
            },
            answer: {
                serializedName: "answer",
                type: {
                    name: "String"
                }
            },
            localeCode: {
                serializedName: "localeCode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventPropertiesAdditionalInformation = {
    type: {
        name: "Composite",
        className: "EventPropertiesAdditionalInformation",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EmergingIssueListResult = {
    type: {
        name: "Composite",
        className: "EmergingIssueListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EmergingIssuesGetResult"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StatusBanner = {
    type: {
        name: "Composite",
        className: "StatusBanner",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            cloud: {
                serializedName: "cloud",
                type: {
                    name: "String"
                }
            },
            lastModifiedTime: {
                serializedName: "lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const StatusActiveEvent = {
    type: {
        name: "Composite",
        className: "StatusActiveEvent",
        modelProperties: {
            title: {
                serializedName: "title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            trackingId: {
                serializedName: "trackingId",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            cloud: {
                serializedName: "cloud",
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            stage: {
                serializedName: "stage",
                type: {
                    name: "String"
                }
            },
            published: {
                serializedName: "published",
                type: {
                    name: "Boolean"
                }
            },
            lastModifiedTime: {
                serializedName: "lastModifiedTime",
                type: {
                    name: "DateTime"
                }
            },
            impacts: {
                serializedName: "impacts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EmergingIssueImpact"
                        }
                    }
                }
            }
        }
    }
};
const EmergingIssueImpact = {
    type: {
        name: "Composite",
        className: "EmergingIssueImpact",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            regions: {
                serializedName: "regions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImpactedRegion"
                        }
                    }
                }
            }
        }
    }
};
const ImpactedRegion = {
    type: {
        name: "Composite",
        className: "ImpactedRegion",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const MetadataEntity = {
    type: {
        name: "Composite",
        className: "MetadataEntity",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, dependsOn: {
                serializedName: "properties.dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, applicableScenarios: {
                serializedName: "properties.applicableScenarios",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, supportedValues: {
                serializedName: "properties.supportedValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataSupportedValueDetail"
                        }
                    }
                }
            } })
    }
};
const EventImpactedResource = {
    type: {
        name: "Composite",
        className: "EventImpactedResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { targetResourceType: {
                serializedName: "properties.targetResourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, targetResourceId: {
                serializedName: "properties.targetResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, targetRegion: {
                serializedName: "properties.targetRegion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, info: {
                serializedName: "properties.info",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyValueItem"
                        }
                    }
                }
            } })
    }
};
const Event = {
    type: {
        name: "Composite",
        className: "Event",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { eventType: {
                serializedName: "properties.eventType",
                type: {
                    name: "String"
                }
            }, eventSource: {
                serializedName: "properties.eventSource",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, title: {
                serializedName: "properties.title",
                type: {
                    name: "String"
                }
            }, summary: {
                serializedName: "properties.summary",
                type: {
                    name: "String"
                }
            }, header: {
                serializedName: "properties.header",
                type: {
                    name: "String"
                }
            }, level: {
                serializedName: "properties.level",
                type: {
                    name: "String"
                }
            }, eventLevel: {
                serializedName: "properties.eventLevel",
                type: {
                    name: "String"
                }
            }, externalIncidentId: {
                serializedName: "properties.externalIncidentId",
                type: {
                    name: "String"
                }
            }, reason: {
                serializedName: "properties.reason",
                type: {
                    name: "String"
                }
            }, article: {
                serializedName: "properties.article",
                type: {
                    name: "Composite",
                    className: "EventPropertiesArticle"
                }
            }, links: {
                serializedName: "properties.links",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Link"
                        }
                    }
                }
            }, impactStartTime: {
                serializedName: "properties.impactStartTime",
                type: {
                    name: "DateTime"
                }
            }, impactMitigationTime: {
                serializedName: "properties.impactMitigationTime",
                type: {
                    name: "DateTime"
                }
            }, impact: {
                serializedName: "properties.impact",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Impact"
                        }
                    }
                }
            }, recommendedActions: {
                serializedName: "properties.recommendedActions",
                type: {
                    name: "Composite",
                    className: "EventPropertiesRecommendedActions"
                }
            }, faqs: {
                serializedName: "properties.faqs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Faq"
                        }
                    }
                }
            }, isHIR: {
                serializedName: "properties.isHIR",
                type: {
                    name: "Boolean"
                }
            }, enableMicrosoftSupport: {
                serializedName: "properties.enableMicrosoftSupport",
                type: {
                    name: "Boolean"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, platformInitiated: {
                serializedName: "properties.platformInitiated",
                type: {
                    name: "Boolean"
                }
            }, enableChatWithUs: {
                serializedName: "properties.enableChatWithUs",
                type: {
                    name: "Boolean"
                }
            }, priority: {
                serializedName: "properties.priority",
                type: {
                    name: "Number"
                }
            }, lastUpdateTime: {
                serializedName: "properties.lastUpdateTime",
                type: {
                    name: "DateTime"
                }
            }, hirStage: {
                serializedName: "properties.hirStage",
                type: {
                    name: "String"
                }
            }, additionalInformation: {
                serializedName: "properties.additionalInformation",
                type: {
                    name: "Composite",
                    className: "EventPropertiesAdditionalInformation"
                }
            }, duration: {
                serializedName: "properties.duration",
                type: {
                    name: "Number"
                }
            }, impactType: {
                serializedName: "properties.impactType",
                type: {
                    name: "String"
                }
            } })
    }
};
const EmergingIssuesGetResult = {
    type: {
        name: "Composite",
        className: "EmergingIssuesGetResult",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { refreshTimestamp: {
                serializedName: "properties.refreshTimestamp",
                type: {
                    name: "DateTime"
                }
            }, statusBanners: {
                serializedName: "properties.statusBanners",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StatusBanner"
                        }
                    }
                }
            }, statusActiveEvents: {
                serializedName: "properties.statusActiveEvents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StatusActiveEvent"
                        }
                    }
                }
            } })
    }
};
const ImpactedResourceStatus = {
    type: {
        name: "Composite",
        className: "ImpactedResourceStatus",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { availabilityState: {
                serializedName: "properties.availabilityState",
                type: {
                    name: "String"
                }
            }, title: {
                serializedName: "properties.title",
                type: {
                    name: "String"
                }
            }, summary: {
                serializedName: "properties.summary",
                type: {
                    name: "String"
                }
            }, reasonType: {
                serializedName: "properties.reasonType",
                type: {
                    name: "String"
                }
            }, occurredTime: {
                serializedName: "properties.occurredTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AvailabilityStatusListResult: AvailabilityStatusListResult,
    AvailabilityStatus: AvailabilityStatus,
    AvailabilityStatusProperties: AvailabilityStatusProperties,
    AvailabilityStatusPropertiesRecentlyResolved: AvailabilityStatusPropertiesRecentlyResolved,
    RecommendedAction: RecommendedAction,
    ServiceImpactingEvent: ServiceImpactingEvent,
    ServiceImpactingEventStatus: ServiceImpactingEventStatus,
    ServiceImpactingEventIncidentProperties: ServiceImpactingEventIncidentProperties,
    ErrorResponse: ErrorResponse,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    MetadataEntityListResult: MetadataEntityListResult,
    MetadataSupportedValueDetail: MetadataSupportedValueDetail,
    Resource: Resource,
    SystemData: SystemData,
    EventImpactedResourceListResult: EventImpactedResourceListResult,
    KeyValueItem: KeyValueItem,
    Events: Events,
    EventPropertiesArticle: EventPropertiesArticle,
    Link: Link,
    LinkDisplayText: LinkDisplayText,
    Impact: Impact,
    ImpactedServiceRegion: ImpactedServiceRegion,
    Update: Update,
    EventPropertiesRecommendedActions: EventPropertiesRecommendedActions,
    EventPropertiesRecommendedActionsItem: EventPropertiesRecommendedActionsItem,
    Faq: Faq,
    EventPropertiesAdditionalInformation: EventPropertiesAdditionalInformation,
    EmergingIssueListResult: EmergingIssueListResult,
    StatusBanner: StatusBanner,
    StatusActiveEvent: StatusActiveEvent,
    EmergingIssueImpact: EmergingIssueImpact,
    ImpactedRegion: ImpactedRegion,
    ProxyResource: ProxyResource,
    MetadataEntity: MetadataEntity,
    EventImpactedResource: EventImpactedResource,
    Event: Event,
    EmergingIssuesGetResult: EmergingIssuesGetResult,
    ImpactedResourceStatus: ImpactedResourceStatus
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceUri = {
    parameterPath: "resourceUri",
    mapper: {
        serializedName: "resourceUri",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
const eventTrackingId = {
    parameterPath: "eventTrackingId",
    mapper: {
        serializedName: "eventTrackingId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const impactedResourceName = {
    parameterPath: "impactedResourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[^*#&+:<>%?]+$")
        },
        serializedName: "impactedResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const queryStartTime = {
    parameterPath: ["options", "queryStartTime"],
    mapper: {
        serializedName: "queryStartTime",
        type: {
            name: "String"
        }
    }
};
const issueName = {
    parameterPath: "issueName",
    mapper: {
        serializedName: "issueName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AvailabilityStatuses operations. */
class AvailabilityStatusesImpl {
    /**
     * Initialize a new instance of the class AvailabilityStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the current availability status for all the resources in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options) {
        const iter = this.listBySubscriptionIdPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionIdPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionId(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionIdPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionIdPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the current availability status for all the resources in the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists all historical availability transitions and impacting events for a single resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    list(resourceUri, options) {
        const iter = this.listPagingAll(resourceUri, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceUri, options, settings);
            }
        };
    }
    listPagingPage(resourceUri, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceUri, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceUri, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceUri, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceUri, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists the current availability status for all the resources in the subscription.
     * @param options The options parameters.
     */
    _listBySubscriptionId(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionIdOperationSpec$1);
    }
    /**
     * Lists the current availability status for all the resources in the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets current availability status for a single resource
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    getByResource(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, getByResourceOperationSpec$1);
    }
    /**
     * Lists all historical availability transitions and impacting events for a single resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    _list(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, listOperationSpec$5);
    }
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionIdNextOperationSpec$1);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceUri, nextLink, options) {
        return this.client.sendOperationRequest({ resourceUri, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionIdOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/availabilityStatuses",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        expand
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ResourceHealth/availabilityStatuses",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        expand
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const getByResourceOperationSpec$1 = {
    path: "/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses/current",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatus
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        expand
    ],
    urlParameters: [$host, resourceUri],
    headerParameters: [accept],
    serializer: serializer$9
};
const listOperationSpec$5 = {
    path: "/{resourceUri}/providers/Microsoft.ResourceHealth/availabilityStatuses",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        expand
    ],
    urlParameters: [$host, resourceUri],
    headerParameters: [accept],
    serializer: serializer$9
};
const listBySubscriptionIdNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceUri,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists available operations for the resourcehealth resource provider
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$4);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/providers/Microsoft.ResourceHealth/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Metadata operations. */
class MetadataImpl {
    /**
     * Initialize a new instance of the class Metadata class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of metadata entities.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of metadata entities.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Gets the list of metadata entities.
     * @param name Name of metadata entity.
     * @param options The options parameters.
     */
    getEntity(name, options) {
        return this.client.sendOperationRequest({ name, options }, getEntityOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/providers/Microsoft.ResourceHealth/metadata",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataEntityListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$7
};
const getEntityOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/metadata/{name}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataEntity
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, name],
    headerParameters: [accept],
    serializer: serializer$7
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MetadataEntityListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ImpactedResources operations. */
class ImpactedResourcesImpl {
    /**
     * Initialize a new instance of the class ImpactedResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists impacted resources in the subscription by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listBySubscriptionIdAndEventId(eventTrackingId, options) {
        const iter = this.listBySubscriptionIdAndEventIdPagingAll(eventTrackingId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdAndEventIdPagingPage(eventTrackingId, options, settings);
            }
        };
    }
    listBySubscriptionIdAndEventIdPagingPage(eventTrackingId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdAndEventIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdAndEventId(eventTrackingId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdAndEventIdNext(eventTrackingId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionIdAndEventIdPagingAll(eventTrackingId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdAndEventIdPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionIdAndEventIdPagingPage(eventTrackingId, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists impacted resources in the tenant by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listByTenantIdAndEventId(eventTrackingId, options) {
        const iter = this.listByTenantIdAndEventIdPagingAll(eventTrackingId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByTenantIdAndEventIdPagingPage(eventTrackingId, options, settings);
            }
        };
    }
    listByTenantIdAndEventIdPagingPage(eventTrackingId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantIdAndEventIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByTenantIdAndEventId(eventTrackingId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByTenantIdAndEventIdNext(eventTrackingId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByTenantIdAndEventIdPagingAll(eventTrackingId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantIdAndEventIdPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByTenantIdAndEventIdPagingPage(eventTrackingId, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists impacted resources in the subscription by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    _listBySubscriptionIdAndEventId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, listBySubscriptionIdAndEventIdOperationSpec$1);
    }
    /**
     * Gets the specific impacted resource in the subscription by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param options The options parameters.
     */
    get(eventTrackingId, impactedResourceName, options) {
        return this.client.sendOperationRequest({ eventTrackingId, impactedResourceName, options }, getOperationSpec$1);
    }
    /**
     * Lists impacted resources in the tenant by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    _listByTenantIdAndEventId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, listByTenantIdAndEventIdOperationSpec$1);
    }
    /**
     * Gets the specific impacted resource in the tenant by an event.
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param impactedResourceName Name of the Impacted Resource.
     * @param options The options parameters.
     */
    getByTenantId(eventTrackingId, impactedResourceName, options) {
        return this.client.sendOperationRequest({ eventTrackingId, impactedResourceName, options }, getByTenantIdOperationSpec);
    }
    /**
     * ListBySubscriptionIdAndEventIdNext
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionIdAndEventId
     *                 method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdAndEventIdNext(eventTrackingId, nextLink, options) {
        return this.client.sendOperationRequest({ eventTrackingId, nextLink, options }, listBySubscriptionIdAndEventIdNextOperationSpec$1);
    }
    /**
     * ListByTenantIdAndEventIdNext
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param nextLink The nextLink from the previous successful call to the ListByTenantIdAndEventId
     *                 method.
     * @param options The options parameters.
     */
    _listByTenantIdAndEventIdNext(eventTrackingId, nextLink, options) {
        return this.client.sendOperationRequest({ eventTrackingId, nextLink, options }, listByTenantIdAndEventIdNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionIdAndEventIdOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        subscriptionId,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources/{impactedResourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        eventTrackingId,
        impactedResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listByTenantIdAndEventIdOperationSpec$1 = {
    path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [$host, eventTrackingId],
    headerParameters: [accept],
    serializer: serializer$6
};
const getByTenantIdOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/impactedResources/{impactedResourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        eventTrackingId,
        impactedResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listBySubscriptionIdAndEventIdNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listByTenantIdAndEventIdNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SecurityAdvisoryImpactedResources operations. */
class SecurityAdvisoryImpactedResourcesImpl {
    /**
     * Initialize a new instance of the class SecurityAdvisoryImpactedResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listBySubscriptionIdAndEventId(eventTrackingId, options) {
        const iter = this.listBySubscriptionIdAndEventIdPagingAll(eventTrackingId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdAndEventIdPagingPage(eventTrackingId, options, settings);
            }
        };
    }
    listBySubscriptionIdAndEventIdPagingPage(eventTrackingId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdAndEventIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdAndEventId(eventTrackingId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdAndEventIdNext(eventTrackingId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionIdAndEventIdPagingAll(eventTrackingId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdAndEventIdPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionIdAndEventIdPagingPage(eventTrackingId, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    listByTenantIdAndEventId(eventTrackingId, options) {
        const iter = this.listByTenantIdAndEventIdPagingAll(eventTrackingId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByTenantIdAndEventIdPagingPage(eventTrackingId, options, settings);
            }
        };
    }
    listByTenantIdAndEventIdPagingPage(eventTrackingId, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantIdAndEventIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByTenantIdAndEventId(eventTrackingId, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByTenantIdAndEventIdNext(eventTrackingId, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByTenantIdAndEventIdPagingAll(eventTrackingId, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantIdAndEventIdPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByTenantIdAndEventIdPagingPage(eventTrackingId, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists impacted resources in the subscription by an event (Security Advisory).
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    _listBySubscriptionIdAndEventId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, listBySubscriptionIdAndEventIdOperationSpec);
    }
    /**
     * Lists impacted resources in the tenant by an event (Security Advisory).
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    _listByTenantIdAndEventId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, listByTenantIdAndEventIdOperationSpec);
    }
    /**
     * ListBySubscriptionIdAndEventIdNext
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionIdAndEventId
     *                 method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdAndEventIdNext(eventTrackingId, nextLink, options) {
        return this.client.sendOperationRequest({ eventTrackingId, nextLink, options }, listBySubscriptionIdAndEventIdNextOperationSpec);
    }
    /**
     * ListByTenantIdAndEventIdNext
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param nextLink The nextLink from the previous successful call to the ListByTenantIdAndEventId
     *                 method.
     * @param options The options parameters.
     */
    _listByTenantIdAndEventIdNext(eventTrackingId, nextLink, options) {
        return this.client.sendOperationRequest({ eventTrackingId, nextLink, options }, listByTenantIdAndEventIdNextOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionIdAndEventIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/listSecurityAdvisoryImpactedResources",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        subscriptionId,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByTenantIdAndEventIdOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/listSecurityAdvisoryImpactedResources",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [$host, eventTrackingId],
    headerParameters: [accept],
    serializer: serializer$5
};
const listBySubscriptionIdAndEventIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByTenantIdAndEventIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventImpactedResourceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        nextLink,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EventsOperations operations. */
class EventsOperationsImpl {
    /**
     * Initialize a new instance of the class EventsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists service health events in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options) {
        const iter = this.listBySubscriptionIdPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionIdPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionId(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionIdPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionIdPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists current service health events in the tenant.
     * @param options The options parameters.
     */
    listByTenantId(options) {
        const iter = this.listByTenantIdPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByTenantIdPagingPage(options, settings);
            }
        };
    }
    listByTenantIdPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByTenantId(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByTenantIdNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByTenantIdPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTenantIdPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByTenantIdPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists current service health events for given resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    listBySingleResource(resourceUri, options) {
        const iter = this.listBySingleResourcePagingAll(resourceUri, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySingleResourcePagingPage(resourceUri, options, settings);
            }
        };
    }
    listBySingleResourcePagingPage(resourceUri, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySingleResourcePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySingleResource(resourceUri, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySingleResourceNext(resourceUri, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySingleResourcePagingAll(resourceUri, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySingleResourcePagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySingleResourcePagingPage(resourceUri, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists service health events in the subscription.
     * @param options The options parameters.
     */
    _listBySubscriptionId(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionIdOperationSpec);
    }
    /**
     * Lists current service health events in the tenant.
     * @param options The options parameters.
     */
    _listByTenantId(options) {
        return this.client.sendOperationRequest({ options }, listByTenantIdOperationSpec);
    }
    /**
     * Lists current service health events for given resource.
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    _listBySingleResource(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, listBySingleResourceOperationSpec);
    }
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionIdNextOperationSpec);
    }
    /**
     * ListByTenantIdNext
     * @param nextLink The nextLink from the previous successful call to the ListByTenantId method.
     * @param options The options parameters.
     */
    _listByTenantIdNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listByTenantIdNextOperationSpec);
    }
    /**
     * ListBySingleResourceNext
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API support not nested and one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     *                    and
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param nextLink The nextLink from the previous successful call to the ListBySingleResource method.
     * @param options The options parameters.
     */
    _listBySingleResourceNext(resourceUri, nextLink, options) {
        return this.client.sendOperationRequest({ resourceUri, nextLink, options }, listBySingleResourceNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        queryStartTime
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByTenantIdOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/events",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        queryStartTime
    ],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};
const listBySingleResourceOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ResourceHealth/events",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [$host, resourceUri],
    headerParameters: [accept],
    serializer: serializer$4
};
const listBySubscriptionIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByTenantIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$4
};
const listBySingleResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Events
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceUri,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing EventOperations operations. */
class EventOperationsImpl {
    /**
     * Initialize a new instance of the class EventOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Service health event in the subscription by event tracking id
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    getBySubscriptionIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, getBySubscriptionIdAndTrackingIdOperationSpec);
    }
    /**
     * Service health event details in the subscription by event tracking id. This can be used to fetch
     * sensitive properties for Security Advisory events
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    fetchDetailsBySubscriptionIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, fetchDetailsBySubscriptionIdAndTrackingIdOperationSpec);
    }
    /**
     * Service health event in the tenant by event tracking id
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    getByTenantIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, getByTenantIdAndTrackingIdOperationSpec);
    }
    /**
     * Service health event details in the tenant by event tracking id. This can be used to fetch sensitive
     * properties for Security Advisory events
     * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
     * @param options The options parameters.
     */
    fetchDetailsByTenantIdAndTrackingId(eventTrackingId, options) {
        return this.client.sendOperationRequest({ eventTrackingId, options }, fetchDetailsByTenantIdAndTrackingIdOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getBySubscriptionIdAndTrackingIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Event
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        queryStartTime
    ],
    urlParameters: [
        $host,
        subscriptionId,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const fetchDetailsBySubscriptionIdAndTrackingIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Event
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        eventTrackingId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getByTenantIdAndTrackingIdOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Event
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        queryStartTime
    ],
    urlParameters: [$host, eventTrackingId],
    headerParameters: [accept],
    serializer: serializer$3
};
const fetchDetailsByTenantIdAndTrackingIdOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Event
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, eventTrackingId],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ChildAvailabilityStatuses operations. */
class ChildAvailabilityStatusesImpl {
    /**
     * Initialize a new instance of the class ChildAvailabilityStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in
     * the response to get the next page of availability status
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    list(resourceUri, options) {
        const iter = this.listPagingAll(resourceUri, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceUri, options, settings);
            }
        };
    }
    listPagingPage(resourceUri, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceUri, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceUri, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceUri, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceUri, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets current availability status for a single resource
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    getByResource(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, getByResourceOperationSpec);
    }
    /**
     * Lists the historical availability statuses for a single child resource. Use the nextLink property in
     * the response to get the next page of availability status
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param options The options parameters.
     */
    _list(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support one nesting level resource types :
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resource-provider-name}/{parentResourceType}/{parentResourceName}/{resourceType}/{resourceName}
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceUri, nextLink, options) {
        return this.client.sendOperationRequest({ resourceUri, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getByResourceOperationSpec = {
    path: "/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses/current",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatus
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        expand
    ],
    urlParameters: [$host, resourceUri],
    headerParameters: [accept],
    serializer: serializer$2
};
const listOperationSpec$2 = {
    path: "/{resourceUri}/providers/Microsoft.ResourceHealth/childAvailabilityStatuses",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        expand
    ],
    urlParameters: [$host, resourceUri],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceUri,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ChildResources operations. */
class ChildResourcesImpl {
    /**
     * Initialize a new instance of the class ChildResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the all the children and its current health status for a parent resource. Use the nextLink
     * property in the response to get the next page of children current health
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support not nested parent resource type:
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     * @param options The options parameters.
     */
    list(resourceUri, options) {
        const iter = this.listPagingAll(resourceUri, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceUri, options, settings);
            }
        };
    }
    listPagingPage(resourceUri, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceUri, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceUri, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceUri, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceUri, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the all the children and its current health status for a parent resource. Use the nextLink
     * property in the response to get the next page of children current health
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support not nested parent resource type:
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     * @param options The options parameters.
     */
    _list(resourceUri, options) {
        return this.client.sendOperationRequest({ resourceUri, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceUri The fully qualified ID of the resource, including the resource name and resource
     *                    type. Currently the API only support not nested parent resource type:
     *                    /subscriptions/{subscriptionId}/resourceGroups/{resource-group-name}/providers/{resource-provider-name}/{resource-type}/{resource-name}
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceUri, nextLink, options) {
        return this.client.sendOperationRequest({ resourceUri, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/{resourceUri}/providers/Microsoft.ResourceHealth/childResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        filter,
        expand
    ],
    urlParameters: [$host, resourceUri],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailabilityStatusListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        resourceUri,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EmergingIssues operations. */
class EmergingIssuesImpl {
    /**
     * Initialize a new instance of the class EmergingIssues class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists Azure services' emerging issues.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists Azure services' emerging issues.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Gets Azure services' emerging issues.
     * @param issueName The name of the emerging issue.
     * @param options The options parameters.
     */
    get(issueName, options) {
        return this.client.sendOperationRequest({ issueName, options }, getOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/emergingIssues",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmergingIssueListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.ResourceHealth/emergingIssues/{issueName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmergingIssuesGetResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, issueName],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EmergingIssueListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class MicrosoftResourceHealth extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the MicrosoftResourceHealth class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-resourcehealth/4.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-10-01";
        this.availabilityStatuses = new AvailabilityStatusesImpl(this);
        this.operations = new OperationsImpl(this);
        this.metadata = new MetadataImpl(this);
        this.impactedResources = new ImpactedResourcesImpl(this);
        this.securityAdvisoryImpactedResources = new SecurityAdvisoryImpactedResourcesImpl(this);
        this.eventsOperations = new EventsOperationsImpl(this);
        this.eventOperations = new EventOperationsImpl(this);
        this.childAvailabilityStatuses = new ChildAvailabilityStatusesImpl(this);
        this.childResources = new ChildResourcesImpl(this);
        this.emergingIssues = new EmergingIssuesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.MicrosoftResourceHealth = MicrosoftResourceHealth;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
