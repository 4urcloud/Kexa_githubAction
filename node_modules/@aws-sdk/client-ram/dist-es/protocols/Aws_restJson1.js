import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { IdempotentParameterMismatchException, InvalidClientTokenException, InvalidMaxResultsException, InvalidNextTokenException, InvalidParameterException, InvalidPolicyException, InvalidResourceTypeException, InvalidStateTransitionException, MalformedArnException, MalformedPolicyTemplateException, MissingRequiredParameterException, OperationNotPermittedException, PermissionAlreadyExistsException, PermissionLimitExceededException, PermissionVersionsLimitExceededException, ResourceArnNotFoundException, ResourceShareInvitationAlreadyAcceptedException, ResourceShareInvitationAlreadyRejectedException, ResourceShareInvitationArnNotFoundException, ResourceShareInvitationExpiredException, ResourceShareLimitExceededException, ServerInternalException, ServiceUnavailableException, TagLimitExceededException, TagPolicyViolationException, ThrottlingException, UnknownResourceException, UnmatchedPolicyPermissionException, } from "../models/models_0";
import { RAMServiceException as __BaseException } from "../models/RAMServiceException";
export const se_AcceptResourceShareInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/acceptresourceshareinvitation");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        resourceShareInvitationArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateResourceShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associateresourceshare");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        principals: (_) => _json(_),
        resourceArns: (_) => _json(_),
        resourceShareArn: [],
        sources: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateResourceSharePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associateresourcesharepermission");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        permissionArn: [],
        permissionVersion: [],
        replace: [],
        resourceShareArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createpermission");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        name: [],
        policyTemplate: [],
        resourceType: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePermissionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createpermissionversion");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        permissionArn: [],
        policyTemplate: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateResourceShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createresourceshare");
    let body;
    body = JSON.stringify(take(input, {
        allowExternalPrincipals: [],
        clientToken: [],
        name: [],
        permissionArns: (_) => _json(_),
        principals: (_) => _json(_),
        resourceArns: (_) => _json(_),
        sources: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeletePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/deletepermission");
    const query = map({
        [_pA]: [, __expectNonNull(input[_pA], `permissionArn`)],
        [_cT]: [, input[_cT]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeletePermissionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/deletepermissionversion");
    const query = map({
        [_pA]: [, __expectNonNull(input[_pA], `permissionArn`)],
        [_pV]: [__expectNonNull(input.permissionVersion, `permissionVersion`) != null, () => input[_pV].toString()],
        [_cT]: [, input[_cT]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteResourceShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/deleteresourceshare");
    const query = map({
        [_rSA]: [, __expectNonNull(input[_rSA], `resourceShareArn`)],
        [_cT]: [, input[_cT]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateResourceShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/disassociateresourceshare");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        principals: (_) => _json(_),
        resourceArns: (_) => _json(_),
        resourceShareArn: [],
        sources: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateResourceSharePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/disassociateresourcesharepermission");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        permissionArn: [],
        resourceShareArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_EnableSharingWithAwsOrganizationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/enablesharingwithawsorganization");
    let body;
    body = "";
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetPermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getpermission");
    let body;
    body = JSON.stringify(take(input, {
        permissionArn: [],
        permissionVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetResourcePoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getresourcepolicies");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        principal: [],
        resourceArns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetResourceShareAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getresourceshareassociations");
    let body;
    body = JSON.stringify(take(input, {
        associationStatus: [],
        associationType: [],
        maxResults: [],
        nextToken: [],
        principal: [],
        resourceArn: [],
        resourceShareArns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetResourceShareInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getresourceshareinvitations");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        resourceShareArns: (_) => _json(_),
        resourceShareInvitationArns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetResourceSharesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getresourceshares");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        name: [],
        nextToken: [],
        permissionArn: [],
        permissionVersion: [],
        resourceOwner: [],
        resourceShareArns: (_) => _json(_),
        resourceShareStatus: [],
        tagFilters: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPendingInvitationResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listpendinginvitationresources");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        resourceRegionScope: [],
        resourceShareInvitationArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPermissionAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listpermissionassociations");
    let body;
    body = JSON.stringify(take(input, {
        associationStatus: [],
        defaultVersion: [],
        featureSet: [],
        maxResults: [],
        nextToken: [],
        permissionArn: [],
        permissionVersion: [],
        resourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listpermissions");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        permissionType: [],
        resourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPermissionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listpermissionversions");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        permissionArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPrincipalsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listprincipals");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        principals: (_) => _json(_),
        resourceArn: [],
        resourceOwner: [],
        resourceShareArns: (_) => _json(_),
        resourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListReplacePermissionAssociationsWorkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listreplacepermissionassociationswork");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        status: [],
        workIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listresources");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        principal: [],
        resourceArns: (_) => _json(_),
        resourceOwner: [],
        resourceRegionScope: [],
        resourceShareArns: (_) => _json(_),
        resourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListResourceSharePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listresourcesharepermissions");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        resourceShareArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListResourceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listresourcetypes");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        resourceRegionScope: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PromotePermissionCreatedFromPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/promotepermissioncreatedfrompolicy");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        name: [],
        permissionArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PromoteResourceShareCreatedFromPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/promoteresourcesharecreatedfrompolicy");
    const query = map({
        [_rSA]: [, __expectNonNull(input[_rSA], `resourceShareArn`)],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_RejectResourceShareInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rejectresourceshareinvitation");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        resourceShareInvitationArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ReplacePermissionAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/replacepermissionassociations");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        fromPermissionArn: [],
        fromPermissionVersion: [],
        toPermissionArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SetDefaultPermissionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/setdefaultpermissionversion");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [],
        permissionArn: [],
        permissionVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tagresource");
    let body;
    body = JSON.stringify(take(input, {
        resourceArn: [],
        resourceShareArn: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/untagresource");
    let body;
    body = JSON.stringify(take(input, {
        resourceArn: [],
        resourceShareArn: [],
        tagKeys: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateResourceShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateresourceshare");
    let body;
    body = JSON.stringify(take(input, {
        allowExternalPrincipals: [],
        clientToken: [],
        name: [],
        resourceShareArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AcceptResourceShareInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        resourceShareInvitation: (_) => de_ResourceShareInvitation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateResourceShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        resourceShareAssociations: (_) => de_ResourceShareAssociationList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateResourceSharePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        permission: (_) => de_ResourceSharePermissionSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePermissionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        permission: (_) => de_ResourceSharePermissionDetail(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateResourceShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        resourceShare: (_) => de_ResourceShare(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        permissionStatus: __expectString,
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePermissionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        permissionStatus: __expectString,
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteResourceShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateResourceShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        resourceShareAssociations: (_) => de_ResourceShareAssociationList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateResourceSharePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_EnableSharingWithAwsOrganizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        permission: (_) => de_ResourceSharePermissionDetail(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourcePoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        policies: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceShareAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resourceShareAssociations: (_) => de_ResourceShareAssociationList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceShareInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resourceShareInvitations: (_) => de_ResourceShareInvitationList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceSharesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resourceShares: (_) => de_ResourceShareList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPendingInvitationResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resources: (_) => de_ResourceList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPermissionAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        permissions: (_) => de_AssociatedPermissionList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        permissions: (_) => de_ResourceSharePermissionList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPermissionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        permissions: (_) => de_ResourceSharePermissionList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPrincipalsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        principals: (_) => de_PrincipalList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListReplacePermissionAssociationsWorkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        replacePermissionAssociationsWorks: (_) => de_ReplacePermissionAssociationsWorkList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resources: (_) => de_ResourceList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourceSharePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        permissions: (_) => de_ResourceSharePermissionList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourceTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resourceTypes: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PromotePermissionCreatedFromPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        permission: (_) => de_ResourceSharePermissionSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PromoteResourceShareCreatedFromPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RejectResourceShareInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        resourceShareInvitation: (_) => de_ResourceShareInvitation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ReplacePermissionAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        replacePermissionAssociationsWork: (_) => de_ReplacePermissionAssociationsWork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SetDefaultPermissionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        returnValue: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResourceShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        resourceShare: (_) => de_ResourceShare(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.ram#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InvalidClientTokenException":
        case "com.amazonaws.ram#InvalidClientTokenException":
            throw await de_InvalidClientTokenExceptionRes(parsedOutput, context);
        case "MalformedArnException":
        case "com.amazonaws.ram#MalformedArnException":
            throw await de_MalformedArnExceptionRes(parsedOutput, context);
        case "OperationNotPermittedException":
        case "com.amazonaws.ram#OperationNotPermittedException":
            throw await de_OperationNotPermittedExceptionRes(parsedOutput, context);
        case "ResourceShareInvitationAlreadyAcceptedException":
        case "com.amazonaws.ram#ResourceShareInvitationAlreadyAcceptedException":
            throw await de_ResourceShareInvitationAlreadyAcceptedExceptionRes(parsedOutput, context);
        case "ResourceShareInvitationAlreadyRejectedException":
        case "com.amazonaws.ram#ResourceShareInvitationAlreadyRejectedException":
            throw await de_ResourceShareInvitationAlreadyRejectedExceptionRes(parsedOutput, context);
        case "ResourceShareInvitationArnNotFoundException":
        case "com.amazonaws.ram#ResourceShareInvitationArnNotFoundException":
            throw await de_ResourceShareInvitationArnNotFoundExceptionRes(parsedOutput, context);
        case "ResourceShareInvitationExpiredException":
        case "com.amazonaws.ram#ResourceShareInvitationExpiredException":
            throw await de_ResourceShareInvitationExpiredExceptionRes(parsedOutput, context);
        case "ServerInternalException":
        case "com.amazonaws.ram#ServerInternalException":
            throw await de_ServerInternalExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.ram#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.ram#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidStateTransitionException":
        case "com.amazonaws.ram#InvalidStateTransitionException":
            throw await de_InvalidStateTransitionExceptionRes(parsedOutput, context);
        case "ResourceShareLimitExceededException":
        case "com.amazonaws.ram#ResourceShareLimitExceededException":
            throw await de_ResourceShareLimitExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.ram#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "UnknownResourceException":
        case "com.amazonaws.ram#UnknownResourceException":
            throw await de_UnknownResourceExceptionRes(parsedOutput, context);
        case "InvalidPolicyException":
        case "com.amazonaws.ram#InvalidPolicyException":
            throw await de_InvalidPolicyExceptionRes(parsedOutput, context);
        case "MalformedPolicyTemplateException":
        case "com.amazonaws.ram#MalformedPolicyTemplateException":
            throw await de_MalformedPolicyTemplateExceptionRes(parsedOutput, context);
        case "PermissionAlreadyExistsException":
        case "com.amazonaws.ram#PermissionAlreadyExistsException":
            throw await de_PermissionAlreadyExistsExceptionRes(parsedOutput, context);
        case "PermissionLimitExceededException":
        case "com.amazonaws.ram#PermissionLimitExceededException":
            throw await de_PermissionLimitExceededExceptionRes(parsedOutput, context);
        case "PermissionVersionsLimitExceededException":
        case "com.amazonaws.ram#PermissionVersionsLimitExceededException":
            throw await de_PermissionVersionsLimitExceededExceptionRes(parsedOutput, context);
        case "TagLimitExceededException":
        case "com.amazonaws.ram#TagLimitExceededException":
            throw await de_TagLimitExceededExceptionRes(parsedOutput, context);
        case "TagPolicyViolationException":
        case "com.amazonaws.ram#TagPolicyViolationException":
            throw await de_TagPolicyViolationExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.ram#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "ResourceArnNotFoundException":
        case "com.amazonaws.ram#ResourceArnNotFoundException":
            throw await de_ResourceArnNotFoundExceptionRes(parsedOutput, context);
        case "InvalidMaxResultsException":
        case "com.amazonaws.ram#InvalidMaxResultsException":
            throw await de_InvalidMaxResultsExceptionRes(parsedOutput, context);
        case "MissingRequiredParameterException":
        case "com.amazonaws.ram#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        case "InvalidResourceTypeException":
        case "com.amazonaws.ram#InvalidResourceTypeException":
            throw await de_InvalidResourceTypeExceptionRes(parsedOutput, context);
        case "UnmatchedPolicyPermissionException":
        case "com.amazonaws.ram#UnmatchedPolicyPermissionException":
            throw await de_UnmatchedPolicyPermissionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidClientTokenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidClientTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidMaxResultsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidMaxResultsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidPolicyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidResourceTypeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidResourceTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidStateTransitionExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidStateTransitionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MalformedArnExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MalformedArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MalformedPolicyTemplateExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MalformedPolicyTemplateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MissingRequiredParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MissingRequiredParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_OperationNotPermittedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new OperationNotPermittedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PermissionAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new PermissionAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PermissionLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new PermissionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PermissionVersionsLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new PermissionVersionsLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceArnNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceArnNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceShareInvitationAlreadyAcceptedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceShareInvitationAlreadyAcceptedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceShareInvitationAlreadyRejectedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceShareInvitationAlreadyRejectedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceShareInvitationArnNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceShareInvitationArnNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceShareInvitationExpiredExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceShareInvitationExpiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceShareLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceShareLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServerInternalExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServerInternalException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TagLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TagLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TagPolicyViolationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TagPolicyViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnknownResourceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnknownResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnmatchedPolicyPermissionExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnmatchedPolicyPermissionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_AssociatedPermission = (output, context) => {
    return take(output, {
        arn: __expectString,
        defaultVersion: __expectBoolean,
        featureSet: __expectString,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        permissionVersion: __expectString,
        resourceShareArn: __expectString,
        resourceType: __expectString,
        status: __expectString,
    });
};
const de_AssociatedPermissionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociatedPermission(entry, context);
    });
    return retVal;
};
const de_Principal = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        external: __expectBoolean,
        id: __expectString,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        resourceShareArn: __expectString,
    });
};
const de_PrincipalList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Principal(entry, context);
    });
    return retVal;
};
const de_ReplacePermissionAssociationsWork = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        fromPermissionArn: __expectString,
        fromPermissionVersion: __expectString,
        id: __expectString,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        statusMessage: __expectString,
        toPermissionArn: __expectString,
        toPermissionVersion: __expectString,
    });
};
const de_ReplacePermissionAssociationsWorkList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplacePermissionAssociationsWork(entry, context);
    });
    return retVal;
};
const de_Resource = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        resourceGroupArn: __expectString,
        resourceRegionScope: __expectString,
        resourceShareArn: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        type: __expectString,
    });
};
const de_ResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Resource(entry, context);
    });
    return retVal;
};
const de_ResourceShare = (output, context) => {
    return take(output, {
        allowExternalPrincipals: __expectBoolean,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        featureSet: __expectString,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        owningAccountId: __expectString,
        resourceShareArn: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        tags: _json,
    });
};
const de_ResourceShareAssociation = (output, context) => {
    return take(output, {
        associatedEntity: __expectString,
        associationType: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        external: __expectBoolean,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        resourceShareArn: __expectString,
        resourceShareName: __expectString,
        status: __expectString,
        statusMessage: __expectString,
    });
};
const de_ResourceShareAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceShareAssociation(entry, context);
    });
    return retVal;
};
const de_ResourceShareInvitation = (output, context) => {
    return take(output, {
        invitationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        receiverAccountId: __expectString,
        receiverArn: __expectString,
        resourceShareArn: __expectString,
        resourceShareAssociations: (_) => de_ResourceShareAssociationList(_, context),
        resourceShareInvitationArn: __expectString,
        resourceShareName: __expectString,
        senderAccountId: __expectString,
        status: __expectString,
    });
};
const de_ResourceShareInvitationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceShareInvitation(entry, context);
    });
    return retVal;
};
const de_ResourceShareList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceShare(entry, context);
    });
    return retVal;
};
const de_ResourceSharePermissionDetail = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultVersion: __expectBoolean,
        featureSet: __expectString,
        isResourceTypeDefault: __expectBoolean,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        permission: __expectString,
        permissionType: __expectString,
        resourceType: __expectString,
        status: __expectString,
        tags: _json,
        version: __expectString,
    });
};
const de_ResourceSharePermissionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceSharePermissionSummary(entry, context);
    });
    return retVal;
};
const de_ResourceSharePermissionSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultVersion: __expectBoolean,
        featureSet: __expectString,
        isResourceTypeDefault: __expectBoolean,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        permissionType: __expectString,
        resourceType: __expectString,
        status: __expectString,
        tags: _json,
        version: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _cT = "clientToken";
const _pA = "permissionArn";
const _pV = "permissionVersion";
const _rSA = "resourceShareArn";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
