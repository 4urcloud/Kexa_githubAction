import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { RAMClientResolvedConfig } from "../RAMClient";
export interface RAMHttpAuthSchemeParameters extends HttpAuthSchemeParameters {
  region?: string;
}
export interface RAMHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    RAMClientResolvedConfig,
    HandlerExecutionContext,
    RAMHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultRAMHttpAuthSchemeParametersProvider: (
  config: RAMClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<RAMHttpAuthSchemeParameters>;
export interface RAMHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<RAMHttpAuthSchemeParameters> {}
export declare const defaultRAMHttpAuthSchemeProvider: RAMHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: RAMHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: RAMHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
