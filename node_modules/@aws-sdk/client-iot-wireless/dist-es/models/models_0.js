import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { IoTWirelessServiceException as __BaseException } from "./IoTWirelessServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const ApplicationConfigType = {
    SemtechGeoLocation: "SemtechGeolocation",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const BatteryLevel = {
    CRITICAL: "critical",
    LOW: "low",
    NORMAL: "normal",
};
export const SigningAlg = {
    Ed25519: "Ed25519",
    P256r1: "P256r1",
};
export const ConnectionStatus = {
    CONNECTED: "Connected",
    DISCONNECTED: "Disconnected",
};
export const EventNotificationTopicStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const ExpressionType = {
    MqttTopic: "MqttTopic",
    RuleName: "RuleName",
};
export const SupportedRfRegion = {
    AS923_1: "AS923-1",
    AS923_2: "AS923-2",
    AS923_3: "AS923-3",
    AS923_4: "AS923-4",
    AU915: "AU915",
    CN470: "CN470",
    CN779: "CN779",
    EU433: "EU433",
    EU868: "EU868",
    IN865: "IN865",
    KR920: "KR920",
    RU864: "RU864",
    US915: "US915",
};
export const DlClass = {
    ClassB: "ClassB",
    ClassC: "ClassC",
};
export const LogLevel = {
    DISABLED: "DISABLED",
    ERROR: "ERROR",
    INFO: "INFO",
};
export const MulticastFrameInfo = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const WirelessDeviceFrameInfo = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const PositioningConfigStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const WirelessDeviceType = {
    LoRaWAN: "LoRaWAN",
    Sidewalk: "Sidewalk",
};
export const WirelessGatewayTaskStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    FIRST_RETRY: "FIRST_RETRY",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    SECOND_RETRY: "SECOND_RETRY",
};
export const DeviceProfileType = {
    LoRaWAN: "LoRaWAN",
    Sidewalk: "Sidewalk",
};
export const DeviceState = {
    PROVISIONED: "Provisioned",
    REGISTEREDNOTSEEN: "RegisteredNotSeen",
    REGISTEREDREACHABLE: "RegisteredReachable",
    REGISTEREDUNREACHABLE: "RegisteredUnreachable",
};
export const PartnerType = {
    Sidewalk: "Sidewalk",
};
export const DownlinkMode = {
    CONCURRENT: "CONCURRENT",
    SEQUENTIAL: "SEQUENTIAL",
    USING_UPLINK_GATEWAY: "USING_UPLINK_GATEWAY",
};
export const Event = {
    ACK: "ack",
    DISCOVERED: "discovered",
    LOST: "lost",
    NACK: "nack",
    PASSTHROUGH: "passthrough",
};
export const IdentifierType = {
    DevEui: "DevEui",
    GatewayEui: "GatewayEui",
    PartnerAccountId: "PartnerAccountId",
    WirelessDeviceId: "WirelessDeviceId",
    WirelessGatewayId: "WirelessGatewayId",
};
export const EventNotificationPartnerType = {
    Sidewalk: "Sidewalk",
};
export const EventNotificationResourceType = {
    SidewalkAccount: "SidewalkAccount",
    WirelessDevice: "WirelessDevice",
    WirelessGateway: "WirelessGateway",
};
export const FuotaDeviceStatus = {
    FragAlgo_unsupported: "FragAlgo_unsupported",
    FragIndex_unsupported: "FragIndex_unsupported",
    Initial: "Initial",
    MICError: "MICError",
    MemoryError: "MemoryError",
    MissingFrag: "MissingFrag",
    Not_enough_memory: "Not_enough_memory",
    Package_Not_Supported: "Package_Not_Supported",
    SessionCnt_replay: "SessionCnt_replay",
    Successful: "Successful",
    Wrong_descriptor: "Wrong_descriptor",
};
export const FuotaTaskStatus = {
    Delete_Waiting: "Delete_Waiting",
    FuotaDone: "FuotaDone",
    FuotaSession_Waiting: "FuotaSession_Waiting",
    In_FuotaSession: "In_FuotaSession",
    Pending: "Pending",
};
export const WirelessDeviceEvent = {
    Downlink_Data: "Downlink_Data",
    Join: "Join",
    Registration: "Registration",
    Rejoin: "Rejoin",
    Uplink_Data: "Uplink_Data",
};
export const WirelessGatewayEvent = {
    CUPS_Request: "CUPS_Request",
    Certificate: "Certificate",
};
export const WirelessGatewayType = {
    LoRaWAN: "LoRaWAN",
};
export const PositionResourceType = {
    WirelessDevice: "WirelessDevice",
    WirelessGateway: "WirelessGateway",
};
export const PositionSolverProvider = {
    SEMTECH: "Semtech",
};
export const PositionSolverType = {
    GNSS: "GNSS",
};
export const PositionConfigurationFec = {
    NONE: "NONE",
    ROSE: "ROSE",
};
export const PositionConfigurationStatus = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
export const WirelessGatewayServiceType = {
    CUPS: "CUPS",
    LNS: "LNS",
};
export const WirelessDeviceIdType = {
    DevEui: "DevEui",
    SidewalkManufacturingSn: "SidewalkManufacturingSn",
    ThingName: "ThingName",
    WirelessDeviceId: "WirelessDeviceId",
};
export const WirelessDeviceSidewalkStatus = {
    ACTIVATED: "ACTIVATED",
    PROVISIONED: "PROVISIONED",
    REGISTERED: "REGISTERED",
    UNKNOWN: "UNKNOWN",
};
export const ImportTaskStatus = {
    COMPLETE: "COMPLETE",
    DELETING: "DELETING",
    FAILED: "FAILED",
    INITIALIZED: "INITIALIZED",
    INITIALIZING: "INITIALIZING",
    PENDING: "PENDING",
};
export const WirelessGatewayIdType = {
    GatewayEui: "GatewayEui",
    ThingName: "ThingName",
    WirelessGatewayId: "WirelessGatewayId",
};
export const OnboardStatus = {
    FAILED: "FAILED",
    INITIALIZED: "INITIALIZED",
    ONBOARDED: "ONBOARDED",
    PENDING: "PENDING",
};
export const SidewalkAccountInfoFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AppServerPrivateKey && { AppServerPrivateKey: SENSITIVE_STRING }),
});
export const AssociateAwsAccountWithPartnerAccountRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sidewalk && { Sidewalk: SidewalkAccountInfoFilterSensitiveLog(obj.Sidewalk) }),
});
export const AssociateAwsAccountWithPartnerAccountResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sidewalk && { Sidewalk: SidewalkAccountInfoFilterSensitiveLog(obj.Sidewalk) }),
});
export const SidewalkGetDeviceProfileFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ApplicationServerPublicKey && { ApplicationServerPublicKey: SENSITIVE_STRING }),
});
export const GetDeviceProfileResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sidewalk && { Sidewalk: SidewalkGetDeviceProfileFilterSensitiveLog(obj.Sidewalk) }),
});
export const SidewalkAccountInfoWithFingerprintFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Fingerprint && { Fingerprint: SENSITIVE_STRING }),
});
export const GetPartnerAccountResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sidewalk && { Sidewalk: SidewalkAccountInfoWithFingerprintFilterSensitiveLog(obj.Sidewalk) }),
});
export const ListPartnerAccountsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sidewalk && {
        Sidewalk: obj.Sidewalk.map((item) => SidewalkAccountInfoWithFingerprintFilterSensitiveLog(item)),
    }),
});
