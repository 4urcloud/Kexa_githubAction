import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { WorkDocsServiceException as __BaseException } from "./WorkDocsServiceException";
/**
 * @public
 */
export interface AbortDocumentVersionUploadRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The ID of the version.</p>
     */
    VersionId: string | undefined;
}
/**
 * @public
 * <p>The resource hierarchy is changing.</p>
 */
export declare class ConcurrentModificationException extends __BaseException {
    readonly name: "ConcurrentModificationException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
}
/**
 * @public
 * <p>The resource does not exist.</p>
 */
export declare class EntityNotExistsException extends __BaseException {
    readonly name: "EntityNotExistsException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @public
     * <p>The IDs of the non-existent resources.</p>
     */
    EntityIds?: string[];
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<EntityNotExistsException, __BaseException>);
}
/**
 * @public
 * <p>The Directory Service cannot reach an on-premises instance. Or a dependency
 *             under the control of the organization is failing, such as a connected Active
 *             Directory.</p>
 */
export declare class FailedDependencyException extends __BaseException {
    readonly name: "FailedDependencyException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<FailedDependencyException, __BaseException>);
}
/**
 * @public
 * <p>The specified document version is not in the INITIALIZED state.</p>
 */
export declare class ProhibitedStateException extends __BaseException {
    readonly name: "ProhibitedStateException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ProhibitedStateException, __BaseException>);
}
/**
 * @public
 * <p>One or more of the dependencies is unavailable.</p>
 */
export declare class ServiceUnavailableException extends __BaseException {
    readonly name: "ServiceUnavailableException";
    readonly $fault: "server";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
}
/**
 * @public
 * <p>The operation is not permitted.</p>
 */
export declare class UnauthorizedOperationException extends __BaseException {
    readonly name: "UnauthorizedOperationException";
    readonly $fault: "client";
    Message?: string;
    Code?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnauthorizedOperationException, __BaseException>);
}
/**
 * @public
 * <p>The caller does not have access to perform the action on the resource.</p>
 */
export declare class UnauthorizedResourceAccessException extends __BaseException {
    readonly name: "UnauthorizedResourceAccessException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<UnauthorizedResourceAccessException, __BaseException>);
}
/**
 * @public
 */
export interface ActivateUserRequest {
    /**
     * @public
     * <p>The ID of the user.</p>
     */
    UserId: string | undefined;
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
}
/**
 * @public
 * @enum
 */
export declare const LocaleType: {
    readonly DE: "de";
    readonly DEFAULT: "default";
    readonly EN: "en";
    readonly ES: "es";
    readonly FR: "fr";
    readonly JA: "ja";
    readonly KO: "ko";
    readonly PT_BR: "pt_BR";
    readonly RU: "ru";
    readonly ZH_CN: "zh_CN";
    readonly ZH_TW: "zh_TW";
};
/**
 * @public
 */
export type LocaleType = (typeof LocaleType)[keyof typeof LocaleType];
/**
 * @public
 * @enum
 */
export declare const UserStatusType: {
    readonly ACTIVE: "ACTIVE";
    readonly INACTIVE: "INACTIVE";
    readonly PENDING: "PENDING";
};
/**
 * @public
 */
export type UserStatusType = (typeof UserStatusType)[keyof typeof UserStatusType];
/**
 * @public
 * @enum
 */
export declare const StorageType: {
    readonly QUOTA: "QUOTA";
    readonly UNLIMITED: "UNLIMITED";
};
/**
 * @public
 */
export type StorageType = (typeof StorageType)[keyof typeof StorageType];
/**
 * @public
 * <p>Describes the storage for a user.</p>
 */
export interface StorageRuleType {
    /**
     * @public
     * <p>The amount of storage allocated, in bytes.</p>
     */
    StorageAllocatedInBytes?: number;
    /**
     * @public
     * <p>The type of storage.</p>
     */
    StorageType?: StorageType;
}
/**
 * @public
 * <p>Describes the storage for a user.</p>
 */
export interface UserStorageMetadata {
    /**
     * @public
     * <p>The amount of storage used, in bytes.</p>
     */
    StorageUtilizedInBytes?: number;
    /**
     * @public
     * <p>The storage for a user.</p>
     */
    StorageRule?: StorageRuleType;
}
/**
 * @public
 * @enum
 */
export declare const UserType: {
    readonly ADMIN: "ADMIN";
    readonly MINIMALUSER: "MINIMALUSER";
    readonly POWERUSER: "POWERUSER";
    readonly USER: "USER";
    readonly WORKSPACESUSER: "WORKSPACESUSER";
};
/**
 * @public
 */
export type UserType = (typeof UserType)[keyof typeof UserType];
/**
 * @public
 * <p>Describes a user.</p>
 */
export interface User {
    /**
     * @public
     * <p>The ID of the user.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The login name of the user.</p>
     */
    Username?: string;
    /**
     * @public
     * <p>The email address of the user.</p>
     */
    EmailAddress?: string;
    /**
     * @public
     * <p>The given name of the user.</p>
     */
    GivenName?: string;
    /**
     * @public
     * <p>The surname of the user.</p>
     */
    Surname?: string;
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId?: string;
    /**
     * @public
     * <p>The ID of the root folder.</p>
     */
    RootFolderId?: string;
    /**
     * @public
     * <p>The ID of the recycle bin folder.</p>
     */
    RecycleBinFolderId?: string;
    /**
     * @public
     * <p>The status of the user.</p>
     */
    Status?: UserStatusType;
    /**
     * @public
     * <p>The type of user.</p>
     */
    Type?: UserType;
    /**
     * @public
     * <p>The time when the user was created.</p>
     */
    CreatedTimestamp?: Date;
    /**
     * @public
     * <p>The time when the user was modified.</p>
     */
    ModifiedTimestamp?: Date;
    /**
     * @public
     * <p>The time zone ID of the user.</p>
     */
    TimeZoneId?: string;
    /**
     * @public
     * <p>The locale of the user.</p>
     */
    Locale?: LocaleType;
    /**
     * @public
     * <p>The storage for the user.</p>
     */
    Storage?: UserStorageMetadata;
}
/**
 * @public
 */
export interface ActivateUserResponse {
    /**
     * @public
     * <p>The user information.</p>
     */
    User?: User;
}
/**
 * @public
 * @enum
 */
export declare const CommentStatusType: {
    readonly DELETED: "DELETED";
    readonly DRAFT: "DRAFT";
    readonly PUBLISHED: "PUBLISHED";
};
/**
 * @public
 */
export type CommentStatusType = (typeof CommentStatusType)[keyof typeof CommentStatusType];
/**
 * @public
 * <p>Describes the metadata of a comment.</p>
 */
export interface CommentMetadata {
    /**
     * @public
     * <p>The ID of the comment.</p>
     */
    CommentId?: string;
    /**
     * @public
     * <p>The user who made the comment.</p>
     */
    Contributor?: User;
    /**
     * @public
     * <p>The timestamp that the comment was created.</p>
     */
    CreatedTimestamp?: Date;
    /**
     * @public
     * <p>The status of the comment.</p>
     */
    CommentStatus?: CommentStatusType;
    /**
     * @public
     * <p>The ID of the user being replied to.</p>
     */
    RecipientId?: string;
    /**
     * @public
     * <p>The ID of the user who made the comment.</p>
     */
    ContributorId?: string;
}
/**
 * @public
 * <p>Describes the metadata of the user.</p>
 */
export interface UserMetadata {
    /**
     * @public
     * <p>The ID of the user.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The name of the user.</p>
     */
    Username?: string;
    /**
     * @public
     * <p>The given name of the user before a rename operation.</p>
     */
    GivenName?: string;
    /**
     * @public
     * <p>The surname of the user.</p>
     */
    Surname?: string;
    /**
     * @public
     * <p>The email address of the user.</p>
     */
    EmailAddress?: string;
}
/**
 * @public
 * @enum
 */
export declare const ResourceType: {
    readonly DOCUMENT: "DOCUMENT";
    readonly FOLDER: "FOLDER";
};
/**
 * @public
 */
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
/**
 * @public
 * <p>Describes the metadata of a resource.</p>
 */
export interface ResourceMetadata {
    /**
     * @public
     * <p>The type of resource.</p>
     */
    Type?: ResourceType;
    /**
     * @public
     * <p>The name of the resource.</p>
     */
    Name?: string;
    /**
     * @public
     * <p>The original name of the resource before a rename operation.</p>
     */
    OriginalName?: string;
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The version ID of the resource. This is an optional field and is filled for action
     *             on document version.</p>
     */
    VersionId?: string;
    /**
     * @public
     * <p>The owner of the resource.</p>
     */
    Owner?: UserMetadata;
    /**
     * @public
     * <p>The parent ID of the resource before a rename operation.</p>
     */
    ParentId?: string;
}
/**
 * @public
 * <p>Describes the metadata of a user group.</p>
 */
export interface GroupMetadata {
    /**
     * @public
     * <p>The ID of the user group.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The name of the group.</p>
     */
    Name?: string;
}
/**
 * @public
 * <p>Describes the users or user groups.</p>
 */
export interface Participants {
    /**
     * @public
     * <p>The list of users.</p>
     */
    Users?: UserMetadata[];
    /**
     * @public
     * <p>The list of user groups.</p>
     */
    Groups?: GroupMetadata[];
}
/**
 * @public
 * @enum
 */
export declare const ActivityType: {
    readonly DOCUMENT_ANNOTATION_ADDED: "DOCUMENT_ANNOTATION_ADDED";
    readonly DOCUMENT_ANNOTATION_DELETED: "DOCUMENT_ANNOTATION_DELETED";
    readonly DOCUMENT_CHECKED_IN: "DOCUMENT_CHECKED_IN";
    readonly DOCUMENT_CHECKED_OUT: "DOCUMENT_CHECKED_OUT";
    readonly DOCUMENT_COMMENT_ADDED: "DOCUMENT_COMMENT_ADDED";
    readonly DOCUMENT_COMMENT_DELETED: "DOCUMENT_COMMENT_DELETED";
    readonly DOCUMENT_MOVED: "DOCUMENT_MOVED";
    readonly DOCUMENT_RECYCLED: "DOCUMENT_RECYCLED";
    readonly DOCUMENT_RENAMED: "DOCUMENT_RENAMED";
    readonly DOCUMENT_RESTORED: "DOCUMENT_RESTORED";
    readonly DOCUMENT_REVERTED: "DOCUMENT_REVERTED";
    readonly DOCUMENT_SHAREABLE_LINK_CREATED: "DOCUMENT_SHAREABLE_LINK_CREATED";
    readonly DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED: "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED";
    readonly DOCUMENT_SHAREABLE_LINK_REMOVED: "DOCUMENT_SHAREABLE_LINK_REMOVED";
    readonly DOCUMENT_SHARED: "DOCUMENT_SHARED";
    readonly DOCUMENT_SHARE_PERMISSION_CHANGED: "DOCUMENT_SHARE_PERMISSION_CHANGED";
    readonly DOCUMENT_UNSHARED: "DOCUMENT_UNSHARED";
    readonly DOCUMENT_VERSION_DELETED: "DOCUMENT_VERSION_DELETED";
    readonly DOCUMENT_VERSION_DOWNLOADED: "DOCUMENT_VERSION_DOWNLOADED";
    readonly DOCUMENT_VERSION_UPLOADED: "DOCUMENT_VERSION_UPLOADED";
    readonly DOCUMENT_VERSION_VIEWED: "DOCUMENT_VERSION_VIEWED";
    readonly FOLDER_CREATED: "FOLDER_CREATED";
    readonly FOLDER_DELETED: "FOLDER_DELETED";
    readonly FOLDER_MOVED: "FOLDER_MOVED";
    readonly FOLDER_RECYCLED: "FOLDER_RECYCLED";
    readonly FOLDER_RENAMED: "FOLDER_RENAMED";
    readonly FOLDER_RESTORED: "FOLDER_RESTORED";
    readonly FOLDER_SHAREABLE_LINK_CREATED: "FOLDER_SHAREABLE_LINK_CREATED";
    readonly FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED: "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED";
    readonly FOLDER_SHAREABLE_LINK_REMOVED: "FOLDER_SHAREABLE_LINK_REMOVED";
    readonly FOLDER_SHARED: "FOLDER_SHARED";
    readonly FOLDER_SHARE_PERMISSION_CHANGED: "FOLDER_SHARE_PERMISSION_CHANGED";
    readonly FOLDER_UNSHARED: "FOLDER_UNSHARED";
};
/**
 * @public
 */
export type ActivityType = (typeof ActivityType)[keyof typeof ActivityType];
/**
 * @public
 * <p>Describes the activity information.</p>
 */
export interface Activity {
    /**
     * @public
     * <p>The activity type.</p>
     */
    Type?: ActivityType;
    /**
     * @public
     * <p>The timestamp when the action was performed.</p>
     */
    TimeStamp?: Date;
    /**
     * @public
     * <p>Indicates whether an activity is indirect or direct. An indirect activity results
     *             from a direct activity performed on a parent resource. For example, sharing a parent
     *             folder (the direct activity) shares all of the subfolders and documents within the
     *             parent folder (the indirect activity).</p>
     */
    IsIndirectActivity?: boolean;
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId?: string;
    /**
     * @public
     * <p>The user who performed the action.</p>
     */
    Initiator?: UserMetadata;
    /**
     * @public
     * <p>The list of users or groups impacted by this action. This is an optional field and
     *             is filled for the following sharing activities: DOCUMENT_SHARED, DOCUMENT_SHARED,
     *             DOCUMENT_UNSHARED, FOLDER_SHARED, FOLDER_UNSHARED.</p>
     */
    Participants?: Participants;
    /**
     * @public
     * <p>The metadata of the resource involved in the user action.</p>
     */
    ResourceMetadata?: ResourceMetadata;
    /**
     * @public
     * <p>The original parent of the resource. This is an optional field and is filled for
     *             move activities.</p>
     */
    OriginalParent?: ResourceMetadata;
    /**
     * @public
     * <p>Metadata of the commenting activity. This is an optional field and is filled for
     *             commenting activities.</p>
     */
    CommentMetadata?: CommentMetadata;
}
/**
 * @public
 * @enum
 */
export declare const AdditionalResponseFieldType: {
    readonly WEBURL: "WEBURL";
};
/**
 * @public
 */
export type AdditionalResponseFieldType = (typeof AdditionalResponseFieldType)[keyof typeof AdditionalResponseFieldType];
/**
 * @public
 * <p>Set of options which defines notification preferences of given action.</p>
 */
export interface NotificationOptions {
    /**
     * @public
     * <p>Boolean value to indicate an email notification should be sent to the
     *             recipients.</p>
     */
    SendEmail?: boolean;
    /**
     * @public
     * <p>Text value to be included in the email body.</p>
     */
    EmailMessage?: string;
}
/**
 * @public
 * @enum
 */
export declare const RoleType: {
    readonly CONTRIBUTOR: "CONTRIBUTOR";
    readonly COOWNER: "COOWNER";
    readonly OWNER: "OWNER";
    readonly VIEWER: "VIEWER";
};
/**
 * @public
 */
export type RoleType = (typeof RoleType)[keyof typeof RoleType];
/**
 * @public
 * @enum
 */
export declare const PrincipalType: {
    readonly ANONYMOUS: "ANONYMOUS";
    readonly GROUP: "GROUP";
    readonly INVITE: "INVITE";
    readonly ORGANIZATION: "ORGANIZATION";
    readonly USER: "USER";
};
/**
 * @public
 */
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
/**
 * @public
 * <p>Describes the recipient type and ID, if available.</p>
 */
export interface SharePrincipal {
    /**
     * @public
     * <p>The ID of the recipient.</p>
     */
    Id: string | undefined;
    /**
     * @public
     * <p>The type of the recipient.</p>
     */
    Type: PrincipalType | undefined;
    /**
     * @public
     * <p>The role of the recipient.</p>
     */
    Role: RoleType | undefined;
}
/**
 * @public
 */
export interface AddResourcePermissionsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    ResourceId: string | undefined;
    /**
     * @public
     * <p>The users, groups, or organization being granted permission.</p>
     */
    Principals: SharePrincipal[] | undefined;
    /**
     * @public
     * <p>The notification options.</p>
     */
    NotificationOptions?: NotificationOptions;
}
/**
 * @public
 * @enum
 */
export declare const ShareStatusType: {
    readonly FAILURE: "FAILURE";
    readonly SUCCESS: "SUCCESS";
};
/**
 * @public
 */
export type ShareStatusType = (typeof ShareStatusType)[keyof typeof ShareStatusType];
/**
 * @public
 * <p>Describes the share results of a resource.</p>
 */
export interface ShareResult {
    /**
     * @public
     * <p>The ID of the principal.</p>
     */
    PrincipalId?: string;
    /**
     * @public
     * <p>The ID of the invited user.</p>
     */
    InviteePrincipalId?: string;
    /**
     * @public
     * <p>The role.</p>
     */
    Role?: RoleType;
    /**
     * @public
     * <p>The status.</p>
     */
    Status?: ShareStatusType;
    /**
     * @public
     * <p>The ID of the resource that was shared.</p>
     */
    ShareId?: string;
    /**
     * @public
     * <p>The status message.</p>
     */
    StatusMessage?: string;
}
/**
 * @public
 */
export interface AddResourcePermissionsResponse {
    /**
     * @public
     * <p>The share results.</p>
     */
    ShareResults?: ShareResult[];
}
/**
 * @public
 * @enum
 */
export declare const CommentVisibilityType: {
    readonly PRIVATE: "PRIVATE";
    readonly PUBLIC: "PUBLIC";
};
/**
 * @public
 */
export type CommentVisibilityType = (typeof CommentVisibilityType)[keyof typeof CommentVisibilityType];
/**
 * @public
 */
export interface CreateCommentRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The ID of the document version.</p>
     */
    VersionId: string | undefined;
    /**
     * @public
     * <p>The ID of the parent comment.</p>
     */
    ParentId?: string;
    /**
     * @public
     * <p>The ID of the root comment in the thread.</p>
     */
    ThreadId?: string;
    /**
     * @public
     * <p>The text of the comment.</p>
     */
    Text: string | undefined;
    /**
     * @public
     * <p>The visibility of the comment. Options are either PRIVATE, where the comment is
     *             visible only to the comment author and document owner and co-owners, or PUBLIC, where
     *             the comment is visible to document owners, co-owners, and contributors.</p>
     */
    Visibility?: CommentVisibilityType;
    /**
     * @public
     * <p>Set this parameter to TRUE to send an email out to the document collaborators after
     *             the comment is created.</p>
     */
    NotifyCollaborators?: boolean;
}
/**
 * @public
 * <p>Describes a comment.</p>
 */
export interface Comment {
    /**
     * @public
     * <p>The ID of the comment.</p>
     */
    CommentId: string | undefined;
    /**
     * @public
     * <p>The ID of the parent comment.</p>
     */
    ParentId?: string;
    /**
     * @public
     * <p>The ID of the root comment in the thread.</p>
     */
    ThreadId?: string;
    /**
     * @public
     * <p>The text of the comment.</p>
     */
    Text?: string;
    /**
     * @public
     * <p>The details of the user who made the comment.</p>
     */
    Contributor?: User;
    /**
     * @public
     * <p>The time that the comment was created.</p>
     */
    CreatedTimestamp?: Date;
    /**
     * @public
     * <p>The status of the comment.</p>
     */
    Status?: CommentStatusType;
    /**
     * @public
     * <p>The visibility of the comment. Options are either PRIVATE, where the comment is
     *             visible only to the comment author and document owner and co-owners, or PUBLIC, where
     *             the comment is visible to document owners, co-owners, and contributors.</p>
     */
    Visibility?: CommentVisibilityType;
    /**
     * @public
     * <p>If the comment is a reply to another user's comment, this field contains the user
     *             ID of the user being replied to.</p>
     */
    RecipientId?: string;
}
/**
 * @public
 */
export interface CreateCommentResponse {
    /**
     * @public
     * <p>The comment that has been created.</p>
     */
    Comment?: Comment;
}
/**
 * @public
 * <p>This exception is thrown when the document is locked for comments and user tries to
 *             create or delete a comment on that document.</p>
 */
export declare class DocumentLockedForCommentsException extends __BaseException {
    readonly name: "DocumentLockedForCommentsException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<DocumentLockedForCommentsException, __BaseException>);
}
/**
 * @public
 * <p>The requested operation is not allowed on the specified comment object.</p>
 */
export declare class InvalidCommentOperationException extends __BaseException {
    readonly name: "InvalidCommentOperationException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidCommentOperationException, __BaseException>);
}
/**
 * @public
 */
export interface CreateCustomMetadataRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    ResourceId: string | undefined;
    /**
     * @public
     * <p>The ID of the version, if the custom metadata is being added to a document
     *             version.</p>
     */
    VersionId?: string;
    /**
     * @public
     * <p>Custom metadata in the form of name-value pairs.</p>
     */
    CustomMetadata: Record<string, string> | undefined;
}
/**
 * @public
 */
export interface CreateCustomMetadataResponse {
}
/**
 * @public
 * <p>The limit has been reached on the number of custom properties for the specified
 *             resource.</p>
 */
export declare class CustomMetadataLimitExceededException extends __BaseException {
    readonly name: "CustomMetadataLimitExceededException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<CustomMetadataLimitExceededException, __BaseException>);
}
/**
 * @public
 * <p>Another operation is in progress on the resource that conflicts with the current operation.</p>
 */
export declare class ConflictingOperationException extends __BaseException {
    readonly name: "ConflictingOperationException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConflictingOperationException, __BaseException>);
}
/**
 * @public
 */
export interface CreateFolderRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The name of the new folder.</p>
     */
    Name?: string;
    /**
     * @public
     * <p>The ID of the parent folder.</p>
     */
    ParentFolderId: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const ResourceStateType: {
    readonly ACTIVE: "ACTIVE";
    readonly RECYCLED: "RECYCLED";
    readonly RECYCLING: "RECYCLING";
    readonly RESTORING: "RESTORING";
};
/**
 * @public
 */
export type ResourceStateType = (typeof ResourceStateType)[keyof typeof ResourceStateType];
/**
 * @public
 * <p>Describes a folder.</p>
 */
export interface FolderMetadata {
    /**
     * @public
     * <p>The ID of the folder.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The name of the folder.</p>
     */
    Name?: string;
    /**
     * @public
     * <p>The ID of the creator.</p>
     */
    CreatorId?: string;
    /**
     * @public
     * <p>The ID of the parent folder.</p>
     */
    ParentFolderId?: string;
    /**
     * @public
     * <p>The time when the folder was created.</p>
     */
    CreatedTimestamp?: Date;
    /**
     * @public
     * <p>The time when the folder was updated.</p>
     */
    ModifiedTimestamp?: Date;
    /**
     * @public
     * <p>The resource state of the folder.</p>
     */
    ResourceState?: ResourceStateType;
    /**
     * @public
     * <p>The unique identifier created from the subfolders and documents of the
     *             folder.</p>
     */
    Signature?: string;
    /**
     * @public
     * <p>List of labels on the folder.</p>
     */
    Labels?: string[];
    /**
     * @public
     * <p>The size of the folder metadata.</p>
     */
    Size?: number;
    /**
     * @public
     * <p>The size of the latest version of the folder metadata.</p>
     */
    LatestVersionSize?: number;
}
/**
 * @public
 */
export interface CreateFolderResponse {
    /**
     * @public
     * <p>The metadata of the folder.</p>
     */
    Metadata?: FolderMetadata;
}
/**
 * @public
 * <p>The resource already exists.</p>
 */
export declare class EntityAlreadyExistsException extends __BaseException {
    readonly name: "EntityAlreadyExistsException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<EntityAlreadyExistsException, __BaseException>);
}
/**
 * @public
 * <p>The maximum of 100,000 files and folders under the parent folder has been exceeded.</p>
 */
export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}
/**
 * @public
 */
export interface CreateLabelsRequest {
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    ResourceId: string | undefined;
    /**
     * @public
     * <p>List of labels to add to the resource.</p>
     */
    Labels: string[] | undefined;
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
}
/**
 * @public
 */
export interface CreateLabelsResponse {
}
/**
 * @public
 * <p>The limit has been reached on the number of labels for the specified
 *             resource.</p>
 */
export declare class TooManyLabelsException extends __BaseException {
    readonly name: "TooManyLabelsException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<TooManyLabelsException, __BaseException>);
}
/**
 * @public
 * @enum
 */
export declare const SubscriptionProtocolType: {
    readonly HTTPS: "HTTPS";
    readonly SQS: "SQS";
};
/**
 * @public
 */
export type SubscriptionProtocolType = (typeof SubscriptionProtocolType)[keyof typeof SubscriptionProtocolType];
/**
 * @public
 * @enum
 */
export declare const SubscriptionType: {
    readonly ALL: "ALL";
};
/**
 * @public
 */
export type SubscriptionType = (typeof SubscriptionType)[keyof typeof SubscriptionType];
/**
 * @public
 */
export interface CreateNotificationSubscriptionRequest {
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId: string | undefined;
    /**
     * @public
     * <p>The endpoint to receive the notifications. If the protocol is HTTPS, the endpoint
     *             is a URL that begins with <code>https</code>.</p>
     */
    Endpoint: string | undefined;
    /**
     * @public
     * <p>The protocol to use. The supported value is https, which delivers JSON-encoded
     *             messages using HTTPS POST.</p>
     */
    Protocol: SubscriptionProtocolType | undefined;
    /**
     * @public
     * <p>The notification type.</p>
     */
    SubscriptionType: SubscriptionType | undefined;
}
/**
 * @public
 * <p>Describes a subscription.</p>
 */
export interface Subscription {
    /**
     * @public
     * <p>The ID of the subscription.</p>
     */
    SubscriptionId?: string;
    /**
     * @public
     * <p>The endpoint of the subscription.</p>
     */
    EndPoint?: string;
    /**
     * @public
     * <p>The protocol of the subscription.</p>
     */
    Protocol?: SubscriptionProtocolType;
}
/**
 * @public
 */
export interface CreateNotificationSubscriptionResponse {
    /**
     * @public
     * <p>The subscription.</p>
     */
    Subscription?: Subscription;
}
/**
 * @public
 * <p>The pagination marker or limit fields are not valid.</p>
 */
export declare class InvalidArgumentException extends __BaseException {
    readonly name: "InvalidArgumentException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidArgumentException, __BaseException>);
}
/**
 * @public
 * <p>You've reached the limit on the number of subscriptions for the WorkDocs
 *             instance.</p>
 */
export declare class TooManySubscriptionsException extends __BaseException {
    readonly name: "TooManySubscriptionsException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<TooManySubscriptionsException, __BaseException>);
}
/**
 * @public
 */
export interface CreateUserRequest {
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId?: string;
    /**
     * @public
     * <p>The login name of the user.</p>
     */
    Username: string | undefined;
    /**
     * @public
     * <p>The email address of the user.</p>
     */
    EmailAddress?: string;
    /**
     * @public
     * <p>The given name of the user.</p>
     */
    GivenName: string | undefined;
    /**
     * @public
     * <p>The surname of the user.</p>
     */
    Surname: string | undefined;
    /**
     * @public
     * <p>The password of the user.</p>
     */
    Password: string | undefined;
    /**
     * @public
     * <p>The time zone ID of the user.</p>
     */
    TimeZoneId?: string;
    /**
     * @public
     * <p>The amount of storage for the user.</p>
     */
    StorageRule?: StorageRuleType;
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
}
/**
 * @public
 */
export interface CreateUserResponse {
    /**
     * @public
     * <p>The user information.</p>
     */
    User?: User;
}
/**
 * @public
 */
export interface DeactivateUserRequest {
    /**
     * @public
     * <p>The ID of the user.</p>
     */
    UserId: string | undefined;
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
}
/**
 * @public
 */
export interface DeleteCommentRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The ID of the document version.</p>
     */
    VersionId: string | undefined;
    /**
     * @public
     * <p>The ID of the comment.</p>
     */
    CommentId: string | undefined;
}
/**
 * @public
 */
export interface DeleteCustomMetadataRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the resource, either a document or folder.</p>
     */
    ResourceId: string | undefined;
    /**
     * @public
     * <p>The ID of the version, if the custom metadata is being deleted from a document
     *             version.</p>
     */
    VersionId?: string;
    /**
     * @public
     * <p>List of properties to remove.</p>
     */
    Keys?: string[];
    /**
     * @public
     * <p>Flag to indicate removal of all custom metadata properties from the specified
     *             resource.</p>
     */
    DeleteAll?: boolean;
}
/**
 * @public
 */
export interface DeleteCustomMetadataResponse {
}
/**
 * @public
 */
export interface DeleteDocumentRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
}
/**
 * @public
 */
export interface DeleteDocumentVersionRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document associated with the version being deleted.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The ID of the version being deleted.</p>
     */
    VersionId: string | undefined;
    /**
     * @public
     * <p>Deletes all versions of a document prior to the current version.</p>
     */
    DeletePriorVersions: boolean | undefined;
}
/**
 * @public
 * <p>The operation is invalid.</p>
 */
export declare class InvalidOperationException extends __BaseException {
    readonly name: "InvalidOperationException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidOperationException, __BaseException>);
}
/**
 * @public
 */
export interface DeleteFolderRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the folder.</p>
     */
    FolderId: string | undefined;
}
/**
 * @public
 */
export interface DeleteFolderContentsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the folder.</p>
     */
    FolderId: string | undefined;
}
/**
 * @public
 */
export interface DeleteLabelsRequest {
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    ResourceId: string | undefined;
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>List of labels to delete from the resource.</p>
     */
    Labels?: string[];
    /**
     * @public
     * <p>Flag to request removal of all labels from the specified resource.</p>
     */
    DeleteAll?: boolean;
}
/**
 * @public
 */
export interface DeleteLabelsResponse {
}
/**
 * @public
 */
export interface DeleteNotificationSubscriptionRequest {
    /**
     * @public
     * <p>The ID of the subscription.</p>
     */
    SubscriptionId: string | undefined;
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId: string | undefined;
}
/**
 * @public
 */
export interface DeleteUserRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Do not set this field when using
     *             administrative API actions, as in accessing the API using Amazon Web Services credentials.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the user.</p>
     */
    UserId: string | undefined;
}
/**
 * @public
 */
export interface DescribeActivitiesRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The timestamp that determines the starting time of the activities. The response
     *             includes the activities performed after the specified timestamp.</p>
     */
    StartTime?: Date;
    /**
     * @public
     * <p>The timestamp that determines the end time of the activities. The response includes
     *             the activities performed before the specified timestamp.</p>
     */
    EndTime?: Date;
    /**
     * @public
     * <p>The ID of the organization. This is a mandatory parameter when using administrative
     *             API (SigV4) requests.</p>
     */
    OrganizationId?: string;
    /**
     * @public
     * <p>Specifies which activity types to include in the response. If this field is left
     *             empty, all activity types are returned.</p>
     */
    ActivityTypes?: string;
    /**
     * @public
     * <p>The document or folder ID for which to describe activity types.</p>
     */
    ResourceId?: string;
    /**
     * @public
     * <p>The ID of the user who performed the action. The response includes activities
     *             pertaining to this user. This is an optional parameter and is only applicable for
     *             administrative API (SigV4) requests.</p>
     */
    UserId?: string;
    /**
     * @public
     * <p>Includes indirect activities. An indirect activity results from a direct activity
     *             performed on a parent resource. For example, sharing a parent folder (the direct
     *             activity) shares all of the subfolders and documents within the parent folder (the
     *             indirect activity).</p>
     */
    IncludeIndirectActivities?: boolean;
    /**
     * @public
     * <p>The maximum number of items to return.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>The marker for the next set of results.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeActivitiesResponse {
    /**
     * @public
     * <p>The list of activities for the specified user and time period.</p>
     */
    UserActivities?: Activity[];
    /**
     * @public
     * <p>The marker for the next set of results.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeCommentsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The ID of the document version.</p>
     */
    VersionId: string | undefined;
    /**
     * @public
     * <p>The maximum number of items to return.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>The marker for the next set of results. This marker was received from a previous
     *             call.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeCommentsResponse {
    /**
     * @public
     * <p>The list of comments for the specified document version.</p>
     */
    Comments?: Comment[];
    /**
     * @public
     * <p>The marker for the next set of results. This marker was received from a previous
     *             call.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeDocumentVersionsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The marker for the next set of results. (You received this marker from a previous
     *             call.)</p>
     */
    Marker?: string;
    /**
     * @public
     * <p>The maximum number of versions to return with this call.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>A comma-separated list of values. Specify "INITIALIZED" to include incomplete
     *             versions.</p>
     */
    Include?: string;
    /**
     * @public
     * <p>Specify "SOURCE" to include initialized versions and a URL for the source
     *             document.</p>
     */
    Fields?: string;
}
/**
 * @public
 * @enum
 */
export declare const DocumentSourceType: {
    readonly ORIGINAL: "ORIGINAL";
    readonly WITH_COMMENTS: "WITH_COMMENTS";
};
/**
 * @public
 */
export type DocumentSourceType = (typeof DocumentSourceType)[keyof typeof DocumentSourceType];
/**
 * @public
 * @enum
 */
export declare const DocumentStatusType: {
    readonly ACTIVE: "ACTIVE";
    readonly INITIALIZED: "INITIALIZED";
};
/**
 * @public
 */
export type DocumentStatusType = (typeof DocumentStatusType)[keyof typeof DocumentStatusType];
/**
 * @public
 * @enum
 */
export declare const DocumentThumbnailType: {
    readonly LARGE: "LARGE";
    readonly SMALL: "SMALL";
    readonly SMALL_HQ: "SMALL_HQ";
};
/**
 * @public
 */
export type DocumentThumbnailType = (typeof DocumentThumbnailType)[keyof typeof DocumentThumbnailType];
/**
 * @public
 * <p>Describes a version of a document.</p>
 */
export interface DocumentVersionMetadata {
    /**
     * @public
     * <p>The ID of the version.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The name of the version.</p>
     */
    Name?: string;
    /**
     * @public
     * <p>The content type of the document.</p>
     */
    ContentType?: string;
    /**
     * @public
     * <p>The size of the document, in bytes.</p>
     */
    Size?: number;
    /**
     * @public
     * <p>The signature of the document.</p>
     */
    Signature?: string;
    /**
     * @public
     * <p>The status of the document.</p>
     */
    Status?: DocumentStatusType;
    /**
     * @public
     * <p>The timestamp when the document was first uploaded.</p>
     */
    CreatedTimestamp?: Date;
    /**
     * @public
     * <p>The timestamp when the document was last uploaded.</p>
     */
    ModifiedTimestamp?: Date;
    /**
     * @public
     * <p>The timestamp when the content of the document was originally created.</p>
     */
    ContentCreatedTimestamp?: Date;
    /**
     * @public
     * <p>The timestamp when the content of the document was modified.</p>
     */
    ContentModifiedTimestamp?: Date;
    /**
     * @public
     * <p>The ID of the creator.</p>
     */
    CreatorId?: string;
    /**
     * @public
     * <p>The thumbnail of the document.</p>
     */
    Thumbnail?: Partial<Record<DocumentThumbnailType, string>>;
    /**
     * @public
     * <p>The source of the document.</p>
     */
    Source?: Partial<Record<DocumentSourceType, string>>;
}
/**
 * @public
 */
export interface DescribeDocumentVersionsResponse {
    /**
     * @public
     * <p>The document versions.</p>
     */
    DocumentVersions?: DocumentVersionMetadata[];
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no
     *             additional results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 * <p>The password is invalid.</p>
 */
export declare class InvalidPasswordException extends __BaseException {
    readonly name: "InvalidPasswordException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidPasswordException, __BaseException>);
}
/**
 * @public
 * @enum
 */
export declare const OrderType: {
    readonly ASCENDING: "ASCENDING";
    readonly DESCENDING: "DESCENDING";
};
/**
 * @public
 */
export type OrderType = (typeof OrderType)[keyof typeof OrderType];
/**
 * @public
 * @enum
 */
export declare const ResourceSortType: {
    readonly DATE: "DATE";
    readonly NAME: "NAME";
};
/**
 * @public
 */
export type ResourceSortType = (typeof ResourceSortType)[keyof typeof ResourceSortType];
/**
 * @public
 * @enum
 */
export declare const FolderContentType: {
    readonly ALL: "ALL";
    readonly DOCUMENT: "DOCUMENT";
    readonly FOLDER: "FOLDER";
};
/**
 * @public
 */
export type FolderContentType = (typeof FolderContentType)[keyof typeof FolderContentType];
/**
 * @public
 */
export interface DescribeFolderContentsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the folder.</p>
     */
    FolderId: string | undefined;
    /**
     * @public
     * <p>The sorting criteria.</p>
     */
    Sort?: ResourceSortType;
    /**
     * @public
     * <p>The order for the contents of the folder.</p>
     */
    Order?: OrderType;
    /**
     * @public
     * <p>The maximum number of items to return with this call.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>The marker for the next set of results. This marker was received from a previous
     *             call.</p>
     */
    Marker?: string;
    /**
     * @public
     * <p>The type of items.</p>
     */
    Type?: FolderContentType;
    /**
     * @public
     * <p>The contents to include. Specify "INITIALIZED" to include initialized
     *             documents.</p>
     */
    Include?: string;
}
/**
 * @public
 * <p>Describes the document.</p>
 */
export interface DocumentMetadata {
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The ID of the creator.</p>
     */
    CreatorId?: string;
    /**
     * @public
     * <p>The ID of the parent folder.</p>
     */
    ParentFolderId?: string;
    /**
     * @public
     * <p>The time when the document was created.</p>
     */
    CreatedTimestamp?: Date;
    /**
     * @public
     * <p>The time when the document was updated.</p>
     */
    ModifiedTimestamp?: Date;
    /**
     * @public
     * <p>The latest version of the document.</p>
     */
    LatestVersionMetadata?: DocumentVersionMetadata;
    /**
     * @public
     * <p>The resource state.</p>
     */
    ResourceState?: ResourceStateType;
    /**
     * @public
     * <p>List of labels on the document.</p>
     */
    Labels?: string[];
}
/**
 * @public
 */
export interface DescribeFolderContentsResponse {
    /**
     * @public
     * <p>The subfolders in the specified folder.</p>
     */
    Folders?: FolderMetadata[];
    /**
     * @public
     * <p>The documents in the specified folder.</p>
     */
    Documents?: DocumentMetadata[];
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no
     *             additional results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeGroupsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>A query to describe groups by group name.</p>
     */
    SearchQuery: string | undefined;
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId?: string;
    /**
     * @public
     * <p>The marker for the next set of results. (You received this marker from a previous
     *             call.)</p>
     */
    Marker?: string;
    /**
     * @public
     * <p>The maximum number of items to return with this call.</p>
     */
    Limit?: number;
}
/**
 * @public
 */
export interface DescribeGroupsResponse {
    /**
     * @public
     * <p>The list of groups.</p>
     */
    Groups?: GroupMetadata[];
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no additional
     *             results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeNotificationSubscriptionsRequest {
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId: string | undefined;
    /**
     * @public
     * <p>The marker for the next set of results. (You received this marker from a previous
     *             call.)</p>
     */
    Marker?: string;
    /**
     * @public
     * <p>The maximum number of items to return with this call.</p>
     */
    Limit?: number;
}
/**
 * @public
 */
export interface DescribeNotificationSubscriptionsResponse {
    /**
     * @public
     * <p>The subscriptions.</p>
     */
    Subscriptions?: Subscription[];
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no
     *             additional results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeResourcePermissionsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    ResourceId: string | undefined;
    /**
     * @public
     * <p>The ID of the principal to filter permissions by.</p>
     */
    PrincipalId?: string;
    /**
     * @public
     * <p>The maximum number of items to return with this call.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>The marker for the next set of results. (You received this marker from a previous
     *             call)</p>
     */
    Marker?: string;
}
/**
 * @public
 * @enum
 */
export declare const RolePermissionType: {
    readonly DIRECT: "DIRECT";
    readonly INHERITED: "INHERITED";
};
/**
 * @public
 */
export type RolePermissionType = (typeof RolePermissionType)[keyof typeof RolePermissionType];
/**
 * @public
 * <p>Describes the permissions.</p>
 */
export interface PermissionInfo {
    /**
     * @public
     * <p>The role of the user.</p>
     */
    Role?: RoleType;
    /**
     * @public
     * <p>The type of permissions.</p>
     */
    Type?: RolePermissionType;
}
/**
 * @public
 * <p>Describes a resource.</p>
 */
export interface Principal {
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The type of resource.</p>
     */
    Type?: PrincipalType;
    /**
     * @public
     * <p>The permission information for the resource.</p>
     */
    Roles?: PermissionInfo[];
}
/**
 * @public
 */
export interface DescribeResourcePermissionsResponse {
    /**
     * @public
     * <p>The principals.</p>
     */
    Principals?: Principal[];
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no
     *             additional results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeRootFoldersRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token.</p>
     */
    AuthenticationToken: string | undefined;
    /**
     * @public
     * <p>The maximum number of items to return.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>The marker for the next set of results. (You received this marker from a previous
     *             call.)</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface DescribeRootFoldersResponse {
    /**
     * @public
     * <p>The user's special folders.</p>
     */
    Folders?: FolderMetadata[];
    /**
     * @public
     * <p>The marker for the next set of results.</p>
     */
    Marker?: string;
}
/**
 * @public
 * @enum
 */
export declare const UserFilterType: {
    readonly ACTIVE_PENDING: "ACTIVE_PENDING";
    readonly ALL: "ALL";
};
/**
 * @public
 */
export type UserFilterType = (typeof UserFilterType)[keyof typeof UserFilterType];
/**
 * @public
 * @enum
 */
export declare const UserSortType: {
    readonly FULL_NAME: "FULL_NAME";
    readonly STORAGE_LIMIT: "STORAGE_LIMIT";
    readonly STORAGE_USED: "STORAGE_USED";
    readonly USER_NAME: "USER_NAME";
    readonly USER_STATUS: "USER_STATUS";
};
/**
 * @public
 */
export type UserSortType = (typeof UserSortType)[keyof typeof UserSortType];
/**
 * @public
 */
export interface DescribeUsersRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the organization.</p>
     */
    OrganizationId?: string;
    /**
     * @public
     * <p>The IDs of the users.</p>
     */
    UserIds?: string;
    /**
     * @public
     * <p>A query to filter users by user name. Remember the following about the <code>Userids</code> and <code>Query</code> parameters:</p>
     *          <ul>
     *             <li>
     *                <p>If you don't use either parameter, the API returns a paginated list of all users on the site.</p>
     *             </li>
     *             <li>
     *                <p>If you use both parameters, the API ignores the <code>Query</code> parameter.</p>
     *             </li>
     *             <li>
     *                <p>The <code>Userid</code> parameter only returns user names that match a corresponding user ID.</p>
     *             </li>
     *             <li>
     *                <p>The <code>Query</code> parameter runs a "prefix" search for users by the <code>GivenName</code>, <code>SurName</code>, or <code>UserName</code> fields included in a
     *                 <a href="https://docs.aws.amazon.com/workdocs/latest/APIReference/API_CreateUser.html">CreateUser</a> API call. For example, querying on
     *                 <code>Ma</code> returns Márcia Oliveira, María García, and Mateo Jackson. If you use multiple characters, the API only returns data that matches all characters. For example, querying on <code>Ma J</code> only
     *                 returns Mateo Jackson.</p>
     *             </li>
     *          </ul>
     */
    Query?: string;
    /**
     * @public
     * <p>The state of the users. Specify "ALL" to include inactive users.</p>
     */
    Include?: UserFilterType;
    /**
     * @public
     * <p>The order for the results.</p>
     */
    Order?: OrderType;
    /**
     * @public
     * <p>The sorting criteria.</p>
     */
    Sort?: UserSortType;
    /**
     * @public
     * <p>The marker for the next set of results. (You received this marker from a previous
     *             call.)</p>
     */
    Marker?: string;
    /**
     * @public
     * <p>The maximum number of items to return.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>A comma-separated list of values. Specify "STORAGE_METADATA" to include the user
     *             storage quota and utilization information.</p>
     */
    Fields?: string;
}
/**
 * @public
 */
export interface DescribeUsersResponse {
    /**
     * @public
     * <p>The users.</p>
     */
    Users?: User[];
    /**
     * @public
     * @deprecated
     *
     * <p>The total number of users included in the results.</p>
     */
    TotalNumberOfUsers?: number;
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no
     *             additional results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 * <p>The response is too large to return. The request must include a filter to reduce the size of the response.</p>
 */
export declare class RequestedEntityTooLargeException extends __BaseException {
    readonly name: "RequestedEntityTooLargeException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<RequestedEntityTooLargeException, __BaseException>);
}
/**
 * @public
 */
export interface GetCurrentUserRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token.</p>
     */
    AuthenticationToken: string | undefined;
}
/**
 * @public
 */
export interface GetCurrentUserResponse {
    /**
     * @public
     * <p>Metadata of the user.</p>
     */
    User?: User;
}
/**
 * @public
 */
export interface GetDocumentRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>Set this to <code>TRUE</code> to include custom metadata in the response.</p>
     */
    IncludeCustomMetadata?: boolean;
}
/**
 * @public
 */
export interface GetDocumentResponse {
    /**
     * @public
     * <p>The metadata details of the document.</p>
     */
    Metadata?: DocumentMetadata;
    /**
     * @public
     * <p>The custom metadata on the document.</p>
     */
    CustomMetadata?: Record<string, string>;
}
/**
 * @public
 */
export interface GetDocumentPathRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The maximum number of levels in the hierarchy to return.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>A comma-separated list of values. Specify <code>NAME</code> to include the names of
     *             the parent folders.</p>
     */
    Fields?: string;
    /**
     * @public
     * <p>This value is not supported.</p>
     */
    Marker?: string;
}
/**
 * @public
 * <p>Describes the resource path.</p>
 */
export interface ResourcePathComponent {
    /**
     * @public
     * <p>The ID of the resource path.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The name of the resource path.</p>
     */
    Name?: string;
}
/**
 * @public
 * <p>Describes the path information of a resource.</p>
 */
export interface ResourcePath {
    /**
     * @public
     * <p>The components of the resource path.</p>
     */
    Components?: ResourcePathComponent[];
}
/**
 * @public
 */
export interface GetDocumentPathResponse {
    /**
     * @public
     * <p>The path information.</p>
     */
    Path?: ResourcePath;
}
/**
 * @public
 */
export interface GetDocumentVersionRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The version ID of the document.</p>
     */
    VersionId: string | undefined;
    /**
     * @public
     * <p>A comma-separated list of values. Specify "SOURCE" to include a URL for the source
     *             document.</p>
     */
    Fields?: string;
    /**
     * @public
     * <p>Set this to TRUE to include custom metadata in the response.</p>
     */
    IncludeCustomMetadata?: boolean;
}
/**
 * @public
 */
export interface GetDocumentVersionResponse {
    /**
     * @public
     * <p>The version metadata.</p>
     */
    Metadata?: DocumentVersionMetadata;
    /**
     * @public
     * <p>The custom metadata on the document version.</p>
     */
    CustomMetadata?: Record<string, string>;
}
/**
 * @public
 */
export interface GetFolderRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the folder.</p>
     */
    FolderId: string | undefined;
    /**
     * @public
     * <p>Set to TRUE to include custom metadata in the response.</p>
     */
    IncludeCustomMetadata?: boolean;
}
/**
 * @public
 */
export interface GetFolderResponse {
    /**
     * @public
     * <p>The metadata of the folder.</p>
     */
    Metadata?: FolderMetadata;
    /**
     * @public
     * <p>The custom metadata on the folder.</p>
     */
    CustomMetadata?: Record<string, string>;
}
/**
 * @public
 */
export interface GetFolderPathRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the folder.</p>
     */
    FolderId: string | undefined;
    /**
     * @public
     * <p>The maximum number of levels in the hierarchy to return.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>A comma-separated list of values. Specify "NAME" to include the names of the parent
     *             folders.</p>
     */
    Fields?: string;
    /**
     * @public
     * <p>This value is not supported.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface GetFolderPathResponse {
    /**
     * @public
     * <p>The path information.</p>
     */
    Path?: ResourcePath;
}
/**
 * @public
 * @enum
 */
export declare const ResourceCollectionType: {
    readonly SHARED_WITH_ME: "SHARED_WITH_ME";
};
/**
 * @public
 */
export type ResourceCollectionType = (typeof ResourceCollectionType)[keyof typeof ResourceCollectionType];
/**
 * @public
 */
export interface GetResourcesRequest {
    /**
     * @public
     * <p>The Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The user ID for the resource collection. This is a required field for accessing the
     *             API operation using IAM credentials.</p>
     */
    UserId?: string;
    /**
     * @public
     * <p>The collection type.</p>
     */
    CollectionType?: ResourceCollectionType;
    /**
     * @public
     * <p>The maximum number of resources to return.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>The marker for the next set of results. This marker was received from a previous call.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface GetResourcesResponse {
    /**
     * @public
     * <p>The folders in the specified folder.</p>
     */
    Folders?: FolderMetadata[];
    /**
     * @public
     * <p>The documents in the specified collection.</p>
     */
    Documents?: DocumentMetadata[];
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 * <p>This exception is thrown when a valid checkout ID is not presented on document
 *             version upload calls for a document that has been checked out from Web client.</p>
 */
export declare class DraftUploadOutOfSyncException extends __BaseException {
    readonly name: "DraftUploadOutOfSyncException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<DraftUploadOutOfSyncException, __BaseException>);
}
/**
 * @public
 */
export interface InitiateDocumentVersionUploadRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    Id?: string;
    /**
     * @public
     * <p>The name of the document.</p>
     */
    Name?: string;
    /**
     * @public
     * <p>The timestamp when the content of the document was originally created.</p>
     */
    ContentCreatedTimestamp?: Date;
    /**
     * @public
     * <p>The timestamp when the content of the document was modified.</p>
     */
    ContentModifiedTimestamp?: Date;
    /**
     * @public
     * <p>The content type of the document.</p>
     */
    ContentType?: string;
    /**
     * @public
     * <p>The size of the document, in bytes.</p>
     */
    DocumentSizeInBytes?: number;
    /**
     * @public
     * <p>The ID of the parent folder.</p>
     */
    ParentFolderId?: string;
}
/**
 * @public
 * <p>Describes the upload.</p>
 */
export interface UploadMetadata {
    /**
     * @public
     * <p>The URL of the upload.</p>
     */
    UploadUrl?: string;
    /**
     * @public
     * <p>The signed headers.</p>
     */
    SignedHeaders?: Record<string, string>;
}
/**
 * @public
 */
export interface InitiateDocumentVersionUploadResponse {
    /**
     * @public
     * <p>The document metadata.</p>
     */
    Metadata?: DocumentMetadata;
    /**
     * @public
     * <p>The upload metadata.</p>
     */
    UploadMetadata?: UploadMetadata;
}
/**
 * @public
 * <p>The resource is already checked out.</p>
 */
export declare class ResourceAlreadyCheckedOutException extends __BaseException {
    readonly name: "ResourceAlreadyCheckedOutException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceAlreadyCheckedOutException, __BaseException>);
}
/**
 * @public
 * <p>The storage limit has been exceeded.</p>
 */
export declare class StorageLimitExceededException extends __BaseException {
    readonly name: "StorageLimitExceededException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<StorageLimitExceededException, __BaseException>);
}
/**
 * @public
 * <p>The storage limit will be exceeded.</p>
 */
export declare class StorageLimitWillExceedException extends __BaseException {
    readonly name: "StorageLimitWillExceedException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<StorageLimitWillExceedException, __BaseException>);
}
/**
 * @public
 */
export interface RemoveAllResourcePermissionsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    ResourceId: string | undefined;
}
/**
 * @public
 */
export interface RemoveResourcePermissionRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the resource.</p>
     */
    ResourceId: string | undefined;
    /**
     * @public
     * <p>The principal ID of the resource.</p>
     */
    PrincipalId: string | undefined;
    /**
     * @public
     * <p>The principal type of the resource.</p>
     */
    PrincipalType?: PrincipalType;
}
/**
 * @public
 */
export interface RestoreDocumentVersionsRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const ContentCategoryType: {
    readonly AUDIO: "AUDIO";
    readonly DOCUMENT: "DOCUMENT";
    readonly IMAGE: "IMAGE";
    readonly OTHER: "OTHER";
    readonly PDF: "PDF";
    readonly PRESENTATION: "PRESENTATION";
    readonly SOURCE_CODE: "SOURCE_CODE";
    readonly SPREADSHEET: "SPREADSHEET";
    readonly VIDEO: "VIDEO";
};
/**
 * @public
 */
export type ContentCategoryType = (typeof ContentCategoryType)[keyof typeof ContentCategoryType];
/**
 * @public
 * <p>Filters results based on timestamp range (in epochs).</p>
 */
export interface DateRangeType {
    /**
     * @public
     * <p>Timestamp range start value (in epochs)</p>
     */
    StartValue?: Date;
    /**
     * @public
     * <p>Timestamp range end value (in epochs).</p>
     */
    EndValue?: Date;
}
/**
 * @public
 * @enum
 */
export declare const PrincipalRoleType: {
    readonly CONTRIBUTOR: "CONTRIBUTOR";
    readonly COOWNER: "COOWNER";
    readonly OWNER: "OWNER";
    readonly VIEWER: "VIEWER";
};
/**
 * @public
 */
export type PrincipalRoleType = (typeof PrincipalRoleType)[keyof typeof PrincipalRoleType];
/**
 * @public
 * <p>Filter based on UserIds or GroupIds.</p>
 */
export interface SearchPrincipalType {
    /**
     * @public
     * <p>UserIds or GroupIds.</p>
     */
    Id: string | undefined;
    /**
     * @public
     * <p>The Role of a User or Group.</p>
     */
    Roles?: PrincipalRoleType[];
}
/**
 * @public
 * @enum
 */
export declare const SearchResourceType: {
    readonly COMMENT: "COMMENT";
    readonly DOCUMENT: "DOCUMENT";
    readonly DOCUMENT_VERSION: "DOCUMENT_VERSION";
    readonly FOLDER: "FOLDER";
};
/**
 * @public
 */
export type SearchResourceType = (typeof SearchResourceType)[keyof typeof SearchResourceType];
/**
 * @public
 * @enum
 */
export declare const SearchCollectionType: {
    readonly OWNED: "OWNED";
    readonly SHARED_WITH_ME: "SHARED_WITH_ME";
};
/**
 * @public
 */
export type SearchCollectionType = (typeof SearchCollectionType)[keyof typeof SearchCollectionType];
/**
 * @public
 * <p>Filter based on size (in bytes).</p>
 */
export interface LongRangeType {
    /**
     * @public
     * <p>The size start range (in bytes).</p>
     */
    StartValue?: number;
    /**
     * @public
     * <p>The size end range (in bytes).</p>
     */
    EndValue?: number;
}
/**
 * @public
 * @enum
 */
export declare const LanguageCodeType: {
    readonly AR: "AR";
    readonly BG: "BG";
    readonly BN: "BN";
    readonly CS: "CS";
    readonly DA: "DA";
    readonly DE: "DE";
    readonly DEFAULT: "DEFAULT";
    readonly EL: "EL";
    readonly EN: "EN";
    readonly ES: "ES";
    readonly FA: "FA";
    readonly FI: "FI";
    readonly FR: "FR";
    readonly HI: "HI";
    readonly HU: "HU";
    readonly ID: "ID";
    readonly IT: "IT";
    readonly JA: "JA";
    readonly KO: "KO";
    readonly LT: "LT";
    readonly LV: "LV";
    readonly NL: "NL";
    readonly NO: "NO";
    readonly PT: "PT";
    readonly RO: "RO";
    readonly RU: "RU";
    readonly SV: "SV";
    readonly SW: "SW";
    readonly TH: "TH";
    readonly TR: "TR";
    readonly ZH: "ZH";
};
/**
 * @public
 */
export type LanguageCodeType = (typeof LanguageCodeType)[keyof typeof LanguageCodeType];
/**
 * @public
 * <p>Filters results based on entity metadata.</p>
 */
export interface Filters {
    /**
     * @public
     * <p>Filters by the locale of the content or comment.</p>
     */
    TextLocales?: LanguageCodeType[];
    /**
     * @public
     * <p>Filters by content category.</p>
     */
    ContentCategories?: ContentCategoryType[];
    /**
     * @public
     * <p>Filters based on entity type.</p>
     */
    ResourceTypes?: SearchResourceType[];
    /**
     * @public
     * <p>Filter by labels using exact match.</p>
     */
    Labels?: string[];
    /**
     * @public
     * <p>Filter based on UserIds or GroupIds.</p>
     */
    Principals?: SearchPrincipalType[];
    /**
     * @public
     * <p>Filter based on resource’s path.</p>
     */
    AncestorIds?: string[];
    /**
     * @public
     * <p>Filter based on file groupings.</p>
     */
    SearchCollectionTypes?: SearchCollectionType[];
    /**
     * @public
     * <p>Filter based on size (in bytes).</p>
     */
    SizeRange?: LongRangeType;
    /**
     * @public
     * <p>Filter based on resource’s creation timestamp.</p>
     */
    CreatedRange?: DateRangeType;
    /**
     * @public
     * <p>Filter based on resource’s modified timestamp.</p>
     */
    ModifiedRange?: DateRangeType;
}
/**
 * @public
 * @enum
 */
export declare const OrderByFieldType: {
    readonly CREATED_TIMESTAMP: "CREATED_TIMESTAMP";
    readonly MODIFIED_TIMESTAMP: "MODIFIED_TIMESTAMP";
    readonly NAME: "NAME";
    readonly RELEVANCE: "RELEVANCE";
    readonly SIZE: "SIZE";
};
/**
 * @public
 */
export type OrderByFieldType = (typeof OrderByFieldType)[keyof typeof OrderByFieldType];
/**
 * @public
 * @enum
 */
export declare const SortOrder: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};
/**
 * @public
 */
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
/**
 * @public
 * <p>The result of the sort operation.</p>
 */
export interface SearchSortResult {
    /**
     * @public
     * <p>Sort search results based on this field name.</p>
     */
    Field?: OrderByFieldType;
    /**
     * @public
     * <p>Sort direction.</p>
     */
    Order?: SortOrder;
}
/**
 * @public
 * @enum
 */
export declare const SearchQueryScopeType: {
    readonly CONTENT: "CONTENT";
    readonly NAME: "NAME";
};
/**
 * @public
 */
export type SearchQueryScopeType = (typeof SearchQueryScopeType)[keyof typeof SearchQueryScopeType];
/**
 * @public
 */
export interface SearchResourcesRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The String to search for. Searches across different text fields based on request parameters. Use double quotes around the query string for exact phrase matches.</p>
     */
    QueryText?: string;
    /**
     * @public
     * <p>Filter based on the text field type. A Folder has only a name and no content. A Comment has only content and no name. A Document or Document Version has a name and content</p>
     */
    QueryScopes?: SearchQueryScopeType[];
    /**
     * @public
     * <p>Filters based on the resource owner OrgId. This is a mandatory parameter when using Admin SigV4 credentials.</p>
     */
    OrganizationId?: string;
    /**
     * @public
     * <p>A list of attributes to include in the response. Used to request fields that are not normally
     *             returned in a standard response.</p>
     */
    AdditionalResponseFields?: AdditionalResponseFieldType[];
    /**
     * @public
     * <p>Filters results based on entity metadata.</p>
     */
    Filters?: Filters;
    /**
     * @public
     * <p>Order by results in one or more categories.</p>
     */
    OrderBy?: SearchSortResult[];
    /**
     * @public
     * <p>Max results count per page.</p>
     */
    Limit?: number;
    /**
     * @public
     * <p>The marker for the next set of results.</p>
     */
    Marker?: string;
}
/**
 * @public
 * @enum
 */
export declare const ResponseItemType: {
    readonly COMMENT: "COMMENT";
    readonly DOCUMENT: "DOCUMENT";
    readonly DOCUMENT_VERSION: "DOCUMENT_VERSION";
    readonly FOLDER: "FOLDER";
};
/**
 * @public
 */
export type ResponseItemType = (typeof ResponseItemType)[keyof typeof ResponseItemType];
/**
 * @public
 * <p>List of Documents, Folders, Comments, and Document Versions matching the query.</p>
 */
export interface ResponseItem {
    /**
     * @public
     * <p>The type of item being returned.</p>
     */
    ResourceType?: ResponseItemType;
    /**
     * @public
     * <p>The webUrl of the item being returned.</p>
     */
    WebUrl?: string;
    /**
     * @public
     * <p>The document that matches the query.</p>
     */
    DocumentMetadata?: DocumentMetadata;
    /**
     * @public
     * <p>The folder that matches the query.</p>
     */
    FolderMetadata?: FolderMetadata;
    /**
     * @public
     * <p>The comment that matches the query.</p>
     */
    CommentMetadata?: CommentMetadata;
    /**
     * @public
     * <p>The document version that matches the metadata.</p>
     */
    DocumentVersionMetadata?: DocumentVersionMetadata;
}
/**
 * @public
 */
export interface SearchResourcesResponse {
    /**
     * @public
     * <p>List of Documents, Folders, Comments, and Document Versions matching the query.</p>
     */
    Items?: ResponseItem[];
    /**
     * @public
     * <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
     */
    Marker?: string;
}
/**
 * @public
 */
export interface UpdateDocumentRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The name of the document.</p>
     */
    Name?: string;
    /**
     * @public
     * <p>The ID of the parent folder.</p>
     */
    ParentFolderId?: string;
    /**
     * @public
     * <p>The resource state of the document. Only ACTIVE and RECYCLED are
     *             supported.</p>
     */
    ResourceState?: ResourceStateType;
}
/**
 * @public
 * @enum
 */
export declare const DocumentVersionStatus: {
    readonly ACTIVE: "ACTIVE";
};
/**
 * @public
 */
export type DocumentVersionStatus = (typeof DocumentVersionStatus)[keyof typeof DocumentVersionStatus];
/**
 * @public
 */
export interface UpdateDocumentVersionRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the document.</p>
     */
    DocumentId: string | undefined;
    /**
     * @public
     * <p>The version ID of the document.</p>
     */
    VersionId: string | undefined;
    /**
     * @public
     * <p>The status of the version.</p>
     */
    VersionStatus?: DocumentVersionStatus;
}
/**
 * @public
 */
export interface UpdateFolderRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the folder.</p>
     */
    FolderId: string | undefined;
    /**
     * @public
     * <p>The name of the folder.</p>
     */
    Name?: string;
    /**
     * @public
     * <p>The ID of the parent folder.</p>
     */
    ParentFolderId?: string;
    /**
     * @public
     * <p>The resource state of the folder. Only ACTIVE and RECYCLED are accepted values from
     *             the API.</p>
     */
    ResourceState?: ResourceStateType;
}
/**
 * @public
 * <p>The last user in the organization is being deactivated.</p>
 */
export declare class DeactivatingLastSystemUserException extends __BaseException {
    readonly name: "DeactivatingLastSystemUserException";
    readonly $fault: "client";
    Message?: string;
    Code?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<DeactivatingLastSystemUserException, __BaseException>);
}
/**
 * @public
 * <p>The user is undergoing transfer of ownership.</p>
 */
export declare class IllegalUserStateException extends __BaseException {
    readonly name: "IllegalUserStateException";
    readonly $fault: "client";
    Message?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<IllegalUserStateException, __BaseException>);
}
/**
 * @public
 * @enum
 */
export declare const BooleanEnumType: {
    readonly FALSE: "FALSE";
    readonly TRUE: "TRUE";
};
/**
 * @public
 */
export type BooleanEnumType = (typeof BooleanEnumType)[keyof typeof BooleanEnumType];
/**
 * @public
 */
export interface UpdateUserRequest {
    /**
     * @public
     * <p>Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API.</p>
     */
    AuthenticationToken?: string;
    /**
     * @public
     * <p>The ID of the user.</p>
     */
    UserId: string | undefined;
    /**
     * @public
     * <p>The given name of the user.</p>
     */
    GivenName?: string;
    /**
     * @public
     * <p>The surname of the user.</p>
     */
    Surname?: string;
    /**
     * @public
     * <p>The type of the user.</p>
     */
    Type?: UserType;
    /**
     * @public
     * <p>The amount of storage for the user.</p>
     */
    StorageRule?: StorageRuleType;
    /**
     * @public
     * <p>The time zone ID of the user.</p>
     */
    TimeZoneId?: string;
    /**
     * @public
     * <p>The locale of the user.</p>
     */
    Locale?: LocaleType;
    /**
     * @public
     * <p>Boolean value to determine whether the user is granted Power user privileges.</p>
     */
    GrantPoweruserPrivileges?: BooleanEnumType;
}
/**
 * @public
 */
export interface UpdateUserResponse {
    /**
     * @public
     * <p>The user information.</p>
     */
    User?: User;
}
/**
 * @internal
 */
export declare const AbortDocumentVersionUploadRequestFilterSensitiveLog: (obj: AbortDocumentVersionUploadRequest) => any;
/**
 * @internal
 */
export declare const ActivateUserRequestFilterSensitiveLog: (obj: ActivateUserRequest) => any;
/**
 * @internal
 */
export declare const UserFilterSensitiveLog: (obj: User) => any;
/**
 * @internal
 */
export declare const ActivateUserResponseFilterSensitiveLog: (obj: ActivateUserResponse) => any;
/**
 * @internal
 */
export declare const CommentMetadataFilterSensitiveLog: (obj: CommentMetadata) => any;
/**
 * @internal
 */
export declare const UserMetadataFilterSensitiveLog: (obj: UserMetadata) => any;
/**
 * @internal
 */
export declare const ResourceMetadataFilterSensitiveLog: (obj: ResourceMetadata) => any;
/**
 * @internal
 */
export declare const ParticipantsFilterSensitiveLog: (obj: Participants) => any;
/**
 * @internal
 */
export declare const ActivityFilterSensitiveLog: (obj: Activity) => any;
/**
 * @internal
 */
export declare const NotificationOptionsFilterSensitiveLog: (obj: NotificationOptions) => any;
/**
 * @internal
 */
export declare const AddResourcePermissionsRequestFilterSensitiveLog: (obj: AddResourcePermissionsRequest) => any;
/**
 * @internal
 */
export declare const ShareResultFilterSensitiveLog: (obj: ShareResult) => any;
/**
 * @internal
 */
export declare const AddResourcePermissionsResponseFilterSensitiveLog: (obj: AddResourcePermissionsResponse) => any;
/**
 * @internal
 */
export declare const CreateCommentRequestFilterSensitiveLog: (obj: CreateCommentRequest) => any;
/**
 * @internal
 */
export declare const CommentFilterSensitiveLog: (obj: Comment) => any;
/**
 * @internal
 */
export declare const CreateCommentResponseFilterSensitiveLog: (obj: CreateCommentResponse) => any;
/**
 * @internal
 */
export declare const CreateCustomMetadataRequestFilterSensitiveLog: (obj: CreateCustomMetadataRequest) => any;
/**
 * @internal
 */
export declare const CreateFolderRequestFilterSensitiveLog: (obj: CreateFolderRequest) => any;
/**
 * @internal
 */
export declare const FolderMetadataFilterSensitiveLog: (obj: FolderMetadata) => any;
/**
 * @internal
 */
export declare const CreateFolderResponseFilterSensitiveLog: (obj: CreateFolderResponse) => any;
/**
 * @internal
 */
export declare const CreateLabelsRequestFilterSensitiveLog: (obj: CreateLabelsRequest) => any;
/**
 * @internal
 */
export declare const CreateUserRequestFilterSensitiveLog: (obj: CreateUserRequest) => any;
/**
 * @internal
 */
export declare const CreateUserResponseFilterSensitiveLog: (obj: CreateUserResponse) => any;
/**
 * @internal
 */
export declare const DeactivateUserRequestFilterSensitiveLog: (obj: DeactivateUserRequest) => any;
/**
 * @internal
 */
export declare const DeleteCommentRequestFilterSensitiveLog: (obj: DeleteCommentRequest) => any;
/**
 * @internal
 */
export declare const DeleteCustomMetadataRequestFilterSensitiveLog: (obj: DeleteCustomMetadataRequest) => any;
/**
 * @internal
 */
export declare const DeleteDocumentRequestFilterSensitiveLog: (obj: DeleteDocumentRequest) => any;
/**
 * @internal
 */
export declare const DeleteDocumentVersionRequestFilterSensitiveLog: (obj: DeleteDocumentVersionRequest) => any;
/**
 * @internal
 */
export declare const DeleteFolderRequestFilterSensitiveLog: (obj: DeleteFolderRequest) => any;
/**
 * @internal
 */
export declare const DeleteFolderContentsRequestFilterSensitiveLog: (obj: DeleteFolderContentsRequest) => any;
/**
 * @internal
 */
export declare const DeleteLabelsRequestFilterSensitiveLog: (obj: DeleteLabelsRequest) => any;
/**
 * @internal
 */
export declare const DeleteUserRequestFilterSensitiveLog: (obj: DeleteUserRequest) => any;
/**
 * @internal
 */
export declare const DescribeActivitiesRequestFilterSensitiveLog: (obj: DescribeActivitiesRequest) => any;
/**
 * @internal
 */
export declare const DescribeActivitiesResponseFilterSensitiveLog: (obj: DescribeActivitiesResponse) => any;
/**
 * @internal
 */
export declare const DescribeCommentsRequestFilterSensitiveLog: (obj: DescribeCommentsRequest) => any;
/**
 * @internal
 */
export declare const DescribeCommentsResponseFilterSensitiveLog: (obj: DescribeCommentsResponse) => any;
/**
 * @internal
 */
export declare const DescribeDocumentVersionsRequestFilterSensitiveLog: (obj: DescribeDocumentVersionsRequest) => any;
/**
 * @internal
 */
export declare const DocumentVersionMetadataFilterSensitiveLog: (obj: DocumentVersionMetadata) => any;
/**
 * @internal
 */
export declare const DescribeDocumentVersionsResponseFilterSensitiveLog: (obj: DescribeDocumentVersionsResponse) => any;
/**
 * @internal
 */
export declare const DescribeFolderContentsRequestFilterSensitiveLog: (obj: DescribeFolderContentsRequest) => any;
/**
 * @internal
 */
export declare const DocumentMetadataFilterSensitiveLog: (obj: DocumentMetadata) => any;
/**
 * @internal
 */
export declare const DescribeFolderContentsResponseFilterSensitiveLog: (obj: DescribeFolderContentsResponse) => any;
/**
 * @internal
 */
export declare const DescribeGroupsRequestFilterSensitiveLog: (obj: DescribeGroupsRequest) => any;
/**
 * @internal
 */
export declare const DescribeResourcePermissionsRequestFilterSensitiveLog: (obj: DescribeResourcePermissionsRequest) => any;
/**
 * @internal
 */
export declare const DescribeRootFoldersRequestFilterSensitiveLog: (obj: DescribeRootFoldersRequest) => any;
/**
 * @internal
 */
export declare const DescribeRootFoldersResponseFilterSensitiveLog: (obj: DescribeRootFoldersResponse) => any;
/**
 * @internal
 */
export declare const DescribeUsersRequestFilterSensitiveLog: (obj: DescribeUsersRequest) => any;
/**
 * @internal
 */
export declare const DescribeUsersResponseFilterSensitiveLog: (obj: DescribeUsersResponse) => any;
/**
 * @internal
 */
export declare const GetCurrentUserRequestFilterSensitiveLog: (obj: GetCurrentUserRequest) => any;
/**
 * @internal
 */
export declare const GetCurrentUserResponseFilterSensitiveLog: (obj: GetCurrentUserResponse) => any;
/**
 * @internal
 */
export declare const GetDocumentRequestFilterSensitiveLog: (obj: GetDocumentRequest) => any;
/**
 * @internal
 */
export declare const GetDocumentResponseFilterSensitiveLog: (obj: GetDocumentResponse) => any;
/**
 * @internal
 */
export declare const GetDocumentPathRequestFilterSensitiveLog: (obj: GetDocumentPathRequest) => any;
/**
 * @internal
 */
export declare const ResourcePathComponentFilterSensitiveLog: (obj: ResourcePathComponent) => any;
/**
 * @internal
 */
export declare const ResourcePathFilterSensitiveLog: (obj: ResourcePath) => any;
/**
 * @internal
 */
export declare const GetDocumentPathResponseFilterSensitiveLog: (obj: GetDocumentPathResponse) => any;
/**
 * @internal
 */
export declare const GetDocumentVersionRequestFilterSensitiveLog: (obj: GetDocumentVersionRequest) => any;
/**
 * @internal
 */
export declare const GetDocumentVersionResponseFilterSensitiveLog: (obj: GetDocumentVersionResponse) => any;
/**
 * @internal
 */
export declare const GetFolderRequestFilterSensitiveLog: (obj: GetFolderRequest) => any;
/**
 * @internal
 */
export declare const GetFolderResponseFilterSensitiveLog: (obj: GetFolderResponse) => any;
/**
 * @internal
 */
export declare const GetFolderPathRequestFilterSensitiveLog: (obj: GetFolderPathRequest) => any;
/**
 * @internal
 */
export declare const GetFolderPathResponseFilterSensitiveLog: (obj: GetFolderPathResponse) => any;
/**
 * @internal
 */
export declare const GetResourcesRequestFilterSensitiveLog: (obj: GetResourcesRequest) => any;
/**
 * @internal
 */
export declare const GetResourcesResponseFilterSensitiveLog: (obj: GetResourcesResponse) => any;
/**
 * @internal
 */
export declare const InitiateDocumentVersionUploadRequestFilterSensitiveLog: (obj: InitiateDocumentVersionUploadRequest) => any;
/**
 * @internal
 */
export declare const UploadMetadataFilterSensitiveLog: (obj: UploadMetadata) => any;
/**
 * @internal
 */
export declare const InitiateDocumentVersionUploadResponseFilterSensitiveLog: (obj: InitiateDocumentVersionUploadResponse) => any;
/**
 * @internal
 */
export declare const RemoveAllResourcePermissionsRequestFilterSensitiveLog: (obj: RemoveAllResourcePermissionsRequest) => any;
/**
 * @internal
 */
export declare const RemoveResourcePermissionRequestFilterSensitiveLog: (obj: RemoveResourcePermissionRequest) => any;
/**
 * @internal
 */
export declare const RestoreDocumentVersionsRequestFilterSensitiveLog: (obj: RestoreDocumentVersionsRequest) => any;
/**
 * @internal
 */
export declare const SearchResourcesRequestFilterSensitiveLog: (obj: SearchResourcesRequest) => any;
/**
 * @internal
 */
export declare const ResponseItemFilterSensitiveLog: (obj: ResponseItem) => any;
/**
 * @internal
 */
export declare const SearchResourcesResponseFilterSensitiveLog: (obj: SearchResourcesResponse) => any;
/**
 * @internal
 */
export declare const UpdateDocumentRequestFilterSensitiveLog: (obj: UpdateDocumentRequest) => any;
/**
 * @internal
 */
export declare const UpdateDocumentVersionRequestFilterSensitiveLog: (obj: UpdateDocumentVersionRequest) => any;
/**
 * @internal
 */
export declare const UpdateFolderRequestFilterSensitiveLog: (obj: UpdateFolderRequest) => any;
/**
 * @internal
 */
export declare const UpdateUserRequestFilterSensitiveLog: (obj: UpdateUserRequest) => any;
/**
 * @internal
 */
export declare const UpdateUserResponseFilterSensitiveLog: (obj: UpdateUserResponse) => any;
