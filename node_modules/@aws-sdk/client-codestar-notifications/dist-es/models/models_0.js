import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { CodestarNotificationsServiceException as __BaseException } from "./CodestarNotificationsServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
export class ConfigurationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConfigurationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConfigurationException.prototype);
        this.Message = opts.Message;
    }
}
export const DetailType = {
    BASIC: "BASIC",
    FULL: "FULL",
};
export const NotificationRuleStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const TargetStatus = {
    ACTIVE: "ACTIVE",
    DEACTIVATED: "DEACTIVATED",
    INACTIVE: "INACTIVE",
    PENDING: "PENDING",
    UNREACHABLE: "UNREACHABLE",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export const ListEventTypesFilterName = {
    RESOURCE_TYPE: "RESOURCE_TYPE",
    SERVICE_NAME: "SERVICE_NAME",
};
export const ListNotificationRulesFilterName = {
    CREATED_BY: "CREATED_BY",
    EVENT_TYPE_ID: "EVENT_TYPE_ID",
    RESOURCE: "RESOURCE",
    TARGET_ADDRESS: "TARGET_ADDRESS",
};
export const ListTargetsFilterName = {
    TARGET_ADDRESS: "TARGET_ADDRESS",
    TARGET_STATUS: "TARGET_STATUS",
    TARGET_TYPE: "TARGET_TYPE",
};
export const TargetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TargetAddress && { TargetAddress: SENSITIVE_STRING }),
});
export const CreateNotificationRuleRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: SENSITIVE_STRING }),
    ...(obj.Targets && { Targets: obj.Targets.map((item) => TargetFilterSensitiveLog(item)) }),
});
export const DeleteTargetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TargetAddress && { TargetAddress: SENSITIVE_STRING }),
});
export const TargetSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TargetAddress && { TargetAddress: SENSITIVE_STRING }),
});
export const DescribeNotificationRuleResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: SENSITIVE_STRING }),
    ...(obj.Targets && { Targets: obj.Targets.map((item) => TargetSummaryFilterSensitiveLog(item)) }),
});
export const ListTargetsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Targets && { Targets: obj.Targets.map((item) => TargetSummaryFilterSensitiveLog(item)) }),
});
export const SubscribeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Target && { Target: TargetFilterSensitiveLog(obj.Target) }),
});
export const UnsubscribeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TargetAddress && { TargetAddress: SENSITIVE_STRING }),
});
export const UpdateNotificationRuleRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: SENSITIVE_STRING }),
    ...(obj.Targets && { Targets: obj.Targets.map((item) => TargetFilterSensitiveLog(item)) }),
});
