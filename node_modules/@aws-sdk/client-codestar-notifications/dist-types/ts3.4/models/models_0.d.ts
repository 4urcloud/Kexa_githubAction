import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CodestarNotificationsServiceException as __BaseException } from "./CodestarNotificationsServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare class ConfigurationException extends __BaseException {
  readonly name: "ConfigurationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ConfigurationException, __BaseException>
  );
}
export declare const DetailType: {
  readonly BASIC: "BASIC";
  readonly FULL: "FULL";
};
export type DetailType = (typeof DetailType)[keyof typeof DetailType];
export declare const NotificationRuleStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type NotificationRuleStatus =
  (typeof NotificationRuleStatus)[keyof typeof NotificationRuleStatus];
export interface Target {
  TargetType?: string;
  TargetAddress?: string;
}
export interface CreateNotificationRuleRequest {
  Name: string | undefined;
  EventTypeIds: string[] | undefined;
  Resource: string | undefined;
  Targets: Target[] | undefined;
  DetailType: DetailType | undefined;
  ClientRequestToken?: string;
  Tags?: Record<string, string>;
  Status?: NotificationRuleStatus;
}
export interface CreateNotificationRuleResult {
  Arn?: string;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteNotificationRuleRequest {
  Arn: string | undefined;
}
export interface DeleteNotificationRuleResult {
  Arn?: string;
}
export interface DeleteTargetRequest {
  TargetAddress: string | undefined;
  ForceUnsubscribeAll?: boolean;
}
export interface DeleteTargetResult {}
export interface DescribeNotificationRuleRequest {
  Arn: string | undefined;
}
export interface EventTypeSummary {
  EventTypeId?: string;
  ServiceName?: string;
  EventTypeName?: string;
  ResourceType?: string;
}
export declare const TargetStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DEACTIVATED: "DEACTIVATED";
  readonly INACTIVE: "INACTIVE";
  readonly PENDING: "PENDING";
  readonly UNREACHABLE: "UNREACHABLE";
};
export type TargetStatus = (typeof TargetStatus)[keyof typeof TargetStatus];
export interface TargetSummary {
  TargetAddress?: string;
  TargetType?: string;
  TargetStatus?: TargetStatus;
}
export interface DescribeNotificationRuleResult {
  Arn: string | undefined;
  Name?: string;
  EventTypes?: EventTypeSummary[];
  Resource?: string;
  Targets?: TargetSummary[];
  DetailType?: DetailType;
  CreatedBy?: string;
  Status?: NotificationRuleStatus;
  CreatedTimestamp?: Date;
  LastModifiedTimestamp?: Date;
  Tags?: Record<string, string>;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export declare const ListEventTypesFilterName: {
  readonly RESOURCE_TYPE: "RESOURCE_TYPE";
  readonly SERVICE_NAME: "SERVICE_NAME";
};
export type ListEventTypesFilterName =
  (typeof ListEventTypesFilterName)[keyof typeof ListEventTypesFilterName];
export interface ListEventTypesFilter {
  Name: ListEventTypesFilterName | undefined;
  Value: string | undefined;
}
export interface ListEventTypesRequest {
  Filters?: ListEventTypesFilter[];
  NextToken?: string;
  MaxResults?: number;
}
export interface ListEventTypesResult {
  EventTypes?: EventTypeSummary[];
  NextToken?: string;
}
export declare const ListNotificationRulesFilterName: {
  readonly CREATED_BY: "CREATED_BY";
  readonly EVENT_TYPE_ID: "EVENT_TYPE_ID";
  readonly RESOURCE: "RESOURCE";
  readonly TARGET_ADDRESS: "TARGET_ADDRESS";
};
export type ListNotificationRulesFilterName =
  (typeof ListNotificationRulesFilterName)[keyof typeof ListNotificationRulesFilterName];
export interface ListNotificationRulesFilter {
  Name: ListNotificationRulesFilterName | undefined;
  Value: string | undefined;
}
export interface ListNotificationRulesRequest {
  Filters?: ListNotificationRulesFilter[];
  NextToken?: string;
  MaxResults?: number;
}
export interface NotificationRuleSummary {
  Id?: string;
  Arn?: string;
}
export interface ListNotificationRulesResult {
  NextToken?: string;
  NotificationRules?: NotificationRuleSummary[];
}
export interface ListTagsForResourceRequest {
  Arn: string | undefined;
}
export interface ListTagsForResourceResult {
  Tags?: Record<string, string>;
}
export declare const ListTargetsFilterName: {
  readonly TARGET_ADDRESS: "TARGET_ADDRESS";
  readonly TARGET_STATUS: "TARGET_STATUS";
  readonly TARGET_TYPE: "TARGET_TYPE";
};
export type ListTargetsFilterName =
  (typeof ListTargetsFilterName)[keyof typeof ListTargetsFilterName];
export interface ListTargetsFilter {
  Name: ListTargetsFilterName | undefined;
  Value: string | undefined;
}
export interface ListTargetsRequest {
  Filters?: ListTargetsFilter[];
  NextToken?: string;
  MaxResults?: number;
}
export interface ListTargetsResult {
  Targets?: TargetSummary[];
  NextToken?: string;
}
export interface SubscribeRequest {
  Arn: string | undefined;
  Target: Target | undefined;
  ClientRequestToken?: string;
}
export interface SubscribeResult {
  Arn?: string;
}
export interface TagResourceRequest {
  Arn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResult {
  Tags?: Record<string, string>;
}
export interface UnsubscribeRequest {
  Arn: string | undefined;
  TargetAddress: string | undefined;
}
export interface UnsubscribeResult {
  Arn: string | undefined;
}
export interface UntagResourceRequest {
  Arn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResult {}
export interface UpdateNotificationRuleRequest {
  Arn: string | undefined;
  Name?: string;
  Status?: NotificationRuleStatus;
  EventTypeIds?: string[];
  Targets?: Target[];
  DetailType?: DetailType;
}
export interface UpdateNotificationRuleResult {}
export declare const TargetFilterSensitiveLog: (obj: Target) => any;
export declare const CreateNotificationRuleRequestFilterSensitiveLog: (
  obj: CreateNotificationRuleRequest
) => any;
export declare const DeleteTargetRequestFilterSensitiveLog: (
  obj: DeleteTargetRequest
) => any;
export declare const TargetSummaryFilterSensitiveLog: (
  obj: TargetSummary
) => any;
export declare const DescribeNotificationRuleResultFilterSensitiveLog: (
  obj: DescribeNotificationRuleResult
) => any;
export declare const ListTargetsResultFilterSensitiveLog: (
  obj: ListTargetsResult
) => any;
export declare const SubscribeRequestFilterSensitiveLog: (
  obj: SubscribeRequest
) => any;
export declare const UnsubscribeRequestFilterSensitiveLog: (
  obj: UnsubscribeRequest
) => any;
export declare const UpdateNotificationRuleRequestFilterSensitiveLog: (
  obj: UpdateNotificationRuleRequest
) => any;
