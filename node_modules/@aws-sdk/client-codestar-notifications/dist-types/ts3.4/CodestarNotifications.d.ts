import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { CodestarNotificationsClient } from "./CodestarNotificationsClient";
import {
  CreateNotificationRuleCommandInput,
  CreateNotificationRuleCommandOutput,
} from "./commands/CreateNotificationRuleCommand";
import {
  DeleteNotificationRuleCommandInput,
  DeleteNotificationRuleCommandOutput,
} from "./commands/DeleteNotificationRuleCommand";
import {
  DeleteTargetCommandInput,
  DeleteTargetCommandOutput,
} from "./commands/DeleteTargetCommand";
import {
  DescribeNotificationRuleCommandInput,
  DescribeNotificationRuleCommandOutput,
} from "./commands/DescribeNotificationRuleCommand";
import {
  ListEventTypesCommandInput,
  ListEventTypesCommandOutput,
} from "./commands/ListEventTypesCommand";
import {
  ListNotificationRulesCommandInput,
  ListNotificationRulesCommandOutput,
} from "./commands/ListNotificationRulesCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  ListTargetsCommandInput,
  ListTargetsCommandOutput,
} from "./commands/ListTargetsCommand";
import {
  SubscribeCommandInput,
  SubscribeCommandOutput,
} from "./commands/SubscribeCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UnsubscribeCommandInput,
  UnsubscribeCommandOutput,
} from "./commands/UnsubscribeCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateNotificationRuleCommandInput,
  UpdateNotificationRuleCommandOutput,
} from "./commands/UpdateNotificationRuleCommand";
export interface CodestarNotifications {
  createNotificationRule(
    args: CreateNotificationRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateNotificationRuleCommandOutput>;
  createNotificationRule(
    args: CreateNotificationRuleCommandInput,
    cb: (err: any, data?: CreateNotificationRuleCommandOutput) => void
  ): void;
  createNotificationRule(
    args: CreateNotificationRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateNotificationRuleCommandOutput) => void
  ): void;
  deleteNotificationRule(
    args: DeleteNotificationRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteNotificationRuleCommandOutput>;
  deleteNotificationRule(
    args: DeleteNotificationRuleCommandInput,
    cb: (err: any, data?: DeleteNotificationRuleCommandOutput) => void
  ): void;
  deleteNotificationRule(
    args: DeleteNotificationRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteNotificationRuleCommandOutput) => void
  ): void;
  deleteTarget(
    args: DeleteTargetCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteTargetCommandOutput>;
  deleteTarget(
    args: DeleteTargetCommandInput,
    cb: (err: any, data?: DeleteTargetCommandOutput) => void
  ): void;
  deleteTarget(
    args: DeleteTargetCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteTargetCommandOutput) => void
  ): void;
  describeNotificationRule(
    args: DescribeNotificationRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeNotificationRuleCommandOutput>;
  describeNotificationRule(
    args: DescribeNotificationRuleCommandInput,
    cb: (err: any, data?: DescribeNotificationRuleCommandOutput) => void
  ): void;
  describeNotificationRule(
    args: DescribeNotificationRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeNotificationRuleCommandOutput) => void
  ): void;
  listEventTypes(
    args: ListEventTypesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListEventTypesCommandOutput>;
  listEventTypes(
    args: ListEventTypesCommandInput,
    cb: (err: any, data?: ListEventTypesCommandOutput) => void
  ): void;
  listEventTypes(
    args: ListEventTypesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListEventTypesCommandOutput) => void
  ): void;
  listNotificationRules(
    args: ListNotificationRulesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListNotificationRulesCommandOutput>;
  listNotificationRules(
    args: ListNotificationRulesCommandInput,
    cb: (err: any, data?: ListNotificationRulesCommandOutput) => void
  ): void;
  listNotificationRules(
    args: ListNotificationRulesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListNotificationRulesCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTargets(
    args: ListTargetsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTargetsCommandOutput>;
  listTargets(
    args: ListTargetsCommandInput,
    cb: (err: any, data?: ListTargetsCommandOutput) => void
  ): void;
  listTargets(
    args: ListTargetsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTargetsCommandOutput) => void
  ): void;
  subscribe(
    args: SubscribeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SubscribeCommandOutput>;
  subscribe(
    args: SubscribeCommandInput,
    cb: (err: any, data?: SubscribeCommandOutput) => void
  ): void;
  subscribe(
    args: SubscribeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SubscribeCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  unsubscribe(
    args: UnsubscribeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UnsubscribeCommandOutput>;
  unsubscribe(
    args: UnsubscribeCommandInput,
    cb: (err: any, data?: UnsubscribeCommandOutput) => void
  ): void;
  unsubscribe(
    args: UnsubscribeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UnsubscribeCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateNotificationRule(
    args: UpdateNotificationRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateNotificationRuleCommandOutput>;
  updateNotificationRule(
    args: UpdateNotificationRuleCommandInput,
    cb: (err: any, data?: UpdateNotificationRuleCommandOutput) => void
  ): void;
  updateNotificationRule(
    args: UpdateNotificationRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateNotificationRuleCommandOutput) => void
  ): void;
}
export declare class CodestarNotifications
  extends CodestarNotificationsClient
  implements CodestarNotifications {}
