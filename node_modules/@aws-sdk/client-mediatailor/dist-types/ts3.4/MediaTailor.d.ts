import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  ConfigureLogsForChannelCommandInput,
  ConfigureLogsForChannelCommandOutput,
} from "./commands/ConfigureLogsForChannelCommand";
import {
  ConfigureLogsForPlaybackConfigurationCommandInput,
  ConfigureLogsForPlaybackConfigurationCommandOutput,
} from "./commands/ConfigureLogsForPlaybackConfigurationCommand";
import {
  CreateChannelCommandInput,
  CreateChannelCommandOutput,
} from "./commands/CreateChannelCommand";
import {
  CreateLiveSourceCommandInput,
  CreateLiveSourceCommandOutput,
} from "./commands/CreateLiveSourceCommand";
import {
  CreatePrefetchScheduleCommandInput,
  CreatePrefetchScheduleCommandOutput,
} from "./commands/CreatePrefetchScheduleCommand";
import {
  CreateProgramCommandInput,
  CreateProgramCommandOutput,
} from "./commands/CreateProgramCommand";
import {
  CreateSourceLocationCommandInput,
  CreateSourceLocationCommandOutput,
} from "./commands/CreateSourceLocationCommand";
import {
  CreateVodSourceCommandInput,
  CreateVodSourceCommandOutput,
} from "./commands/CreateVodSourceCommand";
import {
  DeleteChannelCommandInput,
  DeleteChannelCommandOutput,
} from "./commands/DeleteChannelCommand";
import {
  DeleteChannelPolicyCommandInput,
  DeleteChannelPolicyCommandOutput,
} from "./commands/DeleteChannelPolicyCommand";
import {
  DeleteLiveSourceCommandInput,
  DeleteLiveSourceCommandOutput,
} from "./commands/DeleteLiveSourceCommand";
import {
  DeletePlaybackConfigurationCommandInput,
  DeletePlaybackConfigurationCommandOutput,
} from "./commands/DeletePlaybackConfigurationCommand";
import {
  DeletePrefetchScheduleCommandInput,
  DeletePrefetchScheduleCommandOutput,
} from "./commands/DeletePrefetchScheduleCommand";
import {
  DeleteProgramCommandInput,
  DeleteProgramCommandOutput,
} from "./commands/DeleteProgramCommand";
import {
  DeleteSourceLocationCommandInput,
  DeleteSourceLocationCommandOutput,
} from "./commands/DeleteSourceLocationCommand";
import {
  DeleteVodSourceCommandInput,
  DeleteVodSourceCommandOutput,
} from "./commands/DeleteVodSourceCommand";
import {
  DescribeChannelCommandInput,
  DescribeChannelCommandOutput,
} from "./commands/DescribeChannelCommand";
import {
  DescribeLiveSourceCommandInput,
  DescribeLiveSourceCommandOutput,
} from "./commands/DescribeLiveSourceCommand";
import {
  DescribeProgramCommandInput,
  DescribeProgramCommandOutput,
} from "./commands/DescribeProgramCommand";
import {
  DescribeSourceLocationCommandInput,
  DescribeSourceLocationCommandOutput,
} from "./commands/DescribeSourceLocationCommand";
import {
  DescribeVodSourceCommandInput,
  DescribeVodSourceCommandOutput,
} from "./commands/DescribeVodSourceCommand";
import {
  GetChannelPolicyCommandInput,
  GetChannelPolicyCommandOutput,
} from "./commands/GetChannelPolicyCommand";
import {
  GetChannelScheduleCommandInput,
  GetChannelScheduleCommandOutput,
} from "./commands/GetChannelScheduleCommand";
import {
  GetPlaybackConfigurationCommandInput,
  GetPlaybackConfigurationCommandOutput,
} from "./commands/GetPlaybackConfigurationCommand";
import {
  GetPrefetchScheduleCommandInput,
  GetPrefetchScheduleCommandOutput,
} from "./commands/GetPrefetchScheduleCommand";
import {
  ListAlertsCommandInput,
  ListAlertsCommandOutput,
} from "./commands/ListAlertsCommand";
import {
  ListChannelsCommandInput,
  ListChannelsCommandOutput,
} from "./commands/ListChannelsCommand";
import {
  ListLiveSourcesCommandInput,
  ListLiveSourcesCommandOutput,
} from "./commands/ListLiveSourcesCommand";
import {
  ListPlaybackConfigurationsCommandInput,
  ListPlaybackConfigurationsCommandOutput,
} from "./commands/ListPlaybackConfigurationsCommand";
import {
  ListPrefetchSchedulesCommandInput,
  ListPrefetchSchedulesCommandOutput,
} from "./commands/ListPrefetchSchedulesCommand";
import {
  ListSourceLocationsCommandInput,
  ListSourceLocationsCommandOutput,
} from "./commands/ListSourceLocationsCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  ListVodSourcesCommandInput,
  ListVodSourcesCommandOutput,
} from "./commands/ListVodSourcesCommand";
import {
  PutChannelPolicyCommandInput,
  PutChannelPolicyCommandOutput,
} from "./commands/PutChannelPolicyCommand";
import {
  PutPlaybackConfigurationCommandInput,
  PutPlaybackConfigurationCommandOutput,
} from "./commands/PutPlaybackConfigurationCommand";
import {
  StartChannelCommandInput,
  StartChannelCommandOutput,
} from "./commands/StartChannelCommand";
import {
  StopChannelCommandInput,
  StopChannelCommandOutput,
} from "./commands/StopChannelCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateChannelCommandInput,
  UpdateChannelCommandOutput,
} from "./commands/UpdateChannelCommand";
import {
  UpdateLiveSourceCommandInput,
  UpdateLiveSourceCommandOutput,
} from "./commands/UpdateLiveSourceCommand";
import {
  UpdateProgramCommandInput,
  UpdateProgramCommandOutput,
} from "./commands/UpdateProgramCommand";
import {
  UpdateSourceLocationCommandInput,
  UpdateSourceLocationCommandOutput,
} from "./commands/UpdateSourceLocationCommand";
import {
  UpdateVodSourceCommandInput,
  UpdateVodSourceCommandOutput,
} from "./commands/UpdateVodSourceCommand";
import { MediaTailorClient } from "./MediaTailorClient";
export interface MediaTailor {
  configureLogsForChannel(
    args: ConfigureLogsForChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ConfigureLogsForChannelCommandOutput>;
  configureLogsForChannel(
    args: ConfigureLogsForChannelCommandInput,
    cb: (err: any, data?: ConfigureLogsForChannelCommandOutput) => void
  ): void;
  configureLogsForChannel(
    args: ConfigureLogsForChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ConfigureLogsForChannelCommandOutput) => void
  ): void;
  configureLogsForPlaybackConfiguration(
    args: ConfigureLogsForPlaybackConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ConfigureLogsForPlaybackConfigurationCommandOutput>;
  configureLogsForPlaybackConfiguration(
    args: ConfigureLogsForPlaybackConfigurationCommandInput,
    cb: (
      err: any,
      data?: ConfigureLogsForPlaybackConfigurationCommandOutput
    ) => void
  ): void;
  configureLogsForPlaybackConfiguration(
    args: ConfigureLogsForPlaybackConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ConfigureLogsForPlaybackConfigurationCommandOutput
    ) => void
  ): void;
  createChannel(
    args: CreateChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateChannelCommandOutput>;
  createChannel(
    args: CreateChannelCommandInput,
    cb: (err: any, data?: CreateChannelCommandOutput) => void
  ): void;
  createChannel(
    args: CreateChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateChannelCommandOutput) => void
  ): void;
  createLiveSource(
    args: CreateLiveSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLiveSourceCommandOutput>;
  createLiveSource(
    args: CreateLiveSourceCommandInput,
    cb: (err: any, data?: CreateLiveSourceCommandOutput) => void
  ): void;
  createLiveSource(
    args: CreateLiveSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLiveSourceCommandOutput) => void
  ): void;
  createPrefetchSchedule(
    args: CreatePrefetchScheduleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreatePrefetchScheduleCommandOutput>;
  createPrefetchSchedule(
    args: CreatePrefetchScheduleCommandInput,
    cb: (err: any, data?: CreatePrefetchScheduleCommandOutput) => void
  ): void;
  createPrefetchSchedule(
    args: CreatePrefetchScheduleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreatePrefetchScheduleCommandOutput) => void
  ): void;
  createProgram(
    args: CreateProgramCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateProgramCommandOutput>;
  createProgram(
    args: CreateProgramCommandInput,
    cb: (err: any, data?: CreateProgramCommandOutput) => void
  ): void;
  createProgram(
    args: CreateProgramCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateProgramCommandOutput) => void
  ): void;
  createSourceLocation(
    args: CreateSourceLocationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateSourceLocationCommandOutput>;
  createSourceLocation(
    args: CreateSourceLocationCommandInput,
    cb: (err: any, data?: CreateSourceLocationCommandOutput) => void
  ): void;
  createSourceLocation(
    args: CreateSourceLocationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateSourceLocationCommandOutput) => void
  ): void;
  createVodSource(
    args: CreateVodSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateVodSourceCommandOutput>;
  createVodSource(
    args: CreateVodSourceCommandInput,
    cb: (err: any, data?: CreateVodSourceCommandOutput) => void
  ): void;
  createVodSource(
    args: CreateVodSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateVodSourceCommandOutput) => void
  ): void;
  deleteChannel(
    args: DeleteChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelCommandOutput>;
  deleteChannel(
    args: DeleteChannelCommandInput,
    cb: (err: any, data?: DeleteChannelCommandOutput) => void
  ): void;
  deleteChannel(
    args: DeleteChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelCommandOutput) => void
  ): void;
  deleteChannelPolicy(
    args: DeleteChannelPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteChannelPolicyCommandOutput>;
  deleteChannelPolicy(
    args: DeleteChannelPolicyCommandInput,
    cb: (err: any, data?: DeleteChannelPolicyCommandOutput) => void
  ): void;
  deleteChannelPolicy(
    args: DeleteChannelPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteChannelPolicyCommandOutput) => void
  ): void;
  deleteLiveSource(
    args: DeleteLiveSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLiveSourceCommandOutput>;
  deleteLiveSource(
    args: DeleteLiveSourceCommandInput,
    cb: (err: any, data?: DeleteLiveSourceCommandOutput) => void
  ): void;
  deleteLiveSource(
    args: DeleteLiveSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLiveSourceCommandOutput) => void
  ): void;
  deletePlaybackConfiguration(
    args: DeletePlaybackConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeletePlaybackConfigurationCommandOutput>;
  deletePlaybackConfiguration(
    args: DeletePlaybackConfigurationCommandInput,
    cb: (err: any, data?: DeletePlaybackConfigurationCommandOutput) => void
  ): void;
  deletePlaybackConfiguration(
    args: DeletePlaybackConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeletePlaybackConfigurationCommandOutput) => void
  ): void;
  deletePrefetchSchedule(
    args: DeletePrefetchScheduleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeletePrefetchScheduleCommandOutput>;
  deletePrefetchSchedule(
    args: DeletePrefetchScheduleCommandInput,
    cb: (err: any, data?: DeletePrefetchScheduleCommandOutput) => void
  ): void;
  deletePrefetchSchedule(
    args: DeletePrefetchScheduleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeletePrefetchScheduleCommandOutput) => void
  ): void;
  deleteProgram(
    args: DeleteProgramCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteProgramCommandOutput>;
  deleteProgram(
    args: DeleteProgramCommandInput,
    cb: (err: any, data?: DeleteProgramCommandOutput) => void
  ): void;
  deleteProgram(
    args: DeleteProgramCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteProgramCommandOutput) => void
  ): void;
  deleteSourceLocation(
    args: DeleteSourceLocationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteSourceLocationCommandOutput>;
  deleteSourceLocation(
    args: DeleteSourceLocationCommandInput,
    cb: (err: any, data?: DeleteSourceLocationCommandOutput) => void
  ): void;
  deleteSourceLocation(
    args: DeleteSourceLocationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteSourceLocationCommandOutput) => void
  ): void;
  deleteVodSource(
    args: DeleteVodSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteVodSourceCommandOutput>;
  deleteVodSource(
    args: DeleteVodSourceCommandInput,
    cb: (err: any, data?: DeleteVodSourceCommandOutput) => void
  ): void;
  deleteVodSource(
    args: DeleteVodSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteVodSourceCommandOutput) => void
  ): void;
  describeChannel(
    args: DescribeChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeChannelCommandOutput>;
  describeChannel(
    args: DescribeChannelCommandInput,
    cb: (err: any, data?: DescribeChannelCommandOutput) => void
  ): void;
  describeChannel(
    args: DescribeChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeChannelCommandOutput) => void
  ): void;
  describeLiveSource(
    args: DescribeLiveSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeLiveSourceCommandOutput>;
  describeLiveSource(
    args: DescribeLiveSourceCommandInput,
    cb: (err: any, data?: DescribeLiveSourceCommandOutput) => void
  ): void;
  describeLiveSource(
    args: DescribeLiveSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeLiveSourceCommandOutput) => void
  ): void;
  describeProgram(
    args: DescribeProgramCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeProgramCommandOutput>;
  describeProgram(
    args: DescribeProgramCommandInput,
    cb: (err: any, data?: DescribeProgramCommandOutput) => void
  ): void;
  describeProgram(
    args: DescribeProgramCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeProgramCommandOutput) => void
  ): void;
  describeSourceLocation(
    args: DescribeSourceLocationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeSourceLocationCommandOutput>;
  describeSourceLocation(
    args: DescribeSourceLocationCommandInput,
    cb: (err: any, data?: DescribeSourceLocationCommandOutput) => void
  ): void;
  describeSourceLocation(
    args: DescribeSourceLocationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeSourceLocationCommandOutput) => void
  ): void;
  describeVodSource(
    args: DescribeVodSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeVodSourceCommandOutput>;
  describeVodSource(
    args: DescribeVodSourceCommandInput,
    cb: (err: any, data?: DescribeVodSourceCommandOutput) => void
  ): void;
  describeVodSource(
    args: DescribeVodSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeVodSourceCommandOutput) => void
  ): void;
  getChannelPolicy(
    args: GetChannelPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetChannelPolicyCommandOutput>;
  getChannelPolicy(
    args: GetChannelPolicyCommandInput,
    cb: (err: any, data?: GetChannelPolicyCommandOutput) => void
  ): void;
  getChannelPolicy(
    args: GetChannelPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetChannelPolicyCommandOutput) => void
  ): void;
  getChannelSchedule(
    args: GetChannelScheduleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetChannelScheduleCommandOutput>;
  getChannelSchedule(
    args: GetChannelScheduleCommandInput,
    cb: (err: any, data?: GetChannelScheduleCommandOutput) => void
  ): void;
  getChannelSchedule(
    args: GetChannelScheduleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetChannelScheduleCommandOutput) => void
  ): void;
  getPlaybackConfiguration(
    args: GetPlaybackConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetPlaybackConfigurationCommandOutput>;
  getPlaybackConfiguration(
    args: GetPlaybackConfigurationCommandInput,
    cb: (err: any, data?: GetPlaybackConfigurationCommandOutput) => void
  ): void;
  getPlaybackConfiguration(
    args: GetPlaybackConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetPlaybackConfigurationCommandOutput) => void
  ): void;
  getPrefetchSchedule(
    args: GetPrefetchScheduleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetPrefetchScheduleCommandOutput>;
  getPrefetchSchedule(
    args: GetPrefetchScheduleCommandInput,
    cb: (err: any, data?: GetPrefetchScheduleCommandOutput) => void
  ): void;
  getPrefetchSchedule(
    args: GetPrefetchScheduleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetPrefetchScheduleCommandOutput) => void
  ): void;
  listAlerts(
    args: ListAlertsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListAlertsCommandOutput>;
  listAlerts(
    args: ListAlertsCommandInput,
    cb: (err: any, data?: ListAlertsCommandOutput) => void
  ): void;
  listAlerts(
    args: ListAlertsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListAlertsCommandOutput) => void
  ): void;
  listChannels(): Promise<ListChannelsCommandOutput>;
  listChannels(
    args: ListChannelsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListChannelsCommandOutput>;
  listChannels(
    args: ListChannelsCommandInput,
    cb: (err: any, data?: ListChannelsCommandOutput) => void
  ): void;
  listChannels(
    args: ListChannelsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListChannelsCommandOutput) => void
  ): void;
  listLiveSources(
    args: ListLiveSourcesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLiveSourcesCommandOutput>;
  listLiveSources(
    args: ListLiveSourcesCommandInput,
    cb: (err: any, data?: ListLiveSourcesCommandOutput) => void
  ): void;
  listLiveSources(
    args: ListLiveSourcesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListLiveSourcesCommandOutput) => void
  ): void;
  listPlaybackConfigurations(): Promise<ListPlaybackConfigurationsCommandOutput>;
  listPlaybackConfigurations(
    args: ListPlaybackConfigurationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPlaybackConfigurationsCommandOutput>;
  listPlaybackConfigurations(
    args: ListPlaybackConfigurationsCommandInput,
    cb: (err: any, data?: ListPlaybackConfigurationsCommandOutput) => void
  ): void;
  listPlaybackConfigurations(
    args: ListPlaybackConfigurationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPlaybackConfigurationsCommandOutput) => void
  ): void;
  listPrefetchSchedules(
    args: ListPrefetchSchedulesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPrefetchSchedulesCommandOutput>;
  listPrefetchSchedules(
    args: ListPrefetchSchedulesCommandInput,
    cb: (err: any, data?: ListPrefetchSchedulesCommandOutput) => void
  ): void;
  listPrefetchSchedules(
    args: ListPrefetchSchedulesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPrefetchSchedulesCommandOutput) => void
  ): void;
  listSourceLocations(): Promise<ListSourceLocationsCommandOutput>;
  listSourceLocations(
    args: ListSourceLocationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListSourceLocationsCommandOutput>;
  listSourceLocations(
    args: ListSourceLocationsCommandInput,
    cb: (err: any, data?: ListSourceLocationsCommandOutput) => void
  ): void;
  listSourceLocations(
    args: ListSourceLocationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListSourceLocationsCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listVodSources(
    args: ListVodSourcesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListVodSourcesCommandOutput>;
  listVodSources(
    args: ListVodSourcesCommandInput,
    cb: (err: any, data?: ListVodSourcesCommandOutput) => void
  ): void;
  listVodSources(
    args: ListVodSourcesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListVodSourcesCommandOutput) => void
  ): void;
  putChannelPolicy(
    args: PutChannelPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutChannelPolicyCommandOutput>;
  putChannelPolicy(
    args: PutChannelPolicyCommandInput,
    cb: (err: any, data?: PutChannelPolicyCommandOutput) => void
  ): void;
  putChannelPolicy(
    args: PutChannelPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutChannelPolicyCommandOutput) => void
  ): void;
  putPlaybackConfiguration(
    args: PutPlaybackConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutPlaybackConfigurationCommandOutput>;
  putPlaybackConfiguration(
    args: PutPlaybackConfigurationCommandInput,
    cb: (err: any, data?: PutPlaybackConfigurationCommandOutput) => void
  ): void;
  putPlaybackConfiguration(
    args: PutPlaybackConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutPlaybackConfigurationCommandOutput) => void
  ): void;
  startChannel(
    args: StartChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartChannelCommandOutput>;
  startChannel(
    args: StartChannelCommandInput,
    cb: (err: any, data?: StartChannelCommandOutput) => void
  ): void;
  startChannel(
    args: StartChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartChannelCommandOutput) => void
  ): void;
  stopChannel(
    args: StopChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopChannelCommandOutput>;
  stopChannel(
    args: StopChannelCommandInput,
    cb: (err: any, data?: StopChannelCommandOutput) => void
  ): void;
  stopChannel(
    args: StopChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopChannelCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateChannel(
    args: UpdateChannelCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateChannelCommandOutput>;
  updateChannel(
    args: UpdateChannelCommandInput,
    cb: (err: any, data?: UpdateChannelCommandOutput) => void
  ): void;
  updateChannel(
    args: UpdateChannelCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateChannelCommandOutput) => void
  ): void;
  updateLiveSource(
    args: UpdateLiveSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateLiveSourceCommandOutput>;
  updateLiveSource(
    args: UpdateLiveSourceCommandInput,
    cb: (err: any, data?: UpdateLiveSourceCommandOutput) => void
  ): void;
  updateLiveSource(
    args: UpdateLiveSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateLiveSourceCommandOutput) => void
  ): void;
  updateProgram(
    args: UpdateProgramCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateProgramCommandOutput>;
  updateProgram(
    args: UpdateProgramCommandInput,
    cb: (err: any, data?: UpdateProgramCommandOutput) => void
  ): void;
  updateProgram(
    args: UpdateProgramCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateProgramCommandOutput) => void
  ): void;
  updateSourceLocation(
    args: UpdateSourceLocationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateSourceLocationCommandOutput>;
  updateSourceLocation(
    args: UpdateSourceLocationCommandInput,
    cb: (err: any, data?: UpdateSourceLocationCommandOutput) => void
  ): void;
  updateSourceLocation(
    args: UpdateSourceLocationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateSourceLocationCommandOutput) => void
  ): void;
  updateVodSource(
    args: UpdateVodSourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateVodSourceCommandOutput>;
  updateVodSource(
    args: UpdateVodSourceCommandInput,
    cb: (err: any, data?: UpdateVodSourceCommandOutput) => void
  ): void;
  updateVodSource(
    args: UpdateVodSourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateVodSourceCommandOutput) => void
  ): void;
}
export declare class MediaTailor
  extends MediaTailorClient
  implements MediaTailor {}
