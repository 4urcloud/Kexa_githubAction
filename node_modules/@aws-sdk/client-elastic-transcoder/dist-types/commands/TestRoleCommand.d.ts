import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { ElasticTranscoderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ElasticTranscoderClient";
import { TestRoleRequest, TestRoleResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link TestRoleCommand}.
 */
export interface TestRoleCommandInput extends TestRoleRequest {
}
/**
 * @public
 *
 * The output of {@link TestRoleCommand}.
 */
export interface TestRoleCommandOutput extends TestRoleResponse, __MetadataBearer {
}
declare const TestRoleCommand_base: {
    new (input: TestRoleCommandInput): import("@smithy/smithy-client").CommandImpl<TestRoleCommandInput, TestRoleCommandOutput, ElasticTranscoderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: TestRoleCommandInput): import("@smithy/smithy-client").CommandImpl<TestRoleCommandInput, TestRoleCommandOutput, ElasticTranscoderClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>The TestRole operation tests the IAM role used to create the pipeline.</p>
 *         <p>The <code>TestRole</code> action lets you determine whether the IAM role you are using
 *             has sufficient permissions to let Elastic Transcoder perform tasks associated with the transcoding
 *             process. The action attempts to assume the specified IAM role, checks read access to the
 *             input and output buckets, and tries to send a test notification to Amazon SNS topics
 *             that you specify.</p>
 *
 * @deprecated
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ElasticTranscoderClient, TestRoleCommand } from "@aws-sdk/client-elastic-transcoder"; // ES Modules import
 * // const { ElasticTranscoderClient, TestRoleCommand } = require("@aws-sdk/client-elastic-transcoder"); // CommonJS import
 * const client = new ElasticTranscoderClient(config);
 * const input = { // TestRoleRequest
 *   Role: "STRING_VALUE", // required
 *   InputBucket: "STRING_VALUE", // required
 *   OutputBucket: "STRING_VALUE", // required
 *   Topics: [ // SnsTopics // required
 *     "STRING_VALUE",
 *   ],
 * };
 * const command = new TestRoleCommand(input);
 * const response = await client.send(command);
 * // { // TestRoleResponse
 * //   Success: "STRING_VALUE",
 * //   Messages: [ // ExceptionMessages
 * //     "STRING_VALUE",
 * //   ],
 * // };
 *
 * ```
 *
 * @param TestRoleCommandInput - {@link TestRoleCommandInput}
 * @returns {@link TestRoleCommandOutput}
 * @see {@link TestRoleCommandInput} for command's `input` shape.
 * @see {@link TestRoleCommandOutput} for command's `response` shape.
 * @see {@link ElasticTranscoderClientResolvedConfig | config} for ElasticTranscoderClient's `config` shape.
 *
 * @throws {@link AccessDeniedException} (client fault)
 *  <p>General authentication failure. The request was not signed correctly.</p>
 *
 * @throws {@link IncompatibleVersionException} (client fault)
 *
 * @throws {@link InternalServiceException} (server fault)
 *  <p>Elastic Transcoder encountered an unexpected exception while trying to fulfill the request.</p>
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>The requested resource does not exist or is not available. For example, the pipeline
 *             to which you're trying to add a job doesn't exist or is still being created.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>One or more required parameter values were not provided in the request.</p>
 *
 * @throws {@link ElasticTranscoderServiceException}
 * <p>Base exception class for all service exceptions from ElasticTranscoder service.</p>
 *
 * @public
 */
export declare class TestRoleCommand extends TestRoleCommand_base {
}
