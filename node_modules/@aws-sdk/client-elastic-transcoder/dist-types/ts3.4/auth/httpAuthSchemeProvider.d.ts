import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { ElasticTranscoderClientResolvedConfig } from "../ElasticTranscoderClient";
export interface ElasticTranscoderHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface ElasticTranscoderHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    ElasticTranscoderClientResolvedConfig,
    HandlerExecutionContext,
    ElasticTranscoderHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultElasticTranscoderHttpAuthSchemeParametersProvider: (
  config: ElasticTranscoderClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<ElasticTranscoderHttpAuthSchemeParameters>;
export interface ElasticTranscoderHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<ElasticTranscoderHttpAuthSchemeParameters> {}
export declare const defaultElasticTranscoderHttpAuthSchemeProvider: ElasticTranscoderHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: ElasticTranscoderHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: ElasticTranscoderHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
