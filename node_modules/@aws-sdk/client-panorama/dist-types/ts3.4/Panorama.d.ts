import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  CreateApplicationInstanceCommandInput,
  CreateApplicationInstanceCommandOutput,
} from "./commands/CreateApplicationInstanceCommand";
import {
  CreateJobForDevicesCommandInput,
  CreateJobForDevicesCommandOutput,
} from "./commands/CreateJobForDevicesCommand";
import {
  CreateNodeFromTemplateJobCommandInput,
  CreateNodeFromTemplateJobCommandOutput,
} from "./commands/CreateNodeFromTemplateJobCommand";
import {
  CreatePackageCommandInput,
  CreatePackageCommandOutput,
} from "./commands/CreatePackageCommand";
import {
  CreatePackageImportJobCommandInput,
  CreatePackageImportJobCommandOutput,
} from "./commands/CreatePackageImportJobCommand";
import {
  DeleteDeviceCommandInput,
  DeleteDeviceCommandOutput,
} from "./commands/DeleteDeviceCommand";
import {
  DeletePackageCommandInput,
  DeletePackageCommandOutput,
} from "./commands/DeletePackageCommand";
import {
  DeregisterPackageVersionCommandInput,
  DeregisterPackageVersionCommandOutput,
} from "./commands/DeregisterPackageVersionCommand";
import {
  DescribeApplicationInstanceCommandInput,
  DescribeApplicationInstanceCommandOutput,
} from "./commands/DescribeApplicationInstanceCommand";
import {
  DescribeApplicationInstanceDetailsCommandInput,
  DescribeApplicationInstanceDetailsCommandOutput,
} from "./commands/DescribeApplicationInstanceDetailsCommand";
import {
  DescribeDeviceCommandInput,
  DescribeDeviceCommandOutput,
} from "./commands/DescribeDeviceCommand";
import {
  DescribeDeviceJobCommandInput,
  DescribeDeviceJobCommandOutput,
} from "./commands/DescribeDeviceJobCommand";
import {
  DescribeNodeCommandInput,
  DescribeNodeCommandOutput,
} from "./commands/DescribeNodeCommand";
import {
  DescribeNodeFromTemplateJobCommandInput,
  DescribeNodeFromTemplateJobCommandOutput,
} from "./commands/DescribeNodeFromTemplateJobCommand";
import {
  DescribePackageCommandInput,
  DescribePackageCommandOutput,
} from "./commands/DescribePackageCommand";
import {
  DescribePackageImportJobCommandInput,
  DescribePackageImportJobCommandOutput,
} from "./commands/DescribePackageImportJobCommand";
import {
  DescribePackageVersionCommandInput,
  DescribePackageVersionCommandOutput,
} from "./commands/DescribePackageVersionCommand";
import {
  ListApplicationInstanceDependenciesCommandInput,
  ListApplicationInstanceDependenciesCommandOutput,
} from "./commands/ListApplicationInstanceDependenciesCommand";
import {
  ListApplicationInstanceNodeInstancesCommandInput,
  ListApplicationInstanceNodeInstancesCommandOutput,
} from "./commands/ListApplicationInstanceNodeInstancesCommand";
import {
  ListApplicationInstancesCommandInput,
  ListApplicationInstancesCommandOutput,
} from "./commands/ListApplicationInstancesCommand";
import {
  ListDevicesCommandInput,
  ListDevicesCommandOutput,
} from "./commands/ListDevicesCommand";
import {
  ListDevicesJobsCommandInput,
  ListDevicesJobsCommandOutput,
} from "./commands/ListDevicesJobsCommand";
import {
  ListNodeFromTemplateJobsCommandInput,
  ListNodeFromTemplateJobsCommandOutput,
} from "./commands/ListNodeFromTemplateJobsCommand";
import {
  ListNodesCommandInput,
  ListNodesCommandOutput,
} from "./commands/ListNodesCommand";
import {
  ListPackageImportJobsCommandInput,
  ListPackageImportJobsCommandOutput,
} from "./commands/ListPackageImportJobsCommand";
import {
  ListPackagesCommandInput,
  ListPackagesCommandOutput,
} from "./commands/ListPackagesCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  ProvisionDeviceCommandInput,
  ProvisionDeviceCommandOutput,
} from "./commands/ProvisionDeviceCommand";
import {
  RegisterPackageVersionCommandInput,
  RegisterPackageVersionCommandOutput,
} from "./commands/RegisterPackageVersionCommand";
import {
  RemoveApplicationInstanceCommandInput,
  RemoveApplicationInstanceCommandOutput,
} from "./commands/RemoveApplicationInstanceCommand";
import {
  SignalApplicationInstanceNodeInstancesCommandInput,
  SignalApplicationInstanceNodeInstancesCommandOutput,
} from "./commands/SignalApplicationInstanceNodeInstancesCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateDeviceMetadataCommandInput,
  UpdateDeviceMetadataCommandOutput,
} from "./commands/UpdateDeviceMetadataCommand";
import { PanoramaClient } from "./PanoramaClient";
export interface Panorama {
  createApplicationInstance(
    args: CreateApplicationInstanceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateApplicationInstanceCommandOutput>;
  createApplicationInstance(
    args: CreateApplicationInstanceCommandInput,
    cb: (err: any, data?: CreateApplicationInstanceCommandOutput) => void
  ): void;
  createApplicationInstance(
    args: CreateApplicationInstanceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateApplicationInstanceCommandOutput) => void
  ): void;
  createJobForDevices(
    args: CreateJobForDevicesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateJobForDevicesCommandOutput>;
  createJobForDevices(
    args: CreateJobForDevicesCommandInput,
    cb: (err: any, data?: CreateJobForDevicesCommandOutput) => void
  ): void;
  createJobForDevices(
    args: CreateJobForDevicesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateJobForDevicesCommandOutput) => void
  ): void;
  createNodeFromTemplateJob(
    args: CreateNodeFromTemplateJobCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateNodeFromTemplateJobCommandOutput>;
  createNodeFromTemplateJob(
    args: CreateNodeFromTemplateJobCommandInput,
    cb: (err: any, data?: CreateNodeFromTemplateJobCommandOutput) => void
  ): void;
  createNodeFromTemplateJob(
    args: CreateNodeFromTemplateJobCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateNodeFromTemplateJobCommandOutput) => void
  ): void;
  createPackage(
    args: CreatePackageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreatePackageCommandOutput>;
  createPackage(
    args: CreatePackageCommandInput,
    cb: (err: any, data?: CreatePackageCommandOutput) => void
  ): void;
  createPackage(
    args: CreatePackageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreatePackageCommandOutput) => void
  ): void;
  createPackageImportJob(
    args: CreatePackageImportJobCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreatePackageImportJobCommandOutput>;
  createPackageImportJob(
    args: CreatePackageImportJobCommandInput,
    cb: (err: any, data?: CreatePackageImportJobCommandOutput) => void
  ): void;
  createPackageImportJob(
    args: CreatePackageImportJobCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreatePackageImportJobCommandOutput) => void
  ): void;
  deleteDevice(
    args: DeleteDeviceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteDeviceCommandOutput>;
  deleteDevice(
    args: DeleteDeviceCommandInput,
    cb: (err: any, data?: DeleteDeviceCommandOutput) => void
  ): void;
  deleteDevice(
    args: DeleteDeviceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteDeviceCommandOutput) => void
  ): void;
  deletePackage(
    args: DeletePackageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeletePackageCommandOutput>;
  deletePackage(
    args: DeletePackageCommandInput,
    cb: (err: any, data?: DeletePackageCommandOutput) => void
  ): void;
  deletePackage(
    args: DeletePackageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeletePackageCommandOutput) => void
  ): void;
  deregisterPackageVersion(
    args: DeregisterPackageVersionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeregisterPackageVersionCommandOutput>;
  deregisterPackageVersion(
    args: DeregisterPackageVersionCommandInput,
    cb: (err: any, data?: DeregisterPackageVersionCommandOutput) => void
  ): void;
  deregisterPackageVersion(
    args: DeregisterPackageVersionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeregisterPackageVersionCommandOutput) => void
  ): void;
  describeApplicationInstance(
    args: DescribeApplicationInstanceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeApplicationInstanceCommandOutput>;
  describeApplicationInstance(
    args: DescribeApplicationInstanceCommandInput,
    cb: (err: any, data?: DescribeApplicationInstanceCommandOutput) => void
  ): void;
  describeApplicationInstance(
    args: DescribeApplicationInstanceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeApplicationInstanceCommandOutput) => void
  ): void;
  describeApplicationInstanceDetails(
    args: DescribeApplicationInstanceDetailsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeApplicationInstanceDetailsCommandOutput>;
  describeApplicationInstanceDetails(
    args: DescribeApplicationInstanceDetailsCommandInput,
    cb: (
      err: any,
      data?: DescribeApplicationInstanceDetailsCommandOutput
    ) => void
  ): void;
  describeApplicationInstanceDetails(
    args: DescribeApplicationInstanceDetailsCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DescribeApplicationInstanceDetailsCommandOutput
    ) => void
  ): void;
  describeDevice(
    args: DescribeDeviceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeDeviceCommandOutput>;
  describeDevice(
    args: DescribeDeviceCommandInput,
    cb: (err: any, data?: DescribeDeviceCommandOutput) => void
  ): void;
  describeDevice(
    args: DescribeDeviceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeDeviceCommandOutput) => void
  ): void;
  describeDeviceJob(
    args: DescribeDeviceJobCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeDeviceJobCommandOutput>;
  describeDeviceJob(
    args: DescribeDeviceJobCommandInput,
    cb: (err: any, data?: DescribeDeviceJobCommandOutput) => void
  ): void;
  describeDeviceJob(
    args: DescribeDeviceJobCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeDeviceJobCommandOutput) => void
  ): void;
  describeNode(
    args: DescribeNodeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeNodeCommandOutput>;
  describeNode(
    args: DescribeNodeCommandInput,
    cb: (err: any, data?: DescribeNodeCommandOutput) => void
  ): void;
  describeNode(
    args: DescribeNodeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeNodeCommandOutput) => void
  ): void;
  describeNodeFromTemplateJob(
    args: DescribeNodeFromTemplateJobCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeNodeFromTemplateJobCommandOutput>;
  describeNodeFromTemplateJob(
    args: DescribeNodeFromTemplateJobCommandInput,
    cb: (err: any, data?: DescribeNodeFromTemplateJobCommandOutput) => void
  ): void;
  describeNodeFromTemplateJob(
    args: DescribeNodeFromTemplateJobCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeNodeFromTemplateJobCommandOutput) => void
  ): void;
  describePackage(
    args: DescribePackageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribePackageCommandOutput>;
  describePackage(
    args: DescribePackageCommandInput,
    cb: (err: any, data?: DescribePackageCommandOutput) => void
  ): void;
  describePackage(
    args: DescribePackageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribePackageCommandOutput) => void
  ): void;
  describePackageImportJob(
    args: DescribePackageImportJobCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribePackageImportJobCommandOutput>;
  describePackageImportJob(
    args: DescribePackageImportJobCommandInput,
    cb: (err: any, data?: DescribePackageImportJobCommandOutput) => void
  ): void;
  describePackageImportJob(
    args: DescribePackageImportJobCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribePackageImportJobCommandOutput) => void
  ): void;
  describePackageVersion(
    args: DescribePackageVersionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribePackageVersionCommandOutput>;
  describePackageVersion(
    args: DescribePackageVersionCommandInput,
    cb: (err: any, data?: DescribePackageVersionCommandOutput) => void
  ): void;
  describePackageVersion(
    args: DescribePackageVersionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribePackageVersionCommandOutput) => void
  ): void;
  listApplicationInstanceDependencies(
    args: ListApplicationInstanceDependenciesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListApplicationInstanceDependenciesCommandOutput>;
  listApplicationInstanceDependencies(
    args: ListApplicationInstanceDependenciesCommandInput,
    cb: (
      err: any,
      data?: ListApplicationInstanceDependenciesCommandOutput
    ) => void
  ): void;
  listApplicationInstanceDependencies(
    args: ListApplicationInstanceDependenciesCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListApplicationInstanceDependenciesCommandOutput
    ) => void
  ): void;
  listApplicationInstanceNodeInstances(
    args: ListApplicationInstanceNodeInstancesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListApplicationInstanceNodeInstancesCommandOutput>;
  listApplicationInstanceNodeInstances(
    args: ListApplicationInstanceNodeInstancesCommandInput,
    cb: (
      err: any,
      data?: ListApplicationInstanceNodeInstancesCommandOutput
    ) => void
  ): void;
  listApplicationInstanceNodeInstances(
    args: ListApplicationInstanceNodeInstancesCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListApplicationInstanceNodeInstancesCommandOutput
    ) => void
  ): void;
  listApplicationInstances(): Promise<ListApplicationInstancesCommandOutput>;
  listApplicationInstances(
    args: ListApplicationInstancesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListApplicationInstancesCommandOutput>;
  listApplicationInstances(
    args: ListApplicationInstancesCommandInput,
    cb: (err: any, data?: ListApplicationInstancesCommandOutput) => void
  ): void;
  listApplicationInstances(
    args: ListApplicationInstancesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListApplicationInstancesCommandOutput) => void
  ): void;
  listDevices(): Promise<ListDevicesCommandOutput>;
  listDevices(
    args: ListDevicesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDevicesCommandOutput>;
  listDevices(
    args: ListDevicesCommandInput,
    cb: (err: any, data?: ListDevicesCommandOutput) => void
  ): void;
  listDevices(
    args: ListDevicesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDevicesCommandOutput) => void
  ): void;
  listDevicesJobs(): Promise<ListDevicesJobsCommandOutput>;
  listDevicesJobs(
    args: ListDevicesJobsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDevicesJobsCommandOutput>;
  listDevicesJobs(
    args: ListDevicesJobsCommandInput,
    cb: (err: any, data?: ListDevicesJobsCommandOutput) => void
  ): void;
  listDevicesJobs(
    args: ListDevicesJobsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDevicesJobsCommandOutput) => void
  ): void;
  listNodeFromTemplateJobs(): Promise<ListNodeFromTemplateJobsCommandOutput>;
  listNodeFromTemplateJobs(
    args: ListNodeFromTemplateJobsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListNodeFromTemplateJobsCommandOutput>;
  listNodeFromTemplateJobs(
    args: ListNodeFromTemplateJobsCommandInput,
    cb: (err: any, data?: ListNodeFromTemplateJobsCommandOutput) => void
  ): void;
  listNodeFromTemplateJobs(
    args: ListNodeFromTemplateJobsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListNodeFromTemplateJobsCommandOutput) => void
  ): void;
  listNodes(): Promise<ListNodesCommandOutput>;
  listNodes(
    args: ListNodesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListNodesCommandOutput>;
  listNodes(
    args: ListNodesCommandInput,
    cb: (err: any, data?: ListNodesCommandOutput) => void
  ): void;
  listNodes(
    args: ListNodesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListNodesCommandOutput) => void
  ): void;
  listPackageImportJobs(): Promise<ListPackageImportJobsCommandOutput>;
  listPackageImportJobs(
    args: ListPackageImportJobsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPackageImportJobsCommandOutput>;
  listPackageImportJobs(
    args: ListPackageImportJobsCommandInput,
    cb: (err: any, data?: ListPackageImportJobsCommandOutput) => void
  ): void;
  listPackageImportJobs(
    args: ListPackageImportJobsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPackageImportJobsCommandOutput) => void
  ): void;
  listPackages(): Promise<ListPackagesCommandOutput>;
  listPackages(
    args: ListPackagesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListPackagesCommandOutput>;
  listPackages(
    args: ListPackagesCommandInput,
    cb: (err: any, data?: ListPackagesCommandOutput) => void
  ): void;
  listPackages(
    args: ListPackagesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListPackagesCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  provisionDevice(
    args: ProvisionDeviceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ProvisionDeviceCommandOutput>;
  provisionDevice(
    args: ProvisionDeviceCommandInput,
    cb: (err: any, data?: ProvisionDeviceCommandOutput) => void
  ): void;
  provisionDevice(
    args: ProvisionDeviceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ProvisionDeviceCommandOutput) => void
  ): void;
  registerPackageVersion(
    args: RegisterPackageVersionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RegisterPackageVersionCommandOutput>;
  registerPackageVersion(
    args: RegisterPackageVersionCommandInput,
    cb: (err: any, data?: RegisterPackageVersionCommandOutput) => void
  ): void;
  registerPackageVersion(
    args: RegisterPackageVersionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RegisterPackageVersionCommandOutput) => void
  ): void;
  removeApplicationInstance(
    args: RemoveApplicationInstanceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RemoveApplicationInstanceCommandOutput>;
  removeApplicationInstance(
    args: RemoveApplicationInstanceCommandInput,
    cb: (err: any, data?: RemoveApplicationInstanceCommandOutput) => void
  ): void;
  removeApplicationInstance(
    args: RemoveApplicationInstanceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RemoveApplicationInstanceCommandOutput) => void
  ): void;
  signalApplicationInstanceNodeInstances(
    args: SignalApplicationInstanceNodeInstancesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SignalApplicationInstanceNodeInstancesCommandOutput>;
  signalApplicationInstanceNodeInstances(
    args: SignalApplicationInstanceNodeInstancesCommandInput,
    cb: (
      err: any,
      data?: SignalApplicationInstanceNodeInstancesCommandOutput
    ) => void
  ): void;
  signalApplicationInstanceNodeInstances(
    args: SignalApplicationInstanceNodeInstancesCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: SignalApplicationInstanceNodeInstancesCommandOutput
    ) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateDeviceMetadata(
    args: UpdateDeviceMetadataCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateDeviceMetadataCommandOutput>;
  updateDeviceMetadata(
    args: UpdateDeviceMetadataCommandInput,
    cb: (err: any, data?: UpdateDeviceMetadataCommandOutput) => void
  ): void;
  updateDeviceMetadata(
    args: UpdateDeviceMetadataCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateDeviceMetadataCommandOutput) => void
  ): void;
}
export declare class Panorama extends PanoramaClient implements Panorama {}
