import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { PanoramaServiceException as __BaseException } from "./PanoramaServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AlternateSoftwareMetadata {
  Version?: string;
}
export declare const ApplicationInstanceHealthStatus: {
  readonly ERROR: "ERROR";
  readonly NOT_AVAILABLE: "NOT_AVAILABLE";
  readonly RUNNING: "RUNNING";
};
export type ApplicationInstanceHealthStatus =
  (typeof ApplicationInstanceHealthStatus)[keyof typeof ApplicationInstanceHealthStatus];
export declare const DesiredState: {
  readonly REMOVED: "REMOVED";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
};
export type DesiredState = (typeof DesiredState)[keyof typeof DesiredState];
export declare const DeviceReportedStatus: {
  readonly INSTALL_ERROR: "INSTALL_ERROR";
  readonly INSTALL_IN_PROGRESS: "INSTALL_IN_PROGRESS";
  readonly LAUNCHED: "LAUNCHED";
  readonly LAUNCH_ERROR: "LAUNCH_ERROR";
  readonly REMOVAL_FAILED: "REMOVAL_FAILED";
  readonly REMOVAL_IN_PROGRESS: "REMOVAL_IN_PROGRESS";
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly STOP_ERROR: "STOP_ERROR";
};
export type DeviceReportedStatus =
  (typeof DeviceReportedStatus)[keyof typeof DeviceReportedStatus];
export interface ReportedRuntimeContextState {
  DesiredState: DesiredState | undefined;
  RuntimeContextName: string | undefined;
  DeviceReportedStatus: DeviceReportedStatus | undefined;
  DeviceReportedTime: Date | undefined;
}
export declare const ApplicationInstanceStatus: {
  readonly DEPLOYMENT_ERROR: "DEPLOYMENT_ERROR";
  readonly DEPLOYMENT_FAILED: "DEPLOYMENT_FAILED";
  readonly DEPLOYMENT_IN_PROGRESS: "DEPLOYMENT_IN_PROGRESS";
  readonly DEPLOYMENT_PENDING: "DEPLOYMENT_PENDING";
  readonly DEPLOYMENT_REQUESTED: "DEPLOYMENT_REQUESTED";
  readonly DEPLOYMENT_SUCCEEDED: "DEPLOYMENT_SUCCEEDED";
  readonly REMOVAL_FAILED: "REMOVAL_FAILED";
  readonly REMOVAL_IN_PROGRESS: "REMOVAL_IN_PROGRESS";
  readonly REMOVAL_PENDING: "REMOVAL_PENDING";
  readonly REMOVAL_REQUESTED: "REMOVAL_REQUESTED";
  readonly REMOVAL_SUCCEEDED: "REMOVAL_SUCCEEDED";
};
export type ApplicationInstanceStatus =
  (typeof ApplicationInstanceStatus)[keyof typeof ApplicationInstanceStatus];
export interface ApplicationInstance {
  Name?: string;
  ApplicationInstanceId?: string;
  DefaultRuntimeContextDevice?: string;
  DefaultRuntimeContextDeviceName?: string;
  Description?: string;
  Status?: ApplicationInstanceStatus;
  HealthStatus?: ApplicationInstanceHealthStatus;
  StatusDescription?: string;
  CreatedTime?: Date;
  Arn?: string;
  Tags?: Record<string, string>;
  RuntimeContextStates?: ReportedRuntimeContextState[];
}
export interface ConflictExceptionErrorArgument {
  Name: string | undefined;
  Value: string | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  ErrorId?: string;
  ErrorArguments?: ConflictExceptionErrorArgument[];
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const ConnectionType: {
  readonly DHCP: "DHCP";
  readonly STATIC_IP: "STATIC_IP";
};
export type ConnectionType =
  (typeof ConnectionType)[keyof typeof ConnectionType];
export type ManifestOverridesPayload =
  | ManifestOverridesPayload.PayloadDataMember
  | ManifestOverridesPayload.$UnknownMember;
export declare namespace ManifestOverridesPayload {
  interface PayloadDataMember {
    PayloadData: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    PayloadData?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    PayloadData: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ManifestOverridesPayload, visitor: Visitor<T>) => T;
}
export type ManifestPayload =
  | ManifestPayload.PayloadDataMember
  | ManifestPayload.$UnknownMember;
export declare namespace ManifestPayload {
  interface PayloadDataMember {
    PayloadData: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    PayloadData?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    PayloadData: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ManifestPayload, visitor: Visitor<T>) => T;
}
export interface CreateApplicationInstanceRequest {
  Name?: string;
  Description?: string;
  ManifestPayload: ManifestPayload | undefined;
  ManifestOverridesPayload?: ManifestOverridesPayload;
  ApplicationInstanceIdToReplace?: string;
  RuntimeRoleArn?: string;
  DefaultRuntimeContextDevice: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateApplicationInstanceResponse {
  ApplicationInstanceId: string | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId?: string;
  ResourceType?: string;
  QuotaCode: string | undefined;
  ServiceCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface ValidationExceptionErrorArgument {
  Name: string | undefined;
  Value: string | undefined;
}
export interface ValidationExceptionField {
  Name: string | undefined;
  Message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CANNOT_PARSE";
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly OTHER: "OTHER";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  Reason?: ValidationExceptionReason;
  ErrorId?: string;
  ErrorArguments?: ValidationExceptionErrorArgument[];
  Fields?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface OTAJobConfig {
  ImageVersion: string | undefined;
  AllowMajorVersionUpdate?: boolean;
}
export interface DeviceJobConfig {
  OTAJobConfig?: OTAJobConfig;
}
export declare const JobType: {
  readonly OTA: "OTA";
  readonly REBOOT: "REBOOT";
};
export type JobType = (typeof JobType)[keyof typeof JobType];
export interface CreateJobForDevicesRequest {
  DeviceIds: string[] | undefined;
  DeviceJobConfig?: DeviceJobConfig;
  JobType: JobType | undefined;
}
export interface Job {
  JobId?: string;
  DeviceId?: string;
}
export interface CreateJobForDevicesResponse {
  Jobs: Job[] | undefined;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const JobResourceType: {
  readonly PACKAGE: "PACKAGE";
};
export type JobResourceType =
  (typeof JobResourceType)[keyof typeof JobResourceType];
export interface JobResourceTags {
  ResourceType: JobResourceType | undefined;
  Tags: Record<string, string> | undefined;
}
export declare const TemplateType: {
  readonly RTSP_CAMERA_STREAM: "RTSP_CAMERA_STREAM";
};
export type TemplateType = (typeof TemplateType)[keyof typeof TemplateType];
export interface CreateNodeFromTemplateJobRequest {
  TemplateType: TemplateType | undefined;
  OutputPackageName: string | undefined;
  OutputPackageVersion: string | undefined;
  NodeName: string | undefined;
  NodeDescription?: string;
  TemplateParameters: Record<string, string> | undefined;
  JobTags?: JobResourceTags[];
}
export interface CreateNodeFromTemplateJobResponse {
  JobId: string | undefined;
}
export interface CreatePackageRequest {
  PackageName: string | undefined;
  Tags?: Record<string, string>;
}
export interface StorageLocation {
  Bucket: string | undefined;
  RepoPrefixLocation: string | undefined;
  GeneratedPrefixLocation: string | undefined;
  BinaryPrefixLocation: string | undefined;
  ManifestPrefixLocation: string | undefined;
}
export interface CreatePackageResponse {
  PackageId?: string;
  Arn?: string;
  StorageLocation: StorageLocation | undefined;
}
export interface S3Location {
  Region?: string;
  BucketName: string | undefined;
  ObjectKey: string | undefined;
}
export interface PackageVersionInputConfig {
  S3Location: S3Location | undefined;
}
export interface PackageImportJobInputConfig {
  PackageVersionInputConfig?: PackageVersionInputConfig;
}
export declare const PackageImportJobType: {
  readonly MARKETPLACE_NODE_PACKAGE_VERSION: "MARKETPLACE_NODE_PACKAGE_VERSION";
  readonly NODE_PACKAGE_VERSION: "NODE_PACKAGE_VERSION";
};
export type PackageImportJobType =
  (typeof PackageImportJobType)[keyof typeof PackageImportJobType];
export interface PackageVersionOutputConfig {
  PackageName: string | undefined;
  PackageVersion: string | undefined;
  MarkLatest?: boolean;
}
export interface PackageImportJobOutputConfig {
  PackageVersionOutputConfig?: PackageVersionOutputConfig;
}
export interface CreatePackageImportJobRequest {
  JobType: PackageImportJobType | undefined;
  InputConfig: PackageImportJobInputConfig | undefined;
  OutputConfig: PackageImportJobOutputConfig | undefined;
  ClientToken: string | undefined;
  JobTags?: JobResourceTags[];
}
export interface CreatePackageImportJobResponse {
  JobId: string | undefined;
}
export interface DeleteDeviceRequest {
  DeviceId: string | undefined;
}
export interface DeleteDeviceResponse {
  DeviceId?: string;
}
export interface DeletePackageRequest {
  PackageId: string | undefined;
  ForceDelete?: boolean;
}
export interface DeletePackageResponse {}
export interface DeregisterPackageVersionRequest {
  OwnerAccount?: string;
  PackageId: string | undefined;
  PackageVersion: string | undefined;
  PatchVersion: string | undefined;
  UpdatedLatestPatchVersion?: string;
}
export interface DeregisterPackageVersionResponse {}
export interface DescribeApplicationInstanceRequest {
  ApplicationInstanceId: string | undefined;
}
export interface DescribeApplicationInstanceResponse {
  Name?: string;
  Description?: string;
  DefaultRuntimeContextDevice?: string;
  DefaultRuntimeContextDeviceName?: string;
  ApplicationInstanceIdToReplace?: string;
  RuntimeRoleArn?: string;
  Status?: ApplicationInstanceStatus;
  HealthStatus?: ApplicationInstanceHealthStatus;
  StatusDescription?: string;
  CreatedTime?: Date;
  LastUpdatedTime?: Date;
  ApplicationInstanceId?: string;
  Arn?: string;
  Tags?: Record<string, string>;
  RuntimeContextStates?: ReportedRuntimeContextState[];
}
export interface DescribeApplicationInstanceDetailsRequest {
  ApplicationInstanceId: string | undefined;
}
export interface DescribeApplicationInstanceDetailsResponse {
  Name?: string;
  Description?: string;
  DefaultRuntimeContextDevice?: string;
  ManifestPayload?: ManifestPayload;
  ManifestOverridesPayload?: ManifestOverridesPayload;
  ApplicationInstanceIdToReplace?: string;
  CreatedTime?: Date;
  ApplicationInstanceId?: string;
}
export interface DescribeDeviceRequest {
  DeviceId: string | undefined;
}
export declare const DeviceBrand: {
  readonly AWS_PANORAMA: "AWS_PANORAMA";
  readonly LENOVO: "LENOVO";
};
export type DeviceBrand = (typeof DeviceBrand)[keyof typeof DeviceBrand];
export declare const NetworkConnectionStatus: {
  readonly CONNECTED: "CONNECTED";
  readonly CONNECTING: "CONNECTING";
  readonly NOT_CONNECTED: "NOT_CONNECTED";
};
export type NetworkConnectionStatus =
  (typeof NetworkConnectionStatus)[keyof typeof NetworkConnectionStatus];
export interface EthernetStatus {
  IpAddress?: string;
  ConnectionStatus?: NetworkConnectionStatus;
  HwAddress?: string;
}
export interface NtpStatus {
  ConnectionStatus?: NetworkConnectionStatus;
  IpAddress?: string;
  NtpServerName?: string;
}
export interface NetworkStatus {
  Ethernet0Status?: EthernetStatus;
  Ethernet1Status?: EthernetStatus;
  NtpStatus?: NtpStatus;
  LastUpdatedTime?: Date;
}
export declare const DeviceAggregatedStatus: {
  readonly AWAITING_PROVISIONING: "AWAITING_PROVISIONING";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly FAILED: "FAILED";
  readonly LEASE_EXPIRED: "LEASE_EXPIRED";
  readonly OFFLINE: "OFFLINE";
  readonly ONLINE: "ONLINE";
  readonly PENDING: "PENDING";
  readonly REBOOTING: "REBOOTING";
  readonly UPDATE_NEEDED: "UPDATE_NEEDED";
};
export type DeviceAggregatedStatus =
  (typeof DeviceAggregatedStatus)[keyof typeof DeviceAggregatedStatus];
export declare const DeviceConnectionStatus: {
  readonly AWAITING_CREDENTIALS: "AWAITING_CREDENTIALS";
  readonly ERROR: "ERROR";
  readonly NOT_AVAILABLE: "NOT_AVAILABLE";
  readonly OFFLINE: "OFFLINE";
  readonly ONLINE: "ONLINE";
};
export type DeviceConnectionStatus =
  (typeof DeviceConnectionStatus)[keyof typeof DeviceConnectionStatus];
export declare const UpdateProgress: {
  readonly COMPLETED: "COMPLETED";
  readonly DOWNLOADING: "DOWNLOADING";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PENDING: "PENDING";
  readonly REBOOTING: "REBOOTING";
  readonly VERIFYING: "VERIFYING";
};
export type UpdateProgress =
  (typeof UpdateProgress)[keyof typeof UpdateProgress];
export interface LatestDeviceJob {
  ImageVersion?: string;
  Status?: UpdateProgress;
  JobType?: JobType;
}
export interface StaticIpConnectionInfo {
  IpAddress: string | undefined;
  Mask: string | undefined;
  Dns: string[] | undefined;
  DefaultGateway: string | undefined;
}
export interface EthernetPayload {
  ConnectionType: ConnectionType | undefined;
  StaticIpConnectionInfo?: StaticIpConnectionInfo;
}
export interface NtpPayload {
  NtpServers: string[] | undefined;
}
export interface NetworkPayload {
  Ethernet0?: EthernetPayload;
  Ethernet1?: EthernetPayload;
  Ntp?: NtpPayload;
}
export declare const DeviceStatus: {
  readonly AWAITING_PROVISIONING: "AWAITING_PROVISIONING";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type DeviceStatus = (typeof DeviceStatus)[keyof typeof DeviceStatus];
export declare const DeviceType: {
  readonly PANORAMA_APPLIANCE: "PANORAMA_APPLIANCE";
  readonly PANORAMA_APPLIANCE_DEVELOPER_KIT: "PANORAMA_APPLIANCE_DEVELOPER_KIT";
};
export type DeviceType = (typeof DeviceType)[keyof typeof DeviceType];
export interface DescribeDeviceResponse {
  DeviceId?: string;
  Name?: string;
  Arn?: string;
  Description?: string;
  Type?: DeviceType;
  DeviceConnectionStatus?: DeviceConnectionStatus;
  CreatedTime?: Date;
  ProvisioningStatus?: DeviceStatus;
  LatestSoftware?: string;
  CurrentSoftware?: string;
  SerialNumber?: string;
  Tags?: Record<string, string>;
  NetworkingConfiguration?: NetworkPayload;
  CurrentNetworkingStatus?: NetworkStatus;
  LeaseExpirationTime?: Date;
  AlternateSoftwares?: AlternateSoftwareMetadata[];
  LatestAlternateSoftware?: string;
  Brand?: DeviceBrand;
  LatestDeviceJob?: LatestDeviceJob;
  DeviceAggregatedStatus?: DeviceAggregatedStatus;
}
export interface DescribeDeviceJobRequest {
  JobId: string | undefined;
}
export interface DescribeDeviceJobResponse {
  JobId?: string;
  DeviceId?: string;
  DeviceArn?: string;
  DeviceName?: string;
  DeviceType?: DeviceType;
  ImageVersion?: string;
  Status?: UpdateProgress;
  CreatedTime?: Date;
  JobType?: JobType;
}
export interface DescribeNodeRequest {
  NodeId: string | undefined;
  OwnerAccount?: string;
}
export declare const NodeCategory: {
  readonly BUSINESS_LOGIC: "BUSINESS_LOGIC";
  readonly MEDIA_SINK: "MEDIA_SINK";
  readonly MEDIA_SOURCE: "MEDIA_SOURCE";
  readonly ML_MODEL: "ML_MODEL";
};
export type NodeCategory = (typeof NodeCategory)[keyof typeof NodeCategory];
export declare const PortType: {
  readonly BOOLEAN: "BOOLEAN";
  readonly FLOAT32: "FLOAT32";
  readonly INT32: "INT32";
  readonly MEDIA: "MEDIA";
  readonly STRING: "STRING";
};
export type PortType = (typeof PortType)[keyof typeof PortType];
export interface NodeInputPort {
  Name?: string;
  Description?: string;
  Type?: PortType;
  DefaultValue?: string;
  MaxConnections?: number;
}
export interface NodeOutputPort {
  Name?: string;
  Description?: string;
  Type?: PortType;
}
export interface NodeInterface {
  Inputs: NodeInputPort[] | undefined;
  Outputs: NodeOutputPort[] | undefined;
}
export interface DescribeNodeResponse {
  NodeId: string | undefined;
  Name: string | undefined;
  Category: NodeCategory | undefined;
  OwnerAccount: string | undefined;
  PackageName: string | undefined;
  PackageId: string | undefined;
  PackageArn?: string;
  PackageVersion: string | undefined;
  PatchVersion: string | undefined;
  NodeInterface: NodeInterface | undefined;
  AssetName?: string;
  Description: string | undefined;
  CreatedTime: Date | undefined;
  LastUpdatedTime: Date | undefined;
}
export interface DescribeNodeFromTemplateJobRequest {
  JobId: string | undefined;
}
export declare const NodeFromTemplateJobStatus: {
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type NodeFromTemplateJobStatus =
  (typeof NodeFromTemplateJobStatus)[keyof typeof NodeFromTemplateJobStatus];
export interface DescribeNodeFromTemplateJobResponse {
  JobId: string | undefined;
  Status: NodeFromTemplateJobStatus | undefined;
  StatusMessage: string | undefined;
  CreatedTime: Date | undefined;
  LastUpdatedTime: Date | undefined;
  OutputPackageName: string | undefined;
  OutputPackageVersion: string | undefined;
  NodeName: string | undefined;
  NodeDescription?: string;
  TemplateType: TemplateType | undefined;
  TemplateParameters: Record<string, string> | undefined;
  JobTags?: JobResourceTags[];
}
export interface DescribePackageRequest {
  PackageId: string | undefined;
}
export interface DescribePackageResponse {
  PackageId: string | undefined;
  PackageName: string | undefined;
  Arn: string | undefined;
  StorageLocation: StorageLocation | undefined;
  ReadAccessPrincipalArns?: string[];
  WriteAccessPrincipalArns?: string[];
  CreatedTime: Date | undefined;
  Tags: Record<string, string> | undefined;
}
export interface DescribePackageImportJobRequest {
  JobId: string | undefined;
}
export interface OutPutS3Location {
  BucketName: string | undefined;
  ObjectKey: string | undefined;
}
export interface PackageImportJobOutput {
  PackageId: string | undefined;
  PackageVersion: string | undefined;
  PatchVersion: string | undefined;
  OutputS3Location: OutPutS3Location | undefined;
}
export declare const PackageImportJobStatus: {
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type PackageImportJobStatus =
  (typeof PackageImportJobStatus)[keyof typeof PackageImportJobStatus];
export interface DescribePackageImportJobResponse {
  JobId: string | undefined;
  ClientToken?: string;
  JobType: PackageImportJobType | undefined;
  InputConfig: PackageImportJobInputConfig | undefined;
  OutputConfig: PackageImportJobOutputConfig | undefined;
  Output: PackageImportJobOutput | undefined;
  CreatedTime: Date | undefined;
  LastUpdatedTime: Date | undefined;
  Status: PackageImportJobStatus | undefined;
  StatusMessage: string | undefined;
  JobTags?: JobResourceTags[];
}
export interface DescribePackageVersionRequest {
  OwnerAccount?: string;
  PackageId: string | undefined;
  PackageVersion: string | undefined;
  PatchVersion?: string;
}
export declare const PackageVersionStatus: {
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly REGISTER_COMPLETED: "REGISTER_COMPLETED";
  readonly REGISTER_PENDING: "REGISTER_PENDING";
};
export type PackageVersionStatus =
  (typeof PackageVersionStatus)[keyof typeof PackageVersionStatus];
export interface DescribePackageVersionResponse {
  OwnerAccount?: string;
  PackageId: string | undefined;
  PackageArn?: string;
  PackageName: string | undefined;
  PackageVersion: string | undefined;
  PatchVersion: string | undefined;
  IsLatestPatch: boolean | undefined;
  Status: PackageVersionStatus | undefined;
  StatusDescription?: string;
  RegisteredTime?: Date;
}
export interface Device {
  DeviceId?: string;
  Name?: string;
  CreatedTime?: Date;
  ProvisioningStatus?: DeviceStatus;
  LastUpdatedTime?: Date;
  LeaseExpirationTime?: Date;
  Brand?: DeviceBrand;
  CurrentSoftware?: string;
  Description?: string;
  Tags?: Record<string, string>;
  Type?: DeviceType;
  LatestDeviceJob?: LatestDeviceJob;
  DeviceAggregatedStatus?: DeviceAggregatedStatus;
}
export interface DeviceJob {
  DeviceName?: string;
  DeviceId?: string;
  JobId?: string;
  CreatedTime?: Date;
  JobType?: JobType;
}
export interface ListApplicationInstanceDependenciesRequest {
  ApplicationInstanceId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface PackageObject {
  Name: string | undefined;
  PackageVersion: string | undefined;
  PatchVersion: string | undefined;
}
export interface ListApplicationInstanceDependenciesResponse {
  PackageObjects?: PackageObject[];
  NextToken?: string;
}
export interface ListApplicationInstanceNodeInstancesRequest {
  ApplicationInstanceId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export declare const NodeInstanceStatus: {
  readonly ERROR: "ERROR";
  readonly NOT_AVAILABLE: "NOT_AVAILABLE";
  readonly PAUSED: "PAUSED";
  readonly RUNNING: "RUNNING";
};
export type NodeInstanceStatus =
  (typeof NodeInstanceStatus)[keyof typeof NodeInstanceStatus];
export interface NodeInstance {
  NodeInstanceId: string | undefined;
  NodeId?: string;
  PackageName?: string;
  PackageVersion?: string;
  PackagePatchVersion?: string;
  NodeName?: string;
  CurrentStatus: NodeInstanceStatus | undefined;
}
export interface ListApplicationInstanceNodeInstancesResponse {
  NodeInstances?: NodeInstance[];
  NextToken?: string;
}
export declare const StatusFilter: {
  readonly DEPLOYMENT_ERROR: "DEPLOYMENT_ERROR";
  readonly DEPLOYMENT_FAILED: "DEPLOYMENT_FAILED";
  readonly DEPLOYMENT_SUCCEEDED: "DEPLOYMENT_SUCCEEDED";
  readonly PROCESSING_DEPLOYMENT: "PROCESSING_DEPLOYMENT";
  readonly PROCESSING_REMOVAL: "PROCESSING_REMOVAL";
  readonly REMOVAL_FAILED: "REMOVAL_FAILED";
  readonly REMOVAL_SUCCEEDED: "REMOVAL_SUCCEEDED";
};
export type StatusFilter = (typeof StatusFilter)[keyof typeof StatusFilter];
export interface ListApplicationInstancesRequest {
  DeviceId?: string;
  StatusFilter?: StatusFilter;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListApplicationInstancesResponse {
  ApplicationInstances?: ApplicationInstance[];
  NextToken?: string;
}
export declare const ListDevicesSortBy: {
  readonly CREATED_TIME: "CREATED_TIME";
  readonly DEVICE_AGGREGATED_STATUS: "DEVICE_AGGREGATED_STATUS";
  readonly DEVICE_ID: "DEVICE_ID";
  readonly NAME: "NAME";
};
export type ListDevicesSortBy =
  (typeof ListDevicesSortBy)[keyof typeof ListDevicesSortBy];
export declare const SortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface ListDevicesRequest {
  NextToken?: string;
  MaxResults?: number;
  SortBy?: ListDevicesSortBy;
  SortOrder?: SortOrder;
  NameFilter?: string;
  DeviceAggregatedStatusFilter?: DeviceAggregatedStatus;
}
export interface ListDevicesResponse {
  Devices: Device[] | undefined;
  NextToken?: string;
}
export interface ListDevicesJobsRequest {
  DeviceId?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListDevicesJobsResponse {
  DeviceJobs?: DeviceJob[];
  NextToken?: string;
}
export interface ListNodeFromTemplateJobsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface NodeFromTemplateJob {
  JobId?: string;
  TemplateType?: TemplateType;
  Status?: NodeFromTemplateJobStatus;
  StatusMessage?: string;
  CreatedTime?: Date;
  NodeName?: string;
}
export interface ListNodeFromTemplateJobsResponse {
  NodeFromTemplateJobs: NodeFromTemplateJob[] | undefined;
  NextToken?: string;
}
export interface ListNodesRequest {
  Category?: NodeCategory;
  OwnerAccount?: string;
  PackageName?: string;
  PackageVersion?: string;
  PatchVersion?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface Node {
  NodeId: string | undefined;
  Name: string | undefined;
  Category: NodeCategory | undefined;
  OwnerAccount?: string;
  PackageName: string | undefined;
  PackageId: string | undefined;
  PackageArn?: string;
  PackageVersion: string | undefined;
  PatchVersion: string | undefined;
  Description?: string;
  CreatedTime: Date | undefined;
}
export interface ListNodesResponse {
  Nodes?: Node[];
  NextToken?: string;
}
export interface ListPackageImportJobsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface PackageImportJob {
  JobId?: string;
  JobType?: PackageImportJobType;
  Status?: PackageImportJobStatus;
  StatusMessage?: string;
  CreatedTime?: Date;
  LastUpdatedTime?: Date;
}
export interface ListPackageImportJobsResponse {
  PackageImportJobs: PackageImportJob[] | undefined;
  NextToken?: string;
}
export interface ListPackagesRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface PackageListItem {
  PackageId?: string;
  PackageName?: string;
  Arn?: string;
  CreatedTime?: Date;
  Tags?: Record<string, string>;
}
export interface ListPackagesResponse {
  Packages?: PackageListItem[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export declare const NodeSignalValue: {
  readonly PAUSE: "PAUSE";
  readonly RESUME: "RESUME";
};
export type NodeSignalValue =
  (typeof NodeSignalValue)[keyof typeof NodeSignalValue];
export interface NodeSignal {
  NodeInstanceId: string | undefined;
  Signal: NodeSignalValue | undefined;
}
export interface ProvisionDeviceRequest {
  Name: string | undefined;
  Description?: string;
  Tags?: Record<string, string>;
  NetworkingConfiguration?: NetworkPayload;
}
export interface ProvisionDeviceResponse {
  DeviceId?: string;
  Arn: string | undefined;
  Status: DeviceStatus | undefined;
  Certificates?: Uint8Array;
  IotThingName?: string;
}
export interface RegisterPackageVersionRequest {
  OwnerAccount?: string;
  PackageId: string | undefined;
  PackageVersion: string | undefined;
  PatchVersion: string | undefined;
  MarkLatest?: boolean;
}
export interface RegisterPackageVersionResponse {}
export interface RemoveApplicationInstanceRequest {
  ApplicationInstanceId: string | undefined;
}
export interface RemoveApplicationInstanceResponse {}
export interface SignalApplicationInstanceNodeInstancesRequest {
  ApplicationInstanceId: string | undefined;
  NodeSignals: NodeSignal[] | undefined;
}
export interface SignalApplicationInstanceNodeInstancesResponse {
  ApplicationInstanceId: string | undefined;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDeviceMetadataRequest {
  DeviceId: string | undefined;
  Description?: string;
}
export interface UpdateDeviceMetadataResponse {
  DeviceId?: string;
}
export declare const CreateNodeFromTemplateJobRequestFilterSensitiveLog: (
  obj: CreateNodeFromTemplateJobRequest
) => any;
export declare const DescribeNodeFromTemplateJobResponseFilterSensitiveLog: (
  obj: DescribeNodeFromTemplateJobResponse
) => any;
