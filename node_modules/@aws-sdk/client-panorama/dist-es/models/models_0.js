import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { PanoramaServiceException as __BaseException } from "./PanoramaServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const ApplicationInstanceHealthStatus = {
    ERROR: "ERROR",
    NOT_AVAILABLE: "NOT_AVAILABLE",
    RUNNING: "RUNNING",
};
export const DesiredState = {
    REMOVED: "REMOVED",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
};
export const DeviceReportedStatus = {
    INSTALL_ERROR: "INSTALL_ERROR",
    INSTALL_IN_PROGRESS: "INSTALL_IN_PROGRESS",
    LAUNCHED: "LAUNCHED",
    LAUNCH_ERROR: "LAUNCH_ERROR",
    REMOVAL_FAILED: "REMOVAL_FAILED",
    REMOVAL_IN_PROGRESS: "REMOVAL_IN_PROGRESS",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    STOP_ERROR: "STOP_ERROR",
};
export const ApplicationInstanceStatus = {
    DEPLOYMENT_ERROR: "DEPLOYMENT_ERROR",
    DEPLOYMENT_FAILED: "DEPLOYMENT_FAILED",
    DEPLOYMENT_IN_PROGRESS: "DEPLOYMENT_IN_PROGRESS",
    DEPLOYMENT_PENDING: "DEPLOYMENT_PENDING",
    DEPLOYMENT_REQUESTED: "DEPLOYMENT_REQUESTED",
    DEPLOYMENT_SUCCEEDED: "DEPLOYMENT_SUCCEEDED",
    REMOVAL_FAILED: "REMOVAL_FAILED",
    REMOVAL_IN_PROGRESS: "REMOVAL_IN_PROGRESS",
    REMOVAL_PENDING: "REMOVAL_PENDING",
    REMOVAL_REQUESTED: "REMOVAL_REQUESTED",
    REMOVAL_SUCCEEDED: "REMOVAL_SUCCEEDED",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.ErrorId = opts.ErrorId;
        this.ErrorArguments = opts.ErrorArguments;
    }
}
export const ConnectionType = {
    DHCP: "DHCP",
    STATIC_IP: "STATIC_IP",
};
export var ManifestOverridesPayload;
(function (ManifestOverridesPayload) {
    ManifestOverridesPayload.visit = (value, visitor) => {
        if (value.PayloadData !== undefined)
            return visitor.PayloadData(value.PayloadData);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ManifestOverridesPayload || (ManifestOverridesPayload = {}));
export var ManifestPayload;
(function (ManifestPayload) {
    ManifestPayload.visit = (value, visitor) => {
        if (value.PayloadData !== undefined)
            return visitor.PayloadData(value.PayloadData);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ManifestPayload || (ManifestPayload = {}));
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CANNOT_PARSE",
    FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED",
    OTHER: "OTHER",
    UNKNOWN_OPERATION: "UNKNOWN_OPERATION",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.ErrorId = opts.ErrorId;
        this.ErrorArguments = opts.ErrorArguments;
        this.Fields = opts.Fields;
    }
}
export const JobType = {
    OTA: "OTA",
    REBOOT: "REBOOT",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export const JobResourceType = {
    PACKAGE: "PACKAGE",
};
export const TemplateType = {
    RTSP_CAMERA_STREAM: "RTSP_CAMERA_STREAM",
};
export const PackageImportJobType = {
    MARKETPLACE_NODE_PACKAGE_VERSION: "MARKETPLACE_NODE_PACKAGE_VERSION",
    NODE_PACKAGE_VERSION: "NODE_PACKAGE_VERSION",
};
export const DeviceBrand = {
    AWS_PANORAMA: "AWS_PANORAMA",
    LENOVO: "LENOVO",
};
export const NetworkConnectionStatus = {
    CONNECTED: "CONNECTED",
    CONNECTING: "CONNECTING",
    NOT_CONNECTED: "NOT_CONNECTED",
};
export const DeviceAggregatedStatus = {
    AWAITING_PROVISIONING: "AWAITING_PROVISIONING",
    DELETING: "DELETING",
    ERROR: "ERROR",
    FAILED: "FAILED",
    LEASE_EXPIRED: "LEASE_EXPIRED",
    OFFLINE: "OFFLINE",
    ONLINE: "ONLINE",
    PENDING: "PENDING",
    REBOOTING: "REBOOTING",
    UPDATE_NEEDED: "UPDATE_NEEDED",
};
export const DeviceConnectionStatus = {
    AWAITING_CREDENTIALS: "AWAITING_CREDENTIALS",
    ERROR: "ERROR",
    NOT_AVAILABLE: "NOT_AVAILABLE",
    OFFLINE: "OFFLINE",
    ONLINE: "ONLINE",
};
export const UpdateProgress = {
    COMPLETED: "COMPLETED",
    DOWNLOADING: "DOWNLOADING",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    REBOOTING: "REBOOTING",
    VERIFYING: "VERIFYING",
};
export const DeviceStatus = {
    AWAITING_PROVISIONING: "AWAITING_PROVISIONING",
    DELETING: "DELETING",
    ERROR: "ERROR",
    FAILED: "FAILED",
    PENDING: "PENDING",
    SUCCEEDED: "SUCCEEDED",
};
export const DeviceType = {
    PANORAMA_APPLIANCE: "PANORAMA_APPLIANCE",
    PANORAMA_APPLIANCE_DEVELOPER_KIT: "PANORAMA_APPLIANCE_DEVELOPER_KIT",
};
export const NodeCategory = {
    BUSINESS_LOGIC: "BUSINESS_LOGIC",
    MEDIA_SINK: "MEDIA_SINK",
    MEDIA_SOURCE: "MEDIA_SOURCE",
    ML_MODEL: "ML_MODEL",
};
export const PortType = {
    BOOLEAN: "BOOLEAN",
    FLOAT32: "FLOAT32",
    INT32: "INT32",
    MEDIA: "MEDIA",
    STRING: "STRING",
};
export const NodeFromTemplateJobStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    SUCCEEDED: "SUCCEEDED",
};
export const PackageImportJobStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    SUCCEEDED: "SUCCEEDED",
};
export const PackageVersionStatus = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    REGISTER_COMPLETED: "REGISTER_COMPLETED",
    REGISTER_PENDING: "REGISTER_PENDING",
};
export const NodeInstanceStatus = {
    ERROR: "ERROR",
    NOT_AVAILABLE: "NOT_AVAILABLE",
    PAUSED: "PAUSED",
    RUNNING: "RUNNING",
};
export const StatusFilter = {
    DEPLOYMENT_ERROR: "DEPLOYMENT_ERROR",
    DEPLOYMENT_FAILED: "DEPLOYMENT_FAILED",
    DEPLOYMENT_SUCCEEDED: "DEPLOYMENT_SUCCEEDED",
    PROCESSING_DEPLOYMENT: "PROCESSING_DEPLOYMENT",
    PROCESSING_REMOVAL: "PROCESSING_REMOVAL",
    REMOVAL_FAILED: "REMOVAL_FAILED",
    REMOVAL_SUCCEEDED: "REMOVAL_SUCCEEDED",
};
export const ListDevicesSortBy = {
    CREATED_TIME: "CREATED_TIME",
    DEVICE_AGGREGATED_STATUS: "DEVICE_AGGREGATED_STATUS",
    DEVICE_ID: "DEVICE_ID",
    NAME: "NAME",
};
export const SortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const NodeSignalValue = {
    PAUSE: "PAUSE",
    RESUME: "RESUME",
};
export const CreateNodeFromTemplateJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TemplateParameters && { TemplateParameters: SENSITIVE_STRING }),
});
export const DescribeNodeFromTemplateJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TemplateParameters && { TemplateParameters: SENSITIVE_STRING }),
});
