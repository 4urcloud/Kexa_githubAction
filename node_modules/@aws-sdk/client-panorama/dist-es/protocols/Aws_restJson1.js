import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ValidationException, } from "../models/models_0";
import { PanoramaServiceException as __BaseException } from "../models/PanoramaServiceException";
export const se_CreateApplicationInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/application-instances");
    let body;
    body = JSON.stringify(take(input, {
        ApplicationInstanceIdToReplace: [],
        DefaultRuntimeContextDevice: [],
        Description: [],
        ManifestOverridesPayload: (_) => _json(_),
        ManifestPayload: (_) => _json(_),
        Name: [],
        RuntimeRoleArn: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateJobForDevicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/jobs");
    let body;
    body = JSON.stringify(take(input, {
        DeviceIds: (_) => _json(_),
        DeviceJobConfig: (_) => _json(_),
        JobType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateNodeFromTemplateJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/packages/template-job");
    let body;
    body = JSON.stringify(take(input, {
        JobTags: (_) => _json(_),
        NodeDescription: [],
        NodeName: [],
        OutputPackageName: [],
        OutputPackageVersion: [],
        TemplateParameters: (_) => _json(_),
        TemplateType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePackageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/packages");
    let body;
    body = JSON.stringify(take(input, {
        PackageName: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePackageImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/packages/import-jobs");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [],
        InputConfig: (_) => _json(_),
        JobTags: (_) => _json(_),
        JobType: [],
        OutputConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/devices/{DeviceId}");
    b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePackageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/{PackageId}");
    b.p("PackageId", () => input.PackageId, "{PackageId}", false);
    const query = map({
        [_FD]: [() => input.ForceDelete !== void 0, () => input[_FD].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeregisterPackageVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}");
    b.p("PackageId", () => input.PackageId, "{PackageId}", false);
    b.p("PackageVersion", () => input.PackageVersion, "{PackageVersion}", false);
    b.p("PatchVersion", () => input.PatchVersion, "{PatchVersion}", false);
    const query = map({
        [_OA]: [, input[_OA]],
        [_ULPV]: [, input[_ULPV]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeApplicationInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/application-instances/{ApplicationInstanceId}");
    b.p("ApplicationInstanceId", () => input.ApplicationInstanceId, "{ApplicationInstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeApplicationInstanceDetailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/application-instances/{ApplicationInstanceId}/details");
    b.p("ApplicationInstanceId", () => input.ApplicationInstanceId, "{ApplicationInstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/devices/{DeviceId}");
    b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDeviceJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{JobId}");
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/nodes/{NodeId}");
    b.p("NodeId", () => input.NodeId, "{NodeId}", false);
    const query = map({
        [_OA]: [, input[_OA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeNodeFromTemplateJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/template-job/{JobId}");
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribePackageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/metadata/{PackageId}");
    b.p("PackageId", () => input.PackageId, "{PackageId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribePackageImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/import-jobs/{JobId}");
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribePackageVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/metadata/{PackageId}/versions/{PackageVersion}");
    b.p("PackageId", () => input.PackageId, "{PackageId}", false);
    b.p("PackageVersion", () => input.PackageVersion, "{PackageVersion}", false);
    const query = map({
        [_OA]: [, input[_OA]],
        [_PV]: [, input[_PV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListApplicationInstanceDependenciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/application-instances/{ApplicationInstanceId}/package-dependencies");
    b.p("ApplicationInstanceId", () => input.ApplicationInstanceId, "{ApplicationInstanceId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListApplicationInstanceNodeInstancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/application-instances/{ApplicationInstanceId}/node-instances");
    b.p("ApplicationInstanceId", () => input.ApplicationInstanceId, "{ApplicationInstanceId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListApplicationInstancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/application-instances");
    const query = map({
        [_dI]: [, input[_DI]],
        [_sF]: [, input[_SF]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDevicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/devices");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_SB]: [, input[_SB]],
        [_SO]: [, input[_SO]],
        [_NF]: [, input[_NF]],
        [_DASF]: [, input[_DASF]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDevicesJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs");
    const query = map({
        [_DI]: [, input[_DI]],
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNodeFromTemplateJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/template-job");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNodesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/nodes");
    const query = map({
        [_c]: [, input[_C]],
        [_oA]: [, input[_OA]],
        [_pN]: [, input[_PN]],
        [_pV]: [, input[_PVa]],
        [_pVa]: [, input[_PV]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPackageImportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages/import-jobs");
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPackagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/packages");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ProvisionDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/devices");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        NetworkingConfiguration: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RegisterPackageVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}");
    b.p("PackageId", () => input.PackageId, "{PackageId}", false);
    b.p("PackageVersion", () => input.PackageVersion, "{PackageVersion}", false);
    b.p("PatchVersion", () => input.PatchVersion, "{PatchVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        MarkLatest: [],
        OwnerAccount: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RemoveApplicationInstanceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/application-instances/{ApplicationInstanceId}");
    b.p("ApplicationInstanceId", () => input.ApplicationInstanceId, "{ApplicationInstanceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_SignalApplicationInstanceNodeInstancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/application-instances/{ApplicationInstanceId}/node-signals");
    b.p("ApplicationInstanceId", () => input.ApplicationInstanceId, "{ApplicationInstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        NodeSignals: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDeviceMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/devices/{DeviceId}");
    b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_CreateApplicationInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationInstanceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateJobForDevicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Jobs: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateNodeFromTemplateJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePackageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        PackageId: __expectString,
        StorageLocation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePackageImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeviceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePackageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeregisterPackageVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeApplicationInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationInstanceId: __expectString,
        ApplicationInstanceIdToReplace: __expectString,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultRuntimeContextDevice: __expectString,
        DefaultRuntimeContextDeviceName: __expectString,
        Description: __expectString,
        HealthStatus: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        RuntimeContextStates: (_) => de_ReportedRuntimeContextStates(_, context),
        RuntimeRoleArn: __expectString,
        Status: __expectString,
        StatusDescription: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeApplicationInstanceDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationInstanceId: __expectString,
        ApplicationInstanceIdToReplace: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultRuntimeContextDevice: __expectString,
        Description: __expectString,
        ManifestOverridesPayload: (_) => _json(__expectUnion(_)),
        ManifestPayload: (_) => _json(__expectUnion(_)),
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AlternateSoftwares: _json,
        Arn: __expectString,
        Brand: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CurrentNetworkingStatus: (_) => de_NetworkStatus(_, context),
        CurrentSoftware: __expectString,
        Description: __expectString,
        DeviceAggregatedStatus: __expectString,
        DeviceConnectionStatus: __expectString,
        DeviceId: __expectString,
        LatestAlternateSoftware: __expectString,
        LatestDeviceJob: _json,
        LatestSoftware: __expectString,
        LeaseExpirationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NetworkingConfiguration: _json,
        ProvisioningStatus: __expectString,
        SerialNumber: __expectString,
        Tags: _json,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDeviceJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeviceArn: __expectString,
        DeviceId: __expectString,
        DeviceName: __expectString,
        DeviceType: __expectString,
        ImageVersion: __expectString,
        JobId: __expectString,
        JobType: __expectString,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssetName: __expectString,
        Category: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NodeId: __expectString,
        NodeInterface: _json,
        OwnerAccount: __expectString,
        PackageArn: __expectString,
        PackageId: __expectString,
        PackageName: __expectString,
        PackageVersion: __expectString,
        PatchVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeNodeFromTemplateJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobId: __expectString,
        JobTags: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NodeDescription: __expectString,
        NodeName: __expectString,
        OutputPackageName: __expectString,
        OutputPackageVersion: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        TemplateParameters: _json,
        TemplateType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePackageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PackageId: __expectString,
        PackageName: __expectString,
        ReadAccessPrincipalArns: _json,
        StorageLocation: _json,
        Tags: _json,
        WriteAccessPrincipalArns: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePackageImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ClientToken: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputConfig: _json,
        JobId: __expectString,
        JobTags: _json,
        JobType: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Output: _json,
        OutputConfig: _json,
        Status: __expectString,
        StatusMessage: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePackageVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IsLatestPatch: __expectBoolean,
        OwnerAccount: __expectString,
        PackageArn: __expectString,
        PackageId: __expectString,
        PackageName: __expectString,
        PackageVersion: __expectString,
        PatchVersion: __expectString,
        RegisteredTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        StatusDescription: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationInstanceDependenciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PackageObjects: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationInstanceNodeInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        NodeInstances: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationInstances: (_) => de_ApplicationInstances(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDevicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Devices: (_) => de_DeviceList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDevicesJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeviceJobs: (_) => de_DeviceJobList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNodeFromTemplateJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        NodeFromTemplateJobs: (_) => de_NodeFromTemplateJobList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNodesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Nodes: (_) => de_NodesList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPackageImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        PackageImportJobs: (_) => de_PackageImportJobList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPackagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Packages: (_) => de_PackageList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ProvisionDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Certificates: context.base64Decoder,
        DeviceId: __expectString,
        IotThingName: __expectString,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterPackageVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RemoveApplicationInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SignalApplicationInstanceNodeInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationInstanceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDeviceMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeviceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.panorama#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.panorama#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.panorama#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.panorama#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.panorama#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.panorama#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorArguments: _json,
        ErrorId: __expectString,
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorArguments: _json,
        ErrorId: __expectString,
        Fields: _json,
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ApplicationInstance = (output, context) => {
    return take(output, {
        ApplicationInstanceId: __expectString,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultRuntimeContextDevice: __expectString,
        DefaultRuntimeContextDeviceName: __expectString,
        Description: __expectString,
        HealthStatus: __expectString,
        Name: __expectString,
        RuntimeContextStates: (_) => de_ReportedRuntimeContextStates(_, context),
        Status: __expectString,
        StatusDescription: __expectString,
        Tags: _json,
    });
};
const de_ApplicationInstances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationInstance(entry, context);
    });
    return retVal;
};
const de_Device = (output, context) => {
    return take(output, {
        Brand: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CurrentSoftware: __expectString,
        Description: __expectString,
        DeviceAggregatedStatus: __expectString,
        DeviceId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestDeviceJob: _json,
        LeaseExpirationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ProvisioningStatus: __expectString,
        Tags: _json,
        Type: __expectString,
    });
};
const de_DeviceJob = (output, context) => {
    return take(output, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeviceId: __expectString,
        DeviceName: __expectString,
        JobId: __expectString,
        JobType: __expectString,
    });
};
const de_DeviceJobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceJob(entry, context);
    });
    return retVal;
};
const de_DeviceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Device(entry, context);
    });
    return retVal;
};
const de_NetworkStatus = (output, context) => {
    return take(output, {
        Ethernet0Status: _json,
        Ethernet1Status: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NtpStatus: _json,
    });
};
const de_Node = (output, context) => {
    return take(output, {
        Category: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Name: __expectString,
        NodeId: __expectString,
        OwnerAccount: __expectString,
        PackageArn: __expectString,
        PackageId: __expectString,
        PackageName: __expectString,
        PackageVersion: __expectString,
        PatchVersion: __expectString,
    });
};
const de_NodeFromTemplateJob = (output, context) => {
    return take(output, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobId: __expectString,
        NodeName: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        TemplateType: __expectString,
    });
};
const de_NodeFromTemplateJobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NodeFromTemplateJob(entry, context);
    });
    return retVal;
};
const de_NodesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Node(entry, context);
    });
    return retVal;
};
const de_PackageImportJob = (output, context) => {
    return take(output, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobId: __expectString,
        JobType: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_PackageImportJobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PackageImportJob(entry, context);
    });
    return retVal;
};
const de_PackageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PackageListItem(entry, context);
    });
    return retVal;
};
const de_PackageListItem = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PackageId: __expectString,
        PackageName: __expectString,
        Tags: _json,
    });
};
const de_ReportedRuntimeContextState = (output, context) => {
    return take(output, {
        DesiredState: __expectString,
        DeviceReportedStatus: __expectString,
        DeviceReportedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RuntimeContextName: __expectString,
    });
};
const de_ReportedRuntimeContextStates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReportedRuntimeContextState(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _C = "Category";
const _DASF = "DeviceAggregatedStatusFilter";
const _DI = "DeviceId";
const _FD = "ForceDelete";
const _MR = "MaxResults";
const _NF = "NameFilter";
const _NT = "NextToken";
const _OA = "OwnerAccount";
const _PN = "PackageName";
const _PV = "PatchVersion";
const _PVa = "PackageVersion";
const _RAS = "RetryAfterSeconds";
const _SB = "SortBy";
const _SF = "StatusFilter";
const _SO = "SortOrder";
const _TK = "TagKeys";
const _ULPV = "UpdatedLatestPatchVersion";
const _c = "category";
const _dI = "deviceId";
const _mR = "maxResults";
const _nT = "nextToken";
const _oA = "ownerAccount";
const _pN = "packageName";
const _pV = "packageVersion";
const _pVa = "patchVersion";
const _ra = "retry-after";
const _sF = "statusFilter";
const _tK = "tagKeys";
