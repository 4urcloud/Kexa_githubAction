import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { AutoScalingPlansServiceException as __BaseException } from "../models/AutoScalingPlansServiceException";
import { ConcurrentUpdateException, InternalServiceException, InvalidNextTokenException, LimitExceededException, ObjectNotFoundException, ValidationException, } from "../models/models_0";
export const se_CreateScalingPlanCommand = async (input, context) => {
    const headers = sharedHeaders("CreateScalingPlan");
    let body;
    body = JSON.stringify(se_CreateScalingPlanRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteScalingPlanCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteScalingPlan");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScalingPlanResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScalingPlanResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScalingPlansCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScalingPlans");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetScalingPlanResourceForecastDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetScalingPlanResourceForecastData");
    let body;
    body = JSON.stringify(se_GetScalingPlanResourceForecastDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateScalingPlanCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateScalingPlan");
    let body;
    body = JSON.stringify(se_UpdateScalingPlanRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateScalingPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteScalingPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScalingPlanResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScalingPlanResourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScalingPlansCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScalingPlansResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetScalingPlanResourceForecastDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetScalingPlanResourceForecastDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateScalingPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentUpdateException":
        case "com.amazonaws.autoscalingplans#ConcurrentUpdateException":
            throw await de_ConcurrentUpdateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.autoscalingplans#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.autoscalingplans#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.autoscalingplans#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ObjectNotFoundException":
        case "com.amazonaws.autoscalingplans#ObjectNotFoundException":
            throw await de_ObjectNotFoundExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.autoscalingplans#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentUpdateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ObjectNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ObjectNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateScalingPlanRequest = (input, context) => {
    return take(input, {
        ApplicationSource: _json,
        ScalingInstructions: (_) => se_ScalingInstructions(_, context),
        ScalingPlanName: [],
    });
};
const se_GetScalingPlanResourceForecastDataRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        ForecastDataType: [],
        ResourceId: [],
        ScalableDimension: [],
        ScalingPlanName: [],
        ScalingPlanVersion: [],
        ServiceNamespace: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ScalingInstruction = (input, context) => {
    return take(input, {
        CustomizedLoadMetricSpecification: _json,
        DisableDynamicScaling: [],
        MaxCapacity: [],
        MinCapacity: [],
        PredefinedLoadMetricSpecification: _json,
        PredictiveScalingMaxCapacityBehavior: [],
        PredictiveScalingMaxCapacityBuffer: [],
        PredictiveScalingMode: [],
        ResourceId: [],
        ScalableDimension: [],
        ScalingPolicyUpdateBehavior: [],
        ScheduledActionBufferTime: [],
        ServiceNamespace: [],
        TargetTrackingConfigurations: (_) => se_TargetTrackingConfigurations(_, context),
    });
};
const se_ScalingInstructions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ScalingInstruction(entry, context);
    });
};
const se_TargetTrackingConfiguration = (input, context) => {
    return take(input, {
        CustomizedScalingMetricSpecification: _json,
        DisableScaleIn: [],
        EstimatedInstanceWarmup: [],
        PredefinedScalingMetricSpecification: _json,
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: __serializeFloat,
    });
};
const se_TargetTrackingConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TargetTrackingConfiguration(entry, context);
    });
};
const se_UpdateScalingPlanRequest = (input, context) => {
    return take(input, {
        ApplicationSource: _json,
        ScalingInstructions: (_) => se_ScalingInstructions(_, context),
        ScalingPlanName: [],
        ScalingPlanVersion: [],
    });
};
const de_Datapoint = (output, context) => {
    return take(output, {
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Value: __limitedParseDouble,
    });
};
const de_Datapoints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Datapoint(entry, context);
    });
    return retVal;
};
const de_DescribeScalingPlanResourcesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ScalingPlanResources: (_) => de_ScalingPlanResources(_, context),
    });
};
const de_DescribeScalingPlansResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ScalingPlans: (_) => de_ScalingPlans(_, context),
    });
};
const de_GetScalingPlanResourceForecastDataResponse = (output, context) => {
    return take(output, {
        Datapoints: (_) => de_Datapoints(_, context),
    });
};
const de_ScalingInstruction = (output, context) => {
    return take(output, {
        CustomizedLoadMetricSpecification: _json,
        DisableDynamicScaling: __expectBoolean,
        MaxCapacity: __expectInt32,
        MinCapacity: __expectInt32,
        PredefinedLoadMetricSpecification: _json,
        PredictiveScalingMaxCapacityBehavior: __expectString,
        PredictiveScalingMaxCapacityBuffer: __expectInt32,
        PredictiveScalingMode: __expectString,
        ResourceId: __expectString,
        ScalableDimension: __expectString,
        ScalingPolicyUpdateBehavior: __expectString,
        ScheduledActionBufferTime: __expectInt32,
        ServiceNamespace: __expectString,
        TargetTrackingConfigurations: (_) => de_TargetTrackingConfigurations(_, context),
    });
};
const de_ScalingInstructions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingInstruction(entry, context);
    });
    return retVal;
};
const de_ScalingPlan = (output, context) => {
    return take(output, {
        ApplicationSource: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ScalingInstructions: (_) => de_ScalingInstructions(_, context),
        ScalingPlanName: __expectString,
        ScalingPlanVersion: __expectLong,
        StatusCode: __expectString,
        StatusMessage: __expectString,
        StatusStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ScalingPlanResource = (output, context) => {
    return take(output, {
        ResourceId: __expectString,
        ScalableDimension: __expectString,
        ScalingPlanName: __expectString,
        ScalingPlanVersion: __expectLong,
        ScalingPolicies: (_) => de_ScalingPolicies(_, context),
        ScalingStatusCode: __expectString,
        ScalingStatusMessage: __expectString,
        ServiceNamespace: __expectString,
    });
};
const de_ScalingPlanResources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingPlanResource(entry, context);
    });
    return retVal;
};
const de_ScalingPlans = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingPlan(entry, context);
    });
    return retVal;
};
const de_ScalingPolicies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingPolicy(entry, context);
    });
    return retVal;
};
const de_ScalingPolicy = (output, context) => {
    return take(output, {
        PolicyName: __expectString,
        PolicyType: __expectString,
        TargetTrackingConfiguration: (_) => de_TargetTrackingConfiguration(_, context),
    });
};
const de_TargetTrackingConfiguration = (output, context) => {
    return take(output, {
        CustomizedScalingMetricSpecification: _json,
        DisableScaleIn: __expectBoolean,
        EstimatedInstanceWarmup: __expectInt32,
        PredefinedScalingMetricSpecification: _json,
        ScaleInCooldown: __expectInt32,
        ScaleOutCooldown: __expectInt32,
        TargetValue: __limitedParseDouble,
    });
};
const de_TargetTrackingConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetTrackingConfiguration(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AnyScaleScalingPlannerFrontendService.${operation}`,
    };
}
