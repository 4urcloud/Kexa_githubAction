import { AutoScalingPlansServiceException as __BaseException } from "./AutoScalingPlansServiceException";
export class ConcurrentUpdateException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentUpdateException",
            $fault: "server",
            ...opts,
        });
        this.name = "ConcurrentUpdateException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ConcurrentUpdateException.prototype);
        this.Message = opts.Message;
    }
}
export const MetricStatistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
export const LoadMetricType = {
    ALBTargetGroupRequestCount: "ALBTargetGroupRequestCount",
    ASGTotalCPUUtilization: "ASGTotalCPUUtilization",
    ASGTotalNetworkIn: "ASGTotalNetworkIn",
    ASGTotalNetworkOut: "ASGTotalNetworkOut",
};
export const PredictiveScalingMaxCapacityBehavior = {
    SetForecastCapacityToMaxCapacity: "SetForecastCapacityToMaxCapacity",
    SetMaxCapacityAboveForecastCapacity: "SetMaxCapacityAboveForecastCapacity",
    SetMaxCapacityToForecastCapacity: "SetMaxCapacityToForecastCapacity",
};
export const PredictiveScalingMode = {
    ForecastAndScale: "ForecastAndScale",
    ForecastOnly: "ForecastOnly",
};
export const ScalableDimension = {
    AutoScalingGroupDesiredCapacity: "autoscaling:autoScalingGroup:DesiredCapacity",
    DynamoDBIndexReadCapacityUnits: "dynamodb:index:ReadCapacityUnits",
    DynamoDBIndexWriteCapacityUnits: "dynamodb:index:WriteCapacityUnits",
    DynamoDBTableReadCapacityUnits: "dynamodb:table:ReadCapacityUnits",
    DynamoDBTableWriteCapacityUnits: "dynamodb:table:WriteCapacityUnits",
    EC2SpotFleetRequestTargetCapacity: "ec2:spot-fleet-request:TargetCapacity",
    ECSServiceDesiredCount: "ecs:service:DesiredCount",
    RDSClusterReadReplicaCount: "rds:cluster:ReadReplicaCount",
};
export const ScalingPolicyUpdateBehavior = {
    KeepExternalPolicies: "KeepExternalPolicies",
    ReplaceExternalPolicies: "ReplaceExternalPolicies",
};
export const ServiceNamespace = {
    AUTOSCALING: "autoscaling",
    DYNAMODB: "dynamodb",
    EC2: "ec2",
    ECS: "ecs",
    RDS: "rds",
};
export const ScalingMetricType = {
    ALBRequestCountPerTarget: "ALBRequestCountPerTarget",
    ASGAverageCPUUtilization: "ASGAverageCPUUtilization",
    ASGAverageNetworkIn: "ASGAverageNetworkIn",
    ASGAverageNetworkOut: "ASGAverageNetworkOut",
    DynamoDBReadCapacityUtilization: "DynamoDBReadCapacityUtilization",
    DynamoDBWriteCapacityUtilization: "DynamoDBWriteCapacityUtilization",
    EC2SpotFleetRequestAverageCPUUtilization: "EC2SpotFleetRequestAverageCPUUtilization",
    EC2SpotFleetRequestAverageNetworkIn: "EC2SpotFleetRequestAverageNetworkIn",
    EC2SpotFleetRequestAverageNetworkOut: "EC2SpotFleetRequestAverageNetworkOut",
    ECSServiceAverageCPUUtilization: "ECSServiceAverageCPUUtilization",
    ECSServiceAverageMemoryUtilization: "ECSServiceAverageMemoryUtilization",
    RDSReaderAverageCPUUtilization: "RDSReaderAverageCPUUtilization",
    RDSReaderAverageDatabaseConnections: "RDSReaderAverageDatabaseConnections",
};
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export class ObjectNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ObjectNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ObjectNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const PolicyType = {
    TargetTrackingScaling: "TargetTrackingScaling",
};
export const ScalingStatusCode = {
    Active: "Active",
    Inactive: "Inactive",
    PartiallyActive: "PartiallyActive",
};
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export const ScalingPlanStatusCode = {
    Active: "Active",
    ActiveWithProblems: "ActiveWithProblems",
    CreationFailed: "CreationFailed",
    CreationInProgress: "CreationInProgress",
    DeletionFailed: "DeletionFailed",
    DeletionInProgress: "DeletionInProgress",
    UpdateFailed: "UpdateFailed",
    UpdateInProgress: "UpdateInProgress",
};
export const ForecastDataType = {
    CapacityForecast: "CapacityForecast",
    LoadForecast: "LoadForecast",
    ScheduledActionMaxCapacity: "ScheduledActionMaxCapacity",
    ScheduledActionMinCapacity: "ScheduledActionMinCapacity",
};
