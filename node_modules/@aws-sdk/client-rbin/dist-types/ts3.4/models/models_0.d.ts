import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { RbinServiceException as __BaseException } from "./RbinServiceException";
export declare const UnlockDelayUnit: {
  readonly DAYS: "DAYS";
};
export type UnlockDelayUnit =
  (typeof UnlockDelayUnit)[keyof typeof UnlockDelayUnit];
export interface UnlockDelay {
  UnlockDelayValue: number | undefined;
  UnlockDelayUnit: UnlockDelayUnit | undefined;
}
export interface LockConfiguration {
  UnlockDelay: UnlockDelay | undefined;
}
export interface ResourceTag {
  ResourceTagKey: string | undefined;
  ResourceTagValue?: string;
}
export declare const ResourceType: {
  readonly EBS_SNAPSHOT: "EBS_SNAPSHOT";
  readonly EC2_IMAGE: "EC2_IMAGE";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare const RetentionPeriodUnit: {
  readonly DAYS: "DAYS";
};
export type RetentionPeriodUnit =
  (typeof RetentionPeriodUnit)[keyof typeof RetentionPeriodUnit];
export interface RetentionPeriod {
  RetentionPeriodValue: number | undefined;
  RetentionPeriodUnit: RetentionPeriodUnit | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateRuleRequest {
  RetentionPeriod: RetentionPeriod | undefined;
  Description?: string;
  Tags?: Tag[];
  ResourceType: ResourceType | undefined;
  ResourceTags?: ResourceTag[];
  LockConfiguration?: LockConfiguration;
}
export declare const LockState: {
  readonly LOCKED: "locked";
  readonly PENDING_UNLOCK: "pending_unlock";
  readonly UNLOCKED: "unlocked";
};
export type LockState = (typeof LockState)[keyof typeof LockState];
export declare const RuleStatus: {
  readonly AVAILABLE: "available";
  readonly PENDING: "pending";
};
export type RuleStatus = (typeof RuleStatus)[keyof typeof RuleStatus];
export interface CreateRuleResponse {
  Identifier?: string;
  RetentionPeriod?: RetentionPeriod;
  Description?: string;
  Tags?: Tag[];
  ResourceType?: ResourceType;
  ResourceTags?: ResourceTag[];
  Status?: RuleStatus;
  LockConfiguration?: LockConfiguration;
  LockState?: LockState;
  RuleArn?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare const ServiceQuotaExceededExceptionReason: {
  readonly SERVICE_QUOTA_EXCEEDED: "SERVICE_QUOTA_EXCEEDED";
};
export type ServiceQuotaExceededExceptionReason =
  (typeof ServiceQuotaExceededExceptionReason)[keyof typeof ServiceQuotaExceededExceptionReason];
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ServiceQuotaExceededExceptionReason;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const ValidationExceptionReason: {
  readonly INVALID_PAGE_TOKEN: "INVALID_PAGE_TOKEN";
  readonly INVALID_PARAMETER_VALUE: "INVALID_PARAMETER_VALUE";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ValidationExceptionReason;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const ConflictExceptionReason: {
  readonly INVALID_RULE_STATE: "INVALID_RULE_STATE";
};
export type ConflictExceptionReason =
  (typeof ConflictExceptionReason)[keyof typeof ConflictExceptionReason];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ConflictExceptionReason;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeleteRuleRequest {
  Identifier: string | undefined;
}
export interface DeleteRuleResponse {}
export declare const ResourceNotFoundExceptionReason: {
  readonly RULE_NOT_FOUND: "RULE_NOT_FOUND";
};
export type ResourceNotFoundExceptionReason =
  (typeof ResourceNotFoundExceptionReason)[keyof typeof ResourceNotFoundExceptionReason];
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ResourceNotFoundExceptionReason;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface GetRuleRequest {
  Identifier: string | undefined;
}
export interface GetRuleResponse {
  Identifier?: string;
  Description?: string;
  ResourceType?: ResourceType;
  RetentionPeriod?: RetentionPeriod;
  ResourceTags?: ResourceTag[];
  Status?: RuleStatus;
  LockConfiguration?: LockConfiguration;
  LockState?: LockState;
  LockEndTime?: Date;
  RuleArn?: string;
}
export interface ListRulesRequest {
  MaxResults?: number;
  NextToken?: string;
  ResourceType: ResourceType | undefined;
  ResourceTags?: ResourceTag[];
  LockState?: LockState;
}
export interface RuleSummary {
  Identifier?: string;
  Description?: string;
  RetentionPeriod?: RetentionPeriod;
  LockState?: LockState;
  RuleArn?: string;
}
export interface ListRulesResponse {
  Rules?: RuleSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface LockRuleRequest {
  Identifier: string | undefined;
  LockConfiguration: LockConfiguration | undefined;
}
export interface LockRuleResponse {
  Identifier?: string;
  Description?: string;
  ResourceType?: ResourceType;
  RetentionPeriod?: RetentionPeriod;
  ResourceTags?: ResourceTag[];
  Status?: RuleStatus;
  LockConfiguration?: LockConfiguration;
  LockState?: LockState;
  RuleArn?: string;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UnlockRuleRequest {
  Identifier: string | undefined;
}
export interface UnlockRuleResponse {
  Identifier?: string;
  Description?: string;
  ResourceType?: ResourceType;
  RetentionPeriod?: RetentionPeriod;
  ResourceTags?: ResourceTag[];
  Status?: RuleStatus;
  LockConfiguration?: LockConfiguration;
  LockState?: LockState;
  LockEndTime?: Date;
  RuleArn?: string;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateRuleRequest {
  Identifier: string | undefined;
  RetentionPeriod?: RetentionPeriod;
  Description?: string;
  ResourceType?: ResourceType;
  ResourceTags?: ResourceTag[];
}
export interface UpdateRuleResponse {
  Identifier?: string;
  RetentionPeriod?: RetentionPeriod;
  Description?: string;
  ResourceType?: ResourceType;
  ResourceTags?: ResourceTag[];
  Status?: RuleStatus;
  LockState?: LockState;
  LockEndTime?: Date;
  RuleArn?: string;
}
