import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  CreateRuleCommandInput,
  CreateRuleCommandOutput,
} from "./commands/CreateRuleCommand";
import {
  DeleteRuleCommandInput,
  DeleteRuleCommandOutput,
} from "./commands/DeleteRuleCommand";
import {
  GetRuleCommandInput,
  GetRuleCommandOutput,
} from "./commands/GetRuleCommand";
import {
  ListRulesCommandInput,
  ListRulesCommandOutput,
} from "./commands/ListRulesCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  LockRuleCommandInput,
  LockRuleCommandOutput,
} from "./commands/LockRuleCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UnlockRuleCommandInput,
  UnlockRuleCommandOutput,
} from "./commands/UnlockRuleCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateRuleCommandInput,
  UpdateRuleCommandOutput,
} from "./commands/UpdateRuleCommand";
import { RbinClient } from "./RbinClient";
export interface Rbin {
  createRule(
    args: CreateRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateRuleCommandOutput>;
  createRule(
    args: CreateRuleCommandInput,
    cb: (err: any, data?: CreateRuleCommandOutput) => void
  ): void;
  createRule(
    args: CreateRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateRuleCommandOutput) => void
  ): void;
  deleteRule(
    args: DeleteRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteRuleCommandOutput>;
  deleteRule(
    args: DeleteRuleCommandInput,
    cb: (err: any, data?: DeleteRuleCommandOutput) => void
  ): void;
  deleteRule(
    args: DeleteRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteRuleCommandOutput) => void
  ): void;
  getRule(
    args: GetRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetRuleCommandOutput>;
  getRule(
    args: GetRuleCommandInput,
    cb: (err: any, data?: GetRuleCommandOutput) => void
  ): void;
  getRule(
    args: GetRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetRuleCommandOutput) => void
  ): void;
  listRules(
    args: ListRulesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListRulesCommandOutput>;
  listRules(
    args: ListRulesCommandInput,
    cb: (err: any, data?: ListRulesCommandOutput) => void
  ): void;
  listRules(
    args: ListRulesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListRulesCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  lockRule(
    args: LockRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<LockRuleCommandOutput>;
  lockRule(
    args: LockRuleCommandInput,
    cb: (err: any, data?: LockRuleCommandOutput) => void
  ): void;
  lockRule(
    args: LockRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: LockRuleCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  unlockRule(
    args: UnlockRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UnlockRuleCommandOutput>;
  unlockRule(
    args: UnlockRuleCommandInput,
    cb: (err: any, data?: UnlockRuleCommandOutput) => void
  ): void;
  unlockRule(
    args: UnlockRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UnlockRuleCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateRule(
    args: UpdateRuleCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateRuleCommandOutput>;
  updateRule(
    args: UpdateRuleCommandInput,
    cb: (err: any, data?: UpdateRuleCommandOutput) => void
  ): void;
  updateRule(
    args: UpdateRuleCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateRuleCommandOutput) => void
  ): void;
}
export declare class Rbin extends RbinClient implements Rbin {}
