import { RbinServiceException as __BaseException } from "./RbinServiceException";
export const UnlockDelayUnit = {
    DAYS: "DAYS",
};
export const ResourceType = {
    EBS_SNAPSHOT: "EBS_SNAPSHOT",
    EC2_IMAGE: "EC2_IMAGE",
};
export const RetentionPeriodUnit = {
    DAYS: "DAYS",
};
export const LockState = {
    LOCKED: "locked",
    PENDING_UNLOCK: "pending_unlock",
    UNLOCKED: "unlocked",
};
export const RuleStatus = {
    AVAILABLE: "available",
    PENDING: "pending",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export const ServiceQuotaExceededExceptionReason = {
    SERVICE_QUOTA_EXCEEDED: "SERVICE_QUOTA_EXCEEDED",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
export const ValidationExceptionReason = {
    INVALID_PAGE_TOKEN: "INVALID_PAGE_TOKEN",
    INVALID_PARAMETER_VALUE: "INVALID_PARAMETER_VALUE",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
export const ConflictExceptionReason = {
    INVALID_RULE_STATE: "INVALID_RULE_STATE",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
export const ResourceNotFoundExceptionReason = {
    RULE_NOT_FOUND: "RULE_NOT_FOUND",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
