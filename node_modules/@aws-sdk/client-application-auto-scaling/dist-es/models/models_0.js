import { ApplicationAutoScalingServiceException as __BaseException } from "./ApplicationAutoScalingServiceException";
export const AdjustmentType = {
    ChangeInCapacity: "ChangeInCapacity",
    ExactCapacity: "ExactCapacity",
    PercentChangeInCapacity: "PercentChangeInCapacity",
};
export class ConcurrentUpdateException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentUpdateException",
            $fault: "server",
            ...opts,
        });
        this.name = "ConcurrentUpdateException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ConcurrentUpdateException.prototype);
        this.Message = opts.Message;
    }
}
export const ScalableDimension = {
    AppstreamFleetDesiredCapacity: "appstream:fleet:DesiredCapacity",
    CassandraTableReadCapacityUnits: "cassandra:table:ReadCapacityUnits",
    CassandraTableWriteCapacityUnits: "cassandra:table:WriteCapacityUnits",
    ComprehendDocClassifierEndpointInferenceUnits: "comprehend:document-classifier-endpoint:DesiredInferenceUnits",
    ComprehendEntityRecognizerEndpointInferenceUnits: "comprehend:entity-recognizer-endpoint:DesiredInferenceUnits",
    CustomResourceScalableDimension: "custom-resource:ResourceType:Property",
    DynamoDBIndexReadCapacityUnits: "dynamodb:index:ReadCapacityUnits",
    DynamoDBIndexWriteCapacityUnits: "dynamodb:index:WriteCapacityUnits",
    DynamoDBTableReadCapacityUnits: "dynamodb:table:ReadCapacityUnits",
    DynamoDBTableWriteCapacityUnits: "dynamodb:table:WriteCapacityUnits",
    EC2SpotFleetRequestTargetCapacity: "ec2:spot-fleet-request:TargetCapacity",
    ECSServiceDesiredCount: "ecs:service:DesiredCount",
    EMRInstanceGroupInstanceCount: "elasticmapreduce:instancegroup:InstanceCount",
    ElastiCacheReplicationGroupNodeGroups: "elasticache:replication-group:NodeGroups",
    ElastiCacheReplicationGroupReplicas: "elasticache:replication-group:Replicas",
    KafkaBrokerStorageVolumeSize: "kafka:broker-storage:VolumeSize",
    LambdaFunctionProvisionedConcurrency: "lambda:function:ProvisionedConcurrency",
    NeptuneClusterReadReplicaCount: "neptune:cluster:ReadReplicaCount",
    RDSClusterReadReplicaCount: "rds:cluster:ReadReplicaCount",
    SageMakerInferenceComponentDesiredCopyCount: "sagemaker:inference-component:DesiredCopyCount",
    SageMakerVariantDesiredInstanceCount: "sagemaker:variant:DesiredInstanceCount",
    SageMakerVariantDesiredProvisionedConcurrency: "sagemaker:variant:DesiredProvisionedConcurrency",
};
export const ServiceNamespace = {
    APPSTREAM: "appstream",
    CASSANDRA: "cassandra",
    COMPREHEND: "comprehend",
    CUSTOM_RESOURCE: "custom-resource",
    DYNAMODB: "dynamodb",
    EC2: "ec2",
    ECS: "ecs",
    ELASTICACHE: "elasticache",
    EMR: "elasticmapreduce",
    KAFKA: "kafka",
    LAMBDA: "lambda",
    NEPTUNE: "neptune",
    RDS: "rds",
    SAGEMAKER: "sagemaker",
};
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class ObjectNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ObjectNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ObjectNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export const ScalingActivityStatusCode = {
    Failed: "Failed",
    InProgress: "InProgress",
    Overridden: "Overridden",
    Pending: "Pending",
    Successful: "Successful",
    Unfulfilled: "Unfulfilled",
};
export const PolicyType = {
    StepScaling: "StepScaling",
    TargetTrackingScaling: "TargetTrackingScaling",
};
export const MetricAggregationType = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
};
export const MetricStatistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
export const MetricType = {
    ALBRequestCountPerTarget: "ALBRequestCountPerTarget",
    AppStreamAverageCapacityUtilization: "AppStreamAverageCapacityUtilization",
    CassandraReadCapacityUtilization: "CassandraReadCapacityUtilization",
    CassandraWriteCapacityUtilization: "CassandraWriteCapacityUtilization",
    ComprehendInferenceUtilization: "ComprehendInferenceUtilization",
    DynamoDBReadCapacityUtilization: "DynamoDBReadCapacityUtilization",
    DynamoDBWriteCapacityUtilization: "DynamoDBWriteCapacityUtilization",
    EC2SpotFleetRequestAverageCPUUtilization: "EC2SpotFleetRequestAverageCPUUtilization",
    EC2SpotFleetRequestAverageNetworkIn: "EC2SpotFleetRequestAverageNetworkIn",
    EC2SpotFleetRequestAverageNetworkOut: "EC2SpotFleetRequestAverageNetworkOut",
    ECSServiceAverageCPUUtilization: "ECSServiceAverageCPUUtilization",
    ECSServiceAverageMemoryUtilization: "ECSServiceAverageMemoryUtilization",
    ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage: "ElastiCacheDatabaseCapacityUsageCountedForEvictPercentage",
    ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage: "ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage",
    ElastiCachePrimaryEngineCPUUtilization: "ElastiCachePrimaryEngineCPUUtilization",
    ElastiCacheReplicaEngineCPUUtilization: "ElastiCacheReplicaEngineCPUUtilization",
    KafkaBrokerStorageUtilization: "KafkaBrokerStorageUtilization",
    LambdaProvisionedConcurrencyUtilization: "LambdaProvisionedConcurrencyUtilization",
    NeptuneReaderAverageCPUUtilization: "NeptuneReaderAverageCPUUtilization",
    RDSReaderAverageCPUUtilization: "RDSReaderAverageCPUUtilization",
    RDSReaderAverageDatabaseConnections: "RDSReaderAverageDatabaseConnections",
    SageMakerInferenceComponentInvocationsPerCopy: "SageMakerInferenceComponentInvocationsPerCopy",
    SageMakerVariantInvocationsPerInstance: "SageMakerVariantInvocationsPerInstance",
    SageMakerVariantProvisionedConcurrencyUtilization: "SageMakerVariantProvisionedConcurrencyUtilization",
};
export class FailedResourceAccessException extends __BaseException {
    constructor(opts) {
        super({
            name: "FailedResourceAccessException",
            $fault: "client",
            ...opts,
        });
        this.name = "FailedResourceAccessException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FailedResourceAccessException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
