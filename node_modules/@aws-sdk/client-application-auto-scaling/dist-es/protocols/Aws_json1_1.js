import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { ApplicationAutoScalingServiceException as __BaseException } from "../models/ApplicationAutoScalingServiceException";
import { ConcurrentUpdateException, FailedResourceAccessException, InternalServiceException, InvalidNextTokenException, LimitExceededException, ObjectNotFoundException, ResourceNotFoundException, TooManyTagsException, ValidationException, } from "../models/models_0";
export const se_DeleteScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteScalingPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteScheduledActionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteScheduledAction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterScalableTargetCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterScalableTarget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScalableTargetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScalableTargets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScalingActivitiesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScalingActivities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScalingPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScalingPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeScheduledActionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeScheduledActions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutScalingPolicy");
    let body;
    body = JSON.stringify(se_PutScalingPolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutScheduledActionCommand = async (input, context) => {
    const headers = sharedHeaders("PutScheduledAction");
    let body;
    body = JSON.stringify(se_PutScheduledActionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterScalableTargetCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterScalableTarget");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_DeleteScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteScheduledActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterScalableTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScalableTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScalableTargetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScalingActivitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScalingActivitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScalingPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScalingPoliciesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeScheduledActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeScheduledActionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutScheduledActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterScalableTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentUpdateException":
        case "com.amazonaws.applicationautoscaling#ConcurrentUpdateException":
            throw await de_ConcurrentUpdateExceptionRes(parsedOutput, context);
        case "InternalServiceException":
        case "com.amazonaws.applicationautoscaling#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "ObjectNotFoundException":
        case "com.amazonaws.applicationautoscaling#ObjectNotFoundException":
            throw await de_ObjectNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.applicationautoscaling#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.applicationautoscaling#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "FailedResourceAccessException":
        case "com.amazonaws.applicationautoscaling#FailedResourceAccessException":
            throw await de_FailedResourceAccessExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.applicationautoscaling#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.applicationautoscaling#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.applicationautoscaling#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentUpdateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentUpdateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_FailedResourceAccessExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new FailedResourceAccessException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ObjectNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ObjectNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_PutScalingPolicyRequest = (input, context) => {
    return take(input, {
        PolicyName: [],
        PolicyType: [],
        ResourceId: [],
        ScalableDimension: [],
        ServiceNamespace: [],
        StepScalingPolicyConfiguration: (_) => se_StepScalingPolicyConfiguration(_, context),
        TargetTrackingScalingPolicyConfiguration: (_) => se_TargetTrackingScalingPolicyConfiguration(_, context),
    });
};
const se_PutScheduledActionRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        ResourceId: [],
        ScalableDimension: [],
        ScalableTargetAction: _json,
        Schedule: [],
        ScheduledActionName: [],
        ServiceNamespace: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
        Timezone: [],
    });
};
const se_StepAdjustment = (input, context) => {
    return take(input, {
        MetricIntervalLowerBound: __serializeFloat,
        MetricIntervalUpperBound: __serializeFloat,
        ScalingAdjustment: [],
    });
};
const se_StepAdjustments = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_StepAdjustment(entry, context);
    });
};
const se_StepScalingPolicyConfiguration = (input, context) => {
    return take(input, {
        AdjustmentType: [],
        Cooldown: [],
        MetricAggregationType: [],
        MinAdjustmentMagnitude: [],
        StepAdjustments: (_) => se_StepAdjustments(_, context),
    });
};
const se_TargetTrackingScalingPolicyConfiguration = (input, context) => {
    return take(input, {
        CustomizedMetricSpecification: _json,
        DisableScaleIn: [],
        PredefinedMetricSpecification: _json,
        ScaleInCooldown: [],
        ScaleOutCooldown: [],
        TargetValue: __serializeFloat,
    });
};
const de_DescribeScalableTargetsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ScalableTargets: (_) => de_ScalableTargets(_, context),
    });
};
const de_DescribeScalingActivitiesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ScalingActivities: (_) => de_ScalingActivities(_, context),
    });
};
const de_DescribeScalingPoliciesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ScalingPolicies: (_) => de_ScalingPolicies(_, context),
    });
};
const de_DescribeScheduledActionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ScheduledActions: (_) => de_ScheduledActions(_, context),
    });
};
const de_ScalableTarget = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MaxCapacity: __expectInt32,
        MinCapacity: __expectInt32,
        ResourceId: __expectString,
        RoleARN: __expectString,
        ScalableDimension: __expectString,
        ScalableTargetARN: __expectString,
        ServiceNamespace: __expectString,
        SuspendedState: _json,
    });
};
const de_ScalableTargets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalableTarget(entry, context);
    });
    return retVal;
};
const de_ScalingActivities = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingActivity(entry, context);
    });
    return retVal;
};
const de_ScalingActivity = (output, context) => {
    return take(output, {
        ActivityId: __expectString,
        Cause: __expectString,
        Description: __expectString,
        Details: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NotScaledReasons: _json,
        ResourceId: __expectString,
        ScalableDimension: __expectString,
        ServiceNamespace: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StatusCode: __expectString,
        StatusMessage: __expectString,
    });
};
const de_ScalingPolicies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingPolicy(entry, context);
    });
    return retVal;
};
const de_ScalingPolicy = (output, context) => {
    return take(output, {
        Alarms: _json,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PolicyARN: __expectString,
        PolicyName: __expectString,
        PolicyType: __expectString,
        ResourceId: __expectString,
        ScalableDimension: __expectString,
        ServiceNamespace: __expectString,
        StepScalingPolicyConfiguration: (_) => de_StepScalingPolicyConfiguration(_, context),
        TargetTrackingScalingPolicyConfiguration: (_) => de_TargetTrackingScalingPolicyConfiguration(_, context),
    });
};
const de_ScheduledAction = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ResourceId: __expectString,
        ScalableDimension: __expectString,
        ScalableTargetAction: _json,
        Schedule: __expectString,
        ScheduledActionARN: __expectString,
        ScheduledActionName: __expectString,
        ServiceNamespace: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Timezone: __expectString,
    });
};
const de_ScheduledActions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledAction(entry, context);
    });
    return retVal;
};
const de_StepAdjustment = (output, context) => {
    return take(output, {
        MetricIntervalLowerBound: __limitedParseDouble,
        MetricIntervalUpperBound: __limitedParseDouble,
        ScalingAdjustment: __expectInt32,
    });
};
const de_StepAdjustments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StepAdjustment(entry, context);
    });
    return retVal;
};
const de_StepScalingPolicyConfiguration = (output, context) => {
    return take(output, {
        AdjustmentType: __expectString,
        Cooldown: __expectInt32,
        MetricAggregationType: __expectString,
        MinAdjustmentMagnitude: __expectInt32,
        StepAdjustments: (_) => de_StepAdjustments(_, context),
    });
};
const de_TargetTrackingScalingPolicyConfiguration = (output, context) => {
    return take(output, {
        CustomizedMetricSpecification: _json,
        DisableScaleIn: __expectBoolean,
        PredefinedMetricSpecification: _json,
        ScaleInCooldown: __expectInt32,
        ScaleOutCooldown: __expectInt32,
        TargetValue: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AnyScaleFrontendService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
