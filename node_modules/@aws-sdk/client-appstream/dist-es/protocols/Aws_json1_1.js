import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { AppStreamServiceException as __BaseException } from "../models/AppStreamServiceException";
import { ConcurrentModificationException, EntitlementAlreadyExistsException, EntitlementNotFoundException, IncompatibleImageException, InvalidAccountStatusException, InvalidParameterCombinationException, InvalidRoleException, LimitExceededException, OperationNotPermittedException, RequestLimitExceededException, ResourceAlreadyExistsException, ResourceInUseException, ResourceNotAvailableException, ResourceNotFoundException, } from "../models/models_0";
export const se_AssociateAppBlockBuilderAppBlockCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateAppBlockBuilderAppBlock");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateApplicationFleetCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateApplicationFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateApplicationToEntitlementCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateApplicationToEntitlement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchAssociateUserStackCommand = async (input, context) => {
    const headers = sharedHeaders("BatchAssociateUserStack");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDisassociateUserStackCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDisassociateUserStack");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CopyImageCommand = async (input, context) => {
    const headers = sharedHeaders("CopyImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAppBlockCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAppBlock");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAppBlockBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAppBlockBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAppBlockBuilderStreamingURLCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAppBlockBuilderStreamingURL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateApplicationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateApplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDirectoryConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDirectoryConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEntitlementCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEntitlement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateImageBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("CreateImageBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateImageBuilderStreamingURLCommand = async (input, context) => {
    const headers = sharedHeaders("CreateImageBuilderStreamingURL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStackCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStack");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStreamingURLCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStreamingURL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUpdatedImageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUpdatedImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUsageReportSubscriptionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUsageReportSubscription");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUserCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppBlockCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppBlock");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppBlockBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppBlockBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteApplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDirectoryConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDirectoryConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEntitlementCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEntitlement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteImageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteImageBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImageBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteImagePermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImagePermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteStackCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStack");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteUsageReportSubscriptionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUsageReportSubscription");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAppBlockBuilderAppBlockAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAppBlockBuilderAppBlockAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAppBlockBuildersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAppBlockBuilders");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAppBlocksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAppBlocks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationFleetAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeApplicationFleetAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeApplications");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDirectoryConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDirectoryConfigs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEntitlementsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEntitlements");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFleets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImageBuildersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageBuilders");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImagePermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImagePermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeImagesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSessionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSessions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeStacksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStacks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeUsageReportSubscriptionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUsageReportSubscriptions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeUsersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUsers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeUserStackAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserStackAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableUserCommand = async (input, context) => {
    const headers = sharedHeaders("DisableUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateAppBlockBuilderAppBlockCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateAppBlockBuilderAppBlock");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateApplicationFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateApplicationFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateApplicationFromEntitlementCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateApplicationFromEntitlement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableUserCommand = async (input, context) => {
    const headers = sharedHeaders("EnableUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExpireSessionCommand = async (input, context) => {
    const headers = sharedHeaders("ExpireSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssociatedFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssociatedFleets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssociatedStacksCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssociatedStacks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEntitledApplicationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEntitledApplications");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartAppBlockBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("StartAppBlockBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFleetCommand = async (input, context) => {
    const headers = sharedHeaders("StartFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartImageBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("StartImageBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopAppBlockBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("StopAppBlockBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopFleetCommand = async (input, context) => {
    const headers = sharedHeaders("StopFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopImageBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("StopImageBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAppBlockBuilderCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAppBlockBuilder");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateApplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDirectoryConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDirectoryConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEntitlementCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEntitlement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateImagePermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateImagePermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateStackCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateStack");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateAppBlockBuilderAppBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateApplicationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateApplicationToEntitlementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchAssociateUserStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchDisassociateUserStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CopyImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAppBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAppBlockResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAppBlockBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAppBlockBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAppBlockBuilderStreamingURLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAppBlockBuilderStreamingURLResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateApplicationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDirectoryConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDirectoryConfigResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEntitlementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEntitlementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateImageBuilderStreamingURLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateImageBuilderStreamingURLResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateStreamingURLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateStreamingURLResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUpdatedImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateUpdatedImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUsageReportSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAppBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAppBlockBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDirectoryConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEntitlementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteImagePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteUsageReportSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAppBlockBuilderAppBlockAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAppBlockBuildersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAppBlockBuildersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAppBlocksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAppBlocksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeApplicationFleetAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeApplicationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDirectoryConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDirectoryConfigsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEntitlementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEntitlementsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeImageBuildersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageBuildersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeImagePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSessionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStacksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeUsageReportSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeUsageReportSubscriptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeUsersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeUserStackAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateAppBlockBuilderAppBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateApplicationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateApplicationFromEntitlementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_EnableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExpireSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAssociatedFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAssociatedStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEntitledApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartAppBlockBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartAppBlockBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopAppBlockBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopAppBlockBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopImageBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopImageBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAppBlockBuilderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateAppBlockBuilderResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateApplicationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDirectoryConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDirectoryConfigResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEntitlementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateEntitlementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateFleetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateImagePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.appstream#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidParameterCombinationException":
        case "com.amazonaws.appstream#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.appstream#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "OperationNotPermittedException":
        case "com.amazonaws.appstream#OperationNotPermittedException":
            throw await de_OperationNotPermittedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.appstream#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "EntitlementNotFoundException":
        case "com.amazonaws.appstream#EntitlementNotFoundException":
            throw await de_EntitlementNotFoundExceptionRes(parsedOutput, context);
        case "IncompatibleImageException":
        case "com.amazonaws.appstream#IncompatibleImageException":
            throw await de_IncompatibleImageExceptionRes(parsedOutput, context);
        case "InvalidAccountStatusException":
        case "com.amazonaws.appstream#InvalidAccountStatusException":
            throw await de_InvalidAccountStatusExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.appstream#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceNotAvailableException":
        case "com.amazonaws.appstream#ResourceNotAvailableException":
            throw await de_ResourceNotAvailableExceptionRes(parsedOutput, context);
        case "InvalidRoleException":
        case "com.amazonaws.appstream#InvalidRoleException":
            throw await de_InvalidRoleExceptionRes(parsedOutput, context);
        case "RequestLimitExceededException":
        case "com.amazonaws.appstream#RequestLimitExceededException":
            throw await de_RequestLimitExceededExceptionRes(parsedOutput, context);
        case "EntitlementAlreadyExistsException":
        case "com.amazonaws.appstream#EntitlementAlreadyExistsException":
            throw await de_EntitlementAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.appstream#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EntitlementAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EntitlementAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EntitlementNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EntitlementNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IncompatibleImageExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IncompatibleImageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidAccountStatusExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAccountStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterCombinationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRoleExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRoleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationNotPermittedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationNotPermittedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_RequestLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotAvailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AppBlock = (output, context) => {
    return take(output, {
        AppBlockErrors: _json,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        Name: __expectString,
        PackagingType: __expectString,
        PostSetupScriptDetails: _json,
        SetupScriptDetails: _json,
        SourceS3Location: _json,
        State: __expectString,
    });
};
const de_AppBlockBuilder = (output, context) => {
    return take(output, {
        AccessEndpoints: _json,
        AppBlockBuilderErrors: (_) => de_ResourceErrors(_, context),
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        EnableDefaultInternetAccess: __expectBoolean,
        IamRoleArn: __expectString,
        InstanceType: __expectString,
        Name: __expectString,
        Platform: __expectString,
        State: __expectString,
        StateChangeReason: _json,
        VpcConfig: _json,
    });
};
const de_AppBlockBuilderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppBlockBuilder(entry, context);
    });
    return retVal;
};
const de_AppBlocks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppBlock(entry, context);
    });
    return retVal;
};
const de_Application = (output, context) => {
    return take(output, {
        AppBlockArn: __expectString,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        Enabled: __expectBoolean,
        IconS3Location: _json,
        IconURL: __expectString,
        InstanceFamilies: _json,
        LaunchParameters: __expectString,
        LaunchPath: __expectString,
        Metadata: _json,
        Name: __expectString,
        Platforms: _json,
        WorkingDirectory: __expectString,
    });
};
const de_Applications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Application(entry, context);
    });
    return retVal;
};
const de_CreateAppBlockBuilderResult = (output, context) => {
    return take(output, {
        AppBlockBuilder: (_) => de_AppBlockBuilder(_, context),
    });
};
const de_CreateAppBlockBuilderStreamingURLResult = (output, context) => {
    return take(output, {
        Expires: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StreamingURL: __expectString,
    });
};
const de_CreateAppBlockResult = (output, context) => {
    return take(output, {
        AppBlock: (_) => de_AppBlock(_, context),
    });
};
const de_CreateApplicationResult = (output, context) => {
    return take(output, {
        Application: (_) => de_Application(_, context),
    });
};
const de_CreateDirectoryConfigResult = (output, context) => {
    return take(output, {
        DirectoryConfig: (_) => de_DirectoryConfig(_, context),
    });
};
const de_CreateEntitlementResult = (output, context) => {
    return take(output, {
        Entitlement: (_) => de_Entitlement(_, context),
    });
};
const de_CreateFleetResult = (output, context) => {
    return take(output, {
        Fleet: (_) => de_Fleet(_, context),
    });
};
const de_CreateImageBuilderResult = (output, context) => {
    return take(output, {
        ImageBuilder: (_) => de_ImageBuilder(_, context),
    });
};
const de_CreateImageBuilderStreamingURLResult = (output, context) => {
    return take(output, {
        Expires: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StreamingURL: __expectString,
    });
};
const de_CreateStackResult = (output, context) => {
    return take(output, {
        Stack: (_) => de_Stack(_, context),
    });
};
const de_CreateStreamingURLResult = (output, context) => {
    return take(output, {
        Expires: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StreamingURL: __expectString,
    });
};
const de_CreateUpdatedImageResult = (output, context) => {
    return take(output, {
        canUpdateImage: __expectBoolean,
        image: (_) => de_Image(_, context),
    });
};
const de_DeleteImageBuilderResult = (output, context) => {
    return take(output, {
        ImageBuilder: (_) => de_ImageBuilder(_, context),
    });
};
const de_DeleteImageResult = (output, context) => {
    return take(output, {
        Image: (_) => de_Image(_, context),
    });
};
const de_DescribeAppBlockBuildersResult = (output, context) => {
    return take(output, {
        AppBlockBuilders: (_) => de_AppBlockBuilderList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeAppBlocksResult = (output, context) => {
    return take(output, {
        AppBlocks: (_) => de_AppBlocks(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeApplicationsResult = (output, context) => {
    return take(output, {
        Applications: (_) => de_Applications(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeDirectoryConfigsResult = (output, context) => {
    return take(output, {
        DirectoryConfigs: (_) => de_DirectoryConfigList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeEntitlementsResult = (output, context) => {
    return take(output, {
        Entitlements: (_) => de_EntitlementList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeFleetsResult = (output, context) => {
    return take(output, {
        Fleets: (_) => de_FleetList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeImageBuildersResult = (output, context) => {
    return take(output, {
        ImageBuilders: (_) => de_ImageBuilderList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeImagesResult = (output, context) => {
    return take(output, {
        Images: (_) => de_ImageList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeSessionsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Sessions: (_) => de_SessionList(_, context),
    });
};
const de_DescribeStacksResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Stacks: (_) => de_StackList(_, context),
    });
};
const de_DescribeUsageReportSubscriptionsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        UsageReportSubscriptions: (_) => de_UsageReportSubscriptionList(_, context),
    });
};
const de_DescribeUsersResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Users: (_) => de_UserList(_, context),
    });
};
const de_DirectoryConfig = (output, context) => {
    return take(output, {
        CertificateBasedAuthProperties: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DirectoryName: __expectString,
        OrganizationalUnitDistinguishedNames: _json,
        ServiceAccountCredentials: _json,
    });
};
const de_DirectoryConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DirectoryConfig(entry, context);
    });
    return retVal;
};
const de_Entitlement = (output, context) => {
    return take(output, {
        AppVisibility: __expectString,
        Attributes: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        StackName: __expectString,
    });
};
const de_EntitlementList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Entitlement(entry, context);
    });
    return retVal;
};
const de_Fleet = (output, context) => {
    return take(output, {
        Arn: __expectString,
        ComputeCapacityStatus: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisconnectTimeoutInSeconds: __expectInt32,
        DisplayName: __expectString,
        DomainJoinInfo: _json,
        EnableDefaultInternetAccess: __expectBoolean,
        FleetErrors: _json,
        FleetType: __expectString,
        IamRoleArn: __expectString,
        IdleDisconnectTimeoutInSeconds: __expectInt32,
        ImageArn: __expectString,
        ImageName: __expectString,
        InstanceType: __expectString,
        MaxConcurrentSessions: __expectInt32,
        MaxSessionsPerInstance: __expectInt32,
        MaxUserDurationInSeconds: __expectInt32,
        Name: __expectString,
        Platform: __expectString,
        SessionScriptS3Location: _json,
        State: __expectString,
        StreamView: __expectString,
        UsbDeviceFilterStrings: _json,
        VpcConfig: _json,
    });
};
const de_FleetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Fleet(entry, context);
    });
    return retVal;
};
const de_Image = (output, context) => {
    return take(output, {
        Applications: (_) => de_Applications(_, context),
        AppstreamAgentVersion: __expectString,
        Arn: __expectString,
        BaseImageArn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        ImageBuilderName: __expectString,
        ImageBuilderSupported: __expectBoolean,
        ImageErrors: (_) => de_ResourceErrors(_, context),
        ImagePermissions: _json,
        Name: __expectString,
        Platform: __expectString,
        PublicBaseImageReleasedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        StateChangeReason: _json,
        Visibility: __expectString,
    });
};
const de_ImageBuilder = (output, context) => {
    return take(output, {
        AccessEndpoints: _json,
        AppstreamAgentVersion: __expectString,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        DomainJoinInfo: _json,
        EnableDefaultInternetAccess: __expectBoolean,
        IamRoleArn: __expectString,
        ImageArn: __expectString,
        ImageBuilderErrors: (_) => de_ResourceErrors(_, context),
        InstanceType: __expectString,
        Name: __expectString,
        NetworkAccessConfiguration: _json,
        Platform: __expectString,
        State: __expectString,
        StateChangeReason: _json,
        VpcConfig: _json,
    });
};
const de_ImageBuilderList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageBuilder(entry, context);
    });
    return retVal;
};
const de_ImageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Image(entry, context);
    });
    return retVal;
};
const de_ResourceError = (output, context) => {
    return take(output, {
        ErrorCode: __expectString,
        ErrorMessage: __expectString,
        ErrorTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ResourceErrors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceError(entry, context);
    });
    return retVal;
};
const de_Session = (output, context) => {
    return take(output, {
        AuthenticationType: __expectString,
        ConnectionState: __expectString,
        FleetName: __expectString,
        Id: __expectString,
        InstanceId: __expectString,
        MaxExpirationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NetworkAccessConfiguration: _json,
        StackName: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        UserId: __expectString,
    });
};
const de_SessionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Session(entry, context);
    });
    return retVal;
};
const de_Stack = (output, context) => {
    return take(output, {
        AccessEndpoints: _json,
        ApplicationSettings: _json,
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DisplayName: __expectString,
        EmbedHostDomains: _json,
        FeedbackURL: __expectString,
        Name: __expectString,
        RedirectURL: __expectString,
        StackErrors: _json,
        StorageConnectors: _json,
        StreamingExperienceSettings: _json,
        UserSettings: _json,
    });
};
const de_StackList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Stack(entry, context);
    });
    return retVal;
};
const de_StartAppBlockBuilderResult = (output, context) => {
    return take(output, {
        AppBlockBuilder: (_) => de_AppBlockBuilder(_, context),
    });
};
const de_StartImageBuilderResult = (output, context) => {
    return take(output, {
        ImageBuilder: (_) => de_ImageBuilder(_, context),
    });
};
const de_StopAppBlockBuilderResult = (output, context) => {
    return take(output, {
        AppBlockBuilder: (_) => de_AppBlockBuilder(_, context),
    });
};
const de_StopImageBuilderResult = (output, context) => {
    return take(output, {
        ImageBuilder: (_) => de_ImageBuilder(_, context),
    });
};
const de_UpdateAppBlockBuilderResult = (output, context) => {
    return take(output, {
        AppBlockBuilder: (_) => de_AppBlockBuilder(_, context),
    });
};
const de_UpdateApplicationResult = (output, context) => {
    return take(output, {
        Application: (_) => de_Application(_, context),
    });
};
const de_UpdateDirectoryConfigResult = (output, context) => {
    return take(output, {
        DirectoryConfig: (_) => de_DirectoryConfig(_, context),
    });
};
const de_UpdateEntitlementResult = (output, context) => {
    return take(output, {
        Entitlement: (_) => de_Entitlement(_, context),
    });
};
const de_UpdateFleetResult = (output, context) => {
    return take(output, {
        Fleet: (_) => de_Fleet(_, context),
    });
};
const de_UpdateStackResult = (output, context) => {
    return take(output, {
        Stack: (_) => de_Stack(_, context),
    });
};
const de_UsageReportSubscription = (output, context) => {
    return take(output, {
        LastGeneratedReportDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        S3BucketName: __expectString,
        Schedule: __expectString,
        SubscriptionErrors: _json,
    });
};
const de_UsageReportSubscriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageReportSubscription(entry, context);
    });
    return retVal;
};
const de_User = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AuthenticationType: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Enabled: __expectBoolean,
        FirstName: __expectString,
        LastName: __expectString,
        Status: __expectString,
        UserName: __expectString,
    });
};
const de_UserList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_User(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `PhotonAdminProxyService.${operation}`,
    };
}
