import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { AppStreamServiceException as __BaseException } from "./AppStreamServiceException";
export const AccessEndpointType = {
    STREAMING: "STREAMING",
};
export const Action = {
    CLIPBOARD_COPY_FROM_LOCAL_DEVICE: "CLIPBOARD_COPY_FROM_LOCAL_DEVICE",
    CLIPBOARD_COPY_TO_LOCAL_DEVICE: "CLIPBOARD_COPY_TO_LOCAL_DEVICE",
    DOMAIN_PASSWORD_SIGNIN: "DOMAIN_PASSWORD_SIGNIN",
    DOMAIN_SMART_CARD_SIGNIN: "DOMAIN_SMART_CARD_SIGNIN",
    FILE_DOWNLOAD: "FILE_DOWNLOAD",
    FILE_UPLOAD: "FILE_UPLOAD",
    PRINTING_TO_LOCAL_DEVICE: "PRINTING_TO_LOCAL_DEVICE",
};
export const PackagingType = {
    APPSTREAM2: "APPSTREAM2",
    CUSTOM: "CUSTOM",
};
export const AppBlockState = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export const FleetErrorCode = {
    DOMAIN_JOIN_ERROR_ACCESS_DENIED: "DOMAIN_JOIN_ERROR_ACCESS_DENIED",
    DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED",
    DOMAIN_JOIN_ERROR_FILE_NOT_FOUND: "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND",
    DOMAIN_JOIN_ERROR_INVALID_PARAMETER: "DOMAIN_JOIN_ERROR_INVALID_PARAMETER",
    DOMAIN_JOIN_ERROR_LOGON_FAILURE: "DOMAIN_JOIN_ERROR_LOGON_FAILURE",
    DOMAIN_JOIN_ERROR_MORE_DATA: "DOMAIN_JOIN_ERROR_MORE_DATA",
    DOMAIN_JOIN_ERROR_NOT_SUPPORTED: "DOMAIN_JOIN_ERROR_NOT_SUPPORTED",
    DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN: "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN",
    DOMAIN_JOIN_INTERNAL_SERVICE_ERROR: "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR",
    DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME: "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME",
    DOMAIN_JOIN_NERR_PASSWORD_EXPIRED: "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED",
    DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED: "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED",
    FLEET_INSTANCE_PROVISIONING_FAILURE: "FLEET_INSTANCE_PROVISIONING_FAILURE",
    FLEET_STOPPED: "FLEET_STOPPED",
    IAM_SERVICE_ROLE_IS_MISSING: "IAM_SERVICE_ROLE_IS_MISSING",
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION",
    IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION",
    IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION",
    IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION",
    IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION",
    IGW_NOT_ATTACHED: "IGW_NOT_ATTACHED",
    IMAGE_NOT_FOUND: "IMAGE_NOT_FOUND",
    INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR",
    INVALID_SUBNET_CONFIGURATION: "INVALID_SUBNET_CONFIGURATION",
    MACHINE_ROLE_IS_MISSING: "MACHINE_ROLE_IS_MISSING",
    NETWORK_INTERFACE_LIMIT_EXCEEDED: "NETWORK_INTERFACE_LIMIT_EXCEEDED",
    SECURITY_GROUPS_NOT_FOUND: "SECURITY_GROUPS_NOT_FOUND",
    STS_DISABLED_IN_REGION: "STS_DISABLED_IN_REGION",
    SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES: "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES",
    SUBNET_NOT_FOUND: "SUBNET_NOT_FOUND",
};
export const AppBlockBuilderPlatformType = {
    WINDOWS_SERVER_2019: "WINDOWS_SERVER_2019",
};
export const AppBlockBuilderState = {
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const AppBlockBuilderStateChangeReasonCode = {
    INTERNAL_ERROR: "INTERNAL_ERROR",
};
export const AppBlockBuilderAttribute = {
    ACCESS_ENDPOINTS: "ACCESS_ENDPOINTS",
    IAM_ROLE_ARN: "IAM_ROLE_ARN",
    VPC_CONFIGURATION_SECURITY_GROUP_IDS: "VPC_CONFIGURATION_SECURITY_GROUP_IDS",
};
export const PlatformType = {
    AMAZON_LINUX2: "AMAZON_LINUX2",
    WINDOWS: "WINDOWS",
    WINDOWS_SERVER_2016: "WINDOWS_SERVER_2016",
    WINDOWS_SERVER_2019: "WINDOWS_SERVER_2019",
    WINDOWS_SERVER_2022: "WINDOWS_SERVER_2022",
};
export const ApplicationAttribute = {
    LAUNCH_PARAMETERS: "LAUNCH_PARAMETERS",
    WORKING_DIRECTORY: "WORKING_DIRECTORY",
};
export const AppVisibility = {
    ALL: "ALL",
    ASSOCIATED: "ASSOCIATED",
};
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidParameterCombinationException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterCombinationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterCombinationException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class OperationNotPermittedException extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationNotPermittedException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationNotPermittedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotPermittedException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class EntitlementNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "EntitlementNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EntitlementNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntitlementNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class IncompatibleImageException extends __BaseException {
    constructor(opts) {
        super({
            name: "IncompatibleImageException",
            $fault: "client",
            ...opts,
        });
        this.name = "IncompatibleImageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatibleImageException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidAccountStatusException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidAccountStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidAccountStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAccountStatusException.prototype);
        this.Message = opts.Message;
    }
}
export const AuthenticationType = {
    API: "API",
    AWS_AD: "AWS_AD",
    SAML: "SAML",
    USERPOOL: "USERPOOL",
};
export const UserStackAssociationErrorCode = {
    DIRECTORY_NOT_FOUND: "DIRECTORY_NOT_FOUND",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    STACK_NOT_FOUND: "STACK_NOT_FOUND",
    USER_NAME_NOT_FOUND: "USER_NAME_NOT_FOUND",
};
export const CertificateBasedAuthStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    ENABLED_NO_DIRECTORY_LOGIN_FALLBACK: "ENABLED_NO_DIRECTORY_LOGIN_FALLBACK",
};
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotAvailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotAvailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotAvailableException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRoleException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRoleException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRoleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRoleException.prototype);
        this.Message = opts.Message;
    }
}
export class RequestLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class EntitlementAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "EntitlementAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "EntitlementAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntitlementAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export const FleetType = {
    ALWAYS_ON: "ALWAYS_ON",
    ELASTIC: "ELASTIC",
    ON_DEMAND: "ON_DEMAND",
};
export const StreamView = {
    APP: "APP",
    DESKTOP: "DESKTOP",
};
export const FleetState = {
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const ImageBuilderState = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    PENDING: "PENDING",
    PENDING_QUALIFICATION: "PENDING_QUALIFICATION",
    REBOOTING: "REBOOTING",
    RUNNING: "RUNNING",
    SNAPSHOTTING: "SNAPSHOTTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    UPDATING: "UPDATING",
    UPDATING_AGENT: "UPDATING_AGENT",
};
export const ImageBuilderStateChangeReasonCode = {
    IMAGE_UNAVAILABLE: "IMAGE_UNAVAILABLE",
    INTERNAL_ERROR: "INTERNAL_ERROR",
};
export const StorageConnectorType = {
    GOOGLE_DRIVE: "GOOGLE_DRIVE",
    HOMEFOLDERS: "HOMEFOLDERS",
    ONE_DRIVE: "ONE_DRIVE",
};
export const PreferredProtocol = {
    TCP: "TCP",
    UDP: "UDP",
};
export const Permission = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const StackErrorCode = {
    INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR",
    STORAGE_CONNECTOR_ERROR: "STORAGE_CONNECTOR_ERROR",
};
export const ImageState = {
    AVAILABLE: "AVAILABLE",
    COPYING: "COPYING",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    IMPORTING: "IMPORTING",
    PENDING: "PENDING",
};
export const ImageStateChangeReasonCode = {
    IMAGE_BUILDER_NOT_AVAILABLE: "IMAGE_BUILDER_NOT_AVAILABLE",
    IMAGE_COPY_FAILURE: "IMAGE_COPY_FAILURE",
    INTERNAL_ERROR: "INTERNAL_ERROR",
};
export const VisibilityType = {
    PRIVATE: "PRIVATE",
    PUBLIC: "PUBLIC",
    SHARED: "SHARED",
};
export const UsageReportSchedule = {
    DAILY: "DAILY",
};
export const MessageAction = {
    RESEND: "RESEND",
    SUPPRESS: "SUPPRESS",
};
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
export const SessionConnectionState = {
    CONNECTED: "CONNECTED",
    NOT_CONNECTED: "NOT_CONNECTED",
};
export const SessionState = {
    ACTIVE: "ACTIVE",
    EXPIRED: "EXPIRED",
    PENDING: "PENDING",
};
export const UsageReportExecutionErrorCode = {
    ACCESS_DENIED: "ACCESS_DENIED",
    INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR",
    RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND",
};
export const FleetAttribute = {
    DOMAIN_JOIN_INFO: "DOMAIN_JOIN_INFO",
    IAM_ROLE_ARN: "IAM_ROLE_ARN",
    MAX_SESSIONS_PER_INSTANCE: "MAX_SESSIONS_PER_INSTANCE",
    SESSION_SCRIPT_S3_LOCATION: "SESSION_SCRIPT_S3_LOCATION",
    USB_DEVICE_FILTER_STRINGS: "USB_DEVICE_FILTER_STRINGS",
    VPC_CONFIGURATION: "VPC_CONFIGURATION",
    VPC_CONFIGURATION_SECURITY_GROUP_IDS: "VPC_CONFIGURATION_SECURITY_GROUP_IDS",
};
export const StackAttribute = {
    ACCESS_ENDPOINTS: "ACCESS_ENDPOINTS",
    EMBED_HOST_DOMAINS: "EMBED_HOST_DOMAINS",
    FEEDBACK_URL: "FEEDBACK_URL",
    IAM_ROLE_ARN: "IAM_ROLE_ARN",
    REDIRECT_URL: "REDIRECT_URL",
    STORAGE_CONNECTORS: "STORAGE_CONNECTORS",
    STORAGE_CONNECTOR_GOOGLE_DRIVE: "STORAGE_CONNECTOR_GOOGLE_DRIVE",
    STORAGE_CONNECTOR_HOMEFOLDERS: "STORAGE_CONNECTOR_HOMEFOLDERS",
    STORAGE_CONNECTOR_ONE_DRIVE: "STORAGE_CONNECTOR_ONE_DRIVE",
    STREAMING_EXPERIENCE_SETTINGS: "STREAMING_EXPERIENCE_SETTINGS",
    THEME_NAME: "THEME_NAME",
    USER_SETTINGS: "USER_SETTINGS",
};
export const UserStackAssociationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
});
export const BatchAssociateUserStackRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserStackAssociations && {
        UserStackAssociations: obj.UserStackAssociations.map((item) => UserStackAssociationFilterSensitiveLog(item)),
    }),
});
export const UserStackAssociationErrorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserStackAssociation && {
        UserStackAssociation: UserStackAssociationFilterSensitiveLog(obj.UserStackAssociation),
    }),
});
export const BatchAssociateUserStackResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.errors && { errors: obj.errors.map((item) => UserStackAssociationErrorFilterSensitiveLog(item)) }),
});
export const BatchDisassociateUserStackRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserStackAssociations && {
        UserStackAssociations: obj.UserStackAssociations.map((item) => UserStackAssociationFilterSensitiveLog(item)),
    }),
});
export const BatchDisassociateUserStackResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.errors && { errors: obj.errors.map((item) => UserStackAssociationErrorFilterSensitiveLog(item)) }),
});
export const ServiceAccountCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccountName && { AccountName: SENSITIVE_STRING }),
    ...(obj.AccountPassword && { AccountPassword: SENSITIVE_STRING }),
});
export const CreateDirectoryConfigRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServiceAccountCredentials && {
        ServiceAccountCredentials: ServiceAccountCredentialsFilterSensitiveLog(obj.ServiceAccountCredentials),
    }),
});
export const DirectoryConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServiceAccountCredentials && {
        ServiceAccountCredentials: ServiceAccountCredentialsFilterSensitiveLog(obj.ServiceAccountCredentials),
    }),
});
export const CreateDirectoryConfigResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DirectoryConfig && { DirectoryConfig: DirectoryConfigFilterSensitiveLog(obj.DirectoryConfig) }),
});
export const CreateUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
    ...(obj.FirstName && { FirstName: SENSITIVE_STRING }),
    ...(obj.LastName && { LastName: SENSITIVE_STRING }),
});
export const DeleteUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
});
export const DescribeDirectoryConfigsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DirectoryConfigs && {
        DirectoryConfigs: obj.DirectoryConfigs.map((item) => DirectoryConfigFilterSensitiveLog(item)),
    }),
});
export const UserFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
    ...(obj.FirstName && { FirstName: SENSITIVE_STRING }),
    ...(obj.LastName && { LastName: SENSITIVE_STRING }),
});
export const DescribeUsersResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserFilterSensitiveLog(item)) }),
});
export const DescribeUserStackAssociationsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
});
export const DescribeUserStackAssociationsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserStackAssociations && {
        UserStackAssociations: obj.UserStackAssociations.map((item) => UserStackAssociationFilterSensitiveLog(item)),
    }),
});
export const DisableUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
});
export const EnableUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
});
export const UpdateDirectoryConfigRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ServiceAccountCredentials && {
        ServiceAccountCredentials: ServiceAccountCredentialsFilterSensitiveLog(obj.ServiceAccountCredentials),
    }),
});
export const UpdateDirectoryConfigResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DirectoryConfig && { DirectoryConfig: DirectoryConfigFilterSensitiveLog(obj.DirectoryConfig) }),
});
