import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AppStreamServiceException as __BaseException } from "./AppStreamServiceException";
export declare const AccessEndpointType: {
  readonly STREAMING: "STREAMING";
};
export type AccessEndpointType =
  (typeof AccessEndpointType)[keyof typeof AccessEndpointType];
export interface AccessEndpoint {
  EndpointType: AccessEndpointType | undefined;
  VpceId?: string;
}
export declare const Action: {
  readonly CLIPBOARD_COPY_FROM_LOCAL_DEVICE: "CLIPBOARD_COPY_FROM_LOCAL_DEVICE";
  readonly CLIPBOARD_COPY_TO_LOCAL_DEVICE: "CLIPBOARD_COPY_TO_LOCAL_DEVICE";
  readonly DOMAIN_PASSWORD_SIGNIN: "DOMAIN_PASSWORD_SIGNIN";
  readonly DOMAIN_SMART_CARD_SIGNIN: "DOMAIN_SMART_CARD_SIGNIN";
  readonly FILE_DOWNLOAD: "FILE_DOWNLOAD";
  readonly FILE_UPLOAD: "FILE_UPLOAD";
  readonly PRINTING_TO_LOCAL_DEVICE: "PRINTING_TO_LOCAL_DEVICE";
};
export type Action = (typeof Action)[keyof typeof Action];
export interface ErrorDetails {
  ErrorCode?: string;
  ErrorMessage?: string;
}
export declare const PackagingType: {
  readonly APPSTREAM2: "APPSTREAM2";
  readonly CUSTOM: "CUSTOM";
};
export type PackagingType = (typeof PackagingType)[keyof typeof PackagingType];
export interface S3Location {
  S3Bucket: string | undefined;
  S3Key?: string;
}
export interface ScriptDetails {
  ScriptS3Location: S3Location | undefined;
  ExecutablePath: string | undefined;
  ExecutableParameters?: string;
  TimeoutInSeconds: number | undefined;
}
export declare const AppBlockState: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type AppBlockState = (typeof AppBlockState)[keyof typeof AppBlockState];
export interface AppBlock {
  Name: string | undefined;
  Arn: string | undefined;
  Description?: string;
  DisplayName?: string;
  SourceS3Location?: S3Location;
  SetupScriptDetails?: ScriptDetails;
  CreatedTime?: Date;
  PostSetupScriptDetails?: ScriptDetails;
  PackagingType?: PackagingType;
  State?: AppBlockState;
  AppBlockErrors?: ErrorDetails[];
}
export declare const FleetErrorCode: {
  readonly DOMAIN_JOIN_ERROR_ACCESS_DENIED: "DOMAIN_JOIN_ERROR_ACCESS_DENIED";
  readonly DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: "DOMAIN_JOIN_ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED";
  readonly DOMAIN_JOIN_ERROR_FILE_NOT_FOUND: "DOMAIN_JOIN_ERROR_FILE_NOT_FOUND";
  readonly DOMAIN_JOIN_ERROR_INVALID_PARAMETER: "DOMAIN_JOIN_ERROR_INVALID_PARAMETER";
  readonly DOMAIN_JOIN_ERROR_LOGON_FAILURE: "DOMAIN_JOIN_ERROR_LOGON_FAILURE";
  readonly DOMAIN_JOIN_ERROR_MORE_DATA: "DOMAIN_JOIN_ERROR_MORE_DATA";
  readonly DOMAIN_JOIN_ERROR_NOT_SUPPORTED: "DOMAIN_JOIN_ERROR_NOT_SUPPORTED";
  readonly DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN: "DOMAIN_JOIN_ERROR_NO_SUCH_DOMAIN";
  readonly DOMAIN_JOIN_INTERNAL_SERVICE_ERROR: "DOMAIN_JOIN_INTERNAL_SERVICE_ERROR";
  readonly DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME: "DOMAIN_JOIN_NERR_INVALID_WORKGROUP_NAME";
  readonly DOMAIN_JOIN_NERR_PASSWORD_EXPIRED: "DOMAIN_JOIN_NERR_PASSWORD_EXPIRED";
  readonly DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED: "DOMAIN_JOIN_NERR_WORKSTATION_NOT_STARTED";
  readonly FLEET_INSTANCE_PROVISIONING_FAILURE: "FLEET_INSTANCE_PROVISIONING_FAILURE";
  readonly FLEET_STOPPED: "FLEET_STOPPED";
  readonly IAM_SERVICE_ROLE_IS_MISSING: "IAM_SERVICE_ROLE_IS_MISSING";
  readonly IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SECURITY_GROUPS_ACTION";
  readonly IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION: "IAM_SERVICE_ROLE_MISSING_DESCRIBE_SUBNET_ACTION";
  readonly IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_CREATE_ACTION";
  readonly IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DELETE_ACTION";
  readonly IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION: "IAM_SERVICE_ROLE_MISSING_ENI_DESCRIBE_ACTION";
  readonly IGW_NOT_ATTACHED: "IGW_NOT_ATTACHED";
  readonly IMAGE_NOT_FOUND: "IMAGE_NOT_FOUND";
  readonly INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR";
  readonly INVALID_SUBNET_CONFIGURATION: "INVALID_SUBNET_CONFIGURATION";
  readonly MACHINE_ROLE_IS_MISSING: "MACHINE_ROLE_IS_MISSING";
  readonly NETWORK_INTERFACE_LIMIT_EXCEEDED: "NETWORK_INTERFACE_LIMIT_EXCEEDED";
  readonly SECURITY_GROUPS_NOT_FOUND: "SECURITY_GROUPS_NOT_FOUND";
  readonly STS_DISABLED_IN_REGION: "STS_DISABLED_IN_REGION";
  readonly SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES: "SUBNET_HAS_INSUFFICIENT_IP_ADDRESSES";
  readonly SUBNET_NOT_FOUND: "SUBNET_NOT_FOUND";
};
export type FleetErrorCode =
  (typeof FleetErrorCode)[keyof typeof FleetErrorCode];
export interface ResourceError {
  ErrorCode?: FleetErrorCode;
  ErrorMessage?: string;
  ErrorTimestamp?: Date;
}
export declare const AppBlockBuilderPlatformType: {
  readonly WINDOWS_SERVER_2019: "WINDOWS_SERVER_2019";
};
export type AppBlockBuilderPlatformType =
  (typeof AppBlockBuilderPlatformType)[keyof typeof AppBlockBuilderPlatformType];
export declare const AppBlockBuilderState: {
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type AppBlockBuilderState =
  (typeof AppBlockBuilderState)[keyof typeof AppBlockBuilderState];
export declare const AppBlockBuilderStateChangeReasonCode: {
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
};
export type AppBlockBuilderStateChangeReasonCode =
  (typeof AppBlockBuilderStateChangeReasonCode)[keyof typeof AppBlockBuilderStateChangeReasonCode];
export interface AppBlockBuilderStateChangeReason {
  Code?: AppBlockBuilderStateChangeReasonCode;
  Message?: string;
}
export interface VpcConfig {
  SubnetIds?: string[];
  SecurityGroupIds?: string[];
}
export interface AppBlockBuilder {
  Arn: string | undefined;
  Name: string | undefined;
  DisplayName?: string;
  Description?: string;
  Platform: AppBlockBuilderPlatformType | undefined;
  InstanceType: string | undefined;
  EnableDefaultInternetAccess?: boolean;
  IamRoleArn?: string;
  VpcConfig: VpcConfig | undefined;
  State: AppBlockBuilderState | undefined;
  CreatedTime?: Date;
  AppBlockBuilderErrors?: ResourceError[];
  StateChangeReason?: AppBlockBuilderStateChangeReason;
  AccessEndpoints?: AccessEndpoint[];
}
export interface AppBlockBuilderAppBlockAssociation {
  AppBlockArn: string | undefined;
  AppBlockBuilderName: string | undefined;
}
export declare const AppBlockBuilderAttribute: {
  readonly ACCESS_ENDPOINTS: "ACCESS_ENDPOINTS";
  readonly IAM_ROLE_ARN: "IAM_ROLE_ARN";
  readonly VPC_CONFIGURATION_SECURITY_GROUP_IDS: "VPC_CONFIGURATION_SECURITY_GROUP_IDS";
};
export type AppBlockBuilderAttribute =
  (typeof AppBlockBuilderAttribute)[keyof typeof AppBlockBuilderAttribute];
export declare const PlatformType: {
  readonly AMAZON_LINUX2: "AMAZON_LINUX2";
  readonly WINDOWS: "WINDOWS";
  readonly WINDOWS_SERVER_2016: "WINDOWS_SERVER_2016";
  readonly WINDOWS_SERVER_2019: "WINDOWS_SERVER_2019";
  readonly WINDOWS_SERVER_2022: "WINDOWS_SERVER_2022";
};
export type PlatformType = (typeof PlatformType)[keyof typeof PlatformType];
export interface Application {
  Name?: string;
  DisplayName?: string;
  IconURL?: string;
  LaunchPath?: string;
  LaunchParameters?: string;
  Enabled?: boolean;
  Metadata?: Record<string, string>;
  WorkingDirectory?: string;
  Description?: string;
  Arn?: string;
  AppBlockArn?: string;
  IconS3Location?: S3Location;
  Platforms?: PlatformType[];
  InstanceFamilies?: string[];
  CreatedTime?: Date;
}
export declare const ApplicationAttribute: {
  readonly LAUNCH_PARAMETERS: "LAUNCH_PARAMETERS";
  readonly WORKING_DIRECTORY: "WORKING_DIRECTORY";
};
export type ApplicationAttribute =
  (typeof ApplicationAttribute)[keyof typeof ApplicationAttribute];
export interface ApplicationFleetAssociation {
  FleetName: string | undefined;
  ApplicationArn: string | undefined;
}
export interface ApplicationSettings {
  Enabled: boolean | undefined;
  SettingsGroup?: string;
}
export interface ApplicationSettingsResponse {
  Enabled?: boolean;
  SettingsGroup?: string;
  S3BucketName?: string;
}
export declare const AppVisibility: {
  readonly ALL: "ALL";
  readonly ASSOCIATED: "ASSOCIATED";
};
export type AppVisibility = (typeof AppVisibility)[keyof typeof AppVisibility];
export interface AssociateAppBlockBuilderAppBlockRequest {
  AppBlockArn: string | undefined;
  AppBlockBuilderName: string | undefined;
}
export interface AssociateAppBlockBuilderAppBlockResult {
  AppBlockBuilderAppBlockAssociation?: AppBlockBuilderAppBlockAssociation;
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare class InvalidParameterCombinationException extends __BaseException {
  readonly name: "InvalidParameterCombinationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      InvalidParameterCombinationException,
      __BaseException
    >
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class OperationNotPermittedException extends __BaseException {
  readonly name: "OperationNotPermittedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<OperationNotPermittedException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface AssociateApplicationFleetRequest {
  FleetName: string | undefined;
  ApplicationArn: string | undefined;
}
export interface AssociateApplicationFleetResult {
  ApplicationFleetAssociation?: ApplicationFleetAssociation;
}
export interface AssociateApplicationToEntitlementRequest {
  StackName: string | undefined;
  EntitlementName: string | undefined;
  ApplicationIdentifier: string | undefined;
}
export interface AssociateApplicationToEntitlementResult {}
export declare class EntitlementNotFoundException extends __BaseException {
  readonly name: "EntitlementNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<EntitlementNotFoundException, __BaseException>
  );
}
export interface AssociateFleetRequest {
  FleetName: string | undefined;
  StackName: string | undefined;
}
export interface AssociateFleetResult {}
export declare class IncompatibleImageException extends __BaseException {
  readonly name: "IncompatibleImageException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IncompatibleImageException, __BaseException>
  );
}
export declare class InvalidAccountStatusException extends __BaseException {
  readonly name: "InvalidAccountStatusException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidAccountStatusException, __BaseException>
  );
}
export declare const AuthenticationType: {
  readonly API: "API";
  readonly AWS_AD: "AWS_AD";
  readonly SAML: "SAML";
  readonly USERPOOL: "USERPOOL";
};
export type AuthenticationType =
  (typeof AuthenticationType)[keyof typeof AuthenticationType];
export interface UserStackAssociation {
  StackName: string | undefined;
  UserName: string | undefined;
  AuthenticationType: AuthenticationType | undefined;
  SendEmailNotification?: boolean;
}
export interface BatchAssociateUserStackRequest {
  UserStackAssociations: UserStackAssociation[] | undefined;
}
export declare const UserStackAssociationErrorCode: {
  readonly DIRECTORY_NOT_FOUND: "DIRECTORY_NOT_FOUND";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly STACK_NOT_FOUND: "STACK_NOT_FOUND";
  readonly USER_NAME_NOT_FOUND: "USER_NAME_NOT_FOUND";
};
export type UserStackAssociationErrorCode =
  (typeof UserStackAssociationErrorCode)[keyof typeof UserStackAssociationErrorCode];
export interface UserStackAssociationError {
  UserStackAssociation?: UserStackAssociation;
  ErrorCode?: UserStackAssociationErrorCode;
  ErrorMessage?: string;
}
export interface BatchAssociateUserStackResult {
  errors?: UserStackAssociationError[];
}
export interface BatchDisassociateUserStackRequest {
  UserStackAssociations: UserStackAssociation[] | undefined;
}
export interface BatchDisassociateUserStackResult {
  errors?: UserStackAssociationError[];
}
export declare const CertificateBasedAuthStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly ENABLED_NO_DIRECTORY_LOGIN_FALLBACK: "ENABLED_NO_DIRECTORY_LOGIN_FALLBACK";
};
export type CertificateBasedAuthStatus =
  (typeof CertificateBasedAuthStatus)[keyof typeof CertificateBasedAuthStatus];
export interface CertificateBasedAuthProperties {
  Status?: CertificateBasedAuthStatus;
  CertificateAuthorityArn?: string;
}
export interface ComputeCapacity {
  DesiredInstances?: number;
  DesiredSessions?: number;
}
export interface ComputeCapacityStatus {
  Desired: number | undefined;
  Running?: number;
  InUse?: number;
  Available?: number;
  DesiredUserSessions?: number;
  AvailableUserSessions?: number;
  ActiveUserSessions?: number;
  ActualUserSessions?: number;
}
export interface CopyImageRequest {
  SourceImageName: string | undefined;
  DestinationImageName: string | undefined;
  DestinationRegion: string | undefined;
  DestinationImageDescription?: string;
}
export interface CopyImageResponse {
  DestinationImageName?: string;
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare class ResourceNotAvailableException extends __BaseException {
  readonly name: "ResourceNotAvailableException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotAvailableException, __BaseException>
  );
}
export interface CreateAppBlockRequest {
  Name: string | undefined;
  Description?: string;
  DisplayName?: string;
  SourceS3Location: S3Location | undefined;
  SetupScriptDetails?: ScriptDetails;
  Tags?: Record<string, string>;
  PostSetupScriptDetails?: ScriptDetails;
  PackagingType?: PackagingType;
}
export interface CreateAppBlockResult {
  AppBlock?: AppBlock;
}
export interface CreateAppBlockBuilderRequest {
  Name: string | undefined;
  Description?: string;
  DisplayName?: string;
  Tags?: Record<string, string>;
  Platform: AppBlockBuilderPlatformType | undefined;
  InstanceType: string | undefined;
  VpcConfig: VpcConfig | undefined;
  EnableDefaultInternetAccess?: boolean;
  IamRoleArn?: string;
  AccessEndpoints?: AccessEndpoint[];
}
export interface CreateAppBlockBuilderResult {
  AppBlockBuilder?: AppBlockBuilder;
}
export declare class InvalidRoleException extends __BaseException {
  readonly name: "InvalidRoleException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRoleException, __BaseException>
  );
}
export declare class RequestLimitExceededException extends __BaseException {
  readonly name: "RequestLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<RequestLimitExceededException, __BaseException>
  );
}
export interface CreateAppBlockBuilderStreamingURLRequest {
  AppBlockBuilderName: string | undefined;
  Validity?: number;
}
export interface CreateAppBlockBuilderStreamingURLResult {
  StreamingURL?: string;
  Expires?: Date;
}
export interface CreateApplicationRequest {
  Name: string | undefined;
  DisplayName?: string;
  Description?: string;
  IconS3Location: S3Location | undefined;
  LaunchPath: string | undefined;
  WorkingDirectory?: string;
  LaunchParameters?: string;
  Platforms: PlatformType[] | undefined;
  InstanceFamilies: string[] | undefined;
  AppBlockArn: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateApplicationResult {
  Application?: Application;
}
export interface ServiceAccountCredentials {
  AccountName: string | undefined;
  AccountPassword: string | undefined;
}
export interface CreateDirectoryConfigRequest {
  DirectoryName: string | undefined;
  OrganizationalUnitDistinguishedNames: string[] | undefined;
  ServiceAccountCredentials?: ServiceAccountCredentials;
  CertificateBasedAuthProperties?: CertificateBasedAuthProperties;
}
export interface DirectoryConfig {
  DirectoryName: string | undefined;
  OrganizationalUnitDistinguishedNames?: string[];
  ServiceAccountCredentials?: ServiceAccountCredentials;
  CreatedTime?: Date;
  CertificateBasedAuthProperties?: CertificateBasedAuthProperties;
}
export interface CreateDirectoryConfigResult {
  DirectoryConfig?: DirectoryConfig;
}
export interface EntitlementAttribute {
  Name: string | undefined;
  Value: string | undefined;
}
export interface CreateEntitlementRequest {
  Name: string | undefined;
  StackName: string | undefined;
  Description?: string;
  AppVisibility: AppVisibility | undefined;
  Attributes: EntitlementAttribute[] | undefined;
}
export interface Entitlement {
  Name: string | undefined;
  StackName: string | undefined;
  Description?: string;
  AppVisibility: AppVisibility | undefined;
  Attributes: EntitlementAttribute[] | undefined;
  CreatedTime?: Date;
  LastModifiedTime?: Date;
}
export interface CreateEntitlementResult {
  Entitlement?: Entitlement;
}
export declare class EntitlementAlreadyExistsException extends __BaseException {
  readonly name: "EntitlementAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      EntitlementAlreadyExistsException,
      __BaseException
    >
  );
}
export interface DomainJoinInfo {
  DirectoryName?: string;
  OrganizationalUnitDistinguishedName?: string;
}
export declare const FleetType: {
  readonly ALWAYS_ON: "ALWAYS_ON";
  readonly ELASTIC: "ELASTIC";
  readonly ON_DEMAND: "ON_DEMAND";
};
export type FleetType = (typeof FleetType)[keyof typeof FleetType];
export declare const StreamView: {
  readonly APP: "APP";
  readonly DESKTOP: "DESKTOP";
};
export type StreamView = (typeof StreamView)[keyof typeof StreamView];
export interface CreateFleetRequest {
  Name: string | undefined;
  ImageName?: string;
  ImageArn?: string;
  InstanceType: string | undefined;
  FleetType?: FleetType;
  ComputeCapacity?: ComputeCapacity;
  VpcConfig?: VpcConfig;
  MaxUserDurationInSeconds?: number;
  DisconnectTimeoutInSeconds?: number;
  Description?: string;
  DisplayName?: string;
  EnableDefaultInternetAccess?: boolean;
  DomainJoinInfo?: DomainJoinInfo;
  Tags?: Record<string, string>;
  IdleDisconnectTimeoutInSeconds?: number;
  IamRoleArn?: string;
  StreamView?: StreamView;
  Platform?: PlatformType;
  MaxConcurrentSessions?: number;
  UsbDeviceFilterStrings?: string[];
  SessionScriptS3Location?: S3Location;
  MaxSessionsPerInstance?: number;
}
export interface FleetError {
  ErrorCode?: FleetErrorCode;
  ErrorMessage?: string;
}
export declare const FleetState: {
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type FleetState = (typeof FleetState)[keyof typeof FleetState];
export interface Fleet {
  Arn: string | undefined;
  Name: string | undefined;
  DisplayName?: string;
  Description?: string;
  ImageName?: string;
  ImageArn?: string;
  InstanceType: string | undefined;
  FleetType?: FleetType;
  ComputeCapacityStatus: ComputeCapacityStatus | undefined;
  MaxUserDurationInSeconds?: number;
  DisconnectTimeoutInSeconds?: number;
  State: FleetState | undefined;
  VpcConfig?: VpcConfig;
  CreatedTime?: Date;
  FleetErrors?: FleetError[];
  EnableDefaultInternetAccess?: boolean;
  DomainJoinInfo?: DomainJoinInfo;
  IdleDisconnectTimeoutInSeconds?: number;
  IamRoleArn?: string;
  StreamView?: StreamView;
  Platform?: PlatformType;
  MaxConcurrentSessions?: number;
  UsbDeviceFilterStrings?: string[];
  SessionScriptS3Location?: S3Location;
  MaxSessionsPerInstance?: number;
}
export interface CreateFleetResult {
  Fleet?: Fleet;
}
export interface CreateImageBuilderRequest {
  Name: string | undefined;
  ImageName?: string;
  ImageArn?: string;
  InstanceType: string | undefined;
  Description?: string;
  DisplayName?: string;
  VpcConfig?: VpcConfig;
  IamRoleArn?: string;
  EnableDefaultInternetAccess?: boolean;
  DomainJoinInfo?: DomainJoinInfo;
  AppstreamAgentVersion?: string;
  Tags?: Record<string, string>;
  AccessEndpoints?: AccessEndpoint[];
}
export interface NetworkAccessConfiguration {
  EniPrivateIpAddress?: string;
  EniId?: string;
}
export declare const ImageBuilderState: {
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly PENDING_QUALIFICATION: "PENDING_QUALIFICATION";
  readonly REBOOTING: "REBOOTING";
  readonly RUNNING: "RUNNING";
  readonly SNAPSHOTTING: "SNAPSHOTTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly UPDATING: "UPDATING";
  readonly UPDATING_AGENT: "UPDATING_AGENT";
};
export type ImageBuilderState =
  (typeof ImageBuilderState)[keyof typeof ImageBuilderState];
export declare const ImageBuilderStateChangeReasonCode: {
  readonly IMAGE_UNAVAILABLE: "IMAGE_UNAVAILABLE";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
};
export type ImageBuilderStateChangeReasonCode =
  (typeof ImageBuilderStateChangeReasonCode)[keyof typeof ImageBuilderStateChangeReasonCode];
export interface ImageBuilderStateChangeReason {
  Code?: ImageBuilderStateChangeReasonCode;
  Message?: string;
}
export interface ImageBuilder {
  Name: string | undefined;
  Arn?: string;
  ImageArn?: string;
  Description?: string;
  DisplayName?: string;
  VpcConfig?: VpcConfig;
  InstanceType?: string;
  Platform?: PlatformType;
  IamRoleArn?: string;
  State?: ImageBuilderState;
  StateChangeReason?: ImageBuilderStateChangeReason;
  CreatedTime?: Date;
  EnableDefaultInternetAccess?: boolean;
  DomainJoinInfo?: DomainJoinInfo;
  NetworkAccessConfiguration?: NetworkAccessConfiguration;
  ImageBuilderErrors?: ResourceError[];
  AppstreamAgentVersion?: string;
  AccessEndpoints?: AccessEndpoint[];
}
export interface CreateImageBuilderResult {
  ImageBuilder?: ImageBuilder;
}
export interface CreateImageBuilderStreamingURLRequest {
  Name: string | undefined;
  Validity?: number;
}
export interface CreateImageBuilderStreamingURLResult {
  StreamingURL?: string;
  Expires?: Date;
}
export declare const StorageConnectorType: {
  readonly GOOGLE_DRIVE: "GOOGLE_DRIVE";
  readonly HOMEFOLDERS: "HOMEFOLDERS";
  readonly ONE_DRIVE: "ONE_DRIVE";
};
export type StorageConnectorType =
  (typeof StorageConnectorType)[keyof typeof StorageConnectorType];
export interface StorageConnector {
  ConnectorType: StorageConnectorType | undefined;
  ResourceIdentifier?: string;
  Domains?: string[];
}
export declare const PreferredProtocol: {
  readonly TCP: "TCP";
  readonly UDP: "UDP";
};
export type PreferredProtocol =
  (typeof PreferredProtocol)[keyof typeof PreferredProtocol];
export interface StreamingExperienceSettings {
  PreferredProtocol?: PreferredProtocol;
}
export declare const Permission: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Permission = (typeof Permission)[keyof typeof Permission];
export interface UserSetting {
  Action: Action | undefined;
  Permission: Permission | undefined;
  MaximumLength?: number;
}
export interface CreateStackRequest {
  Name: string | undefined;
  Description?: string;
  DisplayName?: string;
  StorageConnectors?: StorageConnector[];
  RedirectURL?: string;
  FeedbackURL?: string;
  UserSettings?: UserSetting[];
  ApplicationSettings?: ApplicationSettings;
  Tags?: Record<string, string>;
  AccessEndpoints?: AccessEndpoint[];
  EmbedHostDomains?: string[];
  StreamingExperienceSettings?: StreamingExperienceSettings;
}
export declare const StackErrorCode: {
  readonly INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR";
  readonly STORAGE_CONNECTOR_ERROR: "STORAGE_CONNECTOR_ERROR";
};
export type StackErrorCode =
  (typeof StackErrorCode)[keyof typeof StackErrorCode];
export interface StackError {
  ErrorCode?: StackErrorCode;
  ErrorMessage?: string;
}
export interface Stack {
  Arn?: string;
  Name: string | undefined;
  Description?: string;
  DisplayName?: string;
  CreatedTime?: Date;
  StorageConnectors?: StorageConnector[];
  RedirectURL?: string;
  FeedbackURL?: string;
  StackErrors?: StackError[];
  UserSettings?: UserSetting[];
  ApplicationSettings?: ApplicationSettingsResponse;
  AccessEndpoints?: AccessEndpoint[];
  EmbedHostDomains?: string[];
  StreamingExperienceSettings?: StreamingExperienceSettings;
}
export interface CreateStackResult {
  Stack?: Stack;
}
export interface CreateStreamingURLRequest {
  StackName: string | undefined;
  FleetName: string | undefined;
  UserId: string | undefined;
  ApplicationId?: string;
  Validity?: number;
  SessionContext?: string;
}
export interface CreateStreamingURLResult {
  StreamingURL?: string;
  Expires?: Date;
}
export interface CreateUpdatedImageRequest {
  existingImageName: string | undefined;
  newImageName: string | undefined;
  newImageDescription?: string;
  newImageDisplayName?: string;
  newImageTags?: Record<string, string>;
  dryRun?: boolean;
}
export interface ImagePermissions {
  allowFleet?: boolean;
  allowImageBuilder?: boolean;
}
export declare const ImageState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly COPYING: "COPYING";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly IMPORTING: "IMPORTING";
  readonly PENDING: "PENDING";
};
export type ImageState = (typeof ImageState)[keyof typeof ImageState];
export declare const ImageStateChangeReasonCode: {
  readonly IMAGE_BUILDER_NOT_AVAILABLE: "IMAGE_BUILDER_NOT_AVAILABLE";
  readonly IMAGE_COPY_FAILURE: "IMAGE_COPY_FAILURE";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
};
export type ImageStateChangeReasonCode =
  (typeof ImageStateChangeReasonCode)[keyof typeof ImageStateChangeReasonCode];
export interface ImageStateChangeReason {
  Code?: ImageStateChangeReasonCode;
  Message?: string;
}
export declare const VisibilityType: {
  readonly PRIVATE: "PRIVATE";
  readonly PUBLIC: "PUBLIC";
  readonly SHARED: "SHARED";
};
export type VisibilityType =
  (typeof VisibilityType)[keyof typeof VisibilityType];
export interface Image {
  Name: string | undefined;
  Arn?: string;
  BaseImageArn?: string;
  DisplayName?: string;
  State?: ImageState;
  Visibility?: VisibilityType;
  ImageBuilderSupported?: boolean;
  ImageBuilderName?: string;
  Platform?: PlatformType;
  Description?: string;
  StateChangeReason?: ImageStateChangeReason;
  Applications?: Application[];
  CreatedTime?: Date;
  PublicBaseImageReleasedDate?: Date;
  AppstreamAgentVersion?: string;
  ImagePermissions?: ImagePermissions;
  ImageErrors?: ResourceError[];
}
export interface CreateUpdatedImageResult {
  image?: Image;
  canUpdateImage?: boolean;
}
export interface CreateUsageReportSubscriptionRequest {}
export declare const UsageReportSchedule: {
  readonly DAILY: "DAILY";
};
export type UsageReportSchedule =
  (typeof UsageReportSchedule)[keyof typeof UsageReportSchedule];
export interface CreateUsageReportSubscriptionResult {
  S3BucketName?: string;
  Schedule?: UsageReportSchedule;
}
export declare const MessageAction: {
  readonly RESEND: "RESEND";
  readonly SUPPRESS: "SUPPRESS";
};
export type MessageAction = (typeof MessageAction)[keyof typeof MessageAction];
export interface CreateUserRequest {
  UserName: string | undefined;
  MessageAction?: MessageAction;
  FirstName?: string;
  LastName?: string;
  AuthenticationType: AuthenticationType | undefined;
}
export interface CreateUserResult {}
export interface DeleteAppBlockRequest {
  Name: string | undefined;
}
export interface DeleteAppBlockResult {}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export interface DeleteAppBlockBuilderRequest {
  Name: string | undefined;
}
export interface DeleteAppBlockBuilderResult {}
export interface DeleteApplicationRequest {
  Name: string | undefined;
}
export interface DeleteApplicationResult {}
export interface DeleteDirectoryConfigRequest {
  DirectoryName: string | undefined;
}
export interface DeleteDirectoryConfigResult {}
export interface DeleteEntitlementRequest {
  Name: string | undefined;
  StackName: string | undefined;
}
export interface DeleteEntitlementResult {}
export interface DeleteFleetRequest {
  Name: string | undefined;
}
export interface DeleteFleetResult {}
export interface DeleteImageRequest {
  Name: string | undefined;
}
export interface DeleteImageResult {
  Image?: Image;
}
export interface DeleteImageBuilderRequest {
  Name: string | undefined;
}
export interface DeleteImageBuilderResult {
  ImageBuilder?: ImageBuilder;
}
export interface DeleteImagePermissionsRequest {
  Name: string | undefined;
  SharedAccountId: string | undefined;
}
export interface DeleteImagePermissionsResult {}
export interface DeleteStackRequest {
  Name: string | undefined;
}
export interface DeleteStackResult {}
export interface DeleteUsageReportSubscriptionRequest {}
export interface DeleteUsageReportSubscriptionResult {}
export interface DeleteUserRequest {
  UserName: string | undefined;
  AuthenticationType: AuthenticationType | undefined;
}
export interface DeleteUserResult {}
export interface DescribeAppBlockBuilderAppBlockAssociationsRequest {
  AppBlockArn?: string;
  AppBlockBuilderName?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeAppBlockBuilderAppBlockAssociationsResult {
  AppBlockBuilderAppBlockAssociations?: AppBlockBuilderAppBlockAssociation[];
  NextToken?: string;
}
export interface DescribeAppBlockBuildersRequest {
  Names?: string[];
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeAppBlockBuildersResult {
  AppBlockBuilders?: AppBlockBuilder[];
  NextToken?: string;
}
export interface DescribeAppBlocksRequest {
  Arns?: string[];
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeAppBlocksResult {
  AppBlocks?: AppBlock[];
  NextToken?: string;
}
export interface DescribeApplicationFleetAssociationsRequest {
  FleetName?: string;
  ApplicationArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeApplicationFleetAssociationsResult {
  ApplicationFleetAssociations?: ApplicationFleetAssociation[];
  NextToken?: string;
}
export interface DescribeApplicationsRequest {
  Arns?: string[];
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeApplicationsResult {
  Applications?: Application[];
  NextToken?: string;
}
export interface DescribeDirectoryConfigsRequest {
  DirectoryNames?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeDirectoryConfigsResult {
  DirectoryConfigs?: DirectoryConfig[];
  NextToken?: string;
}
export interface DescribeEntitlementsRequest {
  Name?: string;
  StackName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeEntitlementsResult {
  Entitlements?: Entitlement[];
  NextToken?: string;
}
export interface DescribeFleetsRequest {
  Names?: string[];
  NextToken?: string;
}
export interface DescribeFleetsResult {
  Fleets?: Fleet[];
  NextToken?: string;
}
export interface DescribeImageBuildersRequest {
  Names?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeImageBuildersResult {
  ImageBuilders?: ImageBuilder[];
  NextToken?: string;
}
export interface DescribeImagePermissionsRequest {
  Name: string | undefined;
  MaxResults?: number;
  SharedAwsAccountIds?: string[];
  NextToken?: string;
}
export interface SharedImagePermissions {
  sharedAccountId: string | undefined;
  imagePermissions: ImagePermissions | undefined;
}
export interface DescribeImagePermissionsResult {
  Name?: string;
  SharedImagePermissionsList?: SharedImagePermissions[];
  NextToken?: string;
}
export interface DescribeImagesRequest {
  Names?: string[];
  Arns?: string[];
  Type?: VisibilityType;
  NextToken?: string;
  MaxResults?: number;
}
export interface DescribeImagesResult {
  Images?: Image[];
  NextToken?: string;
}
export interface DescribeSessionsRequest {
  StackName: string | undefined;
  FleetName: string | undefined;
  UserId?: string;
  NextToken?: string;
  Limit?: number;
  AuthenticationType?: AuthenticationType;
  InstanceId?: string;
}
export declare const SessionConnectionState: {
  readonly CONNECTED: "CONNECTED";
  readonly NOT_CONNECTED: "NOT_CONNECTED";
};
export type SessionConnectionState =
  (typeof SessionConnectionState)[keyof typeof SessionConnectionState];
export declare const SessionState: {
  readonly ACTIVE: "ACTIVE";
  readonly EXPIRED: "EXPIRED";
  readonly PENDING: "PENDING";
};
export type SessionState = (typeof SessionState)[keyof typeof SessionState];
export interface Session {
  Id: string | undefined;
  UserId: string | undefined;
  StackName: string | undefined;
  FleetName: string | undefined;
  State: SessionState | undefined;
  ConnectionState?: SessionConnectionState;
  StartTime?: Date;
  MaxExpirationTime?: Date;
  AuthenticationType?: AuthenticationType;
  NetworkAccessConfiguration?: NetworkAccessConfiguration;
  InstanceId?: string;
}
export interface DescribeSessionsResult {
  Sessions?: Session[];
  NextToken?: string;
}
export interface DescribeStacksRequest {
  Names?: string[];
  NextToken?: string;
}
export interface DescribeStacksResult {
  Stacks?: Stack[];
  NextToken?: string;
}
export interface DescribeUsageReportSubscriptionsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export declare const UsageReportExecutionErrorCode: {
  readonly ACCESS_DENIED: "ACCESS_DENIED";
  readonly INTERNAL_SERVICE_ERROR: "INTERNAL_SERVICE_ERROR";
  readonly RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND";
};
export type UsageReportExecutionErrorCode =
  (typeof UsageReportExecutionErrorCode)[keyof typeof UsageReportExecutionErrorCode];
export interface LastReportGenerationExecutionError {
  ErrorCode?: UsageReportExecutionErrorCode;
  ErrorMessage?: string;
}
export interface UsageReportSubscription {
  S3BucketName?: string;
  Schedule?: UsageReportSchedule;
  LastGeneratedReportDate?: Date;
  SubscriptionErrors?: LastReportGenerationExecutionError[];
}
export interface DescribeUsageReportSubscriptionsResult {
  UsageReportSubscriptions?: UsageReportSubscription[];
  NextToken?: string;
}
export interface DescribeUsersRequest {
  AuthenticationType: AuthenticationType | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface User {
  Arn?: string;
  UserName?: string;
  Enabled?: boolean;
  Status?: string;
  FirstName?: string;
  LastName?: string;
  CreatedTime?: Date;
  AuthenticationType: AuthenticationType | undefined;
}
export interface DescribeUsersResult {
  Users?: User[];
  NextToken?: string;
}
export interface DescribeUserStackAssociationsRequest {
  StackName?: string;
  UserName?: string;
  AuthenticationType?: AuthenticationType;
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeUserStackAssociationsResult {
  UserStackAssociations?: UserStackAssociation[];
  NextToken?: string;
}
export interface DisableUserRequest {
  UserName: string | undefined;
  AuthenticationType: AuthenticationType | undefined;
}
export interface DisableUserResult {}
export interface DisassociateAppBlockBuilderAppBlockRequest {
  AppBlockArn: string | undefined;
  AppBlockBuilderName: string | undefined;
}
export interface DisassociateAppBlockBuilderAppBlockResult {}
export interface DisassociateApplicationFleetRequest {
  FleetName: string | undefined;
  ApplicationArn: string | undefined;
}
export interface DisassociateApplicationFleetResult {}
export interface DisassociateApplicationFromEntitlementRequest {
  StackName: string | undefined;
  EntitlementName: string | undefined;
  ApplicationIdentifier: string | undefined;
}
export interface DisassociateApplicationFromEntitlementResult {}
export interface DisassociateFleetRequest {
  FleetName: string | undefined;
  StackName: string | undefined;
}
export interface DisassociateFleetResult {}
export interface EnableUserRequest {
  UserName: string | undefined;
  AuthenticationType: AuthenticationType | undefined;
}
export interface EnableUserResult {}
export interface EntitledApplication {
  ApplicationIdentifier: string | undefined;
}
export interface ExpireSessionRequest {
  SessionId: string | undefined;
}
export interface ExpireSessionResult {}
export declare const FleetAttribute: {
  readonly DOMAIN_JOIN_INFO: "DOMAIN_JOIN_INFO";
  readonly IAM_ROLE_ARN: "IAM_ROLE_ARN";
  readonly MAX_SESSIONS_PER_INSTANCE: "MAX_SESSIONS_PER_INSTANCE";
  readonly SESSION_SCRIPT_S3_LOCATION: "SESSION_SCRIPT_S3_LOCATION";
  readonly USB_DEVICE_FILTER_STRINGS: "USB_DEVICE_FILTER_STRINGS";
  readonly VPC_CONFIGURATION: "VPC_CONFIGURATION";
  readonly VPC_CONFIGURATION_SECURITY_GROUP_IDS: "VPC_CONFIGURATION_SECURITY_GROUP_IDS";
};
export type FleetAttribute =
  (typeof FleetAttribute)[keyof typeof FleetAttribute];
export interface ListAssociatedFleetsRequest {
  StackName: string | undefined;
  NextToken?: string;
}
export interface ListAssociatedFleetsResult {
  Names?: string[];
  NextToken?: string;
}
export interface ListAssociatedStacksRequest {
  FleetName: string | undefined;
  NextToken?: string;
}
export interface ListAssociatedStacksResult {
  Names?: string[];
  NextToken?: string;
}
export interface ListEntitledApplicationsRequest {
  StackName: string | undefined;
  EntitlementName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListEntitledApplicationsResult {
  EntitledApplications?: EntitledApplication[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface StartAppBlockBuilderRequest {
  Name: string | undefined;
}
export interface StartAppBlockBuilderResult {
  AppBlockBuilder?: AppBlockBuilder;
}
export interface StartFleetRequest {
  Name: string | undefined;
}
export interface StartFleetResult {}
export interface StartImageBuilderRequest {
  Name: string | undefined;
  AppstreamAgentVersion?: string;
}
export interface StartImageBuilderResult {
  ImageBuilder?: ImageBuilder;
}
export interface StopAppBlockBuilderRequest {
  Name: string | undefined;
}
export interface StopAppBlockBuilderResult {
  AppBlockBuilder?: AppBlockBuilder;
}
export interface StopFleetRequest {
  Name: string | undefined;
}
export interface StopFleetResult {}
export interface StopImageBuilderRequest {
  Name: string | undefined;
}
export interface StopImageBuilderResult {
  ImageBuilder?: ImageBuilder;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateAppBlockBuilderRequest {
  Name: string | undefined;
  Description?: string;
  DisplayName?: string;
  Platform?: PlatformType;
  InstanceType?: string;
  VpcConfig?: VpcConfig;
  EnableDefaultInternetAccess?: boolean;
  IamRoleArn?: string;
  AccessEndpoints?: AccessEndpoint[];
  AttributesToDelete?: AppBlockBuilderAttribute[];
}
export interface UpdateAppBlockBuilderResult {
  AppBlockBuilder?: AppBlockBuilder;
}
export interface UpdateApplicationRequest {
  Name: string | undefined;
  DisplayName?: string;
  Description?: string;
  IconS3Location?: S3Location;
  LaunchPath?: string;
  WorkingDirectory?: string;
  LaunchParameters?: string;
  AppBlockArn?: string;
  AttributesToDelete?: ApplicationAttribute[];
}
export interface UpdateApplicationResult {
  Application?: Application;
}
export interface UpdateDirectoryConfigRequest {
  DirectoryName: string | undefined;
  OrganizationalUnitDistinguishedNames?: string[];
  ServiceAccountCredentials?: ServiceAccountCredentials;
  CertificateBasedAuthProperties?: CertificateBasedAuthProperties;
}
export interface UpdateDirectoryConfigResult {
  DirectoryConfig?: DirectoryConfig;
}
export interface UpdateEntitlementRequest {
  Name: string | undefined;
  StackName: string | undefined;
  Description?: string;
  AppVisibility?: AppVisibility;
  Attributes?: EntitlementAttribute[];
}
export interface UpdateEntitlementResult {
  Entitlement?: Entitlement;
}
export interface UpdateFleetRequest {
  ImageName?: string;
  ImageArn?: string;
  Name?: string;
  InstanceType?: string;
  ComputeCapacity?: ComputeCapacity;
  VpcConfig?: VpcConfig;
  MaxUserDurationInSeconds?: number;
  DisconnectTimeoutInSeconds?: number;
  DeleteVpcConfig?: boolean;
  Description?: string;
  DisplayName?: string;
  EnableDefaultInternetAccess?: boolean;
  DomainJoinInfo?: DomainJoinInfo;
  IdleDisconnectTimeoutInSeconds?: number;
  AttributesToDelete?: FleetAttribute[];
  IamRoleArn?: string;
  StreamView?: StreamView;
  Platform?: PlatformType;
  MaxConcurrentSessions?: number;
  UsbDeviceFilterStrings?: string[];
  SessionScriptS3Location?: S3Location;
  MaxSessionsPerInstance?: number;
}
export interface UpdateFleetResult {
  Fleet?: Fleet;
}
export interface UpdateImagePermissionsRequest {
  Name: string | undefined;
  SharedAccountId: string | undefined;
  ImagePermissions: ImagePermissions | undefined;
}
export interface UpdateImagePermissionsResult {}
export declare const StackAttribute: {
  readonly ACCESS_ENDPOINTS: "ACCESS_ENDPOINTS";
  readonly EMBED_HOST_DOMAINS: "EMBED_HOST_DOMAINS";
  readonly FEEDBACK_URL: "FEEDBACK_URL";
  readonly IAM_ROLE_ARN: "IAM_ROLE_ARN";
  readonly REDIRECT_URL: "REDIRECT_URL";
  readonly STORAGE_CONNECTORS: "STORAGE_CONNECTORS";
  readonly STORAGE_CONNECTOR_GOOGLE_DRIVE: "STORAGE_CONNECTOR_GOOGLE_DRIVE";
  readonly STORAGE_CONNECTOR_HOMEFOLDERS: "STORAGE_CONNECTOR_HOMEFOLDERS";
  readonly STORAGE_CONNECTOR_ONE_DRIVE: "STORAGE_CONNECTOR_ONE_DRIVE";
  readonly STREAMING_EXPERIENCE_SETTINGS: "STREAMING_EXPERIENCE_SETTINGS";
  readonly THEME_NAME: "THEME_NAME";
  readonly USER_SETTINGS: "USER_SETTINGS";
};
export type StackAttribute =
  (typeof StackAttribute)[keyof typeof StackAttribute];
export interface UpdateStackRequest {
  DisplayName?: string;
  Description?: string;
  Name: string | undefined;
  StorageConnectors?: StorageConnector[];
  DeleteStorageConnectors?: boolean;
  RedirectURL?: string;
  FeedbackURL?: string;
  AttributesToDelete?: StackAttribute[];
  UserSettings?: UserSetting[];
  ApplicationSettings?: ApplicationSettings;
  AccessEndpoints?: AccessEndpoint[];
  EmbedHostDomains?: string[];
  StreamingExperienceSettings?: StreamingExperienceSettings;
}
export interface UpdateStackResult {
  Stack?: Stack;
}
export declare const UserStackAssociationFilterSensitiveLog: (
  obj: UserStackAssociation
) => any;
export declare const BatchAssociateUserStackRequestFilterSensitiveLog: (
  obj: BatchAssociateUserStackRequest
) => any;
export declare const UserStackAssociationErrorFilterSensitiveLog: (
  obj: UserStackAssociationError
) => any;
export declare const BatchAssociateUserStackResultFilterSensitiveLog: (
  obj: BatchAssociateUserStackResult
) => any;
export declare const BatchDisassociateUserStackRequestFilterSensitiveLog: (
  obj: BatchDisassociateUserStackRequest
) => any;
export declare const BatchDisassociateUserStackResultFilterSensitiveLog: (
  obj: BatchDisassociateUserStackResult
) => any;
export declare const ServiceAccountCredentialsFilterSensitiveLog: (
  obj: ServiceAccountCredentials
) => any;
export declare const CreateDirectoryConfigRequestFilterSensitiveLog: (
  obj: CreateDirectoryConfigRequest
) => any;
export declare const DirectoryConfigFilterSensitiveLog: (
  obj: DirectoryConfig
) => any;
export declare const CreateDirectoryConfigResultFilterSensitiveLog: (
  obj: CreateDirectoryConfigResult
) => any;
export declare const CreateUserRequestFilterSensitiveLog: (
  obj: CreateUserRequest
) => any;
export declare const DeleteUserRequestFilterSensitiveLog: (
  obj: DeleteUserRequest
) => any;
export declare const DescribeDirectoryConfigsResultFilterSensitiveLog: (
  obj: DescribeDirectoryConfigsResult
) => any;
export declare const UserFilterSensitiveLog: (obj: User) => any;
export declare const DescribeUsersResultFilterSensitiveLog: (
  obj: DescribeUsersResult
) => any;
export declare const DescribeUserStackAssociationsRequestFilterSensitiveLog: (
  obj: DescribeUserStackAssociationsRequest
) => any;
export declare const DescribeUserStackAssociationsResultFilterSensitiveLog: (
  obj: DescribeUserStackAssociationsResult
) => any;
export declare const DisableUserRequestFilterSensitiveLog: (
  obj: DisableUserRequest
) => any;
export declare const EnableUserRequestFilterSensitiveLog: (
  obj: EnableUserRequest
) => any;
export declare const UpdateDirectoryConfigRequestFilterSensitiveLog: (
  obj: UpdateDirectoryConfigRequest
) => any;
export declare const UpdateDirectoryConfigResultFilterSensitiveLog: (
  obj: UpdateDirectoryConfigResult
) => any;
