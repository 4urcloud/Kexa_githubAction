import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AppStreamClient";
import { UpdateImagePermissionsRequest, UpdateImagePermissionsResult } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link UpdateImagePermissionsCommand}.
 */
export interface UpdateImagePermissionsCommandInput extends UpdateImagePermissionsRequest {
}
/**
 * @public
 *
 * The output of {@link UpdateImagePermissionsCommand}.
 */
export interface UpdateImagePermissionsCommandOutput extends UpdateImagePermissionsResult, __MetadataBearer {
}
declare const UpdateImagePermissionsCommand_base: {
    new (input: UpdateImagePermissionsCommandInput): import("@smithy/smithy-client").CommandImpl<UpdateImagePermissionsCommandInput, UpdateImagePermissionsCommandOutput, AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: UpdateImagePermissionsCommandInput): import("@smithy/smithy-client").CommandImpl<UpdateImagePermissionsCommandInput, UpdateImagePermissionsCommandOutput, AppStreamClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Adds or updates permissions for the specified private image. </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AppStreamClient, UpdateImagePermissionsCommand } from "@aws-sdk/client-appstream"; // ES Modules import
 * // const { AppStreamClient, UpdateImagePermissionsCommand } = require("@aws-sdk/client-appstream"); // CommonJS import
 * const client = new AppStreamClient(config);
 * const input = { // UpdateImagePermissionsRequest
 *   Name: "STRING_VALUE", // required
 *   SharedAccountId: "STRING_VALUE", // required
 *   ImagePermissions: { // ImagePermissions
 *     allowFleet: true || false,
 *     allowImageBuilder: true || false,
 *   },
 * };
 * const command = new UpdateImagePermissionsCommand(input);
 * const response = await client.send(command);
 * // {};
 *
 * ```
 *
 * @param UpdateImagePermissionsCommandInput - {@link UpdateImagePermissionsCommandInput}
 * @returns {@link UpdateImagePermissionsCommandOutput}
 * @see {@link UpdateImagePermissionsCommandInput} for command's `input` shape.
 * @see {@link UpdateImagePermissionsCommandOutput} for command's `response` shape.
 * @see {@link AppStreamClientResolvedConfig | config} for AppStreamClient's `config` shape.
 *
 * @throws {@link LimitExceededException} (client fault)
 *  <p>The requested limit exceeds the permitted limit for an account.</p>
 *
 * @throws {@link ResourceNotAvailableException} (client fault)
 *  <p>The specified resource exists and is not in use, but isn't available.</p>
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>The specified resource was not found.</p>
 *
 * @throws {@link AppStreamServiceException}
 * <p>Base exception class for all service exceptions from AppStream service.</p>
 *
 * @public
 */
export declare class UpdateImagePermissionsCommand extends UpdateImagePermissionsCommand_base {
}
