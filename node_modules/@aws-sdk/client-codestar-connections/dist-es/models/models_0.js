import { CodeStarConnectionsServiceException as __BaseException } from "./CodeStarConnectionsServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const BlockerStatus = {
    ACTIVE: "ACTIVE",
    RESOLVED: "RESOLVED",
};
export const BlockerType = {
    AUTOMATED: "AUTOMATED",
};
export const ProviderType = {
    BITBUCKET: "Bitbucket",
    GITHUB: "GitHub",
    GITHUB_ENTERPRISE_SERVER: "GitHubEnterpriseServer",
    GITLAB: "GitLab",
    GITLAB_SELF_MANAGED: "GitLabSelfManaged",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceUnavailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export const PublishDeploymentStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const SyncConfigurationType = {
    CFN_STACK_SYNC: "CFN_STACK_SYNC",
};
export const TriggerResourceUpdateOn = {
    ANY_CHANGE: "ANY_CHANGE",
    FILE_CHANGE: "FILE_CHANGE",
};
export class SyncConfigurationStillExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "SyncConfigurationStillExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "SyncConfigurationStillExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SyncConfigurationStillExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedProviderTypeException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedProviderTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedProviderTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedProviderTypeException.prototype);
        this.Message = opts.Message;
    }
}
export const ConnectionStatus = {
    AVAILABLE: "AVAILABLE",
    ERROR: "ERROR",
    PENDING: "PENDING",
};
export const RepositorySyncStatus = {
    FAILED: "FAILED",
    INITIATED: "INITIATED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
    SUCCEEDED: "SUCCEEDED",
};
export const ResourceSyncStatus = {
    FAILED: "FAILED",
    INITIATED: "INITIATED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
        this.Message = opts.Message;
    }
}
export class ConditionalCheckFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConditionalCheckFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConditionalCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
        this.Message = opts.Message;
    }
}
export class UpdateOutOfSyncException extends __BaseException {
    constructor(opts) {
        super({
            name: "UpdateOutOfSyncException",
            $fault: "client",
            ...opts,
        });
        this.name = "UpdateOutOfSyncException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UpdateOutOfSyncException.prototype);
        this.Message = opts.Message;
    }
}
export class RetryLatestCommitFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "RetryLatestCommitFailedException",
            $fault: "server",
            ...opts,
        });
        this.name = "RetryLatestCommitFailedException";
        this.$fault = "server";
        Object.setPrototypeOf(this, RetryLatestCommitFailedException.prototype);
        this.Message = opts.Message;
    }
}
export class SyncBlockerDoesNotExistException extends __BaseException {
    constructor(opts) {
        super({
            name: "SyncBlockerDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "SyncBlockerDoesNotExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SyncBlockerDoesNotExistException.prototype);
        this.Message = opts.Message;
    }
}
