import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { FinspaceServiceException as __BaseException } from "./FinspaceServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AutoScalingMetric: {
  readonly CPU_UTILIZATION_PERCENTAGE: "CPU_UTILIZATION_PERCENTAGE";
};
export type AutoScalingMetric =
  (typeof AutoScalingMetric)[keyof typeof AutoScalingMetric];
export interface AutoScalingConfiguration {
  minNodeCount?: number;
  maxNodeCount?: number;
  autoScalingMetric?: AutoScalingMetric;
  metricTarget?: number;
  scaleInCooldownSeconds?: number;
  scaleOutCooldownSeconds?: number;
}
export declare const FederationMode: {
  readonly FEDERATED: "FEDERATED";
  readonly LOCAL: "LOCAL";
};
export type FederationMode =
  (typeof FederationMode)[keyof typeof FederationMode];
export interface FederationParameters {
  samlMetadataDocument?: string;
  samlMetadataURL?: string;
  applicationCallBackURL?: string;
  federationURN?: string;
  federationProviderName?: string;
  attributeMap?: Record<string, string>;
}
export interface SuperuserParameters {
  emailAddress: string | undefined;
  firstName: string | undefined;
  lastName: string | undefined;
}
export interface CreateEnvironmentRequest {
  name: string | undefined;
  description?: string;
  kmsKeyId?: string;
  tags?: Record<string, string>;
  federationMode?: FederationMode;
  federationParameters?: FederationParameters;
  superuserParameters?: SuperuserParameters;
  dataBundles?: string[];
}
export interface CreateEnvironmentResponse {
  environmentId?: string;
  environmentArn?: string;
  environmentUrl?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  reason?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const ChangeType: {
  readonly DELETE: "DELETE";
  readonly PUT: "PUT";
};
export type ChangeType = (typeof ChangeType)[keyof typeof ChangeType];
export interface ChangeRequest {
  changeType: ChangeType | undefined;
  s3Path?: string;
  dbPath: string | undefined;
}
export interface CreateKxChangesetRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  changeRequests: ChangeRequest[] | undefined;
  clientToken?: string;
}
export declare const ErrorDetails: {
  readonly ACCESS_DENIED: "Missing required permission to perform this request.";
  readonly CANCELLED: "Cancelled";
  readonly INTERNAL_SERVICE_EXCEPTION: "An internal error has occurred.";
  readonly RESOURCE_NOT_FOUND: "One or more inputs to this request were not found.";
  readonly SERVICE_QUOTA_EXCEEDED: "Service limits have been exceeded.";
  readonly THROTTLING: "The system temporarily lacks sufficient resources to process the request.";
  readonly USER_RECOVERABLE: "A user recoverable error has occurred";
  readonly VALIDATION: "The inputs to this request are invalid.";
};
export type ErrorDetails = (typeof ErrorDetails)[keyof typeof ErrorDetails];
export interface ErrorInfo {
  errorMessage?: string;
  errorType?: ErrorDetails;
}
export declare const ChangesetStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly PROCESSING: "PROCESSING";
};
export type ChangesetStatus =
  (typeof ChangesetStatus)[keyof typeof ChangesetStatus];
export interface CreateKxChangesetResponse {
  changesetId?: string;
  databaseName?: string;
  environmentId?: string;
  changeRequests?: ChangeRequest[];
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
  status?: ChangesetStatus;
  errorInfo?: ErrorInfo;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const KxAzMode: {
  readonly MULTI: "MULTI";
  readonly SINGLE: "SINGLE";
};
export type KxAzMode = (typeof KxAzMode)[keyof typeof KxAzMode];
export interface KxCacheStorageConfiguration {
  type: string | undefined;
  size: number | undefined;
}
export interface CapacityConfiguration {
  nodeType?: string;
  nodeCount?: number;
}
export declare const KxClusterType: {
  readonly GATEWAY: "GATEWAY";
  readonly GP: "GP";
  readonly HDB: "HDB";
  readonly RDB: "RDB";
  readonly TICKERPLANT: "TICKERPLANT";
};
export type KxClusterType = (typeof KxClusterType)[keyof typeof KxClusterType];
export interface CodeConfiguration {
  s3Bucket?: string;
  s3Key?: string;
  s3ObjectVersion?: string;
}
export interface KxCommandLineArgument {
  key?: string;
  value?: string;
}
export interface KxDatabaseCacheConfiguration {
  cacheType: string | undefined;
  dbPaths: string[] | undefined;
  dataviewName?: string;
}
export interface KxDataviewSegmentConfiguration {
  dbPaths: string[] | undefined;
  volumeName: string | undefined;
  onDemand?: boolean;
}
export interface KxDataviewConfiguration {
  dataviewName?: string;
  dataviewVersionId?: string;
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
}
export interface KxDatabaseConfiguration {
  databaseName: string | undefined;
  cacheConfigurations?: KxDatabaseCacheConfiguration[];
  changesetId?: string;
  dataviewName?: string;
  dataviewConfiguration?: KxDataviewConfiguration;
}
export declare const KxSavedownStorageType: {
  readonly SDS01: "SDS01";
};
export type KxSavedownStorageType =
  (typeof KxSavedownStorageType)[keyof typeof KxSavedownStorageType];
export interface KxSavedownStorageConfiguration {
  type?: KxSavedownStorageType;
  size?: number;
  volumeName?: string;
}
export interface KxScalingGroupConfiguration {
  scalingGroupName: string | undefined;
  memoryLimit?: number;
  memoryReservation: number | undefined;
  nodeCount: number | undefined;
  cpu?: number;
}
export interface TickerplantLogConfiguration {
  tickerplantLogVolumes?: string[];
}
export declare const IPAddressType: {
  readonly IP_V4: "IP_V4";
};
export type IPAddressType = (typeof IPAddressType)[keyof typeof IPAddressType];
export interface VpcConfiguration {
  vpcId?: string;
  securityGroupIds?: string[];
  subnetIds?: string[];
  ipAddressType?: IPAddressType;
}
export interface CreateKxClusterRequest {
  clientToken?: string;
  environmentId: string | undefined;
  clusterName: string | undefined;
  clusterType: KxClusterType | undefined;
  tickerplantLogConfiguration?: TickerplantLogConfiguration;
  databases?: KxDatabaseConfiguration[];
  cacheStorageConfigurations?: KxCacheStorageConfiguration[];
  autoScalingConfiguration?: AutoScalingConfiguration;
  clusterDescription?: string;
  capacityConfiguration?: CapacityConfiguration;
  releaseLabel: string | undefined;
  vpcConfiguration: VpcConfiguration | undefined;
  initializationScript?: string;
  commandLineArguments?: KxCommandLineArgument[];
  code?: CodeConfiguration;
  executionRole?: string;
  savedownStorageConfiguration?: KxSavedownStorageConfiguration;
  azMode: KxAzMode | undefined;
  availabilityZoneId?: string;
  tags?: Record<string, string>;
  scalingGroupConfiguration?: KxScalingGroupConfiguration;
}
export declare const KxClusterStatus: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly UPDATING: "UPDATING";
};
export type KxClusterStatus =
  (typeof KxClusterStatus)[keyof typeof KxClusterStatus];
export declare const VolumeType: {
  readonly NAS_1: "NAS_1";
};
export type VolumeType = (typeof VolumeType)[keyof typeof VolumeType];
export interface Volume {
  volumeName?: string;
  volumeType?: VolumeType;
}
export interface CreateKxClusterResponse {
  environmentId?: string;
  status?: KxClusterStatus;
  statusReason?: string;
  clusterName?: string;
  clusterType?: KxClusterType;
  tickerplantLogConfiguration?: TickerplantLogConfiguration;
  volumes?: Volume[];
  databases?: KxDatabaseConfiguration[];
  cacheStorageConfigurations?: KxCacheStorageConfiguration[];
  autoScalingConfiguration?: AutoScalingConfiguration;
  clusterDescription?: string;
  capacityConfiguration?: CapacityConfiguration;
  releaseLabel?: string;
  vpcConfiguration?: VpcConfiguration;
  initializationScript?: string;
  commandLineArguments?: KxCommandLineArgument[];
  code?: CodeConfiguration;
  executionRole?: string;
  lastModifiedTimestamp?: Date;
  savedownStorageConfiguration?: KxSavedownStorageConfiguration;
  azMode?: KxAzMode;
  availabilityZoneId?: string;
  createdTimestamp?: Date;
  scalingGroupConfiguration?: KxScalingGroupConfiguration;
}
export interface CreateKxDatabaseRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  description?: string;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateKxDatabaseResponse {
  databaseName?: string;
  databaseArn?: string;
  environmentId?: string;
  description?: string;
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface CreateKxDataviewRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  dataviewName: string | undefined;
  azMode: KxAzMode | undefined;
  availabilityZoneId?: string;
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
  autoUpdate?: boolean;
  readWrite?: boolean;
  description?: string;
  tags?: Record<string, string>;
  clientToken?: string;
}
export declare const KxDataviewStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type KxDataviewStatus =
  (typeof KxDataviewStatus)[keyof typeof KxDataviewStatus];
export interface CreateKxDataviewResponse {
  dataviewName?: string;
  databaseName?: string;
  environmentId?: string;
  azMode?: KxAzMode;
  availabilityZoneId?: string;
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
  description?: string;
  autoUpdate?: boolean;
  readWrite?: boolean;
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
  status?: KxDataviewStatus;
}
export interface CreateKxEnvironmentRequest {
  name: string | undefined;
  description?: string;
  kmsKeyId: string | undefined;
  tags?: Record<string, string>;
  clientToken?: string;
}
export declare const EnvironmentStatus: {
  readonly CREATED: "CREATED";
  readonly CREATE_REQUESTED: "CREATE_REQUESTED";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DELETE_REQUESTED: "DELETE_REQUESTED";
  readonly DELETING: "DELETING";
  readonly FAILED_CREATION: "FAILED_CREATION";
  readonly FAILED_DELETION: "FAILED_DELETION";
  readonly FAILED_UPDATING_NETWORK: "FAILED_UPDATING_NETWORK";
  readonly RETRY_DELETION: "RETRY_DELETION";
  readonly SUSPENDED: "SUSPENDED";
  readonly UPDATE_NETWORK_REQUESTED: "UPDATE_NETWORK_REQUESTED";
  readonly UPDATING_NETWORK: "UPDATING_NETWORK";
};
export type EnvironmentStatus =
  (typeof EnvironmentStatus)[keyof typeof EnvironmentStatus];
export interface CreateKxEnvironmentResponse {
  name?: string;
  status?: EnvironmentStatus;
  environmentId?: string;
  description?: string;
  environmentArn?: string;
  kmsKeyId?: string;
  creationTimestamp?: Date;
}
export interface CreateKxScalingGroupRequest {
  clientToken?: string;
  environmentId: string | undefined;
  scalingGroupName: string | undefined;
  hostType: string | undefined;
  availabilityZoneId: string | undefined;
  tags?: Record<string, string>;
}
export declare const KxScalingGroupStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
};
export type KxScalingGroupStatus =
  (typeof KxScalingGroupStatus)[keyof typeof KxScalingGroupStatus];
export interface CreateKxScalingGroupResponse {
  environmentId?: string;
  scalingGroupName?: string;
  hostType?: string;
  availabilityZoneId?: string;
  status?: KxScalingGroupStatus;
  lastModifiedTimestamp?: Date;
  createdTimestamp?: Date;
}
export interface CreateKxUserRequest {
  environmentId: string | undefined;
  userName: string | undefined;
  iamRole: string | undefined;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateKxUserResponse {
  userName?: string;
  userArn?: string;
  environmentId?: string;
  iamRole?: string;
}
export declare const KxNAS1Type: {
  readonly HDD_12: "HDD_12";
  readonly SSD_1000: "SSD_1000";
  readonly SSD_250: "SSD_250";
};
export type KxNAS1Type = (typeof KxNAS1Type)[keyof typeof KxNAS1Type];
export interface KxNAS1Configuration {
  type?: KxNAS1Type;
  size?: number;
}
export declare const KxVolumeType: {
  readonly NAS_1: "NAS_1";
};
export type KxVolumeType = (typeof KxVolumeType)[keyof typeof KxVolumeType];
export interface CreateKxVolumeRequest {
  clientToken?: string;
  environmentId: string | undefined;
  volumeType: KxVolumeType | undefined;
  volumeName: string | undefined;
  description?: string;
  nas1Configuration?: KxNAS1Configuration;
  azMode: KxAzMode | undefined;
  availabilityZoneIds: string[] | undefined;
  tags?: Record<string, string>;
}
export declare const KxVolumeStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATED: "UPDATED";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type KxVolumeStatus =
  (typeof KxVolumeStatus)[keyof typeof KxVolumeStatus];
export interface CreateKxVolumeResponse {
  environmentId?: string;
  volumeName?: string;
  volumeType?: KxVolumeType;
  volumeArn?: string;
  nas1Configuration?: KxNAS1Configuration;
  status?: KxVolumeStatus;
  statusReason?: string;
  azMode?: KxAzMode;
  description?: string;
  availabilityZoneIds?: string[];
  createdTimestamp?: Date;
}
export interface DeleteEnvironmentRequest {
  environmentId: string | undefined;
}
export interface DeleteEnvironmentResponse {}
export interface DeleteKxClusterRequest {
  environmentId: string | undefined;
  clusterName: string | undefined;
  clientToken?: string;
}
export interface DeleteKxClusterResponse {}
export interface DeleteKxClusterNodeRequest {
  environmentId: string | undefined;
  clusterName: string | undefined;
  nodeId: string | undefined;
}
export interface DeleteKxClusterNodeResponse {}
export interface DeleteKxDatabaseRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  clientToken?: string;
}
export interface DeleteKxDatabaseResponse {}
export interface DeleteKxDataviewRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  dataviewName: string | undefined;
  clientToken?: string;
}
export interface DeleteKxDataviewResponse {}
export interface DeleteKxEnvironmentRequest {
  environmentId: string | undefined;
  clientToken?: string;
}
export interface DeleteKxEnvironmentResponse {}
export interface DeleteKxScalingGroupRequest {
  environmentId: string | undefined;
  scalingGroupName: string | undefined;
  clientToken?: string;
}
export interface DeleteKxScalingGroupResponse {}
export interface DeleteKxUserRequest {
  userName: string | undefined;
  environmentId: string | undefined;
  clientToken?: string;
}
export interface DeleteKxUserResponse {}
export interface DeleteKxVolumeRequest {
  environmentId: string | undefined;
  volumeName: string | undefined;
  clientToken?: string;
}
export interface DeleteKxVolumeResponse {}
export interface GetEnvironmentRequest {
  environmentId: string | undefined;
}
export interface Environment {
  name?: string;
  environmentId?: string;
  awsAccountId?: string;
  status?: EnvironmentStatus;
  environmentUrl?: string;
  description?: string;
  environmentArn?: string;
  sageMakerStudioDomainUrl?: string;
  kmsKeyId?: string;
  dedicatedServiceAccountId?: string;
  federationMode?: FederationMode;
  federationParameters?: FederationParameters;
}
export interface GetEnvironmentResponse {
  environment?: Environment;
}
export interface GetKxChangesetRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  changesetId: string | undefined;
}
export interface GetKxChangesetResponse {
  changesetId?: string;
  databaseName?: string;
  environmentId?: string;
  changeRequests?: ChangeRequest[];
  createdTimestamp?: Date;
  activeFromTimestamp?: Date;
  lastModifiedTimestamp?: Date;
  status?: ChangesetStatus;
  errorInfo?: ErrorInfo;
}
export interface GetKxClusterRequest {
  environmentId: string | undefined;
  clusterName: string | undefined;
}
export interface GetKxClusterResponse {
  status?: KxClusterStatus;
  statusReason?: string;
  clusterName?: string;
  clusterType?: KxClusterType;
  tickerplantLogConfiguration?: TickerplantLogConfiguration;
  volumes?: Volume[];
  databases?: KxDatabaseConfiguration[];
  cacheStorageConfigurations?: KxCacheStorageConfiguration[];
  autoScalingConfiguration?: AutoScalingConfiguration;
  clusterDescription?: string;
  capacityConfiguration?: CapacityConfiguration;
  releaseLabel?: string;
  vpcConfiguration?: VpcConfiguration;
  initializationScript?: string;
  commandLineArguments?: KxCommandLineArgument[];
  code?: CodeConfiguration;
  executionRole?: string;
  lastModifiedTimestamp?: Date;
  savedownStorageConfiguration?: KxSavedownStorageConfiguration;
  azMode?: KxAzMode;
  availabilityZoneId?: string;
  createdTimestamp?: Date;
  scalingGroupConfiguration?: KxScalingGroupConfiguration;
}
export interface GetKxConnectionStringRequest {
  userArn: string | undefined;
  environmentId: string | undefined;
  clusterName: string | undefined;
}
export interface GetKxConnectionStringResponse {
  signedConnectionString?: string;
}
export interface GetKxDatabaseRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
}
export interface GetKxDatabaseResponse {
  databaseName?: string;
  databaseArn?: string;
  environmentId?: string;
  description?: string;
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
  lastCompletedChangesetId?: string;
  numBytes?: number;
  numChangesets?: number;
  numFiles?: number;
}
export interface GetKxDataviewRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  dataviewName: string | undefined;
}
export interface KxDataviewActiveVersion {
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
  attachedClusters?: string[];
  createdTimestamp?: Date;
  versionId?: string;
}
export interface GetKxDataviewResponse {
  databaseName?: string;
  dataviewName?: string;
  azMode?: KxAzMode;
  availabilityZoneId?: string;
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
  activeVersions?: KxDataviewActiveVersion[];
  description?: string;
  autoUpdate?: boolean;
  readWrite?: boolean;
  environmentId?: string;
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
  status?: KxDataviewStatus;
  statusReason?: string;
}
export interface GetKxEnvironmentRequest {
  environmentId: string | undefined;
}
export interface CustomDNSServer {
  customDNSServerName: string | undefined;
  customDNSServerIP: string | undefined;
}
export declare const DnsStatus: {
  readonly FAILED_UPDATE: "FAILED_UPDATE";
  readonly NONE: "NONE";
  readonly SUCCESSFULLY_UPDATED: "SUCCESSFULLY_UPDATED";
  readonly UPDATE_REQUESTED: "UPDATE_REQUESTED";
  readonly UPDATING: "UPDATING";
};
export type DnsStatus = (typeof DnsStatus)[keyof typeof DnsStatus];
export declare const TgwStatus: {
  readonly FAILED_UPDATE: "FAILED_UPDATE";
  readonly NONE: "NONE";
  readonly SUCCESSFULLY_UPDATED: "SUCCESSFULLY_UPDATED";
  readonly UPDATE_REQUESTED: "UPDATE_REQUESTED";
  readonly UPDATING: "UPDATING";
};
export type TgwStatus = (typeof TgwStatus)[keyof typeof TgwStatus];
export interface IcmpTypeCode {
  type: number | undefined;
  code: number | undefined;
}
export interface PortRange {
  from: number | undefined;
  to: number | undefined;
}
export declare const RuleAction: {
  readonly ALLOW: "allow";
  readonly DENY: "deny";
};
export type RuleAction = (typeof RuleAction)[keyof typeof RuleAction];
export interface NetworkACLEntry {
  ruleNumber: number | undefined;
  protocol: string | undefined;
  ruleAction: RuleAction | undefined;
  portRange?: PortRange;
  icmpTypeCode?: IcmpTypeCode;
  cidrBlock: string | undefined;
}
export interface TransitGatewayConfiguration {
  transitGatewayID: string | undefined;
  routableCIDRSpace: string | undefined;
  attachmentNetworkAclConfiguration?: NetworkACLEntry[];
}
export interface GetKxEnvironmentResponse {
  name?: string;
  environmentId?: string;
  awsAccountId?: string;
  status?: EnvironmentStatus;
  tgwStatus?: TgwStatus;
  dnsStatus?: DnsStatus;
  errorMessage?: string;
  description?: string;
  environmentArn?: string;
  kmsKeyId?: string;
  dedicatedServiceAccountId?: string;
  transitGatewayConfiguration?: TransitGatewayConfiguration;
  customDNSConfiguration?: CustomDNSServer[];
  creationTimestamp?: Date;
  updateTimestamp?: Date;
  availabilityZoneIds?: string[];
  certificateAuthorityArn?: string;
}
export interface GetKxScalingGroupRequest {
  environmentId: string | undefined;
  scalingGroupName: string | undefined;
}
export interface GetKxScalingGroupResponse {
  scalingGroupName?: string;
  scalingGroupArn?: string;
  hostType?: string;
  clusters?: string[];
  availabilityZoneId?: string;
  status?: KxScalingGroupStatus;
  statusReason?: string;
  lastModifiedTimestamp?: Date;
  createdTimestamp?: Date;
}
export interface GetKxUserRequest {
  userName: string | undefined;
  environmentId: string | undefined;
}
export interface GetKxUserResponse {
  userName?: string;
  userArn?: string;
  environmentId?: string;
  iamRole?: string;
}
export interface GetKxVolumeRequest {
  environmentId: string | undefined;
  volumeName: string | undefined;
}
export interface KxAttachedCluster {
  clusterName?: string;
  clusterType?: KxClusterType;
  clusterStatus?: KxClusterStatus;
}
export interface GetKxVolumeResponse {
  environmentId?: string;
  volumeName?: string;
  volumeType?: KxVolumeType;
  volumeArn?: string;
  nas1Configuration?: KxNAS1Configuration;
  status?: KxVolumeStatus;
  statusReason?: string;
  createdTimestamp?: Date;
  description?: string;
  azMode?: KxAzMode;
  availabilityZoneIds?: string[];
  lastModifiedTimestamp?: Date;
  attachedClusters?: KxAttachedCluster[];
}
export interface ListEnvironmentsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface ListEnvironmentsResponse {
  environments?: Environment[];
  nextToken?: string;
}
export interface ListKxChangesetsRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface KxChangesetListEntry {
  changesetId?: string;
  createdTimestamp?: Date;
  activeFromTimestamp?: Date;
  lastModifiedTimestamp?: Date;
  status?: ChangesetStatus;
}
export interface ListKxChangesetsResponse {
  kxChangesets?: KxChangesetListEntry[];
  nextToken?: string;
}
export interface ListKxClusterNodesRequest {
  environmentId: string | undefined;
  clusterName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export declare const KxNodeStatus: {
  readonly PROVISIONING: "PROVISIONING";
  readonly RUNNING: "RUNNING";
};
export type KxNodeStatus = (typeof KxNodeStatus)[keyof typeof KxNodeStatus];
export interface KxNode {
  nodeId?: string;
  availabilityZoneId?: string;
  launchTime?: Date;
  status?: KxNodeStatus;
}
export interface ListKxClusterNodesResponse {
  nodes?: KxNode[];
  nextToken?: string;
}
export interface ListKxClustersRequest {
  environmentId: string | undefined;
  clusterType?: KxClusterType;
  maxResults?: number;
  nextToken?: string;
}
export interface KxCluster {
  status?: KxClusterStatus;
  statusReason?: string;
  clusterName?: string;
  clusterType?: KxClusterType;
  clusterDescription?: string;
  releaseLabel?: string;
  volumes?: Volume[];
  initializationScript?: string;
  executionRole?: string;
  azMode?: KxAzMode;
  availabilityZoneId?: string;
  lastModifiedTimestamp?: Date;
  createdTimestamp?: Date;
}
export interface ListKxClustersResponse {
  kxClusterSummaries?: KxCluster[];
  nextToken?: string;
}
export interface ListKxDatabasesRequest {
  environmentId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface KxDatabaseListEntry {
  databaseName?: string;
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
}
export interface ListKxDatabasesResponse {
  kxDatabases?: KxDatabaseListEntry[];
  nextToken?: string;
}
export interface ListKxDataviewsRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface KxDataviewListEntry {
  environmentId?: string;
  databaseName?: string;
  dataviewName?: string;
  azMode?: KxAzMode;
  availabilityZoneId?: string;
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
  activeVersions?: KxDataviewActiveVersion[];
  status?: KxDataviewStatus;
  description?: string;
  autoUpdate?: boolean;
  readWrite?: boolean;
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
  statusReason?: string;
}
export interface ListKxDataviewsResponse {
  kxDataviews?: KxDataviewListEntry[];
  nextToken?: string;
}
export interface ListKxEnvironmentsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface KxEnvironment {
  name?: string;
  environmentId?: string;
  awsAccountId?: string;
  status?: EnvironmentStatus;
  tgwStatus?: TgwStatus;
  dnsStatus?: DnsStatus;
  errorMessage?: string;
  description?: string;
  environmentArn?: string;
  kmsKeyId?: string;
  dedicatedServiceAccountId?: string;
  transitGatewayConfiguration?: TransitGatewayConfiguration;
  customDNSConfiguration?: CustomDNSServer[];
  creationTimestamp?: Date;
  updateTimestamp?: Date;
  availabilityZoneIds?: string[];
  certificateAuthorityArn?: string;
}
export interface ListKxEnvironmentsResponse {
  environments?: KxEnvironment[];
  nextToken?: string;
}
export interface ListKxScalingGroupsRequest {
  environmentId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface KxScalingGroup {
  scalingGroupName?: string;
  hostType?: string;
  clusters?: string[];
  availabilityZoneId?: string;
  status?: KxScalingGroupStatus;
  statusReason?: string;
  lastModifiedTimestamp?: Date;
  createdTimestamp?: Date;
}
export interface ListKxScalingGroupsResponse {
  scalingGroups?: KxScalingGroup[];
  nextToken?: string;
}
export interface ListKxUsersRequest {
  environmentId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface KxUser {
  userArn?: string;
  userName?: string;
  iamRole?: string;
  createTimestamp?: Date;
  updateTimestamp?: Date;
}
export interface ListKxUsersResponse {
  users?: KxUser[];
  nextToken?: string;
}
export interface ListKxVolumesRequest {
  environmentId: string | undefined;
  maxResults?: number;
  nextToken?: string;
  volumeType?: KxVolumeType;
}
export interface KxVolume {
  volumeName?: string;
  volumeType?: KxVolumeType;
  status?: KxVolumeStatus;
  description?: string;
  statusReason?: string;
  azMode?: KxAzMode;
  availabilityZoneIds?: string[];
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
}
export interface ListKxVolumesResponse {
  kxVolumeSummaries?: KxVolume[];
  nextToken?: string;
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateEnvironmentRequest {
  environmentId: string | undefined;
  name?: string;
  description?: string;
  federationMode?: FederationMode;
  federationParameters?: FederationParameters;
}
export interface UpdateEnvironmentResponse {
  environment?: Environment;
}
export declare const KxClusterCodeDeploymentStrategy: {
  readonly FORCE: "FORCE";
  readonly NO_RESTART: "NO_RESTART";
  readonly ROLLING: "ROLLING";
};
export type KxClusterCodeDeploymentStrategy =
  (typeof KxClusterCodeDeploymentStrategy)[keyof typeof KxClusterCodeDeploymentStrategy];
export interface KxClusterCodeDeploymentConfiguration {
  deploymentStrategy: KxClusterCodeDeploymentStrategy | undefined;
}
export interface UpdateKxClusterCodeConfigurationRequest {
  environmentId: string | undefined;
  clusterName: string | undefined;
  clientToken?: string;
  code: CodeConfiguration | undefined;
  initializationScript?: string;
  commandLineArguments?: KxCommandLineArgument[];
  deploymentConfiguration?: KxClusterCodeDeploymentConfiguration;
}
export interface UpdateKxClusterCodeConfigurationResponse {}
export declare const KxDeploymentStrategy: {
  readonly NO_RESTART: "NO_RESTART";
  readonly ROLLING: "ROLLING";
};
export type KxDeploymentStrategy =
  (typeof KxDeploymentStrategy)[keyof typeof KxDeploymentStrategy];
export interface KxDeploymentConfiguration {
  deploymentStrategy: KxDeploymentStrategy | undefined;
}
export interface UpdateKxClusterDatabasesRequest {
  environmentId: string | undefined;
  clusterName: string | undefined;
  clientToken?: string;
  databases: KxDatabaseConfiguration[] | undefined;
  deploymentConfiguration?: KxDeploymentConfiguration;
}
export interface UpdateKxClusterDatabasesResponse {}
export interface UpdateKxDatabaseRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  description?: string;
  clientToken?: string;
}
export interface UpdateKxDatabaseResponse {
  databaseName?: string;
  environmentId?: string;
  description?: string;
  lastModifiedTimestamp?: Date;
}
export interface UpdateKxDataviewRequest {
  environmentId: string | undefined;
  databaseName: string | undefined;
  dataviewName: string | undefined;
  description?: string;
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
  clientToken?: string;
}
export interface UpdateKxDataviewResponse {
  environmentId?: string;
  databaseName?: string;
  dataviewName?: string;
  azMode?: KxAzMode;
  availabilityZoneId?: string;
  changesetId?: string;
  segmentConfigurations?: KxDataviewSegmentConfiguration[];
  activeVersions?: KxDataviewActiveVersion[];
  status?: KxDataviewStatus;
  autoUpdate?: boolean;
  readWrite?: boolean;
  description?: string;
  createdTimestamp?: Date;
  lastModifiedTimestamp?: Date;
}
export interface UpdateKxEnvironmentRequest {
  environmentId: string | undefined;
  name?: string;
  description?: string;
  clientToken?: string;
}
export interface UpdateKxEnvironmentResponse {
  name?: string;
  environmentId?: string;
  awsAccountId?: string;
  status?: EnvironmentStatus;
  tgwStatus?: TgwStatus;
  dnsStatus?: DnsStatus;
  errorMessage?: string;
  description?: string;
  environmentArn?: string;
  kmsKeyId?: string;
  dedicatedServiceAccountId?: string;
  transitGatewayConfiguration?: TransitGatewayConfiguration;
  customDNSConfiguration?: CustomDNSServer[];
  creationTimestamp?: Date;
  updateTimestamp?: Date;
  availabilityZoneIds?: string[];
}
export interface UpdateKxEnvironmentNetworkRequest {
  environmentId: string | undefined;
  transitGatewayConfiguration?: TransitGatewayConfiguration;
  customDNSConfiguration?: CustomDNSServer[];
  clientToken?: string;
}
export interface UpdateKxEnvironmentNetworkResponse {
  name?: string;
  environmentId?: string;
  awsAccountId?: string;
  status?: EnvironmentStatus;
  tgwStatus?: TgwStatus;
  dnsStatus?: DnsStatus;
  errorMessage?: string;
  description?: string;
  environmentArn?: string;
  kmsKeyId?: string;
  dedicatedServiceAccountId?: string;
  transitGatewayConfiguration?: TransitGatewayConfiguration;
  customDNSConfiguration?: CustomDNSServer[];
  creationTimestamp?: Date;
  updateTimestamp?: Date;
  availabilityZoneIds?: string[];
}
export interface UpdateKxUserRequest {
  environmentId: string | undefined;
  userName: string | undefined;
  iamRole: string | undefined;
  clientToken?: string;
}
export interface UpdateKxUserResponse {
  userName?: string;
  userArn?: string;
  environmentId?: string;
  iamRole?: string;
}
export interface UpdateKxVolumeRequest {
  environmentId: string | undefined;
  volumeName: string | undefined;
  description?: string;
  clientToken?: string;
  nas1Configuration?: KxNAS1Configuration;
}
export interface UpdateKxVolumeResponse {
  environmentId?: string;
  volumeName?: string;
  volumeType?: KxVolumeType;
  volumeArn?: string;
  nas1Configuration?: KxNAS1Configuration;
  status?: KxVolumeStatus;
  description?: string;
  statusReason?: string;
  createdTimestamp?: Date;
  azMode?: KxAzMode;
  availabilityZoneIds?: string[];
  lastModifiedTimestamp?: Date;
  attachedClusters?: KxAttachedCluster[];
}
export declare const SuperuserParametersFilterSensitiveLog: (
  obj: SuperuserParameters
) => any;
export declare const CreateEnvironmentRequestFilterSensitiveLog: (
  obj: CreateEnvironmentRequest
) => any;
export declare const GetKxConnectionStringResponseFilterSensitiveLog: (
  obj: GetKxConnectionStringResponse
) => any;
