import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { FinspaceServiceException as __BaseException } from "./FinspaceServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const AutoScalingMetric = {
    CPU_UTILIZATION_PERCENTAGE: "CPU_UTILIZATION_PERCENTAGE",
};
export const FederationMode = {
    FEDERATED: "FEDERATED",
    LOCAL: "LOCAL",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.reason = opts.reason;
    }
}
export const ChangeType = {
    DELETE: "DELETE",
    PUT: "PUT",
};
export const ErrorDetails = {
    ACCESS_DENIED: "Missing required permission to perform this request.",
    CANCELLED: "Cancelled",
    INTERNAL_SERVICE_EXCEPTION: "An internal error has occurred.",
    RESOURCE_NOT_FOUND: "One or more inputs to this request were not found.",
    SERVICE_QUOTA_EXCEEDED: "Service limits have been exceeded.",
    THROTTLING: "The system temporarily lacks sufficient resources to process the request.",
    USER_RECOVERABLE: "A user recoverable error has occurred",
    VALIDATION: "The inputs to this request are invalid.",
};
export const ChangesetStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    PROCESSING: "PROCESSING",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const KxAzMode = {
    MULTI: "MULTI",
    SINGLE: "SINGLE",
};
export const KxClusterType = {
    GATEWAY: "GATEWAY",
    GP: "GP",
    HDB: "HDB",
    RDB: "RDB",
    TICKERPLANT: "TICKERPLANT",
};
export const KxSavedownStorageType = {
    SDS01: "SDS01",
};
export const IPAddressType = {
    IP_V4: "IP_V4",
};
export const KxClusterStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    UPDATING: "UPDATING",
};
export const VolumeType = {
    NAS_1: "NAS_1",
};
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
export const KxDataviewStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
export const EnvironmentStatus = {
    CREATED: "CREATED",
    CREATE_REQUESTED: "CREATE_REQUESTED",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETE_REQUESTED: "DELETE_REQUESTED",
    DELETING: "DELETING",
    FAILED_CREATION: "FAILED_CREATION",
    FAILED_DELETION: "FAILED_DELETION",
    FAILED_UPDATING_NETWORK: "FAILED_UPDATING_NETWORK",
    RETRY_DELETION: "RETRY_DELETION",
    SUSPENDED: "SUSPENDED",
    UPDATE_NETWORK_REQUESTED: "UPDATE_NETWORK_REQUESTED",
    UPDATING_NETWORK: "UPDATING_NETWORK",
};
export const KxScalingGroupStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
};
export const KxNAS1Type = {
    HDD_12: "HDD_12",
    SSD_1000: "SSD_1000",
    SSD_250: "SSD_250",
};
export const KxVolumeType = {
    NAS_1: "NAS_1",
};
export const KxVolumeStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    UPDATED: "UPDATED",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATING: "UPDATING",
};
export const DnsStatus = {
    FAILED_UPDATE: "FAILED_UPDATE",
    NONE: "NONE",
    SUCCESSFULLY_UPDATED: "SUCCESSFULLY_UPDATED",
    UPDATE_REQUESTED: "UPDATE_REQUESTED",
    UPDATING: "UPDATING",
};
export const TgwStatus = {
    FAILED_UPDATE: "FAILED_UPDATE",
    NONE: "NONE",
    SUCCESSFULLY_UPDATED: "SUCCESSFULLY_UPDATED",
    UPDATE_REQUESTED: "UPDATE_REQUESTED",
    UPDATING: "UPDATING",
};
export const RuleAction = {
    ALLOW: "allow",
    DENY: "deny",
};
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export const KxClusterCodeDeploymentStrategy = {
    FORCE: "FORCE",
    NO_RESTART: "NO_RESTART",
    ROLLING: "ROLLING",
};
export const KxDeploymentStrategy = {
    NO_RESTART: "NO_RESTART",
    ROLLING: "ROLLING",
};
export const SuperuserParametersFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.emailAddress && { emailAddress: SENSITIVE_STRING }),
});
export const CreateEnvironmentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.superuserParameters && {
        superuserParameters: SuperuserParametersFilterSensitiveLog(obj.superuserParameters),
    }),
});
export const GetKxConnectionStringResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.signedConnectionString && { signedConnectionString: SENSITIVE_STRING }),
});
