import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MWAAServiceException as __BaseException } from "./MWAAServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface CreateCliTokenRequest {
  Name: string | undefined;
}
export interface CreateCliTokenResponse {
  CliToken?: string;
  WebServerHostname?: string;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const EndpointManagement: {
  readonly CUSTOMER: "CUSTOMER";
  readonly SERVICE: "SERVICE";
};
export type EndpointManagement =
  (typeof EndpointManagement)[keyof typeof EndpointManagement];
export declare const LoggingLevel: {
  readonly CRITICAL: "CRITICAL";
  readonly DEBUG: "DEBUG";
  readonly ERROR: "ERROR";
  readonly INFO: "INFO";
  readonly WARNING: "WARNING";
};
export type LoggingLevel = (typeof LoggingLevel)[keyof typeof LoggingLevel];
export interface ModuleLoggingConfigurationInput {
  Enabled: boolean | undefined;
  LogLevel: LoggingLevel | undefined;
}
export interface LoggingConfigurationInput {
  DagProcessingLogs?: ModuleLoggingConfigurationInput;
  SchedulerLogs?: ModuleLoggingConfigurationInput;
  WebserverLogs?: ModuleLoggingConfigurationInput;
  WorkerLogs?: ModuleLoggingConfigurationInput;
  TaskLogs?: ModuleLoggingConfigurationInput;
}
export interface NetworkConfiguration {
  SubnetIds?: string[];
  SecurityGroupIds?: string[];
}
export declare const WebserverAccessMode: {
  readonly PRIVATE_ONLY: "PRIVATE_ONLY";
  readonly PUBLIC_ONLY: "PUBLIC_ONLY";
};
export type WebserverAccessMode =
  (typeof WebserverAccessMode)[keyof typeof WebserverAccessMode];
export interface CreateEnvironmentInput {
  Name: string | undefined;
  ExecutionRoleArn: string | undefined;
  SourceBucketArn: string | undefined;
  DagS3Path: string | undefined;
  NetworkConfiguration: NetworkConfiguration | undefined;
  PluginsS3Path?: string;
  PluginsS3ObjectVersion?: string;
  RequirementsS3Path?: string;
  RequirementsS3ObjectVersion?: string;
  StartupScriptS3Path?: string;
  StartupScriptS3ObjectVersion?: string;
  AirflowConfigurationOptions?: Record<string, string>;
  EnvironmentClass?: string;
  MaxWorkers?: number;
  KmsKey?: string;
  AirflowVersion?: string;
  LoggingConfiguration?: LoggingConfigurationInput;
  WeeklyMaintenanceWindowStart?: string;
  Tags?: Record<string, string>;
  WebserverAccessMode?: WebserverAccessMode;
  MinWorkers?: number;
  Schedulers?: number;
  EndpointManagement?: EndpointManagement;
}
export interface CreateEnvironmentOutput {
  Arn?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CreateWebLoginTokenRequest {
  Name: string | undefined;
}
export interface CreateWebLoginTokenResponse {
  WebToken?: string;
  WebServerHostname?: string;
  IamIdentity?: string;
  AirflowIdentity?: string;
}
export interface DeleteEnvironmentInput {
  Name: string | undefined;
}
export interface DeleteEnvironmentOutput {}
export interface GetEnvironmentInput {
  Name: string | undefined;
}
export interface UpdateError {
  ErrorCode?: string;
  ErrorMessage?: string;
}
export declare const UpdateStatus: {
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCESS: "SUCCESS";
};
export type UpdateStatus = (typeof UpdateStatus)[keyof typeof UpdateStatus];
export interface LastUpdate {
  Status?: UpdateStatus;
  CreatedAt?: Date;
  Error?: UpdateError;
  Source?: string;
}
export interface ModuleLoggingConfiguration {
  Enabled?: boolean;
  LogLevel?: LoggingLevel;
  CloudWatchLogGroupArn?: string;
}
export interface LoggingConfiguration {
  DagProcessingLogs?: ModuleLoggingConfiguration;
  SchedulerLogs?: ModuleLoggingConfiguration;
  WebserverLogs?: ModuleLoggingConfiguration;
  WorkerLogs?: ModuleLoggingConfiguration;
  TaskLogs?: ModuleLoggingConfiguration;
}
export declare const EnvironmentStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly CREATING_SNAPSHOT: "CREATING_SNAPSHOT";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly MAINTENANCE: "MAINTENANCE";
  readonly PENDING: "PENDING";
  readonly ROLLING_BACK: "ROLLING_BACK";
  readonly UNAVAILABLE: "UNAVAILABLE";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type EnvironmentStatus =
  (typeof EnvironmentStatus)[keyof typeof EnvironmentStatus];
export interface Environment {
  Name?: string;
  Status?: EnvironmentStatus;
  Arn?: string;
  CreatedAt?: Date;
  WebserverUrl?: string;
  ExecutionRoleArn?: string;
  ServiceRoleArn?: string;
  KmsKey?: string;
  AirflowVersion?: string;
  SourceBucketArn?: string;
  DagS3Path?: string;
  PluginsS3Path?: string;
  PluginsS3ObjectVersion?: string;
  RequirementsS3Path?: string;
  RequirementsS3ObjectVersion?: string;
  StartupScriptS3Path?: string;
  StartupScriptS3ObjectVersion?: string;
  AirflowConfigurationOptions?: Record<string, string>;
  EnvironmentClass?: string;
  MaxWorkers?: number;
  NetworkConfiguration?: NetworkConfiguration;
  LoggingConfiguration?: LoggingConfiguration;
  LastUpdate?: LastUpdate;
  WeeklyMaintenanceWindowStart?: string;
  Tags?: Record<string, string>;
  WebserverAccessMode?: WebserverAccessMode;
  MinWorkers?: number;
  Schedulers?: number;
  WebserverVpcEndpointService?: string;
  DatabaseVpcEndpointService?: string;
  CeleryExecutorQueue?: string;
  EndpointManagement?: EndpointManagement;
}
export interface GetEnvironmentOutput {
  Environment?: Environment;
}
export interface ListEnvironmentsInput {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListEnvironmentsOutput {
  Environments: string[] | undefined;
  NextToken?: string;
}
export interface ListTagsForResourceInput {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceOutput {
  Tags?: Record<string, string>;
}
export interface Dimension {
  Name: string | undefined;
  Value: string | undefined;
}
export interface StatisticSet {
  SampleCount?: number;
  Sum?: number;
  Minimum?: number;
  Maximum?: number;
}
export declare const Unit: {
  readonly BITS: "Bits";
  readonly BITS_PER_SECOND: "Bits/Second";
  readonly BYTES: "Bytes";
  readonly BYTES_PER_SECOND: "Bytes/Second";
  readonly COUNT: "Count";
  readonly COUNT_PER_SECOND: "Count/Second";
  readonly GIGABITS: "Gigabits";
  readonly GIGABITS_PER_SECOND: "Gigabits/Second";
  readonly GIGABYTES: "Gigabytes";
  readonly GIGABYTES_PER_SECOND: "Gigabytes/Second";
  readonly KILOBITS: "Kilobits";
  readonly KILOBITS_PER_SECOND: "Kilobits/Second";
  readonly KILOBYTES: "Kilobytes";
  readonly KILOBYTES_PER_SECOND: "Kilobytes/Second";
  readonly MEGABITS: "Megabits";
  readonly MEGABITS_PER_SECOND: "Megabits/Second";
  readonly MEGABYTES: "Megabytes";
  readonly MEGABYTES_PER_SECOND: "Megabytes/Second";
  readonly MICROSECONDS: "Microseconds";
  readonly MILLISECONDS: "Milliseconds";
  readonly NONE: "None";
  readonly PERCENT: "Percent";
  readonly SECONDS: "Seconds";
  readonly TERABITS: "Terabits";
  readonly TERABITS_PER_SECOND: "Terabits/Second";
  readonly TERABYTES: "Terabytes";
  readonly TERABYTES_PER_SECOND: "Terabytes/Second";
};
export type Unit = (typeof Unit)[keyof typeof Unit];
export interface MetricDatum {
  MetricName: string | undefined;
  Timestamp: Date | undefined;
  Dimensions?: Dimension[];
  Value?: number;
  Unit?: Unit;
  StatisticValues?: StatisticSet;
}
export interface PublishMetricsInput {
  EnvironmentName: string | undefined;
  MetricData: MetricDatum[] | undefined;
}
export interface PublishMetricsOutput {}
export interface TagResourceInput {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceOutput {}
export interface UntagResourceInput {
  ResourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceOutput {}
export interface UpdateNetworkConfigurationInput {
  SecurityGroupIds: string[] | undefined;
}
export interface UpdateEnvironmentInput {
  Name: string | undefined;
  ExecutionRoleArn?: string;
  AirflowVersion?: string;
  SourceBucketArn?: string;
  DagS3Path?: string;
  PluginsS3Path?: string;
  PluginsS3ObjectVersion?: string;
  RequirementsS3Path?: string;
  RequirementsS3ObjectVersion?: string;
  StartupScriptS3Path?: string;
  StartupScriptS3ObjectVersion?: string;
  AirflowConfigurationOptions?: Record<string, string>;
  EnvironmentClass?: string;
  MaxWorkers?: number;
  NetworkConfiguration?: UpdateNetworkConfigurationInput;
  LoggingConfiguration?: LoggingConfigurationInput;
  WeeklyMaintenanceWindowStart?: string;
  WebserverAccessMode?: WebserverAccessMode;
  MinWorkers?: number;
  Schedulers?: number;
}
export interface UpdateEnvironmentOutput {
  Arn?: string;
}
export declare const CreateCliTokenResponseFilterSensitiveLog: (
  obj: CreateCliTokenResponse
) => any;
export declare const CreateEnvironmentInputFilterSensitiveLog: (
  obj: CreateEnvironmentInput
) => any;
export declare const CreateWebLoginTokenResponseFilterSensitiveLog: (
  obj: CreateWebLoginTokenResponse
) => any;
export declare const EnvironmentFilterSensitiveLog: (obj: Environment) => any;
export declare const GetEnvironmentOutputFilterSensitiveLog: (
  obj: GetEnvironmentOutput
) => any;
export declare const UpdateEnvironmentInputFilterSensitiveLog: (
  obj: UpdateEnvironmentInput
) => any;
