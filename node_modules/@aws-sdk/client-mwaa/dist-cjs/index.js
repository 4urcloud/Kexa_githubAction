"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessDeniedException: () => AccessDeniedException,
  CreateCliTokenCommand: () => CreateCliTokenCommand,
  CreateCliTokenResponseFilterSensitiveLog: () => CreateCliTokenResponseFilterSensitiveLog,
  CreateEnvironmentCommand: () => CreateEnvironmentCommand,
  CreateEnvironmentInputFilterSensitiveLog: () => CreateEnvironmentInputFilterSensitiveLog,
  CreateWebLoginTokenCommand: () => CreateWebLoginTokenCommand,
  CreateWebLoginTokenResponseFilterSensitiveLog: () => CreateWebLoginTokenResponseFilterSensitiveLog,
  DeleteEnvironmentCommand: () => DeleteEnvironmentCommand,
  EndpointManagement: () => EndpointManagement,
  EnvironmentFilterSensitiveLog: () => EnvironmentFilterSensitiveLog,
  EnvironmentStatus: () => EnvironmentStatus,
  GetEnvironmentCommand: () => GetEnvironmentCommand,
  GetEnvironmentOutputFilterSensitiveLog: () => GetEnvironmentOutputFilterSensitiveLog,
  InternalServerException: () => InternalServerException,
  ListEnvironmentsCommand: () => ListEnvironmentsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  LoggingLevel: () => LoggingLevel,
  MWAA: () => MWAA,
  MWAAClient: () => MWAAClient,
  MWAAServiceException: () => MWAAServiceException,
  PublishMetricsCommand: () => PublishMetricsCommand,
  ResourceNotFoundException: () => ResourceNotFoundException,
  TagResourceCommand: () => TagResourceCommand,
  Unit: () => Unit,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateEnvironmentCommand: () => UpdateEnvironmentCommand,
  UpdateEnvironmentInputFilterSensitiveLog: () => UpdateEnvironmentInputFilterSensitiveLog,
  UpdateStatus: () => UpdateStatus,
  ValidationException: () => ValidationException,
  WebserverAccessMode: () => WebserverAccessMode,
  __Client: () => import_smithy_client.Client,
  paginateListEnvironments: () => paginateListEnvironments
});
module.exports = __toCommonJS(src_exports);

// src/MWAAClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "airflow"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/MWAAClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/MWAAClient.ts
var _MWAAClient = class _MWAAClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultMWAAHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_MWAAClient, "MWAAClient");
var MWAAClient = _MWAAClient;

// src/MWAA.ts


// src/commands/CreateCliTokenCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/models/models_0.ts


// src/models/MWAAServiceException.ts

var _MWAAServiceException = class _MWAAServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _MWAAServiceException.prototype);
  }
};
__name(_MWAAServiceException, "MWAAServiceException");
var MWAAServiceException = _MWAAServiceException;

// src/models/models_0.ts
var _AccessDeniedException = class _AccessDeniedException extends MWAAServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_AccessDeniedException, "AccessDeniedException");
var AccessDeniedException = _AccessDeniedException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends MWAAServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var EndpointManagement = {
  CUSTOMER: "CUSTOMER",
  SERVICE: "SERVICE"
};
var LoggingLevel = {
  CRITICAL: "CRITICAL",
  DEBUG: "DEBUG",
  ERROR: "ERROR",
  INFO: "INFO",
  WARNING: "WARNING"
};
var WebserverAccessMode = {
  PRIVATE_ONLY: "PRIVATE_ONLY",
  PUBLIC_ONLY: "PUBLIC_ONLY"
};
var _InternalServerException = class _InternalServerException extends MWAAServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _ValidationException = class _ValidationException extends MWAAServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var UpdateStatus = {
  FAILED: "FAILED",
  PENDING: "PENDING",
  SUCCESS: "SUCCESS"
};
var EnvironmentStatus = {
  AVAILABLE: "AVAILABLE",
  CREATE_FAILED: "CREATE_FAILED",
  CREATING: "CREATING",
  CREATING_SNAPSHOT: "CREATING_SNAPSHOT",
  DELETED: "DELETED",
  DELETING: "DELETING",
  MAINTENANCE: "MAINTENANCE",
  PENDING: "PENDING",
  ROLLING_BACK: "ROLLING_BACK",
  UNAVAILABLE: "UNAVAILABLE",
  UPDATE_FAILED: "UPDATE_FAILED",
  UPDATING: "UPDATING"
};
var Unit = {
  BITS: "Bits",
  BITS_PER_SECOND: "Bits/Second",
  BYTES: "Bytes",
  BYTES_PER_SECOND: "Bytes/Second",
  COUNT: "Count",
  COUNT_PER_SECOND: "Count/Second",
  GIGABITS: "Gigabits",
  GIGABITS_PER_SECOND: "Gigabits/Second",
  GIGABYTES: "Gigabytes",
  GIGABYTES_PER_SECOND: "Gigabytes/Second",
  KILOBITS: "Kilobits",
  KILOBITS_PER_SECOND: "Kilobits/Second",
  KILOBYTES: "Kilobytes",
  KILOBYTES_PER_SECOND: "Kilobytes/Second",
  MEGABITS: "Megabits",
  MEGABITS_PER_SECOND: "Megabits/Second",
  MEGABYTES: "Megabytes",
  MEGABYTES_PER_SECOND: "Megabytes/Second",
  MICROSECONDS: "Microseconds",
  MILLISECONDS: "Milliseconds",
  NONE: "None",
  PERCENT: "Percent",
  SECONDS: "Seconds",
  TERABITS: "Terabits",
  TERABITS_PER_SECOND: "Terabits/Second",
  TERABYTES: "Terabytes",
  TERABYTES_PER_SECOND: "Terabytes/Second"
};
var CreateCliTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.CliToken && { CliToken: import_smithy_client.SENSITIVE_STRING }
}), "CreateCliTokenResponseFilterSensitiveLog");
var CreateEnvironmentInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.AirflowConfigurationOptions && { AirflowConfigurationOptions: import_smithy_client.SENSITIVE_STRING }
}), "CreateEnvironmentInputFilterSensitiveLog");
var CreateWebLoginTokenResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.WebToken && { WebToken: import_smithy_client.SENSITIVE_STRING }
}), "CreateWebLoginTokenResponseFilterSensitiveLog");
var EnvironmentFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.AirflowConfigurationOptions && { AirflowConfigurationOptions: import_smithy_client.SENSITIVE_STRING }
}), "EnvironmentFilterSensitiveLog");
var GetEnvironmentOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Environment && { Environment: EnvironmentFilterSensitiveLog(obj.Environment) }
}), "GetEnvironmentOutputFilterSensitiveLog");
var UpdateEnvironmentInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.AirflowConfigurationOptions && { AirflowConfigurationOptions: import_smithy_client.SENSITIVE_STRING }
}), "UpdateEnvironmentInputFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



var se_CreateCliTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/clitoken/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "env." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateCliTokenCommand");
var se_CreateEnvironmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/environments/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AirflowConfigurationOptions: (_) => (0, import_smithy_client._json)(_),
      AirflowVersion: [],
      DagS3Path: [],
      EndpointManagement: [],
      EnvironmentClass: [],
      ExecutionRoleArn: [],
      KmsKey: [],
      LoggingConfiguration: (_) => (0, import_smithy_client._json)(_),
      MaxWorkers: [],
      MinWorkers: [],
      NetworkConfiguration: (_) => (0, import_smithy_client._json)(_),
      PluginsS3ObjectVersion: [],
      PluginsS3Path: [],
      RequirementsS3ObjectVersion: [],
      RequirementsS3Path: [],
      Schedulers: [],
      SourceBucketArn: [],
      StartupScriptS3ObjectVersion: [],
      StartupScriptS3Path: [],
      Tags: (_) => (0, import_smithy_client._json)(_),
      WebserverAccessMode: [],
      WeeklyMaintenanceWindowStart: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateEnvironmentCommand");
var se_CreateWebLoginTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/webtoken/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "env." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateWebLoginTokenCommand");
var se_DeleteEnvironmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/environments/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteEnvironmentCommand");
var se_GetEnvironmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/environments/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetEnvironmentCommand");
var se_ListEnvironmentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/environments");
  const query = (0, import_smithy_client.map)({
    [_NT]: [, input[_NT]],
    [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListEnvironmentsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_PublishMetricsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/metrics/environments/{EnvironmentName}");
  b.p("EnvironmentName", () => input.EnvironmentName, "{EnvironmentName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      MetricData: (_) => se_MetricData(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "ops." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PublishMetricsCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null,
      () => (input[_tK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateEnvironmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/environments/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AirflowConfigurationOptions: (_) => (0, import_smithy_client._json)(_),
      AirflowVersion: [],
      DagS3Path: [],
      EnvironmentClass: [],
      ExecutionRoleArn: [],
      LoggingConfiguration: (_) => (0, import_smithy_client._json)(_),
      MaxWorkers: [],
      MinWorkers: [],
      NetworkConfiguration: (_) => (0, import_smithy_client._json)(_),
      PluginsS3ObjectVersion: [],
      PluginsS3Path: [],
      RequirementsS3ObjectVersion: [],
      RequirementsS3Path: [],
      Schedulers: [],
      SourceBucketArn: [],
      StartupScriptS3ObjectVersion: [],
      StartupScriptS3Path: [],
      WebserverAccessMode: [],
      WeeklyMaintenanceWindowStart: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateEnvironmentCommand");
var de_CreateCliTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CliToken: import_smithy_client.expectString,
    WebServerHostname: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCliTokenCommand");
var de_CreateEnvironmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateEnvironmentCommand");
var de_CreateWebLoginTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    AirflowIdentity: import_smithy_client.expectString,
    IamIdentity: import_smithy_client.expectString,
    WebServerHostname: import_smithy_client.expectString,
    WebToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateWebLoginTokenCommand");
var de_DeleteEnvironmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteEnvironmentCommand");
var de_GetEnvironmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Environment: (_) => de_Environment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetEnvironmentCommand");
var de_ListEnvironmentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Environments: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListEnvironmentsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_PublishMetricsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PublishMetricsCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateEnvironmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Arn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateEnvironmentCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFoundException":
    case "com.amazonaws.mwaa#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.mwaa#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.mwaa#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "AccessDeniedException":
    case "com.amazonaws.mwaa#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(MWAAServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var se_MetricData = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_MetricDatum(entry, context);
  });
}, "se_MetricData");
var se_MetricDatum = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Dimensions: import_smithy_client._json,
    MetricName: [],
    StatisticValues: (_) => se_StatisticSet(_, context),
    Timestamp: (_) => Math.round(_.getTime() / 1e3),
    Unit: [],
    Value: import_smithy_client.serializeFloat
  });
}, "se_MetricDatum");
var se_StatisticSet = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Maximum: import_smithy_client.serializeFloat,
    Minimum: import_smithy_client.serializeFloat,
    SampleCount: [],
    Sum: import_smithy_client.serializeFloat
  });
}, "se_StatisticSet");
var de_Environment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AirflowConfigurationOptions: import_smithy_client._json,
    AirflowVersion: import_smithy_client.expectString,
    Arn: import_smithy_client.expectString,
    CeleryExecutorQueue: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    DagS3Path: import_smithy_client.expectString,
    DatabaseVpcEndpointService: import_smithy_client.expectString,
    EndpointManagement: import_smithy_client.expectString,
    EnvironmentClass: import_smithy_client.expectString,
    ExecutionRoleArn: import_smithy_client.expectString,
    KmsKey: import_smithy_client.expectString,
    LastUpdate: (_) => de_LastUpdate(_, context),
    LoggingConfiguration: import_smithy_client._json,
    MaxWorkers: import_smithy_client.expectInt32,
    MinWorkers: import_smithy_client.expectInt32,
    Name: import_smithy_client.expectString,
    NetworkConfiguration: import_smithy_client._json,
    PluginsS3ObjectVersion: import_smithy_client.expectString,
    PluginsS3Path: import_smithy_client.expectString,
    RequirementsS3ObjectVersion: import_smithy_client.expectString,
    RequirementsS3Path: import_smithy_client.expectString,
    Schedulers: import_smithy_client.expectInt32,
    ServiceRoleArn: import_smithy_client.expectString,
    SourceBucketArn: import_smithy_client.expectString,
    StartupScriptS3ObjectVersion: import_smithy_client.expectString,
    StartupScriptS3Path: import_smithy_client.expectString,
    Status: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    WebserverAccessMode: import_smithy_client.expectString,
    WebserverUrl: import_smithy_client.expectString,
    WebserverVpcEndpointService: import_smithy_client.expectString,
    WeeklyMaintenanceWindowStart: import_smithy_client.expectString
  });
}, "de_Environment");
var de_LastUpdate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Error: import_smithy_client._json,
    Source: import_smithy_client.expectString,
    Status: import_smithy_client.expectString
  });
}, "de_LastUpdate");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _MR = "MaxResults";
var _NT = "NextToken";
var _tK = "tagKeys";

// src/commands/CreateCliTokenCommand.ts
var _CreateCliTokenCommand = class _CreateCliTokenCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "CreateCliToken", {}).n("MWAAClient", "CreateCliTokenCommand").f(void 0, CreateCliTokenResponseFilterSensitiveLog).ser(se_CreateCliTokenCommand).de(de_CreateCliTokenCommand).build() {
};
__name(_CreateCliTokenCommand, "CreateCliTokenCommand");
var CreateCliTokenCommand = _CreateCliTokenCommand;

// src/commands/CreateEnvironmentCommand.ts




var _CreateEnvironmentCommand = class _CreateEnvironmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "CreateEnvironment", {}).n("MWAAClient", "CreateEnvironmentCommand").f(CreateEnvironmentInputFilterSensitiveLog, void 0).ser(se_CreateEnvironmentCommand).de(de_CreateEnvironmentCommand).build() {
};
__name(_CreateEnvironmentCommand, "CreateEnvironmentCommand");
var CreateEnvironmentCommand = _CreateEnvironmentCommand;

// src/commands/CreateWebLoginTokenCommand.ts




var _CreateWebLoginTokenCommand = class _CreateWebLoginTokenCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "CreateWebLoginToken", {}).n("MWAAClient", "CreateWebLoginTokenCommand").f(void 0, CreateWebLoginTokenResponseFilterSensitiveLog).ser(se_CreateWebLoginTokenCommand).de(de_CreateWebLoginTokenCommand).build() {
};
__name(_CreateWebLoginTokenCommand, "CreateWebLoginTokenCommand");
var CreateWebLoginTokenCommand = _CreateWebLoginTokenCommand;

// src/commands/DeleteEnvironmentCommand.ts




var _DeleteEnvironmentCommand = class _DeleteEnvironmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "DeleteEnvironment", {}).n("MWAAClient", "DeleteEnvironmentCommand").f(void 0, void 0).ser(se_DeleteEnvironmentCommand).de(de_DeleteEnvironmentCommand).build() {
};
__name(_DeleteEnvironmentCommand, "DeleteEnvironmentCommand");
var DeleteEnvironmentCommand = _DeleteEnvironmentCommand;

// src/commands/GetEnvironmentCommand.ts




var _GetEnvironmentCommand = class _GetEnvironmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "GetEnvironment", {}).n("MWAAClient", "GetEnvironmentCommand").f(void 0, GetEnvironmentOutputFilterSensitiveLog).ser(se_GetEnvironmentCommand).de(de_GetEnvironmentCommand).build() {
};
__name(_GetEnvironmentCommand, "GetEnvironmentCommand");
var GetEnvironmentCommand = _GetEnvironmentCommand;

// src/commands/ListEnvironmentsCommand.ts




var _ListEnvironmentsCommand = class _ListEnvironmentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "ListEnvironments", {}).n("MWAAClient", "ListEnvironmentsCommand").f(void 0, void 0).ser(se_ListEnvironmentsCommand).de(de_ListEnvironmentsCommand).build() {
};
__name(_ListEnvironmentsCommand, "ListEnvironmentsCommand");
var ListEnvironmentsCommand = _ListEnvironmentsCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "ListTagsForResource", {}).n("MWAAClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/PublishMetricsCommand.ts




var _PublishMetricsCommand = class _PublishMetricsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "PublishMetrics", {}).n("MWAAClient", "PublishMetricsCommand").f(void 0, void 0).ser(se_PublishMetricsCommand).de(de_PublishMetricsCommand).build() {
};
__name(_PublishMetricsCommand, "PublishMetricsCommand");
var PublishMetricsCommand = _PublishMetricsCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "TagResource", {}).n("MWAAClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "UntagResource", {}).n("MWAAClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateEnvironmentCommand.ts




var _UpdateEnvironmentCommand = class _UpdateEnvironmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonMWAA", "UpdateEnvironment", {}).n("MWAAClient", "UpdateEnvironmentCommand").f(UpdateEnvironmentInputFilterSensitiveLog, void 0).ser(se_UpdateEnvironmentCommand).de(de_UpdateEnvironmentCommand).build() {
};
__name(_UpdateEnvironmentCommand, "UpdateEnvironmentCommand");
var UpdateEnvironmentCommand = _UpdateEnvironmentCommand;

// src/MWAA.ts
var commands = {
  CreateCliTokenCommand,
  CreateEnvironmentCommand,
  CreateWebLoginTokenCommand,
  DeleteEnvironmentCommand,
  GetEnvironmentCommand,
  ListEnvironmentsCommand,
  ListTagsForResourceCommand,
  PublishMetricsCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateEnvironmentCommand
};
var _MWAA = class _MWAA extends MWAAClient {
};
__name(_MWAA, "MWAA");
var MWAA = _MWAA;
(0, import_smithy_client.createAggregatedClient)(commands, MWAA);

// src/pagination/ListEnvironmentsPaginator.ts

var paginateListEnvironments = (0, import_core.createPaginator)(MWAAClient, ListEnvironmentsCommand, "NextToken", "NextToken", "MaxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  MWAAServiceException,
  __Client,
  MWAAClient,
  MWAA,
  $Command,
  CreateCliTokenCommand,
  CreateEnvironmentCommand,
  CreateWebLoginTokenCommand,
  DeleteEnvironmentCommand,
  GetEnvironmentCommand,
  ListEnvironmentsCommand,
  ListTagsForResourceCommand,
  PublishMetricsCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateEnvironmentCommand,
  paginateListEnvironments,
  AccessDeniedException,
  ResourceNotFoundException,
  EndpointManagement,
  LoggingLevel,
  WebserverAccessMode,
  InternalServerException,
  ValidationException,
  UpdateStatus,
  EnvironmentStatus,
  Unit,
  CreateCliTokenResponseFilterSensitiveLog,
  CreateEnvironmentInputFilterSensitiveLog,
  CreateWebLoginTokenResponseFilterSensitiveLog,
  EnvironmentFilterSensitiveLog,
  GetEnvironmentOutputFilterSensitiveLog,
  UpdateEnvironmentInputFilterSensitiveLog
});

