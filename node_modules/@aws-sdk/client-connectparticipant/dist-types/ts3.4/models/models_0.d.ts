import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ConnectParticipantServiceException as __BaseException } from "./ConnectParticipantServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface CompleteAttachmentUploadRequest {
  AttachmentIds: string[] | undefined;
  ClientToken?: string;
  ConnectionToken: string | undefined;
}
export interface CompleteAttachmentUploadResponse {}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const ConnectionType: {
  readonly CONNECTION_CREDENTIALS: "CONNECTION_CREDENTIALS";
  readonly WEBSOCKET: "WEBSOCKET";
};
export type ConnectionType =
  (typeof ConnectionType)[keyof typeof ConnectionType];
export interface CreateParticipantConnectionRequest {
  Type?: ConnectionType[];
  ParticipantToken: string | undefined;
  ConnectParticipant?: boolean;
}
export interface ConnectionCredentials {
  ConnectionToken?: string;
  Expiry?: string;
}
export interface Websocket {
  Url?: string;
  ConnectionExpiry?: string;
}
export interface CreateParticipantConnectionResponse {
  Websocket?: Websocket;
  ConnectionCredentials?: ConnectionCredentials;
}
export interface DescribeViewRequest {
  ViewToken: string | undefined;
  ConnectionToken: string | undefined;
}
export interface ViewContent {
  InputSchema?: string;
  Template?: string;
  Actions?: string[];
}
export interface View {
  Id?: string;
  Arn?: string;
  Name?: string;
  Version?: number;
  Content?: ViewContent;
}
export interface DescribeViewResponse {
  View?: View;
}
export declare const ResourceType: {
  readonly CONTACT: "CONTACT";
  readonly CONTACT_FLOW: "CONTACT_FLOW";
  readonly HIERARCHY_GROUP: "HIERARCHY_GROUP";
  readonly HIERARCHY_LEVEL: "HIERARCHY_LEVEL";
  readonly INSTANCE: "INSTANCE";
  readonly PARTICIPANT: "PARTICIPANT";
  readonly PHONE_NUMBER: "PHONE_NUMBER";
  readonly USER: "USER";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  ResourceId?: string;
  ResourceType?: ResourceType;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface DisconnectParticipantRequest {
  ClientToken?: string;
  ConnectionToken: string | undefined;
}
export interface DisconnectParticipantResponse {}
export interface GetAttachmentRequest {
  AttachmentId: string | undefined;
  ConnectionToken: string | undefined;
}
export interface GetAttachmentResponse {
  Url?: string;
  UrlExpiry?: string;
}
export declare const ScanDirection: {
  readonly BACKWARD: "BACKWARD";
  readonly FORWARD: "FORWARD";
};
export type ScanDirection = (typeof ScanDirection)[keyof typeof ScanDirection];
export declare const SortKey: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortKey = (typeof SortKey)[keyof typeof SortKey];
export interface StartPosition {
  Id?: string;
  AbsoluteTime?: string;
  MostRecent?: number;
}
export interface GetTranscriptRequest {
  ContactId?: string;
  MaxResults?: number;
  NextToken?: string;
  ScanDirection?: ScanDirection;
  SortOrder?: SortKey;
  StartPosition?: StartPosition;
  ConnectionToken: string | undefined;
}
export declare const ArtifactStatus: {
  readonly APPROVED: "APPROVED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly REJECTED: "REJECTED";
};
export type ArtifactStatus =
  (typeof ArtifactStatus)[keyof typeof ArtifactStatus];
export interface AttachmentItem {
  ContentType?: string;
  AttachmentId?: string;
  AttachmentName?: string;
  Status?: ArtifactStatus;
}
export interface Receipt {
  DeliveredTimestamp?: string;
  ReadTimestamp?: string;
  RecipientParticipantId?: string;
}
export interface MessageMetadata {
  MessageId?: string;
  Receipts?: Receipt[];
}
export declare const ParticipantRole: {
  readonly AGENT: "AGENT";
  readonly CUSTOMER: "CUSTOMER";
  readonly CUSTOM_BOT: "CUSTOM_BOT";
  readonly SUPERVISOR: "SUPERVISOR";
  readonly SYSTEM: "SYSTEM";
};
export type ParticipantRole =
  (typeof ParticipantRole)[keyof typeof ParticipantRole];
export declare const ChatItemType: {
  readonly ATTACHMENT: "ATTACHMENT";
  readonly CHAT_ENDED: "CHAT_ENDED";
  readonly CONNECTION_ACK: "CONNECTION_ACK";
  readonly EVENT: "EVENT";
  readonly MESSAGE: "MESSAGE";
  readonly MESSAGE_DELIVERED: "MESSAGE_DELIVERED";
  readonly MESSAGE_READ: "MESSAGE_READ";
  readonly PARTICIPANT_JOINED: "PARTICIPANT_JOINED";
  readonly PARTICIPANT_LEFT: "PARTICIPANT_LEFT";
  readonly TRANSFER_FAILED: "TRANSFER_FAILED";
  readonly TRANSFER_SUCCEEDED: "TRANSFER_SUCCEEDED";
  readonly TYPING: "TYPING";
};
export type ChatItemType = (typeof ChatItemType)[keyof typeof ChatItemType];
export interface Item {
  AbsoluteTime?: string;
  Content?: string;
  ContentType?: string;
  Id?: string;
  Type?: ChatItemType;
  ParticipantId?: string;
  DisplayName?: string;
  ParticipantRole?: ParticipantRole;
  Attachments?: AttachmentItem[];
  MessageMetadata?: MessageMetadata;
  RelatedContactId?: string;
  ContactId?: string;
}
export interface GetTranscriptResponse {
  InitialContactId?: string;
  Transcript?: Item[];
  NextToken?: string;
}
export interface SendEventRequest {
  ContentType: string | undefined;
  Content?: string;
  ClientToken?: string;
  ConnectionToken: string | undefined;
}
export interface SendEventResponse {
  Id?: string;
  AbsoluteTime?: string;
}
export interface SendMessageRequest {
  ContentType: string | undefined;
  Content: string | undefined;
  ClientToken?: string;
  ConnectionToken: string | undefined;
}
export interface SendMessageResponse {
  Id?: string;
  AbsoluteTime?: string;
}
export interface StartAttachmentUploadRequest {
  ContentType: string | undefined;
  AttachmentSizeInBytes: number | undefined;
  AttachmentName: string | undefined;
  ClientToken?: string;
  ConnectionToken: string | undefined;
}
export interface UploadMetadata {
  Url?: string;
  UrlExpiry?: string;
  HeadersToInclude?: Record<string, string>;
}
export interface StartAttachmentUploadResponse {
  AttachmentId?: string;
  UploadMetadata?: UploadMetadata;
}
export declare const ViewContentFilterSensitiveLog: (obj: ViewContent) => any;
export declare const ViewFilterSensitiveLog: (obj: View) => any;
export declare const DescribeViewResponseFilterSensitiveLog: (
  obj: DescribeViewResponse
) => any;
