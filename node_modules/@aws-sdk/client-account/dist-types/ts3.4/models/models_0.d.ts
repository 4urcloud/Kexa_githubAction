import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AccountServiceException as __BaseException } from "./AccountServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AlternateContactType: {
  readonly BILLING: "BILLING";
  readonly OPERATIONS: "OPERATIONS";
  readonly SECURITY: "SECURITY";
};
export type AlternateContactType =
  (typeof AlternateContactType)[keyof typeof AlternateContactType];
export interface DeleteAlternateContactRequest {
  AlternateContactType: AlternateContactType | undefined;
  AccountId?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  $retryable: {};
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  $retryable: {
    throttling: boolean;
  };
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly FIELD_VALIDATION_FAILED: "fieldValidationFailed";
  readonly INVALID_REGION_OPT_TARGET: "invalidRegionOptTarget";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason?: ValidationExceptionReason;
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface GetAlternateContactRequest {
  AlternateContactType: AlternateContactType | undefined;
  AccountId?: string;
}
export interface AlternateContact {
  Name?: string;
  Title?: string;
  EmailAddress?: string;
  PhoneNumber?: string;
  AlternateContactType?: AlternateContactType;
}
export interface GetAlternateContactResponse {
  AlternateContact?: AlternateContact;
}
export interface PutAlternateContactRequest {
  Name: string | undefined;
  Title: string | undefined;
  EmailAddress: string | undefined;
  PhoneNumber: string | undefined;
  AlternateContactType: AlternateContactType | undefined;
  AccountId?: string;
}
export interface GetContactInformationRequest {
  AccountId?: string;
}
export interface ContactInformation {
  FullName: string | undefined;
  AddressLine1: string | undefined;
  AddressLine2?: string;
  AddressLine3?: string;
  City: string | undefined;
  StateOrRegion?: string;
  DistrictOrCounty?: string;
  PostalCode: string | undefined;
  CountryCode: string | undefined;
  PhoneNumber: string | undefined;
  CompanyName?: string;
  WebsiteUrl?: string;
}
export interface GetContactInformationResponse {
  ContactInformation?: ContactInformation;
}
export interface PutContactInformationRequest {
  ContactInformation: ContactInformation | undefined;
  AccountId?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DisableRegionRequest {
  AccountId?: string;
  RegionName: string | undefined;
}
export interface EnableRegionRequest {
  AccountId?: string;
  RegionName: string | undefined;
}
export interface GetRegionOptStatusRequest {
  AccountId?: string;
  RegionName: string | undefined;
}
export declare const RegionOptStatus: {
  readonly DISABLED: "DISABLED";
  readonly DISABLING: "DISABLING";
  readonly ENABLED: "ENABLED";
  readonly ENABLED_BY_DEFAULT: "ENABLED_BY_DEFAULT";
  readonly ENABLING: "ENABLING";
};
export type RegionOptStatus =
  (typeof RegionOptStatus)[keyof typeof RegionOptStatus];
export interface GetRegionOptStatusResponse {
  RegionName?: string;
  RegionOptStatus?: RegionOptStatus;
}
export interface ListRegionsRequest {
  AccountId?: string;
  MaxResults?: number;
  NextToken?: string;
  RegionOptStatusContains?: RegionOptStatus[];
}
export interface Region {
  RegionName?: string;
  RegionOptStatus?: RegionOptStatus;
}
export interface ListRegionsResponse {
  NextToken?: string;
  Regions?: Region[];
}
export declare const ValidationExceptionFieldFilterSensitiveLog: (
  obj: ValidationExceptionField
) => any;
export declare const AlternateContactFilterSensitiveLog: (
  obj: AlternateContact
) => any;
export declare const GetAlternateContactResponseFilterSensitiveLog: (
  obj: GetAlternateContactResponse
) => any;
export declare const PutAlternateContactRequestFilterSensitiveLog: (
  obj: PutAlternateContactRequest
) => any;
export declare const ContactInformationFilterSensitiveLog: (
  obj: ContactInformation
) => any;
export declare const GetContactInformationResponseFilterSensitiveLog: (
  obj: GetContactInformationResponse
) => any;
export declare const PutContactInformationRequestFilterSensitiveLog: (
  obj: PutContactInformationRequest
) => any;
