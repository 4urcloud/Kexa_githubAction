import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { AccountClient } from "./AccountClient";
import { DeleteAlternateContactCommandInput, DeleteAlternateContactCommandOutput } from "./commands/DeleteAlternateContactCommand";
import { DisableRegionCommandInput, DisableRegionCommandOutput } from "./commands/DisableRegionCommand";
import { EnableRegionCommandInput, EnableRegionCommandOutput } from "./commands/EnableRegionCommand";
import { GetAlternateContactCommandInput, GetAlternateContactCommandOutput } from "./commands/GetAlternateContactCommand";
import { GetContactInformationCommandInput, GetContactInformationCommandOutput } from "./commands/GetContactInformationCommand";
import { GetRegionOptStatusCommandInput, GetRegionOptStatusCommandOutput } from "./commands/GetRegionOptStatusCommand";
import { ListRegionsCommandInput, ListRegionsCommandOutput } from "./commands/ListRegionsCommand";
import { PutAlternateContactCommandInput, PutAlternateContactCommandOutput } from "./commands/PutAlternateContactCommand";
import { PutContactInformationCommandInput, PutContactInformationCommandOutput } from "./commands/PutContactInformationCommand";
export interface Account {
    /**
     * @see {@link DeleteAlternateContactCommand}
     */
    deleteAlternateContact(args: DeleteAlternateContactCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAlternateContactCommandOutput>;
    deleteAlternateContact(args: DeleteAlternateContactCommandInput, cb: (err: any, data?: DeleteAlternateContactCommandOutput) => void): void;
    deleteAlternateContact(args: DeleteAlternateContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAlternateContactCommandOutput) => void): void;
    /**
     * @see {@link DisableRegionCommand}
     */
    disableRegion(args: DisableRegionCommandInput, options?: __HttpHandlerOptions): Promise<DisableRegionCommandOutput>;
    disableRegion(args: DisableRegionCommandInput, cb: (err: any, data?: DisableRegionCommandOutput) => void): void;
    disableRegion(args: DisableRegionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableRegionCommandOutput) => void): void;
    /**
     * @see {@link EnableRegionCommand}
     */
    enableRegion(args: EnableRegionCommandInput, options?: __HttpHandlerOptions): Promise<EnableRegionCommandOutput>;
    enableRegion(args: EnableRegionCommandInput, cb: (err: any, data?: EnableRegionCommandOutput) => void): void;
    enableRegion(args: EnableRegionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableRegionCommandOutput) => void): void;
    /**
     * @see {@link GetAlternateContactCommand}
     */
    getAlternateContact(args: GetAlternateContactCommandInput, options?: __HttpHandlerOptions): Promise<GetAlternateContactCommandOutput>;
    getAlternateContact(args: GetAlternateContactCommandInput, cb: (err: any, data?: GetAlternateContactCommandOutput) => void): void;
    getAlternateContact(args: GetAlternateContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAlternateContactCommandOutput) => void): void;
    /**
     * @see {@link GetContactInformationCommand}
     */
    getContactInformation(): Promise<GetContactInformationCommandOutput>;
    getContactInformation(args: GetContactInformationCommandInput, options?: __HttpHandlerOptions): Promise<GetContactInformationCommandOutput>;
    getContactInformation(args: GetContactInformationCommandInput, cb: (err: any, data?: GetContactInformationCommandOutput) => void): void;
    getContactInformation(args: GetContactInformationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContactInformationCommandOutput) => void): void;
    /**
     * @see {@link GetRegionOptStatusCommand}
     */
    getRegionOptStatus(args: GetRegionOptStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetRegionOptStatusCommandOutput>;
    getRegionOptStatus(args: GetRegionOptStatusCommandInput, cb: (err: any, data?: GetRegionOptStatusCommandOutput) => void): void;
    getRegionOptStatus(args: GetRegionOptStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRegionOptStatusCommandOutput) => void): void;
    /**
     * @see {@link ListRegionsCommand}
     */
    listRegions(): Promise<ListRegionsCommandOutput>;
    listRegions(args: ListRegionsCommandInput, options?: __HttpHandlerOptions): Promise<ListRegionsCommandOutput>;
    listRegions(args: ListRegionsCommandInput, cb: (err: any, data?: ListRegionsCommandOutput) => void): void;
    listRegions(args: ListRegionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRegionsCommandOutput) => void): void;
    /**
     * @see {@link PutAlternateContactCommand}
     */
    putAlternateContact(args: PutAlternateContactCommandInput, options?: __HttpHandlerOptions): Promise<PutAlternateContactCommandOutput>;
    putAlternateContact(args: PutAlternateContactCommandInput, cb: (err: any, data?: PutAlternateContactCommandOutput) => void): void;
    putAlternateContact(args: PutAlternateContactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAlternateContactCommandOutput) => void): void;
    /**
     * @see {@link PutContactInformationCommand}
     */
    putContactInformation(args: PutContactInformationCommandInput, options?: __HttpHandlerOptions): Promise<PutContactInformationCommandOutput>;
    putContactInformation(args: PutContactInformationCommandInput, cb: (err: any, data?: PutContactInformationCommandOutput) => void): void;
    putContactInformation(args: PutContactInformationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutContactInformationCommandOutput) => void): void;
}
/**
 * <p>Operations for Amazon Web Services Account Management</p>
 * @public
 */
export declare class Account extends AccountClient implements Account {
}
