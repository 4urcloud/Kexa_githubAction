import {
  CdiInputSpecification,
  ChannelClass,
  ChannelEgressEndpoint,
  ChannelPipelineIdToRestart,
  ChannelState,
  ChannelSummary,
  DeviceSettingsSyncState,
  DeviceUpdateStatus,
  Input,
  InputAttachment,
  InputDestinationRequest,
  InputDeviceConnectionState,
  InputDeviceHdSettings,
  InputDeviceNetworkSettings,
  InputDeviceOutputType,
  InputDeviceRequest,
  InputDeviceSummary,
  InputDeviceType,
  InputDeviceUhdSettings,
  InputSecurityGroup,
  InputSourceRequest,
  InputSpecification,
  InputWhitelistRuleCidr,
  LogLevel,
  MaintenanceDay,
  MaintenanceStatus,
  MediaConnectFlowRequest,
  MultiplexOutputDestination,
  MultiplexProgramSummary,
  MultiplexState,
  MultiplexSummary,
  Offering,
  OutputDestination,
  VpcOutputSettingsDescription,
} from "./models_0";
import {
  AccountConfiguration,
  Channel,
  EncoderSettings,
  InputDeviceConfigurableSettings,
  Multiplex,
  MultiplexProgram,
  MultiplexProgramSettings,
  MultiplexSettings,
  PipelineDetail,
  RenewalSettings,
  Reservation,
  TransferringInputDeviceSummary,
} from "./models_1";
export interface ListChannelsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListChannelsResponse {
  Channels?: ChannelSummary[];
  NextToken?: string;
}
export interface ListInputDevicesRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListInputDevicesResponse {
  InputDevices?: InputDeviceSummary[];
  NextToken?: string;
}
export interface ListInputDeviceTransfersRequest {
  MaxResults?: number;
  NextToken?: string;
  TransferType: string | undefined;
}
export interface ListInputDeviceTransfersResponse {
  InputDeviceTransfers?: TransferringInputDeviceSummary[];
  NextToken?: string;
}
export interface ListInputsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListInputsResponse {
  Inputs?: Input[];
  NextToken?: string;
}
export interface ListInputSecurityGroupsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListInputSecurityGroupsResponse {
  InputSecurityGroups?: InputSecurityGroup[];
  NextToken?: string;
}
export interface ListMultiplexesRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListMultiplexesResponse {
  Multiplexes?: MultiplexSummary[];
  NextToken?: string;
}
export interface ListMultiplexProgramsRequest {
  MaxResults?: number;
  MultiplexId: string | undefined;
  NextToken?: string;
}
export interface ListMultiplexProgramsResponse {
  MultiplexPrograms?: MultiplexProgramSummary[];
  NextToken?: string;
}
export interface ListOfferingsRequest {
  ChannelClass?: string;
  ChannelConfiguration?: string;
  Codec?: string;
  Duration?: string;
  MaxResults?: number;
  MaximumBitrate?: string;
  MaximumFramerate?: string;
  NextToken?: string;
  Resolution?: string;
  ResourceType?: string;
  SpecialFeature?: string;
  VideoQuality?: string;
}
export interface ListOfferingsResponse {
  NextToken?: string;
  Offerings?: Offering[];
}
export interface ListReservationsRequest {
  ChannelClass?: string;
  Codec?: string;
  MaxResults?: number;
  MaximumBitrate?: string;
  MaximumFramerate?: string;
  NextToken?: string;
  Resolution?: string;
  ResourceType?: string;
  SpecialFeature?: string;
  VideoQuality?: string;
}
export interface ListReservationsResponse {
  NextToken?: string;
  Reservations?: Reservation[];
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface MaintenanceUpdateSettings {
  MaintenanceDay?: MaintenanceDay;
  MaintenanceScheduledDate?: string;
  MaintenanceStartTime?: string;
}
export interface PurchaseOfferingRequest {
  Count: number | undefined;
  Name?: string;
  OfferingId: string | undefined;
  RenewalSettings?: RenewalSettings;
  RequestId?: string;
  Start?: string;
  Tags?: Record<string, string>;
}
export interface PurchaseOfferingResponse {
  Reservation?: Reservation;
}
export declare const RebootInputDeviceForce: {
  readonly NO: "NO";
  readonly YES: "YES";
};
export type RebootInputDeviceForce =
  (typeof RebootInputDeviceForce)[keyof typeof RebootInputDeviceForce];
export interface RebootInputDeviceRequest {
  Force?: RebootInputDeviceForce;
  InputDeviceId: string | undefined;
}
export interface RebootInputDeviceResponse {}
export interface RejectInputDeviceTransferRequest {
  InputDeviceId: string | undefined;
}
export interface RejectInputDeviceTransferResponse {}
export interface RestartChannelPipelinesRequest {
  ChannelId: string | undefined;
  PipelineIds?: ChannelPipelineIdToRestart[];
}
export interface RestartChannelPipelinesResponse {
  Arn?: string;
  CdiInputSpecification?: CdiInputSpecification;
  ChannelClass?: ChannelClass;
  Destinations?: OutputDestination[];
  EgressEndpoints?: ChannelEgressEndpoint[];
  EncoderSettings?: EncoderSettings;
  Id?: string;
  InputAttachments?: InputAttachment[];
  InputSpecification?: InputSpecification;
  LogLevel?: LogLevel;
  Maintenance?: MaintenanceStatus;
  MaintenanceStatus?: string;
  Name?: string;
  PipelineDetails?: PipelineDetail[];
  PipelinesRunningCount?: number;
  RoleArn?: string;
  State?: ChannelState;
  Tags?: Record<string, string>;
  Vpc?: VpcOutputSettingsDescription;
}
export interface StartChannelRequest {
  ChannelId: string | undefined;
}
export interface StartChannelResponse {
  Arn?: string;
  CdiInputSpecification?: CdiInputSpecification;
  ChannelClass?: ChannelClass;
  Destinations?: OutputDestination[];
  EgressEndpoints?: ChannelEgressEndpoint[];
  EncoderSettings?: EncoderSettings;
  Id?: string;
  InputAttachments?: InputAttachment[];
  InputSpecification?: InputSpecification;
  LogLevel?: LogLevel;
  Maintenance?: MaintenanceStatus;
  Name?: string;
  PipelineDetails?: PipelineDetail[];
  PipelinesRunningCount?: number;
  RoleArn?: string;
  State?: ChannelState;
  Tags?: Record<string, string>;
  Vpc?: VpcOutputSettingsDescription;
}
export interface StartInputDeviceRequest {
  InputDeviceId: string | undefined;
}
export interface StartInputDeviceResponse {}
export interface StartInputDeviceMaintenanceWindowRequest {
  InputDeviceId: string | undefined;
}
export interface StartInputDeviceMaintenanceWindowResponse {}
export interface StartMultiplexRequest {
  MultiplexId: string | undefined;
}
export interface StartMultiplexResponse {
  Arn?: string;
  AvailabilityZones?: string[];
  Destinations?: MultiplexOutputDestination[];
  Id?: string;
  MultiplexSettings?: MultiplexSettings;
  Name?: string;
  PipelinesRunningCount?: number;
  ProgramCount?: number;
  State?: MultiplexState;
  Tags?: Record<string, string>;
}
export interface StopChannelRequest {
  ChannelId: string | undefined;
}
export interface StopChannelResponse {
  Arn?: string;
  CdiInputSpecification?: CdiInputSpecification;
  ChannelClass?: ChannelClass;
  Destinations?: OutputDestination[];
  EgressEndpoints?: ChannelEgressEndpoint[];
  EncoderSettings?: EncoderSettings;
  Id?: string;
  InputAttachments?: InputAttachment[];
  InputSpecification?: InputSpecification;
  LogLevel?: LogLevel;
  Maintenance?: MaintenanceStatus;
  Name?: string;
  PipelineDetails?: PipelineDetail[];
  PipelinesRunningCount?: number;
  RoleArn?: string;
  State?: ChannelState;
  Tags?: Record<string, string>;
  Vpc?: VpcOutputSettingsDescription;
}
export interface StopInputDeviceRequest {
  InputDeviceId: string | undefined;
}
export interface StopInputDeviceResponse {}
export interface StopMultiplexRequest {
  MultiplexId: string | undefined;
}
export interface StopMultiplexResponse {
  Arn?: string;
  AvailabilityZones?: string[];
  Destinations?: MultiplexOutputDestination[];
  Id?: string;
  MultiplexSettings?: MultiplexSettings;
  Name?: string;
  PipelinesRunningCount?: number;
  ProgramCount?: number;
  State?: MultiplexState;
  Tags?: Record<string, string>;
}
export interface TransferInputDeviceRequest {
  InputDeviceId: string | undefined;
  TargetCustomerId?: string;
  TargetRegion?: string;
  TransferMessage?: string;
}
export interface TransferInputDeviceResponse {}
export interface UpdateAccountConfigurationRequest {
  AccountConfiguration?: AccountConfiguration;
}
export interface UpdateAccountConfigurationResponse {
  AccountConfiguration?: AccountConfiguration;
}
export interface UpdateChannelRequest {
  CdiInputSpecification?: CdiInputSpecification;
  ChannelId: string | undefined;
  Destinations?: OutputDestination[];
  EncoderSettings?: EncoderSettings;
  InputAttachments?: InputAttachment[];
  InputSpecification?: InputSpecification;
  LogLevel?: LogLevel;
  Maintenance?: MaintenanceUpdateSettings;
  Name?: string;
  RoleArn?: string;
}
export interface UpdateChannelResponse {
  Channel?: Channel;
}
export interface UpdateChannelClassRequest {
  ChannelClass: ChannelClass | undefined;
  ChannelId: string | undefined;
  Destinations?: OutputDestination[];
}
export interface UpdateChannelClassResponse {
  Channel?: Channel;
}
export interface UpdateInputRequest {
  Destinations?: InputDestinationRequest[];
  InputDevices?: InputDeviceRequest[];
  InputId: string | undefined;
  InputSecurityGroups?: string[];
  MediaConnectFlows?: MediaConnectFlowRequest[];
  Name?: string;
  RoleArn?: string;
  Sources?: InputSourceRequest[];
}
export interface UpdateInputResponse {
  Input?: Input;
}
export interface UpdateInputDeviceRequest {
  HdDeviceSettings?: InputDeviceConfigurableSettings;
  InputDeviceId: string | undefined;
  Name?: string;
  UhdDeviceSettings?: InputDeviceConfigurableSettings;
  AvailabilityZone?: string;
}
export interface UpdateInputDeviceResponse {
  Arn?: string;
  ConnectionState?: InputDeviceConnectionState;
  DeviceSettingsSyncState?: DeviceSettingsSyncState;
  DeviceUpdateStatus?: DeviceUpdateStatus;
  HdDeviceSettings?: InputDeviceHdSettings;
  Id?: string;
  MacAddress?: string;
  Name?: string;
  NetworkSettings?: InputDeviceNetworkSettings;
  SerialNumber?: string;
  Type?: InputDeviceType;
  UhdDeviceSettings?: InputDeviceUhdSettings;
  Tags?: Record<string, string>;
  AvailabilityZone?: string;
  MedialiveInputArns?: string[];
  OutputType?: InputDeviceOutputType;
}
export interface UpdateInputSecurityGroupRequest {
  InputSecurityGroupId: string | undefined;
  Tags?: Record<string, string>;
  WhitelistRules?: InputWhitelistRuleCidr[];
}
export interface UpdateInputSecurityGroupResponse {
  SecurityGroup?: InputSecurityGroup;
}
export interface UpdateMultiplexRequest {
  MultiplexId: string | undefined;
  MultiplexSettings?: MultiplexSettings;
  Name?: string;
}
export interface UpdateMultiplexResponse {
  Multiplex?: Multiplex;
}
export interface UpdateMultiplexProgramRequest {
  MultiplexId: string | undefined;
  MultiplexProgramSettings?: MultiplexProgramSettings;
  ProgramName: string | undefined;
}
export interface UpdateMultiplexProgramResponse {
  MultiplexProgram?: MultiplexProgram;
}
export interface UpdateReservationRequest {
  Name?: string;
  RenewalSettings?: RenewalSettings;
  ReservationId: string | undefined;
}
export interface UpdateReservationResponse {
  Reservation?: Reservation;
}
