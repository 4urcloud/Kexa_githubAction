import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { ClusterLimitExceededException, ConflictException, Ec2RequestFailedException, InvalidAddressException, InvalidInputCombinationException, InvalidJobStateException, InvalidNextTokenException, InvalidResourceException, KMSRequestFailedException, ReturnShippingLabelAlreadyExistsException, UnsupportedAddressException, } from "../models/models_0";
import { SnowballServiceException as __BaseException } from "../models/SnowballServiceException";
export const se_CancelClusterCommand = async (input, context) => {
    const headers = sharedHeaders("CancelCluster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelJobCommand = async (input, context) => {
    const headers = sharedHeaders("CancelJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAddressCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAddress");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateClusterCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCluster");
    let body;
    body = JSON.stringify(se_CreateClusterRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateJob");
    let body;
    body = JSON.stringify(se_CreateJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLongTermPricingCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLongTermPricing");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateReturnShippingLabelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateReturnShippingLabel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAddressCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAddress");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAddressesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAddresses");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClusterCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCluster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeReturnShippingLabelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeReturnShippingLabel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobManifestCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobManifest");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetJobUnlockCodeCommand = async (input, context) => {
    const headers = sharedHeaders("GetJobUnlockCode");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSnowballUsageCommand = async (input, context) => {
    const headers = sharedHeaders("GetSnowballUsage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSoftwareUpdatesCommand = async (input, context) => {
    const headers = sharedHeaders("GetSoftwareUpdates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListClusterJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusterJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListClustersCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCompatibleImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCompatibleImages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLongTermPricingCommand = async (input, context) => {
    const headers = sharedHeaders("ListLongTermPricing");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPickupLocationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPickupLocations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateClusterCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCluster");
    let body;
    body = JSON.stringify(se_UpdateClusterRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateJob");
    let body;
    body = JSON.stringify(se_UpdateJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateJobShipmentStateCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateJobShipmentState");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateLongTermPricingCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateLongTermPricing");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CancelClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateClusterResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLongTermPricingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateReturnShippingLabelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClusterResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeJobResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeReturnShippingLabelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeReturnShippingLabelResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobManifestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetJobUnlockCodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSnowballUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSoftwareUpdatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListClusterJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListClusterJobsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListClustersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCompatibleImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListJobsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLongTermPricingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLongTermPricingResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPickupLocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateJobShipmentStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateLongTermPricingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidJobStateException":
        case "com.amazonaws.snowball#InvalidJobStateException":
            throw await de_InvalidJobStateExceptionRes(parsedOutput, context);
        case "InvalidResourceException":
        case "com.amazonaws.snowball#InvalidResourceException":
            throw await de_InvalidResourceExceptionRes(parsedOutput, context);
        case "KMSRequestFailedException":
        case "com.amazonaws.snowball#KMSRequestFailedException":
            throw await de_KMSRequestFailedExceptionRes(parsedOutput, context);
        case "InvalidAddressException":
        case "com.amazonaws.snowball#InvalidAddressException":
            throw await de_InvalidAddressExceptionRes(parsedOutput, context);
        case "UnsupportedAddressException":
        case "com.amazonaws.snowball#UnsupportedAddressException":
            throw await de_UnsupportedAddressExceptionRes(parsedOutput, context);
        case "Ec2RequestFailedException":
        case "com.amazonaws.snowball#Ec2RequestFailedException":
            throw await de_Ec2RequestFailedExceptionRes(parsedOutput, context);
        case "InvalidInputCombinationException":
        case "com.amazonaws.snowball#InvalidInputCombinationException":
            throw await de_InvalidInputCombinationExceptionRes(parsedOutput, context);
        case "ClusterLimitExceededException":
        case "com.amazonaws.snowball#ClusterLimitExceededException":
            throw await de_ClusterLimitExceededExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.snowball#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ReturnShippingLabelAlreadyExistsException":
        case "com.amazonaws.snowball#ReturnShippingLabelAlreadyExistsException":
            throw await de_ReturnShippingLabelAlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.snowball#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ClusterLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ClusterLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_Ec2RequestFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new Ec2RequestFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidAddressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidAddressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputCombinationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidJobStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidJobStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidResourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_KMSRequestFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new KMSRequestFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ReturnShippingLabelAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ReturnShippingLabelAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedAddressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedAddressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateClusterRequest = (input, context) => {
    return take(input, {
        AddressId: [],
        Description: [],
        ForceCreateJobs: [],
        ForwardingAddressId: [],
        InitialClusterSize: [],
        JobType: [],
        KmsKeyARN: [],
        LongTermPricingIds: _json,
        Notification: _json,
        OnDeviceServiceConfiguration: (_) => se_OnDeviceServiceConfiguration(_, context),
        RemoteManagement: [],
        Resources: _json,
        RoleARN: [],
        ShippingOption: [],
        SnowballCapacityPreference: [],
        SnowballType: [],
        TaxDocuments: _json,
    });
};
const se_CreateJobRequest = (input, context) => {
    return take(input, {
        AddressId: [],
        ClusterId: [],
        Description: [],
        DeviceConfiguration: _json,
        ForwardingAddressId: [],
        ImpactLevel: [],
        JobType: [],
        KmsKeyARN: [],
        LongTermPricingId: [],
        Notification: _json,
        OnDeviceServiceConfiguration: (_) => se_OnDeviceServiceConfiguration(_, context),
        PickupDetails: (_) => se_PickupDetails(_, context),
        RemoteManagement: [],
        Resources: _json,
        RoleARN: [],
        ShippingOption: [],
        SnowballCapacityPreference: [],
        SnowballType: [],
        TaxDocuments: _json,
    });
};
const se_OnDeviceServiceConfiguration = (input, context) => {
    return take(input, {
        EKSOnDeviceService: _json,
        NFSOnDeviceService: _json,
        S3OnDeviceService: (_) => se_S3OnDeviceServiceConfiguration(_, context),
        TGWOnDeviceService: _json,
    });
};
const se_PickupDetails = (input, context) => {
    return take(input, {
        DevicePickupId: [],
        Email: [],
        IdentificationExpirationDate: (_) => Math.round(_.getTime() / 1000),
        IdentificationIssuingOrg: [],
        IdentificationNumber: [],
        Name: [],
        PhoneNumber: [],
    });
};
const se_S3OnDeviceServiceConfiguration = (input, context) => {
    return take(input, {
        FaultTolerance: [],
        ServiceSize: [],
        StorageLimit: __serializeFloat,
        StorageUnit: [],
    });
};
const se_UpdateClusterRequest = (input, context) => {
    return take(input, {
        AddressId: [],
        ClusterId: [],
        Description: [],
        ForwardingAddressId: [],
        Notification: _json,
        OnDeviceServiceConfiguration: (_) => se_OnDeviceServiceConfiguration(_, context),
        Resources: _json,
        RoleARN: [],
        ShippingOption: [],
    });
};
const se_UpdateJobRequest = (input, context) => {
    return take(input, {
        AddressId: [],
        Description: [],
        ForwardingAddressId: [],
        JobId: [],
        Notification: _json,
        OnDeviceServiceConfiguration: (_) => se_OnDeviceServiceConfiguration(_, context),
        PickupDetails: (_) => se_PickupDetails(_, context),
        Resources: _json,
        RoleARN: [],
        ShippingOption: [],
        SnowballCapacityPreference: [],
    });
};
const de_ClusterListEntry = (output, context) => {
    return take(output, {
        ClusterId: __expectString,
        ClusterState: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
    });
};
const de_ClusterListEntryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterListEntry(entry, context);
    });
    return retVal;
};
const de_ClusterMetadata = (output, context) => {
    return take(output, {
        AddressId: __expectString,
        ClusterId: __expectString,
        ClusterState: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        ForwardingAddressId: __expectString,
        JobType: __expectString,
        KmsKeyARN: __expectString,
        Notification: _json,
        OnDeviceServiceConfiguration: (_) => de_OnDeviceServiceConfiguration(_, context),
        Resources: _json,
        RoleARN: __expectString,
        ShippingOption: __expectString,
        SnowballType: __expectString,
        TaxDocuments: _json,
    });
};
const de_CreateClusterResult = (output, context) => {
    return take(output, {
        ClusterId: __expectString,
        JobListEntries: (_) => de_JobListEntryList(_, context),
    });
};
const de_DescribeClusterResult = (output, context) => {
    return take(output, {
        ClusterMetadata: (_) => de_ClusterMetadata(_, context),
    });
};
const de_DescribeJobResult = (output, context) => {
    return take(output, {
        JobMetadata: (_) => de_JobMetadata(_, context),
        SubJobMetadata: (_) => de_JobMetadataList(_, context),
    });
};
const de_DescribeReturnShippingLabelResult = (output, context) => {
    return take(output, {
        ExpirationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReturnShippingLabelURI: __expectString,
        Status: __expectString,
    });
};
const de_JobListEntry = (output, context) => {
    return take(output, {
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        IsMaster: __expectBoolean,
        JobId: __expectString,
        JobState: __expectString,
        JobType: __expectString,
        SnowballType: __expectString,
    });
};
const de_JobListEntryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobListEntry(entry, context);
    });
    return retVal;
};
const de_JobMetadata = (output, context) => {
    return take(output, {
        AddressId: __expectString,
        ClusterId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataTransferProgress: _json,
        Description: __expectString,
        DeviceConfiguration: _json,
        ForwardingAddressId: __expectString,
        ImpactLevel: __expectString,
        JobId: __expectString,
        JobLogInfo: _json,
        JobState: __expectString,
        JobType: __expectString,
        KmsKeyARN: __expectString,
        LongTermPricingId: __expectString,
        Notification: _json,
        OnDeviceServiceConfiguration: (_) => de_OnDeviceServiceConfiguration(_, context),
        PickupDetails: (_) => de_PickupDetails(_, context),
        RemoteManagement: __expectString,
        Resources: _json,
        RoleARN: __expectString,
        ShippingDetails: _json,
        SnowballCapacityPreference: __expectString,
        SnowballId: __expectString,
        SnowballType: __expectString,
        TaxDocuments: _json,
    });
};
const de_JobMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobMetadata(entry, context);
    });
    return retVal;
};
const de_ListClusterJobsResult = (output, context) => {
    return take(output, {
        JobListEntries: (_) => de_JobListEntryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListClustersResult = (output, context) => {
    return take(output, {
        ClusterListEntries: (_) => de_ClusterListEntryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListJobsResult = (output, context) => {
    return take(output, {
        JobListEntries: (_) => de_JobListEntryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListLongTermPricingResult = (output, context) => {
    return take(output, {
        LongTermPricingEntries: (_) => de_LongTermPricingEntryList(_, context),
        NextToken: __expectString,
    });
};
const de_LongTermPricingEntryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LongTermPricingListEntry(entry, context);
    });
    return retVal;
};
const de_LongTermPricingListEntry = (output, context) => {
    return take(output, {
        CurrentActiveJob: __expectString,
        IsLongTermPricingAutoRenew: __expectBoolean,
        JobIds: _json,
        LongTermPricingEndDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LongTermPricingId: __expectString,
        LongTermPricingStartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LongTermPricingStatus: __expectString,
        LongTermPricingType: __expectString,
        ReplacementJob: __expectString,
        SnowballType: __expectString,
    });
};
const de_OnDeviceServiceConfiguration = (output, context) => {
    return take(output, {
        EKSOnDeviceService: _json,
        NFSOnDeviceService: _json,
        S3OnDeviceService: (_) => de_S3OnDeviceServiceConfiguration(_, context),
        TGWOnDeviceService: _json,
    });
};
const de_PickupDetails = (output, context) => {
    return take(output, {
        DevicePickupId: __expectString,
        Email: __expectString,
        IdentificationExpirationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IdentificationIssuingOrg: __expectString,
        IdentificationNumber: __expectString,
        Name: __expectString,
        PhoneNumber: __expectString,
    });
};
const de_S3OnDeviceServiceConfiguration = (output, context) => {
    return take(output, {
        FaultTolerance: __expectInt32,
        ServiceSize: __expectInt32,
        StorageLimit: __limitedParseDouble,
        StorageUnit: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSIESnowballJobManagementService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
