import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { InternalServiceError, InvalidArgumentException, NotAuthorizedException, } from "../models/models_0";
import { PIServiceException as __BaseException } from "../models/PIServiceException";
export const se_CreatePerformanceAnalysisReportCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePerformanceAnalysisReport");
    let body;
    body = JSON.stringify(se_CreatePerformanceAnalysisReportRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePerformanceAnalysisReportCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePerformanceAnalysisReport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDimensionKeysCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDimensionKeys");
    let body;
    body = JSON.stringify(se_DescribeDimensionKeysRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDimensionKeyDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDimensionKeyDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPerformanceAnalysisReportCommand = async (input, context) => {
    const headers = sharedHeaders("GetPerformanceAnalysisReport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourceMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourceMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceMetrics");
    let body;
    body = JSON.stringify(se_GetResourceMetricsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailableResourceDimensionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAvailableResourceDimensions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailableResourceMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAvailableResourceMetrics");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPerformanceAnalysisReportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPerformanceAnalysisReports");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreatePerformanceAnalysisReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeletePerformanceAnalysisReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDimensionKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDimensionKeysResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDimensionKeyDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPerformanceAnalysisReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPerformanceAnalysisReportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourceMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourceMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceMetricsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAvailableResourceDimensionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAvailableResourceMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPerformanceAnalysisReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPerformanceAnalysisReportsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceError":
        case "com.amazonaws.pi#InternalServiceError":
            throw await de_InternalServiceErrorRes(parsedOutput, context);
        case "InvalidArgumentException":
        case "com.amazonaws.pi#InvalidArgumentException":
            throw await de_InvalidArgumentExceptionRes(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.pi#NotAuthorizedException":
            throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InternalServiceErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidArgumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreatePerformanceAnalysisReportRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        Identifier: [],
        ServiceType: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
        Tags: _json,
    });
};
const se_DescribeDimensionKeysRequest = (input, context) => {
    return take(input, {
        AdditionalMetrics: _json,
        EndTime: (_) => Math.round(_.getTime() / 1000),
        Filter: _json,
        GroupBy: _json,
        Identifier: [],
        MaxResults: [],
        Metric: [],
        NextToken: [],
        PartitionBy: _json,
        PeriodInSeconds: [],
        ServiceType: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetResourceMetricsRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        Identifier: [],
        MaxResults: [],
        MetricQueries: _json,
        NextToken: [],
        PeriodAlignment: [],
        PeriodInSeconds: [],
        ServiceType: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const de_AdditionalMetricsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseDouble(value);
        return acc;
    }, {});
};
const de_AnalysisReport = (output, context) => {
    return take(output, {
        AnalysisReportId: __expectString,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Identifier: __expectString,
        Insights: (_) => de_InsightList(_, context),
        ServiceType: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_AnalysisReportSummary = (output, context) => {
    return take(output, {
        AnalysisReportId: __expectString,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Tags: _json,
    });
};
const de_AnalysisReportSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnalysisReportSummary(entry, context);
    });
    return retVal;
};
const de_Data = (output, context) => {
    return take(output, {
        PerformanceInsightsMetric: (_) => de_PerformanceInsightsMetric(_, context),
    });
};
const de_DataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Data(entry, context);
    });
    return retVal;
};
const de_DataPoint = (output, context) => {
    return take(output, {
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Value: __limitedParseDouble,
    });
};
const de_DataPointsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataPoint(entry, context);
    });
    return retVal;
};
const de_DescribeDimensionKeysResponse = (output, context) => {
    return take(output, {
        AlignedEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        AlignedStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Keys: (_) => de_DimensionKeyDescriptionList(_, context),
        NextToken: __expectString,
        PartitionKeys: _json,
    });
};
const de_DimensionKeyDescription = (output, context) => {
    return take(output, {
        AdditionalMetrics: (_) => de_AdditionalMetricsMap(_, context),
        Dimensions: _json,
        Partitions: (_) => de_MetricValuesList(_, context),
        Total: __limitedParseDouble,
    });
};
const de_DimensionKeyDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DimensionKeyDescription(entry, context);
    });
    return retVal;
};
const de_GetPerformanceAnalysisReportResponse = (output, context) => {
    return take(output, {
        AnalysisReport: (_) => de_AnalysisReport(_, context),
    });
};
const de_GetResourceMetricsResponse = (output, context) => {
    return take(output, {
        AlignedEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        AlignedStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Identifier: __expectString,
        MetricList: (_) => de_MetricKeyDataPointsList(_, context),
        NextToken: __expectString,
    });
};
const de_Insight = (output, context) => {
    return take(output, {
        BaselineData: (_) => de_DataList(_, context),
        Context: __expectString,
        Description: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InsightData: (_) => de_DataList(_, context),
        InsightId: __expectString,
        InsightType: __expectString,
        Recommendations: _json,
        Severity: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SupportingInsights: (_) => de_InsightList(_, context),
    });
};
const de_InsightList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Insight(entry, context);
    });
    return retVal;
};
const de_ListPerformanceAnalysisReportsResponse = (output, context) => {
    return take(output, {
        AnalysisReports: (_) => de_AnalysisReportSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_MetricKeyDataPoints = (output, context) => {
    return take(output, {
        DataPoints: (_) => de_DataPointsList(_, context),
        Key: _json,
    });
};
const de_MetricKeyDataPointsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricKeyDataPoints(entry, context);
    });
    return retVal;
};
const de_MetricValuesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_PerformanceInsightsMetric = (output, context) => {
    return take(output, {
        Dimensions: _json,
        DisplayName: __expectString,
        Metric: __expectString,
        Value: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `PerformanceInsightsv20180227.${operation}`,
    };
}
