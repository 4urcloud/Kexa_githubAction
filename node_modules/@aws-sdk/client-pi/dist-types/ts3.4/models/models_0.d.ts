import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { PIServiceException as __BaseException } from "./PIServiceException";
export declare const AcceptLanguage: {
  readonly EN_US: "EN_US";
};
export type AcceptLanguage =
  (typeof AcceptLanguage)[keyof typeof AcceptLanguage];
export interface PerformanceInsightsMetric {
  Metric?: string;
  DisplayName?: string;
  Dimensions?: Record<string, string>;
  Value?: number;
}
export interface Data {
  PerformanceInsightsMetric?: PerformanceInsightsMetric;
}
export declare const ContextType: {
  readonly CAUSAL: "CAUSAL";
  readonly CONTEXTUAL: "CONTEXTUAL";
};
export type ContextType = (typeof ContextType)[keyof typeof ContextType];
export interface Recommendation {
  RecommendationId?: string;
  RecommendationDescription?: string;
}
export declare const Severity: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type Severity = (typeof Severity)[keyof typeof Severity];
export declare const ServiceType: {
  readonly DOCDB: "DOCDB";
  readonly RDS: "RDS";
};
export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];
export declare const AnalysisStatus: {
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type AnalysisStatus =
  (typeof AnalysisStatus)[keyof typeof AnalysisStatus];
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface AnalysisReportSummary {
  AnalysisReportId?: string;
  CreateTime?: Date;
  StartTime?: Date;
  EndTime?: Date;
  Status?: AnalysisStatus;
  Tags?: Tag[];
}
export interface CreatePerformanceAnalysisReportRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  Tags?: Tag[];
}
export interface CreatePerformanceAnalysisReportResponse {
  AnalysisReportId?: string;
}
export declare class InternalServiceError extends __BaseException {
  readonly name: "InternalServiceError";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServiceError, __BaseException>
  );
}
export declare class InvalidArgumentException extends __BaseException {
  readonly name: "InvalidArgumentException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidArgumentException, __BaseException>
  );
}
export declare class NotAuthorizedException extends __BaseException {
  readonly name: "NotAuthorizedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>
  );
}
export interface DataPoint {
  Timestamp: Date | undefined;
  Value: number | undefined;
}
export interface DeletePerformanceAnalysisReportRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  AnalysisReportId: string | undefined;
}
export interface DeletePerformanceAnalysisReportResponse {}
export interface DimensionGroup {
  Group: string | undefined;
  Dimensions?: string[];
  Limit?: number;
}
export interface DescribeDimensionKeysRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  Metric: string | undefined;
  PeriodInSeconds?: number;
  GroupBy: DimensionGroup | undefined;
  AdditionalMetrics?: string[];
  PartitionBy?: DimensionGroup;
  Filter?: Record<string, string>;
  MaxResults?: number;
  NextToken?: string;
}
export interface DimensionKeyDescription {
  Dimensions?: Record<string, string>;
  Total?: number;
  AdditionalMetrics?: Record<string, number>;
  Partitions?: number[];
}
export interface ResponsePartitionKey {
  Dimensions: Record<string, string> | undefined;
}
export interface DescribeDimensionKeysResponse {
  AlignedStartTime?: Date;
  AlignedEndTime?: Date;
  PartitionKeys?: ResponsePartitionKey[];
  Keys?: DimensionKeyDescription[];
  NextToken?: string;
}
export declare const DetailStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly PROCESSING: "PROCESSING";
  readonly UNAVAILABLE: "UNAVAILABLE";
};
export type DetailStatus = (typeof DetailStatus)[keyof typeof DetailStatus];
export interface DimensionDetail {
  Identifier?: string;
}
export interface DimensionGroupDetail {
  Group?: string;
  Dimensions?: DimensionDetail[];
}
export interface DimensionKeyDetail {
  Value?: string;
  Dimension?: string;
  Status?: DetailStatus;
}
export declare const FeatureStatus: {
  readonly DISABLED: "DISABLED";
  readonly DISABLED_PENDING_REBOOT: "DISABLED_PENDING_REBOOT";
  readonly ENABLED: "ENABLED";
  readonly ENABLED_PENDING_REBOOT: "ENABLED_PENDING_REBOOT";
  readonly UNKNOWN: "UNKNOWN";
  readonly UNSUPPORTED: "UNSUPPORTED";
};
export type FeatureStatus = (typeof FeatureStatus)[keyof typeof FeatureStatus];
export interface FeatureMetadata {
  Status?: FeatureStatus;
}
export interface GetDimensionKeyDetailsRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  Group: string | undefined;
  GroupIdentifier: string | undefined;
  RequestedDimensions?: string[];
}
export interface GetDimensionKeyDetailsResponse {
  Dimensions?: DimensionKeyDetail[];
}
export declare const TextFormat: {
  readonly MARKDOWN: "MARKDOWN";
  readonly PLAIN_TEXT: "PLAIN_TEXT";
};
export type TextFormat = (typeof TextFormat)[keyof typeof TextFormat];
export interface GetPerformanceAnalysisReportRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  AnalysisReportId: string | undefined;
  TextFormat?: TextFormat;
  AcceptLanguage?: AcceptLanguage;
}
export interface GetResourceMetadataRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
}
export interface GetResourceMetadataResponse {
  Identifier?: string;
  Features?: Record<string, FeatureMetadata>;
}
export interface MetricQuery {
  Metric: string | undefined;
  GroupBy?: DimensionGroup;
  Filter?: Record<string, string>;
}
export declare const PeriodAlignment: {
  readonly END_TIME: "END_TIME";
  readonly START_TIME: "START_TIME";
};
export type PeriodAlignment =
  (typeof PeriodAlignment)[keyof typeof PeriodAlignment];
export interface GetResourceMetricsRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  MetricQueries: MetricQuery[] | undefined;
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  PeriodInSeconds?: number;
  MaxResults?: number;
  NextToken?: string;
  PeriodAlignment?: PeriodAlignment;
}
export interface ResponseResourceMetricKey {
  Metric: string | undefined;
  Dimensions?: Record<string, string>;
}
export interface MetricKeyDataPoints {
  Key?: ResponseResourceMetricKey;
  DataPoints?: DataPoint[];
}
export interface GetResourceMetricsResponse {
  AlignedStartTime?: Date;
  AlignedEndTime?: Date;
  Identifier?: string;
  MetricList?: MetricKeyDataPoints[];
  NextToken?: string;
}
export interface ListAvailableResourceDimensionsRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  Metrics: string[] | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface MetricDimensionGroups {
  Metric?: string;
  Groups?: DimensionGroupDetail[];
}
export interface ListAvailableResourceDimensionsResponse {
  MetricDimensions?: MetricDimensionGroups[];
  NextToken?: string;
}
export interface ListAvailableResourceMetricsRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  MetricTypes: string[] | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ResponseResourceMetric {
  Metric?: string;
  Description?: string;
  Unit?: string;
}
export interface ListAvailableResourceMetricsResponse {
  Metrics?: ResponseResourceMetric[];
  NextToken?: string;
}
export interface ListPerformanceAnalysisReportsRequest {
  ServiceType: ServiceType | undefined;
  Identifier: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  ListTags?: boolean;
}
export interface ListPerformanceAnalysisReportsResponse {
  AnalysisReports?: AnalysisReportSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ServiceType: ServiceType | undefined;
  ResourceARN: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface TagResourceRequest {
  ServiceType: ServiceType | undefined;
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ServiceType: ServiceType | undefined;
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface Insight {
  InsightId: string | undefined;
  InsightType?: string;
  Context?: ContextType;
  StartTime?: Date;
  EndTime?: Date;
  Severity?: Severity;
  SupportingInsights?: Insight[];
  Description?: string;
  Recommendations?: Recommendation[];
  InsightData?: Data[];
  BaselineData?: Data[];
}
export interface AnalysisReport {
  AnalysisReportId: string | undefined;
  Identifier?: string;
  ServiceType?: ServiceType;
  CreateTime?: Date;
  StartTime?: Date;
  EndTime?: Date;
  Status?: AnalysisStatus;
  Insights?: Insight[];
}
export interface GetPerformanceAnalysisReportResponse {
  AnalysisReport?: AnalysisReport;
}
export declare const RecommendationFilterSensitiveLog: (
  obj: Recommendation
) => any;
export declare const InsightFilterSensitiveLog: (obj: Insight) => any;
export declare const AnalysisReportFilterSensitiveLog: (
  obj: AnalysisReport
) => any;
export declare const GetPerformanceAnalysisReportResponseFilterSensitiveLog: (
  obj: GetPerformanceAnalysisReportResponse
) => any;
