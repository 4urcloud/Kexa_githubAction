import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { GetIceServerConfigCommandInput, GetIceServerConfigCommandOutput } from "./commands/GetIceServerConfigCommand";
import { SendAlexaOfferToMasterCommandInput, SendAlexaOfferToMasterCommandOutput } from "./commands/SendAlexaOfferToMasterCommand";
import { KinesisVideoSignalingClient } from "./KinesisVideoSignalingClient";
export interface KinesisVideoSignaling {
    /**
     * @see {@link GetIceServerConfigCommand}
     */
    getIceServerConfig(args: GetIceServerConfigCommandInput, options?: __HttpHandlerOptions): Promise<GetIceServerConfigCommandOutput>;
    getIceServerConfig(args: GetIceServerConfigCommandInput, cb: (err: any, data?: GetIceServerConfigCommandOutput) => void): void;
    getIceServerConfig(args: GetIceServerConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIceServerConfigCommandOutput) => void): void;
    /**
     * @see {@link SendAlexaOfferToMasterCommand}
     */
    sendAlexaOfferToMaster(args: SendAlexaOfferToMasterCommandInput, options?: __HttpHandlerOptions): Promise<SendAlexaOfferToMasterCommandOutput>;
    sendAlexaOfferToMaster(args: SendAlexaOfferToMasterCommandInput, cb: (err: any, data?: SendAlexaOfferToMasterCommandOutput) => void): void;
    sendAlexaOfferToMaster(args: SendAlexaOfferToMasterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendAlexaOfferToMasterCommandOutput) => void): void;
}
/**
 * <p>Kinesis Video Streams Signaling Service is a intermediate service that establishes a
 *             communication channel for discovering peers, transmitting offers and answers in order to
 *             establish peer-to-peer connection in webRTC technology.</p>
 * @public
 */
export declare class KinesisVideoSignaling extends KinesisVideoSignalingClient implements KinesisVideoSignaling {
}
