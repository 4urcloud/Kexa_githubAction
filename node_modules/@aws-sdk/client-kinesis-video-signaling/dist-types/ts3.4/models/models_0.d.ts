import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { KinesisVideoSignalingServiceException as __BaseException } from "./KinesisVideoSignalingServiceException";
export declare class ClientLimitExceededException extends __BaseException {
  readonly name: "ClientLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ClientLimitExceededException, __BaseException>
  );
}
export declare const Service: {
  readonly TURN: "TURN";
};
export type Service = (typeof Service)[keyof typeof Service];
export interface GetIceServerConfigRequest {
  ChannelARN: string | undefined;
  ClientId?: string;
  Service?: Service;
  Username?: string;
}
export interface IceServer {
  Uris?: string[];
  Username?: string;
  Password?: string;
  Ttl?: number;
}
export interface GetIceServerConfigResponse {
  IceServerList?: IceServer[];
}
export declare class InvalidArgumentException extends __BaseException {
  readonly name: "InvalidArgumentException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidArgumentException, __BaseException>
  );
}
export declare class InvalidClientException extends __BaseException {
  readonly name: "InvalidClientException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidClientException, __BaseException>
  );
}
export declare class NotAuthorizedException extends __BaseException {
  readonly name: "NotAuthorizedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class SessionExpiredException extends __BaseException {
  readonly name: "SessionExpiredException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SessionExpiredException, __BaseException>
  );
}
export interface SendAlexaOfferToMasterRequest {
  ChannelARN: string | undefined;
  SenderClientId: string | undefined;
  MessagePayload: string | undefined;
}
export interface SendAlexaOfferToMasterResponse {
  Answer?: string;
}
