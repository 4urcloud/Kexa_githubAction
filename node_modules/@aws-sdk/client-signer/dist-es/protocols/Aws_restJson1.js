import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { isValidHostname as __isValidHostname, } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, BadRequestException, ConflictException, InternalServiceErrorException, NotFoundException, ResourceNotFoundException, ServiceLimitExceededException, ThrottlingException, TooManyRequestsException, ValidationException, } from "../models/models_0";
import { SignerServiceException as __BaseException } from "../models/SignerServiceException";
export const se_AddProfilePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/signing-profiles/{profileName}/permissions");
    b.p("profileName", () => input.profileName, "{profileName}", false);
    let body;
    body = JSON.stringify(take(input, {
        action: [],
        principal: [],
        profileVersion: [],
        revisionId: [],
        statementId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelSigningProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-profiles/{profileName}");
    b.p("profileName", () => input.profileName, "{profileName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeSigningJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-jobs/{jobId}");
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRevocationStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/revocations");
    const query = map({
        [_sT]: [
            __expectNonNull(input.signatureTimestamp, `signatureTimestamp`) != null,
            () => (input[_sT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_pI]: [, __expectNonNull(input[_pI], `platformId`)],
        [_pVA]: [, __expectNonNull(input[_pVA], `profileVersionArn`)],
        [_jA]: [, __expectNonNull(input[_jA], `jobArn`)],
        [_cH]: [
            __expectNonNull(input.certificateHashes, `certificateHashes`) != null,
            () => (input[_cH] || []).map((_entry) => _entry),
        ],
    });
    let body;
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "verification." + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSigningPlatformCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-platforms/{platformId}");
    b.p("platformId", () => input.platformId, "{platformId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSigningProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-profiles/{profileName}");
    b.p("profileName", () => input.profileName, "{profileName}", false);
    const query = map({
        [_pO]: [, input[_pO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProfilePermissionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-profiles/{profileName}/permissions");
    b.p("profileName", () => input.profileName, "{profileName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSigningJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-jobs");
    const query = map({
        [_s]: [, input[_s]],
        [_pI]: [, input[_pI]],
        [_rB]: [, input[_rB]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_iR]: [() => input.isRevoked !== void 0, () => input[_iR].toString()],
        [_sEB]: [
            () => input.signatureExpiresBefore !== void 0,
            () => (input[_sEB].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_sEA]: [
            () => input.signatureExpiresAfter !== void 0,
            () => (input[_sEA].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_jI]: [, input[_jI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSigningPlatformsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-platforms");
    const query = map({
        [_c]: [, input[_c]],
        [_p]: [, input[_p]],
        [_t]: [, input[_t]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSigningProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-profiles");
    const query = map({
        [_iC]: [() => input.includeCanceled !== void 0, () => input[_iC].toString()],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_pI]: [, input[_pI]],
        [_st]: [() => input.statuses !== void 0, () => (input[_st] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutSigningProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/signing-profiles/{profileName}");
    b.p("profileName", () => input.profileName, "{profileName}", false);
    let body;
    body = JSON.stringify(take(input, {
        overrides: (_) => _json(_),
        platformId: [],
        signatureValidityPeriod: (_) => _json(_),
        signingMaterial: (_) => _json(_),
        signingParameters: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RemoveProfilePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/signing-profiles/{profileName}/permissions/{statementId}");
    b.p("profileName", () => input.profileName, "{profileName}", false);
    b.p("statementId", () => input.statementId, "{statementId}", false);
    const query = map({
        [_rI]: [, __expectNonNull(input[_rI], `revisionId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_RevokeSignatureCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/signing-jobs/{jobId}/revoke");
    b.p("jobId", () => input.jobId, "{jobId}", false);
    let body;
    body = JSON.stringify(take(input, {
        jobOwner: [],
        reason: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RevokeSigningProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/signing-profiles/{profileName}/revoke");
    b.p("profileName", () => input.profileName, "{profileName}", false);
    let body;
    body = JSON.stringify(take(input, {
        effectiveTime: (_) => Math.round(_.getTime() / 1000),
        profileVersion: [],
        reason: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_SignPayloadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/signing-jobs/with-payload");
    let body;
    body = JSON.stringify(take(input, {
        payload: (_) => context.base64Encoder(_),
        payloadFormat: [],
        profileName: [],
        profileOwner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartSigningJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/signing-jobs");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        destination: (_) => _json(_),
        profileName: [],
        profileOwner: [],
        source: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const de_AddProfilePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        revisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CancelSigningProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeSigningJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        completedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        jobId: __expectString,
        jobInvoker: __expectString,
        jobOwner: __expectString,
        overrides: _json,
        platformDisplayName: __expectString,
        platformId: __expectString,
        profileName: __expectString,
        profileVersion: __expectString,
        requestedBy: __expectString,
        revocationRecord: (_) => de_SigningJobRevocationRecord(_, context),
        signatureExpiresAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        signedObject: _json,
        signingMaterial: _json,
        signingParameters: _json,
        source: _json,
        status: __expectString,
        statusReason: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRevocationStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        revokedEntities: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSigningPlatformCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        category: __expectString,
        displayName: __expectString,
        maxSizeInMB: __expectInt32,
        partner: __expectString,
        platformId: __expectString,
        revocationSupported: __expectBoolean,
        signingConfiguration: _json,
        signingImageFormat: _json,
        target: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSigningProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        overrides: _json,
        platformDisplayName: __expectString,
        platformId: __expectString,
        profileName: __expectString,
        profileVersion: __expectString,
        profileVersionArn: __expectString,
        revocationRecord: (_) => de_SigningProfileRevocationRecord(_, context),
        signatureValidityPeriod: _json,
        signingMaterial: _json,
        signingParameters: _json,
        status: __expectString,
        statusReason: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProfilePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        permissions: _json,
        policySizeBytes: __expectInt32,
        revisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSigningJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobs: (_) => de_SigningJobs(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSigningPlatformsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        platforms: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSigningProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        profiles: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutSigningProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        profileVersion: __expectString,
        profileVersionArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RemoveProfilePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        revisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RevokeSignatureCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RevokeSigningProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SignPayloadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobId: __expectString,
        jobOwner: __expectString,
        metadata: _json,
        signature: context.base64Decoder,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartSigningJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobId: __expectString,
        jobOwner: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.signer#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.signer#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServiceErrorException":
        case "com.amazonaws.signer#InternalServiceErrorException":
            throw await de_InternalServiceErrorExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.signer#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceLimitExceededException":
        case "com.amazonaws.signer#ServiceLimitExceededException":
            throw await de_ServiceLimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.signer#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.signer#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "BadRequestException":
        case "com.amazonaws.signer#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.signer#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.signer#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServiceErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServiceErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_SigningJob = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        isRevoked: __expectBoolean,
        jobId: __expectString,
        jobInvoker: __expectString,
        jobOwner: __expectString,
        platformDisplayName: __expectString,
        platformId: __expectString,
        profileName: __expectString,
        profileVersion: __expectString,
        signatureExpiresAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        signedObject: _json,
        signingMaterial: _json,
        source: _json,
        status: __expectString,
    });
};
const de_SigningJobRevocationRecord = (output, context) => {
    return take(output, {
        reason: __expectString,
        revokedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        revokedBy: __expectString,
    });
};
const de_SigningJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SigningJob(entry, context);
    });
    return retVal;
};
const de_SigningProfileRevocationRecord = (output, context) => {
    return take(output, {
        revocationEffectiveFrom: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        revokedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        revokedBy: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _c = "category";
const _cH = "certificateHashes";
const _iC = "includeCanceled";
const _iR = "isRevoked";
const _jA = "jobArn";
const _jI = "jobInvoker";
const _mR = "maxResults";
const _nT = "nextToken";
const _p = "partner";
const _pI = "platformId";
const _pO = "profileOwner";
const _pVA = "profileVersionArn";
const _rB = "requestedBy";
const _rI = "revisionId";
const _s = "status";
const _sEA = "signatureExpiresAfter";
const _sEB = "signatureExpiresBefore";
const _sT = "signatureTimestamp";
const _st = "statuses";
const _t = "target";
const _tK = "tagKeys";
