import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { StorageGatewayServiceException as __BaseException } from "./StorageGatewayServiceException";
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface ActivateGatewayInput {
  ActivationKey: string | undefined;
  GatewayName: string | undefined;
  GatewayTimezone: string | undefined;
  GatewayRegion: string | undefined;
  GatewayType?: string;
  TapeDriveType?: string;
  MediumChangerType?: string;
  Tags?: Tag[];
}
export interface ActivateGatewayOutput {
  GatewayARN?: string;
}
export declare const ErrorCode: {
  readonly ActivationKeyExpired: "ActivationKeyExpired";
  readonly ActivationKeyInvalid: "ActivationKeyInvalid";
  readonly ActivationKeyNotFound: "ActivationKeyNotFound";
  readonly AuthenticationFailure: "AuthenticationFailure";
  readonly BandwidthThrottleScheduleNotFound: "BandwidthThrottleScheduleNotFound";
  readonly Blocked: "Blocked";
  readonly CannotExportSnapshot: "CannotExportSnapshot";
  readonly ChapCredentialNotFound: "ChapCredentialNotFound";
  readonly DiskAlreadyAllocated: "DiskAlreadyAllocated";
  readonly DiskDoesNotExist: "DiskDoesNotExist";
  readonly DiskSizeGreaterThanVolumeMaxSize: "DiskSizeGreaterThanVolumeMaxSize";
  readonly DiskSizeLessThanVolumeSize: "DiskSizeLessThanVolumeSize";
  readonly DiskSizeNotGigAligned: "DiskSizeNotGigAligned";
  readonly DuplicateCertificateInfo: "DuplicateCertificateInfo";
  readonly DuplicateSchedule: "DuplicateSchedule";
  readonly EndpointNotFound: "EndpointNotFound";
  readonly GatewayInternalError: "GatewayInternalError";
  readonly GatewayNotConnected: "GatewayNotConnected";
  readonly GatewayNotFound: "GatewayNotFound";
  readonly GatewayProxyNetworkConnectionBusy: "GatewayProxyNetworkConnectionBusy";
  readonly IAMNotSupported: "IAMNotSupported";
  readonly InitiatorInvalid: "InitiatorInvalid";
  readonly InitiatorNotFound: "InitiatorNotFound";
  readonly InternalError: "InternalError";
  readonly InvalidEndpoint: "InvalidEndpoint";
  readonly InvalidGateway: "InvalidGateway";
  readonly InvalidParameters: "InvalidParameters";
  readonly InvalidSchedule: "InvalidSchedule";
  readonly JoinDomainInProgress: "JoinDomainInProgress";
  readonly LocalStorageLimitExceeded: "LocalStorageLimitExceeded";
  readonly LunAlreadyAllocated_: "LunAlreadyAllocated ";
  readonly LunInvalid: "LunInvalid";
  readonly MaximumContentLengthExceeded: "MaximumContentLengthExceeded";
  readonly MaximumTapeCartridgeCountExceeded: "MaximumTapeCartridgeCountExceeded";
  readonly MaximumVolumeCountExceeded: "MaximumVolumeCountExceeded";
  readonly NetworkConfigurationChanged: "NetworkConfigurationChanged";
  readonly NoDisksAvailable: "NoDisksAvailable";
  readonly NotImplemented: "NotImplemented";
  readonly NotSupported: "NotSupported";
  readonly OperationAborted: "OperationAborted";
  readonly OutdatedGateway: "OutdatedGateway";
  readonly ParametersNotImplemented: "ParametersNotImplemented";
  readonly RegionInvalid: "RegionInvalid";
  readonly RequestTimeout: "RequestTimeout";
  readonly ServiceUnavailable: "ServiceUnavailable";
  readonly SnapshotDeleted: "SnapshotDeleted";
  readonly SnapshotIdInvalid: "SnapshotIdInvalid";
  readonly SnapshotInProgress: "SnapshotInProgress";
  readonly SnapshotNotFound: "SnapshotNotFound";
  readonly SnapshotScheduleNotFound: "SnapshotScheduleNotFound";
  readonly StagingAreaFull: "StagingAreaFull";
  readonly StorageFailure: "StorageFailure";
  readonly TapeCartridgeNotFound: "TapeCartridgeNotFound";
  readonly TargetAlreadyExists: "TargetAlreadyExists";
  readonly TargetInvalid: "TargetInvalid";
  readonly TargetNotFound: "TargetNotFound";
  readonly UnauthorizedOperation: "UnauthorizedOperation";
  readonly VolumeAlreadyExists: "VolumeAlreadyExists";
  readonly VolumeIdInvalid: "VolumeIdInvalid";
  readonly VolumeInUse: "VolumeInUse";
  readonly VolumeNotFound: "VolumeNotFound";
  readonly VolumeNotReady: "VolumeNotReady";
};
export type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];
export interface StorageGatewayError {
  errorCode?: ErrorCode;
  errorDetails?: Record<string, string>;
}
export declare class InternalServerError extends __BaseException {
  readonly name: "InternalServerError";
  readonly $fault: "server";
  error?: StorageGatewayError;
  constructor(
    opts: __ExceptionOptionType<InternalServerError, __BaseException>
  );
}
export declare class InvalidGatewayRequestException extends __BaseException {
  readonly name: "InvalidGatewayRequestException";
  readonly $fault: "client";
  error?: StorageGatewayError;
  constructor(
    opts: __ExceptionOptionType<InvalidGatewayRequestException, __BaseException>
  );
}
export declare const ActiveDirectoryStatus: {
  readonly ACCESS_DENIED: "ACCESS_DENIED";
  readonly DETACHED: "DETACHED";
  readonly JOINED: "JOINED";
  readonly JOINING: "JOINING";
  readonly NETWORK_ERROR: "NETWORK_ERROR";
  readonly TIMEOUT: "TIMEOUT";
  readonly UNKNOWN_ERROR: "UNKNOWN_ERROR";
};
export type ActiveDirectoryStatus =
  (typeof ActiveDirectoryStatus)[keyof typeof ActiveDirectoryStatus];
export interface AddCacheInput {
  GatewayARN: string | undefined;
  DiskIds: string[] | undefined;
}
export interface AddCacheOutput {
  GatewayARN?: string;
}
export interface AddTagsToResourceInput {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface AddTagsToResourceOutput {
  ResourceARN?: string;
}
export interface AddUploadBufferInput {
  GatewayARN: string | undefined;
  DiskIds: string[] | undefined;
}
export interface AddUploadBufferOutput {
  GatewayARN?: string;
}
export interface AddWorkingStorageInput {
  GatewayARN: string | undefined;
  DiskIds: string[] | undefined;
}
export interface AddWorkingStorageOutput {
  GatewayARN?: string;
}
export interface AssignTapePoolInput {
  TapeARN: string | undefined;
  PoolId: string | undefined;
  BypassGovernanceRetention?: boolean;
}
export interface AssignTapePoolOutput {
  TapeARN?: string;
}
export interface CacheAttributes {
  CacheStaleTimeoutInSeconds?: number;
}
export interface EndpointNetworkConfiguration {
  IpAddresses?: string[];
}
export interface AssociateFileSystemInput {
  UserName: string | undefined;
  Password: string | undefined;
  ClientToken: string | undefined;
  GatewayARN: string | undefined;
  LocationARN: string | undefined;
  Tags?: Tag[];
  AuditDestinationARN?: string;
  CacheAttributes?: CacheAttributes;
  EndpointNetworkConfiguration?: EndpointNetworkConfiguration;
}
export interface AssociateFileSystemOutput {
  FileSystemAssociationARN?: string;
}
export interface AttachVolumeInput {
  GatewayARN: string | undefined;
  TargetName?: string;
  VolumeARN: string | undefined;
  NetworkInterfaceId: string | undefined;
  DiskId?: string;
}
export interface AttachVolumeOutput {
  VolumeARN?: string;
  TargetARN?: string;
}
export interface AutomaticTapeCreationRule {
  TapeBarcodePrefix: string | undefined;
  PoolId: string | undefined;
  TapeSizeInBytes: number | undefined;
  MinimumNumTapes: number | undefined;
  Worm?: boolean;
}
export interface AutomaticTapeCreationPolicyInfo {
  AutomaticTapeCreationRules?: AutomaticTapeCreationRule[];
  GatewayARN?: string;
}
export declare const AvailabilityMonitorTestStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
};
export type AvailabilityMonitorTestStatus =
  (typeof AvailabilityMonitorTestStatus)[keyof typeof AvailabilityMonitorTestStatus];
export interface BandwidthRateLimitInterval {
  StartHourOfDay: number | undefined;
  StartMinuteOfHour: number | undefined;
  EndHourOfDay: number | undefined;
  EndMinuteOfHour: number | undefined;
  DaysOfWeek: number[] | undefined;
  AverageUploadRateLimitInBitsPerSec?: number;
  AverageDownloadRateLimitInBitsPerSec?: number;
}
export interface VolumeiSCSIAttributes {
  TargetARN?: string;
  NetworkInterfaceId?: string;
  NetworkInterfacePort?: number;
  LunNumber?: number;
  ChapEnabled?: boolean;
}
export interface CachediSCSIVolume {
  VolumeARN?: string;
  VolumeId?: string;
  VolumeType?: string;
  VolumeStatus?: string;
  VolumeAttachmentStatus?: string;
  VolumeSizeInBytes?: number;
  VolumeProgress?: number;
  SourceSnapshotId?: string;
  VolumeiSCSIAttributes?: VolumeiSCSIAttributes;
  CreatedDate?: Date;
  VolumeUsedInBytes?: number;
  KMSKey?: string;
  TargetName?: string;
}
export interface CancelArchivalInput {
  GatewayARN: string | undefined;
  TapeARN: string | undefined;
}
export interface CancelArchivalOutput {
  TapeARN?: string;
}
export interface CancelRetrievalInput {
  GatewayARN: string | undefined;
  TapeARN: string | undefined;
}
export interface CancelRetrievalOutput {
  TapeARN?: string;
}
export declare const CaseSensitivity: {
  readonly CaseSensitive: "CaseSensitive";
  readonly ClientSpecified: "ClientSpecified";
};
export type CaseSensitivity =
  (typeof CaseSensitivity)[keyof typeof CaseSensitivity];
export interface ChapInfo {
  TargetARN?: string;
  SecretToAuthenticateInitiator?: string;
  InitiatorName?: string;
  SecretToAuthenticateTarget?: string;
}
export interface CreateCachediSCSIVolumeInput {
  GatewayARN: string | undefined;
  VolumeSizeInBytes: number | undefined;
  SnapshotId?: string;
  TargetName: string | undefined;
  SourceVolumeARN?: string;
  NetworkInterfaceId: string | undefined;
  ClientToken: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  Tags?: Tag[];
}
export interface CreateCachediSCSIVolumeOutput {
  VolumeARN?: string;
  TargetARN?: string;
}
export interface NFSFileShareDefaults {
  FileMode?: string;
  DirectoryMode?: string;
  GroupId?: number;
  OwnerId?: number;
}
export declare const ObjectACL: {
  readonly authenticated_read: "authenticated-read";
  readonly aws_exec_read: "aws-exec-read";
  readonly bucket_owner_full_control: "bucket-owner-full-control";
  readonly bucket_owner_read: "bucket-owner-read";
  readonly private: "private";
  readonly public_read: "public-read";
  readonly public_read_write: "public-read-write";
};
export type ObjectACL = (typeof ObjectACL)[keyof typeof ObjectACL];
export interface CreateNFSFileShareInput {
  ClientToken: string | undefined;
  NFSFileShareDefaults?: NFSFileShareDefaults;
  GatewayARN: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  Role: string | undefined;
  LocationARN: string | undefined;
  DefaultStorageClass?: string;
  ObjectACL?: ObjectACL;
  ClientList?: string[];
  Squash?: string;
  ReadOnly?: boolean;
  GuessMIMETypeEnabled?: boolean;
  RequesterPays?: boolean;
  Tags?: Tag[];
  FileShareName?: string;
  CacheAttributes?: CacheAttributes;
  NotificationPolicy?: string;
  VPCEndpointDNSName?: string;
  BucketRegion?: string;
  AuditDestinationARN?: string;
}
export interface CreateNFSFileShareOutput {
  FileShareARN?: string;
}
export interface CreateSMBFileShareInput {
  ClientToken: string | undefined;
  GatewayARN: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  Role: string | undefined;
  LocationARN: string | undefined;
  DefaultStorageClass?: string;
  ObjectACL?: ObjectACL;
  ReadOnly?: boolean;
  GuessMIMETypeEnabled?: boolean;
  RequesterPays?: boolean;
  SMBACLEnabled?: boolean;
  AccessBasedEnumeration?: boolean;
  AdminUserList?: string[];
  ValidUserList?: string[];
  InvalidUserList?: string[];
  AuditDestinationARN?: string;
  Authentication?: string;
  CaseSensitivity?: CaseSensitivity;
  Tags?: Tag[];
  FileShareName?: string;
  CacheAttributes?: CacheAttributes;
  NotificationPolicy?: string;
  VPCEndpointDNSName?: string;
  BucketRegion?: string;
  OplocksEnabled?: boolean;
}
export interface CreateSMBFileShareOutput {
  FileShareARN?: string;
}
export interface CreateSnapshotInput {
  VolumeARN: string | undefined;
  SnapshotDescription: string | undefined;
  Tags?: Tag[];
}
export interface CreateSnapshotOutput {
  VolumeARN?: string;
  SnapshotId?: string;
}
export declare class ServiceUnavailableError extends __BaseException {
  readonly name: "ServiceUnavailableError";
  readonly $fault: "server";
  error?: StorageGatewayError;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableError, __BaseException>
  );
}
export interface CreateSnapshotFromVolumeRecoveryPointInput {
  VolumeARN: string | undefined;
  SnapshotDescription: string | undefined;
  Tags?: Tag[];
}
export interface CreateSnapshotFromVolumeRecoveryPointOutput {
  SnapshotId?: string;
  VolumeARN?: string;
  VolumeRecoveryPointTime?: string;
}
export interface CreateStorediSCSIVolumeInput {
  GatewayARN: string | undefined;
  DiskId: string | undefined;
  SnapshotId?: string;
  PreserveExistingData: boolean | undefined;
  TargetName: string | undefined;
  NetworkInterfaceId: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  Tags?: Tag[];
}
export interface CreateStorediSCSIVolumeOutput {
  VolumeARN?: string;
  VolumeSizeInBytes?: number;
  TargetARN?: string;
}
export declare const RetentionLockType: {
  readonly COMPLIANCE: "COMPLIANCE";
  readonly GOVERNANCE: "GOVERNANCE";
  readonly NONE: "NONE";
};
export type RetentionLockType =
  (typeof RetentionLockType)[keyof typeof RetentionLockType];
export declare const TapeStorageClass: {
  readonly DEEP_ARCHIVE: "DEEP_ARCHIVE";
  readonly GLACIER: "GLACIER";
};
export type TapeStorageClass =
  (typeof TapeStorageClass)[keyof typeof TapeStorageClass];
export interface CreateTapePoolInput {
  PoolName: string | undefined;
  StorageClass: TapeStorageClass | undefined;
  RetentionLockType?: RetentionLockType;
  RetentionLockTimeInDays?: number;
  Tags?: Tag[];
}
export interface CreateTapePoolOutput {
  PoolARN?: string;
}
export interface CreateTapesInput {
  GatewayARN: string | undefined;
  TapeSizeInBytes: number | undefined;
  ClientToken: string | undefined;
  NumTapesToCreate: number | undefined;
  TapeBarcodePrefix: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  PoolId?: string;
  Worm?: boolean;
  Tags?: Tag[];
}
export interface CreateTapesOutput {
  TapeARNs?: string[];
}
export interface CreateTapeWithBarcodeInput {
  GatewayARN: string | undefined;
  TapeSizeInBytes: number | undefined;
  TapeBarcode: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  PoolId?: string;
  Worm?: boolean;
  Tags?: Tag[];
}
export interface CreateTapeWithBarcodeOutput {
  TapeARN?: string;
}
export interface DeleteAutomaticTapeCreationPolicyInput {
  GatewayARN: string | undefined;
}
export interface DeleteAutomaticTapeCreationPolicyOutput {
  GatewayARN?: string;
}
export interface DeleteBandwidthRateLimitInput {
  GatewayARN: string | undefined;
  BandwidthType: string | undefined;
}
export interface DeleteBandwidthRateLimitOutput {
  GatewayARN?: string;
}
export interface DeleteChapCredentialsInput {
  TargetARN: string | undefined;
  InitiatorName: string | undefined;
}
export interface DeleteChapCredentialsOutput {
  TargetARN?: string;
  InitiatorName?: string;
}
export interface DeleteFileShareInput {
  FileShareARN: string | undefined;
  ForceDelete?: boolean;
}
export interface DeleteFileShareOutput {
  FileShareARN?: string;
}
export interface DeleteGatewayInput {
  GatewayARN: string | undefined;
}
export interface DeleteGatewayOutput {
  GatewayARN?: string;
}
export interface DeleteSnapshotScheduleInput {
  VolumeARN: string | undefined;
}
export interface DeleteSnapshotScheduleOutput {
  VolumeARN?: string;
}
export interface DeleteTapeInput {
  GatewayARN: string | undefined;
  TapeARN: string | undefined;
  BypassGovernanceRetention?: boolean;
}
export interface DeleteTapeOutput {
  TapeARN?: string;
}
export interface DeleteTapeArchiveInput {
  TapeARN: string | undefined;
  BypassGovernanceRetention?: boolean;
}
export interface DeleteTapeArchiveOutput {
  TapeARN?: string;
}
export interface DeleteTapePoolInput {
  PoolARN: string | undefined;
}
export interface DeleteTapePoolOutput {
  PoolARN?: string;
}
export interface DeleteVolumeInput {
  VolumeARN: string | undefined;
}
export interface DeleteVolumeOutput {
  VolumeARN?: string;
}
export interface DescribeAvailabilityMonitorTestInput {
  GatewayARN: string | undefined;
}
export interface DescribeAvailabilityMonitorTestOutput {
  GatewayARN?: string;
  Status?: AvailabilityMonitorTestStatus;
  StartTime?: Date;
}
export interface DescribeBandwidthRateLimitInput {
  GatewayARN: string | undefined;
}
export interface DescribeBandwidthRateLimitOutput {
  GatewayARN?: string;
  AverageUploadRateLimitInBitsPerSec?: number;
  AverageDownloadRateLimitInBitsPerSec?: number;
}
export interface DescribeBandwidthRateLimitScheduleInput {
  GatewayARN: string | undefined;
}
export interface DescribeBandwidthRateLimitScheduleOutput {
  GatewayARN?: string;
  BandwidthRateLimitIntervals?: BandwidthRateLimitInterval[];
}
export interface DescribeCacheInput {
  GatewayARN: string | undefined;
}
export interface DescribeCacheOutput {
  GatewayARN?: string;
  DiskIds?: string[];
  CacheAllocatedInBytes?: number;
  CacheUsedPercentage?: number;
  CacheDirtyPercentage?: number;
  CacheHitPercentage?: number;
  CacheMissPercentage?: number;
}
export interface DescribeCachediSCSIVolumesInput {
  VolumeARNs: string[] | undefined;
}
export interface DescribeCachediSCSIVolumesOutput {
  CachediSCSIVolumes?: CachediSCSIVolume[];
}
export interface DescribeChapCredentialsInput {
  TargetARN: string | undefined;
}
export interface DescribeChapCredentialsOutput {
  ChapCredentials?: ChapInfo[];
}
export interface DescribeFileSystemAssociationsInput {
  FileSystemAssociationARNList: string[] | undefined;
}
export interface FileSystemAssociationStatusDetail {
  ErrorCode?: string;
}
export interface FileSystemAssociationInfo {
  FileSystemAssociationARN?: string;
  LocationARN?: string;
  FileSystemAssociationStatus?: string;
  AuditDestinationARN?: string;
  GatewayARN?: string;
  Tags?: Tag[];
  CacheAttributes?: CacheAttributes;
  EndpointNetworkConfiguration?: EndpointNetworkConfiguration;
  FileSystemAssociationStatusDetails?: FileSystemAssociationStatusDetail[];
}
export interface DescribeFileSystemAssociationsOutput {
  FileSystemAssociationInfoList?: FileSystemAssociationInfo[];
}
export interface DescribeGatewayInformationInput {
  GatewayARN: string | undefined;
}
export declare const GatewayCapacity: {
  readonly Large: "Large";
  readonly Medium: "Medium";
  readonly Small: "Small";
};
export type GatewayCapacity =
  (typeof GatewayCapacity)[keyof typeof GatewayCapacity];
export interface NetworkInterface {
  Ipv4Address?: string;
  MacAddress?: string;
  Ipv6Address?: string;
}
export declare const HostEnvironment: {
  readonly EC2: "EC2";
  readonly HYPER_V: "HYPER-V";
  readonly KVM: "KVM";
  readonly OTHER: "OTHER";
  readonly SNOWBALL: "SNOWBALL";
  readonly VMWARE: "VMWARE";
};
export type HostEnvironment =
  (typeof HostEnvironment)[keyof typeof HostEnvironment];
export interface DescribeGatewayInformationOutput {
  GatewayARN?: string;
  GatewayId?: string;
  GatewayName?: string;
  GatewayTimezone?: string;
  GatewayState?: string;
  GatewayNetworkInterfaces?: NetworkInterface[];
  GatewayType?: string;
  NextUpdateAvailabilityDate?: string;
  LastSoftwareUpdate?: string;
  Ec2InstanceId?: string;
  Ec2InstanceRegion?: string;
  Tags?: Tag[];
  VPCEndpoint?: string;
  CloudWatchLogGroupARN?: string;
  HostEnvironment?: HostEnvironment;
  EndpointType?: string;
  SoftwareUpdatesEndDate?: string;
  DeprecationDate?: string;
  GatewayCapacity?: GatewayCapacity;
  SupportedGatewayCapacities?: GatewayCapacity[];
  HostEnvironmentId?: string;
  SoftwareVersion?: string;
}
export interface DescribeMaintenanceStartTimeInput {
  GatewayARN: string | undefined;
}
export interface DescribeMaintenanceStartTimeOutput {
  GatewayARN?: string;
  HourOfDay?: number;
  MinuteOfHour?: number;
  DayOfWeek?: number;
  DayOfMonth?: number;
  Timezone?: string;
}
export interface DescribeNFSFileSharesInput {
  FileShareARNList: string[] | undefined;
}
export interface NFSFileShareInfo {
  NFSFileShareDefaults?: NFSFileShareDefaults;
  FileShareARN?: string;
  FileShareId?: string;
  FileShareStatus?: string;
  GatewayARN?: string;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  Path?: string;
  Role?: string;
  LocationARN?: string;
  DefaultStorageClass?: string;
  ObjectACL?: ObjectACL;
  ClientList?: string[];
  Squash?: string;
  ReadOnly?: boolean;
  GuessMIMETypeEnabled?: boolean;
  RequesterPays?: boolean;
  Tags?: Tag[];
  FileShareName?: string;
  CacheAttributes?: CacheAttributes;
  NotificationPolicy?: string;
  VPCEndpointDNSName?: string;
  BucketRegion?: string;
  AuditDestinationARN?: string;
}
export interface DescribeNFSFileSharesOutput {
  NFSFileShareInfoList?: NFSFileShareInfo[];
}
export interface DescribeSMBFileSharesInput {
  FileShareARNList: string[] | undefined;
}
export interface SMBFileShareInfo {
  FileShareARN?: string;
  FileShareId?: string;
  FileShareStatus?: string;
  GatewayARN?: string;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  Path?: string;
  Role?: string;
  LocationARN?: string;
  DefaultStorageClass?: string;
  ObjectACL?: ObjectACL;
  ReadOnly?: boolean;
  GuessMIMETypeEnabled?: boolean;
  RequesterPays?: boolean;
  SMBACLEnabled?: boolean;
  AccessBasedEnumeration?: boolean;
  AdminUserList?: string[];
  ValidUserList?: string[];
  InvalidUserList?: string[];
  AuditDestinationARN?: string;
  Authentication?: string;
  CaseSensitivity?: CaseSensitivity;
  Tags?: Tag[];
  FileShareName?: string;
  CacheAttributes?: CacheAttributes;
  NotificationPolicy?: string;
  VPCEndpointDNSName?: string;
  BucketRegion?: string;
  OplocksEnabled?: boolean;
}
export interface DescribeSMBFileSharesOutput {
  SMBFileShareInfoList?: SMBFileShareInfo[];
}
export interface DescribeSMBSettingsInput {
  GatewayARN: string | undefined;
}
export interface SMBLocalGroups {
  GatewayAdmins?: string[];
}
export declare const SMBSecurityStrategy: {
  readonly ClientSpecified: "ClientSpecified";
  readonly MandatoryEncryption: "MandatoryEncryption";
  readonly MandatorySigning: "MandatorySigning";
};
export type SMBSecurityStrategy =
  (typeof SMBSecurityStrategy)[keyof typeof SMBSecurityStrategy];
export interface DescribeSMBSettingsOutput {
  GatewayARN?: string;
  DomainName?: string;
  ActiveDirectoryStatus?: ActiveDirectoryStatus;
  SMBGuestPasswordSet?: boolean;
  SMBSecurityStrategy?: SMBSecurityStrategy;
  FileSharesVisible?: boolean;
  SMBLocalGroups?: SMBLocalGroups;
}
export interface DescribeSnapshotScheduleInput {
  VolumeARN: string | undefined;
}
export interface DescribeSnapshotScheduleOutput {
  VolumeARN?: string;
  StartAt?: number;
  RecurrenceInHours?: number;
  Description?: string;
  Timezone?: string;
  Tags?: Tag[];
}
export interface DescribeStorediSCSIVolumesInput {
  VolumeARNs: string[] | undefined;
}
export interface StorediSCSIVolume {
  VolumeARN?: string;
  VolumeId?: string;
  VolumeType?: string;
  VolumeStatus?: string;
  VolumeAttachmentStatus?: string;
  VolumeSizeInBytes?: number;
  VolumeProgress?: number;
  VolumeDiskId?: string;
  SourceSnapshotId?: string;
  PreservedExistingData?: boolean;
  VolumeiSCSIAttributes?: VolumeiSCSIAttributes;
  CreatedDate?: Date;
  VolumeUsedInBytes?: number;
  KMSKey?: string;
  TargetName?: string;
}
export interface DescribeStorediSCSIVolumesOutput {
  StorediSCSIVolumes?: StorediSCSIVolume[];
}
export interface DescribeTapeArchivesInput {
  TapeARNs?: string[];
  Marker?: string;
  Limit?: number;
}
export interface TapeArchive {
  TapeARN?: string;
  TapeBarcode?: string;
  TapeCreatedDate?: Date;
  TapeSizeInBytes?: number;
  CompletionTime?: Date;
  RetrievedTo?: string;
  TapeStatus?: string;
  TapeUsedInBytes?: number;
  KMSKey?: string;
  PoolId?: string;
  Worm?: boolean;
  RetentionStartDate?: Date;
  PoolEntryDate?: Date;
}
export interface DescribeTapeArchivesOutput {
  TapeArchives?: TapeArchive[];
  Marker?: string;
}
export interface DescribeTapeRecoveryPointsInput {
  GatewayARN: string | undefined;
  Marker?: string;
  Limit?: number;
}
export interface TapeRecoveryPointInfo {
  TapeARN?: string;
  TapeRecoveryPointTime?: Date;
  TapeSizeInBytes?: number;
  TapeStatus?: string;
}
export interface DescribeTapeRecoveryPointsOutput {
  GatewayARN?: string;
  TapeRecoveryPointInfos?: TapeRecoveryPointInfo[];
  Marker?: string;
}
export interface DescribeTapesInput {
  GatewayARN: string | undefined;
  TapeARNs?: string[];
  Marker?: string;
  Limit?: number;
}
export interface Tape {
  TapeARN?: string;
  TapeBarcode?: string;
  TapeCreatedDate?: Date;
  TapeSizeInBytes?: number;
  TapeStatus?: string;
  VTLDevice?: string;
  Progress?: number;
  TapeUsedInBytes?: number;
  KMSKey?: string;
  PoolId?: string;
  Worm?: boolean;
  RetentionStartDate?: Date;
  PoolEntryDate?: Date;
}
export interface DescribeTapesOutput {
  Tapes?: Tape[];
  Marker?: string;
}
export interface DescribeUploadBufferInput {
  GatewayARN: string | undefined;
}
export interface DescribeUploadBufferOutput {
  GatewayARN?: string;
  DiskIds?: string[];
  UploadBufferUsedInBytes?: number;
  UploadBufferAllocatedInBytes?: number;
}
export interface DescribeVTLDevicesInput {
  GatewayARN: string | undefined;
  VTLDeviceARNs?: string[];
  Marker?: string;
  Limit?: number;
}
export interface DeviceiSCSIAttributes {
  TargetARN?: string;
  NetworkInterfaceId?: string;
  NetworkInterfacePort?: number;
  ChapEnabled?: boolean;
}
export interface VTLDevice {
  VTLDeviceARN?: string;
  VTLDeviceType?: string;
  VTLDeviceVendor?: string;
  VTLDeviceProductIdentifier?: string;
  DeviceiSCSIAttributes?: DeviceiSCSIAttributes;
}
export interface DescribeVTLDevicesOutput {
  GatewayARN?: string;
  VTLDevices?: VTLDevice[];
  Marker?: string;
}
export interface DescribeWorkingStorageInput {
  GatewayARN: string | undefined;
}
export interface DescribeWorkingStorageOutput {
  GatewayARN?: string;
  DiskIds?: string[];
  WorkingStorageUsedInBytes?: number;
  WorkingStorageAllocatedInBytes?: number;
}
export interface DetachVolumeInput {
  VolumeARN: string | undefined;
  ForceDetach?: boolean;
}
export interface DetachVolumeOutput {
  VolumeARN?: string;
}
export interface DisableGatewayInput {
  GatewayARN: string | undefined;
}
export interface DisableGatewayOutput {
  GatewayARN?: string;
}
export interface DisassociateFileSystemInput {
  FileSystemAssociationARN: string | undefined;
  ForceDelete?: boolean;
}
export interface DisassociateFileSystemOutput {
  FileSystemAssociationARN?: string;
}
export interface Disk {
  DiskId?: string;
  DiskPath?: string;
  DiskNode?: string;
  DiskStatus?: string;
  DiskSizeInBytes?: number;
  DiskAllocationType?: string;
  DiskAllocationResource?: string;
  DiskAttributeList?: string[];
}
export declare const FileShareType: {
  readonly NFS: "NFS";
  readonly SMB: "SMB";
};
export type FileShareType = (typeof FileShareType)[keyof typeof FileShareType];
export interface FileShareInfo {
  FileShareType?: FileShareType;
  FileShareARN?: string;
  FileShareId?: string;
  FileShareStatus?: string;
  GatewayARN?: string;
}
export interface FileSystemAssociationSummary {
  FileSystemAssociationId?: string;
  FileSystemAssociationARN?: string;
  FileSystemAssociationStatus?: string;
  GatewayARN?: string;
}
export interface GatewayInfo {
  GatewayId?: string;
  GatewayARN?: string;
  GatewayType?: string;
  GatewayOperationalState?: string;
  GatewayName?: string;
  Ec2InstanceId?: string;
  Ec2InstanceRegion?: string;
  HostEnvironment?: HostEnvironment;
  HostEnvironmentId?: string;
  DeprecationDate?: string;
  SoftwareVersion?: string;
}
export interface JoinDomainInput {
  GatewayARN: string | undefined;
  DomainName: string | undefined;
  OrganizationalUnit?: string;
  DomainControllers?: string[];
  TimeoutInSeconds?: number;
  UserName: string | undefined;
  Password: string | undefined;
}
export interface JoinDomainOutput {
  GatewayARN?: string;
  ActiveDirectoryStatus?: ActiveDirectoryStatus;
}
export interface ListAutomaticTapeCreationPoliciesInput {
  GatewayARN?: string;
}
export interface ListAutomaticTapeCreationPoliciesOutput {
  AutomaticTapeCreationPolicyInfos?: AutomaticTapeCreationPolicyInfo[];
}
export interface ListFileSharesInput {
  GatewayARN?: string;
  Limit?: number;
  Marker?: string;
}
export interface ListFileSharesOutput {
  Marker?: string;
  NextMarker?: string;
  FileShareInfoList?: FileShareInfo[];
}
export interface ListFileSystemAssociationsInput {
  GatewayARN?: string;
  Limit?: number;
  Marker?: string;
}
export interface ListFileSystemAssociationsOutput {
  Marker?: string;
  NextMarker?: string;
  FileSystemAssociationSummaryList?: FileSystemAssociationSummary[];
}
export interface ListGatewaysInput {
  Marker?: string;
  Limit?: number;
}
export interface ListGatewaysOutput {
  Gateways?: GatewayInfo[];
  Marker?: string;
}
export interface ListLocalDisksInput {
  GatewayARN: string | undefined;
}
export interface ListLocalDisksOutput {
  GatewayARN?: string;
  Disks?: Disk[];
}
export interface ListTagsForResourceInput {
  ResourceARN: string | undefined;
  Marker?: string;
  Limit?: number;
}
export interface ListTagsForResourceOutput {
  ResourceARN?: string;
  Marker?: string;
  Tags?: Tag[];
}
export interface ListTapePoolsInput {
  PoolARNs?: string[];
  Marker?: string;
  Limit?: number;
}
export declare const PoolStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETED: "DELETED";
};
export type PoolStatus = (typeof PoolStatus)[keyof typeof PoolStatus];
export interface PoolInfo {
  PoolARN?: string;
  PoolName?: string;
  StorageClass?: TapeStorageClass;
  RetentionLockType?: RetentionLockType;
  RetentionLockTimeInDays?: number;
  PoolStatus?: PoolStatus;
}
export interface ListTapePoolsOutput {
  PoolInfos?: PoolInfo[];
  Marker?: string;
}
export interface ListTapesInput {
  TapeARNs?: string[];
  Marker?: string;
  Limit?: number;
}
export interface TapeInfo {
  TapeARN?: string;
  TapeBarcode?: string;
  TapeSizeInBytes?: number;
  TapeStatus?: string;
  GatewayARN?: string;
  PoolId?: string;
  RetentionStartDate?: Date;
  PoolEntryDate?: Date;
}
export interface ListTapesOutput {
  TapeInfos?: TapeInfo[];
  Marker?: string;
}
export interface ListVolumeInitiatorsInput {
  VolumeARN: string | undefined;
}
export interface ListVolumeInitiatorsOutput {
  Initiators?: string[];
}
export interface ListVolumeRecoveryPointsInput {
  GatewayARN: string | undefined;
}
export interface VolumeRecoveryPointInfo {
  VolumeARN?: string;
  VolumeSizeInBytes?: number;
  VolumeUsageInBytes?: number;
  VolumeRecoveryPointTime?: string;
}
export interface ListVolumeRecoveryPointsOutput {
  GatewayARN?: string;
  VolumeRecoveryPointInfos?: VolumeRecoveryPointInfo[];
}
export interface ListVolumesInput {
  GatewayARN?: string;
  Marker?: string;
  Limit?: number;
}
export interface VolumeInfo {
  VolumeARN?: string;
  VolumeId?: string;
  GatewayARN?: string;
  GatewayId?: string;
  VolumeType?: string;
  VolumeSizeInBytes?: number;
  VolumeAttachmentStatus?: string;
}
export interface ListVolumesOutput {
  GatewayARN?: string;
  Marker?: string;
  VolumeInfos?: VolumeInfo[];
}
export interface NotifyWhenUploadedInput {
  FileShareARN: string | undefined;
}
export interface NotifyWhenUploadedOutput {
  FileShareARN?: string;
  NotificationId?: string;
}
export interface RefreshCacheInput {
  FileShareARN: string | undefined;
  FolderList?: string[];
  Recursive?: boolean;
}
export interface RefreshCacheOutput {
  FileShareARN?: string;
  NotificationId?: string;
}
export interface RemoveTagsFromResourceInput {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface RemoveTagsFromResourceOutput {
  ResourceARN?: string;
}
export interface ResetCacheInput {
  GatewayARN: string | undefined;
}
export interface ResetCacheOutput {
  GatewayARN?: string;
}
export interface RetrieveTapeArchiveInput {
  TapeARN: string | undefined;
  GatewayARN: string | undefined;
}
export interface RetrieveTapeArchiveOutput {
  TapeARN?: string;
}
export interface RetrieveTapeRecoveryPointInput {
  TapeARN: string | undefined;
  GatewayARN: string | undefined;
}
export interface RetrieveTapeRecoveryPointOutput {
  TapeARN?: string;
}
export interface SetLocalConsolePasswordInput {
  GatewayARN: string | undefined;
  LocalConsolePassword: string | undefined;
}
export interface SetLocalConsolePasswordOutput {
  GatewayARN?: string;
}
export interface SetSMBGuestPasswordInput {
  GatewayARN: string | undefined;
  Password: string | undefined;
}
export interface SetSMBGuestPasswordOutput {
  GatewayARN?: string;
}
export interface ShutdownGatewayInput {
  GatewayARN: string | undefined;
}
export interface ShutdownGatewayOutput {
  GatewayARN?: string;
}
export interface StartAvailabilityMonitorTestInput {
  GatewayARN: string | undefined;
}
export interface StartAvailabilityMonitorTestOutput {
  GatewayARN?: string;
}
export interface StartGatewayInput {
  GatewayARN: string | undefined;
}
export interface StartGatewayOutput {
  GatewayARN?: string;
}
export interface UpdateAutomaticTapeCreationPolicyInput {
  AutomaticTapeCreationRules: AutomaticTapeCreationRule[] | undefined;
  GatewayARN: string | undefined;
}
export interface UpdateAutomaticTapeCreationPolicyOutput {
  GatewayARN?: string;
}
export interface UpdateBandwidthRateLimitInput {
  GatewayARN: string | undefined;
  AverageUploadRateLimitInBitsPerSec?: number;
  AverageDownloadRateLimitInBitsPerSec?: number;
}
export interface UpdateBandwidthRateLimitOutput {
  GatewayARN?: string;
}
export interface UpdateBandwidthRateLimitScheduleInput {
  GatewayARN: string | undefined;
  BandwidthRateLimitIntervals: BandwidthRateLimitInterval[] | undefined;
}
export interface UpdateBandwidthRateLimitScheduleOutput {
  GatewayARN?: string;
}
export interface UpdateChapCredentialsInput {
  TargetARN: string | undefined;
  SecretToAuthenticateInitiator: string | undefined;
  InitiatorName: string | undefined;
  SecretToAuthenticateTarget?: string;
}
export interface UpdateChapCredentialsOutput {
  TargetARN?: string;
  InitiatorName?: string;
}
export interface UpdateFileSystemAssociationInput {
  FileSystemAssociationARN: string | undefined;
  UserName?: string;
  Password?: string;
  AuditDestinationARN?: string;
  CacheAttributes?: CacheAttributes;
}
export interface UpdateFileSystemAssociationOutput {
  FileSystemAssociationARN?: string;
}
export interface UpdateGatewayInformationInput {
  GatewayARN: string | undefined;
  GatewayName?: string;
  GatewayTimezone?: string;
  CloudWatchLogGroupARN?: string;
  GatewayCapacity?: GatewayCapacity;
}
export interface UpdateGatewayInformationOutput {
  GatewayARN?: string;
  GatewayName?: string;
}
export interface UpdateGatewaySoftwareNowInput {
  GatewayARN: string | undefined;
}
export interface UpdateGatewaySoftwareNowOutput {
  GatewayARN?: string;
}
export interface UpdateMaintenanceStartTimeInput {
  GatewayARN: string | undefined;
  HourOfDay: number | undefined;
  MinuteOfHour: number | undefined;
  DayOfWeek?: number;
  DayOfMonth?: number;
}
export interface UpdateMaintenanceStartTimeOutput {
  GatewayARN?: string;
}
export interface UpdateNFSFileShareInput {
  FileShareARN: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  NFSFileShareDefaults?: NFSFileShareDefaults;
  DefaultStorageClass?: string;
  ObjectACL?: ObjectACL;
  ClientList?: string[];
  Squash?: string;
  ReadOnly?: boolean;
  GuessMIMETypeEnabled?: boolean;
  RequesterPays?: boolean;
  FileShareName?: string;
  CacheAttributes?: CacheAttributes;
  NotificationPolicy?: string;
  AuditDestinationARN?: string;
}
export interface UpdateNFSFileShareOutput {
  FileShareARN?: string;
}
export interface UpdateSMBFileShareInput {
  FileShareARN: string | undefined;
  KMSEncrypted?: boolean;
  KMSKey?: string;
  DefaultStorageClass?: string;
  ObjectACL?: ObjectACL;
  ReadOnly?: boolean;
  GuessMIMETypeEnabled?: boolean;
  RequesterPays?: boolean;
  SMBACLEnabled?: boolean;
  AccessBasedEnumeration?: boolean;
  AdminUserList?: string[];
  ValidUserList?: string[];
  InvalidUserList?: string[];
  AuditDestinationARN?: string;
  CaseSensitivity?: CaseSensitivity;
  FileShareName?: string;
  CacheAttributes?: CacheAttributes;
  NotificationPolicy?: string;
  OplocksEnabled?: boolean;
}
export interface UpdateSMBFileShareOutput {
  FileShareARN?: string;
}
export interface UpdateSMBFileShareVisibilityInput {
  GatewayARN: string | undefined;
  FileSharesVisible: boolean | undefined;
}
export interface UpdateSMBFileShareVisibilityOutput {
  GatewayARN?: string;
}
export interface UpdateSMBLocalGroupsInput {
  GatewayARN: string | undefined;
  SMBLocalGroups: SMBLocalGroups | undefined;
}
export interface UpdateSMBLocalGroupsOutput {
  GatewayARN?: string;
}
export interface UpdateSMBSecurityStrategyInput {
  GatewayARN: string | undefined;
  SMBSecurityStrategy: SMBSecurityStrategy | undefined;
}
export interface UpdateSMBSecurityStrategyOutput {
  GatewayARN?: string;
}
export interface UpdateSnapshotScheduleInput {
  VolumeARN: string | undefined;
  StartAt: number | undefined;
  RecurrenceInHours: number | undefined;
  Description?: string;
  Tags?: Tag[];
}
export interface UpdateSnapshotScheduleOutput {
  VolumeARN?: string;
}
export interface UpdateVTLDeviceTypeInput {
  VTLDeviceARN: string | undefined;
  DeviceType: string | undefined;
}
export interface UpdateVTLDeviceTypeOutput {
  VTLDeviceARN?: string;
}
export declare const AssociateFileSystemInputFilterSensitiveLog: (
  obj: AssociateFileSystemInput
) => any;
export declare const ChapInfoFilterSensitiveLog: (obj: ChapInfo) => any;
export declare const DescribeChapCredentialsOutputFilterSensitiveLog: (
  obj: DescribeChapCredentialsOutput
) => any;
export declare const NetworkInterfaceFilterSensitiveLog: (
  obj: NetworkInterface
) => any;
export declare const DescribeGatewayInformationOutputFilterSensitiveLog: (
  obj: DescribeGatewayInformationOutput
) => any;
export declare const JoinDomainInputFilterSensitiveLog: (
  obj: JoinDomainInput
) => any;
export declare const SetLocalConsolePasswordInputFilterSensitiveLog: (
  obj: SetLocalConsolePasswordInput
) => any;
export declare const SetSMBGuestPasswordInputFilterSensitiveLog: (
  obj: SetSMBGuestPasswordInput
) => any;
export declare const UpdateChapCredentialsInputFilterSensitiveLog: (
  obj: UpdateChapCredentialsInput
) => any;
export declare const UpdateFileSystemAssociationInputFilterSensitiveLog: (
  obj: UpdateFileSystemAssociationInput
) => any;
