import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { StorageGatewayServiceException as __BaseException } from "./StorageGatewayServiceException";
export const ErrorCode = {
    ActivationKeyExpired: "ActivationKeyExpired",
    ActivationKeyInvalid: "ActivationKeyInvalid",
    ActivationKeyNotFound: "ActivationKeyNotFound",
    AuthenticationFailure: "AuthenticationFailure",
    BandwidthThrottleScheduleNotFound: "BandwidthThrottleScheduleNotFound",
    Blocked: "Blocked",
    CannotExportSnapshot: "CannotExportSnapshot",
    ChapCredentialNotFound: "ChapCredentialNotFound",
    DiskAlreadyAllocated: "DiskAlreadyAllocated",
    DiskDoesNotExist: "DiskDoesNotExist",
    DiskSizeGreaterThanVolumeMaxSize: "DiskSizeGreaterThanVolumeMaxSize",
    DiskSizeLessThanVolumeSize: "DiskSizeLessThanVolumeSize",
    DiskSizeNotGigAligned: "DiskSizeNotGigAligned",
    DuplicateCertificateInfo: "DuplicateCertificateInfo",
    DuplicateSchedule: "DuplicateSchedule",
    EndpointNotFound: "EndpointNotFound",
    GatewayInternalError: "GatewayInternalError",
    GatewayNotConnected: "GatewayNotConnected",
    GatewayNotFound: "GatewayNotFound",
    GatewayProxyNetworkConnectionBusy: "GatewayProxyNetworkConnectionBusy",
    IAMNotSupported: "IAMNotSupported",
    InitiatorInvalid: "InitiatorInvalid",
    InitiatorNotFound: "InitiatorNotFound",
    InternalError: "InternalError",
    InvalidEndpoint: "InvalidEndpoint",
    InvalidGateway: "InvalidGateway",
    InvalidParameters: "InvalidParameters",
    InvalidSchedule: "InvalidSchedule",
    JoinDomainInProgress: "JoinDomainInProgress",
    LocalStorageLimitExceeded: "LocalStorageLimitExceeded",
    LunAlreadyAllocated_: "LunAlreadyAllocated ",
    LunInvalid: "LunInvalid",
    MaximumContentLengthExceeded: "MaximumContentLengthExceeded",
    MaximumTapeCartridgeCountExceeded: "MaximumTapeCartridgeCountExceeded",
    MaximumVolumeCountExceeded: "MaximumVolumeCountExceeded",
    NetworkConfigurationChanged: "NetworkConfigurationChanged",
    NoDisksAvailable: "NoDisksAvailable",
    NotImplemented: "NotImplemented",
    NotSupported: "NotSupported",
    OperationAborted: "OperationAborted",
    OutdatedGateway: "OutdatedGateway",
    ParametersNotImplemented: "ParametersNotImplemented",
    RegionInvalid: "RegionInvalid",
    RequestTimeout: "RequestTimeout",
    ServiceUnavailable: "ServiceUnavailable",
    SnapshotDeleted: "SnapshotDeleted",
    SnapshotIdInvalid: "SnapshotIdInvalid",
    SnapshotInProgress: "SnapshotInProgress",
    SnapshotNotFound: "SnapshotNotFound",
    SnapshotScheduleNotFound: "SnapshotScheduleNotFound",
    StagingAreaFull: "StagingAreaFull",
    StorageFailure: "StorageFailure",
    TapeCartridgeNotFound: "TapeCartridgeNotFound",
    TargetAlreadyExists: "TargetAlreadyExists",
    TargetInvalid: "TargetInvalid",
    TargetNotFound: "TargetNotFound",
    UnauthorizedOperation: "UnauthorizedOperation",
    VolumeAlreadyExists: "VolumeAlreadyExists",
    VolumeIdInvalid: "VolumeIdInvalid",
    VolumeInUse: "VolumeInUse",
    VolumeNotFound: "VolumeNotFound",
    VolumeNotReady: "VolumeNotReady",
};
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.error = opts.error;
    }
}
export class InvalidGatewayRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidGatewayRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidGatewayRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGatewayRequestException.prototype);
        this.error = opts.error;
    }
}
export const ActiveDirectoryStatus = {
    ACCESS_DENIED: "ACCESS_DENIED",
    DETACHED: "DETACHED",
    JOINED: "JOINED",
    JOINING: "JOINING",
    NETWORK_ERROR: "NETWORK_ERROR",
    TIMEOUT: "TIMEOUT",
    UNKNOWN_ERROR: "UNKNOWN_ERROR",
};
export const AvailabilityMonitorTestStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    PENDING: "PENDING",
};
export const CaseSensitivity = {
    CaseSensitive: "CaseSensitive",
    ClientSpecified: "ClientSpecified",
};
export const ObjectACL = {
    authenticated_read: "authenticated-read",
    aws_exec_read: "aws-exec-read",
    bucket_owner_full_control: "bucket-owner-full-control",
    bucket_owner_read: "bucket-owner-read",
    private: "private",
    public_read: "public-read",
    public_read_write: "public-read-write",
};
export class ServiceUnavailableError extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableError",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableError";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableError.prototype);
        this.error = opts.error;
    }
}
export const RetentionLockType = {
    COMPLIANCE: "COMPLIANCE",
    GOVERNANCE: "GOVERNANCE",
    NONE: "NONE",
};
export const TapeStorageClass = {
    DEEP_ARCHIVE: "DEEP_ARCHIVE",
    GLACIER: "GLACIER",
};
export const GatewayCapacity = {
    Large: "Large",
    Medium: "Medium",
    Small: "Small",
};
export const HostEnvironment = {
    EC2: "EC2",
    HYPER_V: "HYPER-V",
    KVM: "KVM",
    OTHER: "OTHER",
    SNOWBALL: "SNOWBALL",
    VMWARE: "VMWARE",
};
export const SMBSecurityStrategy = {
    ClientSpecified: "ClientSpecified",
    MandatoryEncryption: "MandatoryEncryption",
    MandatorySigning: "MandatorySigning",
};
export const FileShareType = {
    NFS: "NFS",
    SMB: "SMB",
};
export const PoolStatus = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
};
export const AssociateFileSystemInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
export const ChapInfoFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretToAuthenticateInitiator && { SecretToAuthenticateInitiator: SENSITIVE_STRING }),
    ...(obj.SecretToAuthenticateTarget && { SecretToAuthenticateTarget: SENSITIVE_STRING }),
});
export const DescribeChapCredentialsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ChapCredentials && { ChapCredentials: obj.ChapCredentials.map((item) => ChapInfoFilterSensitiveLog(item)) }),
});
export const NetworkInterfaceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeGatewayInformationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.GatewayNetworkInterfaces && { GatewayNetworkInterfaces: SENSITIVE_STRING }),
});
export const JoinDomainInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
export const SetLocalConsolePasswordInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LocalConsolePassword && { LocalConsolePassword: SENSITIVE_STRING }),
});
export const SetSMBGuestPasswordInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
export const UpdateChapCredentialsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretToAuthenticateInitiator && { SecretToAuthenticateInitiator: SENSITIVE_STRING }),
    ...(obj.SecretToAuthenticateTarget && { SecretToAuthenticateTarget: SENSITIVE_STRING }),
});
export const UpdateFileSystemAssociationInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
