import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { FraudDetectorServiceException as __BaseException } from "./FraudDetectorServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AggregatedLogOddsMetric {
  variableNames: string[] | undefined;
  aggregatedVariablesImportance: number | undefined;
}
export interface AggregatedVariablesImpactExplanation {
  eventVariableNames?: string[];
  relativeImpact?: string;
  logOddsImpact?: number;
}
export interface AggregatedVariablesImportanceMetrics {
  logOddsMetrics?: AggregatedLogOddsMetric[];
}
export interface AllowDenyList {
  name: string | undefined;
  description?: string;
  variableType?: string;
  createdTime?: string;
  updatedTime?: string;
  arn?: string;
}
export declare const AsyncJobStatus: {
  readonly CANCELED: "CANCELED";
  readonly CANCEL_IN_PROGRESS: "CANCEL_IN_PROGRESS";
  readonly COMPLETE: "COMPLETE";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly IN_PROGRESS_INITIALIZING: "IN_PROGRESS_INITIALIZING";
};
export type AsyncJobStatus =
  (typeof AsyncJobStatus)[keyof typeof AsyncJobStatus];
export interface ATIMetricDataPoint {
  cr?: number;
  adr?: number;
  threshold?: number;
  atodr?: number;
}
export interface ATIModelPerformance {
  asi?: number;
}
export interface ATITrainingMetricsValue {
  metricDataPoints?: ATIMetricDataPoint[];
  modelPerformance?: ATIModelPerformance;
}
export interface Tag {
  key: string | undefined;
  value: string | undefined;
}
export interface VariableEntry {
  name?: string;
  dataType?: string;
  dataSource?: string;
  defaultValue?: string;
  description?: string;
  variableType?: string;
}
export interface BatchCreateVariableRequest {
  variableEntries: VariableEntry[] | undefined;
  tags?: Tag[];
}
export interface BatchCreateVariableError {
  name?: string;
  code?: number;
  message?: string;
}
export interface BatchCreateVariableResult {
  errors?: BatchCreateVariableError[];
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface BatchGetVariableRequest {
  names: string[] | undefined;
}
export interface BatchGetVariableError {
  name?: string;
  code?: number;
  message?: string;
}
export declare const DataSource: {
  readonly EVENT: "EVENT";
  readonly EXTERNAL_MODEL_SCORE: "EXTERNAL_MODEL_SCORE";
  readonly MODEL_SCORE: "MODEL_SCORE";
};
export type DataSource = (typeof DataSource)[keyof typeof DataSource];
export declare const DataType: {
  readonly BOOLEAN: "BOOLEAN";
  readonly DATETIME: "DATETIME";
  readonly FLOAT: "FLOAT";
  readonly INTEGER: "INTEGER";
  readonly STRING: "STRING";
};
export type DataType = (typeof DataType)[keyof typeof DataType];
export interface Variable {
  name?: string;
  dataType?: DataType;
  dataSource?: DataSource;
  defaultValue?: string;
  description?: string;
  variableType?: string;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
}
export interface BatchGetVariableResult {
  variables?: Variable[];
  errors?: BatchGetVariableError[];
}
export interface CancelBatchImportJobRequest {
  jobId: string | undefined;
}
export interface CancelBatchImportJobResult {}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface CancelBatchPredictionJobRequest {
  jobId: string | undefined;
}
export interface CancelBatchPredictionJobResult {}
export interface CreateBatchImportJobRequest {
  jobId: string | undefined;
  inputPath: string | undefined;
  outputPath: string | undefined;
  eventTypeName: string | undefined;
  iamRoleArn: string | undefined;
  tags?: Tag[];
}
export interface CreateBatchImportJobResult {}
export interface CreateBatchPredictionJobRequest {
  jobId: string | undefined;
  inputPath: string | undefined;
  outputPath: string | undefined;
  eventTypeName: string | undefined;
  detectorName: string | undefined;
  detectorVersion?: string;
  iamRoleArn: string | undefined;
  tags?: Tag[];
}
export interface CreateBatchPredictionJobResult {}
export declare const ModelTypeEnum: {
  readonly ACCOUNT_TAKEOVER_INSIGHTS: "ACCOUNT_TAKEOVER_INSIGHTS";
  readonly ONLINE_FRAUD_INSIGHTS: "ONLINE_FRAUD_INSIGHTS";
  readonly TRANSACTION_FRAUD_INSIGHTS: "TRANSACTION_FRAUD_INSIGHTS";
};
export type ModelTypeEnum = (typeof ModelTypeEnum)[keyof typeof ModelTypeEnum];
export interface ModelVersion {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  modelVersionNumber: string | undefined;
  arn?: string;
}
export declare const RuleExecutionMode: {
  readonly ALL_MATCHED: "ALL_MATCHED";
  readonly FIRST_MATCHED: "FIRST_MATCHED";
};
export type RuleExecutionMode =
  (typeof RuleExecutionMode)[keyof typeof RuleExecutionMode];
export interface Rule {
  detectorId: string | undefined;
  ruleId: string | undefined;
  ruleVersion: string | undefined;
}
export interface CreateDetectorVersionRequest {
  detectorId: string | undefined;
  description?: string;
  externalModelEndpoints?: string[];
  rules: Rule[] | undefined;
  modelVersions?: ModelVersion[];
  ruleExecutionMode?: RuleExecutionMode;
  tags?: Tag[];
}
export declare const DetectorVersionStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DRAFT: "DRAFT";
  readonly INACTIVE: "INACTIVE";
};
export type DetectorVersionStatus =
  (typeof DetectorVersionStatus)[keyof typeof DetectorVersionStatus];
export interface CreateDetectorVersionResult {
  detectorId?: string;
  detectorVersionId?: string;
  status?: DetectorVersionStatus;
}
export interface CreateListRequest {
  name: string | undefined;
  elements?: string[];
  variableType?: string;
  description?: string;
  tags?: Tag[];
}
export interface CreateListResult {}
export interface CreateModelRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  description?: string;
  eventTypeName: string | undefined;
  tags?: Tag[];
}
export interface CreateModelResult {}
export interface ExternalEventsDetail {
  dataLocation: string | undefined;
  dataAccessRoleArn: string | undefined;
}
export interface IngestedEventsTimeWindow {
  startTime: string | undefined;
  endTime: string | undefined;
}
export interface IngestedEventsDetail {
  ingestedEventsTimeWindow: IngestedEventsTimeWindow | undefined;
}
export declare const UnlabeledEventsTreatment: {
  readonly AUTO: "AUTO";
  readonly FRAUD: "FRAUD";
  readonly IGNORE: "IGNORE";
  readonly LEGIT: "LEGIT";
};
export type UnlabeledEventsTreatment =
  (typeof UnlabeledEventsTreatment)[keyof typeof UnlabeledEventsTreatment];
export interface LabelSchema {
  labelMapper?: Record<string, string[]>;
  unlabeledEventsTreatment?: UnlabeledEventsTreatment;
}
export interface TrainingDataSchema {
  modelVariables: string[] | undefined;
  labelSchema?: LabelSchema;
}
export declare const TrainingDataSourceEnum: {
  readonly EXTERNAL_EVENTS: "EXTERNAL_EVENTS";
  readonly INGESTED_EVENTS: "INGESTED_EVENTS";
};
export type TrainingDataSourceEnum =
  (typeof TrainingDataSourceEnum)[keyof typeof TrainingDataSourceEnum];
export interface CreateModelVersionRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  trainingDataSource: TrainingDataSourceEnum | undefined;
  trainingDataSchema: TrainingDataSchema | undefined;
  externalEventsDetail?: ExternalEventsDetail;
  ingestedEventsDetail?: IngestedEventsDetail;
  tags?: Tag[];
}
export interface CreateModelVersionResult {
  modelId?: string;
  modelType?: ModelTypeEnum;
  modelVersionNumber?: string;
  status?: string;
}
export declare const Language: {
  readonly DETECTORPL: "DETECTORPL";
};
export type Language = (typeof Language)[keyof typeof Language];
export interface CreateRuleRequest {
  ruleId: string | undefined;
  detectorId: string | undefined;
  description?: string;
  expression: string | undefined;
  language: Language | undefined;
  outcomes: string[] | undefined;
  tags?: Tag[];
}
export interface CreateRuleResult {
  rule?: Rule;
}
export interface CreateVariableRequest {
  name: string | undefined;
  dataType: DataType | undefined;
  dataSource: DataSource | undefined;
  defaultValue: string | undefined;
  description?: string;
  variableType?: string;
  tags?: Tag[];
}
export interface CreateVariableResult {}
export interface DeleteBatchImportJobRequest {
  jobId: string | undefined;
}
export interface DeleteBatchImportJobResult {}
export interface DeleteBatchPredictionJobRequest {
  jobId: string | undefined;
}
export interface DeleteBatchPredictionJobResult {}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeleteDetectorRequest {
  detectorId: string | undefined;
}
export interface DeleteDetectorResult {}
export interface DeleteDetectorVersionRequest {
  detectorId: string | undefined;
  detectorVersionId: string | undefined;
}
export interface DeleteDetectorVersionResult {}
export interface DeleteEntityTypeRequest {
  name: string | undefined;
}
export interface DeleteEntityTypeResult {}
export interface DeleteEventRequest {
  eventId: string | undefined;
  eventTypeName: string | undefined;
  deleteAuditHistory?: boolean;
}
export interface DeleteEventResult {}
export interface DeleteEventsByEventTypeRequest {
  eventTypeName: string | undefined;
}
export interface DeleteEventsByEventTypeResult {
  eventTypeName?: string;
  eventsDeletionStatus?: string;
}
export interface DeleteEventTypeRequest {
  name: string | undefined;
}
export interface DeleteEventTypeResult {}
export interface DeleteExternalModelRequest {
  modelEndpoint: string | undefined;
}
export interface DeleteExternalModelResult {}
export interface DeleteLabelRequest {
  name: string | undefined;
}
export interface DeleteLabelResult {}
export interface DeleteListRequest {
  name: string | undefined;
}
export interface DeleteListResult {}
export interface DeleteModelRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
}
export interface DeleteModelResult {}
export interface DeleteModelVersionRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  modelVersionNumber: string | undefined;
}
export interface DeleteModelVersionResult {}
export interface DeleteOutcomeRequest {
  name: string | undefined;
}
export interface DeleteOutcomeResult {}
export interface DeleteRuleRequest {
  rule: Rule | undefined;
}
export interface DeleteRuleResult {}
export interface DeleteVariableRequest {
  name: string | undefined;
}
export interface DeleteVariableResult {}
export interface DescribeDetectorRequest {
  detectorId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface DetectorVersionSummary {
  detectorVersionId?: string;
  status?: DetectorVersionStatus;
  description?: string;
  lastUpdatedTime?: string;
}
export interface DescribeDetectorResult {
  detectorId?: string;
  detectorVersionSummaries?: DetectorVersionSummary[];
  nextToken?: string;
  arn?: string;
}
export interface DescribeModelVersionsRequest {
  modelId?: string;
  modelVersionNumber?: string;
  modelType?: ModelTypeEnum;
  nextToken?: string;
  maxResults?: number;
}
export interface FieldValidationMessage {
  fieldName?: string;
  identifier?: string;
  title?: string;
  content?: string;
  type?: string;
}
export interface FileValidationMessage {
  title?: string;
  content?: string;
  type?: string;
}
export interface DataValidationMetrics {
  fileLevelMessages?: FileValidationMessage[];
  fieldLevelMessages?: FieldValidationMessage[];
}
export interface MetricDataPoint {
  fpr?: number;
  precision?: number;
  tpr?: number;
  threshold?: number;
}
export interface TrainingMetrics {
  auc?: number;
  metricDataPoints?: MetricDataPoint[];
}
export interface LogOddsMetric {
  variableName: string | undefined;
  variableType: string | undefined;
  variableImportance: number | undefined;
}
export interface VariableImportanceMetrics {
  logOddsMetrics?: LogOddsMetric[];
}
export interface TrainingResult {
  dataValidationMetrics?: DataValidationMetrics;
  trainingMetrics?: TrainingMetrics;
  variableImportanceMetrics?: VariableImportanceMetrics;
}
export interface OFIMetricDataPoint {
  fpr?: number;
  precision?: number;
  tpr?: number;
  threshold?: number;
}
export interface UncertaintyRange {
  lowerBoundValue: number | undefined;
  upperBoundValue: number | undefined;
}
export interface OFIModelPerformance {
  auc?: number;
  uncertaintyRange?: UncertaintyRange;
}
export interface OFITrainingMetricsValue {
  metricDataPoints?: OFIMetricDataPoint[];
  modelPerformance?: OFIModelPerformance;
}
export interface TFIMetricDataPoint {
  fpr?: number;
  precision?: number;
  tpr?: number;
  threshold?: number;
}
export interface TFIModelPerformance {
  auc?: number;
  uncertaintyRange?: UncertaintyRange;
}
export interface TFITrainingMetricsValue {
  metricDataPoints?: TFIMetricDataPoint[];
  modelPerformance?: TFIModelPerformance;
}
export interface TrainingMetricsV2 {
  ofi?: OFITrainingMetricsValue;
  tfi?: TFITrainingMetricsValue;
  ati?: ATITrainingMetricsValue;
}
export interface TrainingResultV2 {
  dataValidationMetrics?: DataValidationMetrics;
  trainingMetricsV2?: TrainingMetricsV2;
  variableImportanceMetrics?: VariableImportanceMetrics;
  aggregatedVariablesImportanceMetrics?: AggregatedVariablesImportanceMetrics;
}
export interface ModelVersionDetail {
  modelId?: string;
  modelType?: ModelTypeEnum;
  modelVersionNumber?: string;
  status?: string;
  trainingDataSource?: TrainingDataSourceEnum;
  trainingDataSchema?: TrainingDataSchema;
  externalEventsDetail?: ExternalEventsDetail;
  ingestedEventsDetail?: IngestedEventsDetail;
  trainingResult?: TrainingResult;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
  trainingResultV2?: TrainingResultV2;
}
export interface DescribeModelVersionsResult {
  modelVersionDetails?: ModelVersionDetail[];
  nextToken?: string;
}
export interface GetBatchImportJobsRequest {
  jobId?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface BatchImport {
  jobId?: string;
  status?: AsyncJobStatus;
  failureReason?: string;
  startTime?: string;
  completionTime?: string;
  inputPath?: string;
  outputPath?: string;
  eventTypeName?: string;
  iamRoleArn?: string;
  arn?: string;
  processedRecordsCount?: number;
  failedRecordsCount?: number;
  totalRecordsCount?: number;
}
export interface GetBatchImportJobsResult {
  batchImports?: BatchImport[];
  nextToken?: string;
}
export interface GetBatchPredictionJobsRequest {
  jobId?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface BatchPrediction {
  jobId?: string;
  status?: AsyncJobStatus;
  failureReason?: string;
  startTime?: string;
  completionTime?: string;
  lastHeartbeatTime?: string;
  inputPath?: string;
  outputPath?: string;
  eventTypeName?: string;
  detectorName?: string;
  detectorVersion?: string;
  iamRoleArn?: string;
  arn?: string;
  processedRecordsCount?: number;
  totalRecordsCount?: number;
}
export interface GetBatchPredictionJobsResult {
  batchPredictions?: BatchPrediction[];
  nextToken?: string;
}
export interface GetDeleteEventsByEventTypeStatusRequest {
  eventTypeName: string | undefined;
}
export interface GetDeleteEventsByEventTypeStatusResult {
  eventTypeName?: string;
  eventsDeletionStatus?: AsyncJobStatus;
}
export interface GetDetectorsRequest {
  detectorId?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface Detector {
  detectorId?: string;
  description?: string;
  eventTypeName?: string;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
}
export interface GetDetectorsResult {
  detectors?: Detector[];
  nextToken?: string;
}
export interface GetDetectorVersionRequest {
  detectorId: string | undefined;
  detectorVersionId: string | undefined;
}
export interface GetDetectorVersionResult {
  detectorId?: string;
  detectorVersionId?: string;
  description?: string;
  externalModelEndpoints?: string[];
  modelVersions?: ModelVersion[];
  rules?: Rule[];
  status?: DetectorVersionStatus;
  lastUpdatedTime?: string;
  createdTime?: string;
  ruleExecutionMode?: RuleExecutionMode;
  arn?: string;
}
export interface GetEntityTypesRequest {
  name?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface EntityType {
  name?: string;
  description?: string;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
}
export interface GetEntityTypesResult {
  entityTypes?: EntityType[];
  nextToken?: string;
}
export interface GetEventRequest {
  eventId: string | undefined;
  eventTypeName: string | undefined;
}
export interface Entity {
  entityType: string | undefined;
  entityId: string | undefined;
}
export interface Event {
  eventId?: string;
  eventTypeName?: string;
  eventTimestamp?: string;
  eventVariables?: Record<string, string>;
  currentLabel?: string;
  labelTimestamp?: string;
  entities?: Entity[];
}
export interface GetEventResult {
  event?: Event;
}
export interface ModelEndpointDataBlob {
  byteBuffer?: Uint8Array;
  contentType?: string;
}
export interface GetEventPredictionRequest {
  detectorId: string | undefined;
  detectorVersionId?: string;
  eventId: string | undefined;
  eventTypeName: string | undefined;
  entities: Entity[] | undefined;
  eventTimestamp: string | undefined;
  eventVariables: Record<string, string> | undefined;
  externalModelEndpointDataBlobs?: Record<string, ModelEndpointDataBlob>;
}
export declare const ModelSource: {
  readonly SAGEMAKER: "SAGEMAKER";
};
export type ModelSource = (typeof ModelSource)[keyof typeof ModelSource];
export interface ExternalModelSummary {
  modelEndpoint?: string;
  modelSource?: ModelSource;
}
export interface ExternalModelOutputs {
  externalModel?: ExternalModelSummary;
  outputs?: Record<string, string>;
}
export interface ModelScores {
  modelVersion?: ModelVersion;
  scores?: Record<string, number>;
}
export interface RuleResult {
  ruleId?: string;
  outcomes?: string[];
}
export interface GetEventPredictionResult {
  modelScores?: ModelScores[];
  ruleResults?: RuleResult[];
  externalModelOutputs?: ExternalModelOutputs[];
}
export declare class ResourceUnavailableException extends __BaseException {
  readonly name: "ResourceUnavailableException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>
  );
}
export interface GetEventPredictionMetadataRequest {
  eventId: string | undefined;
  eventTypeName: string | undefined;
  detectorId: string | undefined;
  detectorVersionId: string | undefined;
  predictionTimestamp: string | undefined;
}
export interface EvaluatedExternalModel {
  modelEndpoint?: string;
  useEventVariables?: boolean;
  inputVariables?: Record<string, string>;
  outputVariables?: Record<string, string>;
}
export interface VariableImpactExplanation {
  eventVariableName?: string;
  relativeImpact?: string;
  logOddsImpact?: number;
}
export interface PredictionExplanations {
  variableImpactExplanations?: VariableImpactExplanation[];
  aggregatedVariablesImpactExplanations?: AggregatedVariablesImpactExplanation[];
}
export interface ModelVersionEvaluation {
  outputVariableName?: string;
  evaluationScore?: string;
  predictionExplanations?: PredictionExplanations;
}
export interface EvaluatedModelVersion {
  modelId?: string;
  modelVersion?: string;
  modelType?: string;
  evaluations?: ModelVersionEvaluation[];
}
export interface EventVariableSummary {
  name?: string;
  value?: string;
  source?: string;
}
export interface EvaluatedRule {
  ruleId?: string;
  ruleVersion?: string;
  expression?: string;
  expressionWithValues?: string;
  outcomes?: string[];
  evaluated?: boolean;
  matched?: boolean;
}
export interface GetEventPredictionMetadataResult {
  eventId?: string;
  eventTypeName?: string;
  entityId?: string;
  entityType?: string;
  eventTimestamp?: string;
  detectorId?: string;
  detectorVersionId?: string;
  detectorVersionStatus?: string;
  eventVariables?: EventVariableSummary[];
  rules?: EvaluatedRule[];
  ruleExecutionMode?: RuleExecutionMode;
  outcomes?: string[];
  evaluatedModelVersions?: EvaluatedModelVersion[];
  evaluatedExternalModels?: EvaluatedExternalModel[];
  predictionTimestamp?: string;
}
export interface GetEventTypesRequest {
  name?: string;
  nextToken?: string;
  maxResults?: number;
}
export declare const EventIngestion: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type EventIngestion =
  (typeof EventIngestion)[keyof typeof EventIngestion];
export interface EventOrchestration {
  eventBridgeEnabled: boolean | undefined;
}
export interface IngestedEventStatistics {
  numberOfEvents?: number;
  eventDataSizeInBytes?: number;
  leastRecentEvent?: string;
  mostRecentEvent?: string;
  lastUpdatedTime?: string;
}
export interface EventType {
  name?: string;
  description?: string;
  eventVariables?: string[];
  labels?: string[];
  entityTypes?: string[];
  eventIngestion?: EventIngestion;
  ingestedEventStatistics?: IngestedEventStatistics;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
  eventOrchestration?: EventOrchestration;
}
export interface GetEventTypesResult {
  eventTypes?: EventType[];
  nextToken?: string;
}
export interface GetExternalModelsRequest {
  modelEndpoint?: string;
  nextToken?: string;
  maxResults?: number;
}
export declare const ModelInputDataFormat: {
  readonly CSV: "TEXT_CSV";
  readonly JSON: "APPLICATION_JSON";
};
export type ModelInputDataFormat =
  (typeof ModelInputDataFormat)[keyof typeof ModelInputDataFormat];
export interface ModelInputConfiguration {
  eventTypeName?: string;
  format?: ModelInputDataFormat;
  useEventVariables: boolean | undefined;
  jsonInputTemplate?: string;
  csvInputTemplate?: string;
}
export declare const ModelEndpointStatus: {
  readonly ASSOCIATED: "ASSOCIATED";
  readonly DISSOCIATED: "DISSOCIATED";
};
export type ModelEndpointStatus =
  (typeof ModelEndpointStatus)[keyof typeof ModelEndpointStatus];
export declare const ModelOutputDataFormat: {
  readonly CSV: "TEXT_CSV";
  readonly JSONLINES: "APPLICATION_JSONLINES";
};
export type ModelOutputDataFormat =
  (typeof ModelOutputDataFormat)[keyof typeof ModelOutputDataFormat];
export interface ModelOutputConfiguration {
  format: ModelOutputDataFormat | undefined;
  jsonKeyToVariableMap?: Record<string, string>;
  csvIndexToVariableMap?: Record<string, string>;
}
export interface ExternalModel {
  modelEndpoint?: string;
  modelSource?: ModelSource;
  invokeModelEndpointRoleArn?: string;
  inputConfiguration?: ModelInputConfiguration;
  outputConfiguration?: ModelOutputConfiguration;
  modelEndpointStatus?: ModelEndpointStatus;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
}
export interface GetExternalModelsResult {
  externalModels?: ExternalModel[];
  nextToken?: string;
}
export interface KMSKey {
  kmsEncryptionKeyArn?: string;
}
export interface GetKMSEncryptionKeyResult {
  kmsKey?: KMSKey;
}
export interface GetLabelsRequest {
  name?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface Label {
  name?: string;
  description?: string;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
}
export interface GetLabelsResult {
  labels?: Label[];
  nextToken?: string;
}
export interface GetListElementsRequest {
  name: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface GetListElementsResult {
  elements?: string[];
  nextToken?: string;
}
export interface GetListsMetadataRequest {
  name?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface GetListsMetadataResult {
  lists?: AllowDenyList[];
  nextToken?: string;
}
export interface GetModelsRequest {
  modelId?: string;
  modelType?: ModelTypeEnum;
  nextToken?: string;
  maxResults?: number;
}
export interface Model {
  modelId?: string;
  modelType?: ModelTypeEnum;
  description?: string;
  eventTypeName?: string;
  createdTime?: string;
  lastUpdatedTime?: string;
  arn?: string;
}
export interface GetModelsResult {
  nextToken?: string;
  models?: Model[];
}
export interface GetModelVersionRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  modelVersionNumber: string | undefined;
}
export interface GetModelVersionResult {
  modelId?: string;
  modelType?: ModelTypeEnum;
  modelVersionNumber?: string;
  trainingDataSource?: TrainingDataSourceEnum;
  trainingDataSchema?: TrainingDataSchema;
  externalEventsDetail?: ExternalEventsDetail;
  ingestedEventsDetail?: IngestedEventsDetail;
  status?: string;
  arn?: string;
}
export interface GetOutcomesRequest {
  name?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface Outcome {
  name?: string;
  description?: string;
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
}
export interface GetOutcomesResult {
  outcomes?: Outcome[];
  nextToken?: string;
}
export interface GetRulesRequest {
  ruleId?: string;
  detectorId: string | undefined;
  ruleVersion?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface RuleDetail {
  ruleId?: string;
  description?: string;
  detectorId?: string;
  ruleVersion?: string;
  expression?: string;
  language?: Language;
  outcomes?: string[];
  lastUpdatedTime?: string;
  createdTime?: string;
  arn?: string;
}
export interface GetRulesResult {
  ruleDetails?: RuleDetail[];
  nextToken?: string;
}
export interface GetVariablesRequest {
  name?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface GetVariablesResult {
  variables?: Variable[];
  nextToken?: string;
}
export interface FilterCondition {
  value?: string;
}
export interface PredictionTimeRange {
  startTime: string | undefined;
  endTime: string | undefined;
}
export interface ListEventPredictionsRequest {
  eventId?: FilterCondition;
  eventType?: FilterCondition;
  detectorId?: FilterCondition;
  detectorVersionId?: FilterCondition;
  predictionTimeRange?: PredictionTimeRange;
  nextToken?: string;
  maxResults?: number;
}
export interface EventPredictionSummary {
  eventId?: string;
  eventTypeName?: string;
  eventTimestamp?: string;
  predictionTimestamp?: string;
  detectorId?: string;
  detectorVersionId?: string;
}
export interface ListEventPredictionsResult {
  eventPredictionSummaries?: EventPredictionSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceARN: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTagsForResourceResult {
  tags?: Tag[];
  nextToken?: string;
}
export interface PutDetectorRequest {
  detectorId: string | undefined;
  description?: string;
  eventTypeName: string | undefined;
  tags?: Tag[];
}
export interface PutDetectorResult {}
export interface PutEntityTypeRequest {
  name: string | undefined;
  description?: string;
  tags?: Tag[];
}
export interface PutEntityTypeResult {}
export interface PutEventTypeRequest {
  name: string | undefined;
  description?: string;
  eventVariables: string[] | undefined;
  labels?: string[];
  entityTypes: string[] | undefined;
  eventIngestion?: EventIngestion;
  tags?: Tag[];
  eventOrchestration?: EventOrchestration;
}
export interface PutEventTypeResult {}
export interface PutExternalModelRequest {
  modelEndpoint: string | undefined;
  modelSource: ModelSource | undefined;
  invokeModelEndpointRoleArn: string | undefined;
  inputConfiguration: ModelInputConfiguration | undefined;
  outputConfiguration: ModelOutputConfiguration | undefined;
  modelEndpointStatus: ModelEndpointStatus | undefined;
  tags?: Tag[];
}
export interface PutExternalModelResult {}
export interface PutKMSEncryptionKeyRequest {
  kmsEncryptionKeyArn: string | undefined;
}
export interface PutKMSEncryptionKeyResult {}
export interface PutLabelRequest {
  name: string | undefined;
  description?: string;
  tags?: Tag[];
}
export interface PutLabelResult {}
export interface PutOutcomeRequest {
  name: string | undefined;
  description?: string;
  tags?: Tag[];
}
export interface PutOutcomeResult {}
export interface SendEventRequest {
  eventId: string | undefined;
  eventTypeName: string | undefined;
  eventTimestamp: string | undefined;
  eventVariables: Record<string, string> | undefined;
  assignedLabel?: string;
  labelTimestamp?: string;
  entities: Entity[] | undefined;
}
export interface SendEventResult {}
export interface TagResourceRequest {
  resourceARN: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResult {}
export interface UntagResourceRequest {
  resourceARN: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResult {}
export interface UpdateDetectorVersionRequest {
  detectorId: string | undefined;
  detectorVersionId: string | undefined;
  externalModelEndpoints: string[] | undefined;
  rules: Rule[] | undefined;
  description?: string;
  modelVersions?: ModelVersion[];
  ruleExecutionMode?: RuleExecutionMode;
}
export interface UpdateDetectorVersionResult {}
export interface UpdateDetectorVersionMetadataRequest {
  detectorId: string | undefined;
  detectorVersionId: string | undefined;
  description: string | undefined;
}
export interface UpdateDetectorVersionMetadataResult {}
export interface UpdateDetectorVersionStatusRequest {
  detectorId: string | undefined;
  detectorVersionId: string | undefined;
  status: DetectorVersionStatus | undefined;
}
export interface UpdateDetectorVersionStatusResult {}
export interface UpdateEventLabelRequest {
  eventId: string | undefined;
  eventTypeName: string | undefined;
  assignedLabel: string | undefined;
  labelTimestamp: string | undefined;
}
export interface UpdateEventLabelResult {}
export declare const ListUpdateMode: {
  readonly APPEND: "APPEND";
  readonly REMOVE: "REMOVE";
  readonly REPLACE: "REPLACE";
};
export type ListUpdateMode =
  (typeof ListUpdateMode)[keyof typeof ListUpdateMode];
export interface UpdateListRequest {
  name: string | undefined;
  elements?: string[];
  description?: string;
  updateMode?: ListUpdateMode;
  variableType?: string;
}
export interface UpdateListResult {}
export interface UpdateModelRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  description?: string;
}
export interface UpdateModelResult {}
export interface UpdateModelVersionRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  majorVersionNumber: string | undefined;
  externalEventsDetail?: ExternalEventsDetail;
  ingestedEventsDetail?: IngestedEventsDetail;
  tags?: Tag[];
}
export interface UpdateModelVersionResult {
  modelId?: string;
  modelType?: ModelTypeEnum;
  modelVersionNumber?: string;
  status?: string;
}
export declare const ModelVersionStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
  readonly TRAINING_CANCELLED: "TRAINING_CANCELLED";
};
export type ModelVersionStatus =
  (typeof ModelVersionStatus)[keyof typeof ModelVersionStatus];
export interface UpdateModelVersionStatusRequest {
  modelId: string | undefined;
  modelType: ModelTypeEnum | undefined;
  modelVersionNumber: string | undefined;
  status: ModelVersionStatus | undefined;
}
export interface UpdateModelVersionStatusResult {}
export interface UpdateRuleMetadataRequest {
  rule: Rule | undefined;
  description: string | undefined;
}
export interface UpdateRuleMetadataResult {}
export interface UpdateRuleVersionRequest {
  rule: Rule | undefined;
  description?: string;
  expression: string | undefined;
  language: Language | undefined;
  outcomes: string[] | undefined;
  tags?: Tag[];
}
export interface UpdateRuleVersionResult {
  rule?: Rule;
}
export interface UpdateVariableRequest {
  name: string | undefined;
  defaultValue?: string;
  description?: string;
  variableType?: string;
}
export interface UpdateVariableResult {}
export declare const CreateListRequestFilterSensitiveLog: (
  obj: CreateListRequest
) => any;
export declare const CreateRuleRequestFilterSensitiveLog: (
  obj: CreateRuleRequest
) => any;
export declare const EntityFilterSensitiveLog: (obj: Entity) => any;
export declare const EventFilterSensitiveLog: (obj: Event) => any;
export declare const GetEventResultFilterSensitiveLog: (
  obj: GetEventResult
) => any;
export declare const GetEventPredictionRequestFilterSensitiveLog: (
  obj: GetEventPredictionRequest
) => any;
export declare const EvaluatedExternalModelFilterSensitiveLog: (
  obj: EvaluatedExternalModel
) => any;
export declare const EventVariableSummaryFilterSensitiveLog: (
  obj: EventVariableSummary
) => any;
export declare const EvaluatedRuleFilterSensitiveLog: (
  obj: EvaluatedRule
) => any;
export declare const GetEventPredictionMetadataResultFilterSensitiveLog: (
  obj: GetEventPredictionMetadataResult
) => any;
export declare const EventTypeFilterSensitiveLog: (obj: EventType) => any;
export declare const GetEventTypesResultFilterSensitiveLog: (
  obj: GetEventTypesResult
) => any;
export declare const GetListElementsResultFilterSensitiveLog: (
  obj: GetListElementsResult
) => any;
export declare const RuleDetailFilterSensitiveLog: (obj: RuleDetail) => any;
export declare const GetRulesResultFilterSensitiveLog: (
  obj: GetRulesResult
) => any;
export declare const SendEventRequestFilterSensitiveLog: (
  obj: SendEventRequest
) => any;
export declare const UpdateListRequestFilterSensitiveLog: (
  obj: UpdateListRequest
) => any;
export declare const UpdateRuleVersionRequestFilterSensitiveLog: (
  obj: UpdateRuleVersionRequest
) => any;
