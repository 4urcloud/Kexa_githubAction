import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { MarketplaceMeteringServiceException as __BaseException } from "../models/MarketplaceMeteringServiceException";
import { CustomerNotEntitledException, DisabledApiException, DuplicateRequestException, ExpiredTokenException, InternalServiceErrorException, InvalidCustomerIdentifierException, InvalidEndpointRegionException, InvalidProductCodeException, InvalidPublicKeyVersionException, InvalidRegionException, InvalidTagException, InvalidTokenException, InvalidUsageAllocationsException, InvalidUsageDimensionException, PlatformNotSupportedException, ThrottlingException, TimestampOutOfBoundsException, } from "../models/models_0";
export const se_BatchMeterUsageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchMeterUsage");
    let body;
    body = JSON.stringify(se_BatchMeterUsageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_MeterUsageCommand = async (input, context) => {
    const headers = sharedHeaders("MeterUsage");
    let body;
    body = JSON.stringify(se_MeterUsageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterUsageCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterUsage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResolveCustomerCommand = async (input, context) => {
    const headers = sharedHeaders("ResolveCustomer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_BatchMeterUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchMeterUsageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_MeterUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterUsageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResolveCustomerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DisabledApiException":
        case "com.amazonaws.marketplacemetering#DisabledApiException":
            throw await de_DisabledApiExceptionRes(parsedOutput, context);
        case "InternalServiceErrorException":
        case "com.amazonaws.marketplacemetering#InternalServiceErrorException":
            throw await de_InternalServiceErrorExceptionRes(parsedOutput, context);
        case "InvalidCustomerIdentifierException":
        case "com.amazonaws.marketplacemetering#InvalidCustomerIdentifierException":
            throw await de_InvalidCustomerIdentifierExceptionRes(parsedOutput, context);
        case "InvalidProductCodeException":
        case "com.amazonaws.marketplacemetering#InvalidProductCodeException":
            throw await de_InvalidProductCodeExceptionRes(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.marketplacemetering#InvalidTagException":
            throw await de_InvalidTagExceptionRes(parsedOutput, context);
        case "InvalidUsageAllocationsException":
        case "com.amazonaws.marketplacemetering#InvalidUsageAllocationsException":
            throw await de_InvalidUsageAllocationsExceptionRes(parsedOutput, context);
        case "InvalidUsageDimensionException":
        case "com.amazonaws.marketplacemetering#InvalidUsageDimensionException":
            throw await de_InvalidUsageDimensionExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.marketplacemetering#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "TimestampOutOfBoundsException":
        case "com.amazonaws.marketplacemetering#TimestampOutOfBoundsException":
            throw await de_TimestampOutOfBoundsExceptionRes(parsedOutput, context);
        case "CustomerNotEntitledException":
        case "com.amazonaws.marketplacemetering#CustomerNotEntitledException":
            throw await de_CustomerNotEntitledExceptionRes(parsedOutput, context);
        case "DuplicateRequestException":
        case "com.amazonaws.marketplacemetering#DuplicateRequestException":
            throw await de_DuplicateRequestExceptionRes(parsedOutput, context);
        case "InvalidEndpointRegionException":
        case "com.amazonaws.marketplacemetering#InvalidEndpointRegionException":
            throw await de_InvalidEndpointRegionExceptionRes(parsedOutput, context);
        case "InvalidPublicKeyVersionException":
        case "com.amazonaws.marketplacemetering#InvalidPublicKeyVersionException":
            throw await de_InvalidPublicKeyVersionExceptionRes(parsedOutput, context);
        case "InvalidRegionException":
        case "com.amazonaws.marketplacemetering#InvalidRegionException":
            throw await de_InvalidRegionExceptionRes(parsedOutput, context);
        case "PlatformNotSupportedException":
        case "com.amazonaws.marketplacemetering#PlatformNotSupportedException":
            throw await de_PlatformNotSupportedExceptionRes(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.marketplacemetering#ExpiredTokenException":
            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);
        case "InvalidTokenException":
        case "com.amazonaws.marketplacemetering#InvalidTokenException":
            throw await de_InvalidTokenExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CustomerNotEntitledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CustomerNotEntitledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DisabledApiExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DisabledApiException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DuplicateRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DuplicateRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidCustomerIdentifierExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidCustomerIdentifierException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidEndpointRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidEndpointRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidProductCodeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidProductCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPublicKeyVersionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPublicKeyVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTagExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidUsageAllocationsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidUsageAllocationsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidUsageDimensionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidUsageDimensionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PlatformNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new PlatformNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TimestampOutOfBoundsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TimestampOutOfBoundsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_BatchMeterUsageRequest = (input, context) => {
    return take(input, {
        ProductCode: [],
        UsageRecords: (_) => se_UsageRecordList(_, context),
    });
};
const se_MeterUsageRequest = (input, context) => {
    return take(input, {
        DryRun: [],
        ProductCode: [],
        Timestamp: (_) => Math.round(_.getTime() / 1000),
        UsageAllocations: _json,
        UsageDimension: [],
        UsageQuantity: [],
    });
};
const se_UsageRecord = (input, context) => {
    return take(input, {
        CustomerIdentifier: [],
        Dimension: [],
        Quantity: [],
        Timestamp: (_) => Math.round(_.getTime() / 1000),
        UsageAllocations: _json,
    });
};
const se_UsageRecordList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UsageRecord(entry, context);
    });
};
const de_BatchMeterUsageResult = (output, context) => {
    return take(output, {
        Results: (_) => de_UsageRecordResultList(_, context),
        UnprocessedRecords: (_) => de_UsageRecordList(_, context),
    });
};
const de_RegisterUsageResult = (output, context) => {
    return take(output, {
        PublicKeyRotationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Signature: __expectString,
    });
};
const de_UsageRecord = (output, context) => {
    return take(output, {
        CustomerIdentifier: __expectString,
        Dimension: __expectString,
        Quantity: __expectInt32,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        UsageAllocations: _json,
    });
};
const de_UsageRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageRecord(entry, context);
    });
    return retVal;
};
const de_UsageRecordResult = (output, context) => {
    return take(output, {
        MeteringRecordId: __expectString,
        Status: __expectString,
        UsageRecord: (_) => de_UsageRecord(_, context),
    });
};
const de_UsageRecordResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UsageRecordResult(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSMPMeteringService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
