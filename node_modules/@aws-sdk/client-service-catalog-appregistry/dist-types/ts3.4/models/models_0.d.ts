import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ServiceCatalogAppRegistryServiceException as __BaseException } from "./ServiceCatalogAppRegistryServiceException";
export interface Application {
  id?: string;
  arn?: string;
  name?: string;
  description?: string;
  creationTime?: Date;
  lastUpdateTime?: Date;
  tags?: Record<string, string>;
  applicationTag?: Record<string, string>;
}
export interface ApplicationSummary {
  id?: string;
  arn?: string;
  name?: string;
  description?: string;
  creationTime?: Date;
  lastUpdateTime?: Date;
}
export declare const ApplicationTagStatus: {
  readonly FAILURE: "FAILURE";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCESS: "SUCCESS";
};
export type ApplicationTagStatus =
  (typeof ApplicationTagStatus)[keyof typeof ApplicationTagStatus];
export interface ResourcesListItem {
  resourceArn?: string;
  errorMessage?: string;
  status?: string;
  resourceType?: string;
}
export interface ApplicationTagResult {
  applicationTagStatus?: ApplicationTagStatus;
  errorMessage?: string;
  resources?: ResourcesListItem[];
  nextToken?: string;
}
export interface TagQueryConfiguration {
  tagKey?: string;
}
export interface AppRegistryConfiguration {
  tagQueryConfiguration?: TagQueryConfiguration;
}
export interface AssociateAttributeGroupRequest {
  application: string | undefined;
  attributeGroup: string | undefined;
}
export interface AssociateAttributeGroupResponse {
  applicationArn?: string;
  attributeGroupArn?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const AssociationOption: {
  readonly APPLY_APPLICATION_TAG: "APPLY_APPLICATION_TAG";
  readonly SKIP_APPLICATION_TAG: "SKIP_APPLICATION_TAG";
};
export type AssociationOption =
  (typeof AssociationOption)[keyof typeof AssociationOption];
export declare const ResourceType: {
  readonly CFN_STACK: "CFN_STACK";
  readonly RESOURCE_TAG_VALUE: "RESOURCE_TAG_VALUE";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export interface AssociateResourceRequest {
  application: string | undefined;
  resourceType: ResourceType | undefined;
  resource: string | undefined;
  options?: AssociationOption[];
}
export interface AssociateResourceResponse {
  applicationArn?: string;
  resourceArn?: string;
  options?: AssociationOption[];
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  serviceCode?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface AttributeGroup {
  id?: string;
  arn?: string;
  name?: string;
  description?: string;
  creationTime?: Date;
  lastUpdateTime?: Date;
  tags?: Record<string, string>;
}
export interface AttributeGroupDetails {
  id?: string;
  arn?: string;
  name?: string;
  createdBy?: string;
}
export interface AttributeGroupSummary {
  id?: string;
  arn?: string;
  name?: string;
  description?: string;
  creationTime?: Date;
  lastUpdateTime?: Date;
  createdBy?: string;
}
export interface CreateApplicationRequest {
  name: string | undefined;
  description?: string;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateApplicationResponse {
  application?: Application;
}
export interface CreateAttributeGroupRequest {
  name: string | undefined;
  description?: string;
  attributes: string | undefined;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateAttributeGroupResponse {
  attributeGroup?: AttributeGroup;
}
export interface DeleteApplicationRequest {
  application: string | undefined;
}
export interface DeleteApplicationResponse {
  application?: ApplicationSummary;
}
export interface DeleteAttributeGroupRequest {
  attributeGroup: string | undefined;
}
export interface DeleteAttributeGroupResponse {
  attributeGroup?: AttributeGroupSummary;
}
export interface DisassociateAttributeGroupRequest {
  application: string | undefined;
  attributeGroup: string | undefined;
}
export interface DisassociateAttributeGroupResponse {
  applicationArn?: string;
  attributeGroupArn?: string;
}
export interface DisassociateResourceRequest {
  application: string | undefined;
  resourceType: ResourceType | undefined;
  resource: string | undefined;
}
export interface DisassociateResourceResponse {
  applicationArn?: string;
  resourceArn?: string;
}
export interface GetApplicationRequest {
  application: string | undefined;
}
export declare const ResourceGroupState: {
  readonly CREATE_COMPLETE: "CREATE_COMPLETE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly UPDATE_COMPLETE: "UPDATE_COMPLETE";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type ResourceGroupState =
  (typeof ResourceGroupState)[keyof typeof ResourceGroupState];
export interface ResourceGroup {
  state?: ResourceGroupState;
  arn?: string;
  errorMessage?: string;
}
export interface Integrations {
  resourceGroup?: ResourceGroup;
  applicationTagResourceGroup?: ResourceGroup;
}
export interface GetApplicationResponse {
  id?: string;
  arn?: string;
  name?: string;
  description?: string;
  creationTime?: Date;
  lastUpdateTime?: Date;
  associatedResourceCount?: number;
  tags?: Record<string, string>;
  integrations?: Integrations;
  applicationTag?: Record<string, string>;
}
export declare const ResourceItemStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SKIPPED: "SKIPPED";
  readonly SUCCESS: "SUCCESS";
};
export type ResourceItemStatus =
  (typeof ResourceItemStatus)[keyof typeof ResourceItemStatus];
export interface GetAssociatedResourceRequest {
  application: string | undefined;
  resourceType: ResourceType | undefined;
  resource: string | undefined;
  nextToken?: string;
  resourceTagStatus?: ResourceItemStatus[];
  maxResults?: number;
}
export interface ResourceIntegrations {
  resourceGroup?: ResourceGroup;
}
export interface Resource {
  name?: string;
  arn?: string;
  associationTime?: Date;
  integrations?: ResourceIntegrations;
}
export interface GetAssociatedResourceResponse {
  resource?: Resource;
  options?: AssociationOption[];
  applicationTagResult?: ApplicationTagResult;
}
export interface GetAttributeGroupRequest {
  attributeGroup: string | undefined;
}
export interface GetAttributeGroupResponse {
  id?: string;
  arn?: string;
  name?: string;
  description?: string;
  attributes?: string;
  creationTime?: Date;
  lastUpdateTime?: Date;
  tags?: Record<string, string>;
  createdBy?: string;
}
export interface GetConfigurationResponse {
  configuration?: AppRegistryConfiguration;
}
export interface ListApplicationsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface ListApplicationsResponse {
  applications?: ApplicationSummary[];
  nextToken?: string;
}
export interface ListAssociatedAttributeGroupsRequest {
  application: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListAssociatedAttributeGroupsResponse {
  attributeGroups?: string[];
  nextToken?: string;
}
export interface ListAssociatedResourcesRequest {
  application: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ResourceDetails {
  tagValue?: string;
}
export interface ResourceInfo {
  name?: string;
  arn?: string;
  resourceType?: ResourceType;
  resourceDetails?: ResourceDetails;
  options?: AssociationOption[];
}
export interface ListAssociatedResourcesResponse {
  resources?: ResourceInfo[];
  nextToken?: string;
}
export interface ListAttributeGroupsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface ListAttributeGroupsResponse {
  attributeGroups?: AttributeGroupSummary[];
  nextToken?: string;
}
export interface ListAttributeGroupsForApplicationRequest {
  application: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListAttributeGroupsForApplicationResponse {
  attributeGroupsDetails?: AttributeGroupDetails[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface PutConfigurationRequest {
  configuration: AppRegistryConfiguration | undefined;
}
export interface SyncResourceRequest {
  resourceType: ResourceType | undefined;
  resource: string | undefined;
}
export declare const SyncAction: {
  readonly NO_ACTION: "NO_ACTION";
  readonly START_SYNC: "START_SYNC";
};
export type SyncAction = (typeof SyncAction)[keyof typeof SyncAction];
export interface SyncResourceResponse {
  applicationArn?: string;
  resourceArn?: string;
  actionTaken?: SyncAction;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateApplicationRequest {
  application: string | undefined;
  name?: string;
  description?: string;
}
export interface UpdateApplicationResponse {
  application?: Application;
}
export interface UpdateAttributeGroupRequest {
  attributeGroup: string | undefined;
  name?: string;
  description?: string;
  attributes?: string;
}
export interface UpdateAttributeGroupResponse {
  attributeGroup?: AttributeGroup;
}
