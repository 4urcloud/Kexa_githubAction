import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { ServiceCatalogAppRegistryServiceException as __BaseException } from "../models/ServiceCatalogAppRegistryServiceException";
export const se_AssociateAttributeGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}/attribute-groups/{attributeGroup}");
    b.p("application", () => input.application, "{application}", false);
    b.p("attributeGroup", () => input.attributeGroup, "{attributeGroup}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{application}/resources/{resourceType}/{resource}");
    b.p("application", () => input.application, "{application}", false);
    b.p("resourceType", () => input.resourceType, "{resourceType}", false);
    b.p("resource", () => input.resource, "{resource}", false);
    let body;
    body = JSON.stringify(take(input, {
        options: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAttributeGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/attribute-groups");
    let body;
    body = JSON.stringify(take(input, {
        attributes: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}");
    b.p("application", () => input.application, "{application}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAttributeGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attribute-groups/{attributeGroup}");
    b.p("attributeGroup", () => input.attributeGroup, "{attributeGroup}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateAttributeGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}/attribute-groups/{attributeGroup}");
    b.p("application", () => input.application, "{application}", false);
    b.p("attributeGroup", () => input.attributeGroup, "{attributeGroup}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}/resources/{resourceType}/{resource}");
    b.p("application", () => input.application, "{application}", false);
    b.p("resourceType", () => input.resourceType, "{resourceType}", false);
    b.p("resource", () => input.resource, "{resource}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}");
    b.p("application", () => input.application, "{application}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAssociatedResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}/resources/{resourceType}/{resource}");
    b.p("application", () => input.application, "{application}", false);
    b.p("resourceType", () => input.resourceType, "{resourceType}", false);
    b.p("resource", () => input.resource, "{resource}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_rTS]: [() => input.resourceTagStatus !== void 0, () => (input[_rTS] || []).map((_entry) => _entry)],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetAttributeGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attribute-groups/{attributeGroup}");
    b.p("attributeGroup", () => input.attributeGroup, "{attributeGroup}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configuration");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssociatedAttributeGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}/attribute-groups");
    b.p("application", () => input.application, "{application}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssociatedResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}/resources");
    b.p("application", () => input.application, "{application}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAttributeGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attribute-groups");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAttributeGroupsForApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{application}/attribute-group-details");
    b.p("application", () => input.application, "{application}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/configuration");
    let body;
    body = JSON.stringify(take(input, {
        configuration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_SyncResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/sync/{resourceType}/{resource}");
    b.p("resourceType", () => input.resourceType, "{resourceType}", false);
    b.p("resource", () => input.resource, "{resource}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{application}");
    b.p("application", () => input.application, "{application}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateAttributeGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/attribute-groups/{attributeGroup}");
    b.p("attributeGroup", () => input.attributeGroup, "{attributeGroup}", false);
    let body;
    body = JSON.stringify(take(input, {
        attributes: [],
        description: [],
        name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_AssociateAttributeGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationArn: __expectString,
        attributeGroupArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationArn: __expectString,
        options: _json,
        resourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        application: (_) => de_Application(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAttributeGroupCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        attributeGroup: (_) => de_AttributeGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        application: (_) => de_ApplicationSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAttributeGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        attributeGroup: (_) => de_AttributeGroupSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateAttributeGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationArn: __expectString,
        attributeGroupArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationArn: __expectString,
        resourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationTag: _json,
        arn: __expectString,
        associatedResourceCount: __expectInt32,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        integrations: _json,
        lastUpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAssociatedResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationTagResult: _json,
        options: _json,
        resource: (_) => de_Resource(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAttributeGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        attributes: __expectString,
        createdBy: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        lastUpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configuration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applications: (_) => de_ApplicationSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssociatedAttributeGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        attributeGroups: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssociatedResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resources: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAttributeGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        attributeGroups: (_) => de_AttributeGroupSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAttributeGroupsForApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        attributeGroupsDetails: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SyncResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        actionTaken: __expectString,
        applicationArn: __expectString,
        resourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        application: (_) => de_Application(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAttributeGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        attributeGroup: (_) => de_AttributeGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.servicecatalogappregistry#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.servicecatalogappregistry#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.servicecatalogappregistry#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.servicecatalogappregistry#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.servicecatalogappregistry#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.servicecatalogappregistry#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Application = (output, context) => {
    return take(output, {
        applicationTag: _json,
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        lastUpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
        tags: _json,
    });
};
const de_ApplicationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationSummary(entry, context);
    });
    return retVal;
};
const de_ApplicationSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        lastUpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
    });
};
const de_AttributeGroup = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        lastUpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
        tags: _json,
    });
};
const de_AttributeGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeGroupSummary(entry, context);
    });
    return retVal;
};
const de_AttributeGroupSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdBy: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        lastUpdateTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
    });
};
const de_Resource = (output, context) => {
    return take(output, {
        arn: __expectString,
        associationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        integrations: _json,
        name: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _mR = "maxResults";
const _nT = "nextToken";
const _rTS = "resourceTagStatus";
const _tK = "tagKeys";
