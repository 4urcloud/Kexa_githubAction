import { CloudDirectoryServiceException as __BaseException } from "./CloudDirectoryServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export var TypedAttributeValue;
(function (TypedAttributeValue) {
    TypedAttributeValue.visit = (value, visitor) => {
        if (value.StringValue !== undefined)
            return visitor.StringValue(value.StringValue);
        if (value.BinaryValue !== undefined)
            return visitor.BinaryValue(value.BinaryValue);
        if (value.BooleanValue !== undefined)
            return visitor.BooleanValue(value.BooleanValue);
        if (value.NumberValue !== undefined)
            return visitor.NumberValue(value.NumberValue);
        if (value.DatetimeValue !== undefined)
            return visitor.DatetimeValue(value.DatetimeValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(TypedAttributeValue || (TypedAttributeValue = {}));
export class DirectoryNotEnabledException extends __BaseException {
    constructor(opts) {
        super({
            name: "DirectoryNotEnabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "DirectoryNotEnabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DirectoryNotEnabledException.prototype);
        this.Message = opts.Message;
    }
}
export class FacetValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "FacetValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "FacetValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FacetValidationException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidArnException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArnException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class RetryableConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "RetryableConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "RetryableConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RetryableConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidAttachmentException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidAttachmentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidAttachmentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAttachmentException.prototype);
        this.Message = opts.Message;
    }
}
export class SchemaAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "SchemaAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "SchemaAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SchemaAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class LinkNameAlreadyInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "LinkNameAlreadyInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "LinkNameAlreadyInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LinkNameAlreadyInUseException.prototype);
        this.Message = opts.Message;
    }
}
export class NotPolicyException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotPolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotPolicyException.prototype);
        this.Message = opts.Message;
    }
}
export class IndexedAttributeMissingException extends __BaseException {
    constructor(opts) {
        super({
            name: "IndexedAttributeMissingException",
            $fault: "client",
            ...opts,
        });
        this.name = "IndexedAttributeMissingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IndexedAttributeMissingException.prototype);
        this.Message = opts.Message;
    }
}
export class NotIndexException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotIndexException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotIndexException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotIndexException.prototype);
        this.Message = opts.Message;
    }
}
export const ConsistencyLevel = {
    EVENTUAL: "EVENTUAL",
    SERIALIZABLE: "SERIALIZABLE",
};
export const RangeMode = {
    EXCLUSIVE: "EXCLUSIVE",
    FIRST: "FIRST",
    INCLUSIVE: "INCLUSIVE",
    LAST: "LAST",
    LAST_BEFORE_MISSING_VALUES: "LAST_BEFORE_MISSING_VALUES",
};
export const BatchReadExceptionType = {
    AccessDeniedException: "AccessDeniedException",
    CannotListParentOfRootException: "CannotListParentOfRootException",
    DirectoryNotEnabledException: "DirectoryNotEnabledException",
    FacetValidationException: "FacetValidationException",
    InternalServiceException: "InternalServiceException",
    InvalidArnException: "InvalidArnException",
    InvalidNextTokenException: "InvalidNextTokenException",
    LimitExceededException: "LimitExceededException",
    NotIndexException: "NotIndexException",
    NotNodeException: "NotNodeException",
    NotPolicyException: "NotPolicyException",
    ResourceNotFoundException: "ResourceNotFoundException",
    ValidationException: "ValidationException",
};
export const BatchWriteExceptionType = {
    AccessDeniedException: "AccessDeniedException",
    DirectoryNotEnabledException: "DirectoryNotEnabledException",
    FacetValidationException: "FacetValidationException",
    IndexedAttributeMissingException: "IndexedAttributeMissingException",
    InternalServiceException: "InternalServiceException",
    InvalidArnException: "InvalidArnException",
    InvalidAttachmentException: "InvalidAttachmentException",
    LimitExceededException: "LimitExceededException",
    LinkNameAlreadyInUseException: "LinkNameAlreadyInUseException",
    NotIndexException: "NotIndexException",
    NotNodeException: "NotNodeException",
    NotPolicyException: "NotPolicyException",
    ObjectAlreadyDetachedException: "ObjectAlreadyDetachedException",
    ObjectNotDetachedException: "ObjectNotDetachedException",
    ResourceNotFoundException: "ResourceNotFoundException",
    StillContainsLinksException: "StillContainsLinksException",
    UnsupportedIndexTypeException: "UnsupportedIndexTypeException",
    ValidationException: "ValidationException",
};
export class BatchWriteException extends __BaseException {
    constructor(opts) {
        super({
            name: "BatchWriteException",
            $fault: "client",
            ...opts,
        });
        this.name = "BatchWriteException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BatchWriteException.prototype);
        this.Index = opts.Index;
        this.Type = opts.Type;
        this.Message = opts.Message;
    }
}
export const UpdateActionType = {
    CREATE_OR_UPDATE: "CREATE_OR_UPDATE",
    DELETE: "DELETE",
};
export class DirectoryAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "DirectoryAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "DirectoryAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DirectoryAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export const RuleType = {
    BINARY_LENGTH: "BINARY_LENGTH",
    NUMBER_COMPARISON: "NUMBER_COMPARISON",
    STRING_FROM_SET: "STRING_FROM_SET",
    STRING_LENGTH: "STRING_LENGTH",
};
export const FacetAttributeType = {
    BINARY: "BINARY",
    BOOLEAN: "BOOLEAN",
    DATETIME: "DATETIME",
    NUMBER: "NUMBER",
    STRING: "STRING",
    VARIANT: "VARIANT",
};
export const RequiredAttributeBehavior = {
    NOT_REQUIRED: "NOT_REQUIRED",
    REQUIRED_ALWAYS: "REQUIRED_ALWAYS",
};
export const FacetStyle = {
    DYNAMIC: "DYNAMIC",
    STATIC: "STATIC",
};
export const ObjectType = {
    INDEX: "INDEX",
    LEAF_NODE: "LEAF_NODE",
    NODE: "NODE",
    POLICY: "POLICY",
};
export class FacetAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "FacetAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "FacetAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FacetAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRuleException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRuleException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRuleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRuleException.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedIndexTypeException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedIndexTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedIndexTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedIndexTypeException.prototype);
        this.Message = opts.Message;
    }
}
export class DirectoryDeletedException extends __BaseException {
    constructor(opts) {
        super({
            name: "DirectoryDeletedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DirectoryDeletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DirectoryDeletedException.prototype);
        this.Message = opts.Message;
    }
}
export class DirectoryNotDisabledException extends __BaseException {
    constructor(opts) {
        super({
            name: "DirectoryNotDisabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "DirectoryNotDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DirectoryNotDisabledException.prototype);
        this.Message = opts.Message;
    }
}
export class FacetInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "FacetInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "FacetInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FacetInUseException.prototype);
        this.Message = opts.Message;
    }
}
export class FacetNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "FacetNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "FacetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FacetNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ObjectNotDetachedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ObjectNotDetachedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ObjectNotDetachedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectNotDetachedException.prototype);
        this.Message = opts.Message;
    }
}
export class StillContainsLinksException extends __BaseException {
    constructor(opts) {
        super({
            name: "StillContainsLinksException",
            $fault: "client",
            ...opts,
        });
        this.name = "StillContainsLinksException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StillContainsLinksException.prototype);
        this.Message = opts.Message;
    }
}
export class ObjectAlreadyDetachedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ObjectAlreadyDetachedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ObjectAlreadyDetachedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectAlreadyDetachedException.prototype);
        this.Message = opts.Message;
    }
}
export class NotNodeException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotNodeException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotNodeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotNodeException.prototype);
        this.Message = opts.Message;
    }
}
export const DirectoryState = {
    DELETED: "DELETED",
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export class CannotListParentOfRootException extends __BaseException {
    constructor(opts) {
        super({
            name: "CannotListParentOfRootException",
            $fault: "client",
            ...opts,
        });
        this.name = "CannotListParentOfRootException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CannotListParentOfRootException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidTaggingRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTaggingRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTaggingRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTaggingRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class SchemaAlreadyPublishedException extends __BaseException {
    constructor(opts) {
        super({
            name: "SchemaAlreadyPublishedException",
            $fault: "client",
            ...opts,
        });
        this.name = "SchemaAlreadyPublishedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SchemaAlreadyPublishedException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidSchemaDocException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidSchemaDocException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSchemaDocException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSchemaDocException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidFacetUpdateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidFacetUpdateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidFacetUpdateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidFacetUpdateException.prototype);
        this.Message = opts.Message;
    }
}
export class IncompatibleSchemaException extends __BaseException {
    constructor(opts) {
        super({
            name: "IncompatibleSchemaException",
            $fault: "client",
            ...opts,
        });
        this.name = "IncompatibleSchemaException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatibleSchemaException.prototype);
        this.Message = opts.Message;
    }
}
