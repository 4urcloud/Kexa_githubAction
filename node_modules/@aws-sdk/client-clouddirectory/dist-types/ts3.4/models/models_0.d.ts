import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CloudDirectoryServiceException as __BaseException } from "./CloudDirectoryServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AttributeKey {
  SchemaArn: string | undefined;
  FacetName: string | undefined;
  Name: string | undefined;
}
export type TypedAttributeValue =
  | TypedAttributeValue.BinaryValueMember
  | TypedAttributeValue.BooleanValueMember
  | TypedAttributeValue.DatetimeValueMember
  | TypedAttributeValue.NumberValueMember
  | TypedAttributeValue.StringValueMember
  | TypedAttributeValue.$UnknownMember;
export declare namespace TypedAttributeValue {
  interface StringValueMember {
    StringValue: string;
    BinaryValue?: never;
    BooleanValue?: never;
    NumberValue?: never;
    DatetimeValue?: never;
    $unknown?: never;
  }
  interface BinaryValueMember {
    StringValue?: never;
    BinaryValue: Uint8Array;
    BooleanValue?: never;
    NumberValue?: never;
    DatetimeValue?: never;
    $unknown?: never;
  }
  interface BooleanValueMember {
    StringValue?: never;
    BinaryValue?: never;
    BooleanValue: boolean;
    NumberValue?: never;
    DatetimeValue?: never;
    $unknown?: never;
  }
  interface NumberValueMember {
    StringValue?: never;
    BinaryValue?: never;
    BooleanValue?: never;
    NumberValue: string;
    DatetimeValue?: never;
    $unknown?: never;
  }
  interface DatetimeValueMember {
    StringValue?: never;
    BinaryValue?: never;
    BooleanValue?: never;
    NumberValue?: never;
    DatetimeValue: Date;
    $unknown?: never;
  }
  interface $UnknownMember {
    StringValue?: never;
    BinaryValue?: never;
    BooleanValue?: never;
    NumberValue?: never;
    DatetimeValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    StringValue: (value: string) => T;
    BinaryValue: (value: Uint8Array) => T;
    BooleanValue: (value: boolean) => T;
    NumberValue: (value: string) => T;
    DatetimeValue: (value: Date) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: TypedAttributeValue, visitor: Visitor<T>) => T;
}
export interface AttributeKeyAndValue {
  Key: AttributeKey | undefined;
  Value: TypedAttributeValue | undefined;
}
export interface ObjectReference {
  Selector?: string;
}
export interface SchemaFacet {
  SchemaArn?: string;
  FacetName?: string;
}
export interface AddFacetToObjectRequest {
  DirectoryArn: string | undefined;
  SchemaFacet: SchemaFacet | undefined;
  ObjectAttributeList?: AttributeKeyAndValue[];
  ObjectReference: ObjectReference | undefined;
}
export interface AddFacetToObjectResponse {}
export declare class DirectoryNotEnabledException extends __BaseException {
  readonly name: "DirectoryNotEnabledException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DirectoryNotEnabledException, __BaseException>
  );
}
export declare class FacetValidationException extends __BaseException {
  readonly name: "FacetValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<FacetValidationException, __BaseException>
  );
}
export declare class InternalServiceException extends __BaseException {
  readonly name: "InternalServiceException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServiceException, __BaseException>
  );
}
export declare class InvalidArnException extends __BaseException {
  readonly name: "InvalidArnException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidArnException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class RetryableConflictException extends __BaseException {
  readonly name: "RetryableConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<RetryableConflictException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface ApplySchemaRequest {
  PublishedSchemaArn: string | undefined;
  DirectoryArn: string | undefined;
}
export interface ApplySchemaResponse {
  AppliedSchemaArn?: string;
  DirectoryArn?: string;
}
export declare class InvalidAttachmentException extends __BaseException {
  readonly name: "InvalidAttachmentException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidAttachmentException, __BaseException>
  );
}
export declare class SchemaAlreadyExistsException extends __BaseException {
  readonly name: "SchemaAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<SchemaAlreadyExistsException, __BaseException>
  );
}
export interface AttachObjectRequest {
  DirectoryArn: string | undefined;
  ParentReference: ObjectReference | undefined;
  ChildReference: ObjectReference | undefined;
  LinkName: string | undefined;
}
export interface AttachObjectResponse {
  AttachedObjectIdentifier?: string;
}
export declare class LinkNameAlreadyInUseException extends __BaseException {
  readonly name: "LinkNameAlreadyInUseException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LinkNameAlreadyInUseException, __BaseException>
  );
}
export interface AttachPolicyRequest {
  DirectoryArn: string | undefined;
  PolicyReference: ObjectReference | undefined;
  ObjectReference: ObjectReference | undefined;
}
export interface AttachPolicyResponse {}
export declare class NotPolicyException extends __BaseException {
  readonly name: "NotPolicyException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotPolicyException, __BaseException>);
}
export interface AttachToIndexRequest {
  DirectoryArn: string | undefined;
  IndexReference: ObjectReference | undefined;
  TargetReference: ObjectReference | undefined;
}
export interface AttachToIndexResponse {
  AttachedObjectIdentifier?: string;
}
export declare class IndexedAttributeMissingException extends __BaseException {
  readonly name: "IndexedAttributeMissingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      IndexedAttributeMissingException,
      __BaseException
    >
  );
}
export declare class NotIndexException extends __BaseException {
  readonly name: "NotIndexException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotIndexException, __BaseException>);
}
export interface AttributeNameAndValue {
  AttributeName: string | undefined;
  Value: TypedAttributeValue | undefined;
}
export interface TypedLinkSchemaAndFacetName {
  SchemaArn: string | undefined;
  TypedLinkName: string | undefined;
}
export interface AttachTypedLinkRequest {
  DirectoryArn: string | undefined;
  SourceObjectReference: ObjectReference | undefined;
  TargetObjectReference: ObjectReference | undefined;
  TypedLinkFacet: TypedLinkSchemaAndFacetName | undefined;
  Attributes: AttributeNameAndValue[] | undefined;
}
export interface TypedLinkSpecifier {
  TypedLinkFacet: TypedLinkSchemaAndFacetName | undefined;
  SourceObjectReference: ObjectReference | undefined;
  TargetObjectReference: ObjectReference | undefined;
  IdentityAttributeValues: AttributeNameAndValue[] | undefined;
}
export interface AttachTypedLinkResponse {
  TypedLinkSpecifier?: TypedLinkSpecifier;
}
export declare const ConsistencyLevel: {
  readonly EVENTUAL: "EVENTUAL";
  readonly SERIALIZABLE: "SERIALIZABLE";
};
export type ConsistencyLevel =
  (typeof ConsistencyLevel)[keyof typeof ConsistencyLevel];
export interface BatchGetLinkAttributes {
  TypedLinkSpecifier: TypedLinkSpecifier | undefined;
  AttributeNames: string[] | undefined;
}
export interface BatchGetObjectAttributes {
  ObjectReference: ObjectReference | undefined;
  SchemaFacet: SchemaFacet | undefined;
  AttributeNames: string[] | undefined;
}
export interface BatchGetObjectInformation {
  ObjectReference: ObjectReference | undefined;
}
export interface BatchListAttachedIndices {
  TargetReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export declare const RangeMode: {
  readonly EXCLUSIVE: "EXCLUSIVE";
  readonly FIRST: "FIRST";
  readonly INCLUSIVE: "INCLUSIVE";
  readonly LAST: "LAST";
  readonly LAST_BEFORE_MISSING_VALUES: "LAST_BEFORE_MISSING_VALUES";
};
export type RangeMode = (typeof RangeMode)[keyof typeof RangeMode];
export interface TypedAttributeValueRange {
  StartMode: RangeMode | undefined;
  StartValue?: TypedAttributeValue;
  EndMode: RangeMode | undefined;
  EndValue?: TypedAttributeValue;
}
export interface TypedLinkAttributeRange {
  AttributeName?: string;
  Range: TypedAttributeValueRange | undefined;
}
export interface BatchListIncomingTypedLinks {
  ObjectReference: ObjectReference | undefined;
  FilterAttributeRanges?: TypedLinkAttributeRange[];
  FilterTypedLink?: TypedLinkSchemaAndFacetName;
  NextToken?: string;
  MaxResults?: number;
}
export interface ObjectAttributeRange {
  AttributeKey?: AttributeKey;
  Range?: TypedAttributeValueRange;
}
export interface BatchListIndex {
  RangesOnIndexedValues?: ObjectAttributeRange[];
  IndexReference: ObjectReference | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface BatchListObjectAttributes {
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
  FacetFilter?: SchemaFacet;
}
export interface BatchListObjectChildren {
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface BatchListObjectParentPaths {
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface BatchListObjectParents {
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface BatchListObjectPolicies {
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface BatchListOutgoingTypedLinks {
  ObjectReference: ObjectReference | undefined;
  FilterAttributeRanges?: TypedLinkAttributeRange[];
  FilterTypedLink?: TypedLinkSchemaAndFacetName;
  NextToken?: string;
  MaxResults?: number;
}
export interface BatchListPolicyAttachments {
  PolicyReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface BatchLookupPolicy {
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface BatchReadOperation {
  ListObjectAttributes?: BatchListObjectAttributes;
  ListObjectChildren?: BatchListObjectChildren;
  ListAttachedIndices?: BatchListAttachedIndices;
  ListObjectParentPaths?: BatchListObjectParentPaths;
  GetObjectInformation?: BatchGetObjectInformation;
  GetObjectAttributes?: BatchGetObjectAttributes;
  ListObjectParents?: BatchListObjectParents;
  ListObjectPolicies?: BatchListObjectPolicies;
  ListPolicyAttachments?: BatchListPolicyAttachments;
  LookupPolicy?: BatchLookupPolicy;
  ListIndex?: BatchListIndex;
  ListOutgoingTypedLinks?: BatchListOutgoingTypedLinks;
  ListIncomingTypedLinks?: BatchListIncomingTypedLinks;
  GetLinkAttributes?: BatchGetLinkAttributes;
}
export interface BatchReadRequest {
  DirectoryArn: string | undefined;
  Operations: BatchReadOperation[] | undefined;
  ConsistencyLevel?: ConsistencyLevel;
}
export declare const BatchReadExceptionType: {
  readonly AccessDeniedException: "AccessDeniedException";
  readonly CannotListParentOfRootException: "CannotListParentOfRootException";
  readonly DirectoryNotEnabledException: "DirectoryNotEnabledException";
  readonly FacetValidationException: "FacetValidationException";
  readonly InternalServiceException: "InternalServiceException";
  readonly InvalidArnException: "InvalidArnException";
  readonly InvalidNextTokenException: "InvalidNextTokenException";
  readonly LimitExceededException: "LimitExceededException";
  readonly NotIndexException: "NotIndexException";
  readonly NotNodeException: "NotNodeException";
  readonly NotPolicyException: "NotPolicyException";
  readonly ResourceNotFoundException: "ResourceNotFoundException";
  readonly ValidationException: "ValidationException";
};
export type BatchReadExceptionType =
  (typeof BatchReadExceptionType)[keyof typeof BatchReadExceptionType];
export interface BatchReadException {
  Type?: BatchReadExceptionType;
  Message?: string;
}
export interface BatchGetLinkAttributesResponse {
  Attributes?: AttributeKeyAndValue[];
}
export interface BatchGetObjectAttributesResponse {
  Attributes?: AttributeKeyAndValue[];
}
export interface BatchGetObjectInformationResponse {
  SchemaFacets?: SchemaFacet[];
  ObjectIdentifier?: string;
}
export interface IndexAttachment {
  IndexedAttributes?: AttributeKeyAndValue[];
  ObjectIdentifier?: string;
}
export interface BatchListAttachedIndicesResponse {
  IndexAttachments?: IndexAttachment[];
  NextToken?: string;
}
export interface BatchListIncomingTypedLinksResponse {
  LinkSpecifiers?: TypedLinkSpecifier[];
  NextToken?: string;
}
export interface BatchListIndexResponse {
  IndexAttachments?: IndexAttachment[];
  NextToken?: string;
}
export interface BatchListObjectAttributesResponse {
  Attributes?: AttributeKeyAndValue[];
  NextToken?: string;
}
export interface BatchListObjectChildrenResponse {
  Children?: Record<string, string>;
  NextToken?: string;
}
export interface PathToObjectIdentifiers {
  Path?: string;
  ObjectIdentifiers?: string[];
}
export interface BatchListObjectParentPathsResponse {
  PathToObjectIdentifiersList?: PathToObjectIdentifiers[];
  NextToken?: string;
}
export interface ObjectIdentifierAndLinkNameTuple {
  ObjectIdentifier?: string;
  LinkName?: string;
}
export interface BatchListObjectParentsResponse {
  ParentLinks?: ObjectIdentifierAndLinkNameTuple[];
  NextToken?: string;
}
export interface BatchListObjectPoliciesResponse {
  AttachedPolicyIds?: string[];
  NextToken?: string;
}
export interface BatchListOutgoingTypedLinksResponse {
  TypedLinkSpecifiers?: TypedLinkSpecifier[];
  NextToken?: string;
}
export interface BatchListPolicyAttachmentsResponse {
  ObjectIdentifiers?: string[];
  NextToken?: string;
}
export interface PolicyAttachment {
  PolicyId?: string;
  ObjectIdentifier?: string;
  PolicyType?: string;
}
export interface PolicyToPath {
  Path?: string;
  Policies?: PolicyAttachment[];
}
export interface BatchLookupPolicyResponse {
  PolicyToPathList?: PolicyToPath[];
  NextToken?: string;
}
export interface BatchReadSuccessfulResponse {
  ListObjectAttributes?: BatchListObjectAttributesResponse;
  ListObjectChildren?: BatchListObjectChildrenResponse;
  GetObjectInformation?: BatchGetObjectInformationResponse;
  GetObjectAttributes?: BatchGetObjectAttributesResponse;
  ListAttachedIndices?: BatchListAttachedIndicesResponse;
  ListObjectParentPaths?: BatchListObjectParentPathsResponse;
  ListObjectPolicies?: BatchListObjectPoliciesResponse;
  ListPolicyAttachments?: BatchListPolicyAttachmentsResponse;
  LookupPolicy?: BatchLookupPolicyResponse;
  ListIndex?: BatchListIndexResponse;
  ListOutgoingTypedLinks?: BatchListOutgoingTypedLinksResponse;
  ListIncomingTypedLinks?: BatchListIncomingTypedLinksResponse;
  GetLinkAttributes?: BatchGetLinkAttributesResponse;
  ListObjectParents?: BatchListObjectParentsResponse;
}
export interface BatchReadOperationResponse {
  SuccessfulResponse?: BatchReadSuccessfulResponse;
  ExceptionResponse?: BatchReadException;
}
export interface BatchReadResponse {
  Responses?: BatchReadOperationResponse[];
}
export declare const BatchWriteExceptionType: {
  readonly AccessDeniedException: "AccessDeniedException";
  readonly DirectoryNotEnabledException: "DirectoryNotEnabledException";
  readonly FacetValidationException: "FacetValidationException";
  readonly IndexedAttributeMissingException: "IndexedAttributeMissingException";
  readonly InternalServiceException: "InternalServiceException";
  readonly InvalidArnException: "InvalidArnException";
  readonly InvalidAttachmentException: "InvalidAttachmentException";
  readonly LimitExceededException: "LimitExceededException";
  readonly LinkNameAlreadyInUseException: "LinkNameAlreadyInUseException";
  readonly NotIndexException: "NotIndexException";
  readonly NotNodeException: "NotNodeException";
  readonly NotPolicyException: "NotPolicyException";
  readonly ObjectAlreadyDetachedException: "ObjectAlreadyDetachedException";
  readonly ObjectNotDetachedException: "ObjectNotDetachedException";
  readonly ResourceNotFoundException: "ResourceNotFoundException";
  readonly StillContainsLinksException: "StillContainsLinksException";
  readonly UnsupportedIndexTypeException: "UnsupportedIndexTypeException";
  readonly ValidationException: "ValidationException";
};
export type BatchWriteExceptionType =
  (typeof BatchWriteExceptionType)[keyof typeof BatchWriteExceptionType];
export declare class BatchWriteException extends __BaseException {
  readonly name: "BatchWriteException";
  readonly $fault: "client";
  Index?: number;
  Type?: BatchWriteExceptionType;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<BatchWriteException, __BaseException>
  );
}
export interface BatchAddFacetToObject {
  SchemaFacet: SchemaFacet | undefined;
  ObjectAttributeList: AttributeKeyAndValue[] | undefined;
  ObjectReference: ObjectReference | undefined;
}
export interface BatchAttachObject {
  ParentReference: ObjectReference | undefined;
  ChildReference: ObjectReference | undefined;
  LinkName: string | undefined;
}
export interface BatchAttachPolicy {
  PolicyReference: ObjectReference | undefined;
  ObjectReference: ObjectReference | undefined;
}
export interface BatchAttachToIndex {
  IndexReference: ObjectReference | undefined;
  TargetReference: ObjectReference | undefined;
}
export interface BatchAttachTypedLink {
  SourceObjectReference: ObjectReference | undefined;
  TargetObjectReference: ObjectReference | undefined;
  TypedLinkFacet: TypedLinkSchemaAndFacetName | undefined;
  Attributes: AttributeNameAndValue[] | undefined;
}
export interface BatchCreateIndex {
  OrderedIndexedAttributeList: AttributeKey[] | undefined;
  IsUnique: boolean | undefined;
  ParentReference?: ObjectReference;
  LinkName?: string;
  BatchReferenceName?: string;
}
export interface BatchCreateObject {
  SchemaFacet: SchemaFacet[] | undefined;
  ObjectAttributeList: AttributeKeyAndValue[] | undefined;
  ParentReference?: ObjectReference;
  LinkName?: string;
  BatchReferenceName?: string;
}
export interface BatchDeleteObject {
  ObjectReference: ObjectReference | undefined;
}
export interface BatchDetachFromIndex {
  IndexReference: ObjectReference | undefined;
  TargetReference: ObjectReference | undefined;
}
export interface BatchDetachObject {
  ParentReference: ObjectReference | undefined;
  LinkName: string | undefined;
  BatchReferenceName?: string;
}
export interface BatchDetachPolicy {
  PolicyReference: ObjectReference | undefined;
  ObjectReference: ObjectReference | undefined;
}
export interface BatchDetachTypedLink {
  TypedLinkSpecifier: TypedLinkSpecifier | undefined;
}
export interface BatchRemoveFacetFromObject {
  SchemaFacet: SchemaFacet | undefined;
  ObjectReference: ObjectReference | undefined;
}
export declare const UpdateActionType: {
  readonly CREATE_OR_UPDATE: "CREATE_OR_UPDATE";
  readonly DELETE: "DELETE";
};
export type UpdateActionType =
  (typeof UpdateActionType)[keyof typeof UpdateActionType];
export interface LinkAttributeAction {
  AttributeActionType?: UpdateActionType;
  AttributeUpdateValue?: TypedAttributeValue;
}
export interface LinkAttributeUpdate {
  AttributeKey?: AttributeKey;
  AttributeAction?: LinkAttributeAction;
}
export interface BatchUpdateLinkAttributes {
  TypedLinkSpecifier: TypedLinkSpecifier | undefined;
  AttributeUpdates: LinkAttributeUpdate[] | undefined;
}
export interface ObjectAttributeAction {
  ObjectAttributeActionType?: UpdateActionType;
  ObjectAttributeUpdateValue?: TypedAttributeValue;
}
export interface ObjectAttributeUpdate {
  ObjectAttributeKey?: AttributeKey;
  ObjectAttributeAction?: ObjectAttributeAction;
}
export interface BatchUpdateObjectAttributes {
  ObjectReference: ObjectReference | undefined;
  AttributeUpdates: ObjectAttributeUpdate[] | undefined;
}
export interface BatchWriteOperation {
  CreateObject?: BatchCreateObject;
  AttachObject?: BatchAttachObject;
  DetachObject?: BatchDetachObject;
  UpdateObjectAttributes?: BatchUpdateObjectAttributes;
  DeleteObject?: BatchDeleteObject;
  AddFacetToObject?: BatchAddFacetToObject;
  RemoveFacetFromObject?: BatchRemoveFacetFromObject;
  AttachPolicy?: BatchAttachPolicy;
  DetachPolicy?: BatchDetachPolicy;
  CreateIndex?: BatchCreateIndex;
  AttachToIndex?: BatchAttachToIndex;
  DetachFromIndex?: BatchDetachFromIndex;
  AttachTypedLink?: BatchAttachTypedLink;
  DetachTypedLink?: BatchDetachTypedLink;
  UpdateLinkAttributes?: BatchUpdateLinkAttributes;
}
export interface BatchWriteRequest {
  DirectoryArn: string | undefined;
  Operations: BatchWriteOperation[] | undefined;
}
export interface BatchAddFacetToObjectResponse {}
export interface BatchAttachObjectResponse {
  attachedObjectIdentifier?: string;
}
export interface BatchAttachPolicyResponse {}
export interface BatchAttachToIndexResponse {
  AttachedObjectIdentifier?: string;
}
export interface BatchAttachTypedLinkResponse {
  TypedLinkSpecifier?: TypedLinkSpecifier;
}
export interface BatchCreateIndexResponse {
  ObjectIdentifier?: string;
}
export interface BatchCreateObjectResponse {
  ObjectIdentifier?: string;
}
export interface BatchDeleteObjectResponse {}
export interface BatchDetachFromIndexResponse {
  DetachedObjectIdentifier?: string;
}
export interface BatchDetachObjectResponse {
  detachedObjectIdentifier?: string;
}
export interface BatchDetachPolicyResponse {}
export interface BatchDetachTypedLinkResponse {}
export interface BatchRemoveFacetFromObjectResponse {}
export interface BatchUpdateLinkAttributesResponse {}
export interface BatchUpdateObjectAttributesResponse {
  ObjectIdentifier?: string;
}
export interface BatchWriteOperationResponse {
  CreateObject?: BatchCreateObjectResponse;
  AttachObject?: BatchAttachObjectResponse;
  DetachObject?: BatchDetachObjectResponse;
  UpdateObjectAttributes?: BatchUpdateObjectAttributesResponse;
  DeleteObject?: BatchDeleteObjectResponse;
  AddFacetToObject?: BatchAddFacetToObjectResponse;
  RemoveFacetFromObject?: BatchRemoveFacetFromObjectResponse;
  AttachPolicy?: BatchAttachPolicyResponse;
  DetachPolicy?: BatchDetachPolicyResponse;
  CreateIndex?: BatchCreateIndexResponse;
  AttachToIndex?: BatchAttachToIndexResponse;
  DetachFromIndex?: BatchDetachFromIndexResponse;
  AttachTypedLink?: BatchAttachTypedLinkResponse;
  DetachTypedLink?: BatchDetachTypedLinkResponse;
  UpdateLinkAttributes?: BatchUpdateLinkAttributesResponse;
}
export interface BatchWriteResponse {
  Responses?: BatchWriteOperationResponse[];
}
export interface CreateDirectoryRequest {
  Name: string | undefined;
  SchemaArn: string | undefined;
}
export interface CreateDirectoryResponse {
  DirectoryArn: string | undefined;
  Name: string | undefined;
  ObjectIdentifier: string | undefined;
  AppliedSchemaArn: string | undefined;
}
export declare class DirectoryAlreadyExistsException extends __BaseException {
  readonly name: "DirectoryAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      DirectoryAlreadyExistsException,
      __BaseException
    >
  );
}
export declare const RuleType: {
  readonly BINARY_LENGTH: "BINARY_LENGTH";
  readonly NUMBER_COMPARISON: "NUMBER_COMPARISON";
  readonly STRING_FROM_SET: "STRING_FROM_SET";
  readonly STRING_LENGTH: "STRING_LENGTH";
};
export type RuleType = (typeof RuleType)[keyof typeof RuleType];
export interface Rule {
  Type?: RuleType;
  Parameters?: Record<string, string>;
}
export declare const FacetAttributeType: {
  readonly BINARY: "BINARY";
  readonly BOOLEAN: "BOOLEAN";
  readonly DATETIME: "DATETIME";
  readonly NUMBER: "NUMBER";
  readonly STRING: "STRING";
  readonly VARIANT: "VARIANT";
};
export type FacetAttributeType =
  (typeof FacetAttributeType)[keyof typeof FacetAttributeType];
export interface FacetAttributeDefinition {
  Type: FacetAttributeType | undefined;
  DefaultValue?: TypedAttributeValue;
  IsImmutable?: boolean;
  Rules?: Record<string, Rule>;
}
export interface FacetAttributeReference {
  TargetFacetName: string | undefined;
  TargetAttributeName: string | undefined;
}
export declare const RequiredAttributeBehavior: {
  readonly NOT_REQUIRED: "NOT_REQUIRED";
  readonly REQUIRED_ALWAYS: "REQUIRED_ALWAYS";
};
export type RequiredAttributeBehavior =
  (typeof RequiredAttributeBehavior)[keyof typeof RequiredAttributeBehavior];
export interface FacetAttribute {
  Name: string | undefined;
  AttributeDefinition?: FacetAttributeDefinition;
  AttributeReference?: FacetAttributeReference;
  RequiredBehavior?: RequiredAttributeBehavior;
}
export declare const FacetStyle: {
  readonly DYNAMIC: "DYNAMIC";
  readonly STATIC: "STATIC";
};
export type FacetStyle = (typeof FacetStyle)[keyof typeof FacetStyle];
export declare const ObjectType: {
  readonly INDEX: "INDEX";
  readonly LEAF_NODE: "LEAF_NODE";
  readonly NODE: "NODE";
  readonly POLICY: "POLICY";
};
export type ObjectType = (typeof ObjectType)[keyof typeof ObjectType];
export interface CreateFacetRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
  Attributes?: FacetAttribute[];
  ObjectType?: ObjectType;
  FacetStyle?: FacetStyle;
}
export interface CreateFacetResponse {}
export declare class FacetAlreadyExistsException extends __BaseException {
  readonly name: "FacetAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<FacetAlreadyExistsException, __BaseException>
  );
}
export declare class InvalidRuleException extends __BaseException {
  readonly name: "InvalidRuleException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRuleException, __BaseException>
  );
}
export interface CreateIndexRequest {
  DirectoryArn: string | undefined;
  OrderedIndexedAttributeList: AttributeKey[] | undefined;
  IsUnique: boolean | undefined;
  ParentReference?: ObjectReference;
  LinkName?: string;
}
export interface CreateIndexResponse {
  ObjectIdentifier?: string;
}
export declare class UnsupportedIndexTypeException extends __BaseException {
  readonly name: "UnsupportedIndexTypeException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnsupportedIndexTypeException, __BaseException>
  );
}
export interface CreateObjectRequest {
  DirectoryArn: string | undefined;
  SchemaFacets: SchemaFacet[] | undefined;
  ObjectAttributeList?: AttributeKeyAndValue[];
  ParentReference?: ObjectReference;
  LinkName?: string;
}
export interface CreateObjectResponse {
  ObjectIdentifier?: string;
}
export interface CreateSchemaRequest {
  Name: string | undefined;
}
export interface CreateSchemaResponse {
  SchemaArn?: string;
}
export interface TypedLinkAttributeDefinition {
  Name: string | undefined;
  Type: FacetAttributeType | undefined;
  DefaultValue?: TypedAttributeValue;
  IsImmutable?: boolean;
  Rules?: Record<string, Rule>;
  RequiredBehavior: RequiredAttributeBehavior | undefined;
}
export interface TypedLinkFacet {
  Name: string | undefined;
  Attributes: TypedLinkAttributeDefinition[] | undefined;
  IdentityAttributeOrder: string[] | undefined;
}
export interface CreateTypedLinkFacetRequest {
  SchemaArn: string | undefined;
  Facet: TypedLinkFacet | undefined;
}
export interface CreateTypedLinkFacetResponse {}
export interface DeleteDirectoryRequest {
  DirectoryArn: string | undefined;
}
export interface DeleteDirectoryResponse {
  DirectoryArn: string | undefined;
}
export declare class DirectoryDeletedException extends __BaseException {
  readonly name: "DirectoryDeletedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DirectoryDeletedException, __BaseException>
  );
}
export declare class DirectoryNotDisabledException extends __BaseException {
  readonly name: "DirectoryNotDisabledException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DirectoryNotDisabledException, __BaseException>
  );
}
export interface DeleteFacetRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
}
export interface DeleteFacetResponse {}
export declare class FacetInUseException extends __BaseException {
  readonly name: "FacetInUseException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<FacetInUseException, __BaseException>
  );
}
export declare class FacetNotFoundException extends __BaseException {
  readonly name: "FacetNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<FacetNotFoundException, __BaseException>
  );
}
export interface DeleteObjectRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
}
export interface DeleteObjectResponse {}
export declare class ObjectNotDetachedException extends __BaseException {
  readonly name: "ObjectNotDetachedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ObjectNotDetachedException, __BaseException>
  );
}
export interface DeleteSchemaRequest {
  SchemaArn: string | undefined;
}
export interface DeleteSchemaResponse {
  SchemaArn?: string;
}
export declare class StillContainsLinksException extends __BaseException {
  readonly name: "StillContainsLinksException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<StillContainsLinksException, __BaseException>
  );
}
export interface DeleteTypedLinkFacetRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
}
export interface DeleteTypedLinkFacetResponse {}
export interface DetachFromIndexRequest {
  DirectoryArn: string | undefined;
  IndexReference: ObjectReference | undefined;
  TargetReference: ObjectReference | undefined;
}
export interface DetachFromIndexResponse {
  DetachedObjectIdentifier?: string;
}
export declare class ObjectAlreadyDetachedException extends __BaseException {
  readonly name: "ObjectAlreadyDetachedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ObjectAlreadyDetachedException, __BaseException>
  );
}
export interface DetachObjectRequest {
  DirectoryArn: string | undefined;
  ParentReference: ObjectReference | undefined;
  LinkName: string | undefined;
}
export interface DetachObjectResponse {
  DetachedObjectIdentifier?: string;
}
export declare class NotNodeException extends __BaseException {
  readonly name: "NotNodeException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotNodeException, __BaseException>);
}
export interface DetachPolicyRequest {
  DirectoryArn: string | undefined;
  PolicyReference: ObjectReference | undefined;
  ObjectReference: ObjectReference | undefined;
}
export interface DetachPolicyResponse {}
export interface DetachTypedLinkRequest {
  DirectoryArn: string | undefined;
  TypedLinkSpecifier: TypedLinkSpecifier | undefined;
}
export interface DisableDirectoryRequest {
  DirectoryArn: string | undefined;
}
export interface DisableDirectoryResponse {
  DirectoryArn: string | undefined;
}
export interface EnableDirectoryRequest {
  DirectoryArn: string | undefined;
}
export interface EnableDirectoryResponse {
  DirectoryArn: string | undefined;
}
export interface GetAppliedSchemaVersionRequest {
  SchemaArn: string | undefined;
}
export interface GetAppliedSchemaVersionResponse {
  AppliedSchemaArn?: string;
}
export interface GetDirectoryRequest {
  DirectoryArn: string | undefined;
}
export declare const DirectoryState: {
  readonly DELETED: "DELETED";
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DirectoryState =
  (typeof DirectoryState)[keyof typeof DirectoryState];
export interface Directory {
  Name?: string;
  DirectoryArn?: string;
  State?: DirectoryState;
  CreationDateTime?: Date;
}
export interface GetDirectoryResponse {
  Directory: Directory | undefined;
}
export interface GetFacetRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
}
export interface Facet {
  Name?: string;
  ObjectType?: ObjectType;
  FacetStyle?: FacetStyle;
}
export interface GetFacetResponse {
  Facet?: Facet;
}
export interface GetLinkAttributesRequest {
  DirectoryArn: string | undefined;
  TypedLinkSpecifier: TypedLinkSpecifier | undefined;
  AttributeNames: string[] | undefined;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface GetLinkAttributesResponse {
  Attributes?: AttributeKeyAndValue[];
}
export interface GetObjectAttributesRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  ConsistencyLevel?: ConsistencyLevel;
  SchemaFacet: SchemaFacet | undefined;
  AttributeNames: string[] | undefined;
}
export interface GetObjectAttributesResponse {
  Attributes?: AttributeKeyAndValue[];
}
export interface GetObjectInformationRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface GetObjectInformationResponse {
  SchemaFacets?: SchemaFacet[];
  ObjectIdentifier?: string;
}
export interface GetSchemaAsJsonRequest {
  SchemaArn: string | undefined;
}
export interface GetSchemaAsJsonResponse {
  Name?: string;
  Document?: string;
}
export interface GetTypedLinkFacetInformationRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
}
export interface GetTypedLinkFacetInformationResponse {
  IdentityAttributeOrder?: string[];
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export interface ListAppliedSchemaArnsRequest {
  DirectoryArn: string | undefined;
  SchemaArn?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListAppliedSchemaArnsResponse {
  SchemaArns?: string[];
  NextToken?: string;
}
export interface ListAttachedIndicesRequest {
  DirectoryArn: string | undefined;
  TargetReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface ListAttachedIndicesResponse {
  IndexAttachments?: IndexAttachment[];
  NextToken?: string;
}
export interface ListDevelopmentSchemaArnsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListDevelopmentSchemaArnsResponse {
  SchemaArns?: string[];
  NextToken?: string;
}
export interface ListDirectoriesRequest {
  NextToken?: string;
  MaxResults?: number;
  state?: DirectoryState;
}
export interface ListDirectoriesResponse {
  Directories: Directory[] | undefined;
  NextToken?: string;
}
export interface ListFacetAttributesRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListFacetAttributesResponse {
  Attributes?: FacetAttribute[];
  NextToken?: string;
}
export interface ListFacetNamesRequest {
  SchemaArn: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListFacetNamesResponse {
  FacetNames?: string[];
  NextToken?: string;
}
export interface ListIncomingTypedLinksRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  FilterAttributeRanges?: TypedLinkAttributeRange[];
  FilterTypedLink?: TypedLinkSchemaAndFacetName;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface ListIncomingTypedLinksResponse {
  LinkSpecifiers?: TypedLinkSpecifier[];
  NextToken?: string;
}
export interface ListIndexRequest {
  DirectoryArn: string | undefined;
  RangesOnIndexedValues?: ObjectAttributeRange[];
  IndexReference: ObjectReference | undefined;
  MaxResults?: number;
  NextToken?: string;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface ListIndexResponse {
  IndexAttachments?: IndexAttachment[];
  NextToken?: string;
}
export interface ListManagedSchemaArnsRequest {
  SchemaArn?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListManagedSchemaArnsResponse {
  SchemaArns?: string[];
  NextToken?: string;
}
export interface ListObjectAttributesRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
  FacetFilter?: SchemaFacet;
}
export interface ListObjectAttributesResponse {
  Attributes?: AttributeKeyAndValue[];
  NextToken?: string;
}
export interface ListObjectChildrenRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface ListObjectChildrenResponse {
  Children?: Record<string, string>;
  NextToken?: string;
}
export interface ListObjectParentPathsRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListObjectParentPathsResponse {
  PathToObjectIdentifiersList?: PathToObjectIdentifiers[];
  NextToken?: string;
}
export declare class CannotListParentOfRootException extends __BaseException {
  readonly name: "CannotListParentOfRootException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      CannotListParentOfRootException,
      __BaseException
    >
  );
}
export interface ListObjectParentsRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
  IncludeAllLinksToEachParent?: boolean;
}
export interface ListObjectParentsResponse {
  Parents?: Record<string, string>;
  NextToken?: string;
  ParentLinks?: ObjectIdentifierAndLinkNameTuple[];
}
export interface ListObjectPoliciesRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface ListObjectPoliciesResponse {
  AttachedPolicyIds?: string[];
  NextToken?: string;
}
export interface ListOutgoingTypedLinksRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  FilterAttributeRanges?: TypedLinkAttributeRange[];
  FilterTypedLink?: TypedLinkSchemaAndFacetName;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface ListOutgoingTypedLinksResponse {
  TypedLinkSpecifiers?: TypedLinkSpecifier[];
  NextToken?: string;
}
export interface ListPolicyAttachmentsRequest {
  DirectoryArn: string | undefined;
  PolicyReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
  ConsistencyLevel?: ConsistencyLevel;
}
export interface ListPolicyAttachmentsResponse {
  ObjectIdentifiers?: string[];
  NextToken?: string;
}
export interface ListPublishedSchemaArnsRequest {
  SchemaArn?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListPublishedSchemaArnsResponse {
  SchemaArns?: string[];
  NextToken?: string;
}
export declare class InvalidTaggingRequestException extends __BaseException {
  readonly name: "InvalidTaggingRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidTaggingRequestException, __BaseException>
  );
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
  NextToken?: string;
}
export interface ListTypedLinkFacetAttributesRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListTypedLinkFacetAttributesResponse {
  Attributes?: TypedLinkAttributeDefinition[];
  NextToken?: string;
}
export interface ListTypedLinkFacetNamesRequest {
  SchemaArn: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListTypedLinkFacetNamesResponse {
  FacetNames?: string[];
  NextToken?: string;
}
export interface LookupPolicyRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface LookupPolicyResponse {
  PolicyToPathList?: PolicyToPath[];
  NextToken?: string;
}
export interface PublishSchemaRequest {
  DevelopmentSchemaArn: string | undefined;
  Version: string | undefined;
  MinorVersion?: string;
  Name?: string;
}
export interface PublishSchemaResponse {
  PublishedSchemaArn?: string;
}
export declare class SchemaAlreadyPublishedException extends __BaseException {
  readonly name: "SchemaAlreadyPublishedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      SchemaAlreadyPublishedException,
      __BaseException
    >
  );
}
export declare class InvalidSchemaDocException extends __BaseException {
  readonly name: "InvalidSchemaDocException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidSchemaDocException, __BaseException>
  );
}
export interface PutSchemaFromJsonRequest {
  SchemaArn: string | undefined;
  Document: string | undefined;
}
export interface PutSchemaFromJsonResponse {
  Arn?: string;
}
export interface RemoveFacetFromObjectRequest {
  DirectoryArn: string | undefined;
  SchemaFacet: SchemaFacet | undefined;
  ObjectReference: ObjectReference | undefined;
}
export interface RemoveFacetFromObjectResponse {}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export declare class InvalidFacetUpdateException extends __BaseException {
  readonly name: "InvalidFacetUpdateException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidFacetUpdateException, __BaseException>
  );
}
export interface FacetAttributeUpdate {
  Attribute?: FacetAttribute;
  Action?: UpdateActionType;
}
export interface UpdateFacetRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
  AttributeUpdates?: FacetAttributeUpdate[];
  ObjectType?: ObjectType;
}
export interface UpdateFacetResponse {}
export interface UpdateLinkAttributesRequest {
  DirectoryArn: string | undefined;
  TypedLinkSpecifier: TypedLinkSpecifier | undefined;
  AttributeUpdates: LinkAttributeUpdate[] | undefined;
}
export interface UpdateLinkAttributesResponse {}
export interface UpdateObjectAttributesRequest {
  DirectoryArn: string | undefined;
  ObjectReference: ObjectReference | undefined;
  AttributeUpdates: ObjectAttributeUpdate[] | undefined;
}
export interface UpdateObjectAttributesResponse {
  ObjectIdentifier?: string;
}
export interface UpdateSchemaRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
}
export interface UpdateSchemaResponse {
  SchemaArn?: string;
}
export interface TypedLinkFacetAttributeUpdate {
  Attribute: TypedLinkAttributeDefinition | undefined;
  Action: UpdateActionType | undefined;
}
export interface UpdateTypedLinkFacetRequest {
  SchemaArn: string | undefined;
  Name: string | undefined;
  AttributeUpdates: TypedLinkFacetAttributeUpdate[] | undefined;
  IdentityAttributeOrder: string[] | undefined;
}
export interface UpdateTypedLinkFacetResponse {}
export declare class IncompatibleSchemaException extends __BaseException {
  readonly name: "IncompatibleSchemaException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IncompatibleSchemaException, __BaseException>
  );
}
export interface UpgradeAppliedSchemaRequest {
  PublishedSchemaArn: string | undefined;
  DirectoryArn: string | undefined;
  DryRun?: boolean;
}
export interface UpgradeAppliedSchemaResponse {
  UpgradedSchemaArn?: string;
  DirectoryArn?: string;
}
export interface UpgradePublishedSchemaRequest {
  DevelopmentSchemaArn: string | undefined;
  PublishedSchemaArn: string | undefined;
  MinorVersion: string | undefined;
  DryRun?: boolean;
}
export interface UpgradePublishedSchemaResponse {
  UpgradedSchemaArn?: string;
}
