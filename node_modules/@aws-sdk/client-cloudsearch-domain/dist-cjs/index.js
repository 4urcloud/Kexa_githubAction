"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  CloudSearchDomain: () => CloudSearchDomain,
  CloudSearchDomainClient: () => CloudSearchDomainClient,
  CloudSearchDomainServiceException: () => CloudSearchDomainServiceException,
  ContentType: () => ContentType,
  DocumentServiceException: () => DocumentServiceException,
  QueryParser: () => QueryParser,
  SearchCommand: () => SearchCommand,
  SearchException: () => SearchException,
  SuggestCommand: () => SuggestCommand,
  UploadDocumentsCommand: () => UploadDocumentsCommand,
  UploadDocumentsRequestFilterSensitiveLog: () => UploadDocumentsRequestFilterSensitiveLog,
  __Client: () => import_smithy_client.Client
});
module.exports = __toCommonJS(src_exports);

// src/CloudSearchDomainClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "cloudsearch"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/CloudSearchDomainClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/CloudSearchDomainClient.ts
var _CloudSearchDomainClient = class _CloudSearchDomainClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultCloudSearchDomainHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_CloudSearchDomainClient, "CloudSearchDomainClient");
var CloudSearchDomainClient = _CloudSearchDomainClient;

// src/CloudSearchDomain.ts


// src/commands/SearchCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts



// src/models/CloudSearchDomainServiceException.ts

var _CloudSearchDomainServiceException = class _CloudSearchDomainServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _CloudSearchDomainServiceException.prototype);
  }
};
__name(_CloudSearchDomainServiceException, "CloudSearchDomainServiceException");
var CloudSearchDomainServiceException = _CloudSearchDomainServiceException;

// src/models/models_0.ts
var _SearchException = class _SearchException extends CloudSearchDomainServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SearchException",
      $fault: "client",
      ...opts
    });
    this.name = "SearchException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SearchException.prototype);
  }
};
__name(_SearchException, "SearchException");
var SearchException = _SearchException;
var QueryParser = {
  dismax: "dismax",
  lucene: "lucene",
  simple: "simple",
  structured: "structured"
};
var _DocumentServiceException = class _DocumentServiceException extends CloudSearchDomainServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DocumentServiceException",
      $fault: "client",
      ...opts
    });
    this.name = "DocumentServiceException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DocumentServiceException.prototype);
    this.status = opts.status;
  }
};
__name(_DocumentServiceException, "DocumentServiceException");
var DocumentServiceException = _DocumentServiceException;
var ContentType = {
  application_json: "application/json",
  application_xml: "application/xml"
};
var UploadDocumentsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj
}), "UploadDocumentsRequestFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var se_SearchCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2013-01-01/search");
  const query = (0, import_smithy_client.map)({
    [_f]: [, "sdk"],
    [_p]: [, "true"],
    [_c]: [, input[_c]],
    [_e]: [, input[_e]],
    [_fa]: [, input[_fa]],
    [_fq]: [, input[_fQ]],
    [_h]: [, input[_h]],
    [_pa]: [() => input.partial !== void 0, () => input[_pa].toString()],
    [_q_]: [, (0, import_smithy_client.expectNonNull)(input[_q], `query`)],
    [_qo]: [, input[_qO]],
    [_qp]: [, input[_qP]],
    [_r]: [, input[_r]],
    [_s]: [() => input.size !== void 0, () => input[_s].toString()],
    [_so]: [, input[_so]],
    [_st]: [() => input.start !== void 0, () => input[_st].toString()],
    [_sta]: [, input[_sta]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_SearchCommand");
var se_SuggestCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2013-01-01/suggest");
  const query = (0, import_smithy_client.map)({
    [_f]: [, "sdk"],
    [_p]: [, "true"],
    [_q_]: [, (0, import_smithy_client.expectNonNull)(input[_q], `query`)],
    [_su]: [, (0, import_smithy_client.expectNonNull)(input[_su], `suggester`)],
    [_s]: [() => input.size !== void 0, () => input[_s].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_SuggestCommand");
var se_UploadDocumentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_ct]: input[_cT] || "application/octet-stream"
  });
  b.bp("/2013-01-01/documents/batch");
  const query = (0, import_smithy_client.map)({
    [_f]: [, "sdk"]
  });
  let body;
  if (input.documents !== void 0) {
    body = input.documents;
  }
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_UploadDocumentsCommand");
var de_SearchCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    facets: import_smithy_client._json,
    hits: import_smithy_client._json,
    stats: (_) => de_Stats(_, context),
    status: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SearchCommand");
var de_SuggestCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    status: import_smithy_client._json,
    suggest: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SuggestCommand");
var de_UploadDocumentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    adds: import_smithy_client.expectLong,
    deletes: import_smithy_client.expectLong,
    status: import_smithy_client.expectString,
    warnings: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UploadDocumentsCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "SearchException":
    case "com.amazonaws.cloudsearchdomain#SearchException":
      throw await de_SearchExceptionRes(parsedOutput, context);
    case "DocumentServiceException":
    case "com.amazonaws.cloudsearchdomain#DocumentServiceException":
      throw await de_DocumentServiceExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(CloudSearchDomainServiceException);
var de_DocumentServiceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    status: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new DocumentServiceException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_DocumentServiceExceptionRes");
var de_SearchExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new SearchException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_SearchExceptionRes");
var de_FieldStats = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    count: import_smithy_client.expectLong,
    max: import_smithy_client.expectString,
    mean: import_smithy_client.expectString,
    min: import_smithy_client.expectString,
    missing: import_smithy_client.expectLong,
    stddev: import_smithy_client.limitedParseDouble,
    sum: import_smithy_client.limitedParseDouble,
    sumOfSquares: import_smithy_client.limitedParseDouble
  });
}, "de_FieldStats");
var de_Stats = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_FieldStats(value, context);
    return acc;
  }, {});
}, "de_Stats");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
var _c = "cursor";
var _cT = "contentType";
var _ct = "content-type";
var _e = "expr";
var _f = "format";
var _fQ = "filterQuery";
var _fa = "facet";
var _fq = "fq";
var _h = "highlight";
var _p = "pretty";
var _pa = "partial";
var _q = "query";
var _qO = "queryOptions";
var _qP = "queryParser";
var _q_ = "q";
var _qo = "q.options";
var _qp = "q.parser";
var _r = "return";
var _s = "size";
var _so = "sort";
var _st = "start";
var _sta = "stats";
var _su = "suggester";
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/SearchCommand.ts
var _SearchCommand = class _SearchCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonCloudSearch2013", "Search", {}).n("CloudSearchDomainClient", "SearchCommand").f(void 0, void 0).ser(se_SearchCommand).de(de_SearchCommand).build() {
};
__name(_SearchCommand, "SearchCommand");
var SearchCommand = _SearchCommand;

// src/commands/SuggestCommand.ts




var _SuggestCommand = class _SuggestCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonCloudSearch2013", "Suggest", {}).n("CloudSearchDomainClient", "SuggestCommand").f(void 0, void 0).ser(se_SuggestCommand).de(de_SuggestCommand).build() {
};
__name(_SuggestCommand, "SuggestCommand");
var SuggestCommand = _SuggestCommand;

// src/commands/UploadDocumentsCommand.ts




var _UploadDocumentsCommand = class _UploadDocumentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonCloudSearch2013", "UploadDocuments", {}).n("CloudSearchDomainClient", "UploadDocumentsCommand").f(UploadDocumentsRequestFilterSensitiveLog, void 0).ser(se_UploadDocumentsCommand).de(de_UploadDocumentsCommand).build() {
};
__name(_UploadDocumentsCommand, "UploadDocumentsCommand");
var UploadDocumentsCommand = _UploadDocumentsCommand;

// src/CloudSearchDomain.ts
var commands = {
  SearchCommand,
  SuggestCommand,
  UploadDocumentsCommand
};
var _CloudSearchDomain = class _CloudSearchDomain extends CloudSearchDomainClient {
};
__name(_CloudSearchDomain, "CloudSearchDomain");
var CloudSearchDomain = _CloudSearchDomain;
(0, import_smithy_client.createAggregatedClient)(commands, CloudSearchDomain);

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  CloudSearchDomainServiceException,
  __Client,
  CloudSearchDomainClient,
  CloudSearchDomain,
  $Command,
  SearchCommand,
  SuggestCommand,
  UploadDocumentsCommand,
  SearchException,
  QueryParser,
  DocumentServiceException,
  ContentType,
  UploadDocumentsRequestFilterSensitiveLog
});

