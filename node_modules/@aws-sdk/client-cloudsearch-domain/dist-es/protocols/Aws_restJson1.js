import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, take, withBaseException, } from "@smithy/smithy-client";
import { CloudSearchDomainServiceException as __BaseException } from "../models/CloudSearchDomainServiceException";
import { DocumentServiceException, SearchException } from "../models/models_0";
export const se_SearchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2013-01-01/search");
    const query = map({
        [_f]: [, "sdk"],
        [_p]: [, "true"],
        [_c]: [, input[_c]],
        [_e]: [, input[_e]],
        [_fa]: [, input[_fa]],
        [_fq]: [, input[_fQ]],
        [_h]: [, input[_h]],
        [_pa]: [() => input.partial !== void 0, () => input[_pa].toString()],
        [_q_]: [, __expectNonNull(input[_q], `query`)],
        [_qo]: [, input[_qO]],
        [_qp]: [, input[_qP]],
        [_r]: [, input[_r]],
        [_s]: [() => input.size !== void 0, () => input[_s].toString()],
        [_so]: [, input[_so]],
        [_st]: [() => input.start !== void 0, () => input[_st].toString()],
        [_sta]: [, input[_sta]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_SuggestCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2013-01-01/suggest");
    const query = map({
        [_f]: [, "sdk"],
        [_p]: [, "true"],
        [_q_]: [, __expectNonNull(input[_q], `query`)],
        [_su]: [, __expectNonNull(input[_su], `suggester`)],
        [_s]: [() => input.size !== void 0, () => input[_s].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_UploadDocumentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_ct]: input[_cT] || "application/octet-stream",
    });
    b.bp("/2013-01-01/documents/batch");
    const query = map({
        [_f]: [, "sdk"],
    });
    let body;
    if (input.documents !== undefined) {
        body = input.documents;
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const de_SearchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        facets: _json,
        hits: _json,
        stats: (_) => de_Stats(_, context),
        status: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SuggestCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: _json,
        suggest: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UploadDocumentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        adds: __expectLong,
        deletes: __expectLong,
        status: __expectString,
        warnings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "SearchException":
        case "com.amazonaws.cloudsearchdomain#SearchException":
            throw await de_SearchExceptionRes(parsedOutput, context);
        case "DocumentServiceException":
        case "com.amazonaws.cloudsearchdomain#DocumentServiceException":
            throw await de_DocumentServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_DocumentServiceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DocumentServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_SearchExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new SearchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_FieldStats = (output, context) => {
    return take(output, {
        count: __expectLong,
        max: __expectString,
        mean: __expectString,
        min: __expectString,
        missing: __expectLong,
        stddev: __limitedParseDouble,
        sum: __limitedParseDouble,
        sumOfSquares: __limitedParseDouble,
    });
};
const de_Stats = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_FieldStats(value, context);
        return acc;
    }, {});
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _c = "cursor";
const _cT = "contentType";
const _ct = "content-type";
const _e = "expr";
const _f = "format";
const _fQ = "filterQuery";
const _fa = "facet";
const _fq = "fq";
const _h = "highlight";
const _p = "pretty";
const _pa = "partial";
const _q = "query";
const _qO = "queryOptions";
const _qP = "queryParser";
const _q_ = "q";
const _qo = "q.options";
const _qp = "q.parser";
const _r = "return";
const _s = "size";
const _so = "sort";
const _st = "start";
const _sta = "stats";
const _su = "suggester";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
