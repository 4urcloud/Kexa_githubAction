import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { StreamingBlobTypes } from "@smithy/types";
import { CloudSearchDomainServiceException as __BaseException } from "./CloudSearchDomainServiceException";
export declare class SearchException extends __BaseException {
  readonly name: "SearchException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<SearchException, __BaseException>);
}
export declare const QueryParser: {
  readonly dismax: "dismax";
  readonly lucene: "lucene";
  readonly simple: "simple";
  readonly structured: "structured";
};
export type QueryParser = (typeof QueryParser)[keyof typeof QueryParser];
export interface SearchRequest {
  cursor?: string;
  expr?: string;
  facet?: string;
  filterQuery?: string;
  highlight?: string;
  partial?: boolean;
  query: string | undefined;
  queryOptions?: string;
  queryParser?: QueryParser;
  return?: string;
  size?: number;
  sort?: string;
  start?: number;
  stats?: string;
}
export interface Bucket {
  value?: string;
  count?: number;
}
export interface BucketInfo {
  buckets?: Bucket[];
}
export interface Hit {
  id?: string;
  fields?: Record<string, string[]>;
  exprs?: Record<string, string>;
  highlights?: Record<string, string>;
}
export interface Hits {
  found?: number;
  start?: number;
  cursor?: string;
  hit?: Hit[];
}
export interface FieldStats {
  min?: string;
  max?: string;
  count?: number;
  missing?: number;
  sum?: number;
  sumOfSquares?: number;
  mean?: string;
  stddev?: number;
}
export interface SearchStatus {
  timems?: number;
  rid?: string;
}
export interface SearchResponse {
  status?: SearchStatus;
  hits?: Hits;
  facets?: Record<string, BucketInfo>;
  stats?: Record<string, FieldStats>;
}
export interface SuggestRequest {
  query: string | undefined;
  suggester: string | undefined;
  size?: number;
}
export interface SuggestStatus {
  timems?: number;
  rid?: string;
}
export interface SuggestionMatch {
  suggestion?: string;
  score?: number;
  id?: string;
}
export interface SuggestModel {
  query?: string;
  found?: number;
  suggestions?: SuggestionMatch[];
}
export interface SuggestResponse {
  status?: SuggestStatus;
  suggest?: SuggestModel;
}
export declare class DocumentServiceException extends __BaseException {
  readonly name: "DocumentServiceException";
  readonly $fault: "client";
  status?: string;
  constructor(
    opts: __ExceptionOptionType<DocumentServiceException, __BaseException>
  );
}
export declare const ContentType: {
  readonly application_json: "application/json";
  readonly application_xml: "application/xml";
};
export type ContentType = (typeof ContentType)[keyof typeof ContentType];
export interface UploadDocumentsRequest {
  documents: StreamingBlobTypes | undefined;
  contentType: ContentType | undefined;
}
export interface DocumentServiceWarning {
  message?: string;
}
export interface UploadDocumentsResponse {
  status?: string;
  adds?: number;
  deletes?: number;
  warnings?: DocumentServiceWarning[];
}
export declare const UploadDocumentsRequestFilterSensitiveLog: (
  obj: UploadDocumentsRequest
) => any;
