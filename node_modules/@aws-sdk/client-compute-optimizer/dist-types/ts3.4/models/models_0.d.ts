import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ComputeOptimizerServiceException as __BaseException } from "./ComputeOptimizerServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const Status: {
  readonly ACTIVE: "Active";
  readonly FAILED: "Failed";
  readonly INACTIVE: "Inactive";
  readonly PENDING: "Pending";
};
export type Status = (typeof Status)[keyof typeof Status];
export interface AccountEnrollmentStatus {
  accountId?: string;
  status?: Status;
  statusReason?: string;
  lastUpdatedTimestamp?: Date;
}
export declare const AutoScalingConfiguration: {
  readonly TARGET_TRACKING_SCALING_CPU: "TargetTrackingScalingCpu";
  readonly TARGET_TRACKING_SCALING_MEMORY: "TargetTrackingScalingMemory";
};
export type AutoScalingConfiguration =
  (typeof AutoScalingConfiguration)[keyof typeof AutoScalingConfiguration];
export interface AutoScalingGroupConfiguration {
  desiredCapacity?: number;
  minSize?: number;
  maxSize?: number;
  instanceType?: string;
}
export declare const Currency: {
  readonly CNY: "CNY";
  readonly USD: "USD";
};
export type Currency = (typeof Currency)[keyof typeof Currency];
export interface AutoScalingGroupEstimatedMonthlySavings {
  currency?: Currency;
  value?: number;
}
export interface Gpu {
  gpuCount?: number;
  gpuMemorySizeInMiB?: number;
}
export interface GpuInfo {
  gpus?: Gpu[];
}
export declare const CurrentPerformanceRisk: {
  readonly HIGH: "High";
  readonly LOW: "Low";
  readonly MEDIUM: "Medium";
  readonly VERY_LOW: "VeryLow";
};
export type CurrentPerformanceRisk =
  (typeof CurrentPerformanceRisk)[keyof typeof CurrentPerformanceRisk];
export declare const CpuVendorArchitecture: {
  readonly AWS_ARM64: "AWS_ARM64";
  readonly CURRENT: "CURRENT";
};
export type CpuVendorArchitecture =
  (typeof CpuVendorArchitecture)[keyof typeof CpuVendorArchitecture];
export declare const EnhancedInfrastructureMetrics: {
  readonly ACTIVE: "Active";
  readonly INACTIVE: "Inactive";
};
export type EnhancedInfrastructureMetrics =
  (typeof EnhancedInfrastructureMetrics)[keyof typeof EnhancedInfrastructureMetrics];
export declare const ExternalMetricsSource: {
  readonly DATADOG: "Datadog";
  readonly DYNATRACE: "Dynatrace";
  readonly INSTANA: "Instana";
  readonly NEWRELIC: "NewRelic";
};
export type ExternalMetricsSource =
  (typeof ExternalMetricsSource)[keyof typeof ExternalMetricsSource];
export interface ExternalMetricsPreference {
  source?: ExternalMetricsSource;
}
export declare const InferredWorkloadTypesPreference: {
  readonly ACTIVE: "Active";
  readonly INACTIVE: "Inactive";
};
export type InferredWorkloadTypesPreference =
  (typeof InferredWorkloadTypesPreference)[keyof typeof InferredWorkloadTypesPreference];
export declare const LookBackPeriodPreference: {
  readonly DAYS_14: "DAYS_14";
  readonly DAYS_32: "DAYS_32";
  readonly DAYS_93: "DAYS_93";
};
export type LookBackPeriodPreference =
  (typeof LookBackPeriodPreference)[keyof typeof LookBackPeriodPreference];
export declare const PreferredResourceName: {
  readonly EC2_INSTANCE_TYPES: "Ec2InstanceTypes";
};
export type PreferredResourceName =
  (typeof PreferredResourceName)[keyof typeof PreferredResourceName];
export interface EffectivePreferredResource {
  name?: PreferredResourceName;
  includeList?: string[];
  effectiveIncludeList?: string[];
  excludeList?: string[];
}
export declare const InstanceSavingsEstimationModeSource: {
  readonly COST_EXPLORER_RIGHTSIZING: "CostExplorerRightsizing";
  readonly COST_OPTIMIZATION_HUB: "CostOptimizationHub";
  readonly PUBLIC_PRICING: "PublicPricing";
};
export type InstanceSavingsEstimationModeSource =
  (typeof InstanceSavingsEstimationModeSource)[keyof typeof InstanceSavingsEstimationModeSource];
export interface InstanceSavingsEstimationMode {
  source?: InstanceSavingsEstimationModeSource;
}
export declare const CustomizableMetricName: {
  readonly CPU_UTILIZATION: "CpuUtilization";
  readonly MEMORY_UTILIZATION: "MemoryUtilization";
};
export type CustomizableMetricName =
  (typeof CustomizableMetricName)[keyof typeof CustomizableMetricName];
export declare const CustomizableMetricHeadroom: {
  readonly PERCENT_0: "PERCENT_0";
  readonly PERCENT_10: "PERCENT_10";
  readonly PERCENT_20: "PERCENT_20";
  readonly PERCENT_30: "PERCENT_30";
};
export type CustomizableMetricHeadroom =
  (typeof CustomizableMetricHeadroom)[keyof typeof CustomizableMetricHeadroom];
export declare const CustomizableMetricThreshold: {
  readonly P90: "P90";
  readonly P95: "P95";
  readonly P99_5: "P99_5";
};
export type CustomizableMetricThreshold =
  (typeof CustomizableMetricThreshold)[keyof typeof CustomizableMetricThreshold];
export interface CustomizableMetricParameters {
  threshold?: CustomizableMetricThreshold;
  headroom?: CustomizableMetricHeadroom;
}
export interface UtilizationPreference {
  metricName?: CustomizableMetricName;
  metricParameters?: CustomizableMetricParameters;
}
export interface EffectiveRecommendationPreferences {
  cpuVendorArchitectures?: CpuVendorArchitecture[];
  enhancedInfrastructureMetrics?: EnhancedInfrastructureMetrics;
  inferredWorkloadTypes?: InferredWorkloadTypesPreference;
  externalMetricsPreference?: ExternalMetricsPreference;
  lookBackPeriod?: LookBackPeriodPreference;
  utilizationPreferences?: UtilizationPreference[];
  preferredResources?: EffectivePreferredResource[];
  savingsEstimationMode?: InstanceSavingsEstimationMode;
}
export declare const Finding: {
  readonly NOT_OPTIMIZED: "NotOptimized";
  readonly OPTIMIZED: "Optimized";
  readonly OVER_PROVISIONED: "Overprovisioned";
  readonly UNDER_PROVISIONED: "Underprovisioned";
};
export type Finding = (typeof Finding)[keyof typeof Finding];
export declare const InferredWorkloadType: {
  readonly AMAZON_EMR: "AmazonEmr";
  readonly APACHE_CASSANDRA: "ApacheCassandra";
  readonly APACHE_HADOOP: "ApacheHadoop";
  readonly KAFKA: "Kafka";
  readonly MEMCACHED: "Memcached";
  readonly NGINX: "Nginx";
  readonly POSTGRE_SQL: "PostgreSql";
  readonly REDIS: "Redis";
  readonly SQLSERVER: "SQLServer";
};
export type InferredWorkloadType =
  (typeof InferredWorkloadType)[keyof typeof InferredWorkloadType];
export declare const MigrationEffort: {
  readonly HIGH: "High";
  readonly LOW: "Low";
  readonly MEDIUM: "Medium";
  readonly VERY_LOW: "VeryLow";
};
export type MigrationEffort =
  (typeof MigrationEffort)[keyof typeof MigrationEffort];
export declare const MetricName: {
  readonly CPU: "Cpu";
  readonly DISK_READ_BYTES_PER_SECOND: "DISK_READ_BYTES_PER_SECOND";
  readonly DISK_READ_OPS_PER_SECOND: "DISK_READ_OPS_PER_SECOND";
  readonly DISK_WRITE_BYTES_PER_SECOND: "DISK_WRITE_BYTES_PER_SECOND";
  readonly DISK_WRITE_OPS_PER_SECOND: "DISK_WRITE_OPS_PER_SECOND";
  readonly EBS_READ_BYTES_PER_SECOND: "EBS_READ_BYTES_PER_SECOND";
  readonly EBS_READ_OPS_PER_SECOND: "EBS_READ_OPS_PER_SECOND";
  readonly EBS_WRITE_BYTES_PER_SECOND: "EBS_WRITE_BYTES_PER_SECOND";
  readonly EBS_WRITE_OPS_PER_SECOND: "EBS_WRITE_OPS_PER_SECOND";
  readonly GPU_MEMORY_PERCENTAGE: "GPU_MEMORY_PERCENTAGE";
  readonly GPU_PERCENTAGE: "GPU_PERCENTAGE";
  readonly MEMORY: "Memory";
  readonly NETWORK_IN_BYTES_PER_SECOND: "NETWORK_IN_BYTES_PER_SECOND";
  readonly NETWORK_OUT_BYTES_PER_SECOND: "NETWORK_OUT_BYTES_PER_SECOND";
  readonly NETWORK_PACKETS_IN_PER_SECOND: "NETWORK_PACKETS_IN_PER_SECOND";
  readonly NETWORK_PACKETS_OUT_PER_SECOND: "NETWORK_PACKETS_OUT_PER_SECOND";
};
export type MetricName = (typeof MetricName)[keyof typeof MetricName];
export declare const MetricStatistic: {
  readonly AVERAGE: "Average";
  readonly MAXIMUM: "Maximum";
};
export type MetricStatistic =
  (typeof MetricStatistic)[keyof typeof MetricStatistic];
export interface UtilizationMetric {
  name?: MetricName;
  statistic?: MetricStatistic;
  value?: number;
}
export interface EstimatedMonthlySavings {
  currency?: Currency;
  value?: number;
}
export interface SavingsOpportunity {
  savingsOpportunityPercentage?: number;
  estimatedMonthlySavings?: EstimatedMonthlySavings;
}
export interface AutoScalingGroupSavingsOpportunityAfterDiscounts {
  savingsOpportunityPercentage?: number;
  estimatedMonthlySavings?: AutoScalingGroupEstimatedMonthlySavings;
}
export interface AutoScalingGroupRecommendationOption {
  configuration?: AutoScalingGroupConfiguration;
  projectedUtilizationMetrics?: UtilizationMetric[];
  performanceRisk?: number;
  rank?: number;
  savingsOpportunity?: SavingsOpportunity;
  migrationEffort?: MigrationEffort;
  instanceGpuInfo?: GpuInfo;
  savingsOpportunityAfterDiscounts?: AutoScalingGroupSavingsOpportunityAfterDiscounts;
}
export interface AutoScalingGroupRecommendation {
  accountId?: string;
  autoScalingGroupArn?: string;
  autoScalingGroupName?: string;
  finding?: Finding;
  utilizationMetrics?: UtilizationMetric[];
  lookBackPeriodInDays?: number;
  currentConfiguration?: AutoScalingGroupConfiguration;
  recommendationOptions?: AutoScalingGroupRecommendationOption[];
  lastRefreshTimestamp?: Date;
  currentPerformanceRisk?: CurrentPerformanceRisk;
  effectiveRecommendationPreferences?: EffectiveRecommendationPreferences;
  inferredWorkloadTypes?: InferredWorkloadType[];
  currentInstanceGpuInfo?: GpuInfo;
}
export declare const RecommendationPreferenceName: {
  readonly ENHANCED_INFRASTRUCTURE_METRICS: "EnhancedInfrastructureMetrics";
  readonly EXTERNAL_METRICS_PREFERENCE: "ExternalMetricsPreference";
  readonly INFERRED_WORKLOAD_TYPES: "InferredWorkloadTypes";
  readonly LOOKBACK_PERIOD_PREFERENCE: "LookBackPeriodPreference";
  readonly PREFERRED_RESOURCES: "PreferredResources";
  readonly UTILIZATION_PREFERENCES: "UtilizationPreferences";
};
export type RecommendationPreferenceName =
  (typeof RecommendationPreferenceName)[keyof typeof RecommendationPreferenceName];
export declare const ResourceType: {
  readonly AUTO_SCALING_GROUP: "AutoScalingGroup";
  readonly EBS_VOLUME: "EbsVolume";
  readonly EC2_INSTANCE: "Ec2Instance";
  readonly ECS_SERVICE: "EcsService";
  readonly LAMBDA_FUNCTION: "LambdaFunction";
  readonly LICENSE: "License";
  readonly NOT_APPLICABLE: "NotApplicable";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare const ScopeName: {
  readonly ACCOUNT_ID: "AccountId";
  readonly ORGANIZATION: "Organization";
  readonly RESOURCE_ARN: "ResourceArn";
};
export type ScopeName = (typeof ScopeName)[keyof typeof ScopeName];
export interface Scope {
  name?: ScopeName;
  value?: string;
}
export interface DeleteRecommendationPreferencesRequest {
  resourceType: ResourceType | undefined;
  scope?: Scope;
  recommendationPreferenceNames: RecommendationPreferenceName[] | undefined;
}
export interface DeleteRecommendationPreferencesResponse {}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidParameterValueException extends __BaseException {
  readonly name: "InvalidParameterValueException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>
  );
}
export declare class MissingAuthenticationToken extends __BaseException {
  readonly name: "MissingAuthenticationToken";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<MissingAuthenticationToken, __BaseException>
  );
}
export declare class OptInRequiredException extends __BaseException {
  readonly name: "OptInRequiredException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OptInRequiredException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare const JobFilterName: {
  readonly JOB_STATUS: "JobStatus";
  readonly RESOURCE_TYPE: "ResourceType";
};
export type JobFilterName = (typeof JobFilterName)[keyof typeof JobFilterName];
export interface JobFilter {
  name?: JobFilterName;
  values?: string[];
}
export interface DescribeRecommendationExportJobsRequest {
  jobIds?: string[];
  filters?: JobFilter[];
  nextToken?: string;
  maxResults?: number;
}
export interface S3Destination {
  bucket?: string;
  key?: string;
  metadataKey?: string;
}
export interface ExportDestination {
  s3?: S3Destination;
}
export declare const JobStatus: {
  readonly COMPLETE: "Complete";
  readonly FAILED: "Failed";
  readonly IN_PROGRESS: "InProgress";
  readonly QUEUED: "Queued";
};
export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];
export interface RecommendationExportJob {
  jobId?: string;
  destination?: ExportDestination;
  resourceType?: ResourceType;
  status?: JobStatus;
  creationTimestamp?: Date;
  lastUpdatedTimestamp?: Date;
  failureReason?: string;
}
export interface DescribeRecommendationExportJobsResponse {
  recommendationExportJobs?: RecommendationExportJob[];
  nextToken?: string;
}
export declare const ExportableAutoScalingGroupField: {
  readonly ACCOUNT_ID: "AccountId";
  readonly AUTO_SCALING_GROUP_ARN: "AutoScalingGroupArn";
  readonly AUTO_SCALING_GROUP_NAME: "AutoScalingGroupName";
  readonly CURRENT_CONFIGURATION_DESIRED_CAPACITY: "CurrentConfigurationDesiredCapacity";
  readonly CURRENT_CONFIGURATION_INSTANCE_TYPE: "CurrentConfigurationInstanceType";
  readonly CURRENT_CONFIGURATION_MAX_SIZE: "CurrentConfigurationMaxSize";
  readonly CURRENT_CONFIGURATION_MIN_SIZE: "CurrentConfigurationMinSize";
  readonly CURRENT_INSTANCE_GPU_INFO: "CurrentInstanceGpuInfo";
  readonly CURRENT_MEMORY: "CurrentMemory";
  readonly CURRENT_NETWORK: "CurrentNetwork";
  readonly CURRENT_ON_DEMAND_PRICE: "CurrentOnDemandPrice";
  readonly CURRENT_PERFORMANCE_RISK: "CurrentPerformanceRisk";
  readonly CURRENT_STANDARD_ONE_YEAR_NO_UPFRONT_RESERVED_PRICE: "CurrentStandardOneYearNoUpfrontReservedPrice";
  readonly CURRENT_STANDARD_THREE_YEAR_NO_UPFRONT_RESERVED_PRICE: "CurrentStandardThreeYearNoUpfrontReservedPrice";
  readonly CURRENT_STORAGE: "CurrentStorage";
  readonly CURRENT_VCPUS: "CurrentVCpus";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_CPU_VENDOR_ARCHITECTURES: "EffectiveRecommendationPreferencesCpuVendorArchitectures";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_ENHANCED_INFRASTRUCTURE_METRICS: "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_INFERRED_WORKLOAD_TYPES: "EffectiveRecommendationPreferencesInferredWorkloadTypes";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_LOOKBACK_PERIOD: "EffectiveRecommendationPreferencesLookBackPeriod";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_PREFERRED_RESOURCES: "EffectiveRecommendationPreferencesPreferredResources";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_SAVINGS_ESTIMATION_MODE: "EffectiveRecommendationPreferencesSavingsEstimationMode";
  readonly FINDING: "Finding";
  readonly INFERRED_WORKLOAD_TYPES: "InferredWorkloadTypes";
  readonly LAST_REFRESH_TIMESTAMP: "LastRefreshTimestamp";
  readonly LOOKBACK_PERIOD_IN_DAYS: "LookbackPeriodInDays";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_DESIRED_CAPACITY: "RecommendationOptionsConfigurationDesiredCapacity";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_INSTANCE_TYPE: "RecommendationOptionsConfigurationInstanceType";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_MAX_SIZE: "RecommendationOptionsConfigurationMaxSize";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_MIN_SIZE: "RecommendationOptionsConfigurationMinSize";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY: "RecommendationOptionsEstimatedMonthlySavingsCurrency";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE: "RecommendationOptionsEstimatedMonthlySavingsValue";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_INSTANCE_GPU_INFO: "RecommendationOptionsInstanceGpuInfo";
  readonly RECOMMENDATION_OPTIONS_MEMORY: "RecommendationOptionsMemory";
  readonly RECOMMENDATION_OPTIONS_MIGRATION_EFFORT: "RecommendationOptionsMigrationEffort";
  readonly RECOMMENDATION_OPTIONS_NETWORK: "RecommendationOptionsNetwork";
  readonly RECOMMENDATION_OPTIONS_ON_DEMAND_PRICE: "RecommendationOptionsOnDemandPrice";
  readonly RECOMMENDATION_OPTIONS_PERFORMANCE_RISK: "RecommendationOptionsPerformanceRisk";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_CPU_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_GPU_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsGpuPercentageMaximum";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_GPU_MEMORY_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsGpuMemoryPercentageMaximum";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_MEMORY_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_AFTER_DISCOUNTS_PERCENTAGE: "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_PERCENTAGE: "RecommendationOptionsSavingsOpportunityPercentage";
  readonly RECOMMENDATION_OPTIONS_STANDARD_ONE_YEAR_NO_UPFRONT_RESERVED_PRICE: "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice";
  readonly RECOMMENDATION_OPTIONS_STANDARD_THREE_YEAR_NO_UPFRONT_RESERVED_PRICE: "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice";
  readonly RECOMMENDATION_OPTIONS_STORAGE: "RecommendationOptionsStorage";
  readonly RECOMMENDATION_OPTIONS_VCPUS: "RecommendationOptionsVcpus";
  readonly UTILIZATION_METRICS_CPU_MAXIMUM: "UtilizationMetricsCpuMaximum";
  readonly UTILIZATION_METRICS_DISK_READ_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskReadBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_DISK_READ_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskReadOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_DISK_WRITE_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskWriteBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_DISK_WRITE_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskWriteOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_READ_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsReadBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_READ_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsReadOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_WRITE_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsWriteBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_WRITE_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsWriteOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_GPU_MEMORY_PERCENTAGE_MAXIMUM: "UtilizationMetricsGpuMemoryPercentageMaximum";
  readonly UTILIZATION_METRICS_GPU_PERCENTAGE_MAXIMUM: "UtilizationMetricsGpuPercentageMaximum";
  readonly UTILIZATION_METRICS_MEMORY_MAXIMUM: "UtilizationMetricsMemoryMaximum";
  readonly UTILIZATION_METRICS_NETWORK_IN_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkInBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_NETWORK_OUT_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkOutBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_NETWORK_PACKETS_IN_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkPacketsInPerSecondMaximum";
  readonly UTILIZATION_METRICS_NETWORK_PACKETS_OUT_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkPacketsOutPerSecondMaximum";
};
export type ExportableAutoScalingGroupField =
  (typeof ExportableAutoScalingGroupField)[keyof typeof ExportableAutoScalingGroupField];
export declare const FileFormat: {
  readonly CSV: "Csv";
};
export type FileFormat = (typeof FileFormat)[keyof typeof FileFormat];
export declare const FilterName: {
  readonly FINDING: "Finding";
  readonly FINDING_REASON_CODES: "FindingReasonCodes";
  readonly INFERRED_WORKLOAD_TYPES: "InferredWorkloadTypes";
  readonly RECOMMENDATION_SOURCE_TYPE: "RecommendationSourceType";
};
export type FilterName = (typeof FilterName)[keyof typeof FilterName];
export interface Filter {
  name?: FilterName;
  values?: string[];
}
export interface RecommendationPreferences {
  cpuVendorArchitectures?: CpuVendorArchitecture[];
}
export interface S3DestinationConfig {
  bucket?: string;
  keyPrefix?: string;
}
export interface ExportAutoScalingGroupRecommendationsRequest {
  accountIds?: string[];
  filters?: Filter[];
  fieldsToExport?: ExportableAutoScalingGroupField[];
  s3DestinationConfig: S3DestinationConfig | undefined;
  fileFormat?: FileFormat;
  includeMemberAccounts?: boolean;
  recommendationPreferences?: RecommendationPreferences;
}
export interface ExportAutoScalingGroupRecommendationsResponse {
  jobId?: string;
  s3Destination?: S3Destination;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare const ExportableVolumeField: {
  readonly ACCOUNT_ID: "AccountId";
  readonly CURRENT_CONFIGURATION_ROOT_VOLUME: "CurrentConfigurationRootVolume";
  readonly CURRENT_CONFIGURATION_VOLUME_BASELINE_IOPS: "CurrentConfigurationVolumeBaselineIOPS";
  readonly CURRENT_CONFIGURATION_VOLUME_BASELINE_THROUGHPUT: "CurrentConfigurationVolumeBaselineThroughput";
  readonly CURRENT_CONFIGURATION_VOLUME_BURST_IOPS: "CurrentConfigurationVolumeBurstIOPS";
  readonly CURRENT_CONFIGURATION_VOLUME_BURST_THROUGHPUT: "CurrentConfigurationVolumeBurstThroughput";
  readonly CURRENT_CONFIGURATION_VOLUME_SIZE: "CurrentConfigurationVolumeSize";
  readonly CURRENT_CONFIGURATION_VOLUME_TYPE: "CurrentConfigurationVolumeType";
  readonly CURRENT_MONTHLY_PRICE: "CurrentMonthlyPrice";
  readonly CURRENT_PERFORMANCE_RISK: "CurrentPerformanceRisk";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_SAVINGS_ESTIMATION_MODE: "EffectiveRecommendationPreferencesSavingsEstimationMode";
  readonly FINDING: "Finding";
  readonly LAST_REFRESH_TIMESTAMP: "LastRefreshTimestamp";
  readonly LOOKBACK_PERIOD_IN_DAYS: "LookbackPeriodInDays";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_VOLUME_BASELINE_IOPS: "RecommendationOptionsConfigurationVolumeBaselineIOPS";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_VOLUME_BASELINE_THROUGHPUT: "RecommendationOptionsConfigurationVolumeBaselineThroughput";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_VOLUME_BURST_IOPS: "RecommendationOptionsConfigurationVolumeBurstIOPS";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_VOLUME_BURST_THROUGHPUT: "RecommendationOptionsConfigurationVolumeBurstThroughput";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_VOLUME_SIZE: "RecommendationOptionsConfigurationVolumeSize";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_VOLUME_TYPE: "RecommendationOptionsConfigurationVolumeType";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY: "RecommendationOptionsEstimatedMonthlySavingsCurrency";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE: "RecommendationOptionsEstimatedMonthlySavingsValue";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_MONTHLY_PRICE: "RecommendationOptionsMonthlyPrice";
  readonly RECOMMENDATION_OPTIONS_PERFORMANCE_RISK: "RecommendationOptionsPerformanceRisk";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_AFTER_DISCOUNTS_PERCENTAGE: "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_PERCENTAGE: "RecommendationOptionsSavingsOpportunityPercentage";
  readonly ROOT_VOLUME: "RootVolume";
  readonly TAGS: "Tags";
  readonly UTILIZATION_METRICS_VOLUME_READ_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsVolumeReadBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_VOLUME_READ_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsVolumeReadOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_VOLUME_WRITE_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsVolumeWriteBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_VOLUME_WRITE_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsVolumeWriteOpsPerSecondMaximum";
  readonly VOLUME_ARN: "VolumeArn";
};
export type ExportableVolumeField =
  (typeof ExportableVolumeField)[keyof typeof ExportableVolumeField];
export declare const EBSFilterName: {
  readonly FINDING: "Finding";
};
export type EBSFilterName = (typeof EBSFilterName)[keyof typeof EBSFilterName];
export interface EBSFilter {
  name?: EBSFilterName;
  values?: string[];
}
export interface ExportEBSVolumeRecommendationsRequest {
  accountIds?: string[];
  filters?: EBSFilter[];
  fieldsToExport?: ExportableVolumeField[];
  s3DestinationConfig: S3DestinationConfig | undefined;
  fileFormat?: FileFormat;
  includeMemberAccounts?: boolean;
}
export interface ExportEBSVolumeRecommendationsResponse {
  jobId?: string;
  s3Destination?: S3Destination;
}
export declare const ExportableInstanceField: {
  readonly ACCOUNT_ID: "AccountId";
  readonly CURRENT_INSTANCE_GPU_INFO: "CurrentInstanceGpuInfo";
  readonly CURRENT_INSTANCE_TYPE: "CurrentInstanceType";
  readonly CURRENT_MEMORY: "CurrentMemory";
  readonly CURRENT_NETWORK: "CurrentNetwork";
  readonly CURRENT_ON_DEMAND_PRICE: "CurrentOnDemandPrice";
  readonly CURRENT_PERFORMANCE_RISK: "CurrentPerformanceRisk";
  readonly CURRENT_STANDARD_ONE_YEAR_NO_UPFRONT_RESERVED_PRICE: "CurrentStandardOneYearNoUpfrontReservedPrice";
  readonly CURRENT_STANDARD_THREE_YEAR_NO_UPFRONT_RESERVED_PRICE: "CurrentStandardThreeYearNoUpfrontReservedPrice";
  readonly CURRENT_STORAGE: "CurrentStorage";
  readonly CURRENT_VCPUS: "CurrentVCpus";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_CPU_VENDOR_ARCHITECTURES: "EffectiveRecommendationPreferencesCpuVendorArchitectures";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_ENHANCED_INFRASTRUCTURE_METRICS: "EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_EXTERNAL_METRICS_SOURCE: "EffectiveRecommendationPreferencesExternalMetricsSource";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_INFERRED_WORKLOAD_TYPES: "EffectiveRecommendationPreferencesInferredWorkloadTypes";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_LOOKBACK_PERIOD: "EffectiveRecommendationPreferencesLookBackPeriod";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_PREFERRED_RESOURCES: "EffectiveRecommendationPreferencesPreferredResources";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_SAVINGS_ESTIMATION_MODE: "EffectiveRecommendationPreferencesSavingsEstimationMode";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_UTILIZATION_PREFERENCES: "EffectiveRecommendationPreferencesUtilizationPreferences";
  readonly EXTERNAL_METRIC_STATUS_CODE: "ExternalMetricStatusCode";
  readonly EXTERNAL_METRIC_STATUS_REASON: "ExternalMetricStatusReason";
  readonly FINDING: "Finding";
  readonly Finding_Reason_Codes: "FindingReasonCodes";
  readonly IDLE: "Idle";
  readonly INFERRED_WORKLOAD_TYPES: "InferredWorkloadTypes";
  readonly INSTANCE_ARN: "InstanceArn";
  readonly INSTANCE_NAME: "InstanceName";
  readonly INSTANCE_STATE: "InstanceState";
  readonly LAST_REFRESH_TIMESTAMP: "LastRefreshTimestamp";
  readonly LOOKBACK_PERIOD_IN_DAYS: "LookbackPeriodInDays";
  readonly RECOMMENDATIONS_SOURCES_RECOMMENDATION_SOURCE_ARN: "RecommendationsSourcesRecommendationSourceArn";
  readonly RECOMMENDATIONS_SOURCES_RECOMMENDATION_SOURCE_TYPE: "RecommendationsSourcesRecommendationSourceType";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY: "RecommendationOptionsEstimatedMonthlySavingsCurrency";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE: "RecommendationOptionsEstimatedMonthlySavingsValue";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_INSTANCE_GPU_INFO: "RecommendationOptionsInstanceGpuInfo";
  readonly RECOMMENDATION_OPTIONS_INSTANCE_TYPE: "RecommendationOptionsInstanceType";
  readonly RECOMMENDATION_OPTIONS_MEMORY: "RecommendationOptionsMemory";
  readonly RECOMMENDATION_OPTIONS_MIGRATION_EFFORT: "RecommendationOptionsMigrationEffort";
  readonly RECOMMENDATION_OPTIONS_NETWORK: "RecommendationOptionsNetwork";
  readonly RECOMMENDATION_OPTIONS_ON_DEMAND_PRICE: "RecommendationOptionsOnDemandPrice";
  readonly RECOMMENDATION_OPTIONS_PERFORMANCE_RISK: "RecommendationOptionsPerformanceRisk";
  readonly RECOMMENDATION_OPTIONS_PLATFORM_DIFFERENCES: "RecommendationOptionsPlatformDifferences";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_CPU_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_GPU_MEMORY_PERCENTAGE_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsGpuMemoryPercentageMaximum";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_GPU_PERCENTAGE_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsGpuPercentageMaximum";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_MEMORY_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_AFTER_DISCOUNTS_PERCENTAGE: "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_PERCENTAGE: "RecommendationOptionsSavingsOpportunityPercentage";
  readonly RECOMMENDATION_OPTIONS_STANDARD_ONE_YEAR_NO_UPFRONT_RESERVED_PRICE: "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice";
  readonly RECOMMENDATION_OPTIONS_STANDARD_THREE_YEAR_NO_UPFRONT_RESERVED_PRICE: "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice";
  readonly RECOMMENDATION_OPTIONS_STORAGE: "RecommendationOptionsStorage";
  readonly RECOMMENDATION_OPTIONS_VCPUS: "RecommendationOptionsVcpus";
  readonly TAGS: "Tags";
  readonly UTILIZATION_METRICS_CPU_MAXIMUM: "UtilizationMetricsCpuMaximum";
  readonly UTILIZATION_METRICS_DISK_READ_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskReadBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_DISK_READ_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskReadOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_DISK_WRITE_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskWriteBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_DISK_WRITE_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsDiskWriteOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_READ_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsReadBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_READ_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsReadOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_WRITE_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsWriteBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_EBS_WRITE_OPS_PER_SECOND_MAXIMUM: "UtilizationMetricsEbsWriteOpsPerSecondMaximum";
  readonly UTILIZATION_METRICS_GPU_MEMORY_PERCENTAGE_MAXIMUM: "UtilizationMetricsGpuMemoryPercentageMaximum";
  readonly UTILIZATION_METRICS_GPU_PERCENTAGE_MAXIMUM: "UtilizationMetricsGpuPercentageMaximum";
  readonly UTILIZATION_METRICS_MEMORY_MAXIMUM: "UtilizationMetricsMemoryMaximum";
  readonly UTILIZATION_METRICS_NETWORK_IN_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkInBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_NETWORK_OUT_BYTES_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkOutBytesPerSecondMaximum";
  readonly UTILIZATION_METRICS_NETWORK_PACKETS_IN_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkPacketsInPerSecondMaximum";
  readonly UTILIZATION_METRICS_NETWORK_PACKETS_OUT_PER_SECOND_MAXIMUM: "UtilizationMetricsNetworkPacketsOutPerSecondMaximum";
};
export type ExportableInstanceField =
  (typeof ExportableInstanceField)[keyof typeof ExportableInstanceField];
export interface ExportEC2InstanceRecommendationsRequest {
  accountIds?: string[];
  filters?: Filter[];
  fieldsToExport?: ExportableInstanceField[];
  s3DestinationConfig: S3DestinationConfig | undefined;
  fileFormat?: FileFormat;
  includeMemberAccounts?: boolean;
  recommendationPreferences?: RecommendationPreferences;
}
export interface ExportEC2InstanceRecommendationsResponse {
  jobId?: string;
  s3Destination?: S3Destination;
}
export declare const ExportableECSServiceField: {
  readonly ACCOUNT_ID: "AccountId";
  readonly CURRENT_PERFORMANCE_RISK: "CurrentPerformanceRisk";
  readonly CURRENT_SERVICE_CONFIGURATION_AUTO_SCALING_CONFIGURATION: "CurrentServiceConfigurationAutoScalingConfiguration";
  readonly CURRENT_SERVICE_CONFIGURATION_CPU: "CurrentServiceConfigurationCpu";
  readonly CURRENT_SERVICE_CONFIGURATION_MEMORY: "CurrentServiceConfigurationMemory";
  readonly CURRENT_SERVICE_CONFIGURATION_TASK_DEFINITION_ARN: "CurrentServiceConfigurationTaskDefinitionArn";
  readonly CURRENT_SERVICE_CONTAINER_CONFIGURATIONS: "CurrentServiceContainerConfigurations";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_SAVINGS_ESTIMATION_MODE: "EffectiveRecommendationPreferencesSavingsEstimationMode";
  readonly FINDING: "Finding";
  readonly FINDING_REASON_CODES: "FindingReasonCodes";
  readonly LAST_REFRESH_TIMESTAMP: "LastRefreshTimestamp";
  readonly LAUNCH_TYPE: "LaunchType";
  readonly LOOKBACK_PERIOD_IN_DAYS: "LookbackPeriodInDays";
  readonly RECOMMENDATION_OPTIONS_CONTAINER_RECOMMENDATIONS: "RecommendationOptionsContainerRecommendations";
  readonly RECOMMENDATION_OPTIONS_CPU: "RecommendationOptionsCpu";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY: "RecommendationOptionsEstimatedMonthlySavingsCurrency";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE: "RecommendationOptionsEstimatedMonthlySavingsValue";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_MEMORY: "RecommendationOptionsMemory";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_CPU_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_MEMORY_MAXIMUM: "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_AFTER_DISCOUNTS_PERCENTAGE: "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_PERCENTAGE: "RecommendationOptionsSavingsOpportunityPercentage";
  readonly SERVICE_ARN: "ServiceArn";
  readonly TAGS: "Tags";
  readonly UTILIZATION_METRICS_CPU_MAXIMUM: "UtilizationMetricsCpuMaximum";
  readonly UTILIZATION_METRICS_MEMORY_MAXIMUM: "UtilizationMetricsMemoryMaximum";
};
export type ExportableECSServiceField =
  (typeof ExportableECSServiceField)[keyof typeof ExportableECSServiceField];
export declare const ECSServiceRecommendationFilterName: {
  readonly FINDING: "Finding";
  readonly FINDING_REASON_CODE: "FindingReasonCode";
};
export type ECSServiceRecommendationFilterName =
  (typeof ECSServiceRecommendationFilterName)[keyof typeof ECSServiceRecommendationFilterName];
export interface ECSServiceRecommendationFilter {
  name?: ECSServiceRecommendationFilterName;
  values?: string[];
}
export interface ExportECSServiceRecommendationsRequest {
  accountIds?: string[];
  filters?: ECSServiceRecommendationFilter[];
  fieldsToExport?: ExportableECSServiceField[];
  s3DestinationConfig: S3DestinationConfig | undefined;
  fileFormat?: FileFormat;
  includeMemberAccounts?: boolean;
}
export interface ExportECSServiceRecommendationsResponse {
  jobId?: string;
  s3Destination?: S3Destination;
}
export declare const ExportableLambdaFunctionField: {
  readonly ACCOUNT_ID: "AccountId";
  readonly CURRENT_CONFIGURATION_MEMORY_SIZE: "CurrentConfigurationMemorySize";
  readonly CURRENT_CONFIGURATION_TIMEOUT: "CurrentConfigurationTimeout";
  readonly CURRENT_COST_AVERAGE: "CurrentCostAverage";
  readonly CURRENT_COST_TOTAL: "CurrentCostTotal";
  readonly CURRENT_PERFORMANCE_RISK: "CurrentPerformanceRisk";
  readonly EFFECTIVE_RECOMMENDATION_PREFERENCES_SAVINGS_ESTIMATION_MODE: "EffectiveRecommendationPreferencesSavingsEstimationMode";
  readonly FINDING: "Finding";
  readonly FINDING_REASON_CODES: "FindingReasonCodes";
  readonly FUNCTION_ARN: "FunctionArn";
  readonly FUNCTION_VERSION: "FunctionVersion";
  readonly LAST_REFRESH_TIMESTAMP: "LastRefreshTimestamp";
  readonly LOOKBACK_PERIOD_IN_DAYS: "LookbackPeriodInDays";
  readonly NUMBER_OF_INVOCATIONS: "NumberOfInvocations";
  readonly RECOMMENDATION_OPTIONS_CONFIGURATION_MEMORY_SIZE: "RecommendationOptionsConfigurationMemorySize";
  readonly RECOMMENDATION_OPTIONS_COST_HIGH: "RecommendationOptionsCostHigh";
  readonly RECOMMENDATION_OPTIONS_COST_LOW: "RecommendationOptionsCostLow";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY: "RecommendationOptionsEstimatedMonthlySavingsCurrency";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsCurrencyAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE: "RecommendationOptionsEstimatedMonthlySavingsValue";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE_AFTER_DISCOUNTS: "RecommendationOptionsEstimatedMonthlySavingsValueAfterDiscounts";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_DURATION_EXPECTED: "RecommendationOptionsProjectedUtilizationMetricsDurationExpected";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_DURATION_LOWER_BOUND: "RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound";
  readonly RECOMMENDATION_OPTIONS_PROJECTED_UTILIZATION_METRICS_DURATION_UPPER_BOUND: "RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_AFTER_DISCOUNTS_PERCENTAGE: "RecommendationOptionsSavingsOpportunityAfterDiscountsPercentage";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_PERCENTAGE: "RecommendationOptionsSavingsOpportunityPercentage";
  readonly TAGS: "Tags";
  readonly UTILIZATION_METRICS_DURATION_AVERAGE: "UtilizationMetricsDurationAverage";
  readonly UTILIZATION_METRICS_DURATION_MAXIMUM: "UtilizationMetricsDurationMaximum";
  readonly UTILIZATION_METRICS_MEMORY_AVERAGE: "UtilizationMetricsMemoryAverage";
  readonly UTILIZATION_METRICS_MEMORY_MAXIMUM: "UtilizationMetricsMemoryMaximum";
};
export type ExportableLambdaFunctionField =
  (typeof ExportableLambdaFunctionField)[keyof typeof ExportableLambdaFunctionField];
export declare const LambdaFunctionRecommendationFilterName: {
  readonly FINDING: "Finding";
  readonly FINDING_REASON_CODE: "FindingReasonCode";
};
export type LambdaFunctionRecommendationFilterName =
  (typeof LambdaFunctionRecommendationFilterName)[keyof typeof LambdaFunctionRecommendationFilterName];
export interface LambdaFunctionRecommendationFilter {
  name?: LambdaFunctionRecommendationFilterName;
  values?: string[];
}
export interface ExportLambdaFunctionRecommendationsRequest {
  accountIds?: string[];
  filters?: LambdaFunctionRecommendationFilter[];
  fieldsToExport?: ExportableLambdaFunctionField[];
  s3DestinationConfig: S3DestinationConfig | undefined;
  fileFormat?: FileFormat;
  includeMemberAccounts?: boolean;
}
export interface ExportLambdaFunctionRecommendationsResponse {
  jobId?: string;
  s3Destination?: S3Destination;
}
export declare const ExportableLicenseField: {
  readonly ACCOUNT_ID: "AccountId";
  readonly CURRENT_LICENSE_CONFIGURATION_INSTANCE_TYPE: "CurrentLicenseConfigurationInstanceType";
  readonly CURRENT_LICENSE_CONFIGURATION_LICENSE_EDITION: "CurrentLicenseConfigurationLicenseEdition";
  readonly CURRENT_LICENSE_CONFIGURATION_LICENSE_MODEL: "CurrentLicenseConfigurationLicenseModel";
  readonly CURRENT_LICENSE_CONFIGURATION_LICENSE_NAME: "CurrentLicenseConfigurationLicenseName";
  readonly CURRENT_LICENSE_CONFIGURATION_LICENSE_VERSION: "CurrentLicenseConfigurationLicenseVersion";
  readonly CURRENT_LICENSE_CONFIGURATION_METRICS_SOURCE: "CurrentLicenseConfigurationMetricsSource";
  readonly CURRENT_LICENSE_CONFIGURATION_NUMBER_OF_CORES: "CurrentLicenseConfigurationNumberOfCores";
  readonly CURRENT_LICENSE_CONFIGURATION_OPERATING_SYSTEM: "CurrentLicenseConfigurationOperatingSystem";
  readonly LAST_REFRESH_TIMESTAMP: "LastRefreshTimestamp";
  readonly LICENSE_FINDING: "Finding";
  readonly LICENSE_FINDING_REASON_CODES: "FindingReasonCodes";
  readonly LOOKBACK_PERIOD_IN_DAYS: "LookbackPeriodInDays";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_CURRENCY: "RecommendationOptionsEstimatedMonthlySavingsCurrency";
  readonly RECOMMENDATION_OPTIONS_ESTIMATED_MONTHLY_SAVINGS_VALUE: "RecommendationOptionsEstimatedMonthlySavingsValue";
  readonly RECOMMENDATION_OPTIONS_LICENSE_EDITION: "RecommendationOptionsLicenseEdition";
  readonly RECOMMENDATION_OPTIONS_LICENSE_MODEL: "RecommendationOptionsLicenseModel";
  readonly RECOMMENDATION_OPTIONS_OPERATING_SYSTEM: "RecommendationOptionsOperatingSystem";
  readonly RECOMMENDATION_OPTIONS_SAVINGS_OPPORTUNITY_PERCENTAGE: "RecommendationOptionsSavingsOpportunityPercentage";
  readonly RESOURCE_ARN: "ResourceArn";
  readonly TAGS: "Tags";
};
export type ExportableLicenseField =
  (typeof ExportableLicenseField)[keyof typeof ExportableLicenseField];
export declare const LicenseRecommendationFilterName: {
  readonly LICENSE_FINDING: "Finding";
  readonly LICENSE_FINDING_REASON_CODE: "FindingReasonCode";
  readonly LICENSE_NAME: "LicenseName";
};
export type LicenseRecommendationFilterName =
  (typeof LicenseRecommendationFilterName)[keyof typeof LicenseRecommendationFilterName];
export interface LicenseRecommendationFilter {
  name?: LicenseRecommendationFilterName;
  values?: string[];
}
export interface ExportLicenseRecommendationsRequest {
  accountIds?: string[];
  filters?: LicenseRecommendationFilter[];
  fieldsToExport?: ExportableLicenseField[];
  s3DestinationConfig: S3DestinationConfig | undefined;
  fileFormat?: FileFormat;
  includeMemberAccounts?: boolean;
}
export interface ExportLicenseRecommendationsResponse {
  jobId?: string;
  s3Destination?: S3Destination;
}
export interface GetAutoScalingGroupRecommendationsRequest {
  accountIds?: string[];
  autoScalingGroupArns?: string[];
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
  recommendationPreferences?: RecommendationPreferences;
}
export interface GetRecommendationError {
  identifier?: string;
  code?: string;
  message?: string;
}
export interface GetAutoScalingGroupRecommendationsResponse {
  nextToken?: string;
  autoScalingGroupRecommendations?: AutoScalingGroupRecommendation[];
  errors?: GetRecommendationError[];
}
export interface GetEBSVolumeRecommendationsRequest {
  volumeArns?: string[];
  nextToken?: string;
  maxResults?: number;
  filters?: EBSFilter[];
  accountIds?: string[];
}
export interface VolumeConfiguration {
  volumeType?: string;
  volumeSize?: number;
  volumeBaselineIOPS?: number;
  volumeBurstIOPS?: number;
  volumeBaselineThroughput?: number;
  volumeBurstThroughput?: number;
  rootVolume?: boolean;
}
export declare const EBSSavingsEstimationModeSource: {
  readonly COST_EXPLORER_RIGHTSIZING: "CostExplorerRightsizing";
  readonly COST_OPTIMIZATION_HUB: "CostOptimizationHub";
  readonly PUBLIC_PRICING: "PublicPricing";
};
export type EBSSavingsEstimationModeSource =
  (typeof EBSSavingsEstimationModeSource)[keyof typeof EBSSavingsEstimationModeSource];
export interface EBSSavingsEstimationMode {
  source?: EBSSavingsEstimationModeSource;
}
export interface EBSEffectiveRecommendationPreferences {
  savingsEstimationMode?: EBSSavingsEstimationMode;
}
export declare const EBSFinding: {
  readonly NOT_OPTIMIZED: "NotOptimized";
  readonly OPTIMIZED: "Optimized";
};
export type EBSFinding = (typeof EBSFinding)[keyof typeof EBSFinding];
export interface Tag {
  key?: string;
  value?: string;
}
export declare const EBSMetricName: {
  readonly VOLUME_READ_BYTES_PER_SECOND: "VolumeReadBytesPerSecond";
  readonly VOLUME_READ_OPS_PER_SECOND: "VolumeReadOpsPerSecond";
  readonly VOLUME_WRITE_BYTES_PER_SECOND: "VolumeWriteBytesPerSecond";
  readonly VOLUME_WRITE_OPS_PER_SECOND: "VolumeWriteOpsPerSecond";
};
export type EBSMetricName = (typeof EBSMetricName)[keyof typeof EBSMetricName];
export interface EBSUtilizationMetric {
  name?: EBSMetricName;
  statistic?: MetricStatistic;
  value?: number;
}
export interface EBSEstimatedMonthlySavings {
  currency?: Currency;
  value?: number;
}
export interface EBSSavingsOpportunityAfterDiscounts {
  savingsOpportunityPercentage?: number;
  estimatedMonthlySavings?: EBSEstimatedMonthlySavings;
}
export interface VolumeRecommendationOption {
  configuration?: VolumeConfiguration;
  performanceRisk?: number;
  rank?: number;
  savingsOpportunity?: SavingsOpportunity;
  savingsOpportunityAfterDiscounts?: EBSSavingsOpportunityAfterDiscounts;
}
export interface VolumeRecommendation {
  volumeArn?: string;
  accountId?: string;
  currentConfiguration?: VolumeConfiguration;
  finding?: EBSFinding;
  utilizationMetrics?: EBSUtilizationMetric[];
  lookBackPeriodInDays?: number;
  volumeRecommendationOptions?: VolumeRecommendationOption[];
  lastRefreshTimestamp?: Date;
  currentPerformanceRisk?: CurrentPerformanceRisk;
  tags?: Tag[];
  effectiveRecommendationPreferences?: EBSEffectiveRecommendationPreferences;
}
export interface GetEBSVolumeRecommendationsResponse {
  nextToken?: string;
  volumeRecommendations?: VolumeRecommendation[];
  errors?: GetRecommendationError[];
}
export interface GetEC2InstanceRecommendationsRequest {
  instanceArns?: string[];
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
  accountIds?: string[];
  recommendationPreferences?: RecommendationPreferences;
}
export declare const ExternalMetricStatusCode: {
  readonly DATADOG_INTEGRATION_ERROR: "DATADOG_INTEGRATION_ERROR";
  readonly DYNATRACE_INTEGRATION_ERROR: "DYNATRACE_INTEGRATION_ERROR";
  readonly INSTANA_INTEGRATION_ERROR: "INSTANA_INTEGRATION_ERROR";
  readonly INSUFFICIENT_DATADOG_METRICS: "INSUFFICIENT_DATADOG_METRICS";
  readonly INSUFFICIENT_DYNATRACE_METRICS: "INSUFFICIENT_DYNATRACE_METRICS";
  readonly INSUFFICIENT_INSTANA_METRICS: "INSUFFICIENT_INSTANA_METRICS";
  readonly INSUFFICIENT_NEWRELIC_METRICS: "INSUFFICIENT_NEWRELIC_METRICS";
  readonly INTEGRATION_SUCCESS: "INTEGRATION_SUCCESS";
  readonly NEWRELIC_INTEGRATION_ERROR: "NEWRELIC_INTEGRATION_ERROR";
  readonly NO_EXTERNAL_METRIC_SET: "NO_EXTERNAL_METRIC_SET";
};
export type ExternalMetricStatusCode =
  (typeof ExternalMetricStatusCode)[keyof typeof ExternalMetricStatusCode];
export interface ExternalMetricStatus {
  statusCode?: ExternalMetricStatusCode;
  statusReason?: string;
}
export declare const InstanceRecommendationFindingReasonCode: {
  readonly CPU_OVER_PROVISIONED: "CPUOverprovisioned";
  readonly CPU_UNDER_PROVISIONED: "CPUUnderprovisioned";
  readonly DISK_IOPS_OVER_PROVISIONED: "DiskIOPSOverprovisioned";
  readonly DISK_IOPS_UNDER_PROVISIONED: "DiskIOPSUnderprovisioned";
  readonly DISK_THROUGHPUT_OVER_PROVISIONED: "DiskThroughputOverprovisioned";
  readonly DISK_THROUGHPUT_UNDER_PROVISIONED: "DiskThroughputUnderprovisioned";
  readonly EBS_IOPS_OVER_PROVISIONED: "EBSIOPSOverprovisioned";
  readonly EBS_IOPS_UNDER_PROVISIONED: "EBSIOPSUnderprovisioned";
  readonly EBS_THROUGHPUT_OVER_PROVISIONED: "EBSThroughputOverprovisioned";
  readonly EBS_THROUGHPUT_UNDER_PROVISIONED: "EBSThroughputUnderprovisioned";
  readonly GPU_MEMORY_OVER_PROVISIONED: "GPUMemoryOverprovisioned";
  readonly GPU_MEMORY_UNDER_PROVISIONED: "GPUMemoryUnderprovisioned";
  readonly GPU_OVER_PROVISIONED: "GPUOverprovisioned";
  readonly GPU_UNDER_PROVISIONED: "GPUUnderprovisioned";
  readonly MEMORY_OVER_PROVISIONED: "MemoryOverprovisioned";
  readonly MEMORY_UNDER_PROVISIONED: "MemoryUnderprovisioned";
  readonly NETWORK_BANDWIDTH_OVER_PROVISIONED: "NetworkBandwidthOverprovisioned";
  readonly NETWORK_BANDWIDTH_UNDER_PROVISIONED: "NetworkBandwidthUnderprovisioned";
  readonly NETWORK_PPS_OVER_PROVISIONED: "NetworkPPSOverprovisioned";
  readonly NETWORK_PPS_UNDER_PROVISIONED: "NetworkPPSUnderprovisioned";
};
export type InstanceRecommendationFindingReasonCode =
  (typeof InstanceRecommendationFindingReasonCode)[keyof typeof InstanceRecommendationFindingReasonCode];
export declare const InstanceIdle: {
  readonly FALSE: "False";
  readonly TRUE: "True";
};
export type InstanceIdle = (typeof InstanceIdle)[keyof typeof InstanceIdle];
export declare const InstanceState: {
  readonly PENDING: "pending";
  readonly RUNNING: "running";
  readonly SHUTTING_DOWN: "shutting-down";
  readonly STOPPED: "stopped";
  readonly STOPPING: "stopping";
  readonly TERMINATED: "terminated";
};
export type InstanceState = (typeof InstanceState)[keyof typeof InstanceState];
export declare const PlatformDifference: {
  readonly ARCHITECTURE: "Architecture";
  readonly HYPERVISOR: "Hypervisor";
  readonly INSTANCE_STORE_AVAILABILITY: "InstanceStoreAvailability";
  readonly NETWORK_INTERFACE: "NetworkInterface";
  readonly STORAGE_INTERFACE: "StorageInterface";
  readonly VIRTUALIZATION_TYPE: "VirtualizationType";
};
export type PlatformDifference =
  (typeof PlatformDifference)[keyof typeof PlatformDifference];
export interface InstanceEstimatedMonthlySavings {
  currency?: Currency;
  value?: number;
}
export interface InstanceSavingsOpportunityAfterDiscounts {
  savingsOpportunityPercentage?: number;
  estimatedMonthlySavings?: InstanceEstimatedMonthlySavings;
}
export interface InstanceRecommendationOption {
  instanceType?: string;
  projectedUtilizationMetrics?: UtilizationMetric[];
  platformDifferences?: PlatformDifference[];
  performanceRisk?: number;
  rank?: number;
  savingsOpportunity?: SavingsOpportunity;
  migrationEffort?: MigrationEffort;
  instanceGpuInfo?: GpuInfo;
  savingsOpportunityAfterDiscounts?: InstanceSavingsOpportunityAfterDiscounts;
}
export declare const RecommendationSourceType: {
  readonly AUTO_SCALING_GROUP: "AutoScalingGroup";
  readonly EBS_VOLUME: "EbsVolume";
  readonly EC2_INSTANCE: "Ec2Instance";
  readonly ECS_SERVICE: "EcsService";
  readonly LAMBDA_FUNCTION: "LambdaFunction";
  readonly LICENSE: "License";
};
export type RecommendationSourceType =
  (typeof RecommendationSourceType)[keyof typeof RecommendationSourceType];
export interface RecommendationSource {
  recommendationSourceArn?: string;
  recommendationSourceType?: RecommendationSourceType;
}
export interface InstanceRecommendation {
  instanceArn?: string;
  accountId?: string;
  instanceName?: string;
  currentInstanceType?: string;
  finding?: Finding;
  findingReasonCodes?: InstanceRecommendationFindingReasonCode[];
  utilizationMetrics?: UtilizationMetric[];
  lookBackPeriodInDays?: number;
  recommendationOptions?: InstanceRecommendationOption[];
  recommendationSources?: RecommendationSource[];
  lastRefreshTimestamp?: Date;
  currentPerformanceRisk?: CurrentPerformanceRisk;
  effectiveRecommendationPreferences?: EffectiveRecommendationPreferences;
  inferredWorkloadTypes?: InferredWorkloadType[];
  instanceState?: InstanceState;
  tags?: Tag[];
  externalMetricStatus?: ExternalMetricStatus;
  currentInstanceGpuInfo?: GpuInfo;
  idle?: InstanceIdle;
}
export interface GetEC2InstanceRecommendationsResponse {
  nextToken?: string;
  instanceRecommendations?: InstanceRecommendation[];
  errors?: GetRecommendationError[];
}
export interface GetEC2RecommendationProjectedMetricsRequest {
  instanceArn: string | undefined;
  stat: MetricStatistic | undefined;
  period: number | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
  recommendationPreferences?: RecommendationPreferences;
}
export interface ProjectedMetric {
  name?: MetricName;
  timestamps?: Date[];
  values?: number[];
}
export interface RecommendedOptionProjectedMetric {
  recommendedInstanceType?: string;
  rank?: number;
  projectedMetrics?: ProjectedMetric[];
}
export interface GetEC2RecommendationProjectedMetricsResponse {
  recommendedOptionProjectedMetrics?: RecommendedOptionProjectedMetric[];
}
export interface GetECSServiceRecommendationProjectedMetricsRequest {
  serviceArn: string | undefined;
  stat: MetricStatistic | undefined;
  period: number | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
}
export declare const ECSServiceMetricName: {
  readonly CPU: "Cpu";
  readonly MEMORY: "Memory";
};
export type ECSServiceMetricName =
  (typeof ECSServiceMetricName)[keyof typeof ECSServiceMetricName];
export interface ECSServiceProjectedMetric {
  name?: ECSServiceMetricName;
  timestamps?: Date[];
  upperBoundValues?: number[];
  lowerBoundValues?: number[];
}
export interface ECSServiceRecommendedOptionProjectedMetric {
  recommendedCpuUnits?: number;
  recommendedMemorySize?: number;
  projectedMetrics?: ECSServiceProjectedMetric[];
}
export interface GetECSServiceRecommendationProjectedMetricsResponse {
  recommendedOptionProjectedMetrics?: ECSServiceRecommendedOptionProjectedMetric[];
}
export interface GetECSServiceRecommendationsRequest {
  serviceArns?: string[];
  nextToken?: string;
  maxResults?: number;
  filters?: ECSServiceRecommendationFilter[];
  accountIds?: string[];
}
export interface MemorySizeConfiguration {
  memory?: number;
  memoryReservation?: number;
}
export interface ContainerConfiguration {
  containerName?: string;
  memorySizeConfiguration?: MemorySizeConfiguration;
  cpu?: number;
}
export interface ServiceConfiguration {
  memory?: number;
  cpu?: number;
  containerConfigurations?: ContainerConfiguration[];
  autoScalingConfiguration?: AutoScalingConfiguration;
  taskDefinitionArn?: string;
}
export declare const ECSSavingsEstimationModeSource: {
  readonly COST_EXPLORER_RIGHTSIZING: "CostExplorerRightsizing";
  readonly COST_OPTIMIZATION_HUB: "CostOptimizationHub";
  readonly PUBLIC_PRICING: "PublicPricing";
};
export type ECSSavingsEstimationModeSource =
  (typeof ECSSavingsEstimationModeSource)[keyof typeof ECSSavingsEstimationModeSource];
export interface ECSSavingsEstimationMode {
  source?: ECSSavingsEstimationModeSource;
}
export interface ECSEffectiveRecommendationPreferences {
  savingsEstimationMode?: ECSSavingsEstimationMode;
}
export declare const ECSServiceRecommendationFinding: {
  readonly OPTIMIZED: "Optimized";
  readonly OVER_PROVISIONED: "Overprovisioned";
  readonly UNDER_PROVISIONED: "Underprovisioned";
};
export type ECSServiceRecommendationFinding =
  (typeof ECSServiceRecommendationFinding)[keyof typeof ECSServiceRecommendationFinding];
export declare const ECSServiceRecommendationFindingReasonCode: {
  readonly CPU_OVER_PROVISIONED: "CPUOverprovisioned";
  readonly CPU_UNDER_PROVISIONED: "CPUUnderprovisioned";
  readonly MEMORY_OVER_PROVISIONED: "MemoryOverprovisioned";
  readonly MEMORY_UNDER_PROVISIONED: "MemoryUnderprovisioned";
};
export type ECSServiceRecommendationFindingReasonCode =
  (typeof ECSServiceRecommendationFindingReasonCode)[keyof typeof ECSServiceRecommendationFindingReasonCode];
export declare const ECSServiceLaunchType: {
  readonly EC2: "EC2";
  readonly FARGATE: "Fargate";
};
export type ECSServiceLaunchType =
  (typeof ECSServiceLaunchType)[keyof typeof ECSServiceLaunchType];
export interface ContainerRecommendation {
  containerName?: string;
  memorySizeConfiguration?: MemorySizeConfiguration;
  cpu?: number;
}
export declare const ECSServiceMetricStatistic: {
  readonly AVERAGE: "Average";
  readonly MAXIMUM: "Maximum";
};
export type ECSServiceMetricStatistic =
  (typeof ECSServiceMetricStatistic)[keyof typeof ECSServiceMetricStatistic];
export interface ECSServiceProjectedUtilizationMetric {
  name?: ECSServiceMetricName;
  statistic?: ECSServiceMetricStatistic;
  lowerBoundValue?: number;
  upperBoundValue?: number;
}
export interface ECSEstimatedMonthlySavings {
  currency?: Currency;
  value?: number;
}
export interface ECSSavingsOpportunityAfterDiscounts {
  savingsOpportunityPercentage?: number;
  estimatedMonthlySavings?: ECSEstimatedMonthlySavings;
}
export interface ECSServiceRecommendationOption {
  memory?: number;
  cpu?: number;
  savingsOpportunity?: SavingsOpportunity;
  projectedUtilizationMetrics?: ECSServiceProjectedUtilizationMetric[];
  containerRecommendations?: ContainerRecommendation[];
  savingsOpportunityAfterDiscounts?: ECSSavingsOpportunityAfterDiscounts;
}
export interface ECSServiceUtilizationMetric {
  name?: ECSServiceMetricName;
  statistic?: ECSServiceMetricStatistic;
  value?: number;
}
export interface ECSServiceRecommendation {
  serviceArn?: string;
  accountId?: string;
  currentServiceConfiguration?: ServiceConfiguration;
  utilizationMetrics?: ECSServiceUtilizationMetric[];
  lookbackPeriodInDays?: number;
  launchType?: ECSServiceLaunchType;
  lastRefreshTimestamp?: Date;
  finding?: ECSServiceRecommendationFinding;
  findingReasonCodes?: ECSServiceRecommendationFindingReasonCode[];
  serviceRecommendationOptions?: ECSServiceRecommendationOption[];
  currentPerformanceRisk?: CurrentPerformanceRisk;
  tags?: Tag[];
  effectiveRecommendationPreferences?: ECSEffectiveRecommendationPreferences;
}
export interface GetECSServiceRecommendationsResponse {
  nextToken?: string;
  ecsServiceRecommendations?: ECSServiceRecommendation[];
  errors?: GetRecommendationError[];
}
export interface GetEffectiveRecommendationPreferencesRequest {
  resourceArn: string | undefined;
}
export interface GetEffectiveRecommendationPreferencesResponse {
  enhancedInfrastructureMetrics?: EnhancedInfrastructureMetrics;
  externalMetricsPreference?: ExternalMetricsPreference;
  lookBackPeriod?: LookBackPeriodPreference;
  utilizationPreferences?: UtilizationPreference[];
  preferredResources?: EffectivePreferredResource[];
}
export interface GetEnrollmentStatusRequest {}
export interface GetEnrollmentStatusResponse {
  status?: Status;
  statusReason?: string;
  memberAccountsEnrolled?: boolean;
  lastUpdatedTimestamp?: Date;
  numberOfMemberAccountsOptedIn?: number;
}
export declare const EnrollmentFilterName: {
  readonly STATUS: "Status";
};
export type EnrollmentFilterName =
  (typeof EnrollmentFilterName)[keyof typeof EnrollmentFilterName];
export interface EnrollmentFilter {
  name?: EnrollmentFilterName;
  values?: string[];
}
export interface GetEnrollmentStatusesForOrganizationRequest {
  filters?: EnrollmentFilter[];
  nextToken?: string;
  maxResults?: number;
}
export interface GetEnrollmentStatusesForOrganizationResponse {
  accountEnrollmentStatuses?: AccountEnrollmentStatus[];
  nextToken?: string;
}
export interface GetLambdaFunctionRecommendationsRequest {
  functionArns?: string[];
  accountIds?: string[];
  filters?: LambdaFunctionRecommendationFilter[];
  nextToken?: string;
  maxResults?: number;
}
export declare const LambdaSavingsEstimationModeSource: {
  readonly COST_EXPLORER_RIGHTSIZING: "CostExplorerRightsizing";
  readonly COST_OPTIMIZATION_HUB: "CostOptimizationHub";
  readonly PUBLIC_PRICING: "PublicPricing";
};
export type LambdaSavingsEstimationModeSource =
  (typeof LambdaSavingsEstimationModeSource)[keyof typeof LambdaSavingsEstimationModeSource];
export interface LambdaSavingsEstimationMode {
  source?: LambdaSavingsEstimationModeSource;
}
export interface LambdaEffectiveRecommendationPreferences {
  savingsEstimationMode?: LambdaSavingsEstimationMode;
}
export declare const LambdaFunctionRecommendationFinding: {
  readonly NOT_OPTIMIZED: "NotOptimized";
  readonly OPTIMIZED: "Optimized";
  readonly UNAVAILABLE: "Unavailable";
};
export type LambdaFunctionRecommendationFinding =
  (typeof LambdaFunctionRecommendationFinding)[keyof typeof LambdaFunctionRecommendationFinding];
export declare const LambdaFunctionRecommendationFindingReasonCode: {
  readonly INCONCLUSIVE: "Inconclusive";
  readonly INSUFFICIENT_DATA: "InsufficientData";
  readonly MEMORY_OVER_PROVISIONED: "MemoryOverprovisioned";
  readonly MEMORY_UNDER_PROVISIONED: "MemoryUnderprovisioned";
};
export type LambdaFunctionRecommendationFindingReasonCode =
  (typeof LambdaFunctionRecommendationFindingReasonCode)[keyof typeof LambdaFunctionRecommendationFindingReasonCode];
export declare const LambdaFunctionMemoryMetricName: {
  readonly DURATION: "Duration";
};
export type LambdaFunctionMemoryMetricName =
  (typeof LambdaFunctionMemoryMetricName)[keyof typeof LambdaFunctionMemoryMetricName];
export declare const LambdaFunctionMemoryMetricStatistic: {
  readonly EXPECTED: "Expected";
  readonly LOWER_BOUND: "LowerBound";
  readonly UPPER_BOUND: "UpperBound";
};
export type LambdaFunctionMemoryMetricStatistic =
  (typeof LambdaFunctionMemoryMetricStatistic)[keyof typeof LambdaFunctionMemoryMetricStatistic];
export interface LambdaFunctionMemoryProjectedMetric {
  name?: LambdaFunctionMemoryMetricName;
  statistic?: LambdaFunctionMemoryMetricStatistic;
  value?: number;
}
export interface LambdaEstimatedMonthlySavings {
  currency?: Currency;
  value?: number;
}
export interface LambdaSavingsOpportunityAfterDiscounts {
  savingsOpportunityPercentage?: number;
  estimatedMonthlySavings?: LambdaEstimatedMonthlySavings;
}
export interface LambdaFunctionMemoryRecommendationOption {
  rank?: number;
  memorySize?: number;
  projectedUtilizationMetrics?: LambdaFunctionMemoryProjectedMetric[];
  savingsOpportunity?: SavingsOpportunity;
  savingsOpportunityAfterDiscounts?: LambdaSavingsOpportunityAfterDiscounts;
}
export declare const LambdaFunctionMetricName: {
  readonly DURATION: "Duration";
  readonly MEMORY: "Memory";
};
export type LambdaFunctionMetricName =
  (typeof LambdaFunctionMetricName)[keyof typeof LambdaFunctionMetricName];
export declare const LambdaFunctionMetricStatistic: {
  readonly AVERAGE: "Average";
  readonly MAXIMUM: "Maximum";
};
export type LambdaFunctionMetricStatistic =
  (typeof LambdaFunctionMetricStatistic)[keyof typeof LambdaFunctionMetricStatistic];
export interface LambdaFunctionUtilizationMetric {
  name?: LambdaFunctionMetricName;
  statistic?: LambdaFunctionMetricStatistic;
  value?: number;
}
export interface LambdaFunctionRecommendation {
  functionArn?: string;
  functionVersion?: string;
  accountId?: string;
  currentMemorySize?: number;
  numberOfInvocations?: number;
  utilizationMetrics?: LambdaFunctionUtilizationMetric[];
  lookbackPeriodInDays?: number;
  lastRefreshTimestamp?: Date;
  finding?: LambdaFunctionRecommendationFinding;
  findingReasonCodes?: LambdaFunctionRecommendationFindingReasonCode[];
  memorySizeRecommendationOptions?: LambdaFunctionMemoryRecommendationOption[];
  currentPerformanceRisk?: CurrentPerformanceRisk;
  tags?: Tag[];
  effectiveRecommendationPreferences?: LambdaEffectiveRecommendationPreferences;
}
export interface GetLambdaFunctionRecommendationsResponse {
  nextToken?: string;
  lambdaFunctionRecommendations?: LambdaFunctionRecommendation[];
}
export interface GetLicenseRecommendationsRequest {
  resourceArns?: string[];
  nextToken?: string;
  maxResults?: number;
  filters?: LicenseRecommendationFilter[];
  accountIds?: string[];
}
export declare const LicenseEdition: {
  readonly ENTERPRISE: "Enterprise";
  readonly FREE: "Free";
  readonly NO_LICENSE_EDITION_FOUND: "NoLicenseEditionFound";
  readonly STANDARD: "Standard";
};
export type LicenseEdition =
  (typeof LicenseEdition)[keyof typeof LicenseEdition];
export declare const LicenseModel: {
  readonly BRING_YOUR_OWN_LICENSE: "BringYourOwnLicense";
  readonly LICENSE_INCLUDED: "LicenseIncluded";
};
export type LicenseModel = (typeof LicenseModel)[keyof typeof LicenseModel];
export declare const LicenseName: {
  readonly SQLSERVER: "SQLServer";
};
export type LicenseName = (typeof LicenseName)[keyof typeof LicenseName];
export declare const MetricSourceProvider: {
  readonly CloudWatchAppInsights: "CloudWatchApplicationInsights";
};
export type MetricSourceProvider =
  (typeof MetricSourceProvider)[keyof typeof MetricSourceProvider];
export interface MetricSource {
  provider?: MetricSourceProvider;
  providerArn?: string;
}
export interface LicenseConfiguration {
  numberOfCores?: number;
  instanceType?: string;
  operatingSystem?: string;
  licenseEdition?: LicenseEdition;
  licenseName?: LicenseName;
  licenseModel?: LicenseModel;
  licenseVersion?: string;
  metricsSource?: MetricSource[];
}
export declare const LicenseFinding: {
  readonly INSUFFICIENT_METRICS: "InsufficientMetrics";
  readonly NOT_OPTIMIZED: "NotOptimized";
  readonly OPTIMIZED: "Optimized";
};
export type LicenseFinding =
  (typeof LicenseFinding)[keyof typeof LicenseFinding];
export declare const LicenseFindingReasonCode: {
  readonly CW_APP_INSIGHTS_DISABLED: "InvalidCloudWatchApplicationInsightsSetup";
  readonly CW_APP_INSIGHTS_ERROR: "CloudWatchApplicationInsightsError";
  readonly LICENSE_OVER_PROVISIONED: "LicenseOverprovisioned";
  readonly OPTIMIZED: "Optimized";
};
export type LicenseFindingReasonCode =
  (typeof LicenseFindingReasonCode)[keyof typeof LicenseFindingReasonCode];
export interface LicenseRecommendationOption {
  rank?: number;
  operatingSystem?: string;
  licenseEdition?: LicenseEdition;
  licenseModel?: LicenseModel;
  savingsOpportunity?: SavingsOpportunity;
}
export interface LicenseRecommendation {
  resourceArn?: string;
  accountId?: string;
  currentLicenseConfiguration?: LicenseConfiguration;
  lookbackPeriodInDays?: number;
  lastRefreshTimestamp?: Date;
  finding?: LicenseFinding;
  findingReasonCodes?: LicenseFindingReasonCode[];
  licenseRecommendationOptions?: LicenseRecommendationOption[];
  tags?: Tag[];
}
export interface GetLicenseRecommendationsResponse {
  nextToken?: string;
  licenseRecommendations?: LicenseRecommendation[];
  errors?: GetRecommendationError[];
}
export interface GetRecommendationPreferencesRequest {
  resourceType: ResourceType | undefined;
  scope?: Scope;
  nextToken?: string;
  maxResults?: number;
}
export declare const SavingsEstimationMode: {
  readonly AFTER_DISCOUNTS: "AfterDiscounts";
  readonly BEFORE_DISCOUNTS: "BeforeDiscounts";
};
export type SavingsEstimationMode =
  (typeof SavingsEstimationMode)[keyof typeof SavingsEstimationMode];
export interface RecommendationPreferencesDetail {
  scope?: Scope;
  resourceType?: ResourceType;
  enhancedInfrastructureMetrics?: EnhancedInfrastructureMetrics;
  inferredWorkloadTypes?: InferredWorkloadTypesPreference;
  externalMetricsPreference?: ExternalMetricsPreference;
  lookBackPeriod?: LookBackPeriodPreference;
  utilizationPreferences?: UtilizationPreference[];
  preferredResources?: EffectivePreferredResource[];
  savingsEstimationMode?: SavingsEstimationMode;
}
export interface GetRecommendationPreferencesResponse {
  nextToken?: string;
  recommendationPreferencesDetails?: RecommendationPreferencesDetail[];
}
export interface GetRecommendationSummariesRequest {
  accountIds?: string[];
  nextToken?: string;
  maxResults?: number;
}
export interface CurrentPerformanceRiskRatings {
  high?: number;
  medium?: number;
  low?: number;
  veryLow?: number;
}
export interface InferredWorkloadSaving {
  inferredWorkloadTypes?: InferredWorkloadType[];
  estimatedMonthlySavings?: EstimatedMonthlySavings;
}
export declare const FindingReasonCode: {
  readonly MEMORY_OVER_PROVISIONED: "MemoryOverprovisioned";
  readonly MEMORY_UNDER_PROVISIONED: "MemoryUnderprovisioned";
};
export type FindingReasonCode =
  (typeof FindingReasonCode)[keyof typeof FindingReasonCode];
export interface ReasonCodeSummary {
  name?: FindingReasonCode;
  value?: number;
}
export interface Summary {
  name?: Finding;
  value?: number;
  reasonCodeSummaries?: ReasonCodeSummary[];
}
export interface RecommendationSummary {
  summaries?: Summary[];
  recommendationResourceType?: RecommendationSourceType;
  accountId?: string;
  savingsOpportunity?: SavingsOpportunity;
  currentPerformanceRiskRatings?: CurrentPerformanceRiskRatings;
  inferredWorkloadSavings?: InferredWorkloadSaving[];
}
export interface GetRecommendationSummariesResponse {
  nextToken?: string;
  recommendationSummaries?: RecommendationSummary[];
}
export interface PreferredResource {
  name?: PreferredResourceName;
  includeList?: string[];
  excludeList?: string[];
}
export interface PutRecommendationPreferencesRequest {
  resourceType: ResourceType | undefined;
  scope?: Scope;
  enhancedInfrastructureMetrics?: EnhancedInfrastructureMetrics;
  inferredWorkloadTypes?: InferredWorkloadTypesPreference;
  externalMetricsPreference?: ExternalMetricsPreference;
  lookBackPeriod?: LookBackPeriodPreference;
  utilizationPreferences?: UtilizationPreference[];
  preferredResources?: PreferredResource[];
  savingsEstimationMode?: SavingsEstimationMode;
}
export interface PutRecommendationPreferencesResponse {}
export interface UpdateEnrollmentStatusRequest {
  status: Status | undefined;
  includeMemberAccounts?: boolean;
}
export interface UpdateEnrollmentStatusResponse {
  status?: Status;
  statusReason?: string;
}
