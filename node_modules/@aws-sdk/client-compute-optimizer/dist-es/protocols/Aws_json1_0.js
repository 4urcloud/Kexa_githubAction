import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { ComputeOptimizerServiceException as __BaseException } from "../models/ComputeOptimizerServiceException";
import { AccessDeniedException, InternalServerException, InvalidParameterValueException, LimitExceededException, MissingAuthenticationToken, OptInRequiredException, ResourceNotFoundException, ServiceUnavailableException, ThrottlingException, } from "../models/models_0";
export const se_DeleteRecommendationPreferencesCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRecommendationPreferences");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRecommendationExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRecommendationExportJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportAutoScalingGroupRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("ExportAutoScalingGroupRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportEBSVolumeRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("ExportEBSVolumeRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportEC2InstanceRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("ExportEC2InstanceRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportECSServiceRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("ExportECSServiceRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportLambdaFunctionRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("ExportLambdaFunctionRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportLicenseRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("ExportLicenseRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAutoScalingGroupRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAutoScalingGroupRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEBSVolumeRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetEBSVolumeRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEC2InstanceRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetEC2InstanceRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEC2RecommendationProjectedMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("GetEC2RecommendationProjectedMetrics");
    let body;
    body = JSON.stringify(se_GetEC2RecommendationProjectedMetricsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetECSServiceRecommendationProjectedMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("GetECSServiceRecommendationProjectedMetrics");
    let body;
    body = JSON.stringify(se_GetECSServiceRecommendationProjectedMetricsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetECSServiceRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetECSServiceRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEffectiveRecommendationPreferencesCommand = async (input, context) => {
    const headers = sharedHeaders("GetEffectiveRecommendationPreferences");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEnrollmentStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetEnrollmentStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEnrollmentStatusesForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("GetEnrollmentStatusesForOrganization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLambdaFunctionRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetLambdaFunctionRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLicenseRecommendationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetLicenseRecommendations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRecommendationPreferencesCommand = async (input, context) => {
    const headers = sharedHeaders("GetRecommendationPreferences");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRecommendationSummariesCommand = async (input, context) => {
    const headers = sharedHeaders("GetRecommendationSummaries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutRecommendationPreferencesCommand = async (input, context) => {
    const headers = sharedHeaders("PutRecommendationPreferences");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEnrollmentStatusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEnrollmentStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_DeleteRecommendationPreferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRecommendationExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRecommendationExportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExportAutoScalingGroupRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExportEBSVolumeRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExportEC2InstanceRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExportECSServiceRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExportLambdaFunctionRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExportLicenseRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAutoScalingGroupRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAutoScalingGroupRecommendationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEBSVolumeRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEBSVolumeRecommendationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEC2InstanceRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEC2InstanceRecommendationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEC2RecommendationProjectedMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEC2RecommendationProjectedMetricsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetECSServiceRecommendationProjectedMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetECSServiceRecommendationProjectedMetricsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetECSServiceRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetECSServiceRecommendationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEffectiveRecommendationPreferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEnrollmentStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEnrollmentStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEnrollmentStatusesForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEnrollmentStatusesForOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLambdaFunctionRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLambdaFunctionRecommendationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLicenseRecommendationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLicenseRecommendationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRecommendationPreferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRecommendationSummariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRecommendationSummariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutRecommendationPreferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEnrollmentStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.computeoptimizer#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.computeoptimizer#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.computeoptimizer#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "MissingAuthenticationToken":
        case "com.amazonaws.computeoptimizer#MissingAuthenticationToken":
            throw await de_MissingAuthenticationTokenRes(parsedOutput, context);
        case "OptInRequiredException":
        case "com.amazonaws.computeoptimizer#OptInRequiredException":
            throw await de_OptInRequiredExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.computeoptimizer#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.computeoptimizer#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.computeoptimizer#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.computeoptimizer#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MissingAuthenticationTokenRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MissingAuthenticationToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OptInRequiredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OptInRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_GetEC2RecommendationProjectedMetricsRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        instanceArn: [],
        period: [],
        recommendationPreferences: _json,
        startTime: (_) => Math.round(_.getTime() / 1000),
        stat: [],
    });
};
const se_GetECSServiceRecommendationProjectedMetricsRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        period: [],
        serviceArn: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        stat: [],
    });
};
const de_AccountEnrollmentStatus = (output, context) => {
    return take(output, {
        accountId: __expectString,
        lastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        statusReason: __expectString,
    });
};
const de_AccountEnrollmentStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountEnrollmentStatus(entry, context);
    });
    return retVal;
};
const de_AutoScalingGroupEstimatedMonthlySavings = (output, context) => {
    return take(output, {
        currency: __expectString,
        value: __limitedParseDouble,
    });
};
const de_AutoScalingGroupRecommendation = (output, context) => {
    return take(output, {
        accountId: __expectString,
        autoScalingGroupArn: __expectString,
        autoScalingGroupName: __expectString,
        currentConfiguration: _json,
        currentInstanceGpuInfo: _json,
        currentPerformanceRisk: __expectString,
        effectiveRecommendationPreferences: _json,
        finding: __expectString,
        inferredWorkloadTypes: _json,
        lastRefreshTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lookBackPeriodInDays: __limitedParseDouble,
        recommendationOptions: (_) => de_AutoScalingGroupRecommendationOptions(_, context),
        utilizationMetrics: (_) => de_UtilizationMetrics(_, context),
    });
};
const de_AutoScalingGroupRecommendationOption = (output, context) => {
    return take(output, {
        configuration: _json,
        instanceGpuInfo: _json,
        migrationEffort: __expectString,
        performanceRisk: __limitedParseDouble,
        projectedUtilizationMetrics: (_) => de_ProjectedUtilizationMetrics(_, context),
        rank: __expectInt32,
        savingsOpportunity: (_) => de_SavingsOpportunity(_, context),
        savingsOpportunityAfterDiscounts: (_) => de_AutoScalingGroupSavingsOpportunityAfterDiscounts(_, context),
    });
};
const de_AutoScalingGroupRecommendationOptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoScalingGroupRecommendationOption(entry, context);
    });
    return retVal;
};
const de_AutoScalingGroupRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoScalingGroupRecommendation(entry, context);
    });
    return retVal;
};
const de_AutoScalingGroupSavingsOpportunityAfterDiscounts = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: (_) => de_AutoScalingGroupEstimatedMonthlySavings(_, context),
        savingsOpportunityPercentage: __limitedParseDouble,
    });
};
const de_DescribeRecommendationExportJobsResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        recommendationExportJobs: (_) => de_RecommendationExportJobs(_, context),
    });
};
const de_EBSEstimatedMonthlySavings = (output, context) => {
    return take(output, {
        currency: __expectString,
        value: __limitedParseDouble,
    });
};
const de_EBSSavingsOpportunityAfterDiscounts = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: (_) => de_EBSEstimatedMonthlySavings(_, context),
        savingsOpportunityPercentage: __limitedParseDouble,
    });
};
const de_EBSUtilizationMetric = (output, context) => {
    return take(output, {
        name: __expectString,
        statistic: __expectString,
        value: __limitedParseDouble,
    });
};
const de_EBSUtilizationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EBSUtilizationMetric(entry, context);
    });
    return retVal;
};
const de_ECSEstimatedMonthlySavings = (output, context) => {
    return take(output, {
        currency: __expectString,
        value: __limitedParseDouble,
    });
};
const de_ECSSavingsOpportunityAfterDiscounts = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: (_) => de_ECSEstimatedMonthlySavings(_, context),
        savingsOpportunityPercentage: __limitedParseDouble,
    });
};
const de_ECSServiceProjectedMetric = (output, context) => {
    return take(output, {
        lowerBoundValues: (_) => de_MetricValues(_, context),
        name: __expectString,
        timestamps: (_) => de_Timestamps(_, context),
        upperBoundValues: (_) => de_MetricValues(_, context),
    });
};
const de_ECSServiceProjectedMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ECSServiceProjectedMetric(entry, context);
    });
    return retVal;
};
const de_ECSServiceProjectedUtilizationMetric = (output, context) => {
    return take(output, {
        lowerBoundValue: __limitedParseDouble,
        name: __expectString,
        statistic: __expectString,
        upperBoundValue: __limitedParseDouble,
    });
};
const de_ECSServiceProjectedUtilizationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ECSServiceProjectedUtilizationMetric(entry, context);
    });
    return retVal;
};
const de_ECSServiceRecommendation = (output, context) => {
    return take(output, {
        accountId: __expectString,
        currentPerformanceRisk: __expectString,
        currentServiceConfiguration: _json,
        effectiveRecommendationPreferences: _json,
        finding: __expectString,
        findingReasonCodes: _json,
        lastRefreshTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        launchType: __expectString,
        lookbackPeriodInDays: __limitedParseDouble,
        serviceArn: __expectString,
        serviceRecommendationOptions: (_) => de_ECSServiceRecommendationOptions(_, context),
        tags: _json,
        utilizationMetrics: (_) => de_ECSServiceUtilizationMetrics(_, context),
    });
};
const de_ECSServiceRecommendationOption = (output, context) => {
    return take(output, {
        containerRecommendations: _json,
        cpu: __expectInt32,
        memory: __expectInt32,
        projectedUtilizationMetrics: (_) => de_ECSServiceProjectedUtilizationMetrics(_, context),
        savingsOpportunity: (_) => de_SavingsOpportunity(_, context),
        savingsOpportunityAfterDiscounts: (_) => de_ECSSavingsOpportunityAfterDiscounts(_, context),
    });
};
const de_ECSServiceRecommendationOptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ECSServiceRecommendationOption(entry, context);
    });
    return retVal;
};
const de_ECSServiceRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ECSServiceRecommendation(entry, context);
    });
    return retVal;
};
const de_ECSServiceRecommendedOptionProjectedMetric = (output, context) => {
    return take(output, {
        projectedMetrics: (_) => de_ECSServiceProjectedMetrics(_, context),
        recommendedCpuUnits: __expectInt32,
        recommendedMemorySize: __expectInt32,
    });
};
const de_ECSServiceRecommendedOptionProjectedMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ECSServiceRecommendedOptionProjectedMetric(entry, context);
    });
    return retVal;
};
const de_ECSServiceUtilizationMetric = (output, context) => {
    return take(output, {
        name: __expectString,
        statistic: __expectString,
        value: __limitedParseDouble,
    });
};
const de_ECSServiceUtilizationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ECSServiceUtilizationMetric(entry, context);
    });
    return retVal;
};
const de_EstimatedMonthlySavings = (output, context) => {
    return take(output, {
        currency: __expectString,
        value: __limitedParseDouble,
    });
};
const de_GetAutoScalingGroupRecommendationsResponse = (output, context) => {
    return take(output, {
        autoScalingGroupRecommendations: (_) => de_AutoScalingGroupRecommendations(_, context),
        errors: _json,
        nextToken: __expectString,
    });
};
const de_GetEBSVolumeRecommendationsResponse = (output, context) => {
    return take(output, {
        errors: _json,
        nextToken: __expectString,
        volumeRecommendations: (_) => de_VolumeRecommendations(_, context),
    });
};
const de_GetEC2InstanceRecommendationsResponse = (output, context) => {
    return take(output, {
        errors: _json,
        instanceRecommendations: (_) => de_InstanceRecommendations(_, context),
        nextToken: __expectString,
    });
};
const de_GetEC2RecommendationProjectedMetricsResponse = (output, context) => {
    return take(output, {
        recommendedOptionProjectedMetrics: (_) => de_RecommendedOptionProjectedMetrics(_, context),
    });
};
const de_GetECSServiceRecommendationProjectedMetricsResponse = (output, context) => {
    return take(output, {
        recommendedOptionProjectedMetrics: (_) => de_ECSServiceRecommendedOptionProjectedMetrics(_, context),
    });
};
const de_GetECSServiceRecommendationsResponse = (output, context) => {
    return take(output, {
        ecsServiceRecommendations: (_) => de_ECSServiceRecommendations(_, context),
        errors: _json,
        nextToken: __expectString,
    });
};
const de_GetEnrollmentStatusesForOrganizationResponse = (output, context) => {
    return take(output, {
        accountEnrollmentStatuses: (_) => de_AccountEnrollmentStatuses(_, context),
        nextToken: __expectString,
    });
};
const de_GetEnrollmentStatusResponse = (output, context) => {
    return take(output, {
        lastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        memberAccountsEnrolled: __expectBoolean,
        numberOfMemberAccountsOptedIn: __expectInt32,
        status: __expectString,
        statusReason: __expectString,
    });
};
const de_GetLambdaFunctionRecommendationsResponse = (output, context) => {
    return take(output, {
        lambdaFunctionRecommendations: (_) => de_LambdaFunctionRecommendations(_, context),
        nextToken: __expectString,
    });
};
const de_GetLicenseRecommendationsResponse = (output, context) => {
    return take(output, {
        errors: _json,
        licenseRecommendations: (_) => de_LicenseRecommendations(_, context),
        nextToken: __expectString,
    });
};
const de_GetRecommendationSummariesResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        recommendationSummaries: (_) => de_RecommendationSummaries(_, context),
    });
};
const de_InferredWorkloadSaving = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: (_) => de_EstimatedMonthlySavings(_, context),
        inferredWorkloadTypes: _json,
    });
};
const de_InferredWorkloadSavings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferredWorkloadSaving(entry, context);
    });
    return retVal;
};
const de_InstanceEstimatedMonthlySavings = (output, context) => {
    return take(output, {
        currency: __expectString,
        value: __limitedParseDouble,
    });
};
const de_InstanceRecommendation = (output, context) => {
    return take(output, {
        accountId: __expectString,
        currentInstanceGpuInfo: _json,
        currentInstanceType: __expectString,
        currentPerformanceRisk: __expectString,
        effectiveRecommendationPreferences: _json,
        externalMetricStatus: _json,
        finding: __expectString,
        findingReasonCodes: _json,
        idle: __expectString,
        inferredWorkloadTypes: _json,
        instanceArn: __expectString,
        instanceName: __expectString,
        instanceState: __expectString,
        lastRefreshTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lookBackPeriodInDays: __limitedParseDouble,
        recommendationOptions: (_) => de_RecommendationOptions(_, context),
        recommendationSources: _json,
        tags: _json,
        utilizationMetrics: (_) => de_UtilizationMetrics(_, context),
    });
};
const de_InstanceRecommendationOption = (output, context) => {
    return take(output, {
        instanceGpuInfo: _json,
        instanceType: __expectString,
        migrationEffort: __expectString,
        performanceRisk: __limitedParseDouble,
        platformDifferences: _json,
        projectedUtilizationMetrics: (_) => de_ProjectedUtilizationMetrics(_, context),
        rank: __expectInt32,
        savingsOpportunity: (_) => de_SavingsOpportunity(_, context),
        savingsOpportunityAfterDiscounts: (_) => de_InstanceSavingsOpportunityAfterDiscounts(_, context),
    });
};
const de_InstanceRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceRecommendation(entry, context);
    });
    return retVal;
};
const de_InstanceSavingsOpportunityAfterDiscounts = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: (_) => de_InstanceEstimatedMonthlySavings(_, context),
        savingsOpportunityPercentage: __limitedParseDouble,
    });
};
const de_LambdaEstimatedMonthlySavings = (output, context) => {
    return take(output, {
        currency: __expectString,
        value: __limitedParseDouble,
    });
};
const de_LambdaFunctionMemoryProjectedMetric = (output, context) => {
    return take(output, {
        name: __expectString,
        statistic: __expectString,
        value: __limitedParseDouble,
    });
};
const de_LambdaFunctionMemoryProjectedMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LambdaFunctionMemoryProjectedMetric(entry, context);
    });
    return retVal;
};
const de_LambdaFunctionMemoryRecommendationOption = (output, context) => {
    return take(output, {
        memorySize: __expectInt32,
        projectedUtilizationMetrics: (_) => de_LambdaFunctionMemoryProjectedMetrics(_, context),
        rank: __expectInt32,
        savingsOpportunity: (_) => de_SavingsOpportunity(_, context),
        savingsOpportunityAfterDiscounts: (_) => de_LambdaSavingsOpportunityAfterDiscounts(_, context),
    });
};
const de_LambdaFunctionMemoryRecommendationOptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LambdaFunctionMemoryRecommendationOption(entry, context);
    });
    return retVal;
};
const de_LambdaFunctionRecommendation = (output, context) => {
    return take(output, {
        accountId: __expectString,
        currentMemorySize: __expectInt32,
        currentPerformanceRisk: __expectString,
        effectiveRecommendationPreferences: _json,
        finding: __expectString,
        findingReasonCodes: _json,
        functionArn: __expectString,
        functionVersion: __expectString,
        lastRefreshTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lookbackPeriodInDays: __limitedParseDouble,
        memorySizeRecommendationOptions: (_) => de_LambdaFunctionMemoryRecommendationOptions(_, context),
        numberOfInvocations: __expectLong,
        tags: _json,
        utilizationMetrics: (_) => de_LambdaFunctionUtilizationMetrics(_, context),
    });
};
const de_LambdaFunctionRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LambdaFunctionRecommendation(entry, context);
    });
    return retVal;
};
const de_LambdaFunctionUtilizationMetric = (output, context) => {
    return take(output, {
        name: __expectString,
        statistic: __expectString,
        value: __limitedParseDouble,
    });
};
const de_LambdaFunctionUtilizationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LambdaFunctionUtilizationMetric(entry, context);
    });
    return retVal;
};
const de_LambdaSavingsOpportunityAfterDiscounts = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: (_) => de_LambdaEstimatedMonthlySavings(_, context),
        savingsOpportunityPercentage: __limitedParseDouble,
    });
};
const de_LicenseRecommendation = (output, context) => {
    return take(output, {
        accountId: __expectString,
        currentLicenseConfiguration: _json,
        finding: __expectString,
        findingReasonCodes: _json,
        lastRefreshTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        licenseRecommendationOptions: (_) => de_LicenseRecommendationOptions(_, context),
        lookbackPeriodInDays: __limitedParseDouble,
        resourceArn: __expectString,
        tags: _json,
    });
};
const de_LicenseRecommendationOption = (output, context) => {
    return take(output, {
        licenseEdition: __expectString,
        licenseModel: __expectString,
        operatingSystem: __expectString,
        rank: __expectInt32,
        savingsOpportunity: (_) => de_SavingsOpportunity(_, context),
    });
};
const de_LicenseRecommendationOptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LicenseRecommendationOption(entry, context);
    });
    return retVal;
};
const de_LicenseRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LicenseRecommendation(entry, context);
    });
    return retVal;
};
const de_MetricValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_ProjectedMetric = (output, context) => {
    return take(output, {
        name: __expectString,
        timestamps: (_) => de_Timestamps(_, context),
        values: (_) => de_MetricValues(_, context),
    });
};
const de_ProjectedMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectedMetric(entry, context);
    });
    return retVal;
};
const de_ProjectedUtilizationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UtilizationMetric(entry, context);
    });
    return retVal;
};
const de_ReasonCodeSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReasonCodeSummary(entry, context);
    });
    return retVal;
};
const de_ReasonCodeSummary = (output, context) => {
    return take(output, {
        name: __expectString,
        value: __limitedParseDouble,
    });
};
const de_RecommendationExportJob = (output, context) => {
    return take(output, {
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        destination: _json,
        failureReason: __expectString,
        jobId: __expectString,
        lastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        resourceType: __expectString,
        status: __expectString,
    });
};
const de_RecommendationExportJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecommendationExportJob(entry, context);
    });
    return retVal;
};
const de_RecommendationOptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceRecommendationOption(entry, context);
    });
    return retVal;
};
const de_RecommendationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecommendationSummary(entry, context);
    });
    return retVal;
};
const de_RecommendationSummary = (output, context) => {
    return take(output, {
        accountId: __expectString,
        currentPerformanceRiskRatings: _json,
        inferredWorkloadSavings: (_) => de_InferredWorkloadSavings(_, context),
        recommendationResourceType: __expectString,
        savingsOpportunity: (_) => de_SavingsOpportunity(_, context),
        summaries: (_) => de_Summaries(_, context),
    });
};
const de_RecommendedOptionProjectedMetric = (output, context) => {
    return take(output, {
        projectedMetrics: (_) => de_ProjectedMetrics(_, context),
        rank: __expectInt32,
        recommendedInstanceType: __expectString,
    });
};
const de_RecommendedOptionProjectedMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecommendedOptionProjectedMetric(entry, context);
    });
    return retVal;
};
const de_SavingsOpportunity = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: (_) => de_EstimatedMonthlySavings(_, context),
        savingsOpportunityPercentage: __limitedParseDouble,
    });
};
const de_Summaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Summary(entry, context);
    });
    return retVal;
};
const de_Summary = (output, context) => {
    return take(output, {
        name: __expectString,
        reasonCodeSummaries: (_) => de_ReasonCodeSummaries(_, context),
        value: __limitedParseDouble,
    });
};
const de_Timestamps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectNonNull(__parseEpochTimestamp(__expectNumber(entry)));
    });
    return retVal;
};
const de_UtilizationMetric = (output, context) => {
    return take(output, {
        name: __expectString,
        statistic: __expectString,
        value: __limitedParseDouble,
    });
};
const de_UtilizationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UtilizationMetric(entry, context);
    });
    return retVal;
};
const de_VolumeRecommendation = (output, context) => {
    return take(output, {
        accountId: __expectString,
        currentConfiguration: _json,
        currentPerformanceRisk: __expectString,
        effectiveRecommendationPreferences: _json,
        finding: __expectString,
        lastRefreshTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lookBackPeriodInDays: __limitedParseDouble,
        tags: _json,
        utilizationMetrics: (_) => de_EBSUtilizationMetrics(_, context),
        volumeArn: __expectString,
        volumeRecommendationOptions: (_) => de_VolumeRecommendationOptions(_, context),
    });
};
const de_VolumeRecommendationOption = (output, context) => {
    return take(output, {
        configuration: _json,
        performanceRisk: __limitedParseDouble,
        rank: __expectInt32,
        savingsOpportunity: (_) => de_SavingsOpportunity(_, context),
        savingsOpportunityAfterDiscounts: (_) => de_EBSSavingsOpportunityAfterDiscounts(_, context),
    });
};
const de_VolumeRecommendationOptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeRecommendationOption(entry, context);
    });
    return retVal;
};
const de_VolumeRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeRecommendation(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `ComputeOptimizerService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
