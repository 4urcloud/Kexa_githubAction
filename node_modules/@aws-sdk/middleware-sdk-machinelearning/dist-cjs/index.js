var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  getPredictEndpointPlugin: () => getPredictEndpointPlugin,
  predictEndpointMiddleware: () => predictEndpointMiddleware,
  predictEndpointMiddlewareOptions: () => predictEndpointMiddlewareOptions
});
module.exports = __toCommonJS(src_exports);

// src/predict-endpoint.ts
var import_protocol_http = require("@smithy/protocol-http");
function predictEndpointMiddleware(options) {
  return (next) => async (args) => {
    const { input } = args;
    let { request } = args;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      if (input.PredictEndpoint) {
        const endpoint = options.urlParser(input.PredictEndpoint);
        request = {
          ...request,
          hostname: endpoint.hostname,
          path: endpoint.path,
          port: endpoint.port,
          protocol: endpoint.protocol,
          query: endpoint.query ?? {}
        };
      }
    }
    return next({
      ...args,
      request
    });
  };
}
__name(predictEndpointMiddleware, "predictEndpointMiddleware");
var predictEndpointMiddlewareOptions = {
  step: "build",
  tags: ["PREDICT_ENDPOINT"],
  name: "predictEndpointMiddleware",
  override: true
};
var getPredictEndpointPlugin = /* @__PURE__ */ __name((config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(predictEndpointMiddleware(config), predictEndpointMiddlewareOptions);
  }
}), "getPredictEndpointPlugin");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  predictEndpointMiddleware,
  predictEndpointMiddlewareOptions,
  getPredictEndpointPlugin
});

