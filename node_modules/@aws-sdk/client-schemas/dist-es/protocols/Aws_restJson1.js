import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, LazyJsonString as __LazyJsonString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { BadRequestException, ConflictException, ForbiddenException, GoneException, InternalServerErrorException, NotFoundException, PreconditionFailedException, ServiceUnavailableException, TooManyRequestsException, UnauthorizedException, } from "../models/models_0";
import { SchemasServiceException as __BaseException } from "../models/SchemasServiceException";
export const se_CreateDiscovererCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/discoverers");
    let body;
    body = JSON.stringify(take(input, {
        CrossAccount: [],
        Description: [],
        SourceArn: [],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRegistryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/registries/name/{RegistryName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSchemaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Content: [],
        Description: [],
        tags: [, (_) => _json(_), `Tags`],
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteDiscovererCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/discoverers/id/{DiscovererId}");
    b.p("DiscovererId", () => input.DiscovererId, "{DiscovererId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRegistryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/policy");
    const query = map({
        [_rN]: [, input[_RN]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteSchemaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSchemaVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}/version/{SchemaVersion}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    b.p("SchemaVersion", () => input.SchemaVersion, "{SchemaVersion}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeCodeBindingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}/language/{Language}");
    b.p("Language", () => input.Language, "{Language}", false);
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    const query = map({
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeDiscovererCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/discoverers/id/{DiscovererId}");
    b.p("DiscovererId", () => input.DiscovererId, "{DiscovererId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRegistryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeSchemaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    const query = map({
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ExportSchemaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}/export");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    const query = map({
        [_sV]: [, input[_SV]],
        [_t]: [, __expectNonNull(input[_T], `Type`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCodeBindingSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}/language/{Language}/source");
    b.p("Language", () => input.Language, "{Language}", false);
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    const query = map({
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetDiscoveredSchemaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/discover");
    let body;
    body = JSON.stringify(take(input, {
        Events: (_) => _json(_),
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/policy");
    const query = map({
        [_rN]: [, input[_RN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDiscoverersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/discoverers");
    const query = map({
        [_dIP]: [, input[_DIP]],
        [_l]: [() => input.Limit !== void 0, () => input[_L].toString()],
        [_nT]: [, input[_NT]],
        [_sAP]: [, input[_SAP]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRegistriesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries");
    const query = map({
        [_l]: [() => input.Limit !== void 0, () => input[_L].toString()],
        [_nT]: [, input[_NT]],
        [_rNP]: [, input[_RNP]],
        [_s]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSchemasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    const query = map({
        [_l]: [() => input.Limit !== void 0, () => input[_L].toString()],
        [_nT]: [, input[_NT]],
        [_sNP]: [, input[_SNP]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSchemaVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}/versions");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    const query = map({
        [_l]: [() => input.Limit !== void 0, () => input[_L].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutCodeBindingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}/language/{Language}");
    b.p("Language", () => input.Language, "{Language}", false);
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    const query = map({
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/policy");
    const query = map({
        [_rN]: [, input[_RN]],
    });
    let body;
    body = JSON.stringify(take(input, {
        Policy: (_) => __LazyJsonString.fromObject(_),
        RevisionId: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_SearchSchemasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/registries/name/{RegistryName}/schemas/search");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    const query = map({
        [_k]: [, __expectNonNull(input[_K], `Keywords`)],
        [_l]: [() => input.Limit !== void 0, () => input[_L].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartDiscovererCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/discoverers/id/{DiscovererId}/start");
    b.p("DiscovererId", () => input.DiscovererId, "{DiscovererId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopDiscovererCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/discoverers/id/{DiscovererId}/stop");
    b.p("DiscovererId", () => input.DiscovererId, "{DiscovererId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDiscovererCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/discoverers/id/{DiscovererId}");
    b.p("DiscovererId", () => input.DiscovererId, "{DiscovererId}", false);
    let body;
    body = JSON.stringify(take(input, {
        CrossAccount: [],
        Description: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRegistryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/registries/name/{RegistryName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSchemaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/registries/name/{RegistryName}/schemas/name/{SchemaName}");
    b.p("RegistryName", () => input.RegistryName, "{RegistryName}", false);
    b.p("SchemaName", () => input.SchemaName, "{SchemaName}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientTokenId: [true, (_) => _ ?? generateIdempotencyToken()],
        Content: [],
        Description: [],
        Type: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_CreateDiscovererCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CrossAccount: __expectBoolean,
        Description: __expectString,
        DiscovererArn: __expectString,
        DiscovererId: __expectString,
        SourceArn: __expectString,
        State: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRegistryCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        RegistryArn: __expectString,
        RegistryName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSchemaCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        LastModified: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SchemaArn: __expectString,
        SchemaName: __expectString,
        SchemaVersion: __expectString,
        Tags: [, _json, `tags`],
        Type: __expectString,
        VersionCreatedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDiscovererCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRegistryCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSchemaCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSchemaVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeCodeBindingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        LastModified: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SchemaVersion: __expectString,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDiscovererCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CrossAccount: __expectBoolean,
        Description: __expectString,
        DiscovererArn: __expectString,
        DiscovererId: __expectString,
        SourceArn: __expectString,
        State: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRegistryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        RegistryArn: __expectString,
        RegistryName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSchemaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Content: __expectString,
        Description: __expectString,
        LastModified: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SchemaArn: __expectString,
        SchemaName: __expectString,
        SchemaVersion: __expectString,
        Tags: [, _json, `tags`],
        Type: __expectString,
        VersionCreatedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ExportSchemaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Content: __expectString,
        SchemaArn: __expectString,
        SchemaName: __expectString,
        SchemaVersion: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCodeBindingSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = await collectBody(output.body, context);
    contents.Body = data;
    return contents;
};
export const de_GetDiscoveredSchemaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Content: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Policy: (_) => new __LazyJsonString(_),
        RevisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDiscoverersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Discoverers: (_) => de___listOfDiscovererSummary(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRegistriesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Registries: (_) => de___listOfRegistrySummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSchemasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Schemas: (_) => de___listOfSchemaSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSchemaVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        SchemaVersions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutCodeBindingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        LastModified: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SchemaVersion: __expectString,
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Policy: (_) => new __LazyJsonString(_),
        RevisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchSchemasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Schemas: (_) => de___listOfSearchSchemaSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartDiscovererCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DiscovererId: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopDiscovererCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DiscovererId: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDiscovererCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CrossAccount: __expectBoolean,
        Description: __expectString,
        DiscovererArn: __expectString,
        DiscovererId: __expectString,
        SourceArn: __expectString,
        State: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRegistryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        RegistryArn: __expectString,
        RegistryName: __expectString,
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSchemaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Description: __expectString,
        LastModified: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SchemaArn: __expectString,
        SchemaName: __expectString,
        SchemaVersion: __expectString,
        Tags: [, _json, `tags`],
        Type: __expectString,
        VersionCreatedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.schemas#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.schemas#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.schemas#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.schemas#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.schemas#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.schemas#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.schemas#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.schemas#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "GoneException":
        case "com.amazonaws.schemas#GoneException":
            throw await de_GoneExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.schemas#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_GoneExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new GoneException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PreconditionFailedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new PreconditionFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de___listOfDiscovererSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DiscovererSummary(entry, context);
    });
    return retVal;
};
const de___listOfRegistrySummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RegistrySummary(entry, context);
    });
    return retVal;
};
const de___listOfSchemaSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SchemaSummary(entry, context);
    });
    return retVal;
};
const de___listOfSearchSchemaSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SearchSchemaSummary(entry, context);
    });
    return retVal;
};
const de___listOfSearchSchemaVersionSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SearchSchemaVersionSummary(entry, context);
    });
    return retVal;
};
const de_DiscovererSummary = (output, context) => {
    return take(output, {
        CrossAccount: __expectBoolean,
        DiscovererArn: __expectString,
        DiscovererId: __expectString,
        SourceArn: __expectString,
        State: __expectString,
        Tags: [, _json, `tags`],
    });
};
const de_RegistrySummary = (output, context) => {
    return take(output, {
        RegistryArn: __expectString,
        RegistryName: __expectString,
        Tags: [, _json, `tags`],
    });
};
const de_SchemaSummary = (output, context) => {
    return take(output, {
        LastModified: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SchemaArn: __expectString,
        SchemaName: __expectString,
        Tags: [, _json, `tags`],
        VersionCount: __expectLong,
    });
};
const de_SearchSchemaSummary = (output, context) => {
    return take(output, {
        RegistryName: __expectString,
        SchemaArn: __expectString,
        SchemaName: __expectString,
        SchemaVersions: (_) => de___listOfSearchSchemaVersionSummary(_, context),
    });
};
const de_SearchSchemaVersionSummary = (output, context) => {
    return take(output, {
        CreatedDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SchemaVersion: __expectString,
        Type: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _DIP = "DiscovererIdPrefix";
const _K = "Keywords";
const _L = "Limit";
const _NT = "NextToken";
const _RN = "RegistryName";
const _RNP = "RegistryNamePrefix";
const _S = "Scope";
const _SAP = "SourceArnPrefix";
const _SNP = "SchemaNamePrefix";
const _SV = "SchemaVersion";
const _T = "Type";
const _TK = "TagKeys";
const _dIP = "discovererIdPrefix";
const _k = "keywords";
const _l = "limit";
const _nT = "nextToken";
const _rN = "registryName";
const _rNP = "registryNamePrefix";
const _s = "scope";
const _sAP = "sourceArnPrefix";
const _sNP = "schemaNamePrefix";
const _sV = "schemaVersion";
const _t = "type";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
