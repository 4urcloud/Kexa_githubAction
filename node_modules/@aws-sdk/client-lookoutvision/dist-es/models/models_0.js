import { LookoutVisionServiceException as __BaseException } from "./LookoutVisionServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const ResourceType = {
    DATASET: "DATASET",
    MODEL: "MODEL",
    MODEL_PACKAGE_JOB: "MODEL_PACKAGE_JOB",
    PROJECT: "PROJECT",
    TRIAL: "TRIAL",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export const DatasetStatus = {
    CREATE_COMPLETE: "CREATE_COMPLETE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETE_COMPLETE: "DELETE_COMPLETE",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    UPDATE_COMPLETE: "UPDATE_COMPLETE",
    UPDATE_FAILED_ROLLBACK_COMPLETE: "UPDATE_FAILED_ROLLBACK_COMPLETE",
    UPDATE_FAILED_ROLLBACK_IN_PROGRESS: "UPDATE_FAILED_ROLLBACK_IN_PROGRESS",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const ModelStatus = {
    DELETING: "DELETING",
    HOSTED: "HOSTED",
    HOSTING_FAILED: "HOSTING_FAILED",
    STARTING_HOSTING: "STARTING_HOSTING",
    STOPPING_HOSTING: "STOPPING_HOSTING",
    SYSTEM_UPDATING: "SYSTEM_UPDATING",
    TRAINED: "TRAINED",
    TRAINING: "TRAINING",
    TRAINING_FAILED: "TRAINING_FAILED",
};
export const TargetDevice = {
    JETSON_XAVIER: "jetson_xavier",
};
export const TargetPlatformAccelerator = {
    NVIDIA: "NVIDIA",
};
export const TargetPlatformArch = {
    ARM64: "ARM64",
    X86_64: "X86_64",
};
export const TargetPlatformOs = {
    LINUX: "LINUX",
};
export const ModelPackagingJobStatus = {
    CREATED: "CREATED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};
export const ModelHostingStatus = {
    HOSTED: "HOSTED",
    HOSTING_FAILED: "HOSTING_FAILED",
    STARTING_HOSTING: "STARTING_HOSTING",
    STOPPING_HOSTING: "STOPPING_HOSTING",
    SYSTEM_UPDATING: "SYSTEM_UPDATING",
};
export const DetectAnomaliesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
