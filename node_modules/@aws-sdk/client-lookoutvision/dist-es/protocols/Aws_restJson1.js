import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { LookoutVisionServiceException as __BaseException } from "../models/LookoutVisionServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_CreateDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/datasets");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    let body;
    body = JSON.stringify(take(input, {
        DatasetSource: (_) => _json(_),
        DatasetType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/models");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        KmsKeyId: [],
        OutputConfig: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProjectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects");
    let body;
    body = JSON.stringify(take(input, {
        ProjectName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("DatasetType", () => input.DatasetType, "{DatasetType}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/models/{ModelVersion}");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("ModelVersion", () => input.ModelVersion, "{ModelVersion}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteProjectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("DatasetType", () => input.DatasetType, "{DatasetType}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects/{ProjectName}/models/{ModelVersion}");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("ModelVersion", () => input.ModelVersion, "{ModelVersion}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeModelPackagingJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects/{ProjectName}/modelpackagingjobs/{JobName}");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("JobName", () => input.JobName, "{JobName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeProjectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects/{ProjectName}");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DetectAnomaliesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_ct]: input[_CTo] || "application/octet-stream",
    });
    b.bp("/2020-11-20/projects/{ProjectName}/models/{ModelVersion}/detect");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("ModelVersion", () => input.ModelVersion, "{ModelVersion}", false);
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDatasetEntriesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}/entries");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("DatasetType", () => input.DatasetType, "{DatasetType}", false);
    const query = map({
        [_l]: [() => input.Labeled !== void 0, () => input[_L].toString()],
        [_aC]: [, input[_AC]],
        [_cB]: [
            () => input.BeforeCreationDate !== void 0,
            () => (input[_BCD].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_cA]: [
            () => input.AfterCreationDate !== void 0,
            () => (input[_ACD].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_sRC]: [, input[_SRC]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListModelPackagingJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects/{ProjectName}/modelpackagingjobs");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects/{ProjectName}/models");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProjectsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/projects");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_StartModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/models/{ModelVersion}/start");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("ModelVersion", () => input.ModelVersion, "{ModelVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        MaxInferenceUnits: [],
        MinInferenceUnits: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartModelPackagingJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/modelpackagingjobs");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Configuration: (_) => _json(_),
        Description: [],
        JobName: [],
        ModelVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/models/{ModelVersion}/stop");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("ModelVersion", () => input.ModelVersion, "{ModelVersion}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2020-11-20/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-11-20/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDatasetEntriesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/2020-11-20/projects/{ProjectName}/datasets/{DatasetType}/entries");
    b.p("ProjectName", () => input.ProjectName, "{ProjectName}", false);
    b.p("DatasetType", () => input.DatasetType, "{DatasetType}", false);
    let body;
    body = JSON.stringify(take(input, {
        Changes: (_) => context.base64Encoder(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DatasetMetadata: (_) => de_DatasetMetadata(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateModelCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ModelMetadata: (_) => de_ModelMetadata(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProjectMetadata: (_) => de_ProjectMetadata(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteModelCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ModelArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProjectArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DatasetDescription: (_) => de_DatasetDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ModelDescription: (_) => de_ModelDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeModelPackagingJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ModelPackagingDescription: (_) => de_ModelPackagingDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProjectDescription: (_) => de_ProjectDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DetectAnomaliesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DetectAnomalyResult: (_) => de_DetectAnomalyResult(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DatasetEntries: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListModelPackagingJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ModelPackagingJobs: (_) => de_ModelPackagingJobsList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Models: (_) => de_ModelMetadataList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Projects: (_) => de_ProjectMetadataList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartModelCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartModelPackagingJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopModelCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lookoutvision#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.lookoutvision#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.lookoutvision#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lookoutvision#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.lookoutvision#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.lookoutvision#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.lookoutvision#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Anomaly = (output, context) => {
    return take(output, {
        Name: __expectString,
        PixelAnomaly: (_) => de_PixelAnomaly(_, context),
    });
};
const de_AnomalyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Anomaly(entry, context);
    });
    return retVal;
};
const de_DatasetDescription = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetType: __expectString,
        ImageStats: _json,
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProjectName: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_DatasetMetadata = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetType: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_DatasetMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetMetadata(entry, context);
    });
    return retVal;
};
const de_DetectAnomalyResult = (output, context) => {
    return take(output, {
        Anomalies: (_) => de_AnomalyList(_, context),
        AnomalyMask: context.base64Decoder,
        Confidence: __limitedParseFloat32,
        IsAnomalous: __expectBoolean,
        Source: _json,
    });
};
const de_ModelDescription = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EvaluationEndTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationManifest: _json,
        EvaluationResult: _json,
        KmsKeyId: __expectString,
        MaxInferenceUnits: __expectInt32,
        MinInferenceUnits: __expectInt32,
        ModelArn: __expectString,
        ModelVersion: __expectString,
        OutputConfig: _json,
        Performance: (_) => de_ModelPerformance(_, context),
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_ModelMetadata = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        ModelArn: __expectString,
        ModelVersion: __expectString,
        Performance: (_) => de_ModelPerformance(_, context),
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_ModelMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelMetadata(entry, context);
    });
    return retVal;
};
const de_ModelPackagingDescription = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobName: __expectString,
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelPackagingConfiguration: _json,
        ModelPackagingJobDescription: __expectString,
        ModelPackagingMethod: __expectString,
        ModelPackagingOutputDetails: _json,
        ModelVersion: __expectString,
        ProjectName: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_ModelPackagingJobMetadata = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        JobName: __expectString,
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelPackagingJobDescription: __expectString,
        ModelPackagingMethod: __expectString,
        ModelVersion: __expectString,
        ProjectName: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_ModelPackagingJobsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackagingJobMetadata(entry, context);
    });
    return retVal;
};
const de_ModelPerformance = (output, context) => {
    return take(output, {
        F1Score: __limitedParseFloat32,
        Precision: __limitedParseFloat32,
        Recall: __limitedParseFloat32,
    });
};
const de_PixelAnomaly = (output, context) => {
    return take(output, {
        Color: __expectString,
        TotalPercentageArea: __limitedParseFloat32,
    });
};
const de_ProjectDescription = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Datasets: (_) => de_DatasetMetadataList(_, context),
        ProjectArn: __expectString,
        ProjectName: __expectString,
    });
};
const de_ProjectMetadata = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProjectArn: __expectString,
        ProjectName: __expectString,
    });
};
const de_ProjectMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectMetadata(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _AC = "AnomalyClass";
const _ACD = "AfterCreationDate";
const _BCD = "BeforeCreationDate";
const _CT = "ClientToken";
const _CTo = "ContentType";
const _L = "Labeled";
const _MR = "MaxResults";
const _NT = "NextToken";
const _RAS = "RetryAfterSeconds";
const _SRC = "SourceRefContains";
const _TK = "TagKeys";
const _aC = "anomalyClass";
const _cA = "createdAfter";
const _cB = "createdBefore";
const _ct = "content-type";
const _l = "labeled";
const _mR = "maxResults";
const _nT = "nextToken";
const _ra = "retry-after";
const _sRC = "sourceRefContains";
const _tK = "tagKeys";
const _xact = "x-amzn-client-token";
