import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { OpsWorksCMClientResolvedConfig } from "../OpsWorksCMClient";
export interface OpsWorksCMHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface OpsWorksCMHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    OpsWorksCMClientResolvedConfig,
    HandlerExecutionContext,
    OpsWorksCMHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultOpsWorksCMHttpAuthSchemeParametersProvider: (
  config: OpsWorksCMClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<OpsWorksCMHttpAuthSchemeParameters>;
export interface OpsWorksCMHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<OpsWorksCMHttpAuthSchemeParameters> {}
export declare const defaultOpsWorksCMHttpAuthSchemeProvider: OpsWorksCMHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: OpsWorksCMHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: OpsWorksCMHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
