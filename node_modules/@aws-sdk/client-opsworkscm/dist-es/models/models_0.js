import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { OpsWorksCMServiceException as __BaseException } from "./OpsWorksCMServiceException";
export class InvalidStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const BackupType = {
    AUTOMATED: "AUTOMATED",
    MANUAL: "MANUAL",
};
export const BackupStatus = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    OK: "OK",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const MaintenanceStatus = {
    FAILED: "FAILED",
    SUCCESS: "SUCCESS",
};
export const ServerStatus = {
    BACKING_UP: "BACKING_UP",
    CONNECTION_LOST: "CONNECTION_LOST",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    HEALTHY: "HEALTHY",
    MODIFYING: "MODIFYING",
    RESTORING: "RESTORING",
    RUNNING: "RUNNING",
    SETUP: "SETUP",
    TERMINATED: "TERMINATED",
    UNDER_MAINTENANCE: "UNDER_MAINTENANCE",
    UNHEALTHY: "UNHEALTHY",
};
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export const NodeAssociationStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const EngineAttributeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: SENSITIVE_STRING }),
});
export const AssociateNodeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EngineAttributes && {
        EngineAttributes: obj.EngineAttributes.map((item) => EngineAttributeFilterSensitiveLog(item)),
    }),
});
export const CreateServerRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CustomPrivateKey && { CustomPrivateKey: SENSITIVE_STRING }),
    ...(obj.EngineAttributes && {
        EngineAttributes: obj.EngineAttributes.map((item) => EngineAttributeFilterSensitiveLog(item)),
    }),
});
export const ServerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EngineAttributes && {
        EngineAttributes: obj.EngineAttributes.map((item) => EngineAttributeFilterSensitiveLog(item)),
    }),
});
export const CreateServerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Server && { Server: ServerFilterSensitiveLog(obj.Server) }),
});
export const DescribeNodeAssociationStatusResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EngineAttributes && {
        EngineAttributes: obj.EngineAttributes.map((item) => EngineAttributeFilterSensitiveLog(item)),
    }),
});
export const DescribeServersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DisassociateNodeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EngineAttributes && {
        EngineAttributes: obj.EngineAttributes.map((item) => EngineAttributeFilterSensitiveLog(item)),
    }),
});
export const ExportServerEngineAttributeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InputAttributes && {
        InputAttributes: obj.InputAttributes.map((item) => EngineAttributeFilterSensitiveLog(item)),
    }),
});
export const ExportServerEngineAttributeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EngineAttribute && { EngineAttribute: EngineAttributeFilterSensitiveLog(obj.EngineAttribute) }),
});
export const RestoreServerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Server && { Server: ServerFilterSensitiveLog(obj.Server) }),
});
export const StartMaintenanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EngineAttributes && {
        EngineAttributes: obj.EngineAttributes.map((item) => EngineAttributeFilterSensitiveLog(item)),
    }),
});
export const StartMaintenanceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Server && { Server: ServerFilterSensitiveLog(obj.Server) }),
});
export const UpdateServerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Server && { Server: ServerFilterSensitiveLog(obj.Server) }),
});
export const UpdateServerEngineAttributesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Server && { Server: ServerFilterSensitiveLog(obj.Server) }),
});
