"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  $Command: () => import_smithy_client.Command,
  BadRequestException: () => BadRequestException,
  CapacityExceededException: () => CapacityExceededException,
  InvalidSessionException: () => InvalidSessionException,
  LimitExceededException: () => LimitExceededException,
  OccConflictException: () => OccConflictException,
  QLDBSession: () => QLDBSession,
  QLDBSessionClient: () => QLDBSessionClient,
  QLDBSessionServiceException: () => QLDBSessionServiceException,
  RateExceededException: () => RateExceededException,
  SendCommandCommand: () => SendCommandCommand,
  __Client: () => import_smithy_client.Client,
  __MetadataBearer: () => import_types.MetadataBearer
});
module.exports = __toCommonJS(src_exports);

// src/QLDBSessionClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "qldb"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/QLDBSessionClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/QLDBSessionClient.ts
var _QLDBSessionClient = class _QLDBSessionClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultQLDBSessionHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_QLDBSessionClient, "QLDBSessionClient");
var QLDBSessionClient = _QLDBSessionClient;

// src/QLDBSession.ts


// src/commands/SendCommandCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_json1_0.ts



// src/models/QLDBSessionServiceException.ts

var _QLDBSessionServiceException = class _QLDBSessionServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _QLDBSessionServiceException.prototype);
  }
};
__name(_QLDBSessionServiceException, "QLDBSessionServiceException");
var QLDBSessionServiceException = _QLDBSessionServiceException;

// src/models/models_0.ts
var _BadRequestException = class _BadRequestException extends QLDBSessionServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
    this.Code = opts.Code;
  }
};
__name(_BadRequestException, "BadRequestException");
var BadRequestException = _BadRequestException;
var _CapacityExceededException = class _CapacityExceededException extends QLDBSessionServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CapacityExceededException",
      $fault: "server",
      ...opts
    });
    this.name = "CapacityExceededException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _CapacityExceededException.prototype);
    this.Message = opts.Message;
  }
};
__name(_CapacityExceededException, "CapacityExceededException");
var CapacityExceededException = _CapacityExceededException;
var _InvalidSessionException = class _InvalidSessionException extends QLDBSessionServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSessionException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidSessionException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidSessionException.prototype);
    this.Message = opts.Message;
    this.Code = opts.Code;
  }
};
__name(_InvalidSessionException, "InvalidSessionException");
var InvalidSessionException = _InvalidSessionException;
var _LimitExceededException = class _LimitExceededException extends QLDBSessionServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
    this.Message = opts.Message;
  }
};
__name(_LimitExceededException, "LimitExceededException");
var LimitExceededException = _LimitExceededException;
var _OccConflictException = class _OccConflictException extends QLDBSessionServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "OccConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "OccConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _OccConflictException.prototype);
    this.Message = opts.Message;
  }
};
__name(_OccConflictException, "OccConflictException");
var OccConflictException = _OccConflictException;
var _RateExceededException = class _RateExceededException extends QLDBSessionServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RateExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "RateExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RateExceededException.prototype);
    this.Message = opts.Message;
  }
};
__name(_RateExceededException, "RateExceededException");
var RateExceededException = _RateExceededException;

// src/protocols/Aws_json1_0.ts
var se_SendCommandCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("SendCommand");
  let body;
  body = JSON.stringify(se_SendCommandRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SendCommandCommand");
var de_SendCommandCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseBody(output.body, context);
  let contents = {};
  contents = de_SendCommandResult(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SendCommandCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.qldbsession#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "CapacityExceededException":
    case "com.amazonaws.qldbsession#CapacityExceededException":
      throw await de_CapacityExceededExceptionRes(parsedOutput, context);
    case "InvalidSessionException":
    case "com.amazonaws.qldbsession#InvalidSessionException":
      throw await de_InvalidSessionExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.qldbsession#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "OccConflictException":
    case "com.amazonaws.qldbsession#OccConflictException":
      throw await de_OccConflictExceptionRes(parsedOutput, context);
    case "RateExceededException":
    case "com.amazonaws.qldbsession#RateExceededException":
      throw await de_RateExceededExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_BadRequestExceptionRes");
var de_CapacityExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new CapacityExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CapacityExceededExceptionRes");
var de_InvalidSessionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidSessionException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidSessionExceptionRes");
var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LimitExceededExceptionRes");
var de_OccConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new OccConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_OccConflictExceptionRes");
var de_RateExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new RateExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RateExceededExceptionRes");
var se_CommitTransactionRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    CommitDigest: context.base64Encoder,
    TransactionId: []
  });
}, "se_CommitTransactionRequest");
var se_ExecuteStatementRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Parameters: (_) => se_StatementParameters(_, context),
    Statement: [],
    TransactionId: []
  });
}, "se_ExecuteStatementRequest");
var se_SendCommandRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    AbortTransaction: import_smithy_client._json,
    CommitTransaction: (_) => se_CommitTransactionRequest(_, context),
    EndSession: import_smithy_client._json,
    ExecuteStatement: (_) => se_ExecuteStatementRequest(_, context),
    FetchPage: import_smithy_client._json,
    SessionToken: [],
    StartSession: import_smithy_client._json,
    StartTransaction: import_smithy_client._json
  });
}, "se_SendCommandRequest");
var se_StatementParameters = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ValueHolder(entry, context);
  });
}, "se_StatementParameters");
var se_ValueHolder = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    IonBinary: context.base64Encoder,
    IonText: []
  });
}, "se_ValueHolder");
var de_CommitTransactionResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CommitDigest: context.base64Decoder,
    ConsumedIOs: import_smithy_client._json,
    TimingInformation: import_smithy_client._json,
    TransactionId: import_smithy_client.expectString
  });
}, "de_CommitTransactionResult");
var de_ExecuteStatementResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConsumedIOs: import_smithy_client._json,
    FirstPage: (_) => de_Page(_, context),
    TimingInformation: import_smithy_client._json
  });
}, "de_ExecuteStatementResult");
var de_FetchPageResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConsumedIOs: import_smithy_client._json,
    Page: (_) => de_Page(_, context),
    TimingInformation: import_smithy_client._json
  });
}, "de_FetchPageResult");
var de_Page = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NextPageToken: import_smithy_client.expectString,
    Values: (_) => de_ValueHolders(_, context)
  });
}, "de_Page");
var de_SendCommandResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AbortTransaction: import_smithy_client._json,
    CommitTransaction: (_) => de_CommitTransactionResult(_, context),
    EndSession: import_smithy_client._json,
    ExecuteStatement: (_) => de_ExecuteStatementResult(_, context),
    FetchPage: (_) => de_FetchPageResult(_, context),
    StartSession: import_smithy_client._json,
    StartTransaction: import_smithy_client._json
  });
}, "de_SendCommandResult");
var de_ValueHolder = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    IonBinary: context.base64Decoder,
    IonText: import_smithy_client.expectString
  });
}, "de_ValueHolder");
var de_ValueHolders = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ValueHolder(entry, context);
  });
  return retVal;
}, "de_ValueHolders");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var throwDefaultError = (0, import_smithy_client.withBaseException)(QLDBSessionServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.0",
    "x-amz-target": `QLDBSession.${operation}`
  };
}
__name(sharedHeaders, "sharedHeaders");
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/SendCommandCommand.ts
var _SendCommandCommand = class _SendCommandCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("QLDBSession", "SendCommand", {}).n("QLDBSessionClient", "SendCommandCommand").f(void 0, void 0).ser(se_SendCommandCommand).de(de_SendCommandCommand).build() {
};
__name(_SendCommandCommand, "SendCommandCommand");
var SendCommandCommand = _SendCommandCommand;

// src/QLDBSession.ts
var commands = {
  SendCommandCommand
};
var _QLDBSession = class _QLDBSession extends QLDBSessionClient {
};
__name(_QLDBSession, "QLDBSession");
var QLDBSession = _QLDBSession;
(0, import_smithy_client.createAggregatedClient)(commands, QLDBSession);

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  QLDBSessionServiceException,
  __Client,
  QLDBSessionClient,
  QLDBSession,
  $Command,
  SendCommandCommand,
  BadRequestException,
  CapacityExceededException,
  InvalidSessionException,
  LimitExceededException,
  OccConflictException,
  RateExceededException
});

