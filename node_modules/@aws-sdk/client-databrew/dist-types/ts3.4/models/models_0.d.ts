import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DataBrewServiceException as __BaseException } from "./DataBrewServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AllowedStatistics {
  Statistics: string[] | undefined;
}
export declare const AnalyticsMode: {
  readonly DISABLE: "DISABLE";
  readonly ENABLE: "ENABLE";
};
export type AnalyticsMode = (typeof AnalyticsMode)[keyof typeof AnalyticsMode];
export interface BatchDeleteRecipeVersionRequest {
  Name: string | undefined;
  RecipeVersions: string[] | undefined;
}
export interface RecipeVersionErrorDetail {
  ErrorCode?: string;
  ErrorMessage?: string;
  RecipeVersion?: string;
}
export interface BatchDeleteRecipeVersionResponse {
  Name: string | undefined;
  Errors?: RecipeVersionErrorDetail[];
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const InputFormat: {
  readonly CSV: "CSV";
  readonly EXCEL: "EXCEL";
  readonly JSON: "JSON";
  readonly ORC: "ORC";
  readonly PARQUET: "PARQUET";
};
export type InputFormat = (typeof InputFormat)[keyof typeof InputFormat];
export interface CsvOptions {
  Delimiter?: string;
  HeaderRow?: boolean;
}
export interface ExcelOptions {
  SheetNames?: string[];
  SheetIndexes?: number[];
  HeaderRow?: boolean;
}
export interface JsonOptions {
  MultiLine?: boolean;
}
export interface FormatOptions {
  Json?: JsonOptions;
  Excel?: ExcelOptions;
  Csv?: CsvOptions;
}
export interface S3Location {
  Bucket: string | undefined;
  Key?: string;
  BucketOwner?: string;
}
export interface DatabaseInputDefinition {
  GlueConnectionName: string | undefined;
  DatabaseTableName?: string;
  TempDirectory?: S3Location;
  QueryString?: string;
}
export interface DataCatalogInputDefinition {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  TempDirectory?: S3Location;
}
export interface Metadata {
  SourceArn?: string;
}
export interface Input {
  S3InputDefinition?: S3Location;
  DataCatalogInputDefinition?: DataCatalogInputDefinition;
  DatabaseInputDefinition?: DatabaseInputDefinition;
  Metadata?: Metadata;
}
export declare const Order: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type Order = (typeof Order)[keyof typeof Order];
export declare const OrderedBy: {
  readonly LAST_MODIFIED_DATE: "LAST_MODIFIED_DATE";
};
export type OrderedBy = (typeof OrderedBy)[keyof typeof OrderedBy];
export interface FilesLimit {
  MaxFiles: number | undefined;
  OrderedBy?: OrderedBy;
  Order?: Order;
}
export interface FilterExpression {
  Expression: string | undefined;
  ValuesMap: Record<string, string> | undefined;
}
export interface DatetimeOptions {
  Format: string | undefined;
  TimezoneOffset?: string;
  LocaleCode?: string;
}
export declare const ParameterType: {
  readonly Datetime: "Datetime";
  readonly Number: "Number";
  readonly String: "String";
};
export type ParameterType = (typeof ParameterType)[keyof typeof ParameterType];
export interface DatasetParameter {
  Name: string | undefined;
  Type: ParameterType | undefined;
  DatetimeOptions?: DatetimeOptions;
  CreateColumn?: boolean;
  Filter?: FilterExpression;
}
export interface PathOptions {
  LastModifiedDateCondition?: FilterExpression;
  FilesLimit?: FilesLimit;
  Parameters?: Record<string, DatasetParameter>;
}
export interface CreateDatasetRequest {
  Name: string | undefined;
  Format?: InputFormat;
  FormatOptions?: FormatOptions;
  Input: Input | undefined;
  PathOptions?: PathOptions;
  Tags?: Record<string, string>;
}
export interface CreateDatasetResponse {
  Name: string | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface ColumnSelector {
  Regex?: string;
  Name?: string;
}
export interface StatisticOverride {
  Statistic: string | undefined;
  Parameters: Record<string, string> | undefined;
}
export interface StatisticsConfiguration {
  IncludedStatistics?: string[];
  Overrides?: StatisticOverride[];
}
export interface ColumnStatisticsConfiguration {
  Selectors?: ColumnSelector[];
  Statistics: StatisticsConfiguration | undefined;
}
export interface EntityDetectorConfiguration {
  EntityTypes: string[] | undefined;
  AllowedStatistics?: AllowedStatistics[];
}
export interface ProfileConfiguration {
  DatasetStatisticsConfiguration?: StatisticsConfiguration;
  ProfileColumns?: ColumnSelector[];
  ColumnStatisticsConfigurations?: ColumnStatisticsConfiguration[];
  EntityDetectorConfiguration?: EntityDetectorConfiguration;
}
export declare const EncryptionMode: {
  readonly SSEKMS: "SSE-KMS";
  readonly SSES3: "SSE-S3";
};
export type EncryptionMode =
  (typeof EncryptionMode)[keyof typeof EncryptionMode];
export declare const SampleMode: {
  readonly CUSTOM_ROWS: "CUSTOM_ROWS";
  readonly FULL_DATASET: "FULL_DATASET";
};
export type SampleMode = (typeof SampleMode)[keyof typeof SampleMode];
export interface JobSample {
  Mode?: SampleMode;
  Size?: number;
}
export declare const LogSubscription: {
  readonly DISABLE: "DISABLE";
  readonly ENABLE: "ENABLE";
};
export type LogSubscription =
  (typeof LogSubscription)[keyof typeof LogSubscription];
export declare const ValidationMode: {
  readonly CHECK_ALL: "CHECK_ALL";
};
export type ValidationMode =
  (typeof ValidationMode)[keyof typeof ValidationMode];
export interface ValidationConfiguration {
  RulesetArn: string | undefined;
  ValidationMode?: ValidationMode;
}
export interface CreateProfileJobRequest {
  DatasetName: string | undefined;
  EncryptionKeyArn?: string;
  EncryptionMode?: EncryptionMode;
  Name: string | undefined;
  LogSubscription?: LogSubscription;
  MaxCapacity?: number;
  MaxRetries?: number;
  OutputLocation: S3Location | undefined;
  Configuration?: ProfileConfiguration;
  ValidationConfigurations?: ValidationConfiguration[];
  RoleArn: string | undefined;
  Tags?: Record<string, string>;
  Timeout?: number;
  JobSample?: JobSample;
}
export interface CreateProfileJobResponse {
  Name: string | undefined;
}
export declare const SampleType: {
  readonly FIRST_N: "FIRST_N";
  readonly LAST_N: "LAST_N";
  readonly RANDOM: "RANDOM";
};
export type SampleType = (typeof SampleType)[keyof typeof SampleType];
export interface Sample {
  Size?: number;
  Type: SampleType | undefined;
}
export interface CreateProjectRequest {
  DatasetName: string | undefined;
  Name: string | undefined;
  RecipeName: string | undefined;
  Sample?: Sample;
  RoleArn: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateProjectResponse {
  Name: string | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export interface RecipeAction {
  Operation: string | undefined;
  Parameters?: Record<string, string>;
}
export interface ConditionExpression {
  Condition: string | undefined;
  Value?: string;
  TargetColumn: string | undefined;
}
export interface RecipeStep {
  Action: RecipeAction | undefined;
  ConditionExpressions?: ConditionExpression[];
}
export interface CreateRecipeRequest {
  Description?: string;
  Name: string | undefined;
  Steps: RecipeStep[] | undefined;
  Tags?: Record<string, string>;
}
export interface CreateRecipeResponse {
  Name: string | undefined;
}
export interface DatabaseTableOutputOptions {
  TempDirectory?: S3Location;
  TableName: string | undefined;
}
export declare const DatabaseOutputMode: {
  readonly NEW_TABLE: "NEW_TABLE";
};
export type DatabaseOutputMode =
  (typeof DatabaseOutputMode)[keyof typeof DatabaseOutputMode];
export interface DatabaseOutput {
  GlueConnectionName: string | undefined;
  DatabaseOptions: DatabaseTableOutputOptions | undefined;
  DatabaseOutputMode?: DatabaseOutputMode;
}
export interface S3TableOutputOptions {
  Location: S3Location | undefined;
}
export interface DataCatalogOutput {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  S3Options?: S3TableOutputOptions;
  DatabaseOptions?: DatabaseTableOutputOptions;
  Overwrite?: boolean;
}
export declare const CompressionFormat: {
  readonly BROTLI: "BROTLI";
  readonly BZIP2: "BZIP2";
  readonly DEFLATE: "DEFLATE";
  readonly GZIP: "GZIP";
  readonly LZ4: "LZ4";
  readonly LZO: "LZO";
  readonly SNAPPY: "SNAPPY";
  readonly ZLIB: "ZLIB";
  readonly ZSTD: "ZSTD";
};
export type CompressionFormat =
  (typeof CompressionFormat)[keyof typeof CompressionFormat];
export declare const OutputFormat: {
  readonly AVRO: "AVRO";
  readonly CSV: "CSV";
  readonly GLUEPARQUET: "GLUEPARQUET";
  readonly JSON: "JSON";
  readonly ORC: "ORC";
  readonly PARQUET: "PARQUET";
  readonly TABLEAUHYPER: "TABLEAUHYPER";
  readonly XML: "XML";
};
export type OutputFormat = (typeof OutputFormat)[keyof typeof OutputFormat];
export interface CsvOutputOptions {
  Delimiter?: string;
}
export interface OutputFormatOptions {
  Csv?: CsvOutputOptions;
}
export interface Output {
  CompressionFormat?: CompressionFormat;
  Format?: OutputFormat;
  PartitionColumns?: string[];
  Location: S3Location | undefined;
  Overwrite?: boolean;
  FormatOptions?: OutputFormatOptions;
  MaxOutputFiles?: number;
}
export interface RecipeReference {
  Name: string | undefined;
  RecipeVersion?: string;
}
export interface CreateRecipeJobRequest {
  DatasetName?: string;
  EncryptionKeyArn?: string;
  EncryptionMode?: EncryptionMode;
  Name: string | undefined;
  LogSubscription?: LogSubscription;
  MaxCapacity?: number;
  MaxRetries?: number;
  Outputs?: Output[];
  DataCatalogOutputs?: DataCatalogOutput[];
  DatabaseOutputs?: DatabaseOutput[];
  ProjectName?: string;
  RecipeReference?: RecipeReference;
  RoleArn: string | undefined;
  Tags?: Record<string, string>;
  Timeout?: number;
}
export interface CreateRecipeJobResponse {
  Name: string | undefined;
}
export declare const ThresholdType: {
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL: "GREATER_THAN_OR_EQUAL";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL: "LESS_THAN_OR_EQUAL";
};
export type ThresholdType = (typeof ThresholdType)[keyof typeof ThresholdType];
export declare const ThresholdUnit: {
  readonly COUNT: "COUNT";
  readonly PERCENTAGE: "PERCENTAGE";
};
export type ThresholdUnit = (typeof ThresholdUnit)[keyof typeof ThresholdUnit];
export interface Threshold {
  Value: number | undefined;
  Type?: ThresholdType;
  Unit?: ThresholdUnit;
}
export interface Rule {
  Name: string | undefined;
  Disabled?: boolean;
  CheckExpression: string | undefined;
  SubstitutionMap?: Record<string, string>;
  Threshold?: Threshold;
  ColumnSelectors?: ColumnSelector[];
}
export interface CreateRulesetRequest {
  Name: string | undefined;
  Description?: string;
  TargetArn: string | undefined;
  Rules: Rule[] | undefined;
  Tags?: Record<string, string>;
}
export interface CreateRulesetResponse {
  Name: string | undefined;
}
export interface CreateScheduleRequest {
  JobNames?: string[];
  CronExpression: string | undefined;
  Tags?: Record<string, string>;
  Name: string | undefined;
}
export interface CreateScheduleResponse {
  Name: string | undefined;
}
export interface DeleteDatasetRequest {
  Name: string | undefined;
}
export interface DeleteDatasetResponse {
  Name: string | undefined;
}
export interface DeleteJobRequest {
  Name: string | undefined;
}
export interface DeleteJobResponse {
  Name: string | undefined;
}
export interface DeleteProjectRequest {
  Name: string | undefined;
}
export interface DeleteProjectResponse {
  Name: string | undefined;
}
export interface DeleteRecipeVersionRequest {
  Name: string | undefined;
  RecipeVersion: string | undefined;
}
export interface DeleteRecipeVersionResponse {
  Name: string | undefined;
  RecipeVersion: string | undefined;
}
export interface DeleteRulesetRequest {
  Name: string | undefined;
}
export interface DeleteRulesetResponse {
  Name: string | undefined;
}
export interface DeleteScheduleRequest {
  Name: string | undefined;
}
export interface DeleteScheduleResponse {
  Name: string | undefined;
}
export interface DescribeDatasetRequest {
  Name: string | undefined;
}
export declare const Source: {
  readonly DATABASE: "DATABASE";
  readonly DATACATALOG: "DATA-CATALOG";
  readonly S3: "S3";
};
export type Source = (typeof Source)[keyof typeof Source];
export interface DescribeDatasetResponse {
  CreatedBy?: string;
  CreateDate?: Date;
  Name: string | undefined;
  Format?: InputFormat;
  FormatOptions?: FormatOptions;
  Input: Input | undefined;
  LastModifiedDate?: Date;
  LastModifiedBy?: string;
  Source?: Source;
  PathOptions?: PathOptions;
  Tags?: Record<string, string>;
  ResourceArn?: string;
}
export interface DescribeJobRequest {
  Name: string | undefined;
}
export declare const JobType: {
  readonly PROFILE: "PROFILE";
  readonly RECIPE: "RECIPE";
};
export type JobType = (typeof JobType)[keyof typeof JobType];
export interface DescribeJobResponse {
  CreateDate?: Date;
  CreatedBy?: string;
  DatasetName?: string;
  EncryptionKeyArn?: string;
  EncryptionMode?: EncryptionMode;
  Name: string | undefined;
  Type?: JobType;
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  LogSubscription?: LogSubscription;
  MaxCapacity?: number;
  MaxRetries?: number;
  Outputs?: Output[];
  DataCatalogOutputs?: DataCatalogOutput[];
  DatabaseOutputs?: DatabaseOutput[];
  ProjectName?: string;
  ProfileConfiguration?: ProfileConfiguration;
  ValidationConfigurations?: ValidationConfiguration[];
  RecipeReference?: RecipeReference;
  ResourceArn?: string;
  RoleArn?: string;
  Tags?: Record<string, string>;
  Timeout?: number;
  JobSample?: JobSample;
}
export interface DescribeJobRunRequest {
  Name: string | undefined;
  RunId: string | undefined;
}
export declare const JobRunState: {
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly SUCCEEDED: "SUCCEEDED";
  readonly TIMEOUT: "TIMEOUT";
};
export type JobRunState = (typeof JobRunState)[keyof typeof JobRunState];
export interface DescribeJobRunResponse {
  Attempt?: number;
  CompletedOn?: Date;
  DatasetName?: string;
  ErrorMessage?: string;
  ExecutionTime?: number;
  JobName: string | undefined;
  ProfileConfiguration?: ProfileConfiguration;
  ValidationConfigurations?: ValidationConfiguration[];
  RunId?: string;
  State?: JobRunState;
  LogSubscription?: LogSubscription;
  LogGroupName?: string;
  Outputs?: Output[];
  DataCatalogOutputs?: DataCatalogOutput[];
  DatabaseOutputs?: DatabaseOutput[];
  RecipeReference?: RecipeReference;
  StartedBy?: string;
  StartedOn?: Date;
  JobSample?: JobSample;
}
export interface DescribeProjectRequest {
  Name: string | undefined;
}
export declare const SessionStatus: {
  readonly ASSIGNED: "ASSIGNED";
  readonly FAILED: "FAILED";
  readonly INITIALIZING: "INITIALIZING";
  readonly PROVISIONING: "PROVISIONING";
  readonly READY: "READY";
  readonly RECYCLING: "RECYCLING";
  readonly ROTATING: "ROTATING";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
  readonly UPDATING: "UPDATING";
};
export type SessionStatus = (typeof SessionStatus)[keyof typeof SessionStatus];
export interface DescribeProjectResponse {
  CreateDate?: Date;
  CreatedBy?: string;
  DatasetName?: string;
  LastModifiedDate?: Date;
  LastModifiedBy?: string;
  Name: string | undefined;
  RecipeName?: string;
  ResourceArn?: string;
  Sample?: Sample;
  RoleArn?: string;
  Tags?: Record<string, string>;
  SessionStatus?: SessionStatus;
  OpenedBy?: string;
  OpenDate?: Date;
}
export interface DescribeRecipeRequest {
  Name: string | undefined;
  RecipeVersion?: string;
}
export interface DescribeRecipeResponse {
  CreatedBy?: string;
  CreateDate?: Date;
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  ProjectName?: string;
  PublishedBy?: string;
  PublishedDate?: Date;
  Description?: string;
  Name: string | undefined;
  Steps?: RecipeStep[];
  Tags?: Record<string, string>;
  ResourceArn?: string;
  RecipeVersion?: string;
}
export interface DescribeRulesetRequest {
  Name: string | undefined;
}
export interface DescribeRulesetResponse {
  Name: string | undefined;
  Description?: string;
  TargetArn?: string;
  Rules?: Rule[];
  CreateDate?: Date;
  CreatedBy?: string;
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  ResourceArn?: string;
  Tags?: Record<string, string>;
}
export interface DescribeScheduleRequest {
  Name: string | undefined;
}
export interface DescribeScheduleResponse {
  CreateDate?: Date;
  CreatedBy?: string;
  JobNames?: string[];
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  ResourceArn?: string;
  CronExpression?: string;
  Tags?: Record<string, string>;
  Name: string | undefined;
}
export interface ListDatasetsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface Dataset {
  AccountId?: string;
  CreatedBy?: string;
  CreateDate?: Date;
  Name: string | undefined;
  Format?: InputFormat;
  FormatOptions?: FormatOptions;
  Input: Input | undefined;
  LastModifiedDate?: Date;
  LastModifiedBy?: string;
  Source?: Source;
  PathOptions?: PathOptions;
  Tags?: Record<string, string>;
  ResourceArn?: string;
}
export interface ListDatasetsResponse {
  Datasets: Dataset[] | undefined;
  NextToken?: string;
}
export interface ListJobRunsRequest {
  Name: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface JobRun {
  Attempt?: number;
  CompletedOn?: Date;
  DatasetName?: string;
  ErrorMessage?: string;
  ExecutionTime?: number;
  JobName?: string;
  RunId?: string;
  State?: JobRunState;
  LogSubscription?: LogSubscription;
  LogGroupName?: string;
  Outputs?: Output[];
  DataCatalogOutputs?: DataCatalogOutput[];
  DatabaseOutputs?: DatabaseOutput[];
  RecipeReference?: RecipeReference;
  StartedBy?: string;
  StartedOn?: Date;
  JobSample?: JobSample;
  ValidationConfigurations?: ValidationConfiguration[];
}
export interface ListJobRunsResponse {
  JobRuns: JobRun[] | undefined;
  NextToken?: string;
}
export interface ListJobsRequest {
  DatasetName?: string;
  MaxResults?: number;
  NextToken?: string;
  ProjectName?: string;
}
export interface Job {
  AccountId?: string;
  CreatedBy?: string;
  CreateDate?: Date;
  DatasetName?: string;
  EncryptionKeyArn?: string;
  EncryptionMode?: EncryptionMode;
  Name: string | undefined;
  Type?: JobType;
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  LogSubscription?: LogSubscription;
  MaxCapacity?: number;
  MaxRetries?: number;
  Outputs?: Output[];
  DataCatalogOutputs?: DataCatalogOutput[];
  DatabaseOutputs?: DatabaseOutput[];
  ProjectName?: string;
  RecipeReference?: RecipeReference;
  ResourceArn?: string;
  RoleArn?: string;
  Timeout?: number;
  Tags?: Record<string, string>;
  JobSample?: JobSample;
  ValidationConfigurations?: ValidationConfiguration[];
}
export interface ListJobsResponse {
  Jobs: Job[] | undefined;
  NextToken?: string;
}
export interface ListProjectsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface Project {
  AccountId?: string;
  CreateDate?: Date;
  CreatedBy?: string;
  DatasetName?: string;
  LastModifiedDate?: Date;
  LastModifiedBy?: string;
  Name: string | undefined;
  RecipeName: string | undefined;
  ResourceArn?: string;
  Sample?: Sample;
  Tags?: Record<string, string>;
  RoleArn?: string;
  OpenedBy?: string;
  OpenDate?: Date;
}
export interface ListProjectsResponse {
  Projects: Project[] | undefined;
  NextToken?: string;
}
export interface ListRecipesRequest {
  MaxResults?: number;
  NextToken?: string;
  RecipeVersion?: string;
}
export interface Recipe {
  CreatedBy?: string;
  CreateDate?: Date;
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  ProjectName?: string;
  PublishedBy?: string;
  PublishedDate?: Date;
  Description?: string;
  Name: string | undefined;
  ResourceArn?: string;
  Steps?: RecipeStep[];
  Tags?: Record<string, string>;
  RecipeVersion?: string;
}
export interface ListRecipesResponse {
  Recipes: Recipe[] | undefined;
  NextToken?: string;
}
export interface ListRecipeVersionsRequest {
  MaxResults?: number;
  NextToken?: string;
  Name: string | undefined;
}
export interface ListRecipeVersionsResponse {
  NextToken?: string;
  Recipes: Recipe[] | undefined;
}
export interface ListRulesetsRequest {
  TargetArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface RulesetItem {
  AccountId?: string;
  CreatedBy?: string;
  CreateDate?: Date;
  Description?: string;
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  Name: string | undefined;
  ResourceArn?: string;
  RuleCount?: number;
  Tags?: Record<string, string>;
  TargetArn: string | undefined;
}
export interface ListRulesetsResponse {
  Rulesets: RulesetItem[] | undefined;
  NextToken?: string;
}
export interface ListSchedulesRequest {
  JobName?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface Schedule {
  AccountId?: string;
  CreatedBy?: string;
  CreateDate?: Date;
  JobNames?: string[];
  LastModifiedBy?: string;
  LastModifiedDate?: Date;
  ResourceArn?: string;
  CronExpression?: string;
  Tags?: Record<string, string>;
  Name: string | undefined;
}
export interface ListSchedulesResponse {
  Schedules: Schedule[] | undefined;
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface PublishRecipeRequest {
  Description?: string;
  Name: string | undefined;
}
export interface PublishRecipeResponse {
  Name: string | undefined;
}
export interface ViewFrame {
  StartColumnIndex: number | undefined;
  ColumnRange?: number;
  HiddenColumns?: string[];
  StartRowIndex?: number;
  RowRange?: number;
  Analytics?: AnalyticsMode;
}
export interface SendProjectSessionActionRequest {
  Preview?: boolean;
  Name: string | undefined;
  RecipeStep?: RecipeStep;
  StepIndex?: number;
  ClientSessionId?: string;
  ViewFrame?: ViewFrame;
}
export interface SendProjectSessionActionResponse {
  Result?: string;
  Name: string | undefined;
  ActionId?: number;
}
export interface StartJobRunRequest {
  Name: string | undefined;
}
export interface StartJobRunResponse {
  RunId: string | undefined;
}
export interface StartProjectSessionRequest {
  Name: string | undefined;
  AssumeControl?: boolean;
}
export interface StartProjectSessionResponse {
  Name: string | undefined;
  ClientSessionId?: string;
}
export interface StopJobRunRequest {
  Name: string | undefined;
  RunId: string | undefined;
}
export interface StopJobRunResponse {
  RunId: string | undefined;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDatasetRequest {
  Name: string | undefined;
  Format?: InputFormat;
  FormatOptions?: FormatOptions;
  Input: Input | undefined;
  PathOptions?: PathOptions;
}
export interface UpdateDatasetResponse {
  Name: string | undefined;
}
export interface UpdateProfileJobRequest {
  Configuration?: ProfileConfiguration;
  EncryptionKeyArn?: string;
  EncryptionMode?: EncryptionMode;
  Name: string | undefined;
  LogSubscription?: LogSubscription;
  MaxCapacity?: number;
  MaxRetries?: number;
  OutputLocation: S3Location | undefined;
  ValidationConfigurations?: ValidationConfiguration[];
  RoleArn: string | undefined;
  Timeout?: number;
  JobSample?: JobSample;
}
export interface UpdateProfileJobResponse {
  Name: string | undefined;
}
export interface UpdateProjectRequest {
  Sample?: Sample;
  RoleArn: string | undefined;
  Name: string | undefined;
}
export interface UpdateProjectResponse {
  LastModifiedDate?: Date;
  Name: string | undefined;
}
export interface UpdateRecipeRequest {
  Description?: string;
  Name: string | undefined;
  Steps?: RecipeStep[];
}
export interface UpdateRecipeResponse {
  Name: string | undefined;
}
export interface UpdateRecipeJobRequest {
  EncryptionKeyArn?: string;
  EncryptionMode?: EncryptionMode;
  Name: string | undefined;
  LogSubscription?: LogSubscription;
  MaxCapacity?: number;
  MaxRetries?: number;
  Outputs?: Output[];
  DataCatalogOutputs?: DataCatalogOutput[];
  DatabaseOutputs?: DatabaseOutput[];
  RoleArn: string | undefined;
  Timeout?: number;
}
export interface UpdateRecipeJobResponse {
  Name: string | undefined;
}
export interface UpdateRulesetRequest {
  Name: string | undefined;
  Description?: string;
  Rules: Rule[] | undefined;
}
export interface UpdateRulesetResponse {
  Name: string | undefined;
}
export interface UpdateScheduleRequest {
  JobNames?: string[];
  CronExpression: string | undefined;
  Name: string | undefined;
}
export interface UpdateScheduleResponse {
  Name: string | undefined;
}
export declare const SendProjectSessionActionRequestFilterSensitiveLog: (
  obj: SendProjectSessionActionRequest
) => any;
export declare const StartProjectSessionResponseFilterSensitiveLog: (
  obj: StartProjectSessionResponse
) => any;
