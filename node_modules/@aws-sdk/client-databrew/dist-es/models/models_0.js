import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { DataBrewServiceException as __BaseException } from "./DataBrewServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const AnalyticsMode = {
    DISABLE: "DISABLE",
    ENABLE: "ENABLE",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const InputFormat = {
    CSV: "CSV",
    EXCEL: "EXCEL",
    JSON: "JSON",
    ORC: "ORC",
    PARQUET: "PARQUET",
};
export const Order = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const OrderedBy = {
    LAST_MODIFIED_DATE: "LAST_MODIFIED_DATE",
};
export const ParameterType = {
    Datetime: "Datetime",
    Number: "Number",
    String: "String",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const EncryptionMode = {
    SSEKMS: "SSE-KMS",
    SSES3: "SSE-S3",
};
export const SampleMode = {
    CUSTOM_ROWS: "CUSTOM_ROWS",
    FULL_DATASET: "FULL_DATASET",
};
export const LogSubscription = {
    DISABLE: "DISABLE",
    ENABLE: "ENABLE",
};
export const ValidationMode = {
    CHECK_ALL: "CHECK_ALL",
};
export const SampleType = {
    FIRST_N: "FIRST_N",
    LAST_N: "LAST_N",
    RANDOM: "RANDOM",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export const DatabaseOutputMode = {
    NEW_TABLE: "NEW_TABLE",
};
export const CompressionFormat = {
    BROTLI: "BROTLI",
    BZIP2: "BZIP2",
    DEFLATE: "DEFLATE",
    GZIP: "GZIP",
    LZ4: "LZ4",
    LZO: "LZO",
    SNAPPY: "SNAPPY",
    ZLIB: "ZLIB",
    ZSTD: "ZSTD",
};
export const OutputFormat = {
    AVRO: "AVRO",
    CSV: "CSV",
    GLUEPARQUET: "GLUEPARQUET",
    JSON: "JSON",
    ORC: "ORC",
    PARQUET: "PARQUET",
    TABLEAUHYPER: "TABLEAUHYPER",
    XML: "XML",
};
export const ThresholdType = {
    GREATER_THAN: "GREATER_THAN",
    GREATER_THAN_OR_EQUAL: "GREATER_THAN_OR_EQUAL",
    LESS_THAN: "LESS_THAN",
    LESS_THAN_OR_EQUAL: "LESS_THAN_OR_EQUAL",
};
export const ThresholdUnit = {
    COUNT: "COUNT",
    PERCENTAGE: "PERCENTAGE",
};
export const Source = {
    DATABASE: "DATABASE",
    DATACATALOG: "DATA-CATALOG",
    S3: "S3",
};
export const JobType = {
    PROFILE: "PROFILE",
    RECIPE: "RECIPE",
};
export const JobRunState = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    SUCCEEDED: "SUCCEEDED",
    TIMEOUT: "TIMEOUT",
};
export const SessionStatus = {
    ASSIGNED: "ASSIGNED",
    FAILED: "FAILED",
    INITIALIZING: "INITIALIZING",
    PROVISIONING: "PROVISIONING",
    READY: "READY",
    RECYCLING: "RECYCLING",
    ROTATING: "ROTATING",
    TERMINATED: "TERMINATED",
    TERMINATING: "TERMINATING",
    UPDATING: "UPDATING",
};
export const SendProjectSessionActionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSessionId && { ClientSessionId: SENSITIVE_STRING }),
});
export const StartProjectSessionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSessionId && { ClientSessionId: SENSITIVE_STRING }),
});
