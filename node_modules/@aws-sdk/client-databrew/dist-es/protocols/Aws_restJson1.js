import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { DataBrewServiceException as __BaseException } from "../models/DataBrewServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ValidationException, } from "../models/models_0";
export const se_BatchDeleteRecipeVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/recipes/{Name}/batchDeleteRecipeVersion");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        RecipeVersions: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasets");
    let body;
    body = JSON.stringify(take(input, {
        Format: [],
        FormatOptions: (_) => _json(_),
        Input: (_) => _json(_),
        Name: [],
        PathOptions: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProfileJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profileJobs");
    let body;
    body = JSON.stringify(take(input, {
        Configuration: (_) => _json(_),
        DatasetName: [],
        EncryptionKeyArn: [],
        EncryptionMode: [],
        JobSample: (_) => _json(_),
        LogSubscription: [],
        MaxCapacity: [],
        MaxRetries: [],
        Name: [],
        OutputLocation: (_) => _json(_),
        RoleArn: [],
        Tags: (_) => _json(_),
        Timeout: [],
        ValidationConfigurations: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProjectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/projects");
    let body;
    body = JSON.stringify(take(input, {
        DatasetName: [],
        Name: [],
        RecipeName: [],
        RoleArn: [],
        Sample: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/recipes");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        Steps: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRecipeJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/recipeJobs");
    let body;
    body = JSON.stringify(take(input, {
        DataCatalogOutputs: (_) => _json(_),
        DatabaseOutputs: (_) => _json(_),
        DatasetName: [],
        EncryptionKeyArn: [],
        EncryptionMode: [],
        LogSubscription: [],
        MaxCapacity: [],
        MaxRetries: [],
        Name: [],
        Outputs: (_) => _json(_),
        ProjectName: [],
        RecipeReference: (_) => _json(_),
        RoleArn: [],
        Tags: (_) => _json(_),
        Timeout: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRulesetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rulesets");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        Rules: (_) => se_RuleList(_, context),
        Tags: (_) => _json(_),
        TargetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/schedules");
    let body;
    body = JSON.stringify(take(input, {
        CronExpression: [],
        JobNames: (_) => _json(_),
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteProjectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/projects/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRecipeVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/recipes/{Name}/recipeVersion/{RecipeVersion}");
    b.p("Name", () => input.Name, "{Name}", false);
    b.p("RecipeVersion", () => input.RecipeVersion, "{RecipeVersion}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRulesetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/rulesets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/schedules/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{Name}/jobRun/{RunId}");
    b.p("Name", () => input.Name, "{Name}", false);
    b.p("RunId", () => input.RunId, "{RunId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeProjectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/projects/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/recipes/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    const query = map({
        [_rV]: [, input[_RV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeRulesetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/rulesets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/schedules/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListDatasetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJobRunsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{Name}/jobRuns");
    b.p("Name", () => input.Name, "{Name}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs");
    const query = map({
        [_dN]: [, input[_DN]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_pN]: [, input[_PN]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProjectsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/projects");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecipesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/recipes");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_rV]: [, input[_RV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecipeVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/recipeVersions");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_n]: [, __expectNonNull(input[_N], `Name`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRulesetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/rulesets");
    const query = map({
        [_tA]: [, input[_TA]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSchedulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/schedules");
    const query = map({
        [_jN]: [, input[_JN]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PublishRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/recipes/{Name}/publishRecipe");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendProjectSessionActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/projects/{Name}/sendProjectSessionAction");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientSessionId: [],
        Preview: [],
        RecipeStep: (_) => _json(_),
        StepIndex: [],
        ViewFrame: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{Name}/startJobRun");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartProjectSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/projects/{Name}/startProjectSession");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        AssumeControl: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/jobs/{Name}/jobRun/{RunId}/stopJobRun");
    b.p("Name", () => input.Name, "{Name}", false);
    b.p("RunId", () => input.RunId, "{RunId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        Format: [],
        FormatOptions: (_) => _json(_),
        Input: (_) => _json(_),
        PathOptions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateProfileJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profileJobs/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        Configuration: (_) => _json(_),
        EncryptionKeyArn: [],
        EncryptionMode: [],
        JobSample: (_) => _json(_),
        LogSubscription: [],
        MaxCapacity: [],
        MaxRetries: [],
        OutputLocation: (_) => _json(_),
        RoleArn: [],
        Timeout: [],
        ValidationConfigurations: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateProjectCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/projects/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        RoleArn: [],
        Sample: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/recipes/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Steps: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRecipeJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/recipeJobs/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        DataCatalogOutputs: (_) => _json(_),
        DatabaseOutputs: (_) => _json(_),
        EncryptionKeyArn: [],
        EncryptionMode: [],
        LogSubscription: [],
        MaxCapacity: [],
        MaxRetries: [],
        Outputs: (_) => _json(_),
        RoleArn: [],
        Timeout: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRulesetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rulesets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Rules: (_) => se_RuleList(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateScheduleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/schedules/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        CronExpression: [],
        JobNames: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_BatchDeleteRecipeVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Errors: _json,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProfileJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRecipeJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRulesetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteRecipeVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
        RecipeVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteRulesetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        Format: __expectString,
        FormatOptions: _json,
        Input: _json,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        PathOptions: _json,
        ResourceArn: __expectString,
        Source: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        DataCatalogOutputs: _json,
        DatabaseOutputs: _json,
        DatasetName: __expectString,
        EncryptionKeyArn: __expectString,
        EncryptionMode: __expectString,
        JobSample: _json,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogSubscription: __expectString,
        MaxCapacity: __expectInt32,
        MaxRetries: __expectInt32,
        Name: __expectString,
        Outputs: _json,
        ProfileConfiguration: _json,
        ProjectName: __expectString,
        RecipeReference: _json,
        ResourceArn: __expectString,
        RoleArn: __expectString,
        Tags: _json,
        Timeout: __expectInt32,
        Type: __expectString,
        ValidationConfigurations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attempt: __expectInt32,
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataCatalogOutputs: _json,
        DatabaseOutputs: _json,
        DatasetName: __expectString,
        ErrorMessage: __expectString,
        ExecutionTime: __expectInt32,
        JobName: __expectString,
        JobSample: _json,
        LogGroupName: __expectString,
        LogSubscription: __expectString,
        Outputs: _json,
        ProfileConfiguration: _json,
        RecipeReference: _json,
        RunId: __expectString,
        StartedBy: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        ValidationConfigurations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        DatasetName: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OpenDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OpenedBy: __expectString,
        RecipeName: __expectString,
        ResourceArn: __expectString,
        RoleArn: __expectString,
        Sample: _json,
        SessionStatus: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        Description: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ProjectName: __expectString,
        PublishedBy: __expectString,
        PublishedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RecipeVersion: __expectString,
        ResourceArn: __expectString,
        Steps: _json,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRulesetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        Description: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ResourceArn: __expectString,
        Rules: (_) => de_RuleList(_, context),
        Tags: _json,
        TargetArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        CronExpression: __expectString,
        JobNames: _json,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ResourceArn: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDatasetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Datasets: (_) => de_DatasetList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobRunsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobRuns: (_) => de_JobRunList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Jobs: (_) => de_JobList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Projects: (_) => de_ProjectList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecipesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Recipes: (_) => de_RecipeList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecipeVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Recipes: (_) => de_RecipeList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRulesetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Rulesets: (_) => de_RulesetItemList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSchedulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Schedules: (_) => de_ScheduleList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PublishRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendProjectSessionActionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ActionId: __expectInt32,
        Name: __expectString,
        Result: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RunId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartProjectSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ClientSessionId: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RunId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateProfileJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateProjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRecipeJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRulesetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.databrew#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.databrew#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.databrew#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.databrew#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.databrew#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.databrew#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_Rule = (input, context) => {
    return take(input, {
        CheckExpression: [],
        ColumnSelectors: _json,
        Disabled: [],
        Name: [],
        SubstitutionMap: _json,
        Threshold: (_) => se_Threshold(_, context),
    });
};
const se_RuleList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Rule(entry, context);
    });
};
const se_Threshold = (input, context) => {
    return take(input, {
        Type: [],
        Unit: [],
        Value: __serializeFloat,
    });
};
const de_Dataset = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        Format: __expectString,
        FormatOptions: _json,
        Input: _json,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        PathOptions: _json,
        ResourceArn: __expectString,
        Source: __expectString,
        Tags: _json,
    });
};
const de_DatasetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Dataset(entry, context);
    });
    return retVal;
};
const de_Job = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        DataCatalogOutputs: _json,
        DatabaseOutputs: _json,
        DatasetName: __expectString,
        EncryptionKeyArn: __expectString,
        EncryptionMode: __expectString,
        JobSample: _json,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogSubscription: __expectString,
        MaxCapacity: __expectInt32,
        MaxRetries: __expectInt32,
        Name: __expectString,
        Outputs: _json,
        ProjectName: __expectString,
        RecipeReference: _json,
        ResourceArn: __expectString,
        RoleArn: __expectString,
        Tags: _json,
        Timeout: __expectInt32,
        Type: __expectString,
        ValidationConfigurations: _json,
    });
};
const de_JobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Job(entry, context);
    });
    return retVal;
};
const de_JobRun = (output, context) => {
    return take(output, {
        Attempt: __expectInt32,
        CompletedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataCatalogOutputs: _json,
        DatabaseOutputs: _json,
        DatasetName: __expectString,
        ErrorMessage: __expectString,
        ExecutionTime: __expectInt32,
        JobName: __expectString,
        JobSample: _json,
        LogGroupName: __expectString,
        LogSubscription: __expectString,
        Outputs: _json,
        RecipeReference: _json,
        RunId: __expectString,
        StartedBy: __expectString,
        StartedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        ValidationConfigurations: _json,
    });
};
const de_JobRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobRun(entry, context);
    });
    return retVal;
};
const de_Project = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        DatasetName: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OpenDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OpenedBy: __expectString,
        RecipeName: __expectString,
        ResourceArn: __expectString,
        RoleArn: __expectString,
        Sample: _json,
        Tags: _json,
    });
};
const de_ProjectList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Project(entry, context);
    });
    return retVal;
};
const de_Recipe = (output, context) => {
    return take(output, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        Description: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ProjectName: __expectString,
        PublishedBy: __expectString,
        PublishedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RecipeVersion: __expectString,
        ResourceArn: __expectString,
        Steps: _json,
        Tags: _json,
    });
};
const de_RecipeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Recipe(entry, context);
    });
    return retVal;
};
const de_Rule = (output, context) => {
    return take(output, {
        CheckExpression: __expectString,
        ColumnSelectors: _json,
        Disabled: __expectBoolean,
        Name: __expectString,
        SubstitutionMap: _json,
        Threshold: (_) => de_Threshold(_, context),
    });
};
const de_RuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Rule(entry, context);
    });
    return retVal;
};
const de_RulesetItem = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        Description: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ResourceArn: __expectString,
        RuleCount: __expectInt32,
        Tags: _json,
        TargetArn: __expectString,
    });
};
const de_RulesetItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RulesetItem(entry, context);
    });
    return retVal;
};
const de_Schedule = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: __expectString,
        CronExpression: __expectString,
        JobNames: _json,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ResourceArn: __expectString,
        Tags: _json,
    });
};
const de_ScheduleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Schedule(entry, context);
    });
    return retVal;
};
const de_Threshold = (output, context) => {
    return take(output, {
        Type: __expectString,
        Unit: __expectString,
        Value: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _DN = "DatasetName";
const _JN = "JobName";
const _MR = "MaxResults";
const _N = "Name";
const _NT = "NextToken";
const _PN = "ProjectName";
const _RV = "RecipeVersion";
const _TA = "TargetArn";
const _TK = "TagKeys";
const _dN = "datasetName";
const _jN = "jobName";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _pN = "projectName";
const _rV = "recipeVersion";
const _tA = "targetArn";
const _tK = "tagKeys";
