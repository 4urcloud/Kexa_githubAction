import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { KinesisVideoArchivedMediaServiceException as __BaseException } from "../models/KinesisVideoArchivedMediaServiceException";
import { ClientLimitExceededException, InvalidArgumentException, InvalidCodecPrivateDataException, InvalidMediaFrameException, MissingCodecPrivateDataException, NoDataRetentionException, NotAuthorizedException, ResourceNotFoundException, UnsupportedStreamMediaTypeException, } from "../models/models_0";
export const se_GetClipCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getClip");
    let body;
    body = JSON.stringify(take(input, {
        ClipFragmentSelector: (_) => se_ClipFragmentSelector(_, context),
        StreamARN: [],
        StreamName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetDASHStreamingSessionURLCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getDASHStreamingSessionURL");
    let body;
    body = JSON.stringify(take(input, {
        DASHFragmentSelector: (_) => se_DASHFragmentSelector(_, context),
        DisplayFragmentNumber: [],
        DisplayFragmentTimestamp: [],
        Expires: [],
        MaxManifestFragmentResults: [],
        PlaybackMode: [],
        StreamARN: [],
        StreamName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetHLSStreamingSessionURLCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getHLSStreamingSessionURL");
    let body;
    body = JSON.stringify(take(input, {
        ContainerFormat: [],
        DiscontinuityMode: [],
        DisplayFragmentTimestamp: [],
        Expires: [],
        HLSFragmentSelector: (_) => se_HLSFragmentSelector(_, context),
        MaxMediaPlaylistFragmentResults: [],
        PlaybackMode: [],
        StreamARN: [],
        StreamName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetImagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getImages");
    let body;
    body = JSON.stringify(take(input, {
        EndTimestamp: (_) => Math.round(_.getTime() / 1000),
        Format: [],
        FormatConfig: (_) => _json(_),
        HeightPixels: [],
        ImageSelectorType: [],
        MaxResults: [],
        NextToken: [],
        SamplingInterval: [],
        StartTimestamp: (_) => Math.round(_.getTime() / 1000),
        StreamARN: [],
        StreamName: [],
        WidthPixels: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetMediaForFragmentListCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getMediaForFragmentList");
    let body;
    body = JSON.stringify(take(input, {
        Fragments: (_) => _json(_),
        StreamARN: [],
        StreamName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListFragmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listFragments");
    let body;
    body = JSON.stringify(take(input, {
        FragmentSelector: (_) => se_FragmentSelector(_, context),
        MaxResults: [],
        NextToken: [],
        StreamARN: [],
        StreamName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_GetClipCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Payload = data;
    return contents;
};
export const de_GetDASHStreamingSessionURLCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DASHStreamingSessionURL: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetHLSStreamingSessionURLCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HLSStreamingSessionURL: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Images: (_) => de_Images(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMediaForFragmentListCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_CT]: [, output.headers[_ct]],
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Payload = data;
    return contents;
};
export const de_ListFragmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Fragments: (_) => de_FragmentList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientLimitExceededException":
        case "com.amazonaws.kinesisvideoarchivedmedia#ClientLimitExceededException":
            throw await de_ClientLimitExceededExceptionRes(parsedOutput, context);
        case "InvalidArgumentException":
        case "com.amazonaws.kinesisvideoarchivedmedia#InvalidArgumentException":
            throw await de_InvalidArgumentExceptionRes(parsedOutput, context);
        case "InvalidCodecPrivateDataException":
        case "com.amazonaws.kinesisvideoarchivedmedia#InvalidCodecPrivateDataException":
            throw await de_InvalidCodecPrivateDataExceptionRes(parsedOutput, context);
        case "InvalidMediaFrameException":
        case "com.amazonaws.kinesisvideoarchivedmedia#InvalidMediaFrameException":
            throw await de_InvalidMediaFrameExceptionRes(parsedOutput, context);
        case "MissingCodecPrivateDataException":
        case "com.amazonaws.kinesisvideoarchivedmedia#MissingCodecPrivateDataException":
            throw await de_MissingCodecPrivateDataExceptionRes(parsedOutput, context);
        case "NoDataRetentionException":
        case "com.amazonaws.kinesisvideoarchivedmedia#NoDataRetentionException":
            throw await de_NoDataRetentionExceptionRes(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.kinesisvideoarchivedmedia#NotAuthorizedException":
            throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.kinesisvideoarchivedmedia#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedStreamMediaTypeException":
        case "com.amazonaws.kinesisvideoarchivedmedia#UnsupportedStreamMediaTypeException":
            throw await de_UnsupportedStreamMediaTypeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ClientLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ClientLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidArgumentExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidCodecPrivateDataExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidCodecPrivateDataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidMediaFrameExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidMediaFrameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MissingCodecPrivateDataExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MissingCodecPrivateDataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NoDataRetentionExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NoDataRetentionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnsupportedStreamMediaTypeExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedStreamMediaTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_ClipFragmentSelector = (input, context) => {
    return take(input, {
        FragmentSelectorType: [],
        TimestampRange: (_) => se_ClipTimestampRange(_, context),
    });
};
const se_ClipTimestampRange = (input, context) => {
    return take(input, {
        EndTimestamp: (_) => Math.round(_.getTime() / 1000),
        StartTimestamp: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DASHFragmentSelector = (input, context) => {
    return take(input, {
        FragmentSelectorType: [],
        TimestampRange: (_) => se_DASHTimestampRange(_, context),
    });
};
const se_DASHTimestampRange = (input, context) => {
    return take(input, {
        EndTimestamp: (_) => Math.round(_.getTime() / 1000),
        StartTimestamp: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_FragmentSelector = (input, context) => {
    return take(input, {
        FragmentSelectorType: [],
        TimestampRange: (_) => se_TimestampRange(_, context),
    });
};
const se_HLSFragmentSelector = (input, context) => {
    return take(input, {
        FragmentSelectorType: [],
        TimestampRange: (_) => se_HLSTimestampRange(_, context),
    });
};
const se_HLSTimestampRange = (input, context) => {
    return take(input, {
        EndTimestamp: (_) => Math.round(_.getTime() / 1000),
        StartTimestamp: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_TimestampRange = (input, context) => {
    return take(input, {
        EndTimestamp: (_) => Math.round(_.getTime() / 1000),
        StartTimestamp: (_) => Math.round(_.getTime() / 1000),
    });
};
const de_Fragment = (output, context) => {
    return take(output, {
        FragmentLengthInMilliseconds: __expectLong,
        FragmentNumber: __expectString,
        FragmentSizeInBytes: __expectLong,
        ProducerTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ServerTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_FragmentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Fragment(entry, context);
    });
    return retVal;
};
const de_Image = (output, context) => {
    return take(output, {
        Error: __expectString,
        ImageContent: __expectString,
        TimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Images = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Image(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _CT = "ContentType";
const _ct = "content-type";
