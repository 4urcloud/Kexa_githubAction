import { KinesisVideoArchivedMediaServiceException as __BaseException } from "./KinesisVideoArchivedMediaServiceException";
export class ClientLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ClientLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const ClipFragmentSelectorType = {
    PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
    SERVER_TIMESTAMP: "SERVER_TIMESTAMP",
};
export class InvalidArgumentException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidArgumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgumentException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidCodecPrivateDataException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidCodecPrivateDataException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidCodecPrivateDataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCodecPrivateDataException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidMediaFrameException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidMediaFrameException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidMediaFrameException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidMediaFrameException.prototype);
        this.Message = opts.Message;
    }
}
export class MissingCodecPrivateDataException extends __BaseException {
    constructor(opts) {
        super({
            name: "MissingCodecPrivateDataException",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingCodecPrivateDataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingCodecPrivateDataException.prototype);
        this.Message = opts.Message;
    }
}
export class NoDataRetentionException extends __BaseException {
    constructor(opts) {
        super({
            name: "NoDataRetentionException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoDataRetentionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoDataRetentionException.prototype);
        this.Message = opts.Message;
    }
}
export class NotAuthorizedException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedStreamMediaTypeException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedStreamMediaTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedStreamMediaTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedStreamMediaTypeException.prototype);
        this.Message = opts.Message;
    }
}
export const DASHFragmentSelectorType = {
    PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
    SERVER_TIMESTAMP: "SERVER_TIMESTAMP",
};
export const DASHDisplayFragmentNumber = {
    ALWAYS: "ALWAYS",
    NEVER: "NEVER",
};
export const DASHDisplayFragmentTimestamp = {
    ALWAYS: "ALWAYS",
    NEVER: "NEVER",
};
export const DASHPlaybackMode = {
    LIVE: "LIVE",
    LIVE_REPLAY: "LIVE_REPLAY",
    ON_DEMAND: "ON_DEMAND",
};
export const ContainerFormat = {
    FRAGMENTED_MP4: "FRAGMENTED_MP4",
    MPEG_TS: "MPEG_TS",
};
export const HLSDiscontinuityMode = {
    ALWAYS: "ALWAYS",
    NEVER: "NEVER",
    ON_DISCONTINUITY: "ON_DISCONTINUITY",
};
export const HLSDisplayFragmentTimestamp = {
    ALWAYS: "ALWAYS",
    NEVER: "NEVER",
};
export const HLSFragmentSelectorType = {
    PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
    SERVER_TIMESTAMP: "SERVER_TIMESTAMP",
};
export const HLSPlaybackMode = {
    LIVE: "LIVE",
    LIVE_REPLAY: "LIVE_REPLAY",
    ON_DEMAND: "ON_DEMAND",
};
export const Format = {
    JPEG: "JPEG",
    PNG: "PNG",
};
export const FormatConfigKey = {
    JPEGQuality: "JPEGQuality",
};
export const ImageSelectorType = {
    PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
    SERVER_TIMESTAMP: "SERVER_TIMESTAMP",
};
export const ImageError = {
    MEDIA_ERROR: "MEDIA_ERROR",
    NO_MEDIA: "NO_MEDIA",
};
export const FragmentSelectorType = {
    PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
    SERVER_TIMESTAMP: "SERVER_TIMESTAMP",
};
export const GetClipOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GetMediaForFragmentListOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
