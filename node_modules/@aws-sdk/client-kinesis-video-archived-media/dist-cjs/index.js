"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ClientLimitExceededException: () => ClientLimitExceededException,
  ClipFragmentSelectorType: () => ClipFragmentSelectorType,
  ContainerFormat: () => ContainerFormat,
  DASHDisplayFragmentNumber: () => DASHDisplayFragmentNumber,
  DASHDisplayFragmentTimestamp: () => DASHDisplayFragmentTimestamp,
  DASHFragmentSelectorType: () => DASHFragmentSelectorType,
  DASHPlaybackMode: () => DASHPlaybackMode,
  Format: () => Format,
  FormatConfigKey: () => FormatConfigKey,
  FragmentSelectorType: () => FragmentSelectorType,
  GetClipCommand: () => GetClipCommand,
  GetClipOutputFilterSensitiveLog: () => GetClipOutputFilterSensitiveLog,
  GetDASHStreamingSessionURLCommand: () => GetDASHStreamingSessionURLCommand,
  GetHLSStreamingSessionURLCommand: () => GetHLSStreamingSessionURLCommand,
  GetImagesCommand: () => GetImagesCommand,
  GetMediaForFragmentListCommand: () => GetMediaForFragmentListCommand,
  GetMediaForFragmentListOutputFilterSensitiveLog: () => GetMediaForFragmentListOutputFilterSensitiveLog,
  HLSDiscontinuityMode: () => HLSDiscontinuityMode,
  HLSDisplayFragmentTimestamp: () => HLSDisplayFragmentTimestamp,
  HLSFragmentSelectorType: () => HLSFragmentSelectorType,
  HLSPlaybackMode: () => HLSPlaybackMode,
  ImageError: () => ImageError,
  ImageSelectorType: () => ImageSelectorType,
  InvalidArgumentException: () => InvalidArgumentException,
  InvalidCodecPrivateDataException: () => InvalidCodecPrivateDataException,
  InvalidMediaFrameException: () => InvalidMediaFrameException,
  KinesisVideoArchivedMedia: () => KinesisVideoArchivedMedia,
  KinesisVideoArchivedMediaClient: () => KinesisVideoArchivedMediaClient,
  KinesisVideoArchivedMediaServiceException: () => KinesisVideoArchivedMediaServiceException,
  ListFragmentsCommand: () => ListFragmentsCommand,
  MissingCodecPrivateDataException: () => MissingCodecPrivateDataException,
  NoDataRetentionException: () => NoDataRetentionException,
  NotAuthorizedException: () => NotAuthorizedException,
  ResourceNotFoundException: () => ResourceNotFoundException,
  UnsupportedStreamMediaTypeException: () => UnsupportedStreamMediaTypeException,
  __Client: () => import_smithy_client.Client,
  paginateGetImages: () => paginateGetImages,
  paginateListFragments: () => paginateListFragments
});
module.exports = __toCommonJS(src_exports);

// src/KinesisVideoArchivedMediaClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "kinesisvideo"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/KinesisVideoArchivedMediaClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/KinesisVideoArchivedMediaClient.ts
var _KinesisVideoArchivedMediaClient = class _KinesisVideoArchivedMediaClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultKinesisVideoArchivedMediaHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_KinesisVideoArchivedMediaClient, "KinesisVideoArchivedMediaClient");
var KinesisVideoArchivedMediaClient = _KinesisVideoArchivedMediaClient;

// src/KinesisVideoArchivedMedia.ts


// src/commands/GetClipCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/models/KinesisVideoArchivedMediaServiceException.ts

var _KinesisVideoArchivedMediaServiceException = class _KinesisVideoArchivedMediaServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _KinesisVideoArchivedMediaServiceException.prototype);
  }
};
__name(_KinesisVideoArchivedMediaServiceException, "KinesisVideoArchivedMediaServiceException");
var KinesisVideoArchivedMediaServiceException = _KinesisVideoArchivedMediaServiceException;

// src/models/models_0.ts
var _ClientLimitExceededException = class _ClientLimitExceededException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ClientLimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ClientLimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ClientLimitExceededException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ClientLimitExceededException, "ClientLimitExceededException");
var ClientLimitExceededException = _ClientLimitExceededException;
var ClipFragmentSelectorType = {
  PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
  SERVER_TIMESTAMP: "SERVER_TIMESTAMP"
};
var _InvalidArgumentException = class _InvalidArgumentException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidArgumentException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidArgumentException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidArgumentException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidArgumentException, "InvalidArgumentException");
var InvalidArgumentException = _InvalidArgumentException;
var _InvalidCodecPrivateDataException = class _InvalidCodecPrivateDataException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidCodecPrivateDataException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidCodecPrivateDataException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidCodecPrivateDataException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidCodecPrivateDataException, "InvalidCodecPrivateDataException");
var InvalidCodecPrivateDataException = _InvalidCodecPrivateDataException;
var _InvalidMediaFrameException = class _InvalidMediaFrameException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidMediaFrameException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidMediaFrameException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidMediaFrameException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidMediaFrameException, "InvalidMediaFrameException");
var InvalidMediaFrameException = _InvalidMediaFrameException;
var _MissingCodecPrivateDataException = class _MissingCodecPrivateDataException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "MissingCodecPrivateDataException",
      $fault: "client",
      ...opts
    });
    this.name = "MissingCodecPrivateDataException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _MissingCodecPrivateDataException.prototype);
    this.Message = opts.Message;
  }
};
__name(_MissingCodecPrivateDataException, "MissingCodecPrivateDataException");
var MissingCodecPrivateDataException = _MissingCodecPrivateDataException;
var _NoDataRetentionException = class _NoDataRetentionException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NoDataRetentionException",
      $fault: "client",
      ...opts
    });
    this.name = "NoDataRetentionException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NoDataRetentionException.prototype);
    this.Message = opts.Message;
  }
};
__name(_NoDataRetentionException, "NoDataRetentionException");
var NoDataRetentionException = _NoDataRetentionException;
var _NotAuthorizedException = class _NotAuthorizedException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotAuthorizedException",
      $fault: "client",
      ...opts
    });
    this.name = "NotAuthorizedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotAuthorizedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_NotAuthorizedException, "NotAuthorizedException");
var NotAuthorizedException = _NotAuthorizedException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var _UnsupportedStreamMediaTypeException = class _UnsupportedStreamMediaTypeException extends KinesisVideoArchivedMediaServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnsupportedStreamMediaTypeException",
      $fault: "client",
      ...opts
    });
    this.name = "UnsupportedStreamMediaTypeException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnsupportedStreamMediaTypeException.prototype);
    this.Message = opts.Message;
  }
};
__name(_UnsupportedStreamMediaTypeException, "UnsupportedStreamMediaTypeException");
var UnsupportedStreamMediaTypeException = _UnsupportedStreamMediaTypeException;
var DASHFragmentSelectorType = {
  PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
  SERVER_TIMESTAMP: "SERVER_TIMESTAMP"
};
var DASHDisplayFragmentNumber = {
  ALWAYS: "ALWAYS",
  NEVER: "NEVER"
};
var DASHDisplayFragmentTimestamp = {
  ALWAYS: "ALWAYS",
  NEVER: "NEVER"
};
var DASHPlaybackMode = {
  LIVE: "LIVE",
  LIVE_REPLAY: "LIVE_REPLAY",
  ON_DEMAND: "ON_DEMAND"
};
var ContainerFormat = {
  FRAGMENTED_MP4: "FRAGMENTED_MP4",
  MPEG_TS: "MPEG_TS"
};
var HLSDiscontinuityMode = {
  ALWAYS: "ALWAYS",
  NEVER: "NEVER",
  ON_DISCONTINUITY: "ON_DISCONTINUITY"
};
var HLSDisplayFragmentTimestamp = {
  ALWAYS: "ALWAYS",
  NEVER: "NEVER"
};
var HLSFragmentSelectorType = {
  PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
  SERVER_TIMESTAMP: "SERVER_TIMESTAMP"
};
var HLSPlaybackMode = {
  LIVE: "LIVE",
  LIVE_REPLAY: "LIVE_REPLAY",
  ON_DEMAND: "ON_DEMAND"
};
var Format = {
  JPEG: "JPEG",
  PNG: "PNG"
};
var FormatConfigKey = {
  JPEGQuality: "JPEGQuality"
};
var ImageSelectorType = {
  PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
  SERVER_TIMESTAMP: "SERVER_TIMESTAMP"
};
var ImageError = {
  MEDIA_ERROR: "MEDIA_ERROR",
  NO_MEDIA: "NO_MEDIA"
};
var FragmentSelectorType = {
  PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
  SERVER_TIMESTAMP: "SERVER_TIMESTAMP"
};
var GetClipOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj
}), "GetClipOutputFilterSensitiveLog");
var GetMediaForFragmentListOutputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj
}), "GetMediaForFragmentListOutputFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts


var se_GetClipCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/getClip");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClipFragmentSelector: (_) => se_ClipFragmentSelector(_, context),
      StreamARN: [],
      StreamName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetClipCommand");
var se_GetDASHStreamingSessionURLCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/getDASHStreamingSessionURL");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DASHFragmentSelector: (_) => se_DASHFragmentSelector(_, context),
      DisplayFragmentNumber: [],
      DisplayFragmentTimestamp: [],
      Expires: [],
      MaxManifestFragmentResults: [],
      PlaybackMode: [],
      StreamARN: [],
      StreamName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetDASHStreamingSessionURLCommand");
var se_GetHLSStreamingSessionURLCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/getHLSStreamingSessionURL");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ContainerFormat: [],
      DiscontinuityMode: [],
      DisplayFragmentTimestamp: [],
      Expires: [],
      HLSFragmentSelector: (_) => se_HLSFragmentSelector(_, context),
      MaxMediaPlaylistFragmentResults: [],
      PlaybackMode: [],
      StreamARN: [],
      StreamName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetHLSStreamingSessionURLCommand");
var se_GetImagesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/getImages");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      EndTimestamp: (_) => Math.round(_.getTime() / 1e3),
      Format: [],
      FormatConfig: (_) => (0, import_smithy_client._json)(_),
      HeightPixels: [],
      ImageSelectorType: [],
      MaxResults: [],
      NextToken: [],
      SamplingInterval: [],
      StartTimestamp: (_) => Math.round(_.getTime() / 1e3),
      StreamARN: [],
      StreamName: [],
      WidthPixels: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetImagesCommand");
var se_GetMediaForFragmentListCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/getMediaForFragmentList");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Fragments: (_) => (0, import_smithy_client._json)(_),
      StreamARN: [],
      StreamName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetMediaForFragmentListCommand");
var se_ListFragmentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/listFragments");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      FragmentSelector: (_) => se_FragmentSelector(_, context),
      MaxResults: [],
      NextToken: [],
      StreamARN: [],
      StreamName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListFragmentsCommand");
var de_GetClipCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]]
  });
  const data = output.body;
  context.sdkStreamMixin(data);
  contents.Payload = data;
  return contents;
}, "de_GetClipCommand");
var de_GetDASHStreamingSessionURLCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    DASHStreamingSessionURL: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetDASHStreamingSessionURLCommand");
var de_GetHLSStreamingSessionURLCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    HLSStreamingSessionURL: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetHLSStreamingSessionURLCommand");
var de_GetImagesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Images: (_) => de_Images(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetImagesCommand");
var de_GetMediaForFragmentListCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_CT]: [, output.headers[_ct]]
  });
  const data = output.body;
  context.sdkStreamMixin(data);
  contents.Payload = data;
  return contents;
}, "de_GetMediaForFragmentListCommand");
var de_ListFragmentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Fragments: (_) => de_FragmentList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListFragmentsCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ClientLimitExceededException":
    case "com.amazonaws.kinesisvideoarchivedmedia#ClientLimitExceededException":
      throw await de_ClientLimitExceededExceptionRes(parsedOutput, context);
    case "InvalidArgumentException":
    case "com.amazonaws.kinesisvideoarchivedmedia#InvalidArgumentException":
      throw await de_InvalidArgumentExceptionRes(parsedOutput, context);
    case "InvalidCodecPrivateDataException":
    case "com.amazonaws.kinesisvideoarchivedmedia#InvalidCodecPrivateDataException":
      throw await de_InvalidCodecPrivateDataExceptionRes(parsedOutput, context);
    case "InvalidMediaFrameException":
    case "com.amazonaws.kinesisvideoarchivedmedia#InvalidMediaFrameException":
      throw await de_InvalidMediaFrameExceptionRes(parsedOutput, context);
    case "MissingCodecPrivateDataException":
    case "com.amazonaws.kinesisvideoarchivedmedia#MissingCodecPrivateDataException":
      throw await de_MissingCodecPrivateDataExceptionRes(parsedOutput, context);
    case "NoDataRetentionException":
    case "com.amazonaws.kinesisvideoarchivedmedia#NoDataRetentionException":
      throw await de_NoDataRetentionExceptionRes(parsedOutput, context);
    case "NotAuthorizedException":
    case "com.amazonaws.kinesisvideoarchivedmedia#NotAuthorizedException":
      throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.kinesisvideoarchivedmedia#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "UnsupportedStreamMediaTypeException":
    case "com.amazonaws.kinesisvideoarchivedmedia#UnsupportedStreamMediaTypeException":
      throw await de_UnsupportedStreamMediaTypeExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(KinesisVideoArchivedMediaServiceException);
var de_ClientLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ClientLimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ClientLimitExceededExceptionRes");
var de_InvalidArgumentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidArgumentException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidArgumentExceptionRes");
var de_InvalidCodecPrivateDataExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidCodecPrivateDataException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidCodecPrivateDataExceptionRes");
var de_InvalidMediaFrameExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidMediaFrameException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidMediaFrameExceptionRes");
var de_MissingCodecPrivateDataExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new MissingCodecPrivateDataException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_MissingCodecPrivateDataExceptionRes");
var de_NoDataRetentionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new NoDataRetentionException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NoDataRetentionExceptionRes");
var de_NotAuthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new NotAuthorizedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotAuthorizedExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_UnsupportedStreamMediaTypeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new UnsupportedStreamMediaTypeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_UnsupportedStreamMediaTypeExceptionRes");
var se_ClipFragmentSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    FragmentSelectorType: [],
    TimestampRange: (_) => se_ClipTimestampRange(_, context)
  });
}, "se_ClipFragmentSelector");
var se_ClipTimestampRange = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    EndTimestamp: (_) => Math.round(_.getTime() / 1e3),
    StartTimestamp: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_ClipTimestampRange");
var se_DASHFragmentSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    FragmentSelectorType: [],
    TimestampRange: (_) => se_DASHTimestampRange(_, context)
  });
}, "se_DASHFragmentSelector");
var se_DASHTimestampRange = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    EndTimestamp: (_) => Math.round(_.getTime() / 1e3),
    StartTimestamp: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_DASHTimestampRange");
var se_FragmentSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    FragmentSelectorType: [],
    TimestampRange: (_) => se_TimestampRange(_, context)
  });
}, "se_FragmentSelector");
var se_HLSFragmentSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    FragmentSelectorType: [],
    TimestampRange: (_) => se_HLSTimestampRange(_, context)
  });
}, "se_HLSFragmentSelector");
var se_HLSTimestampRange = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    EndTimestamp: (_) => Math.round(_.getTime() / 1e3),
    StartTimestamp: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_HLSTimestampRange");
var se_TimestampRange = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    EndTimestamp: (_) => Math.round(_.getTime() / 1e3),
    StartTimestamp: (_) => Math.round(_.getTime() / 1e3)
  });
}, "se_TimestampRange");
var de_Fragment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FragmentLengthInMilliseconds: import_smithy_client.expectLong,
    FragmentNumber: import_smithy_client.expectString,
    FragmentSizeInBytes: import_smithy_client.expectLong,
    ProducerTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    ServerTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_Fragment");
var de_FragmentList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Fragment(entry, context);
  });
  return retVal;
}, "de_FragmentList");
var de_Image = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Error: import_smithy_client.expectString,
    ImageContent: import_smithy_client.expectString,
    TimeStamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_Image");
var de_Images = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Image(entry, context);
  });
  return retVal;
}, "de_Images");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var _CT = "ContentType";
var _ct = "content-type";
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/GetClipCommand.ts
var _GetClipCommand = class _GetClipCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSAcuityReader", "GetClip", {}).n("KinesisVideoArchivedMediaClient", "GetClipCommand").f(void 0, GetClipOutputFilterSensitiveLog).ser(se_GetClipCommand).de(de_GetClipCommand).build() {
};
__name(_GetClipCommand, "GetClipCommand");
var GetClipCommand = _GetClipCommand;

// src/commands/GetDASHStreamingSessionURLCommand.ts




var _GetDASHStreamingSessionURLCommand = class _GetDASHStreamingSessionURLCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSAcuityReader", "GetDASHStreamingSessionURL", {}).n("KinesisVideoArchivedMediaClient", "GetDASHStreamingSessionURLCommand").f(void 0, void 0).ser(se_GetDASHStreamingSessionURLCommand).de(de_GetDASHStreamingSessionURLCommand).build() {
};
__name(_GetDASHStreamingSessionURLCommand, "GetDASHStreamingSessionURLCommand");
var GetDASHStreamingSessionURLCommand = _GetDASHStreamingSessionURLCommand;

// src/commands/GetHLSStreamingSessionURLCommand.ts




var _GetHLSStreamingSessionURLCommand = class _GetHLSStreamingSessionURLCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSAcuityReader", "GetHLSStreamingSessionURL", {}).n("KinesisVideoArchivedMediaClient", "GetHLSStreamingSessionURLCommand").f(void 0, void 0).ser(se_GetHLSStreamingSessionURLCommand).de(de_GetHLSStreamingSessionURLCommand).build() {
};
__name(_GetHLSStreamingSessionURLCommand, "GetHLSStreamingSessionURLCommand");
var GetHLSStreamingSessionURLCommand = _GetHLSStreamingSessionURLCommand;

// src/commands/GetImagesCommand.ts




var _GetImagesCommand = class _GetImagesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSAcuityReader", "GetImages", {}).n("KinesisVideoArchivedMediaClient", "GetImagesCommand").f(void 0, void 0).ser(se_GetImagesCommand).de(de_GetImagesCommand).build() {
};
__name(_GetImagesCommand, "GetImagesCommand");
var GetImagesCommand = _GetImagesCommand;

// src/commands/GetMediaForFragmentListCommand.ts




var _GetMediaForFragmentListCommand = class _GetMediaForFragmentListCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSAcuityReader", "GetMediaForFragmentList", {}).n("KinesisVideoArchivedMediaClient", "GetMediaForFragmentListCommand").f(void 0, GetMediaForFragmentListOutputFilterSensitiveLog).ser(se_GetMediaForFragmentListCommand).de(de_GetMediaForFragmentListCommand).build() {
};
__name(_GetMediaForFragmentListCommand, "GetMediaForFragmentListCommand");
var GetMediaForFragmentListCommand = _GetMediaForFragmentListCommand;

// src/commands/ListFragmentsCommand.ts




var _ListFragmentsCommand = class _ListFragmentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSAcuityReader", "ListFragments", {}).n("KinesisVideoArchivedMediaClient", "ListFragmentsCommand").f(void 0, void 0).ser(se_ListFragmentsCommand).de(de_ListFragmentsCommand).build() {
};
__name(_ListFragmentsCommand, "ListFragmentsCommand");
var ListFragmentsCommand = _ListFragmentsCommand;

// src/KinesisVideoArchivedMedia.ts
var commands = {
  GetClipCommand,
  GetDASHStreamingSessionURLCommand,
  GetHLSStreamingSessionURLCommand,
  GetImagesCommand,
  GetMediaForFragmentListCommand,
  ListFragmentsCommand
};
var _KinesisVideoArchivedMedia = class _KinesisVideoArchivedMedia extends KinesisVideoArchivedMediaClient {
};
__name(_KinesisVideoArchivedMedia, "KinesisVideoArchivedMedia");
var KinesisVideoArchivedMedia = _KinesisVideoArchivedMedia;
(0, import_smithy_client.createAggregatedClient)(commands, KinesisVideoArchivedMedia);

// src/pagination/GetImagesPaginator.ts

var paginateGetImages = (0, import_core.createPaginator)(KinesisVideoArchivedMediaClient, GetImagesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListFragmentsPaginator.ts

var paginateListFragments = (0, import_core.createPaginator)(KinesisVideoArchivedMediaClient, ListFragmentsCommand, "NextToken", "NextToken", "MaxResults");

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  KinesisVideoArchivedMediaServiceException,
  __Client,
  KinesisVideoArchivedMediaClient,
  KinesisVideoArchivedMedia,
  $Command,
  GetClipCommand,
  GetDASHStreamingSessionURLCommand,
  GetHLSStreamingSessionURLCommand,
  GetImagesCommand,
  GetMediaForFragmentListCommand,
  ListFragmentsCommand,
  paginateGetImages,
  paginateListFragments,
  ClientLimitExceededException,
  ClipFragmentSelectorType,
  InvalidArgumentException,
  InvalidCodecPrivateDataException,
  InvalidMediaFrameException,
  MissingCodecPrivateDataException,
  NoDataRetentionException,
  NotAuthorizedException,
  ResourceNotFoundException,
  UnsupportedStreamMediaTypeException,
  DASHFragmentSelectorType,
  DASHDisplayFragmentNumber,
  DASHDisplayFragmentTimestamp,
  DASHPlaybackMode,
  ContainerFormat,
  HLSDiscontinuityMode,
  HLSDisplayFragmentTimestamp,
  HLSFragmentSelectorType,
  HLSPlaybackMode,
  Format,
  FormatConfigKey,
  ImageSelectorType,
  ImageError,
  FragmentSelectorType,
  GetClipOutputFilterSensitiveLog,
  GetMediaForFragmentListOutputFilterSensitiveLog
});

