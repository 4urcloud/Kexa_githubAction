import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { RoboMakerServiceException as __BaseException } from "./RoboMakerServiceException";
export declare const Architecture: {
  readonly ARM64: "ARM64";
  readonly ARMHF: "ARMHF";
  readonly X86_64: "X86_64";
};
export type Architecture = (typeof Architecture)[keyof typeof Architecture];
export interface BatchDeleteWorldsRequest {
  worlds: string[] | undefined;
}
export interface BatchDeleteWorldsResponse {
  unprocessedWorlds?: string[];
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface BatchDescribeSimulationJobRequest {
  jobs: string[] | undefined;
}
export declare const ComputeType: {
  readonly CPU: "CPU";
  readonly GPU_AND_CPU: "GPU_AND_CPU";
};
export type ComputeType = (typeof ComputeType)[keyof typeof ComputeType];
export interface ComputeResponse {
  simulationUnitLimit?: number;
  computeType?: ComputeType;
  gpuUnitLimit?: number;
}
export interface S3KeyOutput {
  s3Key?: string;
  etag?: string;
}
export declare const DataSourceType: {
  readonly Archive: "Archive";
  readonly File: "File";
  readonly Prefix: "Prefix";
};
export type DataSourceType =
  (typeof DataSourceType)[keyof typeof DataSourceType];
export interface DataSource {
  name?: string;
  s3Bucket?: string;
  s3Keys?: S3KeyOutput[];
  type?: DataSourceType;
  destination?: string;
}
export declare const FailureBehavior: {
  readonly Continue: "Continue";
  readonly Fail: "Fail";
};
export type FailureBehavior =
  (typeof FailureBehavior)[keyof typeof FailureBehavior];
export declare const SimulationJobErrorCode: {
  readonly BadPermissionsCloudwatchLogs: "BadPermissionsCloudwatchLogs";
  readonly BadPermissionsRobotApplication: "BadPermissionsRobotApplication";
  readonly BadPermissionsS3Object: "BadPermissionsS3Object";
  readonly BadPermissionsS3Output: "BadPermissionsS3Output";
  readonly BadPermissionsSimulationApplication: "BadPermissionsSimulationApplication";
  readonly BadPermissionsUserCredentials: "BadPermissionsUserCredentials";
  readonly BatchCanceled: "BatchCanceled";
  readonly BatchTimedOut: "BatchTimedOut";
  readonly ENILimitExceeded: "ENILimitExceeded";
  readonly InternalServiceError: "InternalServiceError";
  readonly InvalidBundleRobotApplication: "InvalidBundleRobotApplication";
  readonly InvalidBundleSimulationApplication: "InvalidBundleSimulationApplication";
  readonly InvalidInput: "InvalidInput";
  readonly InvalidS3Resource: "InvalidS3Resource";
  readonly LimitExceeded: "LimitExceeded";
  readonly MismatchedEtag: "MismatchedEtag";
  readonly RequestThrottled: "RequestThrottled";
  readonly ResourceNotFound: "ResourceNotFound";
  readonly RobotApplicationCrash: "RobotApplicationCrash";
  readonly RobotApplicationHealthCheckFailure: "RobotApplicationHealthCheckFailure";
  readonly RobotApplicationVersionMismatchedEtag: "RobotApplicationVersionMismatchedEtag";
  readonly SimulationApplicationCrash: "SimulationApplicationCrash";
  readonly SimulationApplicationHealthCheckFailure: "SimulationApplicationHealthCheckFailure";
  readonly SimulationApplicationVersionMismatchedEtag: "SimulationApplicationVersionMismatchedEtag";
  readonly SubnetIpLimitExceeded: "SubnetIpLimitExceeded";
  readonly ThrottlingError: "ThrottlingError";
  readonly UploadContentMismatchError: "UploadContentMismatchError";
  readonly WrongRegionRobotApplication: "WrongRegionRobotApplication";
  readonly WrongRegionS3Bucket: "WrongRegionS3Bucket";
  readonly WrongRegionS3Output: "WrongRegionS3Output";
  readonly WrongRegionSimulationApplication: "WrongRegionSimulationApplication";
};
export type SimulationJobErrorCode =
  (typeof SimulationJobErrorCode)[keyof typeof SimulationJobErrorCode];
export interface LoggingConfig {
  recordAllRosTopics?: boolean;
}
export interface NetworkInterface {
  networkInterfaceId?: string;
  privateIpAddress?: string;
  publicIpAddress?: string;
}
export interface OutputLocation {
  s3Bucket?: string;
  s3Prefix?: string;
}
export interface PortMapping {
  jobPort: number | undefined;
  applicationPort: number | undefined;
  enableOnPublicIp?: boolean;
}
export interface PortForwardingConfig {
  portMappings?: PortMapping[];
}
export interface LaunchConfig {
  packageName?: string;
  launchFile?: string;
  environmentVariables?: Record<string, string>;
  portForwardingConfig?: PortForwardingConfig;
  streamUI?: boolean;
  command?: string[];
}
export declare const ExitBehavior: {
  readonly FAIL: "FAIL";
  readonly RESTART: "RESTART";
};
export type ExitBehavior = (typeof ExitBehavior)[keyof typeof ExitBehavior];
export interface Tool {
  streamUI?: boolean;
  name: string | undefined;
  command: string | undefined;
  streamOutputToCloudWatch?: boolean;
  exitBehavior?: ExitBehavior;
}
export declare const UploadBehavior: {
  readonly UPLOAD_ON_TERMINATE: "UPLOAD_ON_TERMINATE";
  readonly UPLOAD_ROLLING_AUTO_REMOVE: "UPLOAD_ROLLING_AUTO_REMOVE";
};
export type UploadBehavior =
  (typeof UploadBehavior)[keyof typeof UploadBehavior];
export interface UploadConfiguration {
  name: string | undefined;
  path: string | undefined;
  uploadBehavior: UploadBehavior | undefined;
}
export interface RobotApplicationConfig {
  application: string | undefined;
  applicationVersion?: string;
  launchConfig: LaunchConfig | undefined;
  uploadConfigurations?: UploadConfiguration[];
  useDefaultUploadConfigurations?: boolean;
  tools?: Tool[];
  useDefaultTools?: boolean;
}
export interface WorldConfig {
  world?: string;
}
export interface SimulationApplicationConfig {
  application: string | undefined;
  applicationVersion?: string;
  launchConfig: LaunchConfig | undefined;
  uploadConfigurations?: UploadConfiguration[];
  worldConfigs?: WorldConfig[];
  useDefaultUploadConfigurations?: boolean;
  tools?: Tool[];
  useDefaultTools?: boolean;
}
export declare const SimulationJobStatus: {
  readonly Canceled: "Canceled";
  readonly Completed: "Completed";
  readonly Failed: "Failed";
  readonly Pending: "Pending";
  readonly Preparing: "Preparing";
  readonly Restarting: "Restarting";
  readonly Running: "Running";
  readonly RunningFailed: "RunningFailed";
  readonly Terminated: "Terminated";
  readonly Terminating: "Terminating";
};
export type SimulationJobStatus =
  (typeof SimulationJobStatus)[keyof typeof SimulationJobStatus];
export interface VPCConfigResponse {
  subnets?: string[];
  securityGroups?: string[];
  vpcId?: string;
  assignPublicIp?: boolean;
}
export interface SimulationJob {
  arn?: string;
  name?: string;
  status?: SimulationJobStatus;
  lastStartedAt?: Date;
  lastUpdatedAt?: Date;
  failureBehavior?: FailureBehavior;
  failureCode?: SimulationJobErrorCode;
  failureReason?: string;
  clientRequestToken?: string;
  outputLocation?: OutputLocation;
  loggingConfig?: LoggingConfig;
  maxJobDurationInSeconds?: number;
  simulationTimeMillis?: number;
  iamRole?: string;
  robotApplications?: RobotApplicationConfig[];
  simulationApplications?: SimulationApplicationConfig[];
  dataSources?: DataSource[];
  tags?: Record<string, string>;
  vpcConfig?: VPCConfigResponse;
  networkInterface?: NetworkInterface;
  compute?: ComputeResponse;
}
export interface BatchDescribeSimulationJobResponse {
  jobs?: SimulationJob[];
  unprocessedJobs?: string[];
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface BatchPolicy {
  timeoutInSeconds?: number;
  maxConcurrency?: number;
}
export interface CancelDeploymentJobRequest {
  job: string | undefined;
}
export interface CancelDeploymentJobResponse {}
export interface CancelSimulationJobRequest {
  job: string | undefined;
}
export interface CancelSimulationJobResponse {}
export interface CancelSimulationJobBatchRequest {
  batch: string | undefined;
}
export interface CancelSimulationJobBatchResponse {}
export interface CancelWorldExportJobRequest {
  job: string | undefined;
}
export interface CancelWorldExportJobResponse {}
export interface CancelWorldGenerationJobRequest {
  job: string | undefined;
}
export interface CancelWorldGenerationJobResponse {}
export interface Compute {
  simulationUnitLimit?: number;
  computeType?: ComputeType;
  gpuUnitLimit?: number;
}
export declare class ConcurrentDeploymentException extends __BaseException {
  readonly name: "ConcurrentDeploymentException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ConcurrentDeploymentException, __BaseException>
  );
}
export interface DeploymentLaunchConfig {
  packageName: string | undefined;
  preLaunchFile?: string;
  launchFile: string | undefined;
  postLaunchFile?: string;
  environmentVariables?: Record<string, string>;
}
export interface DeploymentApplicationConfig {
  application: string | undefined;
  applicationVersion: string | undefined;
  launchConfig: DeploymentLaunchConfig | undefined;
}
export interface S3Object {
  bucket: string | undefined;
  key: string | undefined;
  etag?: string;
}
export interface DeploymentConfig {
  concurrentDeploymentPercentage?: number;
  failureThresholdPercentage?: number;
  robotDeploymentTimeoutInSeconds?: number;
  downloadConditionFile?: S3Object;
}
export interface CreateDeploymentJobRequest {
  deploymentConfig?: DeploymentConfig;
  clientRequestToken?: string;
  fleet: string | undefined;
  deploymentApplicationConfigs: DeploymentApplicationConfig[] | undefined;
  tags?: Record<string, string>;
}
export declare const DeploymentJobErrorCode: {
  readonly BadLambdaAssociated: "BadLambdaAssociated";
  readonly BadPermissionError: "BadPermissionError";
  readonly DeploymentFleetDoesNotExist: "DeploymentFleetDoesNotExist";
  readonly DownloadConditionFailed: "DownloadConditionFailed";
  readonly EnvironmentSetupError: "EnvironmentSetupError";
  readonly EtagMismatch: "EtagMismatch";
  readonly ExtractingBundleFailure: "ExtractingBundleFailure";
  readonly FailureThresholdBreached: "FailureThresholdBreached";
  readonly FleetDeploymentTimeout: "FleetDeploymentTimeout";
  readonly GreengrassDeploymentFailed: "GreengrassDeploymentFailed";
  readonly GreengrassGroupVersionDoesNotExist: "GreengrassGroupVersionDoesNotExist";
  readonly InternalServerError: "InternalServerError";
  readonly InvalidGreengrassGroup: "InvalidGreengrassGroup";
  readonly LambdaDeleted: "LambdaDeleted";
  readonly MissingRobotApplicationArchitecture: "MissingRobotApplicationArchitecture";
  readonly MissingRobotArchitecture: "MissingRobotArchitecture";
  readonly MissingRobotDeploymentResource: "MissingRobotDeploymentResource";
  readonly PostLaunchFileFailure: "PostLaunchFileFailure";
  readonly PreLaunchFileFailure: "PreLaunchFileFailure";
  readonly ResourceNotFound: "ResourceNotFound";
  readonly RobotAgentConnectionTimeout: "RobotAgentConnectionTimeout";
  readonly RobotApplicationDoesNotExist: "RobotApplicationDoesNotExist";
  readonly RobotDeploymentAborted: "RobotDeploymentAborted";
  readonly RobotDeploymentNoResponse: "RobotDeploymentNoResponse";
};
export type DeploymentJobErrorCode =
  (typeof DeploymentJobErrorCode)[keyof typeof DeploymentJobErrorCode];
export declare const DeploymentStatus: {
  readonly Canceled: "Canceled";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Pending: "Pending";
  readonly Preparing: "Preparing";
  readonly Succeeded: "Succeeded";
};
export type DeploymentStatus =
  (typeof DeploymentStatus)[keyof typeof DeploymentStatus];
export interface CreateDeploymentJobResponse {
  arn?: string;
  fleet?: string;
  status?: DeploymentStatus;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[];
  failureReason?: string;
  failureCode?: DeploymentJobErrorCode;
  createdAt?: Date;
  deploymentConfig?: DeploymentConfig;
  tags?: Record<string, string>;
}
export declare class IdempotentParameterMismatchException extends __BaseException {
  readonly name: "IdempotentParameterMismatchException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      IdempotentParameterMismatchException,
      __BaseException
    >
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export interface CreateFleetRequest {
  name: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateFleetResponse {
  arn?: string;
  name?: string;
  createdAt?: Date;
  tags?: Record<string, string>;
}
export interface CreateRobotRequest {
  name: string | undefined;
  architecture: Architecture | undefined;
  greengrassGroupId: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateRobotResponse {
  arn?: string;
  name?: string;
  createdAt?: Date;
  greengrassGroupId?: string;
  architecture?: Architecture;
  tags?: Record<string, string>;
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface Environment {
  uri?: string;
}
export declare const RobotSoftwareSuiteType: {
  readonly General: "General";
  readonly ROS: "ROS";
  readonly ROS2: "ROS2";
};
export type RobotSoftwareSuiteType =
  (typeof RobotSoftwareSuiteType)[keyof typeof RobotSoftwareSuiteType];
export declare const RobotSoftwareSuiteVersionType: {
  readonly Dashing: "Dashing";
  readonly Foxy: "Foxy";
  readonly Kinetic: "Kinetic";
  readonly Melodic: "Melodic";
};
export type RobotSoftwareSuiteVersionType =
  (typeof RobotSoftwareSuiteVersionType)[keyof typeof RobotSoftwareSuiteVersionType];
export interface RobotSoftwareSuite {
  name?: RobotSoftwareSuiteType;
  version?: RobotSoftwareSuiteVersionType;
}
export interface SourceConfig {
  s3Bucket?: string;
  s3Key?: string;
  architecture?: Architecture;
}
export interface CreateRobotApplicationRequest {
  name: string | undefined;
  sources?: SourceConfig[];
  robotSoftwareSuite: RobotSoftwareSuite | undefined;
  tags?: Record<string, string>;
  environment?: Environment;
}
export interface Source {
  s3Bucket?: string;
  s3Key?: string;
  etag?: string;
  architecture?: Architecture;
}
export interface CreateRobotApplicationResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  robotSoftwareSuite?: RobotSoftwareSuite;
  lastUpdatedAt?: Date;
  revisionId?: string;
  tags?: Record<string, string>;
  environment?: Environment;
}
export interface CreateRobotApplicationVersionRequest {
  application: string | undefined;
  currentRevisionId?: string;
  s3Etags?: string[];
  imageDigest?: string;
}
export interface CreateRobotApplicationVersionResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  robotSoftwareSuite?: RobotSoftwareSuite;
  lastUpdatedAt?: Date;
  revisionId?: string;
  environment?: Environment;
}
export declare const RenderingEngineType: {
  readonly OGRE: "OGRE";
};
export type RenderingEngineType =
  (typeof RenderingEngineType)[keyof typeof RenderingEngineType];
export interface RenderingEngine {
  name?: RenderingEngineType;
  version?: string;
}
export declare const SimulationSoftwareSuiteType: {
  readonly Gazebo: "Gazebo";
  readonly RosbagPlay: "RosbagPlay";
  readonly SimulationRuntime: "SimulationRuntime";
};
export type SimulationSoftwareSuiteType =
  (typeof SimulationSoftwareSuiteType)[keyof typeof SimulationSoftwareSuiteType];
export interface SimulationSoftwareSuite {
  name?: SimulationSoftwareSuiteType;
  version?: string;
}
export interface CreateSimulationApplicationRequest {
  name: string | undefined;
  sources?: SourceConfig[];
  simulationSoftwareSuite: SimulationSoftwareSuite | undefined;
  robotSoftwareSuite: RobotSoftwareSuite | undefined;
  renderingEngine?: RenderingEngine;
  tags?: Record<string, string>;
  environment?: Environment;
}
export interface CreateSimulationApplicationResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  simulationSoftwareSuite?: SimulationSoftwareSuite;
  robotSoftwareSuite?: RobotSoftwareSuite;
  renderingEngine?: RenderingEngine;
  lastUpdatedAt?: Date;
  revisionId?: string;
  tags?: Record<string, string>;
  environment?: Environment;
}
export interface CreateSimulationApplicationVersionRequest {
  application: string | undefined;
  currentRevisionId?: string;
  s3Etags?: string[];
  imageDigest?: string;
}
export interface CreateSimulationApplicationVersionResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  simulationSoftwareSuite?: SimulationSoftwareSuite;
  robotSoftwareSuite?: RobotSoftwareSuite;
  renderingEngine?: RenderingEngine;
  lastUpdatedAt?: Date;
  revisionId?: string;
  environment?: Environment;
}
export interface DataSourceConfig {
  name: string | undefined;
  s3Bucket: string | undefined;
  s3Keys: string[] | undefined;
  type?: DataSourceType;
  destination?: string;
}
export interface VPCConfig {
  subnets: string[] | undefined;
  securityGroups?: string[];
  assignPublicIp?: boolean;
}
export interface CreateSimulationJobRequest {
  clientRequestToken?: string;
  outputLocation?: OutputLocation;
  loggingConfig?: LoggingConfig;
  maxJobDurationInSeconds: number | undefined;
  iamRole: string | undefined;
  failureBehavior?: FailureBehavior;
  robotApplications?: RobotApplicationConfig[];
  simulationApplications?: SimulationApplicationConfig[];
  dataSources?: DataSourceConfig[];
  tags?: Record<string, string>;
  vpcConfig?: VPCConfig;
  compute?: Compute;
}
export interface CreateSimulationJobResponse {
  arn?: string;
  status?: SimulationJobStatus;
  lastStartedAt?: Date;
  lastUpdatedAt?: Date;
  failureBehavior?: FailureBehavior;
  failureCode?: SimulationJobErrorCode;
  clientRequestToken?: string;
  outputLocation?: OutputLocation;
  loggingConfig?: LoggingConfig;
  maxJobDurationInSeconds?: number;
  simulationTimeMillis?: number;
  iamRole?: string;
  robotApplications?: RobotApplicationConfig[];
  simulationApplications?: SimulationApplicationConfig[];
  dataSources?: DataSource[];
  tags?: Record<string, string>;
  vpcConfig?: VPCConfigResponse;
  compute?: ComputeResponse;
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export interface SimulationJobRequest {
  outputLocation?: OutputLocation;
  loggingConfig?: LoggingConfig;
  maxJobDurationInSeconds: number | undefined;
  iamRole?: string;
  failureBehavior?: FailureBehavior;
  useDefaultApplications?: boolean;
  robotApplications?: RobotApplicationConfig[];
  simulationApplications?: SimulationApplicationConfig[];
  dataSources?: DataSourceConfig[];
  vpcConfig?: VPCConfig;
  compute?: Compute;
  tags?: Record<string, string>;
}
export interface CreateWorldExportJobRequest {
  clientRequestToken?: string;
  worlds: string[] | undefined;
  outputLocation: OutputLocation | undefined;
  iamRole: string | undefined;
  tags?: Record<string, string>;
}
export declare const WorldExportJobErrorCode: {
  readonly AccessDenied: "AccessDenied";
  readonly InternalServiceError: "InternalServiceError";
  readonly InvalidInput: "InvalidInput";
  readonly LimitExceeded: "LimitExceeded";
  readonly RequestThrottled: "RequestThrottled";
  readonly ResourceNotFound: "ResourceNotFound";
};
export type WorldExportJobErrorCode =
  (typeof WorldExportJobErrorCode)[keyof typeof WorldExportJobErrorCode];
export declare const WorldExportJobStatus: {
  readonly Canceled: "Canceled";
  readonly Canceling: "Canceling";
  readonly Completed: "Completed";
  readonly Failed: "Failed";
  readonly Pending: "Pending";
  readonly Running: "Running";
};
export type WorldExportJobStatus =
  (typeof WorldExportJobStatus)[keyof typeof WorldExportJobStatus];
export interface CreateWorldExportJobResponse {
  arn?: string;
  status?: WorldExportJobStatus;
  createdAt?: Date;
  failureCode?: WorldExportJobErrorCode;
  clientRequestToken?: string;
  outputLocation?: OutputLocation;
  iamRole?: string;
  tags?: Record<string, string>;
}
export interface WorldCount {
  floorplanCount?: number;
  interiorCountPerFloorplan?: number;
}
export interface CreateWorldGenerationJobRequest {
  clientRequestToken?: string;
  template: string | undefined;
  worldCount: WorldCount | undefined;
  tags?: Record<string, string>;
  worldTags?: Record<string, string>;
}
export declare const WorldGenerationJobErrorCode: {
  readonly AllWorldGenerationFailed: "AllWorldGenerationFailed";
  readonly InternalServiceError: "InternalServiceError";
  readonly InvalidInput: "InvalidInput";
  readonly LimitExceeded: "LimitExceeded";
  readonly RequestThrottled: "RequestThrottled";
  readonly ResourceNotFound: "ResourceNotFound";
};
export type WorldGenerationJobErrorCode =
  (typeof WorldGenerationJobErrorCode)[keyof typeof WorldGenerationJobErrorCode];
export declare const WorldGenerationJobStatus: {
  readonly Canceled: "Canceled";
  readonly Canceling: "Canceling";
  readonly Completed: "Completed";
  readonly Failed: "Failed";
  readonly PartialFailed: "PartialFailed";
  readonly Pending: "Pending";
  readonly Running: "Running";
};
export type WorldGenerationJobStatus =
  (typeof WorldGenerationJobStatus)[keyof typeof WorldGenerationJobStatus];
export interface CreateWorldGenerationJobResponse {
  arn?: string;
  status?: WorldGenerationJobStatus;
  createdAt?: Date;
  failureCode?: WorldGenerationJobErrorCode;
  clientRequestToken?: string;
  template?: string;
  worldCount?: WorldCount;
  tags?: Record<string, string>;
  worldTags?: Record<string, string>;
}
export interface TemplateLocation {
  s3Bucket: string | undefined;
  s3Key: string | undefined;
}
export interface CreateWorldTemplateRequest {
  clientRequestToken?: string;
  name?: string;
  templateBody?: string;
  templateLocation?: TemplateLocation;
  tags?: Record<string, string>;
}
export interface CreateWorldTemplateResponse {
  arn?: string;
  clientRequestToken?: string;
  createdAt?: Date;
  name?: string;
  tags?: Record<string, string>;
}
export interface DeleteFleetRequest {
  fleet: string | undefined;
}
export interface DeleteFleetResponse {}
export interface DeleteRobotRequest {
  robot: string | undefined;
}
export interface DeleteRobotResponse {}
export interface DeleteRobotApplicationRequest {
  application: string | undefined;
  applicationVersion?: string;
}
export interface DeleteRobotApplicationResponse {}
export interface DeleteSimulationApplicationRequest {
  application: string | undefined;
  applicationVersion?: string;
}
export interface DeleteSimulationApplicationResponse {}
export interface DeleteWorldTemplateRequest {
  template: string | undefined;
}
export interface DeleteWorldTemplateResponse {}
export interface DeploymentJob {
  arn?: string;
  fleet?: string;
  status?: DeploymentStatus;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[];
  deploymentConfig?: DeploymentConfig;
  failureReason?: string;
  failureCode?: DeploymentJobErrorCode;
  createdAt?: Date;
}
export interface DeregisterRobotRequest {
  fleet: string | undefined;
  robot: string | undefined;
}
export interface DeregisterRobotResponse {
  fleet?: string;
  robot?: string;
}
export interface DescribeDeploymentJobRequest {
  job: string | undefined;
}
export declare const RobotDeploymentStep: {
  readonly DownloadingExtractingStep: "DownloadingExtracting";
  readonly ExecutingDownloadCondition: "ExecutingDownloadCondition";
  readonly FinishedStep: "Finished";
  readonly LaunchingStep: "Launching";
  readonly PostLaunchStep: "ExecutingPostLaunch";
  readonly PreLaunchStep: "ExecutingPreLaunch";
  readonly ValidatingStep: "Validating";
};
export type RobotDeploymentStep =
  (typeof RobotDeploymentStep)[keyof typeof RobotDeploymentStep];
export interface ProgressDetail {
  currentProgress?: RobotDeploymentStep;
  percentDone?: number;
  estimatedTimeRemainingSeconds?: number;
  targetResource?: string;
}
export declare const RobotStatus: {
  readonly Available: "Available";
  readonly Deploying: "Deploying";
  readonly Failed: "Failed";
  readonly InSync: "InSync";
  readonly NoResponse: "NoResponse";
  readonly PendingNewDeployment: "PendingNewDeployment";
  readonly Registered: "Registered";
};
export type RobotStatus = (typeof RobotStatus)[keyof typeof RobotStatus];
export interface RobotDeployment {
  arn?: string;
  deploymentStartTime?: Date;
  deploymentFinishTime?: Date;
  status?: RobotStatus;
  progressDetail?: ProgressDetail;
  failureReason?: string;
  failureCode?: DeploymentJobErrorCode;
}
export interface DescribeDeploymentJobResponse {
  arn?: string;
  fleet?: string;
  status?: DeploymentStatus;
  deploymentConfig?: DeploymentConfig;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[];
  failureReason?: string;
  failureCode?: DeploymentJobErrorCode;
  createdAt?: Date;
  robotDeploymentSummary?: RobotDeployment[];
  tags?: Record<string, string>;
}
export interface DescribeFleetRequest {
  fleet: string | undefined;
}
export interface Robot {
  arn?: string;
  name?: string;
  fleetArn?: string;
  status?: RobotStatus;
  greenGrassGroupId?: string;
  createdAt?: Date;
  architecture?: Architecture;
  lastDeploymentJob?: string;
  lastDeploymentTime?: Date;
}
export interface DescribeFleetResponse {
  name?: string;
  arn?: string;
  robots?: Robot[];
  createdAt?: Date;
  lastDeploymentStatus?: DeploymentStatus;
  lastDeploymentJob?: string;
  lastDeploymentTime?: Date;
  tags?: Record<string, string>;
}
export interface DescribeRobotRequest {
  robot: string | undefined;
}
export interface DescribeRobotResponse {
  arn?: string;
  name?: string;
  fleetArn?: string;
  status?: RobotStatus;
  greengrassGroupId?: string;
  createdAt?: Date;
  architecture?: Architecture;
  lastDeploymentJob?: string;
  lastDeploymentTime?: Date;
  tags?: Record<string, string>;
}
export interface DescribeRobotApplicationRequest {
  application: string | undefined;
  applicationVersion?: string;
}
export interface DescribeRobotApplicationResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  robotSoftwareSuite?: RobotSoftwareSuite;
  revisionId?: string;
  lastUpdatedAt?: Date;
  tags?: Record<string, string>;
  environment?: Environment;
  imageDigest?: string;
}
export interface DescribeSimulationApplicationRequest {
  application: string | undefined;
  applicationVersion?: string;
}
export interface DescribeSimulationApplicationResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  simulationSoftwareSuite?: SimulationSoftwareSuite;
  robotSoftwareSuite?: RobotSoftwareSuite;
  renderingEngine?: RenderingEngine;
  revisionId?: string;
  lastUpdatedAt?: Date;
  tags?: Record<string, string>;
  environment?: Environment;
  imageDigest?: string;
}
export interface DescribeSimulationJobRequest {
  job: string | undefined;
}
export interface DescribeSimulationJobResponse {
  arn?: string;
  name?: string;
  status?: SimulationJobStatus;
  lastStartedAt?: Date;
  lastUpdatedAt?: Date;
  failureBehavior?: FailureBehavior;
  failureCode?: SimulationJobErrorCode;
  failureReason?: string;
  clientRequestToken?: string;
  outputLocation?: OutputLocation;
  loggingConfig?: LoggingConfig;
  maxJobDurationInSeconds?: number;
  simulationTimeMillis?: number;
  iamRole?: string;
  robotApplications?: RobotApplicationConfig[];
  simulationApplications?: SimulationApplicationConfig[];
  dataSources?: DataSource[];
  tags?: Record<string, string>;
  vpcConfig?: VPCConfigResponse;
  networkInterface?: NetworkInterface;
  compute?: ComputeResponse;
}
export interface DescribeSimulationJobBatchRequest {
  batch: string | undefined;
}
export interface SimulationJobSummary {
  arn?: string;
  lastUpdatedAt?: Date;
  name?: string;
  status?: SimulationJobStatus;
  simulationApplicationNames?: string[];
  robotApplicationNames?: string[];
  dataSourceNames?: string[];
  computeType?: ComputeType;
}
export interface FailedCreateSimulationJobRequest {
  request?: SimulationJobRequest;
  failureReason?: string;
  failureCode?: SimulationJobErrorCode;
  failedAt?: Date;
}
export declare const SimulationJobBatchErrorCode: {
  readonly InternalServiceError: "InternalServiceError";
};
export type SimulationJobBatchErrorCode =
  (typeof SimulationJobBatchErrorCode)[keyof typeof SimulationJobBatchErrorCode];
export declare const SimulationJobBatchStatus: {
  readonly Canceled: "Canceled";
  readonly Canceling: "Canceling";
  readonly Completed: "Completed";
  readonly Completing: "Completing";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Pending: "Pending";
  readonly TimedOut: "TimedOut";
  readonly TimingOut: "TimingOut";
};
export type SimulationJobBatchStatus =
  (typeof SimulationJobBatchStatus)[keyof typeof SimulationJobBatchStatus];
export interface DescribeSimulationJobBatchResponse {
  arn?: string;
  status?: SimulationJobBatchStatus;
  lastUpdatedAt?: Date;
  createdAt?: Date;
  clientRequestToken?: string;
  batchPolicy?: BatchPolicy;
  failureCode?: SimulationJobBatchErrorCode;
  failureReason?: string;
  failedRequests?: FailedCreateSimulationJobRequest[];
  pendingRequests?: SimulationJobRequest[];
  createdRequests?: SimulationJobSummary[];
  tags?: Record<string, string>;
}
export interface DescribeWorldRequest {
  world: string | undefined;
}
export interface DescribeWorldResponse {
  arn?: string;
  generationJob?: string;
  template?: string;
  createdAt?: Date;
  tags?: Record<string, string>;
  worldDescriptionBody?: string;
}
export interface DescribeWorldExportJobRequest {
  job: string | undefined;
}
export interface DescribeWorldExportJobResponse {
  arn?: string;
  status?: WorldExportJobStatus;
  createdAt?: Date;
  failureCode?: WorldExportJobErrorCode;
  failureReason?: string;
  clientRequestToken?: string;
  worlds?: string[];
  outputLocation?: OutputLocation;
  iamRole?: string;
  tags?: Record<string, string>;
}
export interface DescribeWorldGenerationJobRequest {
  job: string | undefined;
}
export interface WorldFailure {
  failureCode?: WorldGenerationJobErrorCode;
  sampleFailureReason?: string;
  failureCount?: number;
}
export interface FailureSummary {
  totalFailureCount?: number;
  failures?: WorldFailure[];
}
export interface FinishedWorldsSummary {
  finishedCount?: number;
  succeededWorlds?: string[];
  failureSummary?: FailureSummary;
}
export interface DescribeWorldGenerationJobResponse {
  arn?: string;
  status?: WorldGenerationJobStatus;
  createdAt?: Date;
  failureCode?: WorldGenerationJobErrorCode;
  failureReason?: string;
  clientRequestToken?: string;
  template?: string;
  worldCount?: WorldCount;
  finishedWorldsSummary?: FinishedWorldsSummary;
  tags?: Record<string, string>;
  worldTags?: Record<string, string>;
}
export interface DescribeWorldTemplateRequest {
  template: string | undefined;
}
export interface DescribeWorldTemplateResponse {
  arn?: string;
  clientRequestToken?: string;
  name?: string;
  createdAt?: Date;
  lastUpdatedAt?: Date;
  tags?: Record<string, string>;
  version?: string;
}
export interface Filter {
  name?: string;
  values?: string[];
}
export interface Fleet {
  name?: string;
  arn?: string;
  createdAt?: Date;
  lastDeploymentStatus?: DeploymentStatus;
  lastDeploymentJob?: string;
  lastDeploymentTime?: Date;
}
export interface GetWorldTemplateBodyRequest {
  template?: string;
  generationJob?: string;
}
export interface GetWorldTemplateBodyResponse {
  templateBody?: string;
}
export interface ListDeploymentJobsRequest {
  filters?: Filter[];
  nextToken?: string;
  maxResults?: number;
}
export interface ListDeploymentJobsResponse {
  deploymentJobs?: DeploymentJob[];
  nextToken?: string;
}
export interface ListFleetsRequest {
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface ListFleetsResponse {
  fleetDetails?: Fleet[];
  nextToken?: string;
}
export interface ListRobotApplicationsRequest {
  versionQualifier?: string;
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface RobotApplicationSummary {
  name?: string;
  arn?: string;
  version?: string;
  lastUpdatedAt?: Date;
  robotSoftwareSuite?: RobotSoftwareSuite;
}
export interface ListRobotApplicationsResponse {
  robotApplicationSummaries?: RobotApplicationSummary[];
  nextToken?: string;
}
export interface ListRobotsRequest {
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface ListRobotsResponse {
  robots?: Robot[];
  nextToken?: string;
}
export interface ListSimulationApplicationsRequest {
  versionQualifier?: string;
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface SimulationApplicationSummary {
  name?: string;
  arn?: string;
  version?: string;
  lastUpdatedAt?: Date;
  robotSoftwareSuite?: RobotSoftwareSuite;
  simulationSoftwareSuite?: SimulationSoftwareSuite;
}
export interface ListSimulationApplicationsResponse {
  simulationApplicationSummaries?: SimulationApplicationSummary[];
  nextToken?: string;
}
export interface ListSimulationJobBatchesRequest {
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface SimulationJobBatchSummary {
  arn?: string;
  lastUpdatedAt?: Date;
  createdAt?: Date;
  status?: SimulationJobBatchStatus;
  failedRequestCount?: number;
  pendingRequestCount?: number;
  createdRequestCount?: number;
}
export interface ListSimulationJobBatchesResponse {
  simulationJobBatchSummaries?: SimulationJobBatchSummary[];
  nextToken?: string;
}
export interface ListSimulationJobsRequest {
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface ListSimulationJobsResponse {
  simulationJobSummaries: SimulationJobSummary[] | undefined;
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListWorldExportJobsRequest {
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface WorldExportJobSummary {
  arn?: string;
  status?: WorldExportJobStatus;
  createdAt?: Date;
  worlds?: string[];
  outputLocation?: OutputLocation;
}
export interface ListWorldExportJobsResponse {
  worldExportJobSummaries: WorldExportJobSummary[] | undefined;
  nextToken?: string;
}
export interface ListWorldGenerationJobsRequest {
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface WorldGenerationJobSummary {
  arn?: string;
  template?: string;
  createdAt?: Date;
  status?: WorldGenerationJobStatus;
  worldCount?: WorldCount;
  succeededWorldCount?: number;
  failedWorldCount?: number;
}
export interface ListWorldGenerationJobsResponse {
  worldGenerationJobSummaries: WorldGenerationJobSummary[] | undefined;
  nextToken?: string;
}
export interface ListWorldsRequest {
  nextToken?: string;
  maxResults?: number;
  filters?: Filter[];
}
export interface WorldSummary {
  arn?: string;
  createdAt?: Date;
  generationJob?: string;
  template?: string;
}
export interface ListWorldsResponse {
  worldSummaries?: WorldSummary[];
  nextToken?: string;
}
export interface ListWorldTemplatesRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface TemplateSummary {
  arn?: string;
  createdAt?: Date;
  lastUpdatedAt?: Date;
  name?: string;
  version?: string;
}
export interface ListWorldTemplatesResponse {
  templateSummaries?: TemplateSummary[];
  nextToken?: string;
}
export interface RegisterRobotRequest {
  fleet: string | undefined;
  robot: string | undefined;
}
export interface RegisterRobotResponse {
  fleet?: string;
  robot?: string;
}
export interface RestartSimulationJobRequest {
  job: string | undefined;
}
export interface RestartSimulationJobResponse {}
export interface StartSimulationJobBatchRequest {
  clientRequestToken?: string;
  batchPolicy?: BatchPolicy;
  createSimulationJobRequests: SimulationJobRequest[] | undefined;
  tags?: Record<string, string>;
}
export interface StartSimulationJobBatchResponse {
  arn?: string;
  status?: SimulationJobBatchStatus;
  createdAt?: Date;
  clientRequestToken?: string;
  batchPolicy?: BatchPolicy;
  failureCode?: SimulationJobBatchErrorCode;
  failureReason?: string;
  failedRequests?: FailedCreateSimulationJobRequest[];
  pendingRequests?: SimulationJobRequest[];
  createdRequests?: SimulationJobSummary[];
  tags?: Record<string, string>;
}
export interface SyncDeploymentJobRequest {
  clientRequestToken?: string;
  fleet: string | undefined;
}
export interface SyncDeploymentJobResponse {
  arn?: string;
  fleet?: string;
  status?: DeploymentStatus;
  deploymentConfig?: DeploymentConfig;
  deploymentApplicationConfigs?: DeploymentApplicationConfig[];
  failureReason?: string;
  failureCode?: DeploymentJobErrorCode;
  createdAt?: Date;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateRobotApplicationRequest {
  application: string | undefined;
  sources?: SourceConfig[];
  robotSoftwareSuite: RobotSoftwareSuite | undefined;
  currentRevisionId?: string;
  environment?: Environment;
}
export interface UpdateRobotApplicationResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  robotSoftwareSuite?: RobotSoftwareSuite;
  lastUpdatedAt?: Date;
  revisionId?: string;
  environment?: Environment;
}
export interface UpdateSimulationApplicationRequest {
  application: string | undefined;
  sources?: SourceConfig[];
  simulationSoftwareSuite: SimulationSoftwareSuite | undefined;
  robotSoftwareSuite: RobotSoftwareSuite | undefined;
  renderingEngine?: RenderingEngine;
  currentRevisionId?: string;
  environment?: Environment;
}
export interface UpdateSimulationApplicationResponse {
  arn?: string;
  name?: string;
  version?: string;
  sources?: Source[];
  simulationSoftwareSuite?: SimulationSoftwareSuite;
  robotSoftwareSuite?: RobotSoftwareSuite;
  renderingEngine?: RenderingEngine;
  lastUpdatedAt?: Date;
  revisionId?: string;
  environment?: Environment;
}
export interface UpdateWorldTemplateRequest {
  template: string | undefined;
  name?: string;
  templateBody?: string;
  templateLocation?: TemplateLocation;
}
export interface UpdateWorldTemplateResponse {
  arn?: string;
  name?: string;
  createdAt?: Date;
  lastUpdatedAt?: Date;
}
