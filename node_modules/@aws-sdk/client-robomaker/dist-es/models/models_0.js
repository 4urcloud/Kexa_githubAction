import { RoboMakerServiceException as __BaseException } from "./RoboMakerServiceException";
export const Architecture = {
    ARM64: "ARM64",
    ARMHF: "ARMHF",
    X86_64: "X86_64",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export const ComputeType = {
    CPU: "CPU",
    GPU_AND_CPU: "GPU_AND_CPU",
};
export const DataSourceType = {
    Archive: "Archive",
    File: "File",
    Prefix: "Prefix",
};
export const FailureBehavior = {
    Continue: "Continue",
    Fail: "Fail",
};
export const SimulationJobErrorCode = {
    BadPermissionsCloudwatchLogs: "BadPermissionsCloudwatchLogs",
    BadPermissionsRobotApplication: "BadPermissionsRobotApplication",
    BadPermissionsS3Object: "BadPermissionsS3Object",
    BadPermissionsS3Output: "BadPermissionsS3Output",
    BadPermissionsSimulationApplication: "BadPermissionsSimulationApplication",
    BadPermissionsUserCredentials: "BadPermissionsUserCredentials",
    BatchCanceled: "BatchCanceled",
    BatchTimedOut: "BatchTimedOut",
    ENILimitExceeded: "ENILimitExceeded",
    InternalServiceError: "InternalServiceError",
    InvalidBundleRobotApplication: "InvalidBundleRobotApplication",
    InvalidBundleSimulationApplication: "InvalidBundleSimulationApplication",
    InvalidInput: "InvalidInput",
    InvalidS3Resource: "InvalidS3Resource",
    LimitExceeded: "LimitExceeded",
    MismatchedEtag: "MismatchedEtag",
    RequestThrottled: "RequestThrottled",
    ResourceNotFound: "ResourceNotFound",
    RobotApplicationCrash: "RobotApplicationCrash",
    RobotApplicationHealthCheckFailure: "RobotApplicationHealthCheckFailure",
    RobotApplicationVersionMismatchedEtag: "RobotApplicationVersionMismatchedEtag",
    SimulationApplicationCrash: "SimulationApplicationCrash",
    SimulationApplicationHealthCheckFailure: "SimulationApplicationHealthCheckFailure",
    SimulationApplicationVersionMismatchedEtag: "SimulationApplicationVersionMismatchedEtag",
    SubnetIpLimitExceeded: "SubnetIpLimitExceeded",
    ThrottlingError: "ThrottlingError",
    UploadContentMismatchError: "UploadContentMismatchError",
    WrongRegionRobotApplication: "WrongRegionRobotApplication",
    WrongRegionS3Bucket: "WrongRegionS3Bucket",
    WrongRegionS3Output: "WrongRegionS3Output",
    WrongRegionSimulationApplication: "WrongRegionSimulationApplication",
};
export const ExitBehavior = {
    FAIL: "FAIL",
    RESTART: "RESTART",
};
export const UploadBehavior = {
    UPLOAD_ON_TERMINATE: "UPLOAD_ON_TERMINATE",
    UPLOAD_ROLLING_AUTO_REMOVE: "UPLOAD_ROLLING_AUTO_REMOVE",
};
export const SimulationJobStatus = {
    Canceled: "Canceled",
    Completed: "Completed",
    Failed: "Failed",
    Pending: "Pending",
    Preparing: "Preparing",
    Restarting: "Restarting",
    Running: "Running",
    RunningFailed: "RunningFailed",
    Terminated: "Terminated",
    Terminating: "Terminating",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ConcurrentDeploymentException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentDeploymentException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentDeploymentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentDeploymentException.prototype);
    }
}
export const DeploymentJobErrorCode = {
    BadLambdaAssociated: "BadLambdaAssociated",
    BadPermissionError: "BadPermissionError",
    DeploymentFleetDoesNotExist: "DeploymentFleetDoesNotExist",
    DownloadConditionFailed: "DownloadConditionFailed",
    EnvironmentSetupError: "EnvironmentSetupError",
    EtagMismatch: "EtagMismatch",
    ExtractingBundleFailure: "ExtractingBundleFailure",
    FailureThresholdBreached: "FailureThresholdBreached",
    FleetDeploymentTimeout: "FleetDeploymentTimeout",
    GreengrassDeploymentFailed: "GreengrassDeploymentFailed",
    GreengrassGroupVersionDoesNotExist: "GreengrassGroupVersionDoesNotExist",
    InternalServerError: "InternalServerError",
    InvalidGreengrassGroup: "InvalidGreengrassGroup",
    LambdaDeleted: "LambdaDeleted",
    MissingRobotApplicationArchitecture: "MissingRobotApplicationArchitecture",
    MissingRobotArchitecture: "MissingRobotArchitecture",
    MissingRobotDeploymentResource: "MissingRobotDeploymentResource",
    PostLaunchFileFailure: "PostLaunchFileFailure",
    PreLaunchFileFailure: "PreLaunchFileFailure",
    ResourceNotFound: "ResourceNotFound",
    RobotAgentConnectionTimeout: "RobotAgentConnectionTimeout",
    RobotApplicationDoesNotExist: "RobotApplicationDoesNotExist",
    RobotDeploymentAborted: "RobotDeploymentAborted",
    RobotDeploymentNoResponse: "RobotDeploymentNoResponse",
};
export const DeploymentStatus = {
    Canceled: "Canceled",
    Failed: "Failed",
    InProgress: "InProgress",
    Pending: "Pending",
    Preparing: "Preparing",
    Succeeded: "Succeeded",
};
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
export const RobotSoftwareSuiteType = {
    General: "General",
    ROS: "ROS",
    ROS2: "ROS2",
};
export const RobotSoftwareSuiteVersionType = {
    Dashing: "Dashing",
    Foxy: "Foxy",
    Kinetic: "Kinetic",
    Melodic: "Melodic",
};
export const RenderingEngineType = {
    OGRE: "OGRE",
};
export const SimulationSoftwareSuiteType = {
    Gazebo: "Gazebo",
    RosbagPlay: "RosbagPlay",
    SimulationRuntime: "SimulationRuntime",
};
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export const WorldExportJobErrorCode = {
    AccessDenied: "AccessDenied",
    InternalServiceError: "InternalServiceError",
    InvalidInput: "InvalidInput",
    LimitExceeded: "LimitExceeded",
    RequestThrottled: "RequestThrottled",
    ResourceNotFound: "ResourceNotFound",
};
export const WorldExportJobStatus = {
    Canceled: "Canceled",
    Canceling: "Canceling",
    Completed: "Completed",
    Failed: "Failed",
    Pending: "Pending",
    Running: "Running",
};
export const WorldGenerationJobErrorCode = {
    AllWorldGenerationFailed: "AllWorldGenerationFailed",
    InternalServiceError: "InternalServiceError",
    InvalidInput: "InvalidInput",
    LimitExceeded: "LimitExceeded",
    RequestThrottled: "RequestThrottled",
    ResourceNotFound: "ResourceNotFound",
};
export const WorldGenerationJobStatus = {
    Canceled: "Canceled",
    Canceling: "Canceling",
    Completed: "Completed",
    Failed: "Failed",
    PartialFailed: "PartialFailed",
    Pending: "Pending",
    Running: "Running",
};
export const RobotDeploymentStep = {
    DownloadingExtractingStep: "DownloadingExtracting",
    ExecutingDownloadCondition: "ExecutingDownloadCondition",
    FinishedStep: "Finished",
    LaunchingStep: "Launching",
    PostLaunchStep: "ExecutingPostLaunch",
    PreLaunchStep: "ExecutingPreLaunch",
    ValidatingStep: "Validating",
};
export const RobotStatus = {
    Available: "Available",
    Deploying: "Deploying",
    Failed: "Failed",
    InSync: "InSync",
    NoResponse: "NoResponse",
    PendingNewDeployment: "PendingNewDeployment",
    Registered: "Registered",
};
export const SimulationJobBatchErrorCode = {
    InternalServiceError: "InternalServiceError",
};
export const SimulationJobBatchStatus = {
    Canceled: "Canceled",
    Canceling: "Canceling",
    Completed: "Completed",
    Completing: "Completing",
    Failed: "Failed",
    InProgress: "InProgress",
    Pending: "Pending",
    TimedOut: "TimedOut",
    TimingOut: "TimingOut",
};
