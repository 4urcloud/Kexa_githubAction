import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ConcurrentDeploymentException, IdempotentParameterMismatchException, InternalServerException, InvalidParameterException, LimitExceededException, ResourceAlreadyExistsException, ResourceNotFoundException, ServiceUnavailableException, ThrottlingException, } from "../models/models_0";
import { RoboMakerServiceException as __BaseException } from "../models/RoboMakerServiceException";
export const se_BatchDeleteWorldsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/batchDeleteWorlds");
    let body;
    body = JSON.stringify(take(input, {
        worlds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchDescribeSimulationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/batchDescribeSimulationJob");
    let body;
    body = JSON.stringify(take(input, {
        jobs: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelDeploymentJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cancelDeploymentJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelSimulationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cancelSimulationJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelSimulationJobBatchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cancelSimulationJobBatch");
    let body;
    body = JSON.stringify(take(input, {
        batch: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelWorldExportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cancelWorldExportJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelWorldGenerationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cancelWorldGenerationJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeploymentJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createDeploymentJob");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        deploymentApplicationConfigs: (_) => _json(_),
        deploymentConfig: (_) => _json(_),
        fleet: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFleetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createFleet");
    let body;
    body = JSON.stringify(take(input, {
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRobotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createRobot");
    let body;
    body = JSON.stringify(take(input, {
        architecture: [],
        greengrassGroupId: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRobotApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createRobotApplication");
    let body;
    body = JSON.stringify(take(input, {
        environment: (_) => _json(_),
        name: [],
        robotSoftwareSuite: (_) => _json(_),
        sources: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRobotApplicationVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createRobotApplicationVersion");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        currentRevisionId: [],
        imageDigest: [],
        s3Etags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSimulationApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createSimulationApplication");
    let body;
    body = JSON.stringify(take(input, {
        environment: (_) => _json(_),
        name: [],
        renderingEngine: (_) => _json(_),
        robotSoftwareSuite: (_) => _json(_),
        simulationSoftwareSuite: (_) => _json(_),
        sources: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSimulationApplicationVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createSimulationApplicationVersion");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        currentRevisionId: [],
        imageDigest: [],
        s3Etags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSimulationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createSimulationJob");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        compute: (_) => _json(_),
        dataSources: (_) => _json(_),
        failureBehavior: [],
        iamRole: [],
        loggingConfig: (_) => _json(_),
        maxJobDurationInSeconds: [],
        outputLocation: (_) => _json(_),
        robotApplications: (_) => _json(_),
        simulationApplications: (_) => _json(_),
        tags: (_) => _json(_),
        vpcConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWorldExportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createWorldExportJob");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        iamRole: [],
        outputLocation: (_) => _json(_),
        tags: (_) => _json(_),
        worlds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWorldGenerationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createWorldGenerationJob");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        tags: (_) => _json(_),
        template: [],
        worldCount: (_) => _json(_),
        worldTags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWorldTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createWorldTemplate");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [],
        name: [],
        tags: (_) => _json(_),
        templateBody: [],
        templateLocation: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteFleetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteFleet");
    let body;
    body = JSON.stringify(take(input, {
        fleet: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteRobotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteRobot");
    let body;
    body = JSON.stringify(take(input, {
        robot: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteRobotApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteRobotApplication");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        applicationVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteSimulationApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteSimulationApplication");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        applicationVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteWorldTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteWorldTemplate");
    let body;
    body = JSON.stringify(take(input, {
        template: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeregisterRobotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deregisterRobot");
    let body;
    body = JSON.stringify(take(input, {
        fleet: [],
        robot: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeDeploymentJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeDeploymentJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeFleetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeFleet");
    let body;
    body = JSON.stringify(take(input, {
        fleet: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeRobotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeRobot");
    let body;
    body = JSON.stringify(take(input, {
        robot: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeRobotApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeRobotApplication");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        applicationVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeSimulationApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeSimulationApplication");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        applicationVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeSimulationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeSimulationJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeSimulationJobBatchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeSimulationJobBatch");
    let body;
    body = JSON.stringify(take(input, {
        batch: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeWorldCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeWorld");
    let body;
    body = JSON.stringify(take(input, {
        world: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeWorldExportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeWorldExportJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeWorldGenerationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeWorldGenerationJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeWorldTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeWorldTemplate");
    let body;
    body = JSON.stringify(take(input, {
        template: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetWorldTemplateBodyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getWorldTemplateBody");
    let body;
    body = JSON.stringify(take(input, {
        generationJob: [],
        template: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDeploymentJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listDeploymentJobs");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListFleetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listFleets");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListRobotApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listRobotApplications");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        versionQualifier: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListRobotsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listRobots");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListSimulationApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listSimulationApplications");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        versionQualifier: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListSimulationJobBatchesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listSimulationJobBatches");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListSimulationJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listSimulationJobs");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListWorldExportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listWorldExportJobs");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorldGenerationJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listWorldGenerationJobs");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorldsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listWorlds");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorldTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listWorldTemplates");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RegisterRobotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/registerRobot");
    let body;
    body = JSON.stringify(take(input, {
        fleet: [],
        robot: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RestartSimulationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restartSimulationJob");
    let body;
    body = JSON.stringify(take(input, {
        job: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartSimulationJobBatchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/startSimulationJobBatch");
    let body;
    body = JSON.stringify(take(input, {
        batchPolicy: (_) => _json(_),
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        createSimulationJobRequests: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SyncDeploymentJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/syncDeploymentJob");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        fleet: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateRobotApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateRobotApplication");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        currentRevisionId: [],
        environment: (_) => _json(_),
        robotSoftwareSuite: (_) => _json(_),
        sources: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateSimulationApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateSimulationApplication");
    let body;
    body = JSON.stringify(take(input, {
        application: [],
        currentRevisionId: [],
        environment: (_) => _json(_),
        renderingEngine: (_) => _json(_),
        robotSoftwareSuite: (_) => _json(_),
        simulationSoftwareSuite: (_) => _json(_),
        sources: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateWorldTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateWorldTemplate");
    let body;
    body = JSON.stringify(take(input, {
        name: [],
        template: [],
        templateBody: [],
        templateLocation: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_BatchDeleteWorldsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        unprocessedWorlds: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDescribeSimulationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobs: (_) => de_SimulationJobs(_, context),
        unprocessedJobs: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CancelDeploymentJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CancelSimulationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CancelSimulationJobBatchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CancelWorldExportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CancelWorldGenerationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateDeploymentJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentApplicationConfigs: _json,
        deploymentConfig: _json,
        failureCode: __expectString,
        failureReason: __expectString,
        fleet: __expectString,
        status: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRobotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        architecture: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        greengrassGroupId: __expectString,
        name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRobotApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        sources: _json,
        tags: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRobotApplicationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        sources: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSimulationApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        renderingEngine: _json,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        simulationSoftwareSuite: _json,
        sources: _json,
        tags: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSimulationApplicationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        renderingEngine: _json,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        simulationSoftwareSuite: _json,
        sources: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSimulationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        compute: _json,
        dataSources: _json,
        failureBehavior: __expectString,
        failureCode: __expectString,
        iamRole: __expectString,
        lastStartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        loggingConfig: _json,
        maxJobDurationInSeconds: __expectLong,
        outputLocation: _json,
        robotApplications: _json,
        simulationApplications: _json,
        simulationTimeMillis: __expectLong,
        status: __expectString,
        tags: _json,
        vpcConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorldExportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureCode: __expectString,
        iamRole: __expectString,
        outputLocation: _json,
        status: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorldGenerationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureCode: __expectString,
        status: __expectString,
        tags: _json,
        template: __expectString,
        worldCount: _json,
        worldTags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorldTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteFleetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRobotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRobotApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSimulationApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteWorldTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeregisterRobotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        fleet: __expectString,
        robot: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDeploymentJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentApplicationConfigs: _json,
        deploymentConfig: _json,
        failureCode: __expectString,
        failureReason: __expectString,
        fleet: __expectString,
        robotDeploymentSummary: (_) => de_RobotDeploymentSummary(_, context),
        status: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeFleetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentJob: __expectString,
        lastDeploymentStatus: __expectString,
        lastDeploymentTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        robots: (_) => de_Robots(_, context),
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRobotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        architecture: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        fleetArn: __expectString,
        greengrassGroupId: __expectString,
        lastDeploymentJob: __expectString,
        lastDeploymentTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRobotApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        imageDigest: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        sources: _json,
        tags: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSimulationApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        imageDigest: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        renderingEngine: _json,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        simulationSoftwareSuite: _json,
        sources: _json,
        tags: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSimulationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        compute: _json,
        dataSources: _json,
        failureBehavior: __expectString,
        failureCode: __expectString,
        failureReason: __expectString,
        iamRole: __expectString,
        lastStartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        loggingConfig: _json,
        maxJobDurationInSeconds: __expectLong,
        name: __expectString,
        networkInterface: _json,
        outputLocation: _json,
        robotApplications: _json,
        simulationApplications: _json,
        simulationTimeMillis: __expectLong,
        status: __expectString,
        tags: _json,
        vpcConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSimulationJobBatchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        batchPolicy: _json,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdRequests: (_) => de_SimulationJobSummaries(_, context),
        failedRequests: (_) => de_FailedCreateSimulationJobRequests(_, context),
        failureCode: __expectString,
        failureReason: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        pendingRequests: _json,
        status: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeWorldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        generationJob: __expectString,
        tags: _json,
        template: __expectString,
        worldDescriptionBody: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeWorldExportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureCode: __expectString,
        failureReason: __expectString,
        iamRole: __expectString,
        outputLocation: _json,
        status: __expectString,
        tags: _json,
        worlds: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeWorldGenerationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureCode: __expectString,
        failureReason: __expectString,
        finishedWorldsSummary: _json,
        status: __expectString,
        tags: _json,
        template: __expectString,
        worldCount: _json,
        worldTags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeWorldTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        tags: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWorldTemplateBodyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        templateBody: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeploymentJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        deploymentJobs: (_) => de_DeploymentJobs(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFleetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        fleetDetails: (_) => de_Fleets(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRobotApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        robotApplicationSummaries: (_) => de_RobotApplicationSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRobotsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        robots: (_) => de_Robots(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSimulationApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        simulationApplicationSummaries: (_) => de_SimulationApplicationSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSimulationJobBatchesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        simulationJobBatchSummaries: (_) => de_SimulationJobBatchSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSimulationJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        simulationJobSummaries: (_) => de_SimulationJobSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorldExportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        worldExportJobSummaries: (_) => de_WorldExportJobSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorldGenerationJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        worldGenerationJobSummaries: (_) => de_WorldGenerationJobSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorldsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        worldSummaries: (_) => de_WorldSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorldTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        templateSummaries: (_) => de_TemplateSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterRobotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        fleet: __expectString,
        robot: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RestartSimulationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartSimulationJobBatchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        batchPolicy: _json,
        clientRequestToken: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdRequests: (_) => de_SimulationJobSummaries(_, context),
        failedRequests: (_) => de_FailedCreateSimulationJobRequests(_, context),
        failureCode: __expectString,
        failureReason: __expectString,
        pendingRequests: _json,
        status: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SyncDeploymentJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentApplicationConfigs: _json,
        deploymentConfig: _json,
        failureCode: __expectString,
        failureReason: __expectString,
        fleet: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRobotApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        sources: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSimulationApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        environment: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        renderingEngine: _json,
        revisionId: __expectString,
        robotSoftwareSuite: _json,
        simulationSoftwareSuite: _json,
        sources: _json,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateWorldTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.robomaker#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.robomaker#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.robomaker#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.robomaker#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ConcurrentDeploymentException":
        case "com.amazonaws.robomaker#ConcurrentDeploymentException":
            throw await de_ConcurrentDeploymentExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.robomaker#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.robomaker#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.robomaker#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.robomaker#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ConcurrentDeploymentExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConcurrentDeploymentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DeploymentJob = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentApplicationConfigs: _json,
        deploymentConfig: _json,
        failureCode: __expectString,
        failureReason: __expectString,
        fleet: __expectString,
        status: __expectString,
    });
};
const de_DeploymentJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentJob(entry, context);
    });
    return retVal;
};
const de_FailedCreateSimulationJobRequest = (output, context) => {
    return take(output, {
        failedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureCode: __expectString,
        failureReason: __expectString,
        request: _json,
    });
};
const de_FailedCreateSimulationJobRequests = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FailedCreateSimulationJobRequest(entry, context);
    });
    return retVal;
};
const de_Fleet = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentJob: __expectString,
        lastDeploymentStatus: __expectString,
        lastDeploymentTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
    });
};
const de_Fleets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Fleet(entry, context);
    });
    return retVal;
};
const de_ProgressDetail = (output, context) => {
    return take(output, {
        currentProgress: __expectString,
        estimatedTimeRemainingSeconds: __expectInt32,
        percentDone: __limitedParseFloat32,
        targetResource: __expectString,
    });
};
const de_Robot = (output, context) => {
    return take(output, {
        architecture: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        fleetArn: __expectString,
        greenGrassGroupId: __expectString,
        lastDeploymentJob: __expectString,
        lastDeploymentTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
    });
};
const de_RobotApplicationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RobotApplicationSummary(entry, context);
    });
    return retVal;
};
const de_RobotApplicationSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        robotSoftwareSuite: _json,
        version: __expectString,
    });
};
const de_RobotDeployment = (output, context) => {
    return take(output, {
        arn: __expectString,
        deploymentFinishTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failureCode: __expectString,
        failureReason: __expectString,
        progressDetail: (_) => de_ProgressDetail(_, context),
        status: __expectString,
    });
};
const de_RobotDeploymentSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RobotDeployment(entry, context);
    });
    return retVal;
};
const de_Robots = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Robot(entry, context);
    });
    return retVal;
};
const de_SimulationApplicationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SimulationApplicationSummary(entry, context);
    });
    return retVal;
};
const de_SimulationApplicationSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        robotSoftwareSuite: _json,
        simulationSoftwareSuite: _json,
        version: __expectString,
    });
};
const de_SimulationJob = (output, context) => {
    return take(output, {
        arn: __expectString,
        clientRequestToken: __expectString,
        compute: _json,
        dataSources: _json,
        failureBehavior: __expectString,
        failureCode: __expectString,
        failureReason: __expectString,
        iamRole: __expectString,
        lastStartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        loggingConfig: _json,
        maxJobDurationInSeconds: __expectLong,
        name: __expectString,
        networkInterface: _json,
        outputLocation: _json,
        robotApplications: _json,
        simulationApplications: _json,
        simulationTimeMillis: __expectLong,
        status: __expectString,
        tags: _json,
        vpcConfig: _json,
    });
};
const de_SimulationJobBatchSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SimulationJobBatchSummary(entry, context);
    });
    return retVal;
};
const de_SimulationJobBatchSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdRequestCount: __expectInt32,
        failedRequestCount: __expectInt32,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        pendingRequestCount: __expectInt32,
        status: __expectString,
    });
};
const de_SimulationJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SimulationJob(entry, context);
    });
    return retVal;
};
const de_SimulationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SimulationJobSummary(entry, context);
    });
    return retVal;
};
const de_SimulationJobSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        computeType: __expectString,
        dataSourceNames: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        robotApplicationNames: _json,
        simulationApplicationNames: _json,
        status: __expectString,
    });
};
const de_TemplateSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TemplateSummary(entry, context);
    });
    return retVal;
};
const de_TemplateSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        version: __expectString,
    });
};
const de_WorldExportJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorldExportJobSummary(entry, context);
    });
    return retVal;
};
const de_WorldExportJobSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        outputLocation: _json,
        status: __expectString,
        worlds: _json,
    });
};
const de_WorldGenerationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorldGenerationJobSummary(entry, context);
    });
    return retVal;
};
const de_WorldGenerationJobSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failedWorldCount: __expectInt32,
        status: __expectString,
        succeededWorldCount: __expectInt32,
        template: __expectString,
        worldCount: _json,
    });
};
const de_WorldSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorldSummary(entry, context);
    });
    return retVal;
};
const de_WorldSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        generationJob: __expectString,
        template: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _tK = "tagKeys";
