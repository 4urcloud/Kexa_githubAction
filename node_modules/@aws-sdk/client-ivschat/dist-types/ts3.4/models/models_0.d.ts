import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IvschatServiceException as __BaseException } from "./IvschatServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const ChatTokenCapability: {
  readonly DELETE_MESSAGE: "DELETE_MESSAGE";
  readonly DISCONNECT_USER: "DISCONNECT_USER";
  readonly SEND_MESSAGE: "SEND_MESSAGE";
};
export type ChatTokenCapability =
  (typeof ChatTokenCapability)[keyof typeof ChatTokenCapability];
export interface CreateChatTokenRequest {
  roomIdentifier: string | undefined;
  userId: string | undefined;
  capabilities?: ChatTokenCapability[];
  sessionDurationInMinutes?: number;
  attributes?: Record<string, string>;
}
export interface CreateChatTokenResponse {
  token?: string;
  tokenExpirationTime?: Date;
  sessionExpirationTime?: Date;
}
export declare class PendingVerification extends __BaseException {
  readonly name: "PendingVerification";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PendingVerification, __BaseException>
  );
}
export declare const ResourceType: {
  readonly ROOM: "ROOM";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: ResourceType | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly OTHER: "OTHER";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason: ValidationExceptionReason | undefined;
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: ResourceType | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CloudWatchLogsDestinationConfiguration {
  logGroupName: string | undefined;
}
export interface FirehoseDestinationConfiguration {
  deliveryStreamName: string | undefined;
}
export interface S3DestinationConfiguration {
  bucketName: string | undefined;
}
export type DestinationConfiguration =
  | DestinationConfiguration.CloudWatchLogsMember
  | DestinationConfiguration.FirehoseMember
  | DestinationConfiguration.S3Member
  | DestinationConfiguration.$UnknownMember;
export declare namespace DestinationConfiguration {
  interface S3Member {
    s3: S3DestinationConfiguration;
    cloudWatchLogs?: never;
    firehose?: never;
    $unknown?: never;
  }
  interface CloudWatchLogsMember {
    s3?: never;
    cloudWatchLogs: CloudWatchLogsDestinationConfiguration;
    firehose?: never;
    $unknown?: never;
  }
  interface FirehoseMember {
    s3?: never;
    cloudWatchLogs?: never;
    firehose: FirehoseDestinationConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    cloudWatchLogs?: never;
    firehose?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: S3DestinationConfiguration) => T;
    cloudWatchLogs: (value: CloudWatchLogsDestinationConfiguration) => T;
    firehose: (value: FirehoseDestinationConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: DestinationConfiguration, visitor: Visitor<T>) => T;
}
export interface CreateLoggingConfigurationRequest {
  name?: string;
  destinationConfiguration: DestinationConfiguration | undefined;
  tags?: Record<string, string>;
}
export declare const CreateLoggingConfigurationState: {
  readonly ACTIVE: "ACTIVE";
};
export type CreateLoggingConfigurationState =
  (typeof CreateLoggingConfigurationState)[keyof typeof CreateLoggingConfigurationState];
export interface CreateLoggingConfigurationResponse {
  arn?: string;
  id?: string;
  createTime?: Date;
  updateTime?: Date;
  name?: string;
  destinationConfiguration?: DestinationConfiguration;
  state?: CreateLoggingConfigurationState;
  tags?: Record<string, string>;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: ResourceType | undefined;
  limit: number | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const FallbackResult: {
  readonly ALLOW: "ALLOW";
  readonly DENY: "DENY";
};
export type FallbackResult =
  (typeof FallbackResult)[keyof typeof FallbackResult];
export interface MessageReviewHandler {
  uri?: string;
  fallbackResult?: FallbackResult;
}
export interface CreateRoomRequest {
  name?: string;
  maximumMessageRatePerSecond?: number;
  maximumMessageLength?: number;
  messageReviewHandler?: MessageReviewHandler;
  tags?: Record<string, string>;
  loggingConfigurationIdentifiers?: string[];
}
export interface CreateRoomResponse {
  arn?: string;
  id?: string;
  name?: string;
  createTime?: Date;
  updateTime?: Date;
  maximumMessageRatePerSecond?: number;
  maximumMessageLength?: number;
  messageReviewHandler?: MessageReviewHandler;
  tags?: Record<string, string>;
  loggingConfigurationIdentifiers?: string[];
}
export interface DeleteLoggingConfigurationRequest {
  identifier: string | undefined;
}
export interface DeleteMessageRequest {
  roomIdentifier: string | undefined;
  id: string | undefined;
  reason?: string;
}
export interface DeleteMessageResponse {
  id?: string;
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: ResourceType | undefined;
  limit: number | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface DeleteRoomRequest {
  identifier: string | undefined;
}
export interface DisconnectUserRequest {
  roomIdentifier: string | undefined;
  userId: string | undefined;
  reason?: string;
}
export interface DisconnectUserResponse {}
export interface GetLoggingConfigurationRequest {
  identifier: string | undefined;
}
export declare const LoggingConfigurationState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type LoggingConfigurationState =
  (typeof LoggingConfigurationState)[keyof typeof LoggingConfigurationState];
export interface GetLoggingConfigurationResponse {
  arn?: string;
  id?: string;
  createTime?: Date;
  updateTime?: Date;
  name?: string;
  destinationConfiguration?: DestinationConfiguration;
  state?: LoggingConfigurationState;
  tags?: Record<string, string>;
}
export interface GetRoomRequest {
  identifier: string | undefined;
}
export interface GetRoomResponse {
  arn?: string;
  id?: string;
  name?: string;
  createTime?: Date;
  updateTime?: Date;
  maximumMessageRatePerSecond?: number;
  maximumMessageLength?: number;
  messageReviewHandler?: MessageReviewHandler;
  tags?: Record<string, string>;
  loggingConfigurationIdentifiers?: string[];
}
export interface ListLoggingConfigurationsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface LoggingConfigurationSummary {
  arn?: string;
  id?: string;
  createTime?: Date;
  updateTime?: Date;
  name?: string;
  destinationConfiguration?: DestinationConfiguration;
  state?: LoggingConfigurationState;
  tags?: Record<string, string>;
}
export interface ListLoggingConfigurationsResponse {
  loggingConfigurations: LoggingConfigurationSummary[] | undefined;
  nextToken?: string;
}
export interface ListRoomsRequest {
  name?: string;
  nextToken?: string;
  maxResults?: number;
  messageReviewHandlerUri?: string;
  loggingConfigurationIdentifier?: string;
}
export interface RoomSummary {
  arn?: string;
  id?: string;
  name?: string;
  messageReviewHandler?: MessageReviewHandler;
  createTime?: Date;
  updateTime?: Date;
  tags?: Record<string, string>;
  loggingConfigurationIdentifiers?: string[];
}
export interface ListRoomsResponse {
  rooms: RoomSummary[] | undefined;
  nextToken?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags: Record<string, string> | undefined;
}
export interface SendEventRequest {
  roomIdentifier: string | undefined;
  eventName: string | undefined;
  attributes?: Record<string, string>;
}
export interface SendEventResponse {
  id?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateLoggingConfigurationRequest {
  identifier: string | undefined;
  name?: string;
  destinationConfiguration?: DestinationConfiguration;
}
export declare const UpdateLoggingConfigurationState: {
  readonly ACTIVE: "ACTIVE";
};
export type UpdateLoggingConfigurationState =
  (typeof UpdateLoggingConfigurationState)[keyof typeof UpdateLoggingConfigurationState];
export interface UpdateLoggingConfigurationResponse {
  arn?: string;
  id?: string;
  createTime?: Date;
  updateTime?: Date;
  name?: string;
  destinationConfiguration?: DestinationConfiguration;
  state?: UpdateLoggingConfigurationState;
  tags?: Record<string, string>;
}
export interface UpdateRoomRequest {
  identifier: string | undefined;
  name?: string;
  maximumMessageRatePerSecond?: number;
  maximumMessageLength?: number;
  messageReviewHandler?: MessageReviewHandler;
  loggingConfigurationIdentifiers?: string[];
}
export interface UpdateRoomResponse {
  arn?: string;
  id?: string;
  name?: string;
  createTime?: Date;
  updateTime?: Date;
  maximumMessageRatePerSecond?: number;
  maximumMessageLength?: number;
  messageReviewHandler?: MessageReviewHandler;
  tags?: Record<string, string>;
  loggingConfigurationIdentifiers?: string[];
}
export declare const CreateChatTokenRequestFilterSensitiveLog: (
  obj: CreateChatTokenRequest
) => any;
export declare const CreateChatTokenResponseFilterSensitiveLog: (
  obj: CreateChatTokenResponse
) => any;
export declare const DisconnectUserRequestFilterSensitiveLog: (
  obj: DisconnectUserRequest
) => any;
