import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ResourceGroupsServiceException as __BaseException } from "./ResourceGroupsServiceException";
export declare const GroupLifecycleEventsDesiredStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type GroupLifecycleEventsDesiredStatus =
  (typeof GroupLifecycleEventsDesiredStatus)[keyof typeof GroupLifecycleEventsDesiredStatus];
export declare const GroupLifecycleEventsStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly ERROR: "ERROR";
  readonly INACTIVE: "INACTIVE";
  readonly IN_PROGRESS: "IN_PROGRESS";
};
export type GroupLifecycleEventsStatus =
  (typeof GroupLifecycleEventsStatus)[keyof typeof GroupLifecycleEventsStatus];
export interface AccountSettings {
  GroupLifecycleEventsDesiredStatus?: GroupLifecycleEventsDesiredStatus;
  GroupLifecycleEventsStatus?: GroupLifecycleEventsStatus;
  GroupLifecycleEventsStatusMessage?: string;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export interface GroupConfigurationParameter {
  Name: string | undefined;
  Values?: string[];
}
export interface GroupConfigurationItem {
  Type: string | undefined;
  Parameters?: GroupConfigurationParameter[];
}
export declare const QueryType: {
  readonly CLOUDFORMATION_STACK_1_0: "CLOUDFORMATION_STACK_1_0";
  readonly TAG_FILTERS_1_0: "TAG_FILTERS_1_0";
};
export type QueryType = (typeof QueryType)[keyof typeof QueryType];
export interface ResourceQuery {
  Type: QueryType | undefined;
  Query: string | undefined;
}
export interface CreateGroupInput {
  Name: string | undefined;
  Description?: string;
  ResourceQuery?: ResourceQuery;
  Tags?: Record<string, string>;
  Configuration?: GroupConfigurationItem[];
}
export interface Group {
  GroupArn: string | undefined;
  Name: string | undefined;
  Description?: string;
}
export declare const GroupConfigurationStatus: {
  readonly UPDATE_COMPLETE: "UPDATE_COMPLETE";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type GroupConfigurationStatus =
  (typeof GroupConfigurationStatus)[keyof typeof GroupConfigurationStatus];
export interface GroupConfiguration {
  Configuration?: GroupConfigurationItem[];
  ProposedConfiguration?: GroupConfigurationItem[];
  Status?: GroupConfigurationStatus;
  FailureReason?: string;
}
export interface CreateGroupOutput {
  Group?: Group;
  ResourceQuery?: ResourceQuery;
  Tags?: Record<string, string>;
  GroupConfiguration?: GroupConfiguration;
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class MethodNotAllowedException extends __BaseException {
  readonly name: "MethodNotAllowedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<MethodNotAllowedException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export interface DeleteGroupInput {
  GroupName?: string;
  Group?: string;
}
export interface DeleteGroupOutput {
  Group?: Group;
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export interface GetAccountSettingsOutput {
  AccountSettings?: AccountSettings;
}
export interface GetGroupInput {
  GroupName?: string;
  Group?: string;
}
export interface GetGroupOutput {
  Group?: Group;
}
export interface GetGroupConfigurationInput {
  Group?: string;
}
export interface GetGroupConfigurationOutput {
  GroupConfiguration?: GroupConfiguration;
}
export interface GetGroupQueryInput {
  GroupName?: string;
  Group?: string;
}
export interface GroupQuery {
  GroupName: string | undefined;
  ResourceQuery: ResourceQuery | undefined;
}
export interface GetGroupQueryOutput {
  GroupQuery?: GroupQuery;
}
export interface GetTagsInput {
  Arn: string | undefined;
}
export interface GetTagsOutput {
  Arn?: string;
  Tags?: Record<string, string>;
}
export interface GroupResourcesInput {
  Group: string | undefined;
  ResourceArns: string[] | undefined;
}
export interface FailedResource {
  ResourceArn?: string;
  ErrorMessage?: string;
  ErrorCode?: string;
}
export interface PendingResource {
  ResourceArn?: string;
}
export interface GroupResourcesOutput {
  Succeeded?: string[];
  Failed?: FailedResource[];
  Pending?: PendingResource[];
}
export declare const ResourceFilterName: {
  readonly ResourceType: "resource-type";
};
export type ResourceFilterName =
  (typeof ResourceFilterName)[keyof typeof ResourceFilterName];
export interface ResourceFilter {
  Name: ResourceFilterName | undefined;
  Values: string[] | undefined;
}
export interface ListGroupResourcesInput {
  GroupName?: string;
  Group?: string;
  Filters?: ResourceFilter[];
  MaxResults?: number;
  NextToken?: string;
}
export declare const QueryErrorCode: {
  readonly CLOUDFORMATION_STACK_INACTIVE: "CLOUDFORMATION_STACK_INACTIVE";
  readonly CLOUDFORMATION_STACK_NOT_EXISTING: "CLOUDFORMATION_STACK_NOT_EXISTING";
  readonly CLOUDFORMATION_STACK_UNASSUMABLE_ROLE: "CLOUDFORMATION_STACK_UNASSUMABLE_ROLE";
};
export type QueryErrorCode =
  (typeof QueryErrorCode)[keyof typeof QueryErrorCode];
export interface QueryError {
  ErrorCode?: QueryErrorCode;
  Message?: string;
}
export interface ResourceIdentifier {
  ResourceArn?: string;
  ResourceType?: string;
}
export declare const ResourceStatusValue: {
  readonly Pending: "PENDING";
};
export type ResourceStatusValue =
  (typeof ResourceStatusValue)[keyof typeof ResourceStatusValue];
export interface ResourceStatus {
  Name?: ResourceStatusValue;
}
export interface ListGroupResourcesItem {
  Identifier?: ResourceIdentifier;
  Status?: ResourceStatus;
}
export interface ListGroupResourcesOutput {
  Resources?: ListGroupResourcesItem[];
  ResourceIdentifiers?: ResourceIdentifier[];
  NextToken?: string;
  QueryErrors?: QueryError[];
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export declare const GroupFilterName: {
  readonly ConfigurationType: "configuration-type";
  readonly ResourceType: "resource-type";
};
export type GroupFilterName =
  (typeof GroupFilterName)[keyof typeof GroupFilterName];
export interface GroupFilter {
  Name: GroupFilterName | undefined;
  Values: string[] | undefined;
}
export interface ListGroupsInput {
  Filters?: GroupFilter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface GroupIdentifier {
  GroupName?: string;
  GroupArn?: string;
}
export interface ListGroupsOutput {
  GroupIdentifiers?: GroupIdentifier[];
  Groups?: Group[];
  NextToken?: string;
}
export interface PutGroupConfigurationInput {
  Group?: string;
  Configuration?: GroupConfigurationItem[];
}
export interface PutGroupConfigurationOutput {}
export interface SearchResourcesInput {
  ResourceQuery: ResourceQuery | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface SearchResourcesOutput {
  ResourceIdentifiers?: ResourceIdentifier[];
  NextToken?: string;
  QueryErrors?: QueryError[];
}
export interface TagInput {
  Arn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagOutput {
  Arn?: string;
  Tags?: Record<string, string>;
}
export interface UngroupResourcesInput {
  Group: string | undefined;
  ResourceArns: string[] | undefined;
}
export interface UngroupResourcesOutput {
  Succeeded?: string[];
  Failed?: FailedResource[];
  Pending?: PendingResource[];
}
export interface UntagInput {
  Arn: string | undefined;
  Keys: string[] | undefined;
}
export interface UntagOutput {
  Arn?: string;
  Keys?: string[];
}
export interface UpdateAccountSettingsInput {
  GroupLifecycleEventsDesiredStatus?: GroupLifecycleEventsDesiredStatus;
}
export interface UpdateAccountSettingsOutput {
  AccountSettings?: AccountSettings;
}
export interface UpdateGroupInput {
  GroupName?: string;
  Group?: string;
  Description?: string;
}
export interface UpdateGroupOutput {
  Group?: Group;
}
export interface UpdateGroupQueryInput {
  GroupName?: string;
  Group?: string;
  ResourceQuery: ResourceQuery | undefined;
}
export interface UpdateGroupQueryOutput {
  GroupQuery?: GroupQuery;
}
