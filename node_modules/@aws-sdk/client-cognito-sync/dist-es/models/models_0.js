import { CognitoSyncServiceException as __BaseException } from "./CognitoSyncServiceException";
export class AlreadyStreamedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyStreamedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyStreamedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyStreamedException.prototype);
    }
}
export class DuplicateRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateRequestException.prototype);
    }
}
export class InternalErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalErrorException.prototype);
    }
}
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
export class NotAuthorizedException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ResourceConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
export const BulkPublishStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
    SUCCEEDED: "SUCCEEDED",
};
export const StreamingStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export class InvalidConfigurationException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidConfigurationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidConfigurationException.prototype);
    }
}
export const Platform = {
    ADM: "ADM",
    APNS: "APNS",
    APNS_SANDBOX: "APNS_SANDBOX",
    GCM: "GCM",
};
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
export class InvalidLambdaFunctionOutputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidLambdaFunctionOutputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLambdaFunctionOutputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLambdaFunctionOutputException.prototype);
    }
}
export class LambdaThrottledException extends __BaseException {
    constructor(opts) {
        super({
            name: "LambdaThrottledException",
            $fault: "client",
            ...opts,
        });
        this.name = "LambdaThrottledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LambdaThrottledException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export const Operation = {
    remove: "remove",
    replace: "replace",
};
