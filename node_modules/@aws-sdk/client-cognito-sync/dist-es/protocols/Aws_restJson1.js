import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { CognitoSyncServiceException as __BaseException } from "../models/CognitoSyncServiceException";
import { AlreadyStreamedException, ConcurrentModificationException, DuplicateRequestException, InternalErrorException, InvalidConfigurationException, InvalidLambdaFunctionOutputException, InvalidParameterException, LambdaThrottledException, LimitExceededException, NotAuthorizedException, ResourceConflictException, ResourceNotFoundException, TooManyRequestsException, } from "../models/models_0";
export const se_BulkPublishCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/bulkpublish");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    b.p("DatasetName", () => input.DatasetName, "{DatasetName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    b.p("DatasetName", () => input.DatasetName, "{DatasetName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeIdentityPoolUsageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeIdentityUsageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBulkPublishDetailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/getBulkPublishDetails");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetCognitoEventsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/events");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetIdentityPoolConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/configuration");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListDatasetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIdentityPoolUsageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecordsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    b.p("DatasetName", () => input.DatasetName, "{DatasetName}", false);
    const query = map({
        [_lSC]: [() => input.LastSyncCount !== void 0, () => input[_LSC].toString()],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_sST]: [, input[_SST]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_RegisterDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/identitypools/{IdentityPoolId}/identity/{IdentityId}/device");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Platform: [],
        Token: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SetCognitoEventsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/identitypools/{IdentityPoolId}/events");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Events: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SetIdentityPoolConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/identitypools/{IdentityPoolId}/configuration");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    let body;
    body = JSON.stringify(take(input, {
        CognitoStreams: (_) => _json(_),
        PushSync: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SubscribeToDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    b.p("DatasetName", () => input.DatasetName, "{DatasetName}", false);
    b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UnsubscribeFromDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    b.p("DatasetName", () => input.DatasetName, "{DatasetName}", false);
    b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_UpdateRecordsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xacc]: input[_CC],
    });
    b.bp("/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}");
    b.p("IdentityPoolId", () => input.IdentityPoolId, "{IdentityPoolId}", false);
    b.p("IdentityId", () => input.IdentityId, "{IdentityId}", false);
    b.p("DatasetName", () => input.DatasetName, "{DatasetName}", false);
    let body;
    body = JSON.stringify(take(input, {
        DeviceId: [],
        RecordPatches: (_) => se_RecordPatchList(_, context),
        SyncSessionToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_BulkPublishCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IdentityPoolId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Dataset: (_) => de_Dataset(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Dataset: (_) => de_Dataset(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeIdentityPoolUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IdentityPoolUsage: (_) => de_IdentityPoolUsage(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeIdentityUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IdentityUsage: (_) => de_IdentityUsage(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBulkPublishDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BulkPublishCompleteTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        BulkPublishStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        BulkPublishStatus: __expectString,
        FailureMessage: __expectString,
        IdentityPoolId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCognitoEventsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Events: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetIdentityPoolConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CognitoStreams: _json,
        IdentityPoolId: __expectString,
        PushSync: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDatasetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Count: __expectInt32,
        Datasets: (_) => de_DatasetList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIdentityPoolUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Count: __expectInt32,
        IdentityPoolUsages: (_) => de_IdentityPoolUsageList(_, context),
        MaxResults: __expectInt32,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecordsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Count: __expectInt32,
        DatasetDeletedAfterRequestedSyncCount: __expectBoolean,
        DatasetExists: __expectBoolean,
        DatasetSyncCount: __expectLong,
        LastModifiedBy: __expectString,
        MergedDatasetNames: _json,
        NextToken: __expectString,
        Records: (_) => de_RecordList(_, context),
        SyncSessionToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeviceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SetCognitoEventsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SetIdentityPoolConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CognitoStreams: _json,
        IdentityPoolId: __expectString,
        PushSync: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SubscribeToDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UnsubscribeFromDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRecordsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Records: (_) => de_RecordList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyStreamedException":
        case "com.amazonaws.cognitosync#AlreadyStreamedException":
            throw await de_AlreadyStreamedExceptionRes(parsedOutput, context);
        case "DuplicateRequestException":
        case "com.amazonaws.cognitosync#DuplicateRequestException":
            throw await de_DuplicateRequestExceptionRes(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitosync#InternalErrorException":
            throw await de_InternalErrorExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitosync#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitosync#NotAuthorizedException":
            throw await de_NotAuthorizedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitosync#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitosync#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitosync#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "InvalidConfigurationException":
        case "com.amazonaws.cognitosync#InvalidConfigurationException":
            throw await de_InvalidConfigurationExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitosync#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "InvalidLambdaFunctionOutputException":
        case "com.amazonaws.cognitosync#InvalidLambdaFunctionOutputException":
            throw await de_InvalidLambdaFunctionOutputExceptionRes(parsedOutput, context);
        case "LambdaThrottledException":
        case "com.amazonaws.cognitosync#LambdaThrottledException":
            throw await de_LambdaThrottledExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitosync#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AlreadyStreamedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AlreadyStreamedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DuplicateRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DuplicateRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidConfigurationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidLambdaFunctionOutputExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidLambdaFunctionOutputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LambdaThrottledExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LambdaThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_RecordPatch = (input, context) => {
    return take(input, {
        DeviceLastModifiedDate: (_) => Math.round(_.getTime() / 1000),
        Key: [],
        Op: [],
        SyncCount: [],
        Value: [],
    });
};
const se_RecordPatchList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RecordPatch(entry, context);
    });
};
const de_Dataset = (output, context) => {
    return take(output, {
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataStorage: __expectLong,
        DatasetName: __expectString,
        IdentityId: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumRecords: __expectLong,
    });
};
const de_DatasetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Dataset(entry, context);
    });
    return retVal;
};
const de_IdentityPoolUsage = (output, context) => {
    return take(output, {
        DataStorage: __expectLong,
        IdentityPoolId: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SyncSessionsCount: __expectLong,
    });
};
const de_IdentityPoolUsageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IdentityPoolUsage(entry, context);
    });
    return retVal;
};
const de_IdentityUsage = (output, context) => {
    return take(output, {
        DataStorage: __expectLong,
        DatasetCount: __expectInt32,
        IdentityId: __expectString,
        IdentityPoolId: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de__Record = (output, context) => {
    return take(output, {
        DeviceLastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Key: __expectString,
        LastModifiedBy: __expectString,
        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SyncCount: __expectLong,
        Value: __expectString,
    });
};
const de_RecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de__Record(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _CC = "ClientContext";
const _LSC = "LastSyncCount";
const _MR = "MaxResults";
const _NT = "NextToken";
const _SST = "SyncSessionToken";
const _lSC = "lastSyncCount";
const _mR = "maxResults";
const _nT = "nextToken";
const _sST = "syncSessionToken";
const _xacc = "x-amz-client-context";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
