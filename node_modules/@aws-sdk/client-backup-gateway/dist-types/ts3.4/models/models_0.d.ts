import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { BackupGatewayServiceException as __BaseException } from "./BackupGatewayServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  ErrorCode: string | undefined;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AssociateGatewayToServerInput {
  GatewayArn: string | undefined;
  ServerArn: string | undefined;
}
export interface AssociateGatewayToServerOutput {
  GatewayArn?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  ErrorCode: string | undefined;
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  ErrorCode?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  ErrorCode: string | undefined;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  ErrorCode?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface GetBandwidthRateLimitScheduleInput {
  GatewayArn: string | undefined;
}
export interface BandwidthRateLimitInterval {
  AverageUploadRateLimitInBitsPerSec?: number;
  StartHourOfDay: number | undefined;
  EndHourOfDay: number | undefined;
  StartMinuteOfHour: number | undefined;
  EndMinuteOfHour: number | undefined;
  DaysOfWeek: number[] | undefined;
}
export interface GetBandwidthRateLimitScheduleOutput {
  GatewayArn?: string;
  BandwidthRateLimitIntervals?: BandwidthRateLimitInterval[];
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  ErrorCode?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface PutBandwidthRateLimitScheduleInput {
  GatewayArn: string | undefined;
  BandwidthRateLimitIntervals: BandwidthRateLimitInterval[] | undefined;
}
export interface PutBandwidthRateLimitScheduleOutput {
  GatewayArn?: string;
}
export declare const GatewayType: {
  readonly BACKUP_VM: "BACKUP_VM";
};
export type GatewayType = (typeof GatewayType)[keyof typeof GatewayType];
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateGatewayInput {
  ActivationKey: string | undefined;
  GatewayDisplayName: string | undefined;
  GatewayType: GatewayType | undefined;
  Tags?: Tag[];
}
export interface CreateGatewayOutput {
  GatewayArn?: string;
}
export interface DeleteGatewayInput {
  GatewayArn: string | undefined;
}
export interface DeleteGatewayOutput {
  GatewayArn?: string;
}
export interface DisassociateGatewayFromServerInput {
  GatewayArn: string | undefined;
}
export interface DisassociateGatewayFromServerOutput {
  GatewayArn?: string;
}
export interface GetGatewayInput {
  GatewayArn: string | undefined;
}
export interface MaintenanceStartTime {
  DayOfMonth?: number;
  DayOfWeek?: number;
  HourOfDay: number | undefined;
  MinuteOfHour: number | undefined;
}
export interface GatewayDetails {
  GatewayArn?: string;
  GatewayDisplayName?: string;
  GatewayType?: GatewayType;
  HypervisorId?: string;
  LastSeenTime?: Date;
  MaintenanceStartTime?: MaintenanceStartTime;
  NextUpdateAvailabilityTime?: Date;
  VpcEndpoint?: string;
}
export interface GetGatewayOutput {
  Gateway?: GatewayDetails;
}
export interface ListGatewaysInput {
  MaxResults?: number;
  NextToken?: string;
}
export interface Gateway {
  GatewayArn?: string;
  GatewayDisplayName?: string;
  GatewayType?: GatewayType;
  HypervisorId?: string;
  LastSeenTime?: Date;
}
export interface ListGatewaysOutput {
  Gateways?: Gateway[];
  NextToken?: string;
}
export interface PutMaintenanceStartTimeInput {
  GatewayArn: string | undefined;
  HourOfDay: number | undefined;
  MinuteOfHour: number | undefined;
  DayOfWeek?: number;
  DayOfMonth?: number;
}
export interface PutMaintenanceStartTimeOutput {
  GatewayArn?: string;
}
export interface TestHypervisorConfigurationInput {
  GatewayArn: string | undefined;
  Host: string | undefined;
  Username?: string;
  Password?: string;
}
export interface TestHypervisorConfigurationOutput {}
export interface UpdateGatewayInformationInput {
  GatewayArn: string | undefined;
  GatewayDisplayName?: string;
}
export interface UpdateGatewayInformationOutput {
  GatewayArn?: string;
}
export interface UpdateGatewaySoftwareNowInput {
  GatewayArn: string | undefined;
}
export interface UpdateGatewaySoftwareNowOutput {
  GatewayArn?: string;
}
export interface DeleteHypervisorInput {
  HypervisorArn: string | undefined;
}
export interface DeleteHypervisorOutput {
  HypervisorArn?: string;
}
export interface GetHypervisorInput {
  HypervisorArn: string | undefined;
}
export declare const SyncMetadataStatus: {
  readonly CREATED: "CREATED";
  readonly FAILED: "FAILED";
  readonly PARTIALLY_FAILED: "PARTIALLY_FAILED";
  readonly RUNNING: "RUNNING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type SyncMetadataStatus =
  (typeof SyncMetadataStatus)[keyof typeof SyncMetadataStatus];
export declare const HypervisorState: {
  readonly ERROR: "ERROR";
  readonly OFFLINE: "OFFLINE";
  readonly ONLINE: "ONLINE";
  readonly PENDING: "PENDING";
};
export type HypervisorState =
  (typeof HypervisorState)[keyof typeof HypervisorState];
export interface HypervisorDetails {
  Host?: string;
  HypervisorArn?: string;
  KmsKeyArn?: string;
  Name?: string;
  LogGroupArn?: string;
  State?: HypervisorState;
  LastSuccessfulMetadataSyncTime?: Date;
  LatestMetadataSyncStatusMessage?: string;
  LatestMetadataSyncStatus?: SyncMetadataStatus;
}
export interface GetHypervisorOutput {
  Hypervisor?: HypervisorDetails;
}
export interface GetHypervisorPropertyMappingsInput {
  HypervisorArn: string | undefined;
}
export interface VmwareToAwsTagMapping {
  VmwareCategory: string | undefined;
  VmwareTagName: string | undefined;
  AwsTagKey: string | undefined;
  AwsTagValue: string | undefined;
}
export interface GetHypervisorPropertyMappingsOutput {
  HypervisorArn?: string;
  VmwareToAwsTagMappings?: VmwareToAwsTagMapping[];
  IamRoleArn?: string;
}
export interface PutHypervisorPropertyMappingsInput {
  HypervisorArn: string | undefined;
  VmwareToAwsTagMappings: VmwareToAwsTagMapping[] | undefined;
  IamRoleArn: string | undefined;
}
export interface PutHypervisorPropertyMappingsOutput {
  HypervisorArn?: string;
}
export interface ImportHypervisorConfigurationInput {
  Name: string | undefined;
  Host: string | undefined;
  Username?: string;
  Password?: string;
  KmsKeyArn?: string;
  Tags?: Tag[];
}
export interface ImportHypervisorConfigurationOutput {
  HypervisorArn?: string;
}
export interface ListHypervisorsInput {
  MaxResults?: number;
  NextToken?: string;
}
export interface Hypervisor {
  Host?: string;
  HypervisorArn?: string;
  KmsKeyArn?: string;
  Name?: string;
  State?: HypervisorState;
}
export interface ListHypervisorsOutput {
  Hypervisors?: Hypervisor[];
  NextToken?: string;
}
export interface StartVirtualMachinesMetadataSyncInput {
  HypervisorArn: string | undefined;
}
export interface StartVirtualMachinesMetadataSyncOutput {
  HypervisorArn?: string;
}
export interface UpdateHypervisorInput {
  HypervisorArn: string | undefined;
  Host?: string;
  Username?: string;
  Password?: string;
  Name?: string;
  LogGroupArn?: string;
}
export interface UpdateHypervisorOutput {
  HypervisorArn?: string;
}
export interface ListTagsForResourceInput {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceOutput {
  ResourceArn?: string;
  Tags?: Tag[];
}
export interface TagResourceInput {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceOutput {
  ResourceARN?: string;
}
export interface UntagResourceInput {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceOutput {
  ResourceARN?: string;
}
export interface GetVirtualMachineInput {
  ResourceArn: string | undefined;
}
export interface VmwareTag {
  VmwareCategory?: string;
  VmwareTagName?: string;
  VmwareTagDescription?: string;
}
export interface VirtualMachineDetails {
  HostName?: string;
  HypervisorId?: string;
  Name?: string;
  Path?: string;
  ResourceArn?: string;
  LastBackupDate?: Date;
  VmwareTags?: VmwareTag[];
}
export interface GetVirtualMachineOutput {
  VirtualMachine?: VirtualMachineDetails;
}
export interface ListVirtualMachinesInput {
  HypervisorArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface VirtualMachine {
  HostName?: string;
  HypervisorId?: string;
  Name?: string;
  Path?: string;
  ResourceArn?: string;
  LastBackupDate?: Date;
}
export interface ListVirtualMachinesOutput {
  VirtualMachines?: VirtualMachine[];
  NextToken?: string;
}
export declare const TestHypervisorConfigurationInputFilterSensitiveLog: (
  obj: TestHypervisorConfigurationInput
) => any;
export declare const ImportHypervisorConfigurationInputFilterSensitiveLog: (
  obj: ImportHypervisorConfigurationInput
) => any;
export declare const UpdateHypervisorInputFilterSensitiveLog: (
  obj: UpdateHypervisorInput
) => any;
