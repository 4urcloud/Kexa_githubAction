"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessDeniedException: () => AccessDeniedException,
  ApplicationCostProfiler: () => ApplicationCostProfiler,
  ApplicationCostProfilerClient: () => ApplicationCostProfilerClient,
  ApplicationCostProfilerServiceException: () => ApplicationCostProfilerServiceException,
  DeleteReportDefinitionCommand: () => DeleteReportDefinitionCommand,
  Format: () => Format,
  GetReportDefinitionCommand: () => GetReportDefinitionCommand,
  ImportApplicationUsageCommand: () => ImportApplicationUsageCommand,
  InternalServerException: () => InternalServerException,
  ListReportDefinitionsCommand: () => ListReportDefinitionsCommand,
  PutReportDefinitionCommand: () => PutReportDefinitionCommand,
  ReportFrequency: () => ReportFrequency,
  S3BucketRegion: () => S3BucketRegion,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  ThrottlingException: () => ThrottlingException,
  UpdateReportDefinitionCommand: () => UpdateReportDefinitionCommand,
  ValidationException: () => ValidationException,
  __Client: () => import_smithy_client.Client,
  paginateListReportDefinitions: () => paginateListReportDefinitions
});
module.exports = __toCommonJS(src_exports);

// src/ApplicationCostProfilerClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "application-cost-profiler"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/ApplicationCostProfilerClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/ApplicationCostProfilerClient.ts
var _ApplicationCostProfilerClient = class _ApplicationCostProfilerClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultApplicationCostProfilerHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_ApplicationCostProfilerClient, "ApplicationCostProfilerClient");
var ApplicationCostProfilerClient = _ApplicationCostProfilerClient;

// src/ApplicationCostProfiler.ts


// src/commands/DeleteReportDefinitionCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/ApplicationCostProfilerServiceException.ts

var _ApplicationCostProfilerServiceException = class _ApplicationCostProfilerServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _ApplicationCostProfilerServiceException.prototype);
  }
};
__name(_ApplicationCostProfilerServiceException, "ApplicationCostProfilerServiceException");
var ApplicationCostProfilerServiceException = _ApplicationCostProfilerServiceException;

// src/models/models_0.ts
var _AccessDeniedException = class _AccessDeniedException extends ApplicationCostProfilerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
__name(_AccessDeniedException, "AccessDeniedException");
var AccessDeniedException = _AccessDeniedException;
var _InternalServerException = class _InternalServerException extends ApplicationCostProfilerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _ThrottlingException = class _ThrottlingException extends ApplicationCostProfilerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var _ValidationException = class _ValidationException extends ApplicationCostProfilerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var Format = {
  CSV: "CSV",
  PARQUET: "PARQUET"
};
var ReportFrequency = {
  ALL: "ALL",
  DAILY: "DAILY",
  MONTHLY: "MONTHLY"
};
var S3BucketRegion = {
  AF_SOUTH_1: "af-south-1",
  AP_EAST_1: "ap-east-1",
  EU_SOUTH_1: "eu-south-1",
  ME_SOUTH_1: "me-south-1"
};
var _ServiceQuotaExceededException = class _ServiceQuotaExceededException extends ApplicationCostProfilerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
__name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
var ServiceQuotaExceededException = _ServiceQuotaExceededException;

// src/protocols/Aws_restJson1.ts
var se_DeleteReportDefinitionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/reportDefinition/{reportId}");
  b.p("reportId", () => input.reportId, "{reportId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteReportDefinitionCommand");
var se_GetReportDefinitionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/reportDefinition/{reportId}");
  b.p("reportId", () => input.reportId, "{reportId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetReportDefinitionCommand");
var se_ImportApplicationUsageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/importApplicationUsage");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      sourceS3Location: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ImportApplicationUsageCommand");
var se_ListReportDefinitionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/reportDefinition");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListReportDefinitionsCommand");
var se_PutReportDefinitionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/reportDefinition");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      destinationS3Location: (_) => (0, import_smithy_client._json)(_),
      format: [],
      reportDescription: [],
      reportFrequency: [],
      reportId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutReportDefinitionCommand");
var se_UpdateReportDefinitionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/reportDefinition/{reportId}");
  b.p("reportId", () => input.reportId, "{reportId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      destinationS3Location: (_) => (0, import_smithy_client._json)(_),
      format: [],
      reportDescription: [],
      reportFrequency: []
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateReportDefinitionCommand");
var de_DeleteReportDefinitionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    reportId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteReportDefinitionCommand");
var de_GetReportDefinitionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    destinationS3Location: import_smithy_client._json,
    format: import_smithy_client.expectString,
    lastUpdated: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    reportDescription: import_smithy_client.expectString,
    reportFrequency: import_smithy_client.expectString,
    reportId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetReportDefinitionCommand");
var de_ImportApplicationUsageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    importId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ImportApplicationUsageCommand");
var de_ListReportDefinitionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    reportDefinitions: (_) => de_ReportDefinitionList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListReportDefinitionsCommand");
var de_PutReportDefinitionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    reportId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutReportDefinitionCommand");
var de_UpdateReportDefinitionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    reportId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateReportDefinitionCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.applicationcostprofiler#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.applicationcostprofiler#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.applicationcostprofiler#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.applicationcostprofiler#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.applicationcostprofiler#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(ApplicationCostProfilerServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var de_ReportDefinition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    destinationS3Location: import_smithy_client._json,
    format: import_smithy_client.expectString,
    lastUpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    reportDescription: import_smithy_client.expectString,
    reportFrequency: import_smithy_client.expectString,
    reportId: import_smithy_client.expectString
  });
}, "de_ReportDefinition");
var de_ReportDefinitionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ReportDefinition(entry, context);
  });
  return retVal;
}, "de_ReportDefinitionList");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _mR = "maxResults";
var _nT = "nextToken";

// src/commands/DeleteReportDefinitionCommand.ts
var _DeleteReportDefinitionCommand = class _DeleteReportDefinitionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSApplicationCostProfiler", "DeleteReportDefinition", {}).n("ApplicationCostProfilerClient", "DeleteReportDefinitionCommand").f(void 0, void 0).ser(se_DeleteReportDefinitionCommand).de(de_DeleteReportDefinitionCommand).build() {
};
__name(_DeleteReportDefinitionCommand, "DeleteReportDefinitionCommand");
var DeleteReportDefinitionCommand = _DeleteReportDefinitionCommand;

// src/commands/GetReportDefinitionCommand.ts




var _GetReportDefinitionCommand = class _GetReportDefinitionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSApplicationCostProfiler", "GetReportDefinition", {}).n("ApplicationCostProfilerClient", "GetReportDefinitionCommand").f(void 0, void 0).ser(se_GetReportDefinitionCommand).de(de_GetReportDefinitionCommand).build() {
};
__name(_GetReportDefinitionCommand, "GetReportDefinitionCommand");
var GetReportDefinitionCommand = _GetReportDefinitionCommand;

// src/commands/ImportApplicationUsageCommand.ts




var _ImportApplicationUsageCommand = class _ImportApplicationUsageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSApplicationCostProfiler", "ImportApplicationUsage", {}).n("ApplicationCostProfilerClient", "ImportApplicationUsageCommand").f(void 0, void 0).ser(se_ImportApplicationUsageCommand).de(de_ImportApplicationUsageCommand).build() {
};
__name(_ImportApplicationUsageCommand, "ImportApplicationUsageCommand");
var ImportApplicationUsageCommand = _ImportApplicationUsageCommand;

// src/commands/ListReportDefinitionsCommand.ts




var _ListReportDefinitionsCommand = class _ListReportDefinitionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSApplicationCostProfiler", "ListReportDefinitions", {}).n("ApplicationCostProfilerClient", "ListReportDefinitionsCommand").f(void 0, void 0).ser(se_ListReportDefinitionsCommand).de(de_ListReportDefinitionsCommand).build() {
};
__name(_ListReportDefinitionsCommand, "ListReportDefinitionsCommand");
var ListReportDefinitionsCommand = _ListReportDefinitionsCommand;

// src/commands/PutReportDefinitionCommand.ts




var _PutReportDefinitionCommand = class _PutReportDefinitionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSApplicationCostProfiler", "PutReportDefinition", {}).n("ApplicationCostProfilerClient", "PutReportDefinitionCommand").f(void 0, void 0).ser(se_PutReportDefinitionCommand).de(de_PutReportDefinitionCommand).build() {
};
__name(_PutReportDefinitionCommand, "PutReportDefinitionCommand");
var PutReportDefinitionCommand = _PutReportDefinitionCommand;

// src/commands/UpdateReportDefinitionCommand.ts




var _UpdateReportDefinitionCommand = class _UpdateReportDefinitionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSApplicationCostProfiler", "UpdateReportDefinition", {}).n("ApplicationCostProfilerClient", "UpdateReportDefinitionCommand").f(void 0, void 0).ser(se_UpdateReportDefinitionCommand).de(de_UpdateReportDefinitionCommand).build() {
};
__name(_UpdateReportDefinitionCommand, "UpdateReportDefinitionCommand");
var UpdateReportDefinitionCommand = _UpdateReportDefinitionCommand;

// src/ApplicationCostProfiler.ts
var commands = {
  DeleteReportDefinitionCommand,
  GetReportDefinitionCommand,
  ImportApplicationUsageCommand,
  ListReportDefinitionsCommand,
  PutReportDefinitionCommand,
  UpdateReportDefinitionCommand
};
var _ApplicationCostProfiler = class _ApplicationCostProfiler extends ApplicationCostProfilerClient {
};
__name(_ApplicationCostProfiler, "ApplicationCostProfiler");
var ApplicationCostProfiler = _ApplicationCostProfiler;
(0, import_smithy_client.createAggregatedClient)(commands, ApplicationCostProfiler);

// src/pagination/ListReportDefinitionsPaginator.ts

var paginateListReportDefinitions = (0, import_core.createPaginator)(ApplicationCostProfilerClient, ListReportDefinitionsCommand, "nextToken", "nextToken", "maxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  ApplicationCostProfilerServiceException,
  __Client,
  ApplicationCostProfilerClient,
  ApplicationCostProfiler,
  $Command,
  DeleteReportDefinitionCommand,
  GetReportDefinitionCommand,
  ImportApplicationUsageCommand,
  ListReportDefinitionsCommand,
  PutReportDefinitionCommand,
  UpdateReportDefinitionCommand,
  paginateListReportDefinitions,
  AccessDeniedException,
  InternalServerException,
  ThrottlingException,
  ValidationException,
  Format,
  ReportFrequency,
  S3BucketRegion,
  ServiceQuotaExceededException
});

