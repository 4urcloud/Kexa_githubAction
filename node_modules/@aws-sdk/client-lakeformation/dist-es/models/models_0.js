import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { LakeFormationServiceException as __BaseException } from "./LakeFormationServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const ResourceType = {
    DATABASE: "DATABASE",
    TABLE: "TABLE",
};
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
export class EntityNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "EntityNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EntityNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntityNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
    }
}
export class OperationTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationTimeoutException.prototype);
        this.Message = opts.Message;
    }
}
export class AlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export const ApplicationStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const Permission = {
    ALL: "ALL",
    ALTER: "ALTER",
    ASSOCIATE: "ASSOCIATE",
    CREATE_DATABASE: "CREATE_DATABASE",
    CREATE_LF_TAG: "CREATE_LF_TAG",
    CREATE_TABLE: "CREATE_TABLE",
    DATA_LOCATION_ACCESS: "DATA_LOCATION_ACCESS",
    DELETE: "DELETE",
    DESCRIBE: "DESCRIBE",
    DROP: "DROP",
    GRANT_WITH_LF_TAG_EXPRESSION: "GRANT_WITH_LF_TAG_EXPRESSION",
    INSERT: "INSERT",
    SELECT: "SELECT",
};
export class TransactionCommitInProgressException extends __BaseException {
    constructor(opts) {
        super({
            name: "TransactionCommitInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransactionCommitInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionCommitInProgressException.prototype);
        this.Message = opts.Message;
    }
}
export class TransactionCommittedException extends __BaseException {
    constructor(opts) {
        super({
            name: "TransactionCommittedException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransactionCommittedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionCommittedException.prototype);
        this.Message = opts.Message;
    }
}
export const TransactionStatus = {
    ABORTED: "ABORTED",
    ACTIVE: "ACTIVE",
    COMMITTED: "COMMITTED",
    COMMIT_IN_PROGRESS: "COMMIT_IN_PROGRESS",
};
export class TransactionCanceledException extends __BaseException {
    constructor(opts) {
        super({
            name: "TransactionCanceledException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransactionCanceledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNumberLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNumberLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNumberLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNumberLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const EnableStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export class ResourceNotReadyException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
export const QueryStateString = {
    ERROR: "ERROR",
    EXPIRED: "EXPIRED",
    FINISHED: "FINISHED",
    PENDING: "PENDING",
    WORKUNITS_AVAILABLE: "WORKUNITS_AVAILABLE",
};
export class ExpiredException extends __BaseException {
    constructor(opts) {
        super({
            name: "ExpiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "ExpiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredException.prototype);
        this.Message = opts.Message;
    }
}
export class StatisticsNotReadyYetException extends __BaseException {
    constructor(opts) {
        super({
            name: "StatisticsNotReadyYetException",
            $fault: "client",
            ...opts,
        });
        this.name = "StatisticsNotReadyYetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StatisticsNotReadyYetException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottledException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottledException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottledException";
        this.$fault = "client";
        this.$retryable = {
            throttling: true,
        };
        Object.setPrototypeOf(this, ThrottledException.prototype);
        this.Message = opts.Message;
    }
}
export class GlueEncryptionException extends __BaseException {
    constructor(opts) {
        super({
            name: "GlueEncryptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "GlueEncryptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlueEncryptionException.prototype);
        this.Message = opts.Message;
    }
}
export const PermissionType = {
    CELL_FILTER_PERMISSION: "CELL_FILTER_PERMISSION",
    COLUMN_PERMISSION: "COLUMN_PERMISSION",
    NESTED_CELL_PERMISSION: "NESTED_CELL_PERMISSION",
    NESTED_PERMISSION: "NESTED_PERMISSION",
};
export class PermissionTypeMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "PermissionTypeMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "PermissionTypeMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PermissionTypeMismatchException.prototype);
        this.Message = opts.Message;
    }
}
export class WorkUnitsNotReadyYetException extends __BaseException {
    constructor(opts) {
        super({
            name: "WorkUnitsNotReadyYetException",
            $fault: "client",
            ...opts,
        });
        this.name = "WorkUnitsNotReadyYetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, WorkUnitsNotReadyYetException.prototype);
        this.Message = opts.Message;
    }
}
export const ResourceShareType = {
    ALL: "ALL",
    FOREIGN: "FOREIGN",
};
export const DataLakeResourceType = {
    CATALOG: "CATALOG",
    DATABASE: "DATABASE",
    DATA_LOCATION: "DATA_LOCATION",
    LF_TAG: "LF_TAG",
    LF_TAG_POLICY: "LF_TAG_POLICY",
    LF_TAG_POLICY_DATABASE: "LF_TAG_POLICY_DATABASE",
    LF_TAG_POLICY_TABLE: "LF_TAG_POLICY_TABLE",
    TABLE: "TABLE",
};
export const ComparisonOperator = {
    BEGINS_WITH: "BEGINS_WITH",
    BETWEEN: "BETWEEN",
    CONTAINS: "CONTAINS",
    EQ: "EQ",
    GE: "GE",
    GT: "GT",
    IN: "IN",
    LE: "LE",
    LT: "LT",
    NE: "NE",
    NOT_CONTAINS: "NOT_CONTAINS",
};
export const FieldNameString = {
    LAST_MODIFIED: "LAST_MODIFIED",
    RESOURCE_ARN: "RESOURCE_ARN",
    ROLE_ARN: "ROLE_ARN",
};
export const OptimizerType = {
    COMPACTION: "COMPACTION",
    GARBAGE_COLLECTION: "GARBAGE_COLLECTION",
    GENERIC: "ALL",
};
export const TransactionStatusFilter = {
    ABORTED: "ABORTED",
    ACTIVE: "ACTIVE",
    ALL: "ALL",
    COMMITTED: "COMMITTED",
    COMPLETED: "COMPLETED",
};
export const TransactionType = {
    READ_AND_WRITE: "READ_AND_WRITE",
    READ_ONLY: "READ_ONLY",
};
export const GetWorkUnitResultsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.WorkUnitToken && { WorkUnitToken: SENSITIVE_STRING }),
});
export const GetWorkUnitResultsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const StartQueryPlanningRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.QueryString && { QueryString: SENSITIVE_STRING }),
});
