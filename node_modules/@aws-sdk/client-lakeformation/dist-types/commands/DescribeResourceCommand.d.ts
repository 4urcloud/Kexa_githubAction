import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../LakeFormationClient";
import { DescribeResourceRequest, DescribeResourceResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link DescribeResourceCommand}.
 */
export interface DescribeResourceCommandInput extends DescribeResourceRequest {
}
/**
 * @public
 *
 * The output of {@link DescribeResourceCommand}.
 */
export interface DescribeResourceCommandOutput extends DescribeResourceResponse, __MetadataBearer {
}
declare const DescribeResourceCommand_base: {
    new (input: DescribeResourceCommandInput): import("@smithy/smithy-client").CommandImpl<DescribeResourceCommandInput, DescribeResourceCommandOutput, LakeFormationClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * <p>Retrieves the current data access role for the given resource registered in Lake Formation.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { LakeFormationClient, DescribeResourceCommand } from "@aws-sdk/client-lakeformation"; // ES Modules import
 * // const { LakeFormationClient, DescribeResourceCommand } = require("@aws-sdk/client-lakeformation"); // CommonJS import
 * const client = new LakeFormationClient(config);
 * const input = { // DescribeResourceRequest
 *   ResourceArn: "STRING_VALUE", // required
 * };
 * const command = new DescribeResourceCommand(input);
 * const response = await client.send(command);
 * // { // DescribeResourceResponse
 * //   ResourceInfo: { // ResourceInfo
 * //     ResourceArn: "STRING_VALUE",
 * //     RoleArn: "STRING_VALUE",
 * //     LastModified: new Date("TIMESTAMP"),
 * //     WithFederation: true || false,
 * //     HybridAccessEnabled: true || false,
 * //   },
 * // };
 *
 * ```
 *
 * @param DescribeResourceCommandInput - {@link DescribeResourceCommandInput}
 * @returns {@link DescribeResourceCommandOutput}
 * @see {@link DescribeResourceCommandInput} for command's `input` shape.
 * @see {@link DescribeResourceCommandOutput} for command's `response` shape.
 * @see {@link LakeFormationClientResolvedConfig | config} for LakeFormationClient's `config` shape.
 *
 * @throws {@link EntityNotFoundException} (client fault)
 *  <p>A specified entity does not exist.</p>
 *
 * @throws {@link InternalServiceException} (server fault)
 *  <p>An internal service error occurred.</p>
 *
 * @throws {@link InvalidInputException} (client fault)
 *  <p>The input provided was not valid.</p>
 *
 * @throws {@link OperationTimeoutException} (client fault)
 *  <p>The operation timed out.</p>
 *
 * @throws {@link LakeFormationServiceException}
 * <p>Base exception class for all service exceptions from LakeFormation service.</p>
 *
 */
export declare class DescribeResourceCommand extends DescribeResourceCommand_base {
}
