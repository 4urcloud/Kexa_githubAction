import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { DefaultUndefinedFault, DomainAlreadyExistsFault, DomainDeprecatedFault, LimitExceededFault, OperationNotPermittedFault, TooManyTagsFault, TypeAlreadyExistsFault, TypeDeprecatedFault, UnknownResourceFault, WorkflowExecutionAlreadyStartedFault, } from "../models/models_0";
import { SWFServiceException as __BaseException } from "../models/SWFServiceException";
export const se_CountClosedWorkflowExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("CountClosedWorkflowExecutions");
    let body;
    body = JSON.stringify(se_CountClosedWorkflowExecutionsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CountOpenWorkflowExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("CountOpenWorkflowExecutions");
    let body;
    body = JSON.stringify(se_CountOpenWorkflowExecutionsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CountPendingActivityTasksCommand = async (input, context) => {
    const headers = sharedHeaders("CountPendingActivityTasks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CountPendingDecisionTasksCommand = async (input, context) => {
    const headers = sharedHeaders("CountPendingDecisionTasks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeprecateActivityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DeprecateActivityType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeprecateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeprecateDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeprecateWorkflowTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DeprecateWorkflowType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeActivityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeActivityType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkflowExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkflowExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWorkflowTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkflowType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetWorkflowExecutionHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetWorkflowExecutionHistory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListActivityTypesCommand = async (input, context) => {
    const headers = sharedHeaders("ListActivityTypes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListClosedWorkflowExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListClosedWorkflowExecutions");
    let body;
    body = JSON.stringify(se_ListClosedWorkflowExecutionsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDomains");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOpenWorkflowExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOpenWorkflowExecutions");
    let body;
    body = JSON.stringify(se_ListOpenWorkflowExecutionsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWorkflowTypesCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkflowTypes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PollForActivityTaskCommand = async (input, context) => {
    const headers = sharedHeaders("PollForActivityTask");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PollForDecisionTaskCommand = async (input, context) => {
    const headers = sharedHeaders("PollForDecisionTask");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RecordActivityTaskHeartbeatCommand = async (input, context) => {
    const headers = sharedHeaders("RecordActivityTaskHeartbeat");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterActivityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterActivityType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterDomainCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterWorkflowTypeCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterWorkflowType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestCancelWorkflowExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("RequestCancelWorkflowExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RespondActivityTaskCanceledCommand = async (input, context) => {
    const headers = sharedHeaders("RespondActivityTaskCanceled");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RespondActivityTaskCompletedCommand = async (input, context) => {
    const headers = sharedHeaders("RespondActivityTaskCompleted");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RespondActivityTaskFailedCommand = async (input, context) => {
    const headers = sharedHeaders("RespondActivityTaskFailed");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RespondDecisionTaskCompletedCommand = async (input, context) => {
    const headers = sharedHeaders("RespondDecisionTaskCompleted");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SignalWorkflowExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("SignalWorkflowExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartWorkflowExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartWorkflowExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateWorkflowExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("TerminateWorkflowExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UndeprecateActivityTypeCommand = async (input, context) => {
    const headers = sharedHeaders("UndeprecateActivityType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UndeprecateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("UndeprecateDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UndeprecateWorkflowTypeCommand = async (input, context) => {
    const headers = sharedHeaders("UndeprecateWorkflowType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CountClosedWorkflowExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CountOpenWorkflowExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CountPendingActivityTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CountPendingDecisionTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeprecateActivityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeprecateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeprecateWorkflowTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeActivityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ActivityTypeDetail(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkflowExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_WorkflowExecutionDetail(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWorkflowTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_WorkflowTypeDetail(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetWorkflowExecutionHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_History(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListActivityTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ActivityTypeInfos(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListClosedWorkflowExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_WorkflowExecutionInfos(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOpenWorkflowExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_WorkflowExecutionInfos(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWorkflowTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_WorkflowTypeInfos(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PollForActivityTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PollForDecisionTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DecisionTask(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RecordActivityTaskHeartbeatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterActivityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RegisterDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RegisterWorkflowTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RequestCancelWorkflowExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RespondActivityTaskCanceledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RespondActivityTaskCompletedCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RespondActivityTaskFailedCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RespondDecisionTaskCompletedCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_SignalWorkflowExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_StartWorkflowExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TerminateWorkflowExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UndeprecateActivityTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UndeprecateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UndeprecateWorkflowTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationNotPermittedFault":
        case "com.amazonaws.swf#OperationNotPermittedFault":
            throw await de_OperationNotPermittedFaultRes(parsedOutput, context);
        case "UnknownResourceFault":
        case "com.amazonaws.swf#UnknownResourceFault":
            throw await de_UnknownResourceFaultRes(parsedOutput, context);
        case "TypeDeprecatedFault":
        case "com.amazonaws.swf#TypeDeprecatedFault":
            throw await de_TypeDeprecatedFaultRes(parsedOutput, context);
        case "DomainDeprecatedFault":
        case "com.amazonaws.swf#DomainDeprecatedFault":
            throw await de_DomainDeprecatedFaultRes(parsedOutput, context);
        case "LimitExceededFault":
        case "com.amazonaws.swf#LimitExceededFault":
            throw await de_LimitExceededFaultRes(parsedOutput, context);
        case "TypeAlreadyExistsFault":
        case "com.amazonaws.swf#TypeAlreadyExistsFault":
            throw await de_TypeAlreadyExistsFaultRes(parsedOutput, context);
        case "DomainAlreadyExistsFault":
        case "com.amazonaws.swf#DomainAlreadyExistsFault":
            throw await de_DomainAlreadyExistsFaultRes(parsedOutput, context);
        case "TooManyTagsFault":
        case "com.amazonaws.swf#TooManyTagsFault":
            throw await de_TooManyTagsFaultRes(parsedOutput, context);
        case "DefaultUndefinedFault":
        case "com.amazonaws.swf#DefaultUndefinedFault":
            throw await de_DefaultUndefinedFaultRes(parsedOutput, context);
        case "WorkflowExecutionAlreadyStartedFault":
        case "com.amazonaws.swf#WorkflowExecutionAlreadyStartedFault":
            throw await de_WorkflowExecutionAlreadyStartedFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DefaultUndefinedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DefaultUndefinedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DomainAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DomainAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DomainDeprecatedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DomainDeprecatedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationNotPermittedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationNotPermittedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TypeAlreadyExistsFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TypeAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TypeDeprecatedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TypeDeprecatedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnknownResourceFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnknownResourceFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WorkflowExecutionAlreadyStartedFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WorkflowExecutionAlreadyStartedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CountClosedWorkflowExecutionsInput = (input, context) => {
    return take(input, {
        closeStatusFilter: _json,
        closeTimeFilter: (_) => se_ExecutionTimeFilter(_, context),
        domain: [],
        executionFilter: _json,
        startTimeFilter: (_) => se_ExecutionTimeFilter(_, context),
        tagFilter: _json,
        typeFilter: _json,
    });
};
const se_CountOpenWorkflowExecutionsInput = (input, context) => {
    return take(input, {
        domain: [],
        executionFilter: _json,
        startTimeFilter: (_) => se_ExecutionTimeFilter(_, context),
        tagFilter: _json,
        typeFilter: _json,
    });
};
const se_ExecutionTimeFilter = (input, context) => {
    return take(input, {
        latestDate: (_) => Math.round(_.getTime() / 1000),
        oldestDate: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ListClosedWorkflowExecutionsInput = (input, context) => {
    return take(input, {
        closeStatusFilter: _json,
        closeTimeFilter: (_) => se_ExecutionTimeFilter(_, context),
        domain: [],
        executionFilter: _json,
        maximumPageSize: [],
        nextPageToken: [],
        reverseOrder: [],
        startTimeFilter: (_) => se_ExecutionTimeFilter(_, context),
        tagFilter: _json,
        typeFilter: _json,
    });
};
const se_ListOpenWorkflowExecutionsInput = (input, context) => {
    return take(input, {
        domain: [],
        executionFilter: _json,
        maximumPageSize: [],
        nextPageToken: [],
        reverseOrder: [],
        startTimeFilter: (_) => se_ExecutionTimeFilter(_, context),
        tagFilter: _json,
        typeFilter: _json,
    });
};
const de_ActivityTypeDetail = (output, context) => {
    return take(output, {
        configuration: _json,
        typeInfo: (_) => de_ActivityTypeInfo(_, context),
    });
};
const de_ActivityTypeInfo = (output, context) => {
    return take(output, {
        activityType: _json,
        creationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deprecationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        status: __expectString,
    });
};
const de_ActivityTypeInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActivityTypeInfo(entry, context);
    });
    return retVal;
};
const de_ActivityTypeInfos = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        typeInfos: (_) => de_ActivityTypeInfoList(_, context),
    });
};
const de_DecisionTask = (output, context) => {
    return take(output, {
        events: (_) => de_HistoryEventList(_, context),
        nextPageToken: __expectString,
        previousStartedEventId: __expectLong,
        startedEventId: __expectLong,
        taskToken: __expectString,
        workflowExecution: _json,
        workflowType: _json,
    });
};
const de_History = (output, context) => {
    return take(output, {
        events: (_) => de_HistoryEventList(_, context),
        nextPageToken: __expectString,
    });
};
const de_HistoryEvent = (output, context) => {
    return take(output, {
        activityTaskCancelRequestedEventAttributes: _json,
        activityTaskCanceledEventAttributes: _json,
        activityTaskCompletedEventAttributes: _json,
        activityTaskFailedEventAttributes: _json,
        activityTaskScheduledEventAttributes: _json,
        activityTaskStartedEventAttributes: _json,
        activityTaskTimedOutEventAttributes: _json,
        cancelTimerFailedEventAttributes: _json,
        cancelWorkflowExecutionFailedEventAttributes: _json,
        childWorkflowExecutionCanceledEventAttributes: _json,
        childWorkflowExecutionCompletedEventAttributes: _json,
        childWorkflowExecutionFailedEventAttributes: _json,
        childWorkflowExecutionStartedEventAttributes: _json,
        childWorkflowExecutionTerminatedEventAttributes: _json,
        childWorkflowExecutionTimedOutEventAttributes: _json,
        completeWorkflowExecutionFailedEventAttributes: _json,
        continueAsNewWorkflowExecutionFailedEventAttributes: _json,
        decisionTaskCompletedEventAttributes: _json,
        decisionTaskScheduledEventAttributes: _json,
        decisionTaskStartedEventAttributes: _json,
        decisionTaskTimedOutEventAttributes: _json,
        eventId: __expectLong,
        eventTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        eventType: __expectString,
        externalWorkflowExecutionCancelRequestedEventAttributes: _json,
        externalWorkflowExecutionSignaledEventAttributes: _json,
        failWorkflowExecutionFailedEventAttributes: _json,
        lambdaFunctionCompletedEventAttributes: _json,
        lambdaFunctionFailedEventAttributes: _json,
        lambdaFunctionScheduledEventAttributes: _json,
        lambdaFunctionStartedEventAttributes: _json,
        lambdaFunctionTimedOutEventAttributes: _json,
        markerRecordedEventAttributes: _json,
        recordMarkerFailedEventAttributes: _json,
        requestCancelActivityTaskFailedEventAttributes: _json,
        requestCancelExternalWorkflowExecutionFailedEventAttributes: _json,
        requestCancelExternalWorkflowExecutionInitiatedEventAttributes: _json,
        scheduleActivityTaskFailedEventAttributes: _json,
        scheduleLambdaFunctionFailedEventAttributes: _json,
        signalExternalWorkflowExecutionFailedEventAttributes: _json,
        signalExternalWorkflowExecutionInitiatedEventAttributes: _json,
        startChildWorkflowExecutionFailedEventAttributes: _json,
        startChildWorkflowExecutionInitiatedEventAttributes: _json,
        startLambdaFunctionFailedEventAttributes: _json,
        startTimerFailedEventAttributes: _json,
        timerCanceledEventAttributes: _json,
        timerFiredEventAttributes: _json,
        timerStartedEventAttributes: _json,
        workflowExecutionCancelRequestedEventAttributes: _json,
        workflowExecutionCanceledEventAttributes: _json,
        workflowExecutionCompletedEventAttributes: _json,
        workflowExecutionContinuedAsNewEventAttributes: _json,
        workflowExecutionFailedEventAttributes: _json,
        workflowExecutionSignaledEventAttributes: _json,
        workflowExecutionStartedEventAttributes: _json,
        workflowExecutionTerminatedEventAttributes: _json,
        workflowExecutionTimedOutEventAttributes: _json,
    });
};
const de_HistoryEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoryEvent(entry, context);
    });
    return retVal;
};
const de_WorkflowExecutionDetail = (output, context) => {
    return take(output, {
        executionConfiguration: _json,
        executionInfo: (_) => de_WorkflowExecutionInfo(_, context),
        latestActivityTaskTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        latestExecutionContext: __expectString,
        openCounts: _json,
    });
};
const de_WorkflowExecutionInfo = (output, context) => {
    return take(output, {
        cancelRequested: __expectBoolean,
        closeStatus: __expectString,
        closeTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        execution: _json,
        executionStatus: __expectString,
        parent: _json,
        startTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        tagList: _json,
        workflowType: _json,
    });
};
const de_WorkflowExecutionInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkflowExecutionInfo(entry, context);
    });
    return retVal;
};
const de_WorkflowExecutionInfos = (output, context) => {
    return take(output, {
        executionInfos: (_) => de_WorkflowExecutionInfoList(_, context),
        nextPageToken: __expectString,
    });
};
const de_WorkflowTypeDetail = (output, context) => {
    return take(output, {
        configuration: _json,
        typeInfo: (_) => de_WorkflowTypeInfo(_, context),
    });
};
const de_WorkflowTypeInfo = (output, context) => {
    return take(output, {
        creationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deprecationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        status: __expectString,
        workflowType: _json,
    });
};
const de_WorkflowTypeInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkflowTypeInfo(entry, context);
    });
    return retVal;
};
const de_WorkflowTypeInfos = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        typeInfos: (_) => de_WorkflowTypeInfoList(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `SimpleWorkflowService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
