import { SWFServiceException as __BaseException } from "./SWFServiceException";
export const ActivityTaskTimeoutType = {
    HEARTBEAT: "HEARTBEAT",
    SCHEDULE_TO_CLOSE: "SCHEDULE_TO_CLOSE",
    SCHEDULE_TO_START: "SCHEDULE_TO_START",
    START_TO_CLOSE: "START_TO_CLOSE",
};
export const RegistrationStatus = {
    DEPRECATED: "DEPRECATED",
    REGISTERED: "REGISTERED",
};
export const CancelTimerFailedCause = {
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    TIMER_ID_UNKNOWN: "TIMER_ID_UNKNOWN",
};
export const CancelWorkflowExecutionFailedCause = {
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    UNHANDLED_DECISION: "UNHANDLED_DECISION",
};
export const ChildPolicy = {
    ABANDON: "ABANDON",
    REQUEST_CANCEL: "REQUEST_CANCEL",
    TERMINATE: "TERMINATE",
};
export const WorkflowExecutionTimeoutType = {
    START_TO_CLOSE: "START_TO_CLOSE",
};
export const CloseStatus = {
    CANCELED: "CANCELED",
    COMPLETED: "COMPLETED",
    CONTINUED_AS_NEW: "CONTINUED_AS_NEW",
    FAILED: "FAILED",
    TERMINATED: "TERMINATED",
    TIMED_OUT: "TIMED_OUT",
};
export const CompleteWorkflowExecutionFailedCause = {
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    UNHANDLED_DECISION: "UNHANDLED_DECISION",
};
export const ContinueAsNewWorkflowExecutionFailedCause = {
    CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED: "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED",
    DEFAULT_CHILD_POLICY_UNDEFINED: "DEFAULT_CHILD_POLICY_UNDEFINED",
    DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED: "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED",
    DEFAULT_TASK_LIST_UNDEFINED: "DEFAULT_TASK_LIST_UNDEFINED",
    DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED: "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED",
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    UNHANDLED_DECISION: "UNHANDLED_DECISION",
    WORKFLOW_TYPE_DEPRECATED: "WORKFLOW_TYPE_DEPRECATED",
    WORKFLOW_TYPE_DOES_NOT_EXIST: "WORKFLOW_TYPE_DOES_NOT_EXIST",
};
export class OperationNotPermittedFault extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationNotPermittedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationNotPermittedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotPermittedFault.prototype);
    }
}
export class UnknownResourceFault extends __BaseException {
    constructor(opts) {
        super({
            name: "UnknownResourceFault",
            $fault: "client",
            ...opts,
        });
        this.name = "UnknownResourceFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnknownResourceFault.prototype);
    }
}
export const DecisionType = {
    CancelTimer: "CancelTimer",
    CancelWorkflowExecution: "CancelWorkflowExecution",
    CompleteWorkflowExecution: "CompleteWorkflowExecution",
    ContinueAsNewWorkflowExecution: "ContinueAsNewWorkflowExecution",
    FailWorkflowExecution: "FailWorkflowExecution",
    RecordMarker: "RecordMarker",
    RequestCancelActivityTask: "RequestCancelActivityTask",
    RequestCancelExternalWorkflowExecution: "RequestCancelExternalWorkflowExecution",
    ScheduleActivityTask: "ScheduleActivityTask",
    ScheduleLambdaFunction: "ScheduleLambdaFunction",
    SignalExternalWorkflowExecution: "SignalExternalWorkflowExecution",
    StartChildWorkflowExecution: "StartChildWorkflowExecution",
    StartTimer: "StartTimer",
};
export const DecisionTaskTimeoutType = {
    SCHEDULE_TO_START: "SCHEDULE_TO_START",
    START_TO_CLOSE: "START_TO_CLOSE",
};
export const EventType = {
    ActivityTaskCancelRequested: "ActivityTaskCancelRequested",
    ActivityTaskCanceled: "ActivityTaskCanceled",
    ActivityTaskCompleted: "ActivityTaskCompleted",
    ActivityTaskFailed: "ActivityTaskFailed",
    ActivityTaskScheduled: "ActivityTaskScheduled",
    ActivityTaskStarted: "ActivityTaskStarted",
    ActivityTaskTimedOut: "ActivityTaskTimedOut",
    CancelTimerFailed: "CancelTimerFailed",
    CancelWorkflowExecutionFailed: "CancelWorkflowExecutionFailed",
    ChildWorkflowExecutionCanceled: "ChildWorkflowExecutionCanceled",
    ChildWorkflowExecutionCompleted: "ChildWorkflowExecutionCompleted",
    ChildWorkflowExecutionFailed: "ChildWorkflowExecutionFailed",
    ChildWorkflowExecutionStarted: "ChildWorkflowExecutionStarted",
    ChildWorkflowExecutionTerminated: "ChildWorkflowExecutionTerminated",
    ChildWorkflowExecutionTimedOut: "ChildWorkflowExecutionTimedOut",
    CompleteWorkflowExecutionFailed: "CompleteWorkflowExecutionFailed",
    ContinueAsNewWorkflowExecutionFailed: "ContinueAsNewWorkflowExecutionFailed",
    DecisionTaskCompleted: "DecisionTaskCompleted",
    DecisionTaskScheduled: "DecisionTaskScheduled",
    DecisionTaskStarted: "DecisionTaskStarted",
    DecisionTaskTimedOut: "DecisionTaskTimedOut",
    ExternalWorkflowExecutionCancelRequested: "ExternalWorkflowExecutionCancelRequested",
    ExternalWorkflowExecutionSignaled: "ExternalWorkflowExecutionSignaled",
    FailWorkflowExecutionFailed: "FailWorkflowExecutionFailed",
    LambdaFunctionCompleted: "LambdaFunctionCompleted",
    LambdaFunctionFailed: "LambdaFunctionFailed",
    LambdaFunctionScheduled: "LambdaFunctionScheduled",
    LambdaFunctionStarted: "LambdaFunctionStarted",
    LambdaFunctionTimedOut: "LambdaFunctionTimedOut",
    MarkerRecorded: "MarkerRecorded",
    RecordMarkerFailed: "RecordMarkerFailed",
    RequestCancelActivityTaskFailed: "RequestCancelActivityTaskFailed",
    RequestCancelExternalWorkflowExecutionFailed: "RequestCancelExternalWorkflowExecutionFailed",
    RequestCancelExternalWorkflowExecutionInitiated: "RequestCancelExternalWorkflowExecutionInitiated",
    ScheduleActivityTaskFailed: "ScheduleActivityTaskFailed",
    ScheduleLambdaFunctionFailed: "ScheduleLambdaFunctionFailed",
    SignalExternalWorkflowExecutionFailed: "SignalExternalWorkflowExecutionFailed",
    SignalExternalWorkflowExecutionInitiated: "SignalExternalWorkflowExecutionInitiated",
    StartChildWorkflowExecutionFailed: "StartChildWorkflowExecutionFailed",
    StartChildWorkflowExecutionInitiated: "StartChildWorkflowExecutionInitiated",
    StartLambdaFunctionFailed: "StartLambdaFunctionFailed",
    StartTimerFailed: "StartTimerFailed",
    TimerCanceled: "TimerCanceled",
    TimerFired: "TimerFired",
    TimerStarted: "TimerStarted",
    WorkflowExecutionCancelRequested: "WorkflowExecutionCancelRequested",
    WorkflowExecutionCanceled: "WorkflowExecutionCanceled",
    WorkflowExecutionCompleted: "WorkflowExecutionCompleted",
    WorkflowExecutionContinuedAsNew: "WorkflowExecutionContinuedAsNew",
    WorkflowExecutionFailed: "WorkflowExecutionFailed",
    WorkflowExecutionSignaled: "WorkflowExecutionSignaled",
    WorkflowExecutionStarted: "WorkflowExecutionStarted",
    WorkflowExecutionTerminated: "WorkflowExecutionTerminated",
    WorkflowExecutionTimedOut: "WorkflowExecutionTimedOut",
};
export const FailWorkflowExecutionFailedCause = {
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    UNHANDLED_DECISION: "UNHANDLED_DECISION",
};
export const LambdaFunctionTimeoutType = {
    START_TO_CLOSE: "START_TO_CLOSE",
};
export const RecordMarkerFailedCause = {
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
};
export const RequestCancelActivityTaskFailedCause = {
    ACTIVITY_ID_UNKNOWN: "ACTIVITY_ID_UNKNOWN",
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
};
export const RequestCancelExternalWorkflowExecutionFailedCause = {
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED: "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED",
    UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION: "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION",
};
export const ScheduleActivityTaskFailedCause = {
    ACTIVITY_CREATION_RATE_EXCEEDED: "ACTIVITY_CREATION_RATE_EXCEEDED",
    ACTIVITY_ID_ALREADY_IN_USE: "ACTIVITY_ID_ALREADY_IN_USE",
    ACTIVITY_TYPE_DEPRECATED: "ACTIVITY_TYPE_DEPRECATED",
    ACTIVITY_TYPE_DOES_NOT_EXIST: "ACTIVITY_TYPE_DOES_NOT_EXIST",
    DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED: "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED",
    DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED: "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED",
    DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED: "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED",
    DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED: "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED",
    DEFAULT_TASK_LIST_UNDEFINED: "DEFAULT_TASK_LIST_UNDEFINED",
    OPEN_ACTIVITIES_LIMIT_EXCEEDED: "OPEN_ACTIVITIES_LIMIT_EXCEEDED",
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
};
export const ScheduleLambdaFunctionFailedCause = {
    ID_ALREADY_IN_USE: "ID_ALREADY_IN_USE",
    LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED: "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED",
    LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION: "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION",
    OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED: "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED",
};
export const SignalExternalWorkflowExecutionFailedCause = {
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED: "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED",
    UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION: "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION",
};
export const StartChildWorkflowExecutionFailedCause = {
    CHILD_CREATION_RATE_EXCEEDED: "CHILD_CREATION_RATE_EXCEEDED",
    DEFAULT_CHILD_POLICY_UNDEFINED: "DEFAULT_CHILD_POLICY_UNDEFINED",
    DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED: "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED",
    DEFAULT_TASK_LIST_UNDEFINED: "DEFAULT_TASK_LIST_UNDEFINED",
    DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED: "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED",
    OPEN_CHILDREN_LIMIT_EXCEEDED: "OPEN_CHILDREN_LIMIT_EXCEEDED",
    OPEN_WORKFLOWS_LIMIT_EXCEEDED: "OPEN_WORKFLOWS_LIMIT_EXCEEDED",
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    WORKFLOW_ALREADY_RUNNING: "WORKFLOW_ALREADY_RUNNING",
    WORKFLOW_TYPE_DEPRECATED: "WORKFLOW_TYPE_DEPRECATED",
    WORKFLOW_TYPE_DOES_NOT_EXIST: "WORKFLOW_TYPE_DOES_NOT_EXIST",
};
export const StartLambdaFunctionFailedCause = {
    ASSUME_ROLE_FAILED: "ASSUME_ROLE_FAILED",
};
export const StartTimerFailedCause = {
    OPEN_TIMERS_LIMIT_EXCEEDED: "OPEN_TIMERS_LIMIT_EXCEEDED",
    OPERATION_NOT_PERMITTED: "OPERATION_NOT_PERMITTED",
    TIMER_CREATION_RATE_EXCEEDED: "TIMER_CREATION_RATE_EXCEEDED",
    TIMER_ID_ALREADY_IN_USE: "TIMER_ID_ALREADY_IN_USE",
};
export const WorkflowExecutionCancelRequestedCause = {
    CHILD_POLICY_APPLIED: "CHILD_POLICY_APPLIED",
};
export const WorkflowExecutionTerminatedCause = {
    CHILD_POLICY_APPLIED: "CHILD_POLICY_APPLIED",
    EVENT_LIMIT_EXCEEDED: "EVENT_LIMIT_EXCEEDED",
    OPERATOR_INITIATED: "OPERATOR_INITIATED",
};
export class DefaultUndefinedFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DefaultUndefinedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DefaultUndefinedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DefaultUndefinedFault.prototype);
    }
}
export class TypeDeprecatedFault extends __BaseException {
    constructor(opts) {
        super({
            name: "TypeDeprecatedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "TypeDeprecatedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, TypeDeprecatedFault.prototype);
    }
}
export class DomainDeprecatedFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DomainDeprecatedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DomainDeprecatedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DomainDeprecatedFault.prototype);
    }
}
export const ExecutionStatus = {
    CLOSED: "CLOSED",
    OPEN: "OPEN",
};
export class DomainAlreadyExistsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "DomainAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DomainAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DomainAlreadyExistsFault.prototype);
    }
}
export class LimitExceededFault extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededFault.prototype);
    }
}
export class TypeAlreadyExistsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "TypeAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "TypeAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, TypeAlreadyExistsFault.prototype);
    }
}
export class TooManyTagsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsFault.prototype);
    }
}
export class WorkflowExecutionAlreadyStartedFault extends __BaseException {
    constructor(opts) {
        super({
            name: "WorkflowExecutionAlreadyStartedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "WorkflowExecutionAlreadyStartedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, WorkflowExecutionAlreadyStartedFault.prototype);
    }
}
