import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { AccessAnalyzerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AccessAnalyzerClient";
import { ListFindingsV2Request, ListFindingsV2Response } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ListFindingsV2Command}.
 */
export interface ListFindingsV2CommandInput extends ListFindingsV2Request {
}
/**
 * @public
 *
 * The output of {@link ListFindingsV2Command}.
 */
export interface ListFindingsV2CommandOutput extends ListFindingsV2Response, __MetadataBearer {
}
declare const ListFindingsV2Command_base: {
    new (input: ListFindingsV2CommandInput): import("@smithy/smithy-client").CommandImpl<ListFindingsV2CommandInput, ListFindingsV2CommandOutput, AccessAnalyzerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * <p>Retrieves a list of findings generated by the specified analyzer.</p>
 *          <p>To learn about filter keys that you can use to retrieve a list of findings, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-reference-filter-keys.html">IAM Access Analyzer filter keys</a> in the <b>IAM User Guide</b>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AccessAnalyzerClient, ListFindingsV2Command } from "@aws-sdk/client-accessanalyzer"; // ES Modules import
 * // const { AccessAnalyzerClient, ListFindingsV2Command } = require("@aws-sdk/client-accessanalyzer"); // CommonJS import
 * const client = new AccessAnalyzerClient(config);
 * const input = { // ListFindingsV2Request
 *   analyzerArn: "STRING_VALUE", // required
 *   filter: { // FilterCriteriaMap
 *     "<keys>": { // Criterion
 *       eq: [ // ValueList
 *         "STRING_VALUE",
 *       ],
 *       neq: [
 *         "STRING_VALUE",
 *       ],
 *       contains: [
 *         "STRING_VALUE",
 *       ],
 *       exists: true || false,
 *     },
 *   },
 *   maxResults: Number("int"),
 *   nextToken: "STRING_VALUE",
 *   sort: { // SortCriteria
 *     attributeName: "STRING_VALUE",
 *     orderBy: "STRING_VALUE",
 *   },
 * };
 * const command = new ListFindingsV2Command(input);
 * const response = await client.send(command);
 * // { // ListFindingsV2Response
 * //   findings: [ // FindingsListV2 // required
 * //     { // FindingSummaryV2
 * //       analyzedAt: new Date("TIMESTAMP"), // required
 * //       createdAt: new Date("TIMESTAMP"), // required
 * //       error: "STRING_VALUE",
 * //       id: "STRING_VALUE", // required
 * //       resource: "STRING_VALUE",
 * //       resourceType: "STRING_VALUE", // required
 * //       resourceOwnerAccount: "STRING_VALUE", // required
 * //       status: "STRING_VALUE", // required
 * //       updatedAt: new Date("TIMESTAMP"), // required
 * //       findingType: "STRING_VALUE",
 * //     },
 * //   ],
 * //   nextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ListFindingsV2CommandInput - {@link ListFindingsV2CommandInput}
 * @returns {@link ListFindingsV2CommandOutput}
 * @see {@link ListFindingsV2CommandInput} for command's `input` shape.
 * @see {@link ListFindingsV2CommandOutput} for command's `response` shape.
 * @see {@link AccessAnalyzerClientResolvedConfig | config} for AccessAnalyzerClient's `config` shape.
 *
 * @throws {@link AccessDeniedException} (client fault)
 *  <p>You do not have sufficient access to perform this action.</p>
 *
 * @throws {@link InternalServerException} (server fault)
 *  <p>Internal server error.</p>
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>The specified resource could not be found.</p>
 *
 * @throws {@link ThrottlingException} (client fault)
 *  <p>Throttling limit exceeded error.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>Validation exception error.</p>
 *
 * @throws {@link AccessAnalyzerServiceException}
 * <p>Base exception class for all service exceptions from AccessAnalyzer service.</p>
 *
 */
export declare class ListFindingsV2Command extends ListFindingsV2Command_base {
}
