import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { AccessAnalyzerServiceException as __BaseException } from "./AccessAnalyzerServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        this.$retryable = {};
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        this.$retryable = {
            throttling: true,
        };
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "cannotParse",
    FIELD_VALIDATION_FAILED: "fieldValidationFailed",
    OTHER: "other",
    UNKNOWN_OPERATION: "unknownOperation",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.reason = opts.reason;
        this.fieldList = opts.fieldList;
    }
}
export var AnalyzerConfiguration;
(function (AnalyzerConfiguration) {
    AnalyzerConfiguration.visit = (value, visitor) => {
        if (value.unusedAccess !== undefined)
            return visitor.unusedAccess(value.unusedAccess);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AnalyzerConfiguration || (AnalyzerConfiguration = {}));
export const AccessCheckPolicyType = {
    IDENTITY_POLICY: "IDENTITY_POLICY",
    RESOURCE_POLICY: "RESOURCE_POLICY",
};
export const CheckAccessNotGrantedResult = {
    FAIL: "FAIL",
    PASS: "PASS",
};
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
export class UnprocessableEntityException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnprocessableEntityException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnprocessableEntityException";
        this.$fault = "client";
        this.$retryable = {};
        Object.setPrototypeOf(this, UnprocessableEntityException.prototype);
    }
}
export const CheckNoNewAccessResult = {
    FAIL: "FAIL",
    PASS: "PASS",
};
export const KmsGrantOperation = {
    CREATE_GRANT: "CreateGrant",
    DECRYPT: "Decrypt",
    DESCRIBE_KEY: "DescribeKey",
    ENCRYPT: "Encrypt",
    GENERATE_DATA_KEY: "GenerateDataKey",
    GENERATE_DATA_KEY_PAIR: "GenerateDataKeyPair",
    GENERATE_DATA_KEY_PAIR_WITHOUT_PLAINTEXT: "GenerateDataKeyPairWithoutPlaintext",
    GENERATE_DATA_KEY_WITHOUT_PLAINTEXT: "GenerateDataKeyWithoutPlaintext",
    GET_PUBLIC_KEY: "GetPublicKey",
    REENCRYPT_FROM: "ReEncryptFrom",
    REENCRYPT_TO: "ReEncryptTo",
    RETIRE_GRANT: "RetireGrant",
    SIGN: "Sign",
    VERIFY: "Verify",
};
export var RdsDbClusterSnapshotAttributeValue;
(function (RdsDbClusterSnapshotAttributeValue) {
    RdsDbClusterSnapshotAttributeValue.visit = (value, visitor) => {
        if (value.accountIds !== undefined)
            return visitor.accountIds(value.accountIds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RdsDbClusterSnapshotAttributeValue || (RdsDbClusterSnapshotAttributeValue = {}));
export var RdsDbSnapshotAttributeValue;
(function (RdsDbSnapshotAttributeValue) {
    RdsDbSnapshotAttributeValue.visit = (value, visitor) => {
        if (value.accountIds !== undefined)
            return visitor.accountIds(value.accountIds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RdsDbSnapshotAttributeValue || (RdsDbSnapshotAttributeValue = {}));
export var NetworkOriginConfiguration;
(function (NetworkOriginConfiguration) {
    NetworkOriginConfiguration.visit = (value, visitor) => {
        if (value.vpcConfiguration !== undefined)
            return visitor.vpcConfiguration(value.vpcConfiguration);
        if (value.internetConfiguration !== undefined)
            return visitor.internetConfiguration(value.internetConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(NetworkOriginConfiguration || (NetworkOriginConfiguration = {}));
export var AclGrantee;
(function (AclGrantee) {
    AclGrantee.visit = (value, visitor) => {
        if (value.id !== undefined)
            return visitor.id(value.id);
        if (value.uri !== undefined)
            return visitor.uri(value.uri);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AclGrantee || (AclGrantee = {}));
export const AclPermission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    READ_ACP: "READ_ACP",
    WRITE: "WRITE",
    WRITE_ACP: "WRITE_ACP",
};
export var Configuration;
(function (Configuration) {
    Configuration.visit = (value, visitor) => {
        if (value.ebsSnapshot !== undefined)
            return visitor.ebsSnapshot(value.ebsSnapshot);
        if (value.ecrRepository !== undefined)
            return visitor.ecrRepository(value.ecrRepository);
        if (value.iamRole !== undefined)
            return visitor.iamRole(value.iamRole);
        if (value.efsFileSystem !== undefined)
            return visitor.efsFileSystem(value.efsFileSystem);
        if (value.kmsKey !== undefined)
            return visitor.kmsKey(value.kmsKey);
        if (value.rdsDbClusterSnapshot !== undefined)
            return visitor.rdsDbClusterSnapshot(value.rdsDbClusterSnapshot);
        if (value.rdsDbSnapshot !== undefined)
            return visitor.rdsDbSnapshot(value.rdsDbSnapshot);
        if (value.secretsManagerSecret !== undefined)
            return visitor.secretsManagerSecret(value.secretsManagerSecret);
        if (value.s3Bucket !== undefined)
            return visitor.s3Bucket(value.s3Bucket);
        if (value.snsTopic !== undefined)
            return visitor.snsTopic(value.snsTopic);
        if (value.sqsQueue !== undefined)
            return visitor.sqsQueue(value.sqsQueue);
        if (value.s3ExpressDirectoryBucket !== undefined)
            return visitor.s3ExpressDirectoryBucket(value.s3ExpressDirectoryBucket);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Configuration || (Configuration = {}));
export const AccessPreviewStatus = {
    COMPLETED: "COMPLETED",
    CREATING: "CREATING",
    FAILED: "FAILED",
};
export const AccessPreviewStatusReasonCode = {
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_CONFIGURATION: "INVALID_CONFIGURATION",
};
export var FindingDetails;
(function (FindingDetails) {
    FindingDetails.visit = (value, visitor) => {
        if (value.externalAccessDetails !== undefined)
            return visitor.externalAccessDetails(value.externalAccessDetails);
        if (value.unusedPermissionDetails !== undefined)
            return visitor.unusedPermissionDetails(value.unusedPermissionDetails);
        if (value.unusedIamUserAccessKeyDetails !== undefined)
            return visitor.unusedIamUserAccessKeyDetails(value.unusedIamUserAccessKeyDetails);
        if (value.unusedIamRoleDetails !== undefined)
            return visitor.unusedIamRoleDetails(value.unusedIamRoleDetails);
        if (value.unusedIamUserPasswordDetails !== undefined)
            return visitor.unusedIamUserPasswordDetails(value.unusedIamUserPasswordDetails);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(FindingDetails || (FindingDetails = {}));
export const FindingType = {
    EXTERNAL_ACCESS: "ExternalAccess",
    UNUSED_IAM_ROLE: "UnusedIAMRole",
    UNUSED_IAM_USER_ACCESS_KEY: "UnusedIAMUserAccessKey",
    UNUSED_IAM_USER_PASSWORD: "UnusedIAMUserPassword",
    UNUSED_PERMISSION: "UnusedPermission",
};
export const JobErrorCode = {
    AUTHORIZATION_ERROR: "AUTHORIZATION_ERROR",
    RESOURCE_NOT_FOUND_ERROR: "RESOURCE_NOT_FOUND_ERROR",
    SERVICE_ERROR: "SERVICE_ERROR",
    SERVICE_QUOTA_EXCEEDED_ERROR: "SERVICE_QUOTA_EXCEEDED_ERROR",
};
export const JobStatus = {
    CANCELED: "CANCELED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export const FindingChangeType = {
    CHANGED: "CHANGED",
    NEW: "NEW",
    UNCHANGED: "UNCHANGED",
};
export const Locale = {
    DE: "DE",
    EN: "EN",
    ES: "ES",
    FR: "FR",
    IT: "IT",
    JA: "JA",
    KO: "KO",
    PT_BR: "PT_BR",
    ZH_CN: "ZH_CN",
    ZH_TW: "ZH_TW",
};
export const PolicyType = {
    IDENTITY_POLICY: "IDENTITY_POLICY",
    RESOURCE_POLICY: "RESOURCE_POLICY",
    SERVICE_CONTROL_POLICY: "SERVICE_CONTROL_POLICY",
};
export const ValidatePolicyResourceType = {
    ROLE_TRUST: "AWS::IAM::AssumeRolePolicyDocument",
    S3_ACCESS_POINT: "AWS::S3::AccessPoint",
    S3_BUCKET: "AWS::S3::Bucket",
    S3_MULTI_REGION_ACCESS_POINT: "AWS::S3::MultiRegionAccessPoint",
    S3_OBJECT_LAMBDA_ACCESS_POINT: "AWS::S3ObjectLambda::AccessPoint",
};
export const ValidatePolicyFindingType = {
    ERROR: "ERROR",
    SECURITY_WARNING: "SECURITY_WARNING",
    SUGGESTION: "SUGGESTION",
    WARNING: "WARNING",
};
export var PathElement;
(function (PathElement) {
    PathElement.visit = (value, visitor) => {
        if (value.index !== undefined)
            return visitor.index(value.index);
        if (value.key !== undefined)
            return visitor.key(value.key);
        if (value.substring !== undefined)
            return visitor.substring(value.substring);
        if (value.value !== undefined)
            return visitor.value(value.value);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(PathElement || (PathElement = {}));
export const CheckAccessNotGrantedRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.policyDocument && { policyDocument: SENSITIVE_STRING }),
});
export const CheckNoNewAccessRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.newPolicyDocument && { newPolicyDocument: SENSITIVE_STRING }),
    ...(obj.existingPolicyDocument && { existingPolicyDocument: SENSITIVE_STRING }),
});
