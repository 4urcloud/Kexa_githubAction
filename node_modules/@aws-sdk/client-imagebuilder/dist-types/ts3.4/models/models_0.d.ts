import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ImagebuilderServiceException as __BaseException } from "./ImagebuilderServiceException";
export interface SeverityCounts {
  all?: number;
  critical?: number;
  high?: number;
  medium?: number;
}
export interface AccountAggregation {
  accountId?: string;
  severityCounts?: SeverityCounts;
}
export interface SystemsManagerAgent {
  uninstallAfterBuild?: boolean;
}
export interface AdditionalInstanceConfiguration {
  systemsManagerAgent?: SystemsManagerAgent;
  userDataOverride?: string;
}
export declare const ImageStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly BUILDING: "BUILDING";
  readonly CANCELLED: "CANCELLED";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DEPRECATED: "DEPRECATED";
  readonly DISABLED: "DISABLED";
  readonly DISTRIBUTING: "DISTRIBUTING";
  readonly FAILED: "FAILED";
  readonly INTEGRATING: "INTEGRATING";
  readonly PENDING: "PENDING";
  readonly TESTING: "TESTING";
};
export type ImageStatus = (typeof ImageStatus)[keyof typeof ImageStatus];
export interface ImageState {
  status?: ImageStatus;
  reason?: string;
}
export interface Ami {
  region?: string;
  image?: string;
  name?: string;
  description?: string;
  state?: ImageState;
  accountId?: string;
}
export interface LaunchPermissionConfiguration {
  userIds?: string[];
  userGroups?: string[];
  organizationArns?: string[];
  organizationalUnitArns?: string[];
}
export interface AmiDistributionConfiguration {
  name?: string;
  description?: string;
  targetAccountIds?: string[];
  amiTags?: Record<string, string>;
  kmsKeyId?: string;
  launchPermission?: LaunchPermissionConfiguration;
}
export declare const BuildType: {
  readonly IMPORT: "IMPORT";
  readonly SCHEDULED: "SCHEDULED";
  readonly USER_INITIATED: "USER_INITIATED";
};
export type BuildType = (typeof BuildType)[keyof typeof BuildType];
export declare class CallRateLimitExceededException extends __BaseException {
  readonly name: "CallRateLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<CallRateLimitExceededException, __BaseException>
  );
}
export interface CancelImageCreationRequest {
  imageBuildVersionArn: string | undefined;
  clientToken?: string;
}
export interface CancelImageCreationResponse {
  requestId?: string;
  clientToken?: string;
  imageBuildVersionArn?: string;
}
export declare class ClientException extends __BaseException {
  readonly name: "ClientException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ClientException, __BaseException>);
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class IdempotentParameterMismatchException extends __BaseException {
  readonly name: "IdempotentParameterMismatchException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      IdempotentParameterMismatchException,
      __BaseException
    >
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class ServiceException extends __BaseException {
  readonly name: "ServiceException";
  readonly $fault: "server";
  constructor(opts: __ExceptionOptionType<ServiceException, __BaseException>);
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export interface CancelLifecycleExecutionRequest {
  lifecycleExecutionId: string | undefined;
  clientToken?: string;
}
export interface CancelLifecycleExecutionResponse {
  lifecycleExecutionId?: string;
}
export interface ComponentParameterDetail {
  name: string | undefined;
  type: string | undefined;
  defaultValue?: string[];
  description?: string;
}
export declare const Platform: {
  readonly LINUX: "Linux";
  readonly WINDOWS: "Windows";
};
export type Platform = (typeof Platform)[keyof typeof Platform];
export declare const ComponentStatus: {
  readonly DEPRECATED: "DEPRECATED";
};
export type ComponentStatus =
  (typeof ComponentStatus)[keyof typeof ComponentStatus];
export interface ComponentState {
  status?: ComponentStatus;
  reason?: string;
}
export declare const ComponentType: {
  readonly BUILD: "BUILD";
  readonly TEST: "TEST";
};
export type ComponentType = (typeof ComponentType)[keyof typeof ComponentType];
export interface Component {
  arn?: string;
  name?: string;
  version?: string;
  description?: string;
  changeDescription?: string;
  type?: ComponentType;
  platform?: Platform;
  supportedOsVersions?: string[];
  state?: ComponentState;
  parameters?: ComponentParameterDetail[];
  owner?: string;
  data?: string;
  kmsKeyId?: string;
  encrypted?: boolean;
  dateCreated?: string;
  tags?: Record<string, string>;
  publisher?: string;
  obfuscate?: boolean;
}
export interface ComponentParameter {
  name: string | undefined;
  value: string[] | undefined;
}
export interface ComponentConfiguration {
  componentArn: string | undefined;
  parameters?: ComponentParameter[];
}
export declare const ComponentFormat: {
  readonly SHELL: "SHELL";
};
export type ComponentFormat =
  (typeof ComponentFormat)[keyof typeof ComponentFormat];
export interface ComponentSummary {
  arn?: string;
  name?: string;
  version?: string;
  platform?: Platform;
  supportedOsVersions?: string[];
  state?: ComponentState;
  type?: ComponentType;
  owner?: string;
  description?: string;
  changeDescription?: string;
  dateCreated?: string;
  tags?: Record<string, string>;
  publisher?: string;
  obfuscate?: boolean;
}
export interface ComponentVersion {
  arn?: string;
  name?: string;
  version?: string;
  description?: string;
  platform?: Platform;
  supportedOsVersions?: string[];
  type?: ComponentType;
  owner?: string;
  dateCreated?: string;
}
export interface Container {
  region?: string;
  imageUris?: string[];
}
export declare const ContainerRepositoryService: {
  readonly ECR: "ECR";
};
export type ContainerRepositoryService =
  (typeof ContainerRepositoryService)[keyof typeof ContainerRepositoryService];
export interface TargetContainerRepository {
  service: ContainerRepositoryService | undefined;
  repositoryName: string | undefined;
}
export interface ContainerDistributionConfiguration {
  description?: string;
  containerTags?: string[];
  targetRepository: TargetContainerRepository | undefined;
}
export declare const ContainerType: {
  readonly DOCKER: "DOCKER";
};
export type ContainerType = (typeof ContainerType)[keyof typeof ContainerType];
export declare const EbsVolumeType: {
  readonly GP2: "gp2";
  readonly GP3: "gp3";
  readonly IO1: "io1";
  readonly IO2: "io2";
  readonly SC1: "sc1";
  readonly ST1: "st1";
  readonly STANDARD: "standard";
};
export type EbsVolumeType = (typeof EbsVolumeType)[keyof typeof EbsVolumeType];
export interface EbsInstanceBlockDeviceSpecification {
  encrypted?: boolean;
  deleteOnTermination?: boolean;
  iops?: number;
  kmsKeyId?: string;
  snapshotId?: string;
  volumeSize?: number;
  volumeType?: EbsVolumeType;
  throughput?: number;
}
export interface InstanceBlockDeviceMapping {
  deviceName?: string;
  ebs?: EbsInstanceBlockDeviceSpecification;
  virtualName?: string;
  noDevice?: string;
}
export interface InstanceConfiguration {
  image?: string;
  blockDeviceMappings?: InstanceBlockDeviceMapping[];
}
export interface ContainerRecipe {
  arn?: string;
  containerType?: ContainerType;
  name?: string;
  description?: string;
  platform?: Platform;
  owner?: string;
  version?: string;
  components?: ComponentConfiguration[];
  instanceConfiguration?: InstanceConfiguration;
  dockerfileTemplateData?: string;
  kmsKeyId?: string;
  encrypted?: boolean;
  parentImage?: string;
  dateCreated?: string;
  tags?: Record<string, string>;
  workingDirectory?: string;
  targetRepository?: TargetContainerRepository;
}
export interface ContainerRecipeSummary {
  arn?: string;
  containerType?: ContainerType;
  name?: string;
  platform?: Platform;
  owner?: string;
  parentImage?: string;
  dateCreated?: string;
  tags?: Record<string, string>;
}
export interface CreateComponentRequest {
  name: string | undefined;
  semanticVersion: string | undefined;
  description?: string;
  changeDescription?: string;
  platform: Platform | undefined;
  supportedOsVersions?: string[];
  data?: string;
  uri?: string;
  kmsKeyId?: string;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateComponentResponse {
  requestId?: string;
  clientToken?: string;
  componentBuildVersionArn?: string;
}
export declare class InvalidParameterCombinationException extends __BaseException {
  readonly name: "InvalidParameterCombinationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidParameterCombinationException,
      __BaseException
    >
  );
}
export declare class InvalidVersionNumberException extends __BaseException {
  readonly name: "InvalidVersionNumberException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidVersionNumberException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface CreateContainerRecipeRequest {
  containerType: ContainerType | undefined;
  name: string | undefined;
  description?: string;
  semanticVersion: string | undefined;
  components: ComponentConfiguration[] | undefined;
  instanceConfiguration?: InstanceConfiguration;
  dockerfileTemplateData?: string;
  dockerfileTemplateUri?: string;
  platformOverride?: Platform;
  imageOsVersionOverride?: string;
  parentImage: string | undefined;
  tags?: Record<string, string>;
  workingDirectory?: string;
  targetRepository: TargetContainerRepository | undefined;
  kmsKeyId?: string;
  clientToken?: string;
}
export interface CreateContainerRecipeResponse {
  requestId?: string;
  clientToken?: string;
  containerRecipeArn?: string;
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface FastLaunchLaunchTemplateSpecification {
  launchTemplateId?: string;
  launchTemplateName?: string;
  launchTemplateVersion?: string;
}
export interface FastLaunchSnapshotConfiguration {
  targetResourceCount?: number;
}
export interface FastLaunchConfiguration {
  enabled: boolean | undefined;
  snapshotConfiguration?: FastLaunchSnapshotConfiguration;
  maxParallelLaunches?: number;
  launchTemplate?: FastLaunchLaunchTemplateSpecification;
  accountId?: string;
}
export interface LaunchTemplateConfiguration {
  launchTemplateId: string | undefined;
  accountId?: string;
  setDefaultVersion?: boolean;
}
export declare const DiskImageFormat: {
  readonly RAW: "RAW";
  readonly VHD: "VHD";
  readonly VMDK: "VMDK";
};
export type DiskImageFormat =
  (typeof DiskImageFormat)[keyof typeof DiskImageFormat];
export interface S3ExportConfiguration {
  roleName: string | undefined;
  diskImageFormat: DiskImageFormat | undefined;
  s3Bucket: string | undefined;
  s3Prefix?: string;
}
export interface Distribution {
  region: string | undefined;
  amiDistributionConfiguration?: AmiDistributionConfiguration;
  containerDistributionConfiguration?: ContainerDistributionConfiguration;
  licenseConfigurationArns?: string[];
  launchTemplateConfigurations?: LaunchTemplateConfiguration[];
  s3ExportConfiguration?: S3ExportConfiguration;
  fastLaunchConfigurations?: FastLaunchConfiguration[];
}
export interface CreateDistributionConfigurationRequest {
  name: string | undefined;
  description?: string;
  distributions: Distribution[] | undefined;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateDistributionConfigurationResponse {
  requestId?: string;
  clientToken?: string;
  distributionConfigurationArn?: string;
}
export interface EcrConfiguration {
  repositoryName?: string;
  containerTags?: string[];
}
export interface ImageScanningConfiguration {
  imageScanningEnabled?: boolean;
  ecrConfiguration?: EcrConfiguration;
}
export interface ImageTestsConfiguration {
  imageTestsEnabled?: boolean;
  timeoutMinutes?: number;
}
export declare const OnWorkflowFailure: {
  readonly ABORT: "ABORT";
  readonly CONTINUE: "CONTINUE";
};
export type OnWorkflowFailure =
  (typeof OnWorkflowFailure)[keyof typeof OnWorkflowFailure];
export interface WorkflowParameter {
  name: string | undefined;
  value: string[] | undefined;
}
export interface WorkflowConfiguration {
  workflowArn: string | undefined;
  parameters?: WorkflowParameter[];
  parallelGroup?: string;
  onFailure?: OnWorkflowFailure;
}
export interface CreateImageRequest {
  imageRecipeArn?: string;
  containerRecipeArn?: string;
  distributionConfigurationArn?: string;
  infrastructureConfigurationArn: string | undefined;
  imageTestsConfiguration?: ImageTestsConfiguration;
  enhancedImageMetadataEnabled?: boolean;
  tags?: Record<string, string>;
  clientToken?: string;
  imageScanningConfiguration?: ImageScanningConfiguration;
  workflows?: WorkflowConfiguration[];
  executionRole?: string;
}
export interface CreateImageResponse {
  requestId?: string;
  clientToken?: string;
  imageBuildVersionArn?: string;
}
export declare const PipelineExecutionStartCondition: {
  readonly EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE: "EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE";
  readonly EXPRESSION_MATCH_ONLY: "EXPRESSION_MATCH_ONLY";
};
export type PipelineExecutionStartCondition =
  (typeof PipelineExecutionStartCondition)[keyof typeof PipelineExecutionStartCondition];
export interface Schedule {
  scheduleExpression?: string;
  timezone?: string;
  pipelineExecutionStartCondition?: PipelineExecutionStartCondition;
}
export declare const PipelineStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type PipelineStatus =
  (typeof PipelineStatus)[keyof typeof PipelineStatus];
export interface CreateImagePipelineRequest {
  name: string | undefined;
  description?: string;
  imageRecipeArn?: string;
  containerRecipeArn?: string;
  infrastructureConfigurationArn: string | undefined;
  distributionConfigurationArn?: string;
  imageTestsConfiguration?: ImageTestsConfiguration;
  enhancedImageMetadataEnabled?: boolean;
  schedule?: Schedule;
  status?: PipelineStatus;
  tags?: Record<string, string>;
  clientToken?: string;
  imageScanningConfiguration?: ImageScanningConfiguration;
  workflows?: WorkflowConfiguration[];
  executionRole?: string;
}
export interface CreateImagePipelineResponse {
  requestId?: string;
  clientToken?: string;
  imagePipelineArn?: string;
}
export interface CreateImageRecipeRequest {
  name: string | undefined;
  description?: string;
  semanticVersion: string | undefined;
  components: ComponentConfiguration[] | undefined;
  parentImage: string | undefined;
  blockDeviceMappings?: InstanceBlockDeviceMapping[];
  tags?: Record<string, string>;
  workingDirectory?: string;
  additionalInstanceConfiguration?: AdditionalInstanceConfiguration;
  clientToken?: string;
}
export interface CreateImageRecipeResponse {
  requestId?: string;
  clientToken?: string;
  imageRecipeArn?: string;
}
export interface InstanceMetadataOptions {
  httpTokens?: string;
  httpPutResponseHopLimit?: number;
}
export interface S3Logs {
  s3BucketName?: string;
  s3KeyPrefix?: string;
}
export interface Logging {
  s3Logs?: S3Logs;
}
export interface CreateInfrastructureConfigurationRequest {
  name: string | undefined;
  description?: string;
  instanceTypes?: string[];
  instanceProfileName: string | undefined;
  securityGroupIds?: string[];
  subnetId?: string;
  logging?: Logging;
  keyPair?: string;
  terminateInstanceOnFailure?: boolean;
  snsTopicArn?: string;
  resourceTags?: Record<string, string>;
  instanceMetadataOptions?: InstanceMetadataOptions;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateInfrastructureConfigurationResponse {
  requestId?: string;
  clientToken?: string;
  infrastructureConfigurationArn?: string;
}
export interface LifecyclePolicyDetailActionIncludeResources {
  amis?: boolean;
  snapshots?: boolean;
  containers?: boolean;
}
export declare const LifecyclePolicyDetailActionType: {
  readonly DELETE: "DELETE";
  readonly DEPRECATE: "DEPRECATE";
  readonly DISABLE: "DISABLE";
};
export type LifecyclePolicyDetailActionType =
  (typeof LifecyclePolicyDetailActionType)[keyof typeof LifecyclePolicyDetailActionType];
export interface LifecyclePolicyDetailAction {
  type: LifecyclePolicyDetailActionType | undefined;
  includeResources?: LifecyclePolicyDetailActionIncludeResources;
}
export declare const LifecyclePolicyTimeUnit: {
  readonly DAYS: "DAYS";
  readonly MONTHS: "MONTHS";
  readonly WEEKS: "WEEKS";
  readonly YEARS: "YEARS";
};
export type LifecyclePolicyTimeUnit =
  (typeof LifecyclePolicyTimeUnit)[keyof typeof LifecyclePolicyTimeUnit];
export interface LifecyclePolicyDetailExclusionRulesAmisLastLaunched {
  value: number | undefined;
  unit: LifecyclePolicyTimeUnit | undefined;
}
export interface LifecyclePolicyDetailExclusionRulesAmis {
  isPublic?: boolean;
  regions?: string[];
  sharedAccounts?: string[];
  lastLaunched?: LifecyclePolicyDetailExclusionRulesAmisLastLaunched;
  tagMap?: Record<string, string>;
}
export interface LifecyclePolicyDetailExclusionRules {
  tagMap?: Record<string, string>;
  amis?: LifecyclePolicyDetailExclusionRulesAmis;
}
export declare const LifecyclePolicyDetailFilterType: {
  readonly AGE: "AGE";
  readonly COUNT: "COUNT";
};
export type LifecyclePolicyDetailFilterType =
  (typeof LifecyclePolicyDetailFilterType)[keyof typeof LifecyclePolicyDetailFilterType];
export interface LifecyclePolicyDetailFilter {
  type: LifecyclePolicyDetailFilterType | undefined;
  value: number | undefined;
  unit?: LifecyclePolicyTimeUnit;
  retainAtLeast?: number;
}
export interface LifecyclePolicyDetail {
  action: LifecyclePolicyDetailAction | undefined;
  filter: LifecyclePolicyDetailFilter | undefined;
  exclusionRules?: LifecyclePolicyDetailExclusionRules;
}
export interface LifecyclePolicyResourceSelectionRecipe {
  name: string | undefined;
  semanticVersion: string | undefined;
}
export interface LifecyclePolicyResourceSelection {
  recipes?: LifecyclePolicyResourceSelectionRecipe[];
  tagMap?: Record<string, string>;
}
export declare const LifecyclePolicyResourceType: {
  readonly AMI_IMAGE: "AMI_IMAGE";
  readonly CONTAINER_IMAGE: "CONTAINER_IMAGE";
};
export type LifecyclePolicyResourceType =
  (typeof LifecyclePolicyResourceType)[keyof typeof LifecyclePolicyResourceType];
export declare const LifecyclePolicyStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type LifecyclePolicyStatus =
  (typeof LifecyclePolicyStatus)[keyof typeof LifecyclePolicyStatus];
export interface CreateLifecyclePolicyRequest {
  name: string | undefined;
  description?: string;
  status?: LifecyclePolicyStatus;
  executionRole: string | undefined;
  resourceType: LifecyclePolicyResourceType | undefined;
  policyDetails: LifecyclePolicyDetail[] | undefined;
  resourceSelection: LifecyclePolicyResourceSelection | undefined;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface CreateLifecyclePolicyResponse {
  clientToken?: string;
  lifecyclePolicyArn?: string;
}
export declare const WorkflowType: {
  readonly BUILD: "BUILD";
  readonly DISTRIBUTION: "DISTRIBUTION";
  readonly TEST: "TEST";
};
export type WorkflowType = (typeof WorkflowType)[keyof typeof WorkflowType];
export interface CreateWorkflowRequest {
  name: string | undefined;
  semanticVersion: string | undefined;
  description?: string;
  changeDescription?: string;
  data?: string;
  uri?: string;
  kmsKeyId?: string;
  tags?: Record<string, string>;
  clientToken?: string;
  type: WorkflowType | undefined;
}
export interface CreateWorkflowResponse {
  clientToken?: string;
  workflowBuildVersionArn?: string;
}
export interface CvssScore {
  baseScore?: number;
  scoringVector?: string;
  version?: string;
  source?: string;
}
export interface CvssScoreAdjustment {
  metric?: string;
  reason?: string;
}
export interface CvssScoreDetails {
  scoreSource?: string;
  cvssSource?: string;
  version?: string;
  score?: number;
  scoringVector?: string;
  adjustments?: CvssScoreAdjustment[];
}
export interface DeleteComponentRequest {
  componentBuildVersionArn: string | undefined;
}
export interface DeleteComponentResponse {
  requestId?: string;
  componentBuildVersionArn?: string;
}
export declare class ResourceDependencyException extends __BaseException {
  readonly name: "ResourceDependencyException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceDependencyException, __BaseException>
  );
}
export interface DeleteContainerRecipeRequest {
  containerRecipeArn: string | undefined;
}
export interface DeleteContainerRecipeResponse {
  requestId?: string;
  containerRecipeArn?: string;
}
export interface DeleteDistributionConfigurationRequest {
  distributionConfigurationArn: string | undefined;
}
export interface DeleteDistributionConfigurationResponse {
  requestId?: string;
  distributionConfigurationArn?: string;
}
export interface DeleteImageRequest {
  imageBuildVersionArn: string | undefined;
}
export interface DeleteImageResponse {
  requestId?: string;
  imageBuildVersionArn?: string;
}
export interface DeleteImagePipelineRequest {
  imagePipelineArn: string | undefined;
}
export interface DeleteImagePipelineResponse {
  requestId?: string;
  imagePipelineArn?: string;
}
export interface DeleteImageRecipeRequest {
  imageRecipeArn: string | undefined;
}
export interface DeleteImageRecipeResponse {
  requestId?: string;
  imageRecipeArn?: string;
}
export interface DeleteInfrastructureConfigurationRequest {
  infrastructureConfigurationArn: string | undefined;
}
export interface DeleteInfrastructureConfigurationResponse {
  requestId?: string;
  infrastructureConfigurationArn?: string;
}
export interface DeleteLifecyclePolicyRequest {
  lifecyclePolicyArn: string | undefined;
}
export interface DeleteLifecyclePolicyResponse {
  lifecyclePolicyArn?: string;
}
export interface DeleteWorkflowRequest {
  workflowBuildVersionArn: string | undefined;
}
export interface DeleteWorkflowResponse {
  workflowBuildVersionArn?: string;
}
export interface DistributionConfiguration {
  arn?: string;
  name?: string;
  description?: string;
  distributions?: Distribution[];
  timeoutMinutes: number | undefined;
  dateCreated?: string;
  dateUpdated?: string;
  tags?: Record<string, string>;
}
export interface DistributionConfigurationSummary {
  arn?: string;
  name?: string;
  description?: string;
  dateCreated?: string;
  dateUpdated?: string;
  tags?: Record<string, string>;
  regions?: string[];
}
export interface Filter {
  name?: string;
  values?: string[];
}
export interface GetComponentRequest {
  componentBuildVersionArn: string | undefined;
}
export interface GetComponentResponse {
  requestId?: string;
  component?: Component;
}
export interface GetComponentPolicyRequest {
  componentArn: string | undefined;
}
export interface GetComponentPolicyResponse {
  requestId?: string;
  policy?: string;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface GetContainerRecipeRequest {
  containerRecipeArn: string | undefined;
}
export interface GetContainerRecipeResponse {
  requestId?: string;
  containerRecipe?: ContainerRecipe;
}
export interface GetContainerRecipePolicyRequest {
  containerRecipeArn: string | undefined;
}
export interface GetContainerRecipePolicyResponse {
  requestId?: string;
  policy?: string;
}
export interface GetDistributionConfigurationRequest {
  distributionConfigurationArn: string | undefined;
}
export interface GetDistributionConfigurationResponse {
  requestId?: string;
  distributionConfiguration?: DistributionConfiguration;
}
export interface GetImageRequest {
  imageBuildVersionArn: string | undefined;
}
export declare const ImageType: {
  readonly AMI: "AMI";
  readonly DOCKER: "DOCKER";
};
export type ImageType = (typeof ImageType)[keyof typeof ImageType];
export interface ImageRecipe {
  arn?: string;
  type?: ImageType;
  name?: string;
  description?: string;
  platform?: Platform;
  owner?: string;
  version?: string;
  components?: ComponentConfiguration[];
  parentImage?: string;
  blockDeviceMappings?: InstanceBlockDeviceMapping[];
  dateCreated?: string;
  tags?: Record<string, string>;
  workingDirectory?: string;
  additionalInstanceConfiguration?: AdditionalInstanceConfiguration;
}
export declare const ImageSource: {
  readonly AMAZON_MANAGED: "AMAZON_MANAGED";
  readonly AWS_MARKETPLACE: "AWS_MARKETPLACE";
  readonly CUSTOM: "CUSTOM";
  readonly IMPORTED: "IMPORTED";
};
export type ImageSource = (typeof ImageSource)[keyof typeof ImageSource];
export interface InfrastructureConfiguration {
  arn?: string;
  name?: string;
  description?: string;
  instanceTypes?: string[];
  instanceProfileName?: string;
  securityGroupIds?: string[];
  subnetId?: string;
  logging?: Logging;
  keyPair?: string;
  terminateInstanceOnFailure?: boolean;
  snsTopicArn?: string;
  dateCreated?: string;
  dateUpdated?: string;
  resourceTags?: Record<string, string>;
  instanceMetadataOptions?: InstanceMetadataOptions;
  tags?: Record<string, string>;
}
export interface OutputResources {
  amis?: Ami[];
  containers?: Container[];
}
export declare const ImageScanStatus: {
  readonly ABANDONED: "ABANDONED";
  readonly COLLECTING: "COLLECTING";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SCANNING: "SCANNING";
  readonly TIMED_OUT: "TIMED_OUT";
};
export type ImageScanStatus =
  (typeof ImageScanStatus)[keyof typeof ImageScanStatus];
export interface ImageScanState {
  status?: ImageScanStatus;
  reason?: string;
}
export interface Image {
  arn?: string;
  type?: ImageType;
  name?: string;
  version?: string;
  platform?: Platform;
  enhancedImageMetadataEnabled?: boolean;
  osVersion?: string;
  state?: ImageState;
  imageRecipe?: ImageRecipe;
  containerRecipe?: ContainerRecipe;
  sourcePipelineName?: string;
  sourcePipelineArn?: string;
  infrastructureConfiguration?: InfrastructureConfiguration;
  distributionConfiguration?: DistributionConfiguration;
  imageTestsConfiguration?: ImageTestsConfiguration;
  dateCreated?: string;
  outputResources?: OutputResources;
  tags?: Record<string, string>;
  buildType?: BuildType;
  imageSource?: ImageSource;
  scanState?: ImageScanState;
  imageScanningConfiguration?: ImageScanningConfiguration;
  deprecationTime?: Date;
  lifecycleExecutionId?: string;
  executionRole?: string;
  workflows?: WorkflowConfiguration[];
}
export interface GetImageResponse {
  requestId?: string;
  image?: Image;
}
export interface GetImagePipelineRequest {
  imagePipelineArn: string | undefined;
}
export interface ImagePipeline {
  arn?: string;
  name?: string;
  description?: string;
  platform?: Platform;
  enhancedImageMetadataEnabled?: boolean;
  imageRecipeArn?: string;
  containerRecipeArn?: string;
  infrastructureConfigurationArn?: string;
  distributionConfigurationArn?: string;
  imageTestsConfiguration?: ImageTestsConfiguration;
  schedule?: Schedule;
  status?: PipelineStatus;
  dateCreated?: string;
  dateUpdated?: string;
  dateLastRun?: string;
  dateNextRun?: string;
  tags?: Record<string, string>;
  imageScanningConfiguration?: ImageScanningConfiguration;
  executionRole?: string;
  workflows?: WorkflowConfiguration[];
}
export interface GetImagePipelineResponse {
  requestId?: string;
  imagePipeline?: ImagePipeline;
}
export interface GetImagePolicyRequest {
  imageArn: string | undefined;
}
export interface GetImagePolicyResponse {
  requestId?: string;
  policy?: string;
}
export interface GetImageRecipeRequest {
  imageRecipeArn: string | undefined;
}
export interface GetImageRecipeResponse {
  requestId?: string;
  imageRecipe?: ImageRecipe;
}
export interface GetImageRecipePolicyRequest {
  imageRecipeArn: string | undefined;
}
export interface GetImageRecipePolicyResponse {
  requestId?: string;
  policy?: string;
}
export interface GetInfrastructureConfigurationRequest {
  infrastructureConfigurationArn: string | undefined;
}
export interface GetInfrastructureConfigurationResponse {
  requestId?: string;
  infrastructureConfiguration?: InfrastructureConfiguration;
}
export interface GetLifecycleExecutionRequest {
  lifecycleExecutionId: string | undefined;
}
export interface LifecycleExecutionResourcesImpactedSummary {
  hasImpactedResources?: boolean;
}
export declare const LifecycleExecutionStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PENDING: "PENDING";
  readonly SUCCESS: "SUCCESS";
};
export type LifecycleExecutionStatus =
  (typeof LifecycleExecutionStatus)[keyof typeof LifecycleExecutionStatus];
export interface LifecycleExecutionState {
  status?: LifecycleExecutionStatus;
  reason?: string;
}
export interface LifecycleExecution {
  lifecycleExecutionId?: string;
  lifecyclePolicyArn?: string;
  resourcesImpactedSummary?: LifecycleExecutionResourcesImpactedSummary;
  state?: LifecycleExecutionState;
  startTime?: Date;
  endTime?: Date;
}
export interface GetLifecycleExecutionResponse {
  lifecycleExecution?: LifecycleExecution;
}
export interface GetLifecyclePolicyRequest {
  lifecyclePolicyArn: string | undefined;
}
export interface LifecyclePolicy {
  arn?: string;
  name?: string;
  description?: string;
  status?: LifecyclePolicyStatus;
  executionRole?: string;
  resourceType?: LifecyclePolicyResourceType;
  policyDetails?: LifecyclePolicyDetail[];
  resourceSelection?: LifecyclePolicyResourceSelection;
  dateCreated?: Date;
  dateUpdated?: Date;
  dateLastRun?: Date;
  tags?: Record<string, string>;
}
export interface GetLifecyclePolicyResponse {
  lifecyclePolicy?: LifecyclePolicy;
}
export interface GetWorkflowRequest {
  workflowBuildVersionArn: string | undefined;
}
export interface WorkflowParameterDetail {
  name: string | undefined;
  type: string | undefined;
  defaultValue?: string[];
  description?: string;
}
export declare const WorkflowStatus: {
  readonly DEPRECATED: "DEPRECATED";
};
export type WorkflowStatus =
  (typeof WorkflowStatus)[keyof typeof WorkflowStatus];
export interface WorkflowState {
  status?: WorkflowStatus;
  reason?: string;
}
export interface Workflow {
  arn?: string;
  name?: string;
  version?: string;
  description?: string;
  changeDescription?: string;
  type?: WorkflowType;
  state?: WorkflowState;
  owner?: string;
  data?: string;
  kmsKeyId?: string;
  dateCreated?: string;
  tags?: Record<string, string>;
  parameters?: WorkflowParameterDetail[];
}
export interface GetWorkflowResponse {
  workflow?: Workflow;
}
export interface GetWorkflowExecutionRequest {
  workflowExecutionId: string | undefined;
}
export declare const WorkflowExecutionStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly ROLLBACK_COMPLETED: "ROLLBACK_COMPLETED";
  readonly ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS";
  readonly RUNNING: "RUNNING";
  readonly SKIPPED: "SKIPPED";
};
export type WorkflowExecutionStatus =
  (typeof WorkflowExecutionStatus)[keyof typeof WorkflowExecutionStatus];
export interface GetWorkflowExecutionResponse {
  requestId?: string;
  workflowBuildVersionArn?: string;
  workflowExecutionId?: string;
  imageBuildVersionArn?: string;
  type?: WorkflowType;
  status?: WorkflowExecutionStatus;
  message?: string;
  totalStepCount?: number;
  totalStepsSucceeded?: number;
  totalStepsFailed?: number;
  totalStepsSkipped?: number;
  startTime?: string;
  endTime?: string;
  parallelGroup?: string;
}
export interface GetWorkflowStepExecutionRequest {
  stepExecutionId: string | undefined;
}
export declare const WorkflowStepExecutionRollbackStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly SKIPPED: "SKIPPED";
};
export type WorkflowStepExecutionRollbackStatus =
  (typeof WorkflowStepExecutionRollbackStatus)[keyof typeof WorkflowStepExecutionRollbackStatus];
export declare const WorkflowStepExecutionStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly SKIPPED: "SKIPPED";
};
export type WorkflowStepExecutionStatus =
  (typeof WorkflowStepExecutionStatus)[keyof typeof WorkflowStepExecutionStatus];
export interface GetWorkflowStepExecutionResponse {
  requestId?: string;
  stepExecutionId?: string;
  workflowBuildVersionArn?: string;
  workflowExecutionId?: string;
  imageBuildVersionArn?: string;
  name?: string;
  description?: string;
  action?: string;
  status?: WorkflowStepExecutionStatus;
  rollbackStatus?: WorkflowStepExecutionRollbackStatus;
  message?: string;
  inputs?: string;
  outputs?: string;
  startTime?: string;
  endTime?: string;
  onFailure?: string;
  timeoutSeconds?: number;
}
export interface ImageAggregation {
  imageBuildVersionArn?: string;
  severityCounts?: SeverityCounts;
}
export interface ImportComponentRequest {
  name: string | undefined;
  semanticVersion: string | undefined;
  description?: string;
  changeDescription?: string;
  type: ComponentType | undefined;
  format: ComponentFormat | undefined;
  platform: Platform | undefined;
  data?: string;
  uri?: string;
  kmsKeyId?: string;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface ImportComponentResponse {
  requestId?: string;
  clientToken?: string;
  componentBuildVersionArn?: string;
}
export interface ImportVmImageRequest {
  name: string | undefined;
  semanticVersion: string | undefined;
  description?: string;
  platform: Platform | undefined;
  osVersion?: string;
  vmImportTaskId: string | undefined;
  tags?: Record<string, string>;
  clientToken?: string;
}
export interface ImportVmImageResponse {
  requestId?: string;
  imageArn?: string;
  clientToken?: string;
}
export declare class InvalidPaginationTokenException extends __BaseException {
  readonly name: "InvalidPaginationTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidPaginationTokenException,
      __BaseException
    >
  );
}
export interface ListComponentBuildVersionsRequest {
  componentVersionArn: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListComponentBuildVersionsResponse {
  requestId?: string;
  componentSummaryList?: ComponentSummary[];
  nextToken?: string;
}
export declare const Ownership: {
  readonly AMAZON: "Amazon";
  readonly SELF: "Self";
  readonly SHARED: "Shared";
  readonly THIRDPARTY: "ThirdParty";
};
export type Ownership = (typeof Ownership)[keyof typeof Ownership];
export interface ListComponentsRequest {
  owner?: Ownership;
  filters?: Filter[];
  byName?: boolean;
  maxResults?: number;
  nextToken?: string;
}
export interface ListComponentsResponse {
  requestId?: string;
  componentVersionList?: ComponentVersion[];
  nextToken?: string;
}
export interface ListContainerRecipesRequest {
  owner?: Ownership;
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListContainerRecipesResponse {
  requestId?: string;
  containerRecipeSummaryList?: ContainerRecipeSummary[];
  nextToken?: string;
}
export interface ListDistributionConfigurationsRequest {
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListDistributionConfigurationsResponse {
  requestId?: string;
  distributionConfigurationSummaryList?: DistributionConfigurationSummary[];
  nextToken?: string;
}
export interface ListImageBuildVersionsRequest {
  imageVersionArn: string | undefined;
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ImageSummary {
  arn?: string;
  name?: string;
  type?: ImageType;
  version?: string;
  platform?: Platform;
  osVersion?: string;
  state?: ImageState;
  owner?: string;
  dateCreated?: string;
  outputResources?: OutputResources;
  tags?: Record<string, string>;
  buildType?: BuildType;
  imageSource?: ImageSource;
  deprecationTime?: Date;
  lifecycleExecutionId?: string;
}
export interface ListImageBuildVersionsResponse {
  requestId?: string;
  imageSummaryList?: ImageSummary[];
  nextToken?: string;
}
export interface ListImagePackagesRequest {
  imageBuildVersionArn: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ImagePackage {
  packageName?: string;
  packageVersion?: string;
}
export interface ListImagePackagesResponse {
  requestId?: string;
  imagePackageList?: ImagePackage[];
  nextToken?: string;
}
export interface ListImagePipelineImagesRequest {
  imagePipelineArn: string | undefined;
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListImagePipelineImagesResponse {
  requestId?: string;
  imageSummaryList?: ImageSummary[];
  nextToken?: string;
}
export interface ListImagePipelinesRequest {
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListImagePipelinesResponse {
  requestId?: string;
  imagePipelineList?: ImagePipeline[];
  nextToken?: string;
}
export interface ListImageRecipesRequest {
  owner?: Ownership;
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ImageRecipeSummary {
  arn?: string;
  name?: string;
  platform?: Platform;
  owner?: string;
  parentImage?: string;
  dateCreated?: string;
  tags?: Record<string, string>;
}
export interface ListImageRecipesResponse {
  requestId?: string;
  imageRecipeSummaryList?: ImageRecipeSummary[];
  nextToken?: string;
}
export interface ListImagesRequest {
  owner?: Ownership;
  filters?: Filter[];
  byName?: boolean;
  maxResults?: number;
  nextToken?: string;
  includeDeprecated?: boolean;
}
export interface ImageVersion {
  arn?: string;
  name?: string;
  type?: ImageType;
  version?: string;
  platform?: Platform;
  osVersion?: string;
  owner?: string;
  dateCreated?: string;
  buildType?: BuildType;
  imageSource?: ImageSource;
}
export interface ListImagesResponse {
  requestId?: string;
  imageVersionList?: ImageVersion[];
  nextToken?: string;
}
export interface ListImageScanFindingAggregationsRequest {
  filter?: Filter;
  nextToken?: string;
}
export interface ImagePipelineAggregation {
  imagePipelineArn?: string;
  severityCounts?: SeverityCounts;
}
export interface VulnerabilityIdAggregation {
  vulnerabilityId?: string;
  severityCounts?: SeverityCounts;
}
export interface ImageScanFindingAggregation {
  accountAggregation?: AccountAggregation;
  imageAggregation?: ImageAggregation;
  imagePipelineAggregation?: ImagePipelineAggregation;
  vulnerabilityIdAggregation?: VulnerabilityIdAggregation;
}
export interface ListImageScanFindingAggregationsResponse {
  requestId?: string;
  aggregationType?: string;
  responses?: ImageScanFindingAggregation[];
  nextToken?: string;
}
export interface ImageScanFindingsFilter {
  name?: string;
  values?: string[];
}
export interface ListImageScanFindingsRequest {
  filters?: ImageScanFindingsFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface InspectorScoreDetails {
  adjustedCvss?: CvssScoreDetails;
}
export interface VulnerablePackage {
  name?: string;
  version?: string;
  sourceLayerHash?: string;
  epoch?: number;
  release?: string;
  arch?: string;
  packageManager?: string;
  filePath?: string;
  fixedInVersion?: string;
  remediation?: string;
}
export interface PackageVulnerabilityDetails {
  vulnerabilityId: string | undefined;
  vulnerablePackages?: VulnerablePackage[];
  source?: string;
  cvss?: CvssScore[];
  relatedVulnerabilities?: string[];
  sourceUrl?: string;
  vendorSeverity?: string;
  vendorCreatedAt?: Date;
  vendorUpdatedAt?: Date;
  referenceUrls?: string[];
}
export interface RemediationRecommendation {
  text?: string;
  url?: string;
}
export interface Remediation {
  recommendation?: RemediationRecommendation;
}
export interface ImageScanFinding {
  awsAccountId?: string;
  imageBuildVersionArn?: string;
  imagePipelineArn?: string;
  type?: string;
  description?: string;
  title?: string;
  remediation?: Remediation;
  severity?: string;
  firstObservedAt?: Date;
  updatedAt?: Date;
  inspectorScore?: number;
  inspectorScoreDetails?: InspectorScoreDetails;
  packageVulnerabilityDetails?: PackageVulnerabilityDetails;
  fixAvailable?: string;
}
export interface ListImageScanFindingsResponse {
  requestId?: string;
  findings?: ImageScanFinding[];
  nextToken?: string;
}
export interface ListInfrastructureConfigurationsRequest {
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface InfrastructureConfigurationSummary {
  arn?: string;
  name?: string;
  description?: string;
  dateCreated?: string;
  dateUpdated?: string;
  resourceTags?: Record<string, string>;
  tags?: Record<string, string>;
  instanceTypes?: string[];
  instanceProfileName?: string;
}
export interface ListInfrastructureConfigurationsResponse {
  requestId?: string;
  infrastructureConfigurationSummaryList?: InfrastructureConfigurationSummary[];
  nextToken?: string;
}
export interface ListLifecycleExecutionResourcesRequest {
  lifecycleExecutionId: string | undefined;
  parentResourceId?: string;
  maxResults?: number;
  nextToken?: string;
}
export declare const LifecycleExecutionResourceActionName: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETE: "DELETE";
  readonly DEPRECATE: "DEPRECATE";
  readonly DISABLE: "DISABLE";
};
export type LifecycleExecutionResourceActionName =
  (typeof LifecycleExecutionResourceActionName)[keyof typeof LifecycleExecutionResourceActionName];
export interface LifecycleExecutionResourceAction {
  name?: LifecycleExecutionResourceActionName;
  reason?: string;
}
export declare const LifecycleExecutionResourceStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SKIPPED: "SKIPPED";
  readonly SUCCESS: "SUCCESS";
};
export type LifecycleExecutionResourceStatus =
  (typeof LifecycleExecutionResourceStatus)[keyof typeof LifecycleExecutionResourceStatus];
export interface LifecycleExecutionResourceState {
  status?: LifecycleExecutionResourceStatus;
  reason?: string;
}
export interface LifecycleExecutionSnapshotResource {
  snapshotId?: string;
  state?: LifecycleExecutionResourceState;
}
export interface LifecycleExecutionResource {
  accountId?: string;
  resourceId?: string;
  state?: LifecycleExecutionResourceState;
  action?: LifecycleExecutionResourceAction;
  region?: string;
  snapshots?: LifecycleExecutionSnapshotResource[];
  imageUris?: string[];
  startTime?: Date;
  endTime?: Date;
}
export interface ListLifecycleExecutionResourcesResponse {
  lifecycleExecutionId?: string;
  lifecycleExecutionState?: LifecycleExecutionState;
  resources?: LifecycleExecutionResource[];
  nextToken?: string;
}
export interface ListLifecycleExecutionsRequest {
  maxResults?: number;
  nextToken?: string;
  resourceArn: string | undefined;
}
export interface ListLifecycleExecutionsResponse {
  lifecycleExecutions?: LifecycleExecution[];
  nextToken?: string;
}
export interface ListLifecyclePoliciesRequest {
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface LifecyclePolicySummary {
  arn?: string;
  name?: string;
  description?: string;
  status?: LifecyclePolicyStatus;
  executionRole?: string;
  resourceType?: LifecyclePolicyResourceType;
  dateCreated?: Date;
  dateUpdated?: Date;
  dateLastRun?: Date;
  tags?: Record<string, string>;
}
export interface ListLifecyclePoliciesResponse {
  lifecyclePolicySummaryList?: LifecyclePolicySummary[];
  nextToken?: string;
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListWaitingWorkflowStepsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface WorkflowStepExecution {
  stepExecutionId?: string;
  imageBuildVersionArn?: string;
  workflowExecutionId?: string;
  workflowBuildVersionArn?: string;
  name?: string;
  action?: string;
  startTime?: string;
}
export interface ListWaitingWorkflowStepsResponse {
  steps?: WorkflowStepExecution[];
  nextToken?: string;
}
export interface ListWorkflowBuildVersionsRequest {
  workflowVersionArn: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface WorkflowSummary {
  arn?: string;
  name?: string;
  version?: string;
  description?: string;
  changeDescription?: string;
  type?: WorkflowType;
  owner?: string;
  state?: WorkflowState;
  dateCreated?: string;
  tags?: Record<string, string>;
}
export interface ListWorkflowBuildVersionsResponse {
  workflowSummaryList?: WorkflowSummary[];
  nextToken?: string;
}
export interface ListWorkflowExecutionsRequest {
  maxResults?: number;
  nextToken?: string;
  imageBuildVersionArn: string | undefined;
}
export interface WorkflowExecutionMetadata {
  workflowBuildVersionArn?: string;
  workflowExecutionId?: string;
  type?: WorkflowType;
  status?: WorkflowExecutionStatus;
  message?: string;
  totalStepCount?: number;
  totalStepsSucceeded?: number;
  totalStepsFailed?: number;
  totalStepsSkipped?: number;
  startTime?: string;
  endTime?: string;
  parallelGroup?: string;
}
export interface ListWorkflowExecutionsResponse {
  requestId?: string;
  workflowExecutions?: WorkflowExecutionMetadata[];
  imageBuildVersionArn?: string;
  message?: string;
  nextToken?: string;
}
export interface ListWorkflowsRequest {
  owner?: Ownership;
  filters?: Filter[];
  byName?: boolean;
  maxResults?: number;
  nextToken?: string;
}
export interface WorkflowVersion {
  arn?: string;
  name?: string;
  version?: string;
  description?: string;
  type?: WorkflowType;
  owner?: string;
  dateCreated?: string;
}
export interface ListWorkflowsResponse {
  workflowVersionList?: WorkflowVersion[];
  nextToken?: string;
}
export interface ListWorkflowStepExecutionsRequest {
  maxResults?: number;
  nextToken?: string;
  workflowExecutionId: string | undefined;
}
export interface WorkflowStepMetadata {
  stepExecutionId?: string;
  name?: string;
  description?: string;
  action?: string;
  status?: WorkflowStepExecutionStatus;
  rollbackStatus?: WorkflowStepExecutionRollbackStatus;
  message?: string;
  inputs?: string;
  outputs?: string;
  startTime?: string;
  endTime?: string;
}
export interface ListWorkflowStepExecutionsResponse {
  requestId?: string;
  steps?: WorkflowStepMetadata[];
  workflowBuildVersionArn?: string;
  workflowExecutionId?: string;
  imageBuildVersionArn?: string;
  message?: string;
  nextToken?: string;
}
export declare class InvalidParameterValueException extends __BaseException {
  readonly name: "InvalidParameterValueException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>
  );
}
export interface PutComponentPolicyRequest {
  componentArn: string | undefined;
  policy: string | undefined;
}
export interface PutComponentPolicyResponse {
  requestId?: string;
  componentArn?: string;
}
export interface PutContainerRecipePolicyRequest {
  containerRecipeArn: string | undefined;
  policy: string | undefined;
}
export interface PutContainerRecipePolicyResponse {
  requestId?: string;
  containerRecipeArn?: string;
}
export interface PutImagePolicyRequest {
  imageArn: string | undefined;
  policy: string | undefined;
}
export interface PutImagePolicyResponse {
  requestId?: string;
  imageArn?: string;
}
export interface PutImageRecipePolicyRequest {
  imageRecipeArn: string | undefined;
  policy: string | undefined;
}
export interface PutImageRecipePolicyResponse {
  requestId?: string;
  imageRecipeArn?: string;
}
export declare const WorkflowStepActionType: {
  readonly RESUME: "RESUME";
  readonly STOP: "STOP";
};
export type WorkflowStepActionType =
  (typeof WorkflowStepActionType)[keyof typeof WorkflowStepActionType];
export interface SendWorkflowStepActionRequest {
  stepExecutionId: string | undefined;
  imageBuildVersionArn: string | undefined;
  action: WorkflowStepActionType | undefined;
  reason?: string;
  clientToken?: string;
}
export interface SendWorkflowStepActionResponse {
  stepExecutionId?: string;
  imageBuildVersionArn?: string;
  clientToken?: string;
}
export interface StartImagePipelineExecutionRequest {
  imagePipelineArn: string | undefined;
  clientToken?: string;
}
export interface StartImagePipelineExecutionResponse {
  requestId?: string;
  clientToken?: string;
  imageBuildVersionArn?: string;
}
export interface ResourceStateUpdateExclusionRules {
  amis?: LifecyclePolicyDetailExclusionRulesAmis;
}
export interface ResourceStateUpdateIncludeResources {
  amis?: boolean;
  snapshots?: boolean;
  containers?: boolean;
}
export declare const ResourceStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETED: "DELETED";
  readonly DEPRECATED: "DEPRECATED";
  readonly DISABLED: "DISABLED";
};
export type ResourceStatus =
  (typeof ResourceStatus)[keyof typeof ResourceStatus];
export interface ResourceState {
  status?: ResourceStatus;
}
export interface StartResourceStateUpdateRequest {
  resourceArn: string | undefined;
  state: ResourceState | undefined;
  executionRole?: string;
  includeResources?: ResourceStateUpdateIncludeResources;
  exclusionRules?: ResourceStateUpdateExclusionRules;
  updateAt?: Date;
  clientToken?: string;
}
export interface StartResourceStateUpdateResponse {
  lifecycleExecutionId?: string;
  resourceArn?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDistributionConfigurationRequest {
  distributionConfigurationArn: string | undefined;
  description?: string;
  distributions: Distribution[] | undefined;
  clientToken?: string;
}
export interface UpdateDistributionConfigurationResponse {
  requestId?: string;
  clientToken?: string;
  distributionConfigurationArn?: string;
}
export interface UpdateImagePipelineRequest {
  imagePipelineArn: string | undefined;
  description?: string;
  imageRecipeArn?: string;
  containerRecipeArn?: string;
  infrastructureConfigurationArn: string | undefined;
  distributionConfigurationArn?: string;
  imageTestsConfiguration?: ImageTestsConfiguration;
  enhancedImageMetadataEnabled?: boolean;
  schedule?: Schedule;
  status?: PipelineStatus;
  clientToken?: string;
  imageScanningConfiguration?: ImageScanningConfiguration;
  workflows?: WorkflowConfiguration[];
  executionRole?: string;
}
export interface UpdateImagePipelineResponse {
  requestId?: string;
  clientToken?: string;
  imagePipelineArn?: string;
}
export interface UpdateInfrastructureConfigurationRequest {
  infrastructureConfigurationArn: string | undefined;
  description?: string;
  instanceTypes?: string[];
  instanceProfileName: string | undefined;
  securityGroupIds?: string[];
  subnetId?: string;
  logging?: Logging;
  keyPair?: string;
  terminateInstanceOnFailure?: boolean;
  snsTopicArn?: string;
  clientToken?: string;
  resourceTags?: Record<string, string>;
  instanceMetadataOptions?: InstanceMetadataOptions;
}
export interface UpdateInfrastructureConfigurationResponse {
  requestId?: string;
  clientToken?: string;
  infrastructureConfigurationArn?: string;
}
export interface UpdateLifecyclePolicyRequest {
  lifecyclePolicyArn: string | undefined;
  description?: string;
  status?: LifecyclePolicyStatus;
  executionRole: string | undefined;
  resourceType: LifecyclePolicyResourceType | undefined;
  policyDetails: LifecyclePolicyDetail[] | undefined;
  resourceSelection: LifecyclePolicyResourceSelection | undefined;
  clientToken?: string;
}
export interface UpdateLifecyclePolicyResponse {
  lifecyclePolicyArn?: string;
}
