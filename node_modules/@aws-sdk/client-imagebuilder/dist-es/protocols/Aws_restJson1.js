import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ImagebuilderServiceException as __BaseException } from "../models/ImagebuilderServiceException";
import { CallRateLimitExceededException, ClientException, ForbiddenException, IdempotentParameterMismatchException, InvalidPaginationTokenException, InvalidParameterCombinationException, InvalidParameterException, InvalidParameterValueException, InvalidRequestException, InvalidVersionNumberException, ResourceAlreadyExistsException, ResourceDependencyException, ResourceInUseException, ResourceNotFoundException, ServiceException, ServiceQuotaExceededException, ServiceUnavailableException, } from "../models/models_0";
export const se_CancelImageCreationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CancelImageCreation");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        imageBuildVersionArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CancelLifecycleExecutionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CancelLifecycleExecution");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        lifecycleExecutionId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateComponent");
    let body;
    body = JSON.stringify(take(input, {
        changeDescription: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        data: [],
        description: [],
        kmsKeyId: [],
        name: [],
        platform: [],
        semanticVersion: [],
        supportedOsVersions: (_) => _json(_),
        tags: (_) => _json(_),
        uri: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateContainerRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateContainerRecipe");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        components: (_) => _json(_),
        containerType: [],
        description: [],
        dockerfileTemplateData: [],
        dockerfileTemplateUri: [],
        imageOsVersionOverride: [],
        instanceConfiguration: (_) => _json(_),
        kmsKeyId: [],
        name: [],
        parentImage: [],
        platformOverride: [],
        semanticVersion: [],
        tags: (_) => _json(_),
        targetRepository: (_) => _json(_),
        workingDirectory: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateDistributionConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateDistributionConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        distributions: (_) => _json(_),
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateImage");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        containerRecipeArn: [],
        distributionConfigurationArn: [],
        enhancedImageMetadataEnabled: [],
        executionRole: [],
        imageRecipeArn: [],
        imageScanningConfiguration: (_) => _json(_),
        imageTestsConfiguration: (_) => _json(_),
        infrastructureConfigurationArn: [],
        tags: (_) => _json(_),
        workflows: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateImagePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateImagePipeline");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        containerRecipeArn: [],
        description: [],
        distributionConfigurationArn: [],
        enhancedImageMetadataEnabled: [],
        executionRole: [],
        imageRecipeArn: [],
        imageScanningConfiguration: (_) => _json(_),
        imageTestsConfiguration: (_) => _json(_),
        infrastructureConfigurationArn: [],
        name: [],
        schedule: (_) => _json(_),
        status: [],
        tags: (_) => _json(_),
        workflows: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateImageRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateImageRecipe");
    let body;
    body = JSON.stringify(take(input, {
        additionalInstanceConfiguration: (_) => _json(_),
        blockDeviceMappings: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        components: (_) => _json(_),
        description: [],
        name: [],
        parentImage: [],
        semanticVersion: [],
        tags: (_) => _json(_),
        workingDirectory: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateInfrastructureConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateInfrastructureConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        instanceMetadataOptions: (_) => _json(_),
        instanceProfileName: [],
        instanceTypes: (_) => _json(_),
        keyPair: [],
        logging: (_) => _json(_),
        name: [],
        resourceTags: (_) => _json(_),
        securityGroupIds: (_) => _json(_),
        snsTopicArn: [],
        subnetId: [],
        tags: (_) => _json(_),
        terminateInstanceOnFailure: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateLifecyclePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateLifecyclePolicy");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        executionRole: [],
        name: [],
        policyDetails: (_) => _json(_),
        resourceSelection: (_) => _json(_),
        resourceType: [],
        status: [],
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateWorkflowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateWorkflow");
    let body;
    body = JSON.stringify(take(input, {
        changeDescription: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        data: [],
        description: [],
        kmsKeyId: [],
        name: [],
        semanticVersion: [],
        tags: (_) => _json(_),
        type: [],
        uri: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_DeleteComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteComponent");
    const query = map({
        [_cBVA]: [, __expectNonNull(input[_cBVA], `componentBuildVersionArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteContainerRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteContainerRecipe");
    const query = map({
        [_cRA]: [, __expectNonNull(input[_cRA], `containerRecipeArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteDistributionConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteDistributionConfiguration");
    const query = map({
        [_dCA]: [, __expectNonNull(input[_dCA], `distributionConfigurationArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteImage");
    const query = map({
        [_iBVA]: [, __expectNonNull(input[_iBVA], `imageBuildVersionArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteImagePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteImagePipeline");
    const query = map({
        [_iPA]: [, __expectNonNull(input[_iPA], `imagePipelineArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteImageRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteImageRecipe");
    const query = map({
        [_iRA]: [, __expectNonNull(input[_iRA], `imageRecipeArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteInfrastructureConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteInfrastructureConfiguration");
    const query = map({
        [_iCA]: [, __expectNonNull(input[_iCA], `infrastructureConfigurationArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteLifecyclePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteLifecyclePolicy");
    const query = map({
        [_lPA]: [, __expectNonNull(input[_lPA], `lifecyclePolicyArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteWorkflowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/DeleteWorkflow");
    const query = map({
        [_wBVA]: [, __expectNonNull(input[_wBVA], `workflowBuildVersionArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetComponent");
    const query = map({
        [_cBVA]: [, __expectNonNull(input[_cBVA], `componentBuildVersionArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetComponentPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetComponentPolicy");
    const query = map({
        [_cA]: [, __expectNonNull(input[_cA], `componentArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetContainerRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetContainerRecipe");
    const query = map({
        [_cRA]: [, __expectNonNull(input[_cRA], `containerRecipeArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetContainerRecipePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetContainerRecipePolicy");
    const query = map({
        [_cRA]: [, __expectNonNull(input[_cRA], `containerRecipeArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetDistributionConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetDistributionConfiguration");
    const query = map({
        [_dCA]: [, __expectNonNull(input[_dCA], `distributionConfigurationArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetImage");
    const query = map({
        [_iBVA]: [, __expectNonNull(input[_iBVA], `imageBuildVersionArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetImagePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetImagePipeline");
    const query = map({
        [_iPA]: [, __expectNonNull(input[_iPA], `imagePipelineArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetImagePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetImagePolicy");
    const query = map({
        [_iA]: [, __expectNonNull(input[_iA], `imageArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetImageRecipeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetImageRecipe");
    const query = map({
        [_iRA]: [, __expectNonNull(input[_iRA], `imageRecipeArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetImageRecipePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetImageRecipePolicy");
    const query = map({
        [_iRA]: [, __expectNonNull(input[_iRA], `imageRecipeArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetInfrastructureConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetInfrastructureConfiguration");
    const query = map({
        [_iCA]: [, __expectNonNull(input[_iCA], `infrastructureConfigurationArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLifecycleExecutionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetLifecycleExecution");
    const query = map({
        [_lEI]: [, __expectNonNull(input[_lEI], `lifecycleExecutionId`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLifecyclePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetLifecyclePolicy");
    const query = map({
        [_lPA]: [, __expectNonNull(input[_lPA], `lifecyclePolicyArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetWorkflowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetWorkflow");
    const query = map({
        [_wBVA]: [, __expectNonNull(input[_wBVA], `workflowBuildVersionArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetWorkflowExecutionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetWorkflowExecution");
    const query = map({
        [_wEI]: [, __expectNonNull(input[_wEI], `workflowExecutionId`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetWorkflowStepExecutionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/GetWorkflowStepExecution");
    const query = map({
        [_sEI]: [, __expectNonNull(input[_sEI], `stepExecutionId`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ImportComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ImportComponent");
    let body;
    body = JSON.stringify(take(input, {
        changeDescription: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        data: [],
        description: [],
        format: [],
        kmsKeyId: [],
        name: [],
        platform: [],
        semanticVersion: [],
        tags: (_) => _json(_),
        type: [],
        uri: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ImportVmImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ImportVmImage");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        osVersion: [],
        platform: [],
        semanticVersion: [],
        tags: (_) => _json(_),
        vmImportTaskId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ListComponentBuildVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListComponentBuildVersions");
    let body;
    body = JSON.stringify(take(input, {
        componentVersionArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListComponents");
    let body;
    body = JSON.stringify(take(input, {
        byName: [],
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        owner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListContainerRecipesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListContainerRecipes");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        owner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDistributionConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListDistributionConfigurations");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImageBuildVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImageBuildVersions");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        imageVersionArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImagePackagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImagePackages");
    let body;
    body = JSON.stringify(take(input, {
        imageBuildVersionArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImagePipelineImagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImagePipelineImages");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        imagePipelineArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImagePipelinesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImagePipelines");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImageRecipesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImageRecipes");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        owner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImages");
    let body;
    body = JSON.stringify(take(input, {
        byName: [],
        filters: (_) => _json(_),
        includeDeprecated: [],
        maxResults: [],
        nextToken: [],
        owner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImageScanFindingAggregationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImageScanFindingAggregations");
    let body;
    body = JSON.stringify(take(input, {
        filter: (_) => _json(_),
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListImageScanFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListImageScanFindings");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListInfrastructureConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListInfrastructureConfigurations");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListLifecycleExecutionResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListLifecycleExecutionResources");
    let body;
    body = JSON.stringify(take(input, {
        lifecycleExecutionId: [],
        maxResults: [],
        nextToken: [],
        parentResourceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListLifecycleExecutionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListLifecycleExecutions");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        resourceArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListLifecyclePoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListLifecyclePolicies");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListWaitingWorkflowStepsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListWaitingWorkflowSteps");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorkflowBuildVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListWorkflowBuildVersions");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        workflowVersionArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorkflowExecutionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListWorkflowExecutions");
    let body;
    body = JSON.stringify(take(input, {
        imageBuildVersionArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorkflowsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListWorkflows");
    let body;
    body = JSON.stringify(take(input, {
        byName: [],
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        owner: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWorkflowStepExecutionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListWorkflowStepExecutions");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        workflowExecutionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutComponentPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/PutComponentPolicy");
    let body;
    body = JSON.stringify(take(input, {
        componentArn: [],
        policy: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutContainerRecipePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/PutContainerRecipePolicy");
    let body;
    body = JSON.stringify(take(input, {
        containerRecipeArn: [],
        policy: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutImagePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/PutImagePolicy");
    let body;
    body = JSON.stringify(take(input, {
        imageArn: [],
        policy: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutImageRecipePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/PutImageRecipePolicy");
    let body;
    body = JSON.stringify(take(input, {
        imageRecipeArn: [],
        policy: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_SendWorkflowStepActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/SendWorkflowStepAction");
    let body;
    body = JSON.stringify(take(input, {
        action: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        imageBuildVersionArn: [],
        reason: [],
        stepExecutionId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartImagePipelineExecutionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StartImagePipelineExecution");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        imagePipelineArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartResourceStateUpdateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/StartResourceStateUpdate");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        exclusionRules: (_) => _json(_),
        executionRole: [],
        includeResources: (_) => _json(_),
        resourceArn: [],
        state: (_) => _json(_),
        updateAt: (_) => Math.round(_.getTime() / 1000),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDistributionConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateDistributionConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        distributionConfigurationArn: [],
        distributions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateImagePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateImagePipeline");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        containerRecipeArn: [],
        description: [],
        distributionConfigurationArn: [],
        enhancedImageMetadataEnabled: [],
        executionRole: [],
        imagePipelineArn: [],
        imageRecipeArn: [],
        imageScanningConfiguration: (_) => _json(_),
        imageTestsConfiguration: (_) => _json(_),
        infrastructureConfigurationArn: [],
        schedule: (_) => _json(_),
        status: [],
        workflows: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateInfrastructureConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateInfrastructureConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        infrastructureConfigurationArn: [],
        instanceMetadataOptions: (_) => _json(_),
        instanceProfileName: [],
        instanceTypes: (_) => _json(_),
        keyPair: [],
        logging: (_) => _json(_),
        resourceTags: (_) => _json(_),
        securityGroupIds: (_) => _json(_),
        snsTopicArn: [],
        subnetId: [],
        terminateInstanceOnFailure: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateLifecyclePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateLifecyclePolicy");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        executionRole: [],
        lifecyclePolicyArn: [],
        policyDetails: (_) => _json(_),
        resourceSelection: (_) => _json(_),
        resourceType: [],
        status: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_CancelImageCreationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imageBuildVersionArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CancelLifecycleExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecycleExecutionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        componentBuildVersionArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateContainerRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        containerRecipeArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDistributionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        distributionConfigurationArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imageBuildVersionArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateImagePipelineCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imagePipelineArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateImageRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imageRecipeArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateInfrastructureConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        infrastructureConfigurationArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        lifecyclePolicyArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorkflowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        workflowBuildVersionArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        componentBuildVersionArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteContainerRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        containerRecipeArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDistributionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        distributionConfigurationArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageBuildVersionArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteImagePipelineCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imagePipelineArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteImageRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageRecipeArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteInfrastructureConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        infrastructureConfigurationArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecyclePolicyArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteWorkflowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        workflowBuildVersionArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        component: _json,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetComponentPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetContainerRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        containerRecipe: _json,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetContainerRecipePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDistributionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        distributionConfiguration: _json,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        image: (_) => de_Image(_, context),
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImagePipelineCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imagePipeline: _json,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImagePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImageRecipeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageRecipe: _json,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImageRecipePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInfrastructureConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        infrastructureConfiguration: _json,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLifecycleExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecycleExecution: (_) => de_LifecycleExecution(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecyclePolicy: (_) => de_LifecyclePolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWorkflowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        workflow: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWorkflowExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        endTime: __expectString,
        imageBuildVersionArn: __expectString,
        message: __expectString,
        parallelGroup: __expectString,
        requestId: __expectString,
        startTime: __expectString,
        status: __expectString,
        totalStepCount: __expectInt32,
        totalStepsFailed: __expectInt32,
        totalStepsSkipped: __expectInt32,
        totalStepsSucceeded: __expectInt32,
        type: __expectString,
        workflowBuildVersionArn: __expectString,
        workflowExecutionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetWorkflowStepExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        action: __expectString,
        description: __expectString,
        endTime: __expectString,
        imageBuildVersionArn: __expectString,
        inputs: __expectString,
        message: __expectString,
        name: __expectString,
        onFailure: __expectString,
        outputs: __expectString,
        requestId: __expectString,
        rollbackStatus: __expectString,
        startTime: __expectString,
        status: __expectString,
        stepExecutionId: __expectString,
        timeoutSeconds: __expectInt32,
        workflowBuildVersionArn: __expectString,
        workflowExecutionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ImportComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        componentBuildVersionArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ImportVmImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imageArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListComponentBuildVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        componentSummaryList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        componentVersionList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContainerRecipesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        containerRecipeSummaryList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDistributionConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        distributionConfigurationSummaryList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImageBuildVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageSummaryList: (_) => de_ImageSummaryList(_, context),
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImagePackagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imagePackageList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImagePipelineImagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageSummaryList: (_) => de_ImageSummaryList(_, context),
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImagePipelinesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imagePipelineList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImageRecipesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageRecipeSummaryList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageVersionList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImageScanFindingAggregationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        aggregationType: __expectString,
        nextToken: __expectString,
        requestId: __expectString,
        responses: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImageScanFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        findings: (_) => de_ImageScanFindingsList(_, context),
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInfrastructureConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        infrastructureConfigurationSummaryList: _json,
        nextToken: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLifecycleExecutionResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecycleExecutionId: __expectString,
        lifecycleExecutionState: _json,
        nextToken: __expectString,
        resources: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLifecycleExecutionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecycleExecutions: (_) => de_LifecycleExecutionsList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLifecyclePoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecyclePolicySummaryList: (_) => de_LifecyclePolicySummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWaitingWorkflowStepsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        steps: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkflowBuildVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        workflowSummaryList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkflowExecutionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageBuildVersionArn: __expectString,
        message: __expectString,
        nextToken: __expectString,
        requestId: __expectString,
        workflowExecutions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkflowsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        workflowVersionList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkflowStepExecutionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageBuildVersionArn: __expectString,
        message: __expectString,
        nextToken: __expectString,
        requestId: __expectString,
        steps: _json,
        workflowBuildVersionArn: __expectString,
        workflowExecutionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutComponentPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        componentArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutContainerRecipePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        containerRecipeArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutImagePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutImageRecipePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        imageRecipeArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendWorkflowStepActionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imageBuildVersionArn: __expectString,
        stepExecutionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartImagePipelineExecutionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imageBuildVersionArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartResourceStateUpdateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecycleExecutionId: __expectString,
        resourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDistributionConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        distributionConfigurationArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateImagePipelineCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        imagePipelineArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateInfrastructureConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientToken: __expectString,
        infrastructureConfigurationArn: __expectString,
        requestId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateLifecyclePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        lifecyclePolicyArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CallRateLimitExceededException":
        case "com.amazonaws.imagebuilder#CallRateLimitExceededException":
            throw await de_CallRateLimitExceededExceptionRes(parsedOutput, context);
        case "ClientException":
        case "com.amazonaws.imagebuilder#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.imagebuilder#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.imagebuilder#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.imagebuilder#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.imagebuilder#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.imagebuilder#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.imagebuilder#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "InvalidParameterCombinationException":
        case "com.amazonaws.imagebuilder#InvalidParameterCombinationException":
            throw await de_InvalidParameterCombinationExceptionRes(parsedOutput, context);
        case "InvalidVersionNumberException":
        case "com.amazonaws.imagebuilder#InvalidVersionNumberException":
            throw await de_InvalidVersionNumberExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.imagebuilder#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.imagebuilder#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceDependencyException":
        case "com.amazonaws.imagebuilder#ResourceDependencyException":
            throw await de_ResourceDependencyExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.imagebuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.imagebuilder#InvalidPaginationTokenException":
            throw await de_InvalidPaginationTokenExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.imagebuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.imagebuilder#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_CallRateLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new CallRateLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ClientExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidPaginationTokenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidPaginationTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterCombinationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterCombinationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidVersionNumberExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidVersionNumberException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceDependencyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceDependencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_CvssScore = (output, context) => {
    return take(output, {
        baseScore: __limitedParseDouble,
        scoringVector: __expectString,
        source: __expectString,
        version: __expectString,
    });
};
const de_CvssScoreDetails = (output, context) => {
    return take(output, {
        adjustments: _json,
        cvssSource: __expectString,
        score: __limitedParseDouble,
        scoreSource: __expectString,
        scoringVector: __expectString,
        version: __expectString,
    });
};
const de_CvssScoreList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CvssScore(entry, context);
    });
    return retVal;
};
const de_Image = (output, context) => {
    return take(output, {
        arn: __expectString,
        buildType: __expectString,
        containerRecipe: _json,
        dateCreated: __expectString,
        deprecationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        distributionConfiguration: _json,
        enhancedImageMetadataEnabled: __expectBoolean,
        executionRole: __expectString,
        imageRecipe: _json,
        imageScanningConfiguration: _json,
        imageSource: __expectString,
        imageTestsConfiguration: _json,
        infrastructureConfiguration: _json,
        lifecycleExecutionId: __expectString,
        name: __expectString,
        osVersion: __expectString,
        outputResources: _json,
        platform: __expectString,
        scanState: _json,
        sourcePipelineArn: __expectString,
        sourcePipelineName: __expectString,
        state: _json,
        tags: _json,
        type: __expectString,
        version: __expectString,
        workflows: _json,
    });
};
const de_ImageScanFinding = (output, context) => {
    return take(output, {
        awsAccountId: __expectString,
        description: __expectString,
        firstObservedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        fixAvailable: __expectString,
        imageBuildVersionArn: __expectString,
        imagePipelineArn: __expectString,
        inspectorScore: __limitedParseDouble,
        inspectorScoreDetails: (_) => de_InspectorScoreDetails(_, context),
        packageVulnerabilityDetails: (_) => de_PackageVulnerabilityDetails(_, context),
        remediation: _json,
        severity: __expectString,
        title: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ImageScanFindingsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageScanFinding(entry, context);
    });
    return retVal;
};
const de_ImageSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        buildType: __expectString,
        dateCreated: __expectString,
        deprecationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        imageSource: __expectString,
        lifecycleExecutionId: __expectString,
        name: __expectString,
        osVersion: __expectString,
        outputResources: _json,
        owner: __expectString,
        platform: __expectString,
        state: _json,
        tags: _json,
        type: __expectString,
        version: __expectString,
    });
};
const de_ImageSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageSummary(entry, context);
    });
    return retVal;
};
const de_InspectorScoreDetails = (output, context) => {
    return take(output, {
        adjustedCvss: (_) => de_CvssScoreDetails(_, context),
    });
};
const de_LifecycleExecution = (output, context) => {
    return take(output, {
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lifecycleExecutionId: __expectString,
        lifecyclePolicyArn: __expectString,
        resourcesImpactedSummary: _json,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        state: _json,
    });
};
const de_LifecycleExecutionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LifecycleExecution(entry, context);
    });
    return retVal;
};
const de_LifecyclePolicy = (output, context) => {
    return take(output, {
        arn: __expectString,
        dateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dateLastRun: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dateUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        executionRole: __expectString,
        name: __expectString,
        policyDetails: _json,
        resourceSelection: _json,
        resourceType: __expectString,
        status: __expectString,
        tags: _json,
    });
};
const de_LifecyclePolicySummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        dateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dateLastRun: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dateUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        executionRole: __expectString,
        name: __expectString,
        resourceType: __expectString,
        status: __expectString,
        tags: _json,
    });
};
const de_LifecyclePolicySummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LifecyclePolicySummary(entry, context);
    });
    return retVal;
};
const de_PackageVulnerabilityDetails = (output, context) => {
    return take(output, {
        cvss: (_) => de_CvssScoreList(_, context),
        referenceUrls: _json,
        relatedVulnerabilities: _json,
        source: __expectString,
        sourceUrl: __expectString,
        vendorCreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        vendorSeverity: __expectString,
        vendorUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        vulnerabilityId: __expectString,
        vulnerablePackages: _json,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _cA = "componentArn";
const _cBVA = "componentBuildVersionArn";
const _cRA = "containerRecipeArn";
const _dCA = "distributionConfigurationArn";
const _iA = "imageArn";
const _iBVA = "imageBuildVersionArn";
const _iCA = "infrastructureConfigurationArn";
const _iPA = "imagePipelineArn";
const _iRA = "imageRecipeArn";
const _lEI = "lifecycleExecutionId";
const _lPA = "lifecyclePolicyArn";
const _sEI = "stepExecutionId";
const _tK = "tagKeys";
const _wBVA = "workflowBuildVersionArn";
const _wEI = "workflowExecutionId";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
