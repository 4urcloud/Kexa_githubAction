import { ImagebuilderServiceException as __BaseException } from "./ImagebuilderServiceException";
export const ImageStatus = {
    AVAILABLE: "AVAILABLE",
    BUILDING: "BUILDING",
    CANCELLED: "CANCELLED",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DEPRECATED: "DEPRECATED",
    DISABLED: "DISABLED",
    DISTRIBUTING: "DISTRIBUTING",
    FAILED: "FAILED",
    INTEGRATING: "INTEGRATING",
    PENDING: "PENDING",
    TESTING: "TESTING",
};
export const BuildType = {
    IMPORT: "IMPORT",
    SCHEDULED: "SCHEDULED",
    USER_INITIATED: "USER_INITIATED",
};
export class CallRateLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "CallRateLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "CallRateLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CallRateLimitExceededException.prototype);
    }
}
export class ClientException extends __BaseException {
    constructor(opts) {
        super({
            name: "ClientException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientException.prototype);
    }
}
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
export class ServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceException.prototype);
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export const Platform = {
    LINUX: "Linux",
    WINDOWS: "Windows",
};
export const ComponentStatus = {
    DEPRECATED: "DEPRECATED",
};
export const ComponentType = {
    BUILD: "BUILD",
    TEST: "TEST",
};
export const ComponentFormat = {
    SHELL: "SHELL",
};
export const ContainerRepositoryService = {
    ECR: "ECR",
};
export const ContainerType = {
    DOCKER: "DOCKER",
};
export const EbsVolumeType = {
    GP2: "gp2",
    GP3: "gp3",
    IO1: "io1",
    IO2: "io2",
    SC1: "sc1",
    ST1: "st1",
    STANDARD: "standard",
};
export class InvalidParameterCombinationException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterCombinationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterCombinationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterCombinationException.prototype);
    }
}
export class InvalidVersionNumberException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidVersionNumberException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidVersionNumberException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidVersionNumberException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
export const DiskImageFormat = {
    RAW: "RAW",
    VHD: "VHD",
    VMDK: "VMDK",
};
export const OnWorkflowFailure = {
    ABORT: "ABORT",
    CONTINUE: "CONTINUE",
};
export const PipelineExecutionStartCondition = {
    EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE: "EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE",
    EXPRESSION_MATCH_ONLY: "EXPRESSION_MATCH_ONLY",
};
export const PipelineStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const LifecyclePolicyDetailActionType = {
    DELETE: "DELETE",
    DEPRECATE: "DEPRECATE",
    DISABLE: "DISABLE",
};
export const LifecyclePolicyTimeUnit = {
    DAYS: "DAYS",
    MONTHS: "MONTHS",
    WEEKS: "WEEKS",
    YEARS: "YEARS",
};
export const LifecyclePolicyDetailFilterType = {
    AGE: "AGE",
    COUNT: "COUNT",
};
export const LifecyclePolicyResourceType = {
    AMI_IMAGE: "AMI_IMAGE",
    CONTAINER_IMAGE: "CONTAINER_IMAGE",
};
export const LifecyclePolicyStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const WorkflowType = {
    BUILD: "BUILD",
    DISTRIBUTION: "DISTRIBUTION",
    TEST: "TEST",
};
export class ResourceDependencyException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceDependencyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceDependencyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDependencyException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const ImageType = {
    AMI: "AMI",
    DOCKER: "DOCKER",
};
export const ImageSource = {
    AMAZON_MANAGED: "AMAZON_MANAGED",
    AWS_MARKETPLACE: "AWS_MARKETPLACE",
    CUSTOM: "CUSTOM",
    IMPORTED: "IMPORTED",
};
export const ImageScanStatus = {
    ABANDONED: "ABANDONED",
    COLLECTING: "COLLECTING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    SCANNING: "SCANNING",
    TIMED_OUT: "TIMED_OUT",
};
export const LifecycleExecutionStatus = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const WorkflowStatus = {
    DEPRECATED: "DEPRECATED",
};
export const WorkflowExecutionStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    ROLLBACK_COMPLETED: "ROLLBACK_COMPLETED",
    ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
    RUNNING: "RUNNING",
    SKIPPED: "SKIPPED",
};
export const WorkflowStepExecutionRollbackStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SKIPPED: "SKIPPED",
};
export const WorkflowStepExecutionStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    SKIPPED: "SKIPPED",
};
export class InvalidPaginationTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidPaginationTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPaginationTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPaginationTokenException.prototype);
    }
}
export const Ownership = {
    AMAZON: "Amazon",
    SELF: "Self",
    SHARED: "Shared",
    THIRDPARTY: "ThirdParty",
};
export const LifecycleExecutionResourceActionName = {
    AVAILABLE: "AVAILABLE",
    DELETE: "DELETE",
    DEPRECATE: "DEPRECATE",
    DISABLE: "DISABLE",
};
export const LifecycleExecutionResourceStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SKIPPED: "SKIPPED",
    SUCCESS: "SUCCESS",
};
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
export class InvalidParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
    }
}
export const WorkflowStepActionType = {
    RESUME: "RESUME",
    STOP: "STOP",
};
export const ResourceStatus = {
    AVAILABLE: "AVAILABLE",
    DELETED: "DELETED",
    DEPRECATED: "DEPRECATED",
    DISABLED: "DISABLED",
};
