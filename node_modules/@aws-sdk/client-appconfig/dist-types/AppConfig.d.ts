import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { AppConfigClient } from "./AppConfigClient";
import { CreateApplicationCommandInput, CreateApplicationCommandOutput } from "./commands/CreateApplicationCommand";
import { CreateConfigurationProfileCommandInput, CreateConfigurationProfileCommandOutput } from "./commands/CreateConfigurationProfileCommand";
import { CreateDeploymentStrategyCommandInput, CreateDeploymentStrategyCommandOutput } from "./commands/CreateDeploymentStrategyCommand";
import { CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput } from "./commands/CreateEnvironmentCommand";
import { CreateExtensionAssociationCommandInput, CreateExtensionAssociationCommandOutput } from "./commands/CreateExtensionAssociationCommand";
import { CreateExtensionCommandInput, CreateExtensionCommandOutput } from "./commands/CreateExtensionCommand";
import { CreateHostedConfigurationVersionCommandInput, CreateHostedConfigurationVersionCommandOutput } from "./commands/CreateHostedConfigurationVersionCommand";
import { DeleteApplicationCommandInput, DeleteApplicationCommandOutput } from "./commands/DeleteApplicationCommand";
import { DeleteConfigurationProfileCommandInput, DeleteConfigurationProfileCommandOutput } from "./commands/DeleteConfigurationProfileCommand";
import { DeleteDeploymentStrategyCommandInput, DeleteDeploymentStrategyCommandOutput } from "./commands/DeleteDeploymentStrategyCommand";
import { DeleteEnvironmentCommandInput, DeleteEnvironmentCommandOutput } from "./commands/DeleteEnvironmentCommand";
import { DeleteExtensionAssociationCommandInput, DeleteExtensionAssociationCommandOutput } from "./commands/DeleteExtensionAssociationCommand";
import { DeleteExtensionCommandInput, DeleteExtensionCommandOutput } from "./commands/DeleteExtensionCommand";
import { DeleteHostedConfigurationVersionCommandInput, DeleteHostedConfigurationVersionCommandOutput } from "./commands/DeleteHostedConfigurationVersionCommand";
import { GetApplicationCommandInput, GetApplicationCommandOutput } from "./commands/GetApplicationCommand";
import { GetConfigurationCommandInput, GetConfigurationCommandOutput } from "./commands/GetConfigurationCommand";
import { GetConfigurationProfileCommandInput, GetConfigurationProfileCommandOutput } from "./commands/GetConfigurationProfileCommand";
import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "./commands/GetDeploymentCommand";
import { GetDeploymentStrategyCommandInput, GetDeploymentStrategyCommandOutput } from "./commands/GetDeploymentStrategyCommand";
import { GetEnvironmentCommandInput, GetEnvironmentCommandOutput } from "./commands/GetEnvironmentCommand";
import { GetExtensionAssociationCommandInput, GetExtensionAssociationCommandOutput } from "./commands/GetExtensionAssociationCommand";
import { GetExtensionCommandInput, GetExtensionCommandOutput } from "./commands/GetExtensionCommand";
import { GetHostedConfigurationVersionCommandInput, GetHostedConfigurationVersionCommandOutput } from "./commands/GetHostedConfigurationVersionCommand";
import { ListApplicationsCommandInput, ListApplicationsCommandOutput } from "./commands/ListApplicationsCommand";
import { ListConfigurationProfilesCommandInput, ListConfigurationProfilesCommandOutput } from "./commands/ListConfigurationProfilesCommand";
import { ListDeploymentsCommandInput, ListDeploymentsCommandOutput } from "./commands/ListDeploymentsCommand";
import { ListDeploymentStrategiesCommandInput, ListDeploymentStrategiesCommandOutput } from "./commands/ListDeploymentStrategiesCommand";
import { ListEnvironmentsCommandInput, ListEnvironmentsCommandOutput } from "./commands/ListEnvironmentsCommand";
import { ListExtensionAssociationsCommandInput, ListExtensionAssociationsCommandOutput } from "./commands/ListExtensionAssociationsCommand";
import { ListExtensionsCommandInput, ListExtensionsCommandOutput } from "./commands/ListExtensionsCommand";
import { ListHostedConfigurationVersionsCommandInput, ListHostedConfigurationVersionsCommandOutput } from "./commands/ListHostedConfigurationVersionsCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { StartDeploymentCommandInput, StartDeploymentCommandOutput } from "./commands/StartDeploymentCommand";
import { StopDeploymentCommandInput, StopDeploymentCommandOutput } from "./commands/StopDeploymentCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { UpdateApplicationCommandInput, UpdateApplicationCommandOutput } from "./commands/UpdateApplicationCommand";
import { UpdateConfigurationProfileCommandInput, UpdateConfigurationProfileCommandOutput } from "./commands/UpdateConfigurationProfileCommand";
import { UpdateDeploymentStrategyCommandInput, UpdateDeploymentStrategyCommandOutput } from "./commands/UpdateDeploymentStrategyCommand";
import { UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput } from "./commands/UpdateEnvironmentCommand";
import { UpdateExtensionAssociationCommandInput, UpdateExtensionAssociationCommandOutput } from "./commands/UpdateExtensionAssociationCommand";
import { UpdateExtensionCommandInput, UpdateExtensionCommandOutput } from "./commands/UpdateExtensionCommand";
import { ValidateConfigurationCommandInput, ValidateConfigurationCommandOutput } from "./commands/ValidateConfigurationCommand";
export interface AppConfig {
    /**
     * @see {@link CreateApplicationCommand}
     */
    createApplication(args: CreateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<CreateApplicationCommandOutput>;
    createApplication(args: CreateApplicationCommandInput, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
    createApplication(args: CreateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
    /**
     * @see {@link CreateConfigurationProfileCommand}
     */
    createConfigurationProfile(args: CreateConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationProfileCommandOutput>;
    createConfigurationProfile(args: CreateConfigurationProfileCommandInput, cb: (err: any, data?: CreateConfigurationProfileCommandOutput) => void): void;
    createConfigurationProfile(args: CreateConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationProfileCommandOutput) => void): void;
    /**
     * @see {@link CreateDeploymentStrategyCommand}
     */
    createDeploymentStrategy(args: CreateDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeploymentStrategyCommandOutput>;
    createDeploymentStrategy(args: CreateDeploymentStrategyCommandInput, cb: (err: any, data?: CreateDeploymentStrategyCommandOutput) => void): void;
    createDeploymentStrategy(args: CreateDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeploymentStrategyCommandOutput) => void): void;
    /**
     * @see {@link CreateEnvironmentCommand}
     */
    createEnvironment(args: CreateEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateEnvironmentCommandOutput>;
    createEnvironment(args: CreateEnvironmentCommandInput, cb: (err: any, data?: CreateEnvironmentCommandOutput) => void): void;
    createEnvironment(args: CreateEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEnvironmentCommandOutput) => void): void;
    /**
     * @see {@link CreateExtensionCommand}
     */
    createExtension(args: CreateExtensionCommandInput, options?: __HttpHandlerOptions): Promise<CreateExtensionCommandOutput>;
    createExtension(args: CreateExtensionCommandInput, cb: (err: any, data?: CreateExtensionCommandOutput) => void): void;
    createExtension(args: CreateExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExtensionCommandOutput) => void): void;
    /**
     * @see {@link CreateExtensionAssociationCommand}
     */
    createExtensionAssociation(args: CreateExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<CreateExtensionAssociationCommandOutput>;
    createExtensionAssociation(args: CreateExtensionAssociationCommandInput, cb: (err: any, data?: CreateExtensionAssociationCommandOutput) => void): void;
    createExtensionAssociation(args: CreateExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExtensionAssociationCommandOutput) => void): void;
    /**
     * @see {@link CreateHostedConfigurationVersionCommand}
     */
    createHostedConfigurationVersion(args: CreateHostedConfigurationVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateHostedConfigurationVersionCommandOutput>;
    createHostedConfigurationVersion(args: CreateHostedConfigurationVersionCommandInput, cb: (err: any, data?: CreateHostedConfigurationVersionCommandOutput) => void): void;
    createHostedConfigurationVersion(args: CreateHostedConfigurationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHostedConfigurationVersionCommandOutput) => void): void;
    /**
     * @see {@link DeleteApplicationCommand}
     */
    deleteApplication(args: DeleteApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApplicationCommandOutput>;
    deleteApplication(args: DeleteApplicationCommandInput, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
    deleteApplication(args: DeleteApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
    /**
     * @see {@link DeleteConfigurationProfileCommand}
     */
    deleteConfigurationProfile(args: DeleteConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationProfileCommandOutput>;
    deleteConfigurationProfile(args: DeleteConfigurationProfileCommandInput, cb: (err: any, data?: DeleteConfigurationProfileCommandOutput) => void): void;
    deleteConfigurationProfile(args: DeleteConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationProfileCommandOutput) => void): void;
    /**
     * @see {@link DeleteDeploymentStrategyCommand}
     */
    deleteDeploymentStrategy(args: DeleteDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeploymentStrategyCommandOutput>;
    deleteDeploymentStrategy(args: DeleteDeploymentStrategyCommandInput, cb: (err: any, data?: DeleteDeploymentStrategyCommandOutput) => void): void;
    deleteDeploymentStrategy(args: DeleteDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeploymentStrategyCommandOutput) => void): void;
    /**
     * @see {@link DeleteEnvironmentCommand}
     */
    deleteEnvironment(args: DeleteEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEnvironmentCommandOutput>;
    deleteEnvironment(args: DeleteEnvironmentCommandInput, cb: (err: any, data?: DeleteEnvironmentCommandOutput) => void): void;
    deleteEnvironment(args: DeleteEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEnvironmentCommandOutput) => void): void;
    /**
     * @see {@link DeleteExtensionCommand}
     */
    deleteExtension(args: DeleteExtensionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExtensionCommandOutput>;
    deleteExtension(args: DeleteExtensionCommandInput, cb: (err: any, data?: DeleteExtensionCommandOutput) => void): void;
    deleteExtension(args: DeleteExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExtensionCommandOutput) => void): void;
    /**
     * @see {@link DeleteExtensionAssociationCommand}
     */
    deleteExtensionAssociation(args: DeleteExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExtensionAssociationCommandOutput>;
    deleteExtensionAssociation(args: DeleteExtensionAssociationCommandInput, cb: (err: any, data?: DeleteExtensionAssociationCommandOutput) => void): void;
    deleteExtensionAssociation(args: DeleteExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExtensionAssociationCommandOutput) => void): void;
    /**
     * @see {@link DeleteHostedConfigurationVersionCommand}
     */
    deleteHostedConfigurationVersion(args: DeleteHostedConfigurationVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteHostedConfigurationVersionCommandOutput>;
    deleteHostedConfigurationVersion(args: DeleteHostedConfigurationVersionCommandInput, cb: (err: any, data?: DeleteHostedConfigurationVersionCommandOutput) => void): void;
    deleteHostedConfigurationVersion(args: DeleteHostedConfigurationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteHostedConfigurationVersionCommandOutput) => void): void;
    /**
     * @see {@link GetApplicationCommand}
     */
    getApplication(args: GetApplicationCommandInput, options?: __HttpHandlerOptions): Promise<GetApplicationCommandOutput>;
    getApplication(args: GetApplicationCommandInput, cb: (err: any, data?: GetApplicationCommandOutput) => void): void;
    getApplication(args: GetApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApplicationCommandOutput) => void): void;
    /**
     * @see {@link GetConfigurationCommand}
     */
    getConfiguration(args: GetConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationCommandOutput>;
    getConfiguration(args: GetConfigurationCommandInput, cb: (err: any, data?: GetConfigurationCommandOutput) => void): void;
    getConfiguration(args: GetConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationCommandOutput) => void): void;
    /**
     * @see {@link GetConfigurationProfileCommand}
     */
    getConfigurationProfile(args: GetConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationProfileCommandOutput>;
    getConfigurationProfile(args: GetConfigurationProfileCommandInput, cb: (err: any, data?: GetConfigurationProfileCommandOutput) => void): void;
    getConfigurationProfile(args: GetConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationProfileCommandOutput) => void): void;
    /**
     * @see {@link GetDeploymentCommand}
     */
    getDeployment(args: GetDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentCommandOutput>;
    getDeployment(args: GetDeploymentCommandInput, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
    getDeployment(args: GetDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
    /**
     * @see {@link GetDeploymentStrategyCommand}
     */
    getDeploymentStrategy(args: GetDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentStrategyCommandOutput>;
    getDeploymentStrategy(args: GetDeploymentStrategyCommandInput, cb: (err: any, data?: GetDeploymentStrategyCommandOutput) => void): void;
    getDeploymentStrategy(args: GetDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentStrategyCommandOutput) => void): void;
    /**
     * @see {@link GetEnvironmentCommand}
     */
    getEnvironment(args: GetEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<GetEnvironmentCommandOutput>;
    getEnvironment(args: GetEnvironmentCommandInput, cb: (err: any, data?: GetEnvironmentCommandOutput) => void): void;
    getEnvironment(args: GetEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEnvironmentCommandOutput) => void): void;
    /**
     * @see {@link GetExtensionCommand}
     */
    getExtension(args: GetExtensionCommandInput, options?: __HttpHandlerOptions): Promise<GetExtensionCommandOutput>;
    getExtension(args: GetExtensionCommandInput, cb: (err: any, data?: GetExtensionCommandOutput) => void): void;
    getExtension(args: GetExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExtensionCommandOutput) => void): void;
    /**
     * @see {@link GetExtensionAssociationCommand}
     */
    getExtensionAssociation(args: GetExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<GetExtensionAssociationCommandOutput>;
    getExtensionAssociation(args: GetExtensionAssociationCommandInput, cb: (err: any, data?: GetExtensionAssociationCommandOutput) => void): void;
    getExtensionAssociation(args: GetExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExtensionAssociationCommandOutput) => void): void;
    /**
     * @see {@link GetHostedConfigurationVersionCommand}
     */
    getHostedConfigurationVersion(args: GetHostedConfigurationVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetHostedConfigurationVersionCommandOutput>;
    getHostedConfigurationVersion(args: GetHostedConfigurationVersionCommandInput, cb: (err: any, data?: GetHostedConfigurationVersionCommandOutput) => void): void;
    getHostedConfigurationVersion(args: GetHostedConfigurationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetHostedConfigurationVersionCommandOutput) => void): void;
    /**
     * @see {@link ListApplicationsCommand}
     */
    listApplications(args: ListApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<ListApplicationsCommandOutput>;
    listApplications(args: ListApplicationsCommandInput, cb: (err: any, data?: ListApplicationsCommandOutput) => void): void;
    listApplications(args: ListApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApplicationsCommandOutput) => void): void;
    /**
     * @see {@link ListConfigurationProfilesCommand}
     */
    listConfigurationProfiles(args: ListConfigurationProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationProfilesCommandOutput>;
    listConfigurationProfiles(args: ListConfigurationProfilesCommandInput, cb: (err: any, data?: ListConfigurationProfilesCommandOutput) => void): void;
    listConfigurationProfiles(args: ListConfigurationProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationProfilesCommandOutput) => void): void;
    /**
     * @see {@link ListDeploymentsCommand}
     */
    listDeployments(args: ListDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeploymentsCommandOutput>;
    listDeployments(args: ListDeploymentsCommandInput, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
    listDeployments(args: ListDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
    /**
     * @see {@link ListDeploymentStrategiesCommand}
     */
    listDeploymentStrategies(args: ListDeploymentStrategiesCommandInput, options?: __HttpHandlerOptions): Promise<ListDeploymentStrategiesCommandOutput>;
    listDeploymentStrategies(args: ListDeploymentStrategiesCommandInput, cb: (err: any, data?: ListDeploymentStrategiesCommandOutput) => void): void;
    listDeploymentStrategies(args: ListDeploymentStrategiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeploymentStrategiesCommandOutput) => void): void;
    /**
     * @see {@link ListEnvironmentsCommand}
     */
    listEnvironments(args: ListEnvironmentsCommandInput, options?: __HttpHandlerOptions): Promise<ListEnvironmentsCommandOutput>;
    listEnvironments(args: ListEnvironmentsCommandInput, cb: (err: any, data?: ListEnvironmentsCommandOutput) => void): void;
    listEnvironments(args: ListEnvironmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEnvironmentsCommandOutput) => void): void;
    /**
     * @see {@link ListExtensionAssociationsCommand}
     */
    listExtensionAssociations(args: ListExtensionAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<ListExtensionAssociationsCommandOutput>;
    listExtensionAssociations(args: ListExtensionAssociationsCommandInput, cb: (err: any, data?: ListExtensionAssociationsCommandOutput) => void): void;
    listExtensionAssociations(args: ListExtensionAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExtensionAssociationsCommandOutput) => void): void;
    /**
     * @see {@link ListExtensionsCommand}
     */
    listExtensions(args: ListExtensionsCommandInput, options?: __HttpHandlerOptions): Promise<ListExtensionsCommandOutput>;
    listExtensions(args: ListExtensionsCommandInput, cb: (err: any, data?: ListExtensionsCommandOutput) => void): void;
    listExtensions(args: ListExtensionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExtensionsCommandOutput) => void): void;
    /**
     * @see {@link ListHostedConfigurationVersionsCommand}
     */
    listHostedConfigurationVersions(args: ListHostedConfigurationVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListHostedConfigurationVersionsCommandOutput>;
    listHostedConfigurationVersions(args: ListHostedConfigurationVersionsCommandInput, cb: (err: any, data?: ListHostedConfigurationVersionsCommandOutput) => void): void;
    listHostedConfigurationVersions(args: ListHostedConfigurationVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListHostedConfigurationVersionsCommandOutput) => void): void;
    /**
     * @see {@link ListTagsForResourceCommand}
     */
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    /**
     * @see {@link StartDeploymentCommand}
     */
    startDeployment(args: StartDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<StartDeploymentCommandOutput>;
    startDeployment(args: StartDeploymentCommandInput, cb: (err: any, data?: StartDeploymentCommandOutput) => void): void;
    startDeployment(args: StartDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDeploymentCommandOutput) => void): void;
    /**
     * @see {@link StopDeploymentCommand}
     */
    stopDeployment(args: StopDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<StopDeploymentCommandOutput>;
    stopDeployment(args: StopDeploymentCommandInput, cb: (err: any, data?: StopDeploymentCommandOutput) => void): void;
    stopDeployment(args: StopDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDeploymentCommandOutput) => void): void;
    /**
     * @see {@link TagResourceCommand}
     */
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    /**
     * @see {@link UntagResourceCommand}
     */
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    /**
     * @see {@link UpdateApplicationCommand}
     */
    updateApplication(args: UpdateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApplicationCommandOutput>;
    updateApplication(args: UpdateApplicationCommandInput, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
    updateApplication(args: UpdateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
    /**
     * @see {@link UpdateConfigurationProfileCommand}
     */
    updateConfigurationProfile(args: UpdateConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationProfileCommandOutput>;
    updateConfigurationProfile(args: UpdateConfigurationProfileCommandInput, cb: (err: any, data?: UpdateConfigurationProfileCommandOutput) => void): void;
    updateConfigurationProfile(args: UpdateConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationProfileCommandOutput) => void): void;
    /**
     * @see {@link UpdateDeploymentStrategyCommand}
     */
    updateDeploymentStrategy(args: UpdateDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeploymentStrategyCommandOutput>;
    updateDeploymentStrategy(args: UpdateDeploymentStrategyCommandInput, cb: (err: any, data?: UpdateDeploymentStrategyCommandOutput) => void): void;
    updateDeploymentStrategy(args: UpdateDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeploymentStrategyCommandOutput) => void): void;
    /**
     * @see {@link UpdateEnvironmentCommand}
     */
    updateEnvironment(args: UpdateEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEnvironmentCommandOutput>;
    updateEnvironment(args: UpdateEnvironmentCommandInput, cb: (err: any, data?: UpdateEnvironmentCommandOutput) => void): void;
    updateEnvironment(args: UpdateEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEnvironmentCommandOutput) => void): void;
    /**
     * @see {@link UpdateExtensionCommand}
     */
    updateExtension(args: UpdateExtensionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExtensionCommandOutput>;
    updateExtension(args: UpdateExtensionCommandInput, cb: (err: any, data?: UpdateExtensionCommandOutput) => void): void;
    updateExtension(args: UpdateExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExtensionCommandOutput) => void): void;
    /**
     * @see {@link UpdateExtensionAssociationCommand}
     */
    updateExtensionAssociation(args: UpdateExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExtensionAssociationCommandOutput>;
    updateExtensionAssociation(args: UpdateExtensionAssociationCommandInput, cb: (err: any, data?: UpdateExtensionAssociationCommandOutput) => void): void;
    updateExtensionAssociation(args: UpdateExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExtensionAssociationCommandOutput) => void): void;
    /**
     * @see {@link ValidateConfigurationCommand}
     */
    validateConfiguration(args: ValidateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<ValidateConfigurationCommandOutput>;
    validateConfiguration(args: ValidateConfigurationCommandInput, cb: (err: any, data?: ValidateConfigurationCommandOutput) => void): void;
    validateConfiguration(args: ValidateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ValidateConfigurationCommandOutput) => void): void;
}
/**
 * @public
 * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly
 *          deploy application configurations. AppConfig supports controlled deployments to
 *          applications of any size and includes built-in validation checks and monitoring. You can
 *          use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers,
 *          mobile applications, or IoT devices.</p>
 *          <p>To prevent errors when deploying application configurations, especially for production
 *          systems where a simple typo could cause an unexpected outage, AppConfig includes
 *          validators. A validator provides a syntactic or semantic check to ensure that the
 *          configuration you want to deploy works as intended. To validate your application
 *          configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against
 *          the configuration. The configuration deployment or update can only proceed when the
 *          configuration data is valid.</p>
 *          <p>During a configuration deployment, AppConfig monitors the application to
 *          ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can
 *          configure a deployment strategy for each application or environment that includes
 *          deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error
 *          monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back
 *          to the previous version. </p>
 *          <p>AppConfig supports multiple use cases. Here are some examples:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <b>Feature flags</b>: Use AppConfig to turn on
 *                new features that require a timely deployment, such as a product launch or
 *                announcement. </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <b>Application tuning</b>: Use AppConfig to
 *                carefully introduce changes to your application that can only be tested with
 *                production traffic.</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <b>Allow list</b>: Use AppConfig to allow
 *                premium subscribers to access paid content. </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <b>Operational issues</b>: Use AppConfig to
 *                reduce stress on your application when a dependency or other external factor impacts
 *                the system.</p>
 *             </li>
 *          </ul>
 *          <p>This reference is intended to be used with the <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html">AppConfig User
 *          Guide</a>.</p>
 */
export declare class AppConfig extends AppConfigClient implements AppConfig {
}
