import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectString as __expectString, limitedParseDouble as __limitedParseDouble, take, withBaseException, } from "@smithy/smithy-client";
import { AttachmentIdNotFound, AttachmentLimitExceeded, AttachmentSetExpired, AttachmentSetIdNotFound, AttachmentSetSizeLimitExceeded, CaseCreationLimitExceeded, CaseIdNotFound, DescribeAttachmentLimitExceeded, InternalServerError, ThrottlingException, } from "../models/models_0";
import { SupportServiceException as __BaseException } from "../models/SupportServiceException";
export const se_AddAttachmentsToSetCommand = async (input, context) => {
    const headers = sharedHeaders("AddAttachmentsToSet");
    let body;
    body = JSON.stringify(se_AddAttachmentsToSetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AddCommunicationToCaseCommand = async (input, context) => {
    const headers = sharedHeaders("AddCommunicationToCase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCaseCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAttachmentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAttachment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCasesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCommunicationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCommunications");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCreateCaseOptionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCreateCaseOptions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeServicesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeServices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSeverityLevelsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSeverityLevels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSupportedLanguagesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSupportedLanguages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrustedAdvisorCheckRefreshStatusesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrustedAdvisorCheckRefreshStatuses");
    let body;
    body = JSON.stringify(se_DescribeTrustedAdvisorCheckRefreshStatusesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrustedAdvisorCheckResultCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrustedAdvisorCheckResult");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrustedAdvisorChecksCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrustedAdvisorChecks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTrustedAdvisorCheckSummariesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrustedAdvisorCheckSummaries");
    let body;
    body = JSON.stringify(se_DescribeTrustedAdvisorCheckSummariesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RefreshTrustedAdvisorCheckCommand = async (input, context) => {
    const headers = sharedHeaders("RefreshTrustedAdvisorCheck");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResolveCaseCommand = async (input, context) => {
    const headers = sharedHeaders("ResolveCase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AddAttachmentsToSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AddCommunicationToCaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAttachmentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCommunicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCreateCaseOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSeverityLevelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSupportedLanguagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTrustedAdvisorCheckRefreshStatusesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTrustedAdvisorCheckResultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrustedAdvisorCheckResultResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTrustedAdvisorChecksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrustedAdvisorChecksResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTrustedAdvisorCheckSummariesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrustedAdvisorCheckSummariesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RefreshTrustedAdvisorCheckCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResolveCaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AttachmentLimitExceeded":
        case "com.amazonaws.support#AttachmentLimitExceeded":
            throw await de_AttachmentLimitExceededRes(parsedOutput, context);
        case "AttachmentSetExpired":
        case "com.amazonaws.support#AttachmentSetExpired":
            throw await de_AttachmentSetExpiredRes(parsedOutput, context);
        case "AttachmentSetIdNotFound":
        case "com.amazonaws.support#AttachmentSetIdNotFound":
            throw await de_AttachmentSetIdNotFoundRes(parsedOutput, context);
        case "AttachmentSetSizeLimitExceeded":
        case "com.amazonaws.support#AttachmentSetSizeLimitExceeded":
            throw await de_AttachmentSetSizeLimitExceededRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.support#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "CaseIdNotFound":
        case "com.amazonaws.support#CaseIdNotFound":
            throw await de_CaseIdNotFoundRes(parsedOutput, context);
        case "CaseCreationLimitExceeded":
        case "com.amazonaws.support#CaseCreationLimitExceeded":
            throw await de_CaseCreationLimitExceededRes(parsedOutput, context);
        case "AttachmentIdNotFound":
        case "com.amazonaws.support#AttachmentIdNotFound":
            throw await de_AttachmentIdNotFoundRes(parsedOutput, context);
        case "DescribeAttachmentLimitExceeded":
        case "com.amazonaws.support#DescribeAttachmentLimitExceeded":
            throw await de_DescribeAttachmentLimitExceededRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.support#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AttachmentIdNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AttachmentIdNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AttachmentLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AttachmentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AttachmentSetExpiredRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AttachmentSetExpired({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AttachmentSetIdNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AttachmentSetIdNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AttachmentSetSizeLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AttachmentSetSizeLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CaseCreationLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CaseCreationLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_CaseIdNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CaseIdNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DescribeAttachmentLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DescribeAttachmentLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AddAttachmentsToSetRequest = (input, context) => {
    return take(input, {
        attachmentSetId: [],
        attachments: (_) => se_Attachments(_, context),
    });
};
const se_Attachment = (input, context) => {
    return take(input, {
        data: context.base64Encoder,
        fileName: [],
    });
};
const se_Attachments = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Attachment(entry, context);
    });
};
const se_DescribeTrustedAdvisorCheckRefreshStatusesRequest = (input, context) => {
    return take(input, {
        checkIds: (_) => se_StringList(_, context),
    });
};
const se_DescribeTrustedAdvisorCheckSummariesRequest = (input, context) => {
    return take(input, {
        checkIds: (_) => se_StringList(_, context),
    });
};
const se_StringList = (input, context) => {
    return input;
};
const de_Attachment = (output, context) => {
    return take(output, {
        data: context.base64Decoder,
        fileName: __expectString,
    });
};
const de_DescribeAttachmentResponse = (output, context) => {
    return take(output, {
        attachment: (_) => de_Attachment(_, context),
    });
};
const de_DescribeTrustedAdvisorCheckResultResponse = (output, context) => {
    return take(output, {
        result: (_) => de_TrustedAdvisorCheckResult(_, context),
    });
};
const de_DescribeTrustedAdvisorChecksResponse = (output, context) => {
    return take(output, {
        checks: (_) => de_TrustedAdvisorCheckList(_, context),
    });
};
const de_DescribeTrustedAdvisorCheckSummariesResponse = (output, context) => {
    return take(output, {
        summaries: (_) => de_TrustedAdvisorCheckSummaryList(_, context),
    });
};
const de_StringList = (output, context) => {
    const retVal = (output || []).map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const de_TrustedAdvisorCategorySpecificSummary = (output, context) => {
    return take(output, {
        costOptimizing: (_) => de_TrustedAdvisorCostOptimizingSummary(_, context),
    });
};
const de_TrustedAdvisorCheckDescription = (output, context) => {
    return take(output, {
        category: __expectString,
        description: __expectString,
        id: __expectString,
        metadata: (_) => de_StringList(_, context),
        name: __expectString,
    });
};
const de_TrustedAdvisorCheckList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrustedAdvisorCheckDescription(entry, context);
    });
    return retVal;
};
const de_TrustedAdvisorCheckResult = (output, context) => {
    return take(output, {
        categorySpecificSummary: (_) => de_TrustedAdvisorCategorySpecificSummary(_, context),
        checkId: __expectString,
        flaggedResources: (_) => de_TrustedAdvisorResourceDetailList(_, context),
        resourcesSummary: _json,
        status: __expectString,
        timestamp: __expectString,
    });
};
const de_TrustedAdvisorCheckSummary = (output, context) => {
    return take(output, {
        categorySpecificSummary: (_) => de_TrustedAdvisorCategorySpecificSummary(_, context),
        checkId: __expectString,
        hasFlaggedResources: __expectBoolean,
        resourcesSummary: _json,
        status: __expectString,
        timestamp: __expectString,
    });
};
const de_TrustedAdvisorCheckSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrustedAdvisorCheckSummary(entry, context);
    });
    return retVal;
};
const de_TrustedAdvisorCostOptimizingSummary = (output, context) => {
    return take(output, {
        estimatedMonthlySavings: __limitedParseDouble,
        estimatedPercentMonthlySavings: __limitedParseDouble,
    });
};
const de_TrustedAdvisorResourceDetail = (output, context) => {
    return take(output, {
        isSuppressed: __expectBoolean,
        metadata: (_) => de_StringList(_, context),
        region: __expectString,
        resourceId: __expectString,
        status: __expectString,
    });
};
const de_TrustedAdvisorResourceDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrustedAdvisorResourceDetail(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSSupport_20130415.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
