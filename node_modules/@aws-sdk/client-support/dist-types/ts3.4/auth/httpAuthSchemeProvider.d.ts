import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { SupportClientResolvedConfig } from "../SupportClient";
export interface SupportHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface SupportHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    SupportClientResolvedConfig,
    HandlerExecutionContext,
    SupportHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultSupportHttpAuthSchemeParametersProvider: (
  config: SupportClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<SupportHttpAuthSchemeParameters>;
export interface SupportHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<SupportHttpAuthSchemeParameters> {}
export declare const defaultSupportHttpAuthSchemeProvider: SupportHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: SupportHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: SupportHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
