import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { KeyspacesServiceException as __BaseException } from "../models/KeyspacesServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ValidationException, } from "../models/models_0";
export const se_CreateKeyspaceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateKeyspace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTableCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTable");
    let body;
    body = JSON.stringify(se_CreateTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteKeyspaceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteKeyspace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTableCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTable");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetKeyspaceCommand = async (input, context) => {
    const headers = sharedHeaders("GetKeyspace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTableCommand = async (input, context) => {
    const headers = sharedHeaders("GetTable");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTableAutoScalingSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("GetTableAutoScalingSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListKeyspacesCommand = async (input, context) => {
    const headers = sharedHeaders("ListKeyspaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTablesCommand = async (input, context) => {
    const headers = sharedHeaders("ListTables");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreTableCommand = async (input, context) => {
    const headers = sharedHeaders("RestoreTable");
    let body;
    body = JSON.stringify(se_RestoreTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTableCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTable");
    let body;
    body = JSON.stringify(se_UpdateTableRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateKeyspaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteKeyspaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetKeyspaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTableAutoScalingSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTableAutoScalingSettingsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListKeyspacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RestoreTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.keyspaces#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.keyspaces#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.keyspaces#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.keyspaces#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.keyspaces#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.keyspaces#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AutoScalingPolicy = (input, context) => {
    return take(input, {
        targetTrackingScalingPolicyConfiguration: (_) => se_TargetTrackingScalingPolicyConfiguration(_, context),
    });
};
const se_AutoScalingSettings = (input, context) => {
    return take(input, {
        autoScalingDisabled: [],
        maximumUnits: [],
        minimumUnits: [],
        scalingPolicy: (_) => se_AutoScalingPolicy(_, context),
    });
};
const se_AutoScalingSpecification = (input, context) => {
    return take(input, {
        readCapacityAutoScaling: (_) => se_AutoScalingSettings(_, context),
        writeCapacityAutoScaling: (_) => se_AutoScalingSettings(_, context),
    });
};
const se_CreateTableRequest = (input, context) => {
    return take(input, {
        autoScalingSpecification: (_) => se_AutoScalingSpecification(_, context),
        capacitySpecification: _json,
        clientSideTimestamps: _json,
        comment: _json,
        defaultTimeToLive: [],
        encryptionSpecification: _json,
        keyspaceName: [],
        pointInTimeRecovery: _json,
        replicaSpecifications: (_) => se_ReplicaSpecificationList(_, context),
        schemaDefinition: _json,
        tableName: [],
        tags: _json,
        ttl: _json,
    });
};
const se_ReplicaSpecification = (input, context) => {
    return take(input, {
        readCapacityAutoScaling: (_) => se_AutoScalingSettings(_, context),
        readCapacityUnits: [],
        region: [],
    });
};
const se_ReplicaSpecificationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ReplicaSpecification(entry, context);
    });
};
const se_RestoreTableRequest = (input, context) => {
    return take(input, {
        autoScalingSpecification: (_) => se_AutoScalingSpecification(_, context),
        capacitySpecificationOverride: _json,
        encryptionSpecificationOverride: _json,
        pointInTimeRecoveryOverride: _json,
        replicaSpecifications: (_) => se_ReplicaSpecificationList(_, context),
        restoreTimestamp: (_) => Math.round(_.getTime() / 1000),
        sourceKeyspaceName: [],
        sourceTableName: [],
        tagsOverride: _json,
        targetKeyspaceName: [],
        targetTableName: [],
    });
};
const se_TargetTrackingScalingPolicyConfiguration = (input, context) => {
    return take(input, {
        disableScaleIn: [],
        scaleInCooldown: [],
        scaleOutCooldown: [],
        targetValue: __serializeFloat,
    });
};
const se_UpdateTableRequest = (input, context) => {
    return take(input, {
        addColumns: _json,
        autoScalingSpecification: (_) => se_AutoScalingSpecification(_, context),
        capacitySpecification: _json,
        clientSideTimestamps: _json,
        defaultTimeToLive: [],
        encryptionSpecification: _json,
        keyspaceName: [],
        pointInTimeRecovery: _json,
        replicaSpecifications: (_) => se_ReplicaSpecificationList(_, context),
        tableName: [],
        ttl: _json,
    });
};
const de_AutoScalingPolicy = (output, context) => {
    return take(output, {
        targetTrackingScalingPolicyConfiguration: (_) => de_TargetTrackingScalingPolicyConfiguration(_, context),
    });
};
const de_AutoScalingSettings = (output, context) => {
    return take(output, {
        autoScalingDisabled: __expectBoolean,
        maximumUnits: __expectLong,
        minimumUnits: __expectLong,
        scalingPolicy: (_) => de_AutoScalingPolicy(_, context),
    });
};
const de_AutoScalingSpecification = (output, context) => {
    return take(output, {
        readCapacityAutoScaling: (_) => de_AutoScalingSettings(_, context),
        writeCapacityAutoScaling: (_) => de_AutoScalingSettings(_, context),
    });
};
const de_CapacitySpecificationSummary = (output, context) => {
    return take(output, {
        lastUpdateToPayPerRequestTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        readCapacityUnits: __expectLong,
        throughputMode: __expectString,
        writeCapacityUnits: __expectLong,
    });
};
const de_GetTableAutoScalingSettingsResponse = (output, context) => {
    return take(output, {
        autoScalingSpecification: (_) => de_AutoScalingSpecification(_, context),
        keyspaceName: __expectString,
        replicaSpecifications: (_) => de_ReplicaAutoScalingSpecificationList(_, context),
        resourceArn: __expectString,
        tableName: __expectString,
    });
};
const de_GetTableResponse = (output, context) => {
    return take(output, {
        capacitySpecification: (_) => de_CapacitySpecificationSummary(_, context),
        clientSideTimestamps: _json,
        comment: _json,
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultTimeToLive: __expectInt32,
        encryptionSpecification: _json,
        keyspaceName: __expectString,
        pointInTimeRecovery: (_) => de_PointInTimeRecoverySummary(_, context),
        replicaSpecifications: (_) => de_ReplicaSpecificationSummaryList(_, context),
        resourceArn: __expectString,
        schemaDefinition: _json,
        status: __expectString,
        tableName: __expectString,
        ttl: _json,
    });
};
const de_PointInTimeRecoverySummary = (output, context) => {
    return take(output, {
        earliestRestorableTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_ReplicaAutoScalingSpecification = (output, context) => {
    return take(output, {
        autoScalingSpecification: (_) => de_AutoScalingSpecification(_, context),
        region: __expectString,
    });
};
const de_ReplicaAutoScalingSpecificationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicaAutoScalingSpecification(entry, context);
    });
    return retVal;
};
const de_ReplicaSpecificationSummary = (output, context) => {
    return take(output, {
        capacitySpecification: (_) => de_CapacitySpecificationSummary(_, context),
        region: __expectString,
        status: __expectString,
    });
};
const de_ReplicaSpecificationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicaSpecificationSummary(entry, context);
    });
    return retVal;
};
const de_TargetTrackingScalingPolicyConfiguration = (output, context) => {
    return take(output, {
        disableScaleIn: __expectBoolean,
        scaleInCooldown: __expectInt32,
        scaleOutCooldown: __expectInt32,
        targetValue: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `KeyspacesService.${operation}`,
    };
}
