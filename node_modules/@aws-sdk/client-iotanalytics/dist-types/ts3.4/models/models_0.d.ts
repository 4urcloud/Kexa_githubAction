import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IoTAnalyticsServiceException as __BaseException } from "./IoTAnalyticsServiceException";
export interface AddAttributesActivity {
  name: string | undefined;
  attributes: Record<string, string> | undefined;
  next?: string;
}
export interface Message {
  messageId: string | undefined;
  payload: Uint8Array | undefined;
}
export interface BatchPutMessageRequest {
  channelName: string | undefined;
  messages: Message[] | undefined;
}
export interface BatchPutMessageErrorEntry {
  messageId?: string;
  errorCode?: string;
  errorMessage?: string;
}
export interface BatchPutMessageResponse {
  batchPutMessageErrorEntries?: BatchPutMessageErrorEntry[];
}
export declare class InternalFailureException extends __BaseException {
  readonly name: "InternalFailureException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalFailureException, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface CancelPipelineReprocessingRequest {
  pipelineName: string | undefined;
  reprocessingId: string | undefined;
}
export interface CancelPipelineReprocessingResponse {}
export interface CustomerManagedChannelS3Storage {
  bucket: string | undefined;
  keyPrefix?: string;
  roleArn: string | undefined;
}
export interface ServiceManagedChannelS3Storage {}
export interface ChannelStorage {
  serviceManagedS3?: ServiceManagedChannelS3Storage;
  customerManagedS3?: CustomerManagedChannelS3Storage;
}
export interface RetentionPeriod {
  unlimited?: boolean;
  numberOfDays?: number;
}
export interface Tag {
  key: string | undefined;
  value: string | undefined;
}
export interface CreateChannelRequest {
  channelName: string | undefined;
  channelStorage?: ChannelStorage;
  retentionPeriod?: RetentionPeriod;
  tags?: Tag[];
}
export interface CreateChannelResponse {
  channelName?: string;
  channelArn?: string;
  retentionPeriod?: RetentionPeriod;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  resourceId?: string;
  resourceArn?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare const ComputeType: {
  readonly ACU_1: "ACU_1";
  readonly ACU_2: "ACU_2";
};
export type ComputeType = (typeof ComputeType)[keyof typeof ComputeType];
export interface ResourceConfiguration {
  computeType: ComputeType | undefined;
  volumeSizeInGB: number | undefined;
}
export interface DatasetContentVersionValue {
  datasetName: string | undefined;
}
export interface OutputFileUriValue {
  fileName: string | undefined;
}
export interface Variable {
  name: string | undefined;
  stringValue?: string;
  doubleValue?: number;
  datasetContentVersionValue?: DatasetContentVersionValue;
  outputFileUriValue?: OutputFileUriValue;
}
export interface ContainerDatasetAction {
  image: string | undefined;
  executionRoleArn: string | undefined;
  resourceConfiguration: ResourceConfiguration | undefined;
  variables?: Variable[];
}
export interface DeltaTime {
  offsetSeconds: number | undefined;
  timeExpression: string | undefined;
}
export interface QueryFilter {
  deltaTime?: DeltaTime;
}
export interface SqlQueryDatasetAction {
  sqlQuery: string | undefined;
  filters?: QueryFilter[];
}
export interface DatasetAction {
  actionName?: string;
  queryAction?: SqlQueryDatasetAction;
  containerAction?: ContainerDatasetAction;
}
export interface IotEventsDestinationConfiguration {
  inputName: string | undefined;
  roleArn: string | undefined;
}
export interface GlueConfiguration {
  tableName: string | undefined;
  databaseName: string | undefined;
}
export interface S3DestinationConfiguration {
  bucket: string | undefined;
  key: string | undefined;
  glueConfiguration?: GlueConfiguration;
  roleArn: string | undefined;
}
export interface DatasetContentDeliveryDestination {
  iotEventsDestinationConfiguration?: IotEventsDestinationConfiguration;
  s3DestinationConfiguration?: S3DestinationConfiguration;
}
export interface DatasetContentDeliveryRule {
  entryName?: string;
  destination: DatasetContentDeliveryDestination | undefined;
}
export interface DeltaTimeSessionWindowConfiguration {
  timeoutInMinutes: number | undefined;
}
export interface LateDataRuleConfiguration {
  deltaTimeSessionWindowConfiguration?: DeltaTimeSessionWindowConfiguration;
}
export interface LateDataRule {
  ruleName?: string;
  ruleConfiguration: LateDataRuleConfiguration | undefined;
}
export interface TriggeringDataset {
  name: string | undefined;
}
export interface Schedule {
  expression?: string;
}
export interface DatasetTrigger {
  schedule?: Schedule;
  dataset?: TriggeringDataset;
}
export interface VersioningConfiguration {
  unlimited?: boolean;
  maxVersions?: number;
}
export interface CreateDatasetRequest {
  datasetName: string | undefined;
  actions: DatasetAction[] | undefined;
  triggers?: DatasetTrigger[];
  contentDeliveryRules?: DatasetContentDeliveryRule[];
  retentionPeriod?: RetentionPeriod;
  versioningConfiguration?: VersioningConfiguration;
  tags?: Tag[];
  lateDataRules?: LateDataRule[];
}
export interface CreateDatasetResponse {
  datasetName?: string;
  datasetArn?: string;
  retentionPeriod?: RetentionPeriod;
}
export interface CreateDatasetContentRequest {
  datasetName: string | undefined;
  versionId?: string;
}
export interface CreateDatasetContentResponse {
  versionId?: string;
}
export interface Partition {
  attributeName: string | undefined;
}
export interface TimestampPartition {
  attributeName: string | undefined;
  timestampFormat?: string;
}
export interface DatastorePartition {
  attributePartition?: Partition;
  timestampPartition?: TimestampPartition;
}
export interface DatastorePartitions {
  partitions?: DatastorePartition[];
}
export interface CustomerManagedDatastoreS3Storage {
  bucket: string | undefined;
  keyPrefix?: string;
  roleArn: string | undefined;
}
export interface IotSiteWiseCustomerManagedDatastoreS3Storage {
  bucket: string | undefined;
  keyPrefix?: string;
}
export interface DatastoreIotSiteWiseMultiLayerStorage {
  customerManagedS3Storage:
    | IotSiteWiseCustomerManagedDatastoreS3Storage
    | undefined;
}
export interface ServiceManagedDatastoreS3Storage {}
export type DatastoreStorage =
  | DatastoreStorage.CustomerManagedS3Member
  | DatastoreStorage.IotSiteWiseMultiLayerStorageMember
  | DatastoreStorage.ServiceManagedS3Member
  | DatastoreStorage.$UnknownMember;
export declare namespace DatastoreStorage {
  interface ServiceManagedS3Member {
    serviceManagedS3: ServiceManagedDatastoreS3Storage;
    customerManagedS3?: never;
    iotSiteWiseMultiLayerStorage?: never;
    $unknown?: never;
  }
  interface CustomerManagedS3Member {
    serviceManagedS3?: never;
    customerManagedS3: CustomerManagedDatastoreS3Storage;
    iotSiteWiseMultiLayerStorage?: never;
    $unknown?: never;
  }
  interface IotSiteWiseMultiLayerStorageMember {
    serviceManagedS3?: never;
    customerManagedS3?: never;
    iotSiteWiseMultiLayerStorage: DatastoreIotSiteWiseMultiLayerStorage;
    $unknown?: never;
  }
  interface $UnknownMember {
    serviceManagedS3?: never;
    customerManagedS3?: never;
    iotSiteWiseMultiLayerStorage?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    serviceManagedS3: (value: ServiceManagedDatastoreS3Storage) => T;
    customerManagedS3: (value: CustomerManagedDatastoreS3Storage) => T;
    iotSiteWiseMultiLayerStorage: (
      value: DatastoreIotSiteWiseMultiLayerStorage
    ) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: DatastoreStorage, visitor: Visitor<T>) => T;
}
export interface JsonConfiguration {}
export interface Column {
  name: string | undefined;
  type: string | undefined;
}
export interface SchemaDefinition {
  columns?: Column[];
}
export interface ParquetConfiguration {
  schemaDefinition?: SchemaDefinition;
}
export interface FileFormatConfiguration {
  jsonConfiguration?: JsonConfiguration;
  parquetConfiguration?: ParquetConfiguration;
}
export interface CreateDatastoreRequest {
  datastoreName: string | undefined;
  datastoreStorage?: DatastoreStorage;
  retentionPeriod?: RetentionPeriod;
  tags?: Tag[];
  fileFormatConfiguration?: FileFormatConfiguration;
  datastorePartitions?: DatastorePartitions;
}
export interface CreateDatastoreResponse {
  datastoreName?: string;
  datastoreArn?: string;
  retentionPeriod?: RetentionPeriod;
}
export interface ChannelActivity {
  name: string | undefined;
  channelName: string | undefined;
  next?: string;
}
export interface DatastoreActivity {
  name: string | undefined;
  datastoreName: string | undefined;
}
export interface DeviceRegistryEnrichActivity {
  name: string | undefined;
  attribute: string | undefined;
  thingName: string | undefined;
  roleArn: string | undefined;
  next?: string;
}
export interface DeviceShadowEnrichActivity {
  name: string | undefined;
  attribute: string | undefined;
  thingName: string | undefined;
  roleArn: string | undefined;
  next?: string;
}
export interface FilterActivity {
  name: string | undefined;
  filter: string | undefined;
  next?: string;
}
export interface LambdaActivity {
  name: string | undefined;
  lambdaName: string | undefined;
  batchSize: number | undefined;
  next?: string;
}
export interface MathActivity {
  name: string | undefined;
  attribute: string | undefined;
  math: string | undefined;
  next?: string;
}
export interface RemoveAttributesActivity {
  name: string | undefined;
  attributes: string[] | undefined;
  next?: string;
}
export interface SelectAttributesActivity {
  name: string | undefined;
  attributes: string[] | undefined;
  next?: string;
}
export interface PipelineActivity {
  channel?: ChannelActivity;
  lambda?: LambdaActivity;
  datastore?: DatastoreActivity;
  addAttributes?: AddAttributesActivity;
  removeAttributes?: RemoveAttributesActivity;
  selectAttributes?: SelectAttributesActivity;
  filter?: FilterActivity;
  math?: MathActivity;
  deviceRegistryEnrich?: DeviceRegistryEnrichActivity;
  deviceShadowEnrich?: DeviceShadowEnrichActivity;
}
export interface CreatePipelineRequest {
  pipelineName: string | undefined;
  pipelineActivities: PipelineActivity[] | undefined;
  tags?: Tag[];
}
export interface CreatePipelineResponse {
  pipelineName?: string;
  pipelineArn?: string;
}
export interface DeleteChannelRequest {
  channelName: string | undefined;
}
export interface DeleteDatasetRequest {
  datasetName: string | undefined;
}
export interface DeleteDatasetContentRequest {
  datasetName: string | undefined;
  versionId?: string;
}
export interface DeleteDatastoreRequest {
  datastoreName: string | undefined;
}
export interface DeletePipelineRequest {
  pipelineName: string | undefined;
}
export interface DescribeChannelRequest {
  channelName: string | undefined;
  includeStatistics?: boolean;
}
export declare const ChannelStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
};
export type ChannelStatus = (typeof ChannelStatus)[keyof typeof ChannelStatus];
export interface Channel {
  name?: string;
  storage?: ChannelStorage;
  arn?: string;
  status?: ChannelStatus;
  retentionPeriod?: RetentionPeriod;
  creationTime?: Date;
  lastUpdateTime?: Date;
  lastMessageArrivalTime?: Date;
}
export interface EstimatedResourceSize {
  estimatedSizeInBytes?: number;
  estimatedOn?: Date;
}
export interface ChannelStatistics {
  size?: EstimatedResourceSize;
}
export interface DescribeChannelResponse {
  channel?: Channel;
  statistics?: ChannelStatistics;
}
export interface DescribeDatasetRequest {
  datasetName: string | undefined;
}
export declare const DatasetStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
};
export type DatasetStatus = (typeof DatasetStatus)[keyof typeof DatasetStatus];
export interface Dataset {
  name?: string;
  arn?: string;
  actions?: DatasetAction[];
  triggers?: DatasetTrigger[];
  contentDeliveryRules?: DatasetContentDeliveryRule[];
  status?: DatasetStatus;
  creationTime?: Date;
  lastUpdateTime?: Date;
  retentionPeriod?: RetentionPeriod;
  versioningConfiguration?: VersioningConfiguration;
  lateDataRules?: LateDataRule[];
}
export interface DescribeDatasetResponse {
  dataset?: Dataset;
}
export interface DescribeDatastoreRequest {
  datastoreName: string | undefined;
  includeStatistics?: boolean;
}
export declare const DatastoreStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
};
export type DatastoreStatus =
  (typeof DatastoreStatus)[keyof typeof DatastoreStatus];
export interface Datastore {
  name?: string;
  storage?: DatastoreStorage;
  arn?: string;
  status?: DatastoreStatus;
  retentionPeriod?: RetentionPeriod;
  creationTime?: Date;
  lastUpdateTime?: Date;
  lastMessageArrivalTime?: Date;
  fileFormatConfiguration?: FileFormatConfiguration;
  datastorePartitions?: DatastorePartitions;
}
export interface DatastoreStatistics {
  size?: EstimatedResourceSize;
}
export interface DescribeDatastoreResponse {
  datastore?: Datastore;
  statistics?: DatastoreStatistics;
}
export interface DescribeLoggingOptionsRequest {}
export declare const LoggingLevel: {
  readonly ERROR: "ERROR";
};
export type LoggingLevel = (typeof LoggingLevel)[keyof typeof LoggingLevel];
export interface LoggingOptions {
  roleArn: string | undefined;
  level: LoggingLevel | undefined;
  enabled: boolean | undefined;
}
export interface DescribeLoggingOptionsResponse {
  loggingOptions?: LoggingOptions;
}
export interface DescribePipelineRequest {
  pipelineName: string | undefined;
}
export declare const ReprocessingStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type ReprocessingStatus =
  (typeof ReprocessingStatus)[keyof typeof ReprocessingStatus];
export interface ReprocessingSummary {
  id?: string;
  status?: ReprocessingStatus;
  creationTime?: Date;
}
export interface Pipeline {
  name?: string;
  arn?: string;
  activities?: PipelineActivity[];
  reprocessingSummaries?: ReprocessingSummary[];
  creationTime?: Date;
  lastUpdateTime?: Date;
}
export interface DescribePipelineResponse {
  pipeline?: Pipeline;
}
export interface GetDatasetContentRequest {
  datasetName: string | undefined;
  versionId?: string;
}
export interface DatasetEntry {
  entryName?: string;
  dataURI?: string;
}
export declare const DatasetContentState: {
  readonly CREATING: "CREATING";
  readonly FAILED: "FAILED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type DatasetContentState =
  (typeof DatasetContentState)[keyof typeof DatasetContentState];
export interface DatasetContentStatus {
  state?: DatasetContentState;
  reason?: string;
}
export interface GetDatasetContentResponse {
  entries?: DatasetEntry[];
  timestamp?: Date;
  status?: DatasetContentStatus;
}
export interface ListChannelsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface CustomerManagedChannelS3StorageSummary {
  bucket?: string;
  keyPrefix?: string;
  roleArn?: string;
}
export interface ServiceManagedChannelS3StorageSummary {}
export interface ChannelStorageSummary {
  serviceManagedS3?: ServiceManagedChannelS3StorageSummary;
  customerManagedS3?: CustomerManagedChannelS3StorageSummary;
}
export interface ChannelSummary {
  channelName?: string;
  channelStorage?: ChannelStorageSummary;
  status?: ChannelStatus;
  creationTime?: Date;
  lastUpdateTime?: Date;
  lastMessageArrivalTime?: Date;
}
export interface ListChannelsResponse {
  channelSummaries?: ChannelSummary[];
  nextToken?: string;
}
export interface ListDatasetContentsRequest {
  datasetName: string | undefined;
  nextToken?: string;
  maxResults?: number;
  scheduledOnOrAfter?: Date;
  scheduledBefore?: Date;
}
export interface DatasetContentSummary {
  version?: string;
  status?: DatasetContentStatus;
  creationTime?: Date;
  scheduleTime?: Date;
  completionTime?: Date;
}
export interface ListDatasetContentsResponse {
  datasetContentSummaries?: DatasetContentSummary[];
  nextToken?: string;
}
export interface ListDatasetsRequest {
  nextToken?: string;
  maxResults?: number;
}
export declare const DatasetActionType: {
  readonly CONTAINER: "CONTAINER";
  readonly QUERY: "QUERY";
};
export type DatasetActionType =
  (typeof DatasetActionType)[keyof typeof DatasetActionType];
export interface DatasetActionSummary {
  actionName?: string;
  actionType?: DatasetActionType;
}
export interface DatasetSummary {
  datasetName?: string;
  status?: DatasetStatus;
  creationTime?: Date;
  lastUpdateTime?: Date;
  triggers?: DatasetTrigger[];
  actions?: DatasetActionSummary[];
}
export interface ListDatasetsResponse {
  datasetSummaries?: DatasetSummary[];
  nextToken?: string;
}
export interface ListDatastoresRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface CustomerManagedDatastoreS3StorageSummary {
  bucket?: string;
  keyPrefix?: string;
  roleArn?: string;
}
export interface IotSiteWiseCustomerManagedDatastoreS3StorageSummary {
  bucket?: string;
  keyPrefix?: string;
}
export interface DatastoreIotSiteWiseMultiLayerStorageSummary {
  customerManagedS3Storage?: IotSiteWiseCustomerManagedDatastoreS3StorageSummary;
}
export interface ServiceManagedDatastoreS3StorageSummary {}
export interface DatastoreStorageSummary {
  serviceManagedS3?: ServiceManagedDatastoreS3StorageSummary;
  customerManagedS3?: CustomerManagedDatastoreS3StorageSummary;
  iotSiteWiseMultiLayerStorage?: DatastoreIotSiteWiseMultiLayerStorageSummary;
}
export declare const FileFormatType: {
  readonly JSON: "JSON";
  readonly PARQUET: "PARQUET";
};
export type FileFormatType =
  (typeof FileFormatType)[keyof typeof FileFormatType];
export interface DatastoreSummary {
  datastoreName?: string;
  datastoreStorage?: DatastoreStorageSummary;
  status?: DatastoreStatus;
  creationTime?: Date;
  lastUpdateTime?: Date;
  lastMessageArrivalTime?: Date;
  fileFormatType?: FileFormatType;
  datastorePartitions?: DatastorePartitions;
}
export interface ListDatastoresResponse {
  datastoreSummaries?: DatastoreSummary[];
  nextToken?: string;
}
export interface ListPipelinesRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface PipelineSummary {
  pipelineName?: string;
  reprocessingSummaries?: ReprocessingSummary[];
  creationTime?: Date;
  lastUpdateTime?: Date;
}
export interface ListPipelinesResponse {
  pipelineSummaries?: PipelineSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Tag[];
}
export interface PutLoggingOptionsRequest {
  loggingOptions: LoggingOptions | undefined;
}
export interface RunPipelineActivityRequest {
  pipelineActivity: PipelineActivity | undefined;
  payloads: Uint8Array[] | undefined;
}
export interface RunPipelineActivityResponse {
  payloads?: Uint8Array[];
  logResult?: string;
}
export interface SampleChannelDataRequest {
  channelName: string | undefined;
  maxMessages?: number;
  startTime?: Date;
  endTime?: Date;
}
export interface SampleChannelDataResponse {
  payloads?: Uint8Array[];
}
export interface ChannelMessages {
  s3Paths?: string[];
}
export interface StartPipelineReprocessingRequest {
  pipelineName: string | undefined;
  startTime?: Date;
  endTime?: Date;
  channelMessages?: ChannelMessages;
}
export interface StartPipelineReprocessingResponse {
  reprocessingId?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateChannelRequest {
  channelName: string | undefined;
  channelStorage?: ChannelStorage;
  retentionPeriod?: RetentionPeriod;
}
export interface UpdateDatasetRequest {
  datasetName: string | undefined;
  actions: DatasetAction[] | undefined;
  triggers?: DatasetTrigger[];
  contentDeliveryRules?: DatasetContentDeliveryRule[];
  retentionPeriod?: RetentionPeriod;
  versioningConfiguration?: VersioningConfiguration;
  lateDataRules?: LateDataRule[];
}
export interface UpdateDatastoreRequest {
  datastoreName: string | undefined;
  retentionPeriod?: RetentionPeriod;
  datastoreStorage?: DatastoreStorage;
  fileFormatConfiguration?: FileFormatConfiguration;
}
export interface UpdatePipelineRequest {
  pipelineName: string | undefined;
  pipelineActivities: PipelineActivity[] | undefined;
}
