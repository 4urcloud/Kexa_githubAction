"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BatchPutMessageCommand: () => BatchPutMessageCommand,
  CancelPipelineReprocessingCommand: () => CancelPipelineReprocessingCommand,
  ChannelStatus: () => ChannelStatus,
  ComputeType: () => ComputeType,
  CreateChannelCommand: () => CreateChannelCommand,
  CreateDatasetCommand: () => CreateDatasetCommand,
  CreateDatasetContentCommand: () => CreateDatasetContentCommand,
  CreateDatastoreCommand: () => CreateDatastoreCommand,
  CreatePipelineCommand: () => CreatePipelineCommand,
  DatasetActionType: () => DatasetActionType,
  DatasetContentState: () => DatasetContentState,
  DatasetStatus: () => DatasetStatus,
  DatastoreStatus: () => DatastoreStatus,
  DatastoreStorage: () => DatastoreStorage,
  DeleteChannelCommand: () => DeleteChannelCommand,
  DeleteDatasetCommand: () => DeleteDatasetCommand,
  DeleteDatasetContentCommand: () => DeleteDatasetContentCommand,
  DeleteDatastoreCommand: () => DeleteDatastoreCommand,
  DeletePipelineCommand: () => DeletePipelineCommand,
  DescribeChannelCommand: () => DescribeChannelCommand,
  DescribeDatasetCommand: () => DescribeDatasetCommand,
  DescribeDatastoreCommand: () => DescribeDatastoreCommand,
  DescribeLoggingOptionsCommand: () => DescribeLoggingOptionsCommand,
  DescribePipelineCommand: () => DescribePipelineCommand,
  FileFormatType: () => FileFormatType,
  GetDatasetContentCommand: () => GetDatasetContentCommand,
  InternalFailureException: () => InternalFailureException,
  InvalidRequestException: () => InvalidRequestException,
  IoTAnalytics: () => IoTAnalytics,
  IoTAnalyticsClient: () => IoTAnalyticsClient,
  IoTAnalyticsServiceException: () => IoTAnalyticsServiceException,
  LimitExceededException: () => LimitExceededException,
  ListChannelsCommand: () => ListChannelsCommand,
  ListDatasetContentsCommand: () => ListDatasetContentsCommand,
  ListDatasetsCommand: () => ListDatasetsCommand,
  ListDatastoresCommand: () => ListDatastoresCommand,
  ListPipelinesCommand: () => ListPipelinesCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  LoggingLevel: () => LoggingLevel,
  PutLoggingOptionsCommand: () => PutLoggingOptionsCommand,
  ReprocessingStatus: () => ReprocessingStatus,
  ResourceAlreadyExistsException: () => ResourceAlreadyExistsException,
  ResourceNotFoundException: () => ResourceNotFoundException,
  RunPipelineActivityCommand: () => RunPipelineActivityCommand,
  SampleChannelDataCommand: () => SampleChannelDataCommand,
  ServiceUnavailableException: () => ServiceUnavailableException,
  StartPipelineReprocessingCommand: () => StartPipelineReprocessingCommand,
  TagResourceCommand: () => TagResourceCommand,
  ThrottlingException: () => ThrottlingException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateChannelCommand: () => UpdateChannelCommand,
  UpdateDatasetCommand: () => UpdateDatasetCommand,
  UpdateDatastoreCommand: () => UpdateDatastoreCommand,
  UpdatePipelineCommand: () => UpdatePipelineCommand,
  __Client: () => import_smithy_client.Client,
  paginateListChannels: () => paginateListChannels,
  paginateListDatasetContents: () => paginateListDatasetContents,
  paginateListDatasets: () => paginateListDatasets,
  paginateListDatastores: () => paginateListDatastores,
  paginateListPipelines: () => paginateListPipelines
});
module.exports = __toCommonJS(src_exports);

// src/IoTAnalyticsClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "iotanalytics"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/IoTAnalyticsClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/IoTAnalyticsClient.ts
var _IoTAnalyticsClient = class _IoTAnalyticsClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultIoTAnalyticsHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_IoTAnalyticsClient, "IoTAnalyticsClient");
var IoTAnalyticsClient = _IoTAnalyticsClient;

// src/IoTAnalytics.ts


// src/commands/BatchPutMessageCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/IoTAnalyticsServiceException.ts

var _IoTAnalyticsServiceException = class _IoTAnalyticsServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _IoTAnalyticsServiceException.prototype);
  }
};
__name(_IoTAnalyticsServiceException, "IoTAnalyticsServiceException");
var IoTAnalyticsServiceException = _IoTAnalyticsServiceException;

// src/models/models_0.ts
var _InternalFailureException = class _InternalFailureException extends IoTAnalyticsServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalFailureException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalFailureException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalFailureException.prototype);
  }
};
__name(_InternalFailureException, "InternalFailureException");
var InternalFailureException = _InternalFailureException;
var _InvalidRequestException = class _InvalidRequestException extends IoTAnalyticsServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidRequestException.prototype);
  }
};
__name(_InvalidRequestException, "InvalidRequestException");
var InvalidRequestException = _InvalidRequestException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends IoTAnalyticsServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var _ServiceUnavailableException = class _ServiceUnavailableException extends IoTAnalyticsServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
  }
};
__name(_ServiceUnavailableException, "ServiceUnavailableException");
var ServiceUnavailableException = _ServiceUnavailableException;
var _ThrottlingException = class _ThrottlingException extends IoTAnalyticsServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var _LimitExceededException = class _LimitExceededException extends IoTAnalyticsServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
  }
};
__name(_LimitExceededException, "LimitExceededException");
var LimitExceededException = _LimitExceededException;
var _ResourceAlreadyExistsException = class _ResourceAlreadyExistsException extends IoTAnalyticsServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceAlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceAlreadyExistsException.prototype);
    this.resourceId = opts.resourceId;
    this.resourceArn = opts.resourceArn;
  }
};
__name(_ResourceAlreadyExistsException, "ResourceAlreadyExistsException");
var ResourceAlreadyExistsException = _ResourceAlreadyExistsException;
var ComputeType = {
  ACU_1: "ACU_1",
  ACU_2: "ACU_2"
};
var DatastoreStorage;
((DatastoreStorage3) => {
  DatastoreStorage3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.serviceManagedS3 !== void 0)
      return visitor.serviceManagedS3(value.serviceManagedS3);
    if (value.customerManagedS3 !== void 0)
      return visitor.customerManagedS3(value.customerManagedS3);
    if (value.iotSiteWiseMultiLayerStorage !== void 0)
      return visitor.iotSiteWiseMultiLayerStorage(value.iotSiteWiseMultiLayerStorage);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(DatastoreStorage || (DatastoreStorage = {}));
var ChannelStatus = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING"
};
var DatasetStatus = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING"
};
var DatastoreStatus = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING"
};
var LoggingLevel = {
  ERROR: "ERROR"
};
var ReprocessingStatus = {
  CANCELLED: "CANCELLED",
  FAILED: "FAILED",
  RUNNING: "RUNNING",
  SUCCEEDED: "SUCCEEDED"
};
var DatasetContentState = {
  CREATING: "CREATING",
  FAILED: "FAILED",
  SUCCEEDED: "SUCCEEDED"
};
var DatasetActionType = {
  CONTAINER: "CONTAINER",
  QUERY: "QUERY"
};
var FileFormatType = {
  JSON: "JSON",
  PARQUET: "PARQUET"
};

// src/protocols/Aws_restJson1.ts
var se_BatchPutMessageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/messages/batch");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelName: [],
      messages: (_) => se_Messages(_, context)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchPutMessageCommand");
var se_CancelPipelineReprocessingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/pipelines/{pipelineName}/reprocessing/{reprocessingId}");
  b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
  b.p("reprocessingId", () => input.reprocessingId, "{reprocessingId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_CancelPipelineReprocessingCommand");
var se_CreateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/channels");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelName: [],
      channelStorage: (_) => (0, import_smithy_client._json)(_),
      retentionPeriod: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateChannelCommand");
var se_CreateDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/datasets");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      actions: (_) => se_DatasetActions(_, context),
      contentDeliveryRules: (_) => (0, import_smithy_client._json)(_),
      datasetName: [],
      lateDataRules: (_) => (0, import_smithy_client._json)(_),
      retentionPeriod: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_),
      triggers: (_) => (0, import_smithy_client._json)(_),
      versioningConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDatasetCommand");
var se_CreateDatasetContentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/datasets/{datasetName}/content");
  b.p("datasetName", () => input.datasetName, "{datasetName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      versionId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDatasetContentCommand");
var se_CreateDatastoreCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/datastores");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      datastoreName: [],
      datastorePartitions: (_) => (0, import_smithy_client._json)(_),
      datastoreStorage: (_) => (0, import_smithy_client._json)(_),
      fileFormatConfiguration: (_) => (0, import_smithy_client._json)(_),
      retentionPeriod: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDatastoreCommand");
var se_CreatePipelineCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/pipelines");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      pipelineActivities: (_) => (0, import_smithy_client._json)(_),
      pipelineName: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePipelineCommand");
var se_DeleteChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channels/{channelName}");
  b.p("channelName", () => input.channelName, "{channelName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteChannelCommand");
var se_DeleteDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets/{datasetName}");
  b.p("datasetName", () => input.datasetName, "{datasetName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteDatasetCommand");
var se_DeleteDatasetContentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets/{datasetName}/content");
  b.p("datasetName", () => input.datasetName, "{datasetName}", false);
  const query = (0, import_smithy_client.map)({
    [_vI]: [, input[_vI]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteDatasetContentCommand");
var se_DeleteDatastoreCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datastores/{datastoreName}");
  b.p("datastoreName", () => input.datastoreName, "{datastoreName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteDatastoreCommand");
var se_DeletePipelineCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/pipelines/{pipelineName}");
  b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePipelineCommand");
var se_DescribeChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channels/{channelName}");
  b.p("channelName", () => input.channelName, "{channelName}", false);
  const query = (0, import_smithy_client.map)({
    [_iS]: [() => input.includeStatistics !== void 0, () => input[_iS].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeChannelCommand");
var se_DescribeDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets/{datasetName}");
  b.p("datasetName", () => input.datasetName, "{datasetName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDatasetCommand");
var se_DescribeDatastoreCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datastores/{datastoreName}");
  b.p("datastoreName", () => input.datastoreName, "{datastoreName}", false);
  const query = (0, import_smithy_client.map)({
    [_iS]: [() => input.includeStatistics !== void 0, () => input[_iS].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeDatastoreCommand");
var se_DescribeLoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/logging");
  let body;
  body = "";
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeLoggingOptionsCommand");
var se_DescribePipelineCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/pipelines/{pipelineName}");
  b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribePipelineCommand");
var se_GetDatasetContentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets/{datasetName}/content");
  b.p("datasetName", () => input.datasetName, "{datasetName}", false);
  const query = (0, import_smithy_client.map)({
    [_vI]: [, input[_vI]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetDatasetContentCommand");
var se_ListChannelsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channels");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListChannelsCommand");
var se_ListDatasetContentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets/{datasetName}/contents");
  b.p("datasetName", () => input.datasetName, "{datasetName}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_sOOA]: [
      () => input.scheduledOnOrAfter !== void 0,
      () => (input[_sOOA].toISOString().split(".")[0] + "Z").toString()
    ],
    [_sB]: [() => input.scheduledBefore !== void 0, () => (input[_sB].toISOString().split(".")[0] + "Z").toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDatasetContentsCommand");
var se_ListDatasetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDatasetsCommand");
var se_ListDatastoresCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datastores");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDatastoresCommand");
var se_ListPipelinesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/pipelines");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPipelinesCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_rA], `resourceArn`)]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_PutLoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/logging");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      loggingOptions: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutLoggingOptionsCommand");
var se_RunPipelineActivityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/pipelineactivities/run");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      payloads: (_) => se_MessagePayloads(_, context),
      pipelineActivity: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RunPipelineActivityCommand");
var se_SampleChannelDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/channels/{channelName}/sample");
  b.p("channelName", () => input.channelName, "{channelName}", false);
  const query = (0, import_smithy_client.map)({
    [_mM]: [() => input.maxMessages !== void 0, () => input[_mM].toString()],
    [_sT]: [() => input.startTime !== void 0, () => (input[_sT].toISOString().split(".")[0] + "Z").toString()],
    [_eT]: [() => input.endTime !== void 0, () => (input[_eT].toISOString().split(".")[0] + "Z").toString()]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_SampleChannelDataCommand");
var se_StartPipelineReprocessingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/pipelines/{pipelineName}/reprocessing");
  b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelMessages: (_) => (0, import_smithy_client._json)(_),
      endTime: (_) => Math.round(_.getTime() / 1e3),
      startTime: (_) => Math.round(_.getTime() / 1e3)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartPipelineReprocessingCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_rA], `resourceArn`)]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_rA], `resourceArn`)],
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null,
      () => (input[_tK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateChannelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/channels/{channelName}");
  b.p("channelName", () => input.channelName, "{channelName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      channelStorage: (_) => (0, import_smithy_client._json)(_),
      retentionPeriod: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateChannelCommand");
var se_UpdateDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/datasets/{datasetName}");
  b.p("datasetName", () => input.datasetName, "{datasetName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      actions: (_) => se_DatasetActions(_, context),
      contentDeliveryRules: (_) => (0, import_smithy_client._json)(_),
      lateDataRules: (_) => (0, import_smithy_client._json)(_),
      retentionPeriod: (_) => (0, import_smithy_client._json)(_),
      triggers: (_) => (0, import_smithy_client._json)(_),
      versioningConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateDatasetCommand");
var se_UpdateDatastoreCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/datastores/{datastoreName}");
  b.p("datastoreName", () => input.datastoreName, "{datastoreName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      datastoreStorage: (_) => (0, import_smithy_client._json)(_),
      fileFormatConfiguration: (_) => (0, import_smithy_client._json)(_),
      retentionPeriod: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateDatastoreCommand");
var se_UpdatePipelineCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/pipelines/{pipelineName}");
  b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      pipelineActivities: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdatePipelineCommand");
var de_BatchPutMessageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    batchPutMessageErrorEntries: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchPutMessageCommand");
var de_CancelPipelineReprocessingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelPipelineReprocessingCommand");
var de_CreateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channelArn: import_smithy_client.expectString,
    channelName: import_smithy_client.expectString,
    retentionPeriod: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateChannelCommand");
var de_CreateDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetArn: import_smithy_client.expectString,
    datasetName: import_smithy_client.expectString,
    retentionPeriod: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDatasetCommand");
var de_CreateDatasetContentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    versionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDatasetContentCommand");
var de_CreateDatastoreCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datastoreArn: import_smithy_client.expectString,
    datastoreName: import_smithy_client.expectString,
    retentionPeriod: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDatastoreCommand");
var de_CreatePipelineCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    pipelineArn: import_smithy_client.expectString,
    pipelineName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePipelineCommand");
var de_DeleteChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteChannelCommand");
var de_DeleteDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteDatasetCommand");
var de_DeleteDatasetContentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteDatasetContentCommand");
var de_DeleteDatastoreCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteDatastoreCommand");
var de_DeletePipelineCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePipelineCommand");
var de_DescribeChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channel: (_) => de_Channel(_, context),
    statistics: (_) => de_ChannelStatistics(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeChannelCommand");
var de_DescribeDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    dataset: (_) => de_Dataset(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDatasetCommand");
var de_DescribeDatastoreCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datastore: (_) => de_Datastore(_, context),
    statistics: (_) => de_DatastoreStatistics(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDatastoreCommand");
var de_DescribeLoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    loggingOptions: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeLoggingOptionsCommand");
var de_DescribePipelineCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    pipeline: (_) => de_Pipeline(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribePipelineCommand");
var de_GetDatasetContentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    entries: import_smithy_client._json,
    status: import_smithy_client._json,
    timestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetDatasetContentCommand");
var de_ListChannelsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    channelSummaries: (_) => de_ChannelSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListChannelsCommand");
var de_ListDatasetContentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetContentSummaries: (_) => de_DatasetContentSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDatasetContentsCommand");
var de_ListDatasetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetSummaries: (_) => de_DatasetSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDatasetsCommand");
var de_ListDatastoresCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datastoreSummaries: (_) => de_DatastoreSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDatastoresCommand");
var de_ListPipelinesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    pipelineSummaries: (_) => de_PipelineSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPipelinesCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_PutLoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutLoggingOptionsCommand");
var de_RunPipelineActivityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    logResult: import_smithy_client.expectString,
    payloads: (_) => de_MessagePayloads(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RunPipelineActivityCommand");
var de_SampleChannelDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    payloads: (_) => de_MessagePayloads(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SampleChannelDataCommand");
var de_StartPipelineReprocessingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    reprocessingId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartPipelineReprocessingCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateChannelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateChannelCommand");
var de_UpdateDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateDatasetCommand");
var de_UpdateDatastoreCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateDatastoreCommand");
var de_UpdatePipelineCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdatePipelineCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.iotanalytics#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iotanalytics#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iotanalytics#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iotanalytics#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iotanalytics#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iotanalytics#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iotanalytics#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(IoTAnalyticsServiceException);
var de_InternalFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalFailureExceptionRes");
var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidRequestExceptionRes");
var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_LimitExceededExceptionRes");
var de_ResourceAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    resourceArn: import_smithy_client.expectString,
    resourceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceAlreadyExistsExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var se_ContainerDatasetAction = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    executionRoleArn: [],
    image: [],
    resourceConfiguration: import_smithy_client._json,
    variables: (_) => se_Variables(_, context)
  });
}, "se_ContainerDatasetAction");
var se_DatasetAction = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    actionName: [],
    containerAction: (_) => se_ContainerDatasetAction(_, context),
    queryAction: import_smithy_client._json
  });
}, "se_DatasetAction");
var se_DatasetActions = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_DatasetAction(entry, context);
  });
}, "se_DatasetActions");
var se_Message = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    messageId: [],
    payload: context.base64Encoder
  });
}, "se_Message");
var se_MessagePayloads = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return context.base64Encoder(entry);
  });
}, "se_MessagePayloads");
var se_Messages = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Message(entry, context);
  });
}, "se_Messages");
var se_Variable = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    datasetContentVersionValue: import_smithy_client._json,
    doubleValue: import_smithy_client.serializeFloat,
    name: [],
    outputFileUriValue: import_smithy_client._json,
    stringValue: []
  });
}, "se_Variable");
var se_Variables = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Variable(entry, context);
  });
}, "se_Variables");
var de_Channel = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastMessageArrivalTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    retentionPeriod: import_smithy_client._json,
    status: import_smithy_client.expectString,
    storage: import_smithy_client._json
  });
}, "de_Channel");
var de_ChannelStatistics = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    size: (_) => de_EstimatedResourceSize(_, context)
  });
}, "de_ChannelStatistics");
var de_ChannelSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ChannelSummary(entry, context);
  });
  return retVal;
}, "de_ChannelSummaries");
var de_ChannelSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    channelName: import_smithy_client.expectString,
    channelStorage: import_smithy_client._json,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastMessageArrivalTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString
  });
}, "de_ChannelSummary");
var de_ContainerDatasetAction = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    executionRoleArn: import_smithy_client.expectString,
    image: import_smithy_client.expectString,
    resourceConfiguration: import_smithy_client._json,
    variables: (_) => de_Variables(_, context)
  });
}, "de_ContainerDatasetAction");
var de_Dataset = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actions: (_) => de_DatasetActions(_, context),
    arn: import_smithy_client.expectString,
    contentDeliveryRules: import_smithy_client._json,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lateDataRules: import_smithy_client._json,
    name: import_smithy_client.expectString,
    retentionPeriod: import_smithy_client._json,
    status: import_smithy_client.expectString,
    triggers: import_smithy_client._json,
    versioningConfiguration: import_smithy_client._json
  });
}, "de_Dataset");
var de_DatasetAction = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actionName: import_smithy_client.expectString,
    containerAction: (_) => de_ContainerDatasetAction(_, context),
    queryAction: import_smithy_client._json
  });
}, "de_DatasetAction");
var de_DatasetActions = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DatasetAction(entry, context);
  });
  return retVal;
}, "de_DatasetActions");
var de_DatasetContentSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DatasetContentSummary(entry, context);
  });
  return retVal;
}, "de_DatasetContentSummaries");
var de_DatasetContentSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    completionTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    scheduleTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client._json,
    version: import_smithy_client.expectString
  });
}, "de_DatasetContentSummary");
var de_DatasetSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DatasetSummary(entry, context);
  });
  return retVal;
}, "de_DatasetSummaries");
var de_DatasetSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    actions: import_smithy_client._json,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    datasetName: import_smithy_client.expectString,
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString,
    triggers: import_smithy_client._json
  });
}, "de_DatasetSummary");
var de_Datastore = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    datastorePartitions: import_smithy_client._json,
    fileFormatConfiguration: import_smithy_client._json,
    lastMessageArrivalTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    retentionPeriod: import_smithy_client._json,
    status: import_smithy_client.expectString,
    storage: (_) => (0, import_smithy_client._json)((0, import_core2.awsExpectUnion)(_))
  });
}, "de_Datastore");
var de_DatastoreStatistics = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    size: (_) => de_EstimatedResourceSize(_, context)
  });
}, "de_DatastoreStatistics");
var de_DatastoreSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DatastoreSummary(entry, context);
  });
  return retVal;
}, "de_DatastoreSummaries");
var de_DatastoreSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    datastoreName: import_smithy_client.expectString,
    datastorePartitions: import_smithy_client._json,
    datastoreStorage: import_smithy_client._json,
    fileFormatType: import_smithy_client.expectString,
    lastMessageArrivalTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client.expectString
  });
}, "de_DatastoreSummary");
var de_EstimatedResourceSize = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    estimatedOn: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    estimatedSizeInBytes: import_smithy_client.limitedParseDouble
  });
}, "de_EstimatedResourceSize");
var de_MessagePayloads = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return context.base64Decoder(entry);
  });
  return retVal;
}, "de_MessagePayloads");
var de_Pipeline = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    activities: import_smithy_client._json,
    arn: import_smithy_client.expectString,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    reprocessingSummaries: (_) => de_ReprocessingSummaries(_, context)
  });
}, "de_Pipeline");
var de_PipelineSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PipelineSummary(entry, context);
  });
  return retVal;
}, "de_PipelineSummaries");
var de_PipelineSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    lastUpdateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    pipelineName: import_smithy_client.expectString,
    reprocessingSummaries: (_) => de_ReprocessingSummaries(_, context)
  });
}, "de_PipelineSummary");
var de_ReprocessingSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ReprocessingSummary(entry, context);
  });
  return retVal;
}, "de_ReprocessingSummaries");
var de_ReprocessingSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    id: import_smithy_client.expectString,
    status: import_smithy_client.expectString
  });
}, "de_ReprocessingSummary");
var de_Variable = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    datasetContentVersionValue: import_smithy_client._json,
    doubleValue: import_smithy_client.limitedParseDouble,
    name: import_smithy_client.expectString,
    outputFileUriValue: import_smithy_client._json,
    stringValue: import_smithy_client.expectString
  });
}, "de_Variable");
var de_Variables = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Variable(entry, context);
  });
  return retVal;
}, "de_Variables");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var _eT = "endTime";
var _iS = "includeStatistics";
var _mM = "maxMessages";
var _mR = "maxResults";
var _nT = "nextToken";
var _rA = "resourceArn";
var _sB = "scheduledBefore";
var _sOOA = "scheduledOnOrAfter";
var _sT = "startTime";
var _tK = "tagKeys";
var _vI = "versionId";
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/BatchPutMessageCommand.ts
var _BatchPutMessageCommand = class _BatchPutMessageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "BatchPutMessage", {}).n("IoTAnalyticsClient", "BatchPutMessageCommand").f(void 0, void 0).ser(se_BatchPutMessageCommand).de(de_BatchPutMessageCommand).build() {
};
__name(_BatchPutMessageCommand, "BatchPutMessageCommand");
var BatchPutMessageCommand = _BatchPutMessageCommand;

// src/commands/CancelPipelineReprocessingCommand.ts




var _CancelPipelineReprocessingCommand = class _CancelPipelineReprocessingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "CancelPipelineReprocessing", {}).n("IoTAnalyticsClient", "CancelPipelineReprocessingCommand").f(void 0, void 0).ser(se_CancelPipelineReprocessingCommand).de(de_CancelPipelineReprocessingCommand).build() {
};
__name(_CancelPipelineReprocessingCommand, "CancelPipelineReprocessingCommand");
var CancelPipelineReprocessingCommand = _CancelPipelineReprocessingCommand;

// src/commands/CreateChannelCommand.ts




var _CreateChannelCommand = class _CreateChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "CreateChannel", {}).n("IoTAnalyticsClient", "CreateChannelCommand").f(void 0, void 0).ser(se_CreateChannelCommand).de(de_CreateChannelCommand).build() {
};
__name(_CreateChannelCommand, "CreateChannelCommand");
var CreateChannelCommand = _CreateChannelCommand;

// src/commands/CreateDatasetCommand.ts




var _CreateDatasetCommand = class _CreateDatasetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "CreateDataset", {}).n("IoTAnalyticsClient", "CreateDatasetCommand").f(void 0, void 0).ser(se_CreateDatasetCommand).de(de_CreateDatasetCommand).build() {
};
__name(_CreateDatasetCommand, "CreateDatasetCommand");
var CreateDatasetCommand = _CreateDatasetCommand;

// src/commands/CreateDatasetContentCommand.ts




var _CreateDatasetContentCommand = class _CreateDatasetContentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "CreateDatasetContent", {}).n("IoTAnalyticsClient", "CreateDatasetContentCommand").f(void 0, void 0).ser(se_CreateDatasetContentCommand).de(de_CreateDatasetContentCommand).build() {
};
__name(_CreateDatasetContentCommand, "CreateDatasetContentCommand");
var CreateDatasetContentCommand = _CreateDatasetContentCommand;

// src/commands/CreateDatastoreCommand.ts




var _CreateDatastoreCommand = class _CreateDatastoreCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "CreateDatastore", {}).n("IoTAnalyticsClient", "CreateDatastoreCommand").f(void 0, void 0).ser(se_CreateDatastoreCommand).de(de_CreateDatastoreCommand).build() {
};
__name(_CreateDatastoreCommand, "CreateDatastoreCommand");
var CreateDatastoreCommand = _CreateDatastoreCommand;

// src/commands/CreatePipelineCommand.ts




var _CreatePipelineCommand = class _CreatePipelineCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "CreatePipeline", {}).n("IoTAnalyticsClient", "CreatePipelineCommand").f(void 0, void 0).ser(se_CreatePipelineCommand).de(de_CreatePipelineCommand).build() {
};
__name(_CreatePipelineCommand, "CreatePipelineCommand");
var CreatePipelineCommand = _CreatePipelineCommand;

// src/commands/DeleteChannelCommand.ts




var _DeleteChannelCommand = class _DeleteChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DeleteChannel", {}).n("IoTAnalyticsClient", "DeleteChannelCommand").f(void 0, void 0).ser(se_DeleteChannelCommand).de(de_DeleteChannelCommand).build() {
};
__name(_DeleteChannelCommand, "DeleteChannelCommand");
var DeleteChannelCommand = _DeleteChannelCommand;

// src/commands/DeleteDatasetCommand.ts




var _DeleteDatasetCommand = class _DeleteDatasetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DeleteDataset", {}).n("IoTAnalyticsClient", "DeleteDatasetCommand").f(void 0, void 0).ser(se_DeleteDatasetCommand).de(de_DeleteDatasetCommand).build() {
};
__name(_DeleteDatasetCommand, "DeleteDatasetCommand");
var DeleteDatasetCommand = _DeleteDatasetCommand;

// src/commands/DeleteDatasetContentCommand.ts




var _DeleteDatasetContentCommand = class _DeleteDatasetContentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DeleteDatasetContent", {}).n("IoTAnalyticsClient", "DeleteDatasetContentCommand").f(void 0, void 0).ser(se_DeleteDatasetContentCommand).de(de_DeleteDatasetContentCommand).build() {
};
__name(_DeleteDatasetContentCommand, "DeleteDatasetContentCommand");
var DeleteDatasetContentCommand = _DeleteDatasetContentCommand;

// src/commands/DeleteDatastoreCommand.ts




var _DeleteDatastoreCommand = class _DeleteDatastoreCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DeleteDatastore", {}).n("IoTAnalyticsClient", "DeleteDatastoreCommand").f(void 0, void 0).ser(se_DeleteDatastoreCommand).de(de_DeleteDatastoreCommand).build() {
};
__name(_DeleteDatastoreCommand, "DeleteDatastoreCommand");
var DeleteDatastoreCommand = _DeleteDatastoreCommand;

// src/commands/DeletePipelineCommand.ts




var _DeletePipelineCommand = class _DeletePipelineCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DeletePipeline", {}).n("IoTAnalyticsClient", "DeletePipelineCommand").f(void 0, void 0).ser(se_DeletePipelineCommand).de(de_DeletePipelineCommand).build() {
};
__name(_DeletePipelineCommand, "DeletePipelineCommand");
var DeletePipelineCommand = _DeletePipelineCommand;

// src/commands/DescribeChannelCommand.ts




var _DescribeChannelCommand = class _DescribeChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DescribeChannel", {}).n("IoTAnalyticsClient", "DescribeChannelCommand").f(void 0, void 0).ser(se_DescribeChannelCommand).de(de_DescribeChannelCommand).build() {
};
__name(_DescribeChannelCommand, "DescribeChannelCommand");
var DescribeChannelCommand = _DescribeChannelCommand;

// src/commands/DescribeDatasetCommand.ts




var _DescribeDatasetCommand = class _DescribeDatasetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DescribeDataset", {}).n("IoTAnalyticsClient", "DescribeDatasetCommand").f(void 0, void 0).ser(se_DescribeDatasetCommand).de(de_DescribeDatasetCommand).build() {
};
__name(_DescribeDatasetCommand, "DescribeDatasetCommand");
var DescribeDatasetCommand = _DescribeDatasetCommand;

// src/commands/DescribeDatastoreCommand.ts




var _DescribeDatastoreCommand = class _DescribeDatastoreCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DescribeDatastore", {}).n("IoTAnalyticsClient", "DescribeDatastoreCommand").f(void 0, void 0).ser(se_DescribeDatastoreCommand).de(de_DescribeDatastoreCommand).build() {
};
__name(_DescribeDatastoreCommand, "DescribeDatastoreCommand");
var DescribeDatastoreCommand = _DescribeDatastoreCommand;

// src/commands/DescribeLoggingOptionsCommand.ts




var _DescribeLoggingOptionsCommand = class _DescribeLoggingOptionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DescribeLoggingOptions", {}).n("IoTAnalyticsClient", "DescribeLoggingOptionsCommand").f(void 0, void 0).ser(se_DescribeLoggingOptionsCommand).de(de_DescribeLoggingOptionsCommand).build() {
};
__name(_DescribeLoggingOptionsCommand, "DescribeLoggingOptionsCommand");
var DescribeLoggingOptionsCommand = _DescribeLoggingOptionsCommand;

// src/commands/DescribePipelineCommand.ts




var _DescribePipelineCommand = class _DescribePipelineCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "DescribePipeline", {}).n("IoTAnalyticsClient", "DescribePipelineCommand").f(void 0, void 0).ser(se_DescribePipelineCommand).de(de_DescribePipelineCommand).build() {
};
__name(_DescribePipelineCommand, "DescribePipelineCommand");
var DescribePipelineCommand = _DescribePipelineCommand;

// src/commands/GetDatasetContentCommand.ts




var _GetDatasetContentCommand = class _GetDatasetContentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "GetDatasetContent", {}).n("IoTAnalyticsClient", "GetDatasetContentCommand").f(void 0, void 0).ser(se_GetDatasetContentCommand).de(de_GetDatasetContentCommand).build() {
};
__name(_GetDatasetContentCommand, "GetDatasetContentCommand");
var GetDatasetContentCommand = _GetDatasetContentCommand;

// src/commands/ListChannelsCommand.ts




var _ListChannelsCommand = class _ListChannelsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "ListChannels", {}).n("IoTAnalyticsClient", "ListChannelsCommand").f(void 0, void 0).ser(se_ListChannelsCommand).de(de_ListChannelsCommand).build() {
};
__name(_ListChannelsCommand, "ListChannelsCommand");
var ListChannelsCommand = _ListChannelsCommand;

// src/commands/ListDatasetContentsCommand.ts




var _ListDatasetContentsCommand = class _ListDatasetContentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "ListDatasetContents", {}).n("IoTAnalyticsClient", "ListDatasetContentsCommand").f(void 0, void 0).ser(se_ListDatasetContentsCommand).de(de_ListDatasetContentsCommand).build() {
};
__name(_ListDatasetContentsCommand, "ListDatasetContentsCommand");
var ListDatasetContentsCommand = _ListDatasetContentsCommand;

// src/commands/ListDatasetsCommand.ts




var _ListDatasetsCommand = class _ListDatasetsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "ListDatasets", {}).n("IoTAnalyticsClient", "ListDatasetsCommand").f(void 0, void 0).ser(se_ListDatasetsCommand).de(de_ListDatasetsCommand).build() {
};
__name(_ListDatasetsCommand, "ListDatasetsCommand");
var ListDatasetsCommand = _ListDatasetsCommand;

// src/commands/ListDatastoresCommand.ts




var _ListDatastoresCommand = class _ListDatastoresCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "ListDatastores", {}).n("IoTAnalyticsClient", "ListDatastoresCommand").f(void 0, void 0).ser(se_ListDatastoresCommand).de(de_ListDatastoresCommand).build() {
};
__name(_ListDatastoresCommand, "ListDatastoresCommand");
var ListDatastoresCommand = _ListDatastoresCommand;

// src/commands/ListPipelinesCommand.ts




var _ListPipelinesCommand = class _ListPipelinesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "ListPipelines", {}).n("IoTAnalyticsClient", "ListPipelinesCommand").f(void 0, void 0).ser(se_ListPipelinesCommand).de(de_ListPipelinesCommand).build() {
};
__name(_ListPipelinesCommand, "ListPipelinesCommand");
var ListPipelinesCommand = _ListPipelinesCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "ListTagsForResource", {}).n("IoTAnalyticsClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/PutLoggingOptionsCommand.ts




var _PutLoggingOptionsCommand = class _PutLoggingOptionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "PutLoggingOptions", {}).n("IoTAnalyticsClient", "PutLoggingOptionsCommand").f(void 0, void 0).ser(se_PutLoggingOptionsCommand).de(de_PutLoggingOptionsCommand).build() {
};
__name(_PutLoggingOptionsCommand, "PutLoggingOptionsCommand");
var PutLoggingOptionsCommand = _PutLoggingOptionsCommand;

// src/commands/RunPipelineActivityCommand.ts




var _RunPipelineActivityCommand = class _RunPipelineActivityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "RunPipelineActivity", {}).n("IoTAnalyticsClient", "RunPipelineActivityCommand").f(void 0, void 0).ser(se_RunPipelineActivityCommand).de(de_RunPipelineActivityCommand).build() {
};
__name(_RunPipelineActivityCommand, "RunPipelineActivityCommand");
var RunPipelineActivityCommand = _RunPipelineActivityCommand;

// src/commands/SampleChannelDataCommand.ts




var _SampleChannelDataCommand = class _SampleChannelDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "SampleChannelData", {}).n("IoTAnalyticsClient", "SampleChannelDataCommand").f(void 0, void 0).ser(se_SampleChannelDataCommand).de(de_SampleChannelDataCommand).build() {
};
__name(_SampleChannelDataCommand, "SampleChannelDataCommand");
var SampleChannelDataCommand = _SampleChannelDataCommand;

// src/commands/StartPipelineReprocessingCommand.ts




var _StartPipelineReprocessingCommand = class _StartPipelineReprocessingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "StartPipelineReprocessing", {}).n("IoTAnalyticsClient", "StartPipelineReprocessingCommand").f(void 0, void 0).ser(se_StartPipelineReprocessingCommand).de(de_StartPipelineReprocessingCommand).build() {
};
__name(_StartPipelineReprocessingCommand, "StartPipelineReprocessingCommand");
var StartPipelineReprocessingCommand = _StartPipelineReprocessingCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "TagResource", {}).n("IoTAnalyticsClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "UntagResource", {}).n("IoTAnalyticsClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateChannelCommand.ts




var _UpdateChannelCommand = class _UpdateChannelCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "UpdateChannel", {}).n("IoTAnalyticsClient", "UpdateChannelCommand").f(void 0, void 0).ser(se_UpdateChannelCommand).de(de_UpdateChannelCommand).build() {
};
__name(_UpdateChannelCommand, "UpdateChannelCommand");
var UpdateChannelCommand = _UpdateChannelCommand;

// src/commands/UpdateDatasetCommand.ts




var _UpdateDatasetCommand = class _UpdateDatasetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "UpdateDataset", {}).n("IoTAnalyticsClient", "UpdateDatasetCommand").f(void 0, void 0).ser(se_UpdateDatasetCommand).de(de_UpdateDatasetCommand).build() {
};
__name(_UpdateDatasetCommand, "UpdateDatasetCommand");
var UpdateDatasetCommand = _UpdateDatasetCommand;

// src/commands/UpdateDatastoreCommand.ts




var _UpdateDatastoreCommand = class _UpdateDatastoreCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "UpdateDatastore", {}).n("IoTAnalyticsClient", "UpdateDatastoreCommand").f(void 0, void 0).ser(se_UpdateDatastoreCommand).de(de_UpdateDatastoreCommand).build() {
};
__name(_UpdateDatastoreCommand, "UpdateDatastoreCommand");
var UpdateDatastoreCommand = _UpdateDatastoreCommand;

// src/commands/UpdatePipelineCommand.ts




var _UpdatePipelineCommand = class _UpdatePipelineCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTAnalytics", "UpdatePipeline", {}).n("IoTAnalyticsClient", "UpdatePipelineCommand").f(void 0, void 0).ser(se_UpdatePipelineCommand).de(de_UpdatePipelineCommand).build() {
};
__name(_UpdatePipelineCommand, "UpdatePipelineCommand");
var UpdatePipelineCommand = _UpdatePipelineCommand;

// src/IoTAnalytics.ts
var commands = {
  BatchPutMessageCommand,
  CancelPipelineReprocessingCommand,
  CreateChannelCommand,
  CreateDatasetCommand,
  CreateDatasetContentCommand,
  CreateDatastoreCommand,
  CreatePipelineCommand,
  DeleteChannelCommand,
  DeleteDatasetCommand,
  DeleteDatasetContentCommand,
  DeleteDatastoreCommand,
  DeletePipelineCommand,
  DescribeChannelCommand,
  DescribeDatasetCommand,
  DescribeDatastoreCommand,
  DescribeLoggingOptionsCommand,
  DescribePipelineCommand,
  GetDatasetContentCommand,
  ListChannelsCommand,
  ListDatasetContentsCommand,
  ListDatasetsCommand,
  ListDatastoresCommand,
  ListPipelinesCommand,
  ListTagsForResourceCommand,
  PutLoggingOptionsCommand,
  RunPipelineActivityCommand,
  SampleChannelDataCommand,
  StartPipelineReprocessingCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateChannelCommand,
  UpdateDatasetCommand,
  UpdateDatastoreCommand,
  UpdatePipelineCommand
};
var _IoTAnalytics = class _IoTAnalytics extends IoTAnalyticsClient {
};
__name(_IoTAnalytics, "IoTAnalytics");
var IoTAnalytics = _IoTAnalytics;
(0, import_smithy_client.createAggregatedClient)(commands, IoTAnalytics);

// src/pagination/ListChannelsPaginator.ts

var paginateListChannels = (0, import_core.createPaginator)(IoTAnalyticsClient, ListChannelsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDatasetContentsPaginator.ts

var paginateListDatasetContents = (0, import_core.createPaginator)(IoTAnalyticsClient, ListDatasetContentsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDatasetsPaginator.ts

var paginateListDatasets = (0, import_core.createPaginator)(IoTAnalyticsClient, ListDatasetsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDatastoresPaginator.ts

var paginateListDatastores = (0, import_core.createPaginator)(IoTAnalyticsClient, ListDatastoresCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListPipelinesPaginator.ts

var paginateListPipelines = (0, import_core.createPaginator)(IoTAnalyticsClient, ListPipelinesCommand, "nextToken", "nextToken", "maxResults");

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  IoTAnalyticsServiceException,
  __Client,
  IoTAnalyticsClient,
  IoTAnalytics,
  $Command,
  BatchPutMessageCommand,
  CancelPipelineReprocessingCommand,
  CreateChannelCommand,
  CreateDatasetCommand,
  CreateDatasetContentCommand,
  CreateDatastoreCommand,
  CreatePipelineCommand,
  DeleteChannelCommand,
  DeleteDatasetCommand,
  DeleteDatasetContentCommand,
  DeleteDatastoreCommand,
  DeletePipelineCommand,
  DescribeChannelCommand,
  DescribeDatasetCommand,
  DescribeDatastoreCommand,
  DescribeLoggingOptionsCommand,
  DescribePipelineCommand,
  GetDatasetContentCommand,
  ListChannelsCommand,
  ListDatasetContentsCommand,
  ListDatasetsCommand,
  ListDatastoresCommand,
  ListPipelinesCommand,
  ListTagsForResourceCommand,
  PutLoggingOptionsCommand,
  RunPipelineActivityCommand,
  SampleChannelDataCommand,
  StartPipelineReprocessingCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateChannelCommand,
  UpdateDatasetCommand,
  UpdateDatastoreCommand,
  UpdatePipelineCommand,
  paginateListChannels,
  paginateListDatasetContents,
  paginateListDatasets,
  paginateListDatastores,
  paginateListPipelines,
  InternalFailureException,
  InvalidRequestException,
  ResourceNotFoundException,
  ServiceUnavailableException,
  ThrottlingException,
  LimitExceededException,
  ResourceAlreadyExistsException,
  ComputeType,
  DatastoreStorage,
  ChannelStatus,
  DatasetStatus,
  DatastoreStatus,
  LoggingLevel,
  ReprocessingStatus,
  DatasetContentState,
  DatasetActionType,
  FileFormatType
});

