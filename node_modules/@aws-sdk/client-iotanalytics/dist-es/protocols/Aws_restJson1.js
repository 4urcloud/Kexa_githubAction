import { awsExpectUnion as __expectUnion } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { IoTAnalyticsServiceException as __BaseException } from "../models/IoTAnalyticsServiceException";
import { InternalFailureException, InvalidRequestException, LimitExceededException, ResourceAlreadyExistsException, ResourceNotFoundException, ServiceUnavailableException, ThrottlingException, } from "../models/models_0";
export const se_BatchPutMessageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/messages/batch");
    let body;
    body = JSON.stringify(take(input, {
        channelName: [],
        messages: (_) => se_Messages(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelPipelineReprocessingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/pipelines/{pipelineName}/reprocessing/{reprocessingId}");
    b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
    b.p("reprocessingId", () => input.reprocessingId, "{reprocessingId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channels");
    let body;
    body = JSON.stringify(take(input, {
        channelName: [],
        channelStorage: (_) => _json(_),
        retentionPeriod: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasets");
    let body;
    body = JSON.stringify(take(input, {
        actions: (_) => se_DatasetActions(_, context),
        contentDeliveryRules: (_) => _json(_),
        datasetName: [],
        lateDataRules: (_) => _json(_),
        retentionPeriod: (_) => _json(_),
        tags: (_) => _json(_),
        triggers: (_) => _json(_),
        versioningConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDatasetContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasets/{datasetName}/content");
    b.p("datasetName", () => input.datasetName, "{datasetName}", false);
    let body;
    body = JSON.stringify(take(input, {
        versionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDatastoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datastores");
    let body;
    body = JSON.stringify(take(input, {
        datastoreName: [],
        datastorePartitions: (_) => _json(_),
        datastoreStorage: (_) => _json(_),
        fileFormatConfiguration: (_) => _json(_),
        retentionPeriod: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/pipelines");
    let body;
    body = JSON.stringify(take(input, {
        pipelineActivities: (_) => _json(_),
        pipelineName: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channels/{channelName}");
    b.p("channelName", () => input.channelName, "{channelName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets/{datasetName}");
    b.p("datasetName", () => input.datasetName, "{datasetName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDatasetContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets/{datasetName}/content");
    b.p("datasetName", () => input.datasetName, "{datasetName}", false);
    const query = map({
        [_vI]: [, input[_vI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteDatastoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datastores/{datastoreName}");
    b.p("datastoreName", () => input.datastoreName, "{datastoreName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/pipelines/{pipelineName}");
    b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channels/{channelName}");
    b.p("channelName", () => input.channelName, "{channelName}", false);
    const query = map({
        [_iS]: [() => input.includeStatistics !== void 0, () => input[_iS].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets/{datasetName}");
    b.p("datasetName", () => input.datasetName, "{datasetName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeDatastoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datastores/{datastoreName}");
    b.p("datastoreName", () => input.datastoreName, "{datastoreName}", false);
    const query = map({
        [_iS]: [() => input.includeStatistics !== void 0, () => input[_iS].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeLoggingOptionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/logging");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/pipelines/{pipelineName}");
    b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDatasetContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets/{datasetName}/content");
    b.p("datasetName", () => input.datasetName, "{datasetName}", false);
    const query = map({
        [_vI]: [, input[_vI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChannelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channels");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDatasetContentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets/{datasetName}/contents");
    b.p("datasetName", () => input.datasetName, "{datasetName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_sOOA]: [
            () => input.scheduledOnOrAfter !== void 0,
            () => (input[_sOOA].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_sB]: [() => input.scheduledBefore !== void 0, () => (input[_sB].toISOString().split(".")[0] + "Z").toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDatasetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datasets");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDatastoresCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/datastores");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPipelinesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/pipelines");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutLoggingOptionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/logging");
    let body;
    body = JSON.stringify(take(input, {
        loggingOptions: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RunPipelineActivityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/pipelineactivities/run");
    let body;
    body = JSON.stringify(take(input, {
        payloads: (_) => se_MessagePayloads(_, context),
        pipelineActivity: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SampleChannelDataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channels/{channelName}/sample");
    b.p("channelName", () => input.channelName, "{channelName}", false);
    const query = map({
        [_mM]: [() => input.maxMessages !== void 0, () => input[_mM].toString()],
        [_sT]: [() => input.startTime !== void 0, () => (input[_sT].toISOString().split(".")[0] + "Z").toString()],
        [_eT]: [() => input.endTime !== void 0, () => (input[_eT].toISOString().split(".")[0] + "Z").toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartPipelineReprocessingCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/pipelines/{pipelineName}/reprocessing");
    b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
    let body;
    body = JSON.stringify(take(input, {
        channelMessages: (_) => _json(_),
        endTime: (_) => Math.round(_.getTime() / 1000),
        startTime: (_) => Math.round(_.getTime() / 1000),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channels/{channelName}");
    b.p("channelName", () => input.channelName, "{channelName}", false);
    let body;
    body = JSON.stringify(take(input, {
        channelStorage: (_) => _json(_),
        retentionPeriod: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDatasetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datasets/{datasetName}");
    b.p("datasetName", () => input.datasetName, "{datasetName}", false);
    let body;
    body = JSON.stringify(take(input, {
        actions: (_) => se_DatasetActions(_, context),
        contentDeliveryRules: (_) => _json(_),
        lateDataRules: (_) => _json(_),
        retentionPeriod: (_) => _json(_),
        triggers: (_) => _json(_),
        versioningConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDatastoreCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/datastores/{datastoreName}");
    b.p("datastoreName", () => input.datastoreName, "{datastoreName}", false);
    let body;
    body = JSON.stringify(take(input, {
        datastoreStorage: (_) => _json(_),
        fileFormatConfiguration: (_) => _json(_),
        retentionPeriod: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePipelineCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/pipelines/{pipelineName}");
    b.p("pipelineName", () => input.pipelineName, "{pipelineName}", false);
    let body;
    body = JSON.stringify(take(input, {
        pipelineActivities: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_BatchPutMessageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        batchPutMessageErrorEntries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CancelPipelineReprocessingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateChannelCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        channelArn: __expectString,
        channelName: __expectString,
        retentionPeriod: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        datasetArn: __expectString,
        datasetName: __expectString,
        retentionPeriod: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDatasetContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        versionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDatastoreCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        datastoreArn: __expectString,
        datastoreName: __expectString,
        retentionPeriod: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePipelineCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        pipelineArn: __expectString,
        pipelineName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteChannelCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDatasetContentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDatastoreCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePipelineCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        channel: (_) => de_Channel(_, context),
        statistics: (_) => de_ChannelStatistics(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataset: (_) => de_Dataset(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDatastoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        datastore: (_) => de_Datastore(_, context),
        statistics: (_) => de_DatastoreStatistics(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeLoggingOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        loggingOptions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribePipelineCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        pipeline: (_) => de_Pipeline(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDatasetContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        entries: _json,
        status: _json,
        timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        channelSummaries: (_) => de_ChannelSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDatasetContentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        datasetContentSummaries: (_) => de_DatasetContentSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDatasetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        datasetSummaries: (_) => de_DatasetSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDatastoresCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        datastoreSummaries: (_) => de_DatastoreSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPipelinesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        pipelineSummaries: (_) => de_PipelineSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutLoggingOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RunPipelineActivityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        logResult: __expectString,
        payloads: (_) => de_MessagePayloads(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SampleChannelDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        payloads: (_) => de_MessagePayloads(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartPipelineReprocessingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        reprocessingId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDatasetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDatastoreCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdatePipelineCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalFailureException":
        case "com.amazonaws.iotanalytics#InternalFailureException":
            throw await de_InternalFailureExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.iotanalytics#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotanalytics#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.iotanalytics#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.iotanalytics#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.iotanalytics#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.iotanalytics#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_InternalFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceArn: __expectString,
        resourceId: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_ContainerDatasetAction = (input, context) => {
    return take(input, {
        executionRoleArn: [],
        image: [],
        resourceConfiguration: _json,
        variables: (_) => se_Variables(_, context),
    });
};
const se_DatasetAction = (input, context) => {
    return take(input, {
        actionName: [],
        containerAction: (_) => se_ContainerDatasetAction(_, context),
        queryAction: _json,
    });
};
const se_DatasetActions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DatasetAction(entry, context);
    });
};
const se_Message = (input, context) => {
    return take(input, {
        messageId: [],
        payload: context.base64Encoder,
    });
};
const se_MessagePayloads = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return context.base64Encoder(entry);
    });
};
const se_Messages = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Message(entry, context);
    });
};
const se_Variable = (input, context) => {
    return take(input, {
        datasetContentVersionValue: _json,
        doubleValue: __serializeFloat,
        name: [],
        outputFileUriValue: _json,
        stringValue: [],
    });
};
const se_Variables = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Variable(entry, context);
    });
};
const de_Channel = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastMessageArrivalTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        retentionPeriod: _json,
        status: __expectString,
        storage: _json,
    });
};
const de_ChannelStatistics = (output, context) => {
    return take(output, {
        size: (_) => de_EstimatedResourceSize(_, context),
    });
};
const de_ChannelSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelSummary(entry, context);
    });
    return retVal;
};
const de_ChannelSummary = (output, context) => {
    return take(output, {
        channelName: __expectString,
        channelStorage: _json,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastMessageArrivalTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_ContainerDatasetAction = (output, context) => {
    return take(output, {
        executionRoleArn: __expectString,
        image: __expectString,
        resourceConfiguration: _json,
        variables: (_) => de_Variables(_, context),
    });
};
const de_Dataset = (output, context) => {
    return take(output, {
        actions: (_) => de_DatasetActions(_, context),
        arn: __expectString,
        contentDeliveryRules: _json,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lateDataRules: _json,
        name: __expectString,
        retentionPeriod: _json,
        status: __expectString,
        triggers: _json,
        versioningConfiguration: _json,
    });
};
const de_DatasetAction = (output, context) => {
    return take(output, {
        actionName: __expectString,
        containerAction: (_) => de_ContainerDatasetAction(_, context),
        queryAction: _json,
    });
};
const de_DatasetActions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetAction(entry, context);
    });
    return retVal;
};
const de_DatasetContentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetContentSummary(entry, context);
    });
    return retVal;
};
const de_DatasetContentSummary = (output, context) => {
    return take(output, {
        completionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        scheduleTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: _json,
        version: __expectString,
    });
};
const de_DatasetSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetSummary(entry, context);
    });
    return retVal;
};
const de_DatasetSummary = (output, context) => {
    return take(output, {
        actions: _json,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datasetName: __expectString,
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        triggers: _json,
    });
};
const de_Datastore = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datastorePartitions: _json,
        fileFormatConfiguration: _json,
        lastMessageArrivalTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        retentionPeriod: _json,
        status: __expectString,
        storage: (_) => _json(__expectUnion(_)),
    });
};
const de_DatastoreStatistics = (output, context) => {
    return take(output, {
        size: (_) => de_EstimatedResourceSize(_, context),
    });
};
const de_DatastoreSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatastoreSummary(entry, context);
    });
    return retVal;
};
const de_DatastoreSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datastoreName: __expectString,
        datastorePartitions: _json,
        datastoreStorage: _json,
        fileFormatType: __expectString,
        lastMessageArrivalTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_EstimatedResourceSize = (output, context) => {
    return take(output, {
        estimatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        estimatedSizeInBytes: __limitedParseDouble,
    });
};
const de_MessagePayloads = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return context.base64Decoder(entry);
    });
    return retVal;
};
const de_Pipeline = (output, context) => {
    return take(output, {
        activities: _json,
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        reprocessingSummaries: (_) => de_ReprocessingSummaries(_, context),
    });
};
const de_PipelineSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineSummary(entry, context);
    });
    return retVal;
};
const de_PipelineSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        pipelineName: __expectString,
        reprocessingSummaries: (_) => de_ReprocessingSummaries(_, context),
    });
};
const de_ReprocessingSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReprocessingSummary(entry, context);
    });
    return retVal;
};
const de_ReprocessingSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        status: __expectString,
    });
};
const de_Variable = (output, context) => {
    return take(output, {
        datasetContentVersionValue: _json,
        doubleValue: __limitedParseDouble,
        name: __expectString,
        outputFileUriValue: _json,
        stringValue: __expectString,
    });
};
const de_Variables = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Variable(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _eT = "endTime";
const _iS = "includeStatistics";
const _mM = "maxMessages";
const _mR = "maxResults";
const _nT = "nextToken";
const _rA = "resourceArn";
const _sB = "scheduledBefore";
const _sOOA = "scheduledOnOrAfter";
const _sT = "startTime";
const _tK = "tagKeys";
const _vI = "versionId";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
