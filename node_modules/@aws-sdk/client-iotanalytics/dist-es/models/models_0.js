import { IoTAnalyticsServiceException as __BaseException } from "./IoTAnalyticsServiceException";
export class InternalFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceArn = opts.resourceArn;
    }
}
export const ComputeType = {
    ACU_1: "ACU_1",
    ACU_2: "ACU_2",
};
export var DatastoreStorage;
(function (DatastoreStorage) {
    DatastoreStorage.visit = (value, visitor) => {
        if (value.serviceManagedS3 !== undefined)
            return visitor.serviceManagedS3(value.serviceManagedS3);
        if (value.customerManagedS3 !== undefined)
            return visitor.customerManagedS3(value.customerManagedS3);
        if (value.iotSiteWiseMultiLayerStorage !== undefined)
            return visitor.iotSiteWiseMultiLayerStorage(value.iotSiteWiseMultiLayerStorage);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(DatastoreStorage || (DatastoreStorage = {}));
export const ChannelStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
export const DatasetStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
export const DatastoreStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
export const LoggingLevel = {
    ERROR: "ERROR",
};
export const ReprocessingStatus = {
    CANCELLED: "CANCELLED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};
export const DatasetContentState = {
    CREATING: "CREATING",
    FAILED: "FAILED",
    SUCCEEDED: "SUCCEEDED",
};
export const DatasetActionType = {
    CONTAINER: "CONTAINER",
    QUERY: "QUERY",
};
export const FileFormatType = {
    JSON: "JSON",
    PARQUET: "PARQUET",
};
